
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba74  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800bb34  0800bb34  0000cb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf38  0800bf38  0000d13c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bf38  0800bf38  0000d13c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bf38  0800bf38  0000d13c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf38  0800bf38  0000cf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf3c  0800bf3c  0000cf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  0800bf40  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee0  2000013c  0800c07c  0000d13c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000201c  0800c07c  0000e01c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d13c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e65  00000000  00000000  0000d164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005992  00000000  00000000  00032fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff0  00000000  00000000  00038960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018d6  00000000  00000000  0003a950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd92  00000000  00000000  0003c226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b848  00000000  00000000  00058fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a47  00000000  00000000  00084800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125247  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007758  00000000  00000000  0012528c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0012c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000013c 	.word	0x2000013c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bb1c 	.word	0x0800bb1c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000140 	.word	0x20000140
 8000104:	0800bb1c 	.word	0x0800bb1c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readSD */
  readSDHandle = osThreadNew(StartReadSD, NULL, &readSD_attributes);
 800041c:	4a0e      	ldr	r2, [pc, #56]	@ (8000458 <MX_FREERTOS_Init+0x40>)
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <MX_FREERTOS_Init+0x44>)
 8000420:	2100      	movs	r1, #0
 8000422:	0018      	movs	r0, r3
 8000424:	f007 ff54 	bl	80082d0 <osThreadNew>
 8000428:	0002      	movs	r2, r0
 800042a:	4b0d      	ldr	r3, [pc, #52]	@ (8000460 <MX_FREERTOS_Init+0x48>)
 800042c:	601a      	str	r2, [r3, #0]

  /* creation of driveLED */
  driveLEDHandle = osThreadNew(StartDriveLED, NULL, &driveLED_attributes);
 800042e:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <MX_FREERTOS_Init+0x4c>)
 8000430:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <MX_FREERTOS_Init+0x50>)
 8000432:	2100      	movs	r1, #0
 8000434:	0018      	movs	r0, r3
 8000436:	f007 ff4b 	bl	80082d0 <osThreadNew>
 800043a:	0002      	movs	r2, r0
 800043c:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <MX_FREERTOS_Init+0x54>)
 800043e:	601a      	str	r2, [r3, #0]

  /* creation of SDtoMemory */
  SDtoMemoryHandle = osThreadNew(StartSDtoMemory, NULL, &SDtoMemory_attributes);
 8000440:	4a0b      	ldr	r2, [pc, #44]	@ (8000470 <MX_FREERTOS_Init+0x58>)
 8000442:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <MX_FREERTOS_Init+0x5c>)
 8000444:	2100      	movs	r1, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f007 ff42 	bl	80082d0 <osThreadNew>
 800044c:	0002      	movs	r2, r0
 800044e:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <MX_FREERTOS_Init+0x60>)
 8000450:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	0800bd68 	.word	0x0800bd68
 800045c:	0800047d 	.word	0x0800047d
 8000460:	20000158 	.word	0x20000158
 8000464:	0800bd8c 	.word	0x0800bd8c
 8000468:	0800048d 	.word	0x0800048d
 800046c:	2000015c 	.word	0x2000015c
 8000470:	0800bdb0 	.word	0x0800bdb0
 8000474:	08000599 	.word	0x08000599
 8000478:	20000160 	.word	0x20000160

0800047c <StartReadSD>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadSD */
void StartReadSD(void *argument)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSD */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000484:	2001      	movs	r0, #1
 8000486:	f007 ffb9 	bl	80083fc <osDelay>
 800048a:	e7fb      	b.n	8000484 <StartReadSD+0x8>

0800048c <StartDriveLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDriveLED */
void StartDriveLED(void *argument)
{
 800048c:	b590      	push	{r4, r7, lr}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDriveLED */
  /* Infinite loop */
  for(;;)
  {
	  for (uint8_t i = 0; i < 16; i++) {
 8000494:	230f      	movs	r3, #15
 8000496:	18fb      	adds	r3, r7, r3
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
 800049c:	e069      	b.n	8000572 <StartDriveLED+0xe6>
		  // turn off last row
		  HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_RESET);
 800049e:	210f      	movs	r1, #15
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	781a      	ldrb	r2, [r3, #0]
 80004a4:	4b36      	ldr	r3, [pc, #216]	@ (8000580 <StartDriveLED+0xf4>)
 80004a6:	0092      	lsls	r2, r2, #2
 80004a8:	58d0      	ldr	r0, [r2, r3]
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <StartDriveLED+0xf8>)
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	5ad3      	ldrh	r3, [r2, r3]
 80004b4:	2200      	movs	r2, #0
 80004b6:	0019      	movs	r1, r3
 80004b8:	f001 fb26 	bl	8001b08 <HAL_GPIO_WritePin>

		  // set columns
		  // 0000 0000 0000 0000
		  for (uint8_t j = 0; j < 16; j++) {
 80004bc:	230e      	movs	r3, #14
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
 80004c4:	e03a      	b.n	800053c <StartDriveLED+0xb0>
			  if (base_mem_addr[current_frame * 16 + i * 2] & 0x1 << (16-j)) {
 80004c6:	4b30      	ldr	r3, [pc, #192]	@ (8000588 <StartDriveLED+0xfc>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b30      	ldr	r3, [pc, #192]	@ (800058c <StartDriveLED+0x100>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	00d9      	lsls	r1, r3, #3
 80004d0:	230f      	movs	r3, #15
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	18cb      	adds	r3, r1, r3
 80004d8:	00db      	lsls	r3, r3, #3
 80004da:	18d3      	adds	r3, r2, r3
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	200e      	movs	r0, #14
 80004e0:	183a      	adds	r2, r7, r0
 80004e2:	7812      	ldrb	r2, [r2, #0]
 80004e4:	2110      	movs	r1, #16
 80004e6:	1a8a      	subs	r2, r1, r2
 80004e8:	2101      	movs	r1, #1
 80004ea:	4091      	lsls	r1, r2
 80004ec:	000a      	movs	r2, r1
 80004ee:	4013      	ands	r3, r2
 80004f0:	d00f      	beq.n	8000512 <StartDriveLED+0x86>
				  HAL_GPIO_WritePin(led_column_ports[j], led_column_pins[j], GPIO_PIN_SET);
 80004f2:	0001      	movs	r1, r0
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	4b25      	ldr	r3, [pc, #148]	@ (8000590 <StartDriveLED+0x104>)
 80004fa:	0092      	lsls	r2, r2, #2
 80004fc:	58d0      	ldr	r0, [r2, r3]
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	4b24      	ldr	r3, [pc, #144]	@ (8000594 <StartDriveLED+0x108>)
 8000504:	0052      	lsls	r2, r2, #1
 8000506:	5ad3      	ldrh	r3, [r2, r3]
 8000508:	2201      	movs	r2, #1
 800050a:	0019      	movs	r1, r3
 800050c:	f001 fafc 	bl	8001b08 <HAL_GPIO_WritePin>
 8000510:	e00e      	b.n	8000530 <StartDriveLED+0xa4>
			  } else {
				  HAL_GPIO_WritePin(led_column_ports[j], led_column_pins[j], GPIO_PIN_RESET);
 8000512:	210e      	movs	r1, #14
 8000514:	187b      	adds	r3, r7, r1
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	4b1d      	ldr	r3, [pc, #116]	@ (8000590 <StartDriveLED+0x104>)
 800051a:	0092      	lsls	r2, r2, #2
 800051c:	58d0      	ldr	r0, [r2, r3]
 800051e:	187b      	adds	r3, r7, r1
 8000520:	781a      	ldrb	r2, [r3, #0]
 8000522:	4b1c      	ldr	r3, [pc, #112]	@ (8000594 <StartDriveLED+0x108>)
 8000524:	0052      	lsls	r2, r2, #1
 8000526:	5ad3      	ldrh	r3, [r2, r3]
 8000528:	2200      	movs	r2, #0
 800052a:	0019      	movs	r1, r3
 800052c:	f001 faec 	bl	8001b08 <HAL_GPIO_WritePin>
		  for (uint8_t j = 0; j < 16; j++) {
 8000530:	210e      	movs	r1, #14
 8000532:	187b      	adds	r3, r7, r1
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	187b      	adds	r3, r7, r1
 8000538:	3201      	adds	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
 800053c:	230e      	movs	r3, #14
 800053e:	18fb      	adds	r3, r7, r3
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b0f      	cmp	r3, #15
 8000544:	d9bf      	bls.n	80004c6 <StartDriveLED+0x3a>
			  }
		  }

		  // turn on next row
		  HAL_GPIO_WritePin(led_row_ports[i+1], led_row_pins[i+1], GPIO_PIN_SET);
 8000546:	240f      	movs	r4, #15
 8000548:	193b      	adds	r3, r7, r4
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <StartDriveLED+0xf4>)
 8000550:	0092      	lsls	r2, r2, #2
 8000552:	58d0      	ldr	r0, [r2, r3]
 8000554:	193b      	adds	r3, r7, r4
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	1c5a      	adds	r2, r3, #1
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <StartDriveLED+0xf8>)
 800055c:	0052      	lsls	r2, r2, #1
 800055e:	5ad3      	ldrh	r3, [r2, r3]
 8000560:	2201      	movs	r2, #1
 8000562:	0019      	movs	r1, r3
 8000564:	f001 fad0 	bl	8001b08 <HAL_GPIO_WritePin>
	  for (uint8_t i = 0; i < 16; i++) {
 8000568:	193b      	adds	r3, r7, r4
 800056a:	781a      	ldrb	r2, [r3, #0]
 800056c:	193b      	adds	r3, r7, r4
 800056e:	3201      	adds	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	230f      	movs	r3, #15
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d990      	bls.n	800049e <StartDriveLED+0x12>
 800057c:	e78a      	b.n	8000494 <StartDriveLED+0x8>
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	20000060 	.word	0x20000060
 8000584:	200000a0 	.word	0x200000a0
 8000588:	200000c0 	.word	0x200000c0
 800058c:	200001b8 	.word	0x200001b8
 8000590:	20000000 	.word	0x20000000
 8000594:	20000040 	.word	0x20000040

08000598 <StartSDtoMemory>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSDtoMemory */
void StartSDtoMemory(void *argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDtoMemory */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f007 ff2b 	bl	80083fc <osDelay>
 80005a6:	e7fb      	b.n	80005a0 <StartSDtoMemory+0x8>

080005a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ae:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005b2:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005b4:	2101      	movs	r1, #1
 80005b6:	430a      	orrs	r2, r1
 80005b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <MX_DMA_Init+0x38>)
 80005bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005be:	2201      	movs	r2, #1
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2103      	movs	r1, #3
 80005ca:	2009      	movs	r0, #9
 80005cc:	f000 ff1c 	bl	8001408 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005d0:	2009      	movs	r0, #9
 80005d2:	f000 ff2e 	bl	8001432 <HAL_NVIC_EnableIRQ>

}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b002      	add	sp, #8
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b08b      	sub	sp, #44	@ 0x2c
 80005e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ea:	2414      	movs	r4, #20
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	0018      	movs	r0, r3
 80005f0:	2314      	movs	r3, #20
 80005f2:	001a      	movs	r2, r3
 80005f4:	2100      	movs	r1, #0
 80005f6:	f00a fdb3 	bl	800b160 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b54      	ldr	r3, [pc, #336]	@ (800074c <MX_GPIO_Init+0x168>)
 80005fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005fe:	4b53      	ldr	r3, [pc, #332]	@ (800074c <MX_GPIO_Init+0x168>)
 8000600:	2104      	movs	r1, #4
 8000602:	430a      	orrs	r2, r1
 8000604:	635a      	str	r2, [r3, #52]	@ 0x34
 8000606:	4b51      	ldr	r3, [pc, #324]	@ (800074c <MX_GPIO_Init+0x168>)
 8000608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800060a:	2204      	movs	r2, #4
 800060c:	4013      	ands	r3, r2
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b4e      	ldr	r3, [pc, #312]	@ (800074c <MX_GPIO_Init+0x168>)
 8000614:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000616:	4b4d      	ldr	r3, [pc, #308]	@ (800074c <MX_GPIO_Init+0x168>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34
 800061e:	4b4b      	ldr	r3, [pc, #300]	@ (800074c <MX_GPIO_Init+0x168>)
 8000620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b48      	ldr	r3, [pc, #288]	@ (800074c <MX_GPIO_Init+0x168>)
 800062c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800062e:	4b47      	ldr	r3, [pc, #284]	@ (800074c <MX_GPIO_Init+0x168>)
 8000630:	2102      	movs	r1, #2
 8000632:	430a      	orrs	r2, r1
 8000634:	635a      	str	r2, [r3, #52]	@ 0x34
 8000636:	4b45      	ldr	r3, [pc, #276]	@ (800074c <MX_GPIO_Init+0x168>)
 8000638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800063a:	2202      	movs	r2, #2
 800063c:	4013      	ands	r3, r2
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000642:	4b42      	ldr	r3, [pc, #264]	@ (800074c <MX_GPIO_Init+0x168>)
 8000644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000646:	4b41      	ldr	r3, [pc, #260]	@ (800074c <MX_GPIO_Init+0x168>)
 8000648:	2108      	movs	r1, #8
 800064a:	430a      	orrs	r2, r1
 800064c:	635a      	str	r2, [r3, #52]	@ 0x34
 800064e:	4b3f      	ldr	r3, [pc, #252]	@ (800074c <MX_GPIO_Init+0x168>)
 8000650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000652:	2208      	movs	r2, #8
 8000654:	4013      	ands	r3, r2
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Column2_Pin|LED_Column1_Pin|LED_Column14_Pin|LED_Column13_Pin
 800065a:	493d      	ldr	r1, [pc, #244]	@ (8000750 <MX_GPIO_Init+0x16c>)
 800065c:	4b3d      	ldr	r3, [pc, #244]	@ (8000754 <MX_GPIO_Init+0x170>)
 800065e:	2200      	movs	r2, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fa51 	bl	8001b08 <HAL_GPIO_WritePin>
                          |LED_Column7_Pin|LED_Row12_Pin|LED_Row11_Pin|LED_Row1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Column16_Pin|LED_Column15_Pin|LED_Column9_Pin|LED_Column8_Pin
 8000666:	493c      	ldr	r1, [pc, #240]	@ (8000758 <MX_GPIO_Init+0x174>)
 8000668:	23a0      	movs	r3, #160	@ 0xa0
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2200      	movs	r2, #0
 800066e:	0018      	movs	r0, r3
 8000670:	f001 fa4a 	bl	8001b08 <HAL_GPIO_WritePin>
                          |LED_Column6_Pin|LED_Row15_Pin|LED_Row14_Pin|LED_Row13_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LED_Column12_Pin|LED_Column11_Pin|LED_Column10_Pin
 8000674:	4939      	ldr	r1, [pc, #228]	@ (800075c <MX_GPIO_Init+0x178>)
 8000676:	4b3a      	ldr	r3, [pc, #232]	@ (8000760 <MX_GPIO_Init+0x17c>)
 8000678:	2200      	movs	r2, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fa44 	bl	8001b08 <HAL_GPIO_WritePin>
                          |LED_Column5_Pin|LED_Column4_Pin|LED_Column3_Pin|LED_Row3_Pin
                          |LED_Row2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Row16_Pin|LED_Row10_Pin|LED_Row9_Pin|LED_Row8_Pin
 8000680:	4938      	ldr	r1, [pc, #224]	@ (8000764 <MX_GPIO_Init+0x180>)
 8000682:	4b39      	ldr	r3, [pc, #228]	@ (8000768 <MX_GPIO_Init+0x184>)
 8000684:	2200      	movs	r2, #0
 8000686:	0018      	movs	r0, r3
 8000688:	f001 fa3e 	bl	8001b08 <HAL_GPIO_WritePin>
                          |LED_Row7_Pin|LED_Row6_Pin|LED_Row5_Pin|LED_Row4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Column2_Pin|LED_Column1_Pin|LED_Column14_Pin|LED_Column13_Pin
 800068c:	193b      	adds	r3, r7, r4
 800068e:	4a30      	ldr	r2, [pc, #192]	@ (8000750 <MX_GPIO_Init+0x16c>)
 8000690:	601a      	str	r2, [r3, #0]
                          |LED_Column7_Pin|LED_Row12_Pin|LED_Row11_Pin|LED_Row1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2201      	movs	r2, #1
 8000696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <MX_GPIO_Init+0x170>)
 80006a8:	0019      	movs	r1, r3
 80006aa:	0010      	movs	r0, r2
 80006ac:	f001 f8c8 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Column16_Pin|LED_Column15_Pin|LED_Column9_Pin|LED_Column8_Pin
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <MX_GPIO_Init+0x174>)
 80006b4:	601a      	str	r2, [r3, #0]
                          |LED_Column6_Pin|LED_Row15_Pin|LED_Row14_Pin|LED_Row13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2201      	movs	r2, #1
 80006ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c8:	193a      	adds	r2, r7, r4
 80006ca:	23a0      	movs	r3, #160	@ 0xa0
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	0011      	movs	r1, r2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 f8b5 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2202      	movs	r2, #2
 80006da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2201      	movs	r2, #1
 80006e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2201      	movs	r2, #1
 80006e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2202      	movs	r2, #2
 80006ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000760 <MX_GPIO_Init+0x17c>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f001 f8a3 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Column12_Pin|LED_Column11_Pin|LED_Column10_Pin|LED_Column5_Pin
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	4a1b      	ldr	r2, [pc, #108]	@ (800076c <MX_GPIO_Init+0x188>)
 80006fe:	601a      	str	r2, [r3, #0]
                          |LED_Column4_Pin|LED_Column3_Pin|LED_Row3_Pin|LED_Row2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2201      	movs	r2, #1
 8000704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	193b      	adds	r3, r7, r4
 8000714:	4a12      	ldr	r2, [pc, #72]	@ (8000760 <MX_GPIO_Init+0x17c>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f001 f891 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_Row16_Pin|LED_Row10_Pin|LED_Row9_Pin|LED_Row8_Pin
 800071e:	0021      	movs	r1, r4
 8000720:	187b      	adds	r3, r7, r1
 8000722:	4a10      	ldr	r2, [pc, #64]	@ (8000764 <MX_GPIO_Init+0x180>)
 8000724:	601a      	str	r2, [r3, #0]
                          |LED_Row7_Pin|LED_Row6_Pin|LED_Row5_Pin|LED_Row4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2201      	movs	r2, #1
 800072a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000738:	187b      	adds	r3, r7, r1
 800073a:	4a0b      	ldr	r2, [pc, #44]	@ (8000768 <MX_GPIO_Init+0x184>)
 800073c:	0019      	movs	r1, r3
 800073e:	0010      	movs	r0, r2
 8000740:	f001 f87e 	bl	8001840 <HAL_GPIO_Init>

}
 8000744:	46c0      	nop			@ (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b00b      	add	sp, #44	@ 0x2c
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	40021000 	.word	0x40021000
 8000750:	00001fb0 	.word	0x00001fb0
 8000754:	50000800 	.word	0x50000800
 8000758:	00009f12 	.word	0x00009f12
 800075c:	000058fa 	.word	0x000058fa
 8000760:	50000400 	.word	0x50000400
 8000764:	0000027f 	.word	0x0000027f
 8000768:	50000c00 	.word	0x50000c00
 800076c:	000058f8 	.word	0x000058f8

08000770 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <MX_I2C1_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007ac:	0018      	movs	r0, r3
 80007ae:	f001 f9c9 	bl	8001b44 <HAL_I2C_Init>
 80007b2:	1e03      	subs	r3, r0, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 fa31 	bl	8000c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007bc:	2100      	movs	r1, #0
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fa66 	bl	8001c90 <HAL_I2CEx_ConfigAnalogFilter>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fa28 	bl	8000c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007ce:	2100      	movs	r1, #0
 80007d0:	0018      	movs	r0, r3
 80007d2:	f001 faa9 	bl	8001d28 <HAL_I2CEx_ConfigDigitalFilter>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 fa1f 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000164 	.word	0x20000164
 80007e8:	40005400 	.word	0x40005400
 80007ec:	00503d58 	.word	0x00503d58

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b091      	sub	sp, #68	@ 0x44
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	232c      	movs	r3, #44	@ 0x2c
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	0018      	movs	r0, r3
 80007fe:	2314      	movs	r3, #20
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f00a fcac 	bl	800b160 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000808:	2410      	movs	r4, #16
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	231c      	movs	r3, #28
 8000810:	001a      	movs	r2, r3
 8000812:	2100      	movs	r1, #0
 8000814:	f00a fca4 	bl	800b160 <memset>
  if(i2cHandle->Instance==I2C1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <HAL_I2C_MspInit+0xb8>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d13e      	bne.n	80008a0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2220      	movs	r2, #32
 8000826:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fff5 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800083a:	f000 f9ef 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <HAL_I2C_MspInit+0xbc>)
 8000840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000842:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <HAL_I2C_MspInit+0xbc>)
 8000844:	2102      	movs	r1, #2
 8000846:	430a      	orrs	r2, r1
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
 800084a:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <HAL_I2C_MspInit+0xbc>)
 800084c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800084e:	2202      	movs	r2, #2
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000856:	212c      	movs	r1, #44	@ 0x2c
 8000858:	187b      	adds	r3, r7, r1
 800085a:	22c0      	movs	r2, #192	@ 0xc0
 800085c:	0092      	lsls	r2, r2, #2
 800085e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2212      	movs	r2, #18
 8000864:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2206      	movs	r2, #6
 8000876:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000878:	187b      	adds	r3, r7, r1
 800087a:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <HAL_I2C_MspInit+0xc0>)
 800087c:	0019      	movs	r1, r3
 800087e:	0010      	movs	r0, r2
 8000880:	f000 ffde 	bl	8001840 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <HAL_I2C_MspInit+0xbc>)
 8000886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000888:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <HAL_I2C_MspInit+0xbc>)
 800088a:	2180      	movs	r1, #128	@ 0x80
 800088c:	0389      	lsls	r1, r1, #14
 800088e:	430a      	orrs	r2, r1
 8000890:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <HAL_I2C_MspInit+0xbc>)
 8000894:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000896:	2380      	movs	r3, #128	@ 0x80
 8000898:	039b      	lsls	r3, r3, #14
 800089a:	4013      	ands	r3, r2
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b011      	add	sp, #68	@ 0x44
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	40005400 	.word	0x40005400
 80008ac:	40021000 	.word	0x40021000
 80008b0:	50000400 	.word	0x50000400

080008b4 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80008b4:	b40f      	push	{r0, r1, r2, r3}
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80008bc:	2314      	movs	r3, #20
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	0049      	lsls	r1, r1, #1
 80008ca:	480c      	ldr	r0, [pc, #48]	@ (80008fc <myprintf+0x48>)
 80008cc:	f00a fc3c 	bl	800b148 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <myprintf+0x48>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fc18 	bl	8000108 <strlen>
 80008d8:	0003      	movs	r3, r0
 80008da:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	2301      	movs	r3, #1
 80008e2:	425b      	negs	r3, r3
 80008e4:	4905      	ldr	r1, [pc, #20]	@ (80008fc <myprintf+0x48>)
 80008e6:	4806      	ldr	r0, [pc, #24]	@ (8000900 <myprintf+0x4c>)
 80008e8:	f003 fa0e 	bl	8003d08 <HAL_UART_Transmit>

}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bc80      	pop	{r7}
 80008f4:	bc08      	pop	{r3}
 80008f6:	b004      	add	sp, #16
 80008f8:	4718      	bx	r3
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	200001bc 	.word	0x200001bc
 8000900:	20000418 	.word	0x20000418

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000906:	4c7d      	ldr	r4, [pc, #500]	@ (8000afc <main+0x1f8>)
 8000908:	44a5      	add	sp, r4
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090c:	f000 fc94 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000910:	f000 f918 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000914:	f7ff fe66 	bl	80005e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000918:	f7ff fe46 	bl	80005a8 <MX_DMA_Init>
  MX_SPI1_Init();
 800091c:	f000 f984 	bl	8000c28 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000920:	f003 ff88 	bl	8004834 <MX_FATFS_Init>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <main+0x28>
    Error_Handler();
 8000928:	f000 f978 	bl	8000c1c <Error_Handler>
  }
  MX_USART2_UART_Init();
 800092c:	f000 fbac 	bl	8001088 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000930:	f000 fb5a 	bl	8000fe8 <MX_TIM16_Init>
  MX_I2C1_Init();
 8000934:	f7ff ff1c 	bl	8000770 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000938:	4b71      	ldr	r3, [pc, #452]	@ (8000b00 <main+0x1fc>)
 800093a:	0018      	movs	r0, r3
 800093c:	f7ff ffba 	bl	80008b4 <myprintf>
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000940:	23fa      	movs	r3, #250	@ 0xfa
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	0018      	movs	r0, r3
 8000946:	f000 fcb3 	bl	80012b0 <HAL_Delay>
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 800094a:	4d6e      	ldr	r5, [pc, #440]	@ (8000b04 <main+0x200>)
 800094c:	197c      	adds	r4, r7, r5
 800094e:	496e      	ldr	r1, [pc, #440]	@ (8000b08 <main+0x204>)
 8000950:	2397      	movs	r3, #151	@ 0x97
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	2201      	movs	r2, #1
 8000958:	0018      	movs	r0, r3
 800095a:	f006 fbe7 	bl	800712c <f_mount>
 800095e:	0003      	movs	r3, r0
 8000960:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8000962:	197b      	adds	r3, r7, r5
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d008      	beq.n	800097c <main+0x78>
		myprintf("f_mount error (%i)\r\n", fres);
 800096a:	197b      	adds	r3, r7, r5
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b67      	ldr	r3, [pc, #412]	@ (8000b0c <main+0x208>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff ff9e 	bl	80008b4 <myprintf>
		while(1);
 8000978:	46c0      	nop			@ (mov r8, r8)
 800097a:	e7fd      	b.n	8000978 <main+0x74>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 800097c:	4d61      	ldr	r5, [pc, #388]	@ (8000b04 <main+0x200>)
 800097e:	197c      	adds	r4, r7, r5
 8000980:	2324      	movs	r3, #36	@ 0x24
 8000982:	18fa      	adds	r2, r7, r3
 8000984:	2328      	movs	r3, #40	@ 0x28
 8000986:	18f9      	adds	r1, r7, r3
 8000988:	4b5f      	ldr	r3, [pc, #380]	@ (8000b08 <main+0x204>)
 800098a:	0018      	movs	r0, r3
 800098c:	f007 fa18 	bl	8007dc0 <f_getfree>
 8000990:	0003      	movs	r3, r0
 8000992:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8000994:	197b      	adds	r3, r7, r5
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <main+0xaa>
	myprintf("f_getfree error (%i)\r\n", fres);
 800099c:	197b      	adds	r3, r7, r5
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b10 <main+0x20c>)
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ff85 	bl	80008b4 <myprintf>
	while(1);
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	e7fd      	b.n	80009aa <main+0xa6>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80009ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	3b02      	subs	r3, #2
 80009b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009b6:	8952      	ldrh	r2, [r2, #10]
 80009b8:	4353      	muls	r3, r2
 80009ba:	2193      	movs	r1, #147	@ 0x93
 80009bc:	00c9      	lsls	r1, r1, #3
 80009be:	187a      	adds	r2, r7, r1
 80009c0:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	895b      	ldrh	r3, [r3, #10]
 80009c6:	001a      	movs	r2, r3
 80009c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009ca:	4353      	muls	r3, r2
 80009cc:	4a51      	ldr	r2, [pc, #324]	@ (8000b14 <main+0x210>)
 80009ce:	18b8      	adds	r0, r7, r2
 80009d0:	6003      	str	r3, [r0, #0]

	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	0859      	lsrs	r1, r3, #1
 80009d8:	18bb      	adds	r3, r7, r2
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	085a      	lsrs	r2, r3, #1
 80009de:	4b4e      	ldr	r3, [pc, #312]	@ (8000b18 <main+0x214>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff ff67 	bl	80008b4 <myprintf>

	//Now let's try to open file "test.txt"
	fres = f_open(&fil, "test.txt", FA_READ);
 80009e6:	4d47      	ldr	r5, [pc, #284]	@ (8000b04 <main+0x200>)
 80009e8:	197c      	adds	r4, r7, r5
 80009ea:	494c      	ldr	r1, [pc, #304]	@ (8000b1c <main+0x218>)
 80009ec:	232c      	movs	r3, #44	@ 0x2c
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2201      	movs	r2, #1
 80009f2:	0018      	movs	r0, r3
 80009f4:	f006 fc02 	bl	80071fc <f_open>
 80009f8:	0003      	movs	r3, r0
 80009fa:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 80009fc:	197b      	adds	r3, r7, r5
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d005      	beq.n	8000a10 <main+0x10c>
	myprintf("f_open error (%i)\r\n");
 8000a04:	4b46      	ldr	r3, [pc, #280]	@ (8000b20 <main+0x21c>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f7ff ff54 	bl	80008b4 <myprintf>
	while(1);
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	e7fd      	b.n	8000a0c <main+0x108>
	}
	myprintf("I was able to open 'test.txt' for reading!\r\n");
 8000a10:	4b44      	ldr	r3, [pc, #272]	@ (8000b24 <main+0x220>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff ff4e 	bl	80008b4 <myprintf>
	//Read 30 bytes from "test.txt" on the SD card
	BYTE readBuf[30];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8000a18:	232c      	movs	r3, #44	@ 0x2c
 8000a1a:	18fa      	adds	r2, r7, r3
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	211e      	movs	r1, #30
 8000a20:	0018      	movs	r0, r3
 8000a22:	f007 fa91 	bl	8007f48 <f_gets>
 8000a26:	0003      	movs	r3, r0
 8000a28:	2292      	movs	r2, #146	@ 0x92
 8000a2a:	00d2      	lsls	r2, r2, #3
 8000a2c:	18b9      	adds	r1, r7, r2
 8000a2e:	600b      	str	r3, [r1, #0]
	if(rres != 0) {
 8000a30:	18bb      	adds	r3, r7, r2
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d006      	beq.n	8000a46 <main+0x142>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000a38:	1d3a      	adds	r2, r7, #4
 8000a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b28 <main+0x224>)
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff ff38 	bl	80008b4 <myprintf>
 8000a44:	e007      	b.n	8000a56 <main+0x152>
	} else {
	myprintf("f_gets error (%i)\r\n", fres);
 8000a46:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <main+0x200>)
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b37      	ldr	r3, [pc, #220]	@ (8000b2c <main+0x228>)
 8000a4e:	0011      	movs	r1, r2
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff ff2f 	bl	80008b4 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8000a56:	252c      	movs	r5, #44	@ 0x2c
 8000a58:	197b      	adds	r3, r7, r5
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f007 f977 	bl	8007d4e <f_close>

	//Now let's try and write a file "write.txt"
	fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000a60:	4e28      	ldr	r6, [pc, #160]	@ (8000b04 <main+0x200>)
 8000a62:	19bc      	adds	r4, r7, r6
 8000a64:	4932      	ldr	r1, [pc, #200]	@ (8000b30 <main+0x22c>)
 8000a66:	197b      	adds	r3, r7, r5
 8000a68:	221a      	movs	r2, #26
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f006 fbc6 	bl	80071fc <f_open>
 8000a70:	0003      	movs	r3, r0
 8000a72:	7023      	strb	r3, [r4, #0]
	if(fres == FR_OK) {
 8000a74:	19bb      	adds	r3, r7, r6
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d104      	bne.n	8000a86 <main+0x182>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b34 <main+0x230>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff ff18 	bl	80008b4 <myprintf>
 8000a84:	e007      	b.n	8000a96 <main+0x192>
	} else {
	myprintf("f_open error (%i)\r\n", fres);
 8000a86:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <main+0x200>)
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	4b24      	ldr	r3, [pc, #144]	@ (8000b20 <main+0x21c>)
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff ff0f 	bl	80008b4 <myprintf>
	}

	//Copy in a string
	memcpy((char*)readBuf, "a new file is made!", 19);
 8000a96:	4928      	ldr	r1, [pc, #160]	@ (8000b38 <main+0x234>)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2213      	movs	r2, #19
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f00a fbf3 	bl	800b288 <memcpy>
	UINT bytesWrote;
	fres = f_write(&fil, readBuf, 19, &bytesWrote);
 8000aa2:	4d18      	ldr	r5, [pc, #96]	@ (8000b04 <main+0x200>)
 8000aa4:	197c      	adds	r4, r7, r5
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	1d39      	adds	r1, r7, #4
 8000aaa:	222c      	movs	r2, #44	@ 0x2c
 8000aac:	18b8      	adds	r0, r7, r2
 8000aae:	2213      	movs	r2, #19
 8000ab0:	f006 ff0f 	bl	80078d2 <f_write>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	7023      	strb	r3, [r4, #0]
	if(fres == FR_OK) {
 8000ab8:	197b      	adds	r3, r7, r5
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d106      	bne.n	8000ace <main+0x1ca>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <main+0x238>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff fef4 	bl	80008b4 <myprintf>
 8000acc:	e003      	b.n	8000ad6 <main+0x1d2>
	} else {
	myprintf("f_write error (%i)\r\n");
 8000ace:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <main+0x23c>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff feef 	bl	80008b4 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8000ad6:	232c      	movs	r3, #44	@ 0x2c
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	0018      	movs	r0, r3
 8000adc:	f007 f937 	bl	8007d4e <f_close>

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 8000ae0:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <main+0x204>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	0019      	movs	r1, r3
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f006 fb20 	bl	800712c <f_mount>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aec:	f007 fba8 	bl	8008240 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000af0:	f7ff fc92 	bl	8000418 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000af4:	f007 fbc6 	bl	8008284 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	e7fd      	b.n	8000af8 <main+0x1f4>
 8000afc:	fffffb5c 	.word	0xfffffb5c
 8000b00:	0800bb54 	.word	0x0800bb54
 8000b04:	0000049f 	.word	0x0000049f
 8000b08:	0800bb74 	.word	0x0800bb74
 8000b0c:	0800bb78 	.word	0x0800bb78
 8000b10:	0800bb90 	.word	0x0800bb90
 8000b14:	00000494 	.word	0x00000494
 8000b18:	0800bba8 	.word	0x0800bba8
 8000b1c:	0800bbf0 	.word	0x0800bbf0
 8000b20:	0800bbfc 	.word	0x0800bbfc
 8000b24:	0800bc10 	.word	0x0800bc10
 8000b28:	0800bc40 	.word	0x0800bc40
 8000b2c:	0800bc6c 	.word	0x0800bc6c
 8000b30:	0800bc80 	.word	0x0800bc80
 8000b34:	0800bc8c 	.word	0x0800bc8c
 8000b38:	0800bcbc 	.word	0x0800bcbc
 8000b3c:	0800bcd0 	.word	0x0800bcd0
 8000b40:	0800bcf4 	.word	0x0800bcf4

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b093      	sub	sp, #76	@ 0x4c
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	2414      	movs	r4, #20
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2334      	movs	r3, #52	@ 0x34
 8000b52:	001a      	movs	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	f00a fb03 	bl	800b160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2310      	movs	r3, #16
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f00a fafc 	bl	800b160 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 f927 	bl	8001dc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2202      	movs	r2, #2
 8000b76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2280      	movs	r2, #128	@ 0x80
 8000b7c:	0052      	lsls	r2, r2, #1
 8000b7e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2240      	movs	r2, #64	@ 0x40
 8000b8a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	0018      	movs	r0, r3
 8000b96:	f001 f95f 	bl	8001e58 <HAL_RCC_OscConfig>
 8000b9a:	1e03      	subs	r3, r0, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b9e:	f000 f83d 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 fc5a 	bl	8002478 <HAL_RCC_ClockConfig>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000bc8:	f000 f828 	bl	8000c1c <Error_Handler>
  }
}
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b013      	add	sp, #76	@ 0x4c
 8000bd2:	bd90      	pop	{r4, r7, pc}

08000bd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim == &htim16 ) {
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d10a      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x26>
	    current_frame = (current_frame + 1) % 55;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	2137      	movs	r1, #55	@ 0x37
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fc0d 	bl	800040c <__aeabi_idivmod>
 8000bf2:	000b      	movs	r3, r1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b07      	ldr	r3, [pc, #28]	@ (8000c14 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a06      	ldr	r2, [pc, #24]	@ (8000c18 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d101      	bne.n	8000c08 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8000c04:	f000 fb38 	bl	8001278 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b002      	add	sp, #8
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200003cc 	.word	0x200003cc
 8000c14:	200001b8 	.word	0x200001b8
 8000c18:	40001000 	.word	0x40001000

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	46c0      	nop			@ (mov r8, r8)
 8000c26:	e7fd      	b.n	8000c24 <Error_Handler+0x8>

08000c28 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca0 <MX_SPI1_Init+0x78>)
 8000c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c32:	4b1a      	ldr	r3, [pc, #104]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c34:	2282      	movs	r2, #130	@ 0x82
 8000c36:	0052      	lsls	r2, r2, #1
 8000c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c40:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c42:	22e0      	movs	r2, #224	@ 0xe0
 8000c44:	00d2      	lsls	r2, r2, #3
 8000c46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c56:	2280      	movs	r2, #128	@ 0x80
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c5e:	2228      	movs	r2, #40	@ 0x28
 8000c60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c76:	2207      	movs	r2, #7
 8000c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <MX_SPI1_Init+0x74>)
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f001 fefd 	bl	8002a88 <HAL_SPI_Init>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c92:	f7ff ffc3 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200002bc 	.word	0x200002bc
 8000ca0:	40013000 	.word	0x40013000

08000ca4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b08b      	sub	sp, #44	@ 0x2c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	2414      	movs	r4, #20
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	2314      	movs	r3, #20
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f00a fa52 	bl	800b160 <memset>
  if(spiHandle->Instance==SPI1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a34      	ldr	r2, [pc, #208]	@ (8000d94 <HAL_SPI_MspInit+0xf0>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d161      	bne.n	8000d8a <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc6:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <HAL_SPI_MspInit+0xf4>)
 8000cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cca:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <HAL_SPI_MspInit+0xf4>)
 8000ccc:	2180      	movs	r1, #128	@ 0x80
 8000cce:	0149      	lsls	r1, r1, #5
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cd4:	4b30      	ldr	r3, [pc, #192]	@ (8000d98 <HAL_SPI_MspInit+0xf4>)
 8000cd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cd8:	2380      	movs	r3, #128	@ 0x80
 8000cda:	015b      	lsls	r3, r3, #5
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <HAL_SPI_MspInit+0xf4>)
 8000ce4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <HAL_SPI_MspInit+0xf4>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	430a      	orrs	r2, r1
 8000cec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cee:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <HAL_SPI_MspInit+0xf4>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cfa:	0021      	movs	r1, r4
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	22e0      	movs	r2, #224	@ 0xe0
 8000d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2202      	movs	r2, #2
 8000d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2203      	movs	r2, #3
 8000d12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	187a      	adds	r2, r7, r1
 8000d1c:	23a0      	movs	r3, #160	@ 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fd8c 	bl	8001840 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000da0 <HAL_SPI_MspInit+0xfc>)
 8000d2c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d30:	2210      	movs	r2, #16
 8000d32:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d40:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d42:	2280      	movs	r2, #128	@ 0x80
 8000d44:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000d52:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d58:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fb77 	bl	8001454 <HAL_DMA_Init>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000d6a:	f7ff ff57 	bl	8000c1c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d72:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_SPI_MspInit+0xf8>)
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	2019      	movs	r0, #25
 8000d80:	f000 fb42 	bl	8001408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000d84:	2019      	movs	r0, #25
 8000d86:	f000 fb54 	bl	8001432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b00b      	add	sp, #44	@ 0x2c
 8000d90:	bd90      	pop	{r4, r7, pc}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	20000320 	.word	0x20000320
 8000da0:	40020008 	.word	0x40020008

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_MspInit+0x50>)
 8000dac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <HAL_MspInit+0x50>)
 8000db0:	2101      	movs	r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000db6:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <HAL_MspInit+0x50>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <HAL_MspInit+0x50>)
 8000dc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_MspInit+0x50>)
 8000dc8:	2180      	movs	r1, #128	@ 0x80
 8000dca:	0549      	lsls	r1, r1, #21
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_MspInit+0x50>)
 8000dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd4:	2380      	movs	r3, #128	@ 0x80
 8000dd6:	055b      	lsls	r3, r3, #21
 8000dd8:	4013      	ands	r3, r2
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000dde:	2302      	movs	r3, #2
 8000de0:	425b      	negs	r3, r3
 8000de2:	2200      	movs	r2, #0
 8000de4:	2103      	movs	r1, #3
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fb0e 	bl	8001408 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b002      	add	sp, #8
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b08c      	sub	sp, #48	@ 0x30
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e00:	232b      	movs	r3, #43	@ 0x2b
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e08:	4b37      	ldr	r3, [pc, #220]	@ (8000ee8 <HAL_InitTick+0xf0>)
 8000e0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <HAL_InitTick+0xf0>)
 8000e0e:	2110      	movs	r1, #16
 8000e10:	430a      	orrs	r2, r1
 8000e12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e14:	4b34      	ldr	r3, [pc, #208]	@ (8000ee8 <HAL_InitTick+0xf0>)
 8000e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e18:	2210      	movs	r2, #16
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e20:	230c      	movs	r3, #12
 8000e22:	18fa      	adds	r2, r7, r3
 8000e24:	2410      	movs	r4, #16
 8000e26:	193b      	adds	r3, r7, r4
 8000e28:	0011      	movs	r1, r2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f001 fcce 	bl	80027cc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d104      	bne.n	8000e46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e3c:	f001 fcb0 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8000e40:	0003      	movs	r3, r0
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e44:	e004      	b.n	8000e50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e46:	f001 fcab 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e52:	4926      	ldr	r1, [pc, #152]	@ (8000eec <HAL_InitTick+0xf4>)
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff f969 	bl	800012c <__udivsi3>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <HAL_InitTick+0xf8>)
 8000e62:	4a24      	ldr	r2, [pc, #144]	@ (8000ef4 <HAL_InitTick+0xfc>)
 8000e64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <HAL_InitTick+0xf8>)
 8000e68:	4a23      	ldr	r2, [pc, #140]	@ (8000ef8 <HAL_InitTick+0x100>)
 8000e6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <HAL_InitTick+0xf8>)
 8000e6e:	6a3a      	ldr	r2, [r7, #32]
 8000e70:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <HAL_InitTick+0xf8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <HAL_InitTick+0xf8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <HAL_InitTick+0xf8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e84:	252b      	movs	r5, #43	@ 0x2b
 8000e86:	197c      	adds	r4, r7, r5
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_InitTick+0xf8>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 fc74 	bl	8003778 <HAL_TIM_Base_Init>
 8000e90:	0003      	movs	r3, r0
 8000e92:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000e94:	197b      	adds	r3, r7, r5
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d11e      	bne.n	8000eda <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e9c:	197c      	adds	r4, r7, r5
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_InitTick+0xf8>)
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f002 fcc1 	bl	8003828 <HAL_TIM_Base_Start_IT>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000eaa:	197b      	adds	r3, r7, r5
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d113      	bne.n	8000eda <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000eb2:	2011      	movs	r0, #17
 8000eb4:	f000 fabd 	bl	8001432 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d809      	bhi.n	8000ed2 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	2011      	movs	r0, #17
 8000ec6:	f000 fa9f 	bl	8001408 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_InitTick+0x104>)
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e003      	b.n	8000eda <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8000ed2:	232b      	movs	r3, #43	@ 0x2b
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000eda:	232b      	movs	r3, #43	@ 0x2b
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	781b      	ldrb	r3, [r3, #0]
}
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b00c      	add	sp, #48	@ 0x30
 8000ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	000f4240 	.word	0x000f4240
 8000ef0:	2000037c 	.word	0x2000037c
 8000ef4:	40001000 	.word	0x40001000
 8000ef8:	000003e7 	.word	0x000003e7
 8000efc:	200000c8 	.word	0x200000c8

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	46c0      	nop			@ (mov r8, r8)
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f14:	4b03      	ldr	r3, [pc, #12]	@ (8000f24 <DMA1_Channel1_IRQHandler+0x14>)
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 fb90 	bl	800163c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	20000320 	.word	0x20000320

08000f28 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <TIM6_IRQHandler+0x14>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f002 fcd0 	bl	80038d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	2000037c 	.word	0x2000037c

08000f40 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <TIM16_IRQHandler+0x14>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f002 fcc4 	bl	80038d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000f4c:	46c0      	nop			@ (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			@ (mov r8, r8)
 8000f54:	200003cc 	.word	0x200003cc

08000f58 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <SPI1_IRQHandler+0x14>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f002 f98c 	bl	800327c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	200002bc 	.word	0x200002bc

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f00a f946 	bl	800b230 <__errno>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	425b      	negs	r3, r3
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	18d2      	adds	r2, r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	@ (8000fd4 <_sbrk+0x64>)
 8000fc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20009000 	.word	0x20009000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	200003c8 	.word	0x200003c8
 8000fd8:	20002020 	.word	0x20002020

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	46c0      	nop			@ (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <MX_TIM16_Init+0x44>)
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <MX_TIM16_Init+0x48>)
 8000ff0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <MX_TIM16_Init+0x44>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <MX_TIM16_Init+0x44>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 36360-1;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <MX_TIM16_Init+0x44>)
 8001000:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <MX_TIM16_Init+0x4c>)
 8001002:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b09      	ldr	r3, [pc, #36]	@ (800102c <MX_TIM16_Init+0x44>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <MX_TIM16_Init+0x44>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	@ (800102c <MX_TIM16_Init+0x44>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001016:	4b05      	ldr	r3, [pc, #20]	@ (800102c <MX_TIM16_Init+0x44>)
 8001018:	0018      	movs	r0, r3
 800101a:	f002 fbad 	bl	8003778 <HAL_TIM_Base_Init>
 800101e:	1e03      	subs	r3, r0, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8001022:	f7ff fdfb 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200003cc 	.word	0x200003cc
 8001030:	40014400 	.word	0x40014400
 8001034:	00008e07 	.word	0x00008e07

08001038 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <HAL_TIM_Base_MspInit+0x48>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d115      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800104a:	4b0e      	ldr	r3, [pc, #56]	@ (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 800104c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800104e:	4b0d      	ldr	r3, [pc, #52]	@ (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	0289      	lsls	r1, r1, #10
 8001054:	430a      	orrs	r2, r1
 8001056:	641a      	str	r2, [r3, #64]	@ 0x40
 8001058:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_TIM_Base_MspInit+0x4c>)
 800105a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	029b      	lsls	r3, r3, #10
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2103      	movs	r1, #3
 800106a:	2015      	movs	r0, #21
 800106c:	f000 f9cc 	bl	8001408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001070:	2015      	movs	r0, #21
 8001072:	f000 f9de 	bl	8001432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b004      	add	sp, #16
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	40014400 	.word	0x40014400
 8001084:	40021000 	.word	0x40021000

08001088 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_USART2_UART_Init+0x94>)
 800108e:	4a24      	ldr	r2, [pc, #144]	@ (8001120 <MX_USART2_UART_Init+0x98>)
 8001090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001092:	4b22      	ldr	r3, [pc, #136]	@ (800111c <MX_USART2_UART_Init+0x94>)
 8001094:	22e1      	movs	r2, #225	@ 0xe1
 8001096:	0252      	lsls	r2, r2, #9
 8001098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_USART2_UART_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a0:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010ac:	4b1b      	ldr	r3, [pc, #108]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b8:	4b18      	ldr	r3, [pc, #96]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010be:	4b17      	ldr	r3, [pc, #92]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c4:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ca:	4b14      	ldr	r3, [pc, #80]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010d2:	0018      	movs	r0, r3
 80010d4:	f002 fdc2 	bl	8003c5c <HAL_UART_Init>
 80010d8:	1e03      	subs	r3, r0, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010dc:	f7ff fd9e 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010e2:	2100      	movs	r1, #0
 80010e4:	0018      	movs	r0, r3
 80010e6:	f003 fac5 	bl	8004674 <HAL_UARTEx_SetTxFifoThreshold>
 80010ea:	1e03      	subs	r3, r0, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010ee:	f7ff fd95 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_USART2_UART_Init+0x94>)
 80010f4:	2100      	movs	r1, #0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f003 fafc 	bl	80046f4 <HAL_UARTEx_SetRxFifoThreshold>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001100:	f7ff fd8c 	bl	8000c1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <MX_USART2_UART_Init+0x94>)
 8001106:	0018      	movs	r0, r3
 8001108:	f003 fa7a 	bl	8004600 <HAL_UARTEx_DisableFifoMode>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d001      	beq.n	8001114 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001110:	f7ff fd84 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001114:	46c0      	nop			@ (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	20000418 	.word	0x20000418
 8001120:	40004400 	.word	0x40004400

08001124 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b091      	sub	sp, #68	@ 0x44
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	232c      	movs	r3, #44	@ 0x2c
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	0018      	movs	r0, r3
 8001132:	2314      	movs	r3, #20
 8001134:	001a      	movs	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	f00a f812 	bl	800b160 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	2410      	movs	r4, #16
 800113e:	193b      	adds	r3, r7, r4
 8001140:	0018      	movs	r0, r3
 8001142:	231c      	movs	r3, #28
 8001144:	001a      	movs	r2, r3
 8001146:	2100      	movs	r1, #0
 8001148:	f00a f80a 	bl	800b160 <memset>
  if(uartHandle->Instance==USART2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a22      	ldr	r2, [pc, #136]	@ (80011dc <HAL_UART_MspInit+0xb8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d13e      	bne.n	80011d4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001156:	193b      	adds	r3, r7, r4
 8001158:	2202      	movs	r2, #2
 800115a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800115c:	193b      	adds	r3, r7, r4
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001162:	193b      	adds	r3, r7, r4
 8001164:	0018      	movs	r0, r3
 8001166:	f001 fb5b 	bl	8002820 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	1e03      	subs	r3, r0, #0
 800116c:	d001      	beq.n	8001172 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800116e:	f7ff fd55 	bl	8000c1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <HAL_UART_MspInit+0xbc>)
 8001174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_UART_MspInit+0xbc>)
 8001178:	2180      	movs	r1, #128	@ 0x80
 800117a:	0289      	lsls	r1, r1, #10
 800117c:	430a      	orrs	r2, r1
 800117e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_UART_MspInit+0xbc>)
 8001182:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001184:	2380      	movs	r3, #128	@ 0x80
 8001186:	029b      	lsls	r3, r3, #10
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_UART_MspInit+0xbc>)
 8001190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_UART_MspInit+0xbc>)
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	@ 0x34
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_UART_MspInit+0xbc>)
 800119c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800119e:	2201      	movs	r2, #1
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011a6:	212c      	movs	r1, #44	@ 0x2c
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2202      	movs	r2, #2
 80011b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2201      	movs	r2, #1
 80011c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	187a      	adds	r2, r7, r1
 80011c8:	23a0      	movs	r3, #160	@ 0xa0
 80011ca:	05db      	lsls	r3, r3, #23
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f000 fb36 	bl	8001840 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b011      	add	sp, #68	@ 0x44
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	40004400 	.word	0x40004400
 80011e0:	40021000 	.word	0x40021000

080011e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011e4:	480d      	ldr	r0, [pc, #52]	@ (800121c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e8:	f7ff fef8 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	@ (8001224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	@ (8001230 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001212:	f00a f813 	bl	800b23c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001216:	f7ff fb75 	bl	8000904 <main>

0800121a <LoopForever>:

LoopForever:
  b LoopForever
 800121a:	e7fe      	b.n	800121a <LoopForever>
  ldr   r0, =_estack
 800121c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001228:	0800bf40 	.word	0x0800bf40
  ldr r2, =_sbss
 800122c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001230:	2000201c 	.word	0x2000201c

08001234 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_IRQHandler>
	...

08001238 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	2200      	movs	r2, #0
 8001242:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <HAL_Init+0x3c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_Init+0x3c>)
 800124a:	2180      	movs	r1, #128	@ 0x80
 800124c:	0049      	lsls	r1, r1, #1
 800124e:	430a      	orrs	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001252:	2003      	movs	r0, #3
 8001254:	f7ff fdd0 	bl	8000df8 <HAL_InitTick>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d003      	beq.n	8001264 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	2201      	movs	r2, #1
 8001260:	701a      	strb	r2, [r3, #0]
 8001262:	e001      	b.n	8001268 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001264:	f7ff fd9e 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	781b      	ldrb	r3, [r3, #0]
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40022000 	.word	0x40022000

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_IncTick+0x1c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	001a      	movs	r2, r3
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_IncTick+0x20>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	18d2      	adds	r2, r2, r3
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_IncTick+0x20>)
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	46c0      	nop			@ (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	200000cc 	.word	0x200000cc
 8001298:	200004ac 	.word	0x200004ac

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b02      	ldr	r3, [pc, #8]	@ (80012ac <HAL_GetTick+0x10>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	200004ac 	.word	0x200004ac

080012b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff fff0 	bl	800129c <HAL_GetTick>
 80012bc:	0003      	movs	r3, r0
 80012be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	001a      	movs	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	189b      	adds	r3, r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	f7ff ffe0 	bl	800129c <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b004      	add	sp, #16
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			@ (mov r8, r8)
 80012f4:	200000cc 	.word	0x200000cc

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	0002      	movs	r2, r0
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b7f      	cmp	r3, #127	@ 0x7f
 800130a:	d809      	bhi.n	8001320 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	001a      	movs	r2, r3
 8001312:	231f      	movs	r3, #31
 8001314:	401a      	ands	r2, r3
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <__NVIC_EnableIRQ+0x30>)
 8001318:	2101      	movs	r1, #1
 800131a:	4091      	lsls	r1, r2
 800131c:	000a      	movs	r2, r1
 800131e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b002      	add	sp, #8
 8001326:	bd80      	pop	{r7, pc}
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	0002      	movs	r2, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001340:	d828      	bhi.n	8001394 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001342:	4a2f      	ldr	r2, [pc, #188]	@ (8001400 <__NVIC_SetPriority+0xd4>)
 8001344:	1dfb      	adds	r3, r7, #7
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b25b      	sxtb	r3, r3
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	33c0      	adds	r3, #192	@ 0xc0
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	589b      	ldr	r3, [r3, r2]
 8001352:	1dfa      	adds	r2, r7, #7
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	0011      	movs	r1, r2
 8001358:	2203      	movs	r2, #3
 800135a:	400a      	ands	r2, r1
 800135c:	00d2      	lsls	r2, r2, #3
 800135e:	21ff      	movs	r1, #255	@ 0xff
 8001360:	4091      	lsls	r1, r2
 8001362:	000a      	movs	r2, r1
 8001364:	43d2      	mvns	r2, r2
 8001366:	401a      	ands	r2, r3
 8001368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	019b      	lsls	r3, r3, #6
 800136e:	22ff      	movs	r2, #255	@ 0xff
 8001370:	401a      	ands	r2, r3
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	0018      	movs	r0, r3
 8001378:	2303      	movs	r3, #3
 800137a:	4003      	ands	r3, r0
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001380:	481f      	ldr	r0, [pc, #124]	@ (8001400 <__NVIC_SetPriority+0xd4>)
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	430a      	orrs	r2, r1
 800138c:	33c0      	adds	r3, #192	@ 0xc0
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001392:	e031      	b.n	80013f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001394:	4a1b      	ldr	r2, [pc, #108]	@ (8001404 <__NVIC_SetPriority+0xd8>)
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	0019      	movs	r1, r3
 800139c:	230f      	movs	r3, #15
 800139e:	400b      	ands	r3, r1
 80013a0:	3b08      	subs	r3, #8
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3306      	adds	r3, #6
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	18d3      	adds	r3, r2, r3
 80013aa:	3304      	adds	r3, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	1dfa      	adds	r2, r7, #7
 80013b0:	7812      	ldrb	r2, [r2, #0]
 80013b2:	0011      	movs	r1, r2
 80013b4:	2203      	movs	r2, #3
 80013b6:	400a      	ands	r2, r1
 80013b8:	00d2      	lsls	r2, r2, #3
 80013ba:	21ff      	movs	r1, #255	@ 0xff
 80013bc:	4091      	lsls	r1, r2
 80013be:	000a      	movs	r2, r1
 80013c0:	43d2      	mvns	r2, r2
 80013c2:	401a      	ands	r2, r3
 80013c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	019b      	lsls	r3, r3, #6
 80013ca:	22ff      	movs	r2, #255	@ 0xff
 80013cc:	401a      	ands	r2, r3
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	0018      	movs	r0, r3
 80013d4:	2303      	movs	r3, #3
 80013d6:	4003      	ands	r3, r0
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013dc:	4809      	ldr	r0, [pc, #36]	@ (8001404 <__NVIC_SetPriority+0xd8>)
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	001c      	movs	r4, r3
 80013e4:	230f      	movs	r3, #15
 80013e6:	4023      	ands	r3, r4
 80013e8:	3b08      	subs	r3, #8
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	430a      	orrs	r2, r1
 80013ee:	3306      	adds	r3, #6
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	18c3      	adds	r3, r0, r3
 80013f4:	3304      	adds	r3, #4
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b003      	add	sp, #12
 80013fe:	bd90      	pop	{r4, r7, pc}
 8001400:	e000e100 	.word	0xe000e100
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	210f      	movs	r1, #15
 8001414:	187b      	adds	r3, r7, r1
 8001416:	1c02      	adds	r2, r0, #0
 8001418:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	187b      	adds	r3, r7, r1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b25b      	sxtb	r3, r3
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f7ff ff81 	bl	800132c <__NVIC_SetPriority>
}
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	0002      	movs	r2, r0
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	b25b      	sxtb	r3, r3
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff ff57 	bl	80012f8 <__NVIC_EnableIRQ>
}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e077      	b.n	8001556 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a3d      	ldr	r2, [pc, #244]	@ (8001560 <HAL_DMA_Init+0x10c>)
 800146c:	4694      	mov	ip, r2
 800146e:	4463      	add	r3, ip
 8001470:	2114      	movs	r1, #20
 8001472:	0018      	movs	r0, r3
 8001474:	f7fe fe5a 	bl	800012c <__udivsi3>
 8001478:	0003      	movs	r3, r0
 800147a:	009a      	lsls	r2, r3, #2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2225      	movs	r2, #37	@ 0x25
 8001484:	2102      	movs	r1, #2
 8001486:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4934      	ldr	r1, [pc, #208]	@ (8001564 <HAL_DMA_Init+0x110>)
 8001494:	400a      	ands	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6819      	ldr	r1, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	431a      	orrs	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 f965 	bl	80017a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	2380      	movs	r3, #128	@ 0x80
 80014dc:	01db      	lsls	r3, r3, #7
 80014de:	429a      	cmp	r2, r3
 80014e0:	d102      	bne.n	80014e8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f0:	213f      	movs	r1, #63	@ 0x3f
 80014f2:	400a      	ands	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80014fe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d011      	beq.n	800152c <HAL_DMA_Init+0xd8>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b04      	cmp	r3, #4
 800150e:	d80d      	bhi.n	800152c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	0018      	movs	r0, r3
 8001514:	f000 f970 	bl	80017f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	e008      	b.n	800153e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2225      	movs	r2, #37	@ 0x25
 8001548:	2101      	movs	r1, #1
 800154a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2224      	movs	r2, #36	@ 0x24
 8001550:	2100      	movs	r1, #0
 8001552:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	bffdfff8 	.word	0xbffdfff8
 8001564:	ffff800f 	.word	0xffff800f

08001568 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001570:	210f      	movs	r1, #15
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2225      	movs	r2, #37	@ 0x25
 800157c:	5c9b      	ldrb	r3, [r3, r2]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d006      	beq.n	8001592 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2204      	movs	r2, #4
 8001588:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e049      	b.n	8001626 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	210e      	movs	r1, #14
 800159e:	438a      	bics	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	438a      	bics	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015bc:	491d      	ldr	r1, [pc, #116]	@ (8001634 <HAL_DMA_Abort_IT+0xcc>)
 80015be:	400a      	ands	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <HAL_DMA_Abort_IT+0xd0>)
 80015c4:	6859      	ldr	r1, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	221c      	movs	r2, #28
 80015cc:	4013      	ands	r3, r2
 80015ce:	2201      	movs	r2, #1
 80015d0:	409a      	lsls	r2, r3
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_DMA_Abort_IT+0xd0>)
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f4:	490f      	ldr	r1, [pc, #60]	@ (8001634 <HAL_DMA_Abort_IT+0xcc>)
 80015f6:	400a      	ands	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001602:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2225      	movs	r2, #37	@ 0x25
 8001608:	2101      	movs	r1, #1
 800160a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2224      	movs	r2, #36	@ 0x24
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	0010      	movs	r0, r2
 8001624:	4798      	blx	r3
    }
  }
  return status;
 8001626:	230f      	movs	r3, #15
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	781b      	ldrb	r3, [r3, #0]
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}
 8001634:	fffffeff 	.word	0xfffffeff
 8001638:	40020000 	.word	0x40020000

0800163c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001644:	4b55      	ldr	r3, [pc, #340]	@ (800179c <HAL_DMA_IRQHandler+0x160>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	221c      	movs	r2, #28
 8001658:	4013      	ands	r3, r2
 800165a:	2204      	movs	r2, #4
 800165c:	409a      	lsls	r2, r3
 800165e:	0013      	movs	r3, r2
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	d027      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x7a>
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2204      	movs	r2, #4
 800166a:	4013      	ands	r3, r2
 800166c:	d023      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2220      	movs	r2, #32
 8001676:	4013      	ands	r3, r2
 8001678:	d107      	bne.n	800168a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2104      	movs	r1, #4
 8001686:	438a      	bics	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800168a:	4b44      	ldr	r3, [pc, #272]	@ (800179c <HAL_DMA_IRQHandler+0x160>)
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	221c      	movs	r2, #28
 8001694:	4013      	ands	r3, r2
 8001696:	2204      	movs	r2, #4
 8001698:	409a      	lsls	r2, r3
 800169a:	4b40      	ldr	r3, [pc, #256]	@ (800179c <HAL_DMA_IRQHandler+0x160>)
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d100      	bne.n	80016aa <HAL_DMA_IRQHandler+0x6e>
 80016a8:	e073      	b.n	8001792 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	0010      	movs	r0, r2
 80016b2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80016b4:	e06d      	b.n	8001792 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	221c      	movs	r2, #28
 80016bc:	4013      	ands	r3, r2
 80016be:	2202      	movs	r2, #2
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4013      	ands	r3, r2
 80016c8:	d02e      	beq.n	8001728 <HAL_DMA_IRQHandler+0xec>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2202      	movs	r2, #2
 80016ce:	4013      	ands	r3, r2
 80016d0:	d02a      	beq.n	8001728 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2220      	movs	r2, #32
 80016da:	4013      	ands	r3, r2
 80016dc:	d10b      	bne.n	80016f6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	210a      	movs	r1, #10
 80016ea:	438a      	bics	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2225      	movs	r2, #37	@ 0x25
 80016f2:	2101      	movs	r1, #1
 80016f4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80016f6:	4b29      	ldr	r3, [pc, #164]	@ (800179c <HAL_DMA_IRQHandler+0x160>)
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	221c      	movs	r2, #28
 8001700:	4013      	ands	r3, r2
 8001702:	2202      	movs	r2, #2
 8001704:	409a      	lsls	r2, r3
 8001706:	4b25      	ldr	r3, [pc, #148]	@ (800179c <HAL_DMA_IRQHandler+0x160>)
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	@ 0x24
 8001710:	2100      	movs	r1, #0
 8001712:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d03a      	beq.n	8001792 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	0010      	movs	r0, r2
 8001724:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001726:	e034      	b.n	8001792 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	221c      	movs	r2, #28
 800172e:	4013      	ands	r3, r2
 8001730:	2208      	movs	r2, #8
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	d02b      	beq.n	8001794 <HAL_DMA_IRQHandler+0x158>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2208      	movs	r2, #8
 8001740:	4013      	ands	r3, r2
 8001742:	d027      	beq.n	8001794 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	210e      	movs	r1, #14
 8001750:	438a      	bics	r2, r1
 8001752:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001754:	4b11      	ldr	r3, [pc, #68]	@ (800179c <HAL_DMA_IRQHandler+0x160>)
 8001756:	6859      	ldr	r1, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	221c      	movs	r2, #28
 800175e:	4013      	ands	r3, r2
 8001760:	2201      	movs	r2, #1
 8001762:	409a      	lsls	r2, r3
 8001764:	4b0d      	ldr	r3, [pc, #52]	@ (800179c <HAL_DMA_IRQHandler+0x160>)
 8001766:	430a      	orrs	r2, r1
 8001768:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2225      	movs	r2, #37	@ 0x25
 8001774:	2101      	movs	r1, #1
 8001776:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2224      	movs	r2, #36	@ 0x24
 800177c:	2100      	movs	r1, #0
 800177e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	0010      	movs	r0, r2
 8001790:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	46c0      	nop			@ (mov r8, r8)
}
 8001796:	46bd      	mov	sp, r7
 8001798:	b004      	add	sp, #16
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020000 	.word	0x40020000

080017a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80017b0:	4694      	mov	ip, r2
 80017b2:	4463      	add	r3, ip
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	001a      	movs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	001a      	movs	r2, r3
 80017c2:	23ff      	movs	r3, #255	@ 0xff
 80017c4:	4013      	ands	r3, r2
 80017c6:	3b08      	subs	r3, #8
 80017c8:	2114      	movs	r1, #20
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7fe fcae 	bl	800012c <__udivsi3>
 80017d0:	0003      	movs	r3, r0
 80017d2:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80017d8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	221f      	movs	r2, #31
 80017de:	4013      	ands	r3, r2
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80017e8:	46c0      	nop			@ (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	10008200 	.word	0x10008200
 80017f4:	40020880 	.word	0x40020880

080017f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	223f      	movs	r2, #63	@ 0x3f
 8001806:	4013      	ands	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800180e:	4694      	mov	ip, r2
 8001810:	4463      	add	r3, ip
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	001a      	movs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a07      	ldr	r2, [pc, #28]	@ (800183c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800181e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	2201      	movs	r2, #1
 800182a:	409a      	lsls	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b004      	add	sp, #16
 8001836:	bd80      	pop	{r7, pc}
 8001838:	1000823f 	.word	0x1000823f
 800183c:	40020940 	.word	0x40020940

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184e:	e147      	b.n	8001ae0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4091      	lsls	r1, r2
 800185a:	000a      	movs	r2, r1
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d100      	bne.n	8001868 <HAL_GPIO_Init+0x28>
 8001866:	e138      	b.n	8001ada <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2203      	movs	r2, #3
 800186e:	4013      	ands	r3, r2
 8001870:	2b01      	cmp	r3, #1
 8001872:	d005      	beq.n	8001880 <HAL_GPIO_Init+0x40>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2203      	movs	r2, #3
 800187a:	4013      	ands	r3, r2
 800187c:	2b02      	cmp	r3, #2
 800187e:	d130      	bne.n	80018e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	409a      	lsls	r2, r3
 800188e:	0013      	movs	r3, r2
 8001890:	43da      	mvns	r2, r3
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	409a      	lsls	r2, r3
 80018a2:	0013      	movs	r3, r2
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018b6:	2201      	movs	r2, #1
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	2201      	movs	r2, #1
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2203      	movs	r2, #3
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d017      	beq.n	800191e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	2203      	movs	r2, #3
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2203      	movs	r2, #3
 8001924:	4013      	ands	r3, r2
 8001926:	2b02      	cmp	r3, #2
 8001928:	d123      	bne.n	8001972 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	58d3      	ldr	r3, [r2, r3]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2207      	movs	r2, #7
 800193c:	4013      	ands	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	43da      	mvns	r2, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4013      	ands	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	2107      	movs	r1, #7
 8001956:	400b      	ands	r3, r1
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	409a      	lsls	r2, r3
 800195c:	0013      	movs	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	0092      	lsls	r2, r2, #2
 800196e:	6939      	ldr	r1, [r7, #16]
 8001970:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	409a      	lsls	r2, r3
 8001980:	0013      	movs	r3, r2
 8001982:	43da      	mvns	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2203      	movs	r2, #3
 8001990:	401a      	ands	r2, r3
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	409a      	lsls	r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	23c0      	movs	r3, #192	@ 0xc0
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	4013      	ands	r3, r2
 80019b0:	d100      	bne.n	80019b4 <HAL_GPIO_Init+0x174>
 80019b2:	e092      	b.n	8001ada <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80019b4:	4a50      	ldr	r2, [pc, #320]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3318      	adds	r3, #24
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	589b      	ldr	r3, [r3, r2]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2203      	movs	r2, #3
 80019c6:	4013      	ands	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	220f      	movs	r2, #15
 80019cc:	409a      	lsls	r2, r3
 80019ce:	0013      	movs	r3, r2
 80019d0:	43da      	mvns	r2, r3
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	23a0      	movs	r3, #160	@ 0xa0
 80019dc:	05db      	lsls	r3, r3, #23
 80019de:	429a      	cmp	r2, r3
 80019e0:	d013      	beq.n	8001a0a <HAL_GPIO_Init+0x1ca>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a45      	ldr	r2, [pc, #276]	@ (8001afc <HAL_GPIO_Init+0x2bc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d00d      	beq.n	8001a06 <HAL_GPIO_Init+0x1c6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a44      	ldr	r2, [pc, #272]	@ (8001b00 <HAL_GPIO_Init+0x2c0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d007      	beq.n	8001a02 <HAL_GPIO_Init+0x1c2>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a43      	ldr	r2, [pc, #268]	@ (8001b04 <HAL_GPIO_Init+0x2c4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d101      	bne.n	80019fe <HAL_GPIO_Init+0x1be>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x1cc>
 80019fe:	2305      	movs	r3, #5
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x1cc>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x1cc>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x1cc>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	2103      	movs	r1, #3
 8001a10:	400a      	ands	r2, r1
 8001a12:	00d2      	lsls	r2, r2, #3
 8001a14:	4093      	lsls	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001a1c:	4936      	ldr	r1, [pc, #216]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3318      	adds	r3, #24
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2a:	4b33      	ldr	r3, [pc, #204]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	035b      	lsls	r3, r3, #13
 8001a42:	4013      	ands	r3, r2
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a54:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	2380      	movs	r3, #128	@ 0x80
 8001a6a:	039b      	lsls	r3, r3, #14
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a78:	4b1f      	ldr	r3, [pc, #124]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001a80:	2384      	movs	r3, #132	@ 0x84
 8001a82:	58d3      	ldr	r3, [r2, r3]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	43da      	mvns	r2, r3
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	029b      	lsls	r3, r3, #10
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa4:	4914      	ldr	r1, [pc, #80]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001aa6:	2284      	movs	r2, #132	@ 0x84
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001aac:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	58d3      	ldr	r3, [r2, r3]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	025b      	lsls	r3, r3, #9
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad2:	4909      	ldr	r1, [pc, #36]	@ (8001af8 <HAL_GPIO_Init+0x2b8>)
 8001ad4:	2280      	movs	r2, #128	@ 0x80
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3301      	adds	r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	40da      	lsrs	r2, r3
 8001ae8:	1e13      	subs	r3, r2, #0
 8001aea:	d000      	beq.n	8001aee <HAL_GPIO_Init+0x2ae>
 8001aec:	e6b0      	b.n	8001850 <HAL_GPIO_Init+0x10>
  }
}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	46c0      	nop			@ (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b006      	add	sp, #24
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021800 	.word	0x40021800
 8001afc:	50000400 	.word	0x50000400
 8001b00:	50000800 	.word	0x50000800
 8001b04:	50000c00 	.word	0x50000c00

08001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	0008      	movs	r0, r1
 8001b12:	0011      	movs	r1, r2
 8001b14:	1cbb      	adds	r3, r7, #2
 8001b16:	1c02      	adds	r2, r0, #0
 8001b18:	801a      	strh	r2, [r3, #0]
 8001b1a:	1c7b      	adds	r3, r7, #1
 8001b1c:	1c0a      	adds	r2, r1, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b20:	1c7b      	adds	r3, r7, #1
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b28:	1cbb      	adds	r3, r7, #2
 8001b2a:	881a      	ldrh	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b32:	1cbb      	adds	r3, r7, #2
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e08f      	b.n	8001c76 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2241      	movs	r2, #65	@ 0x41
 8001b5a:	5c9b      	ldrb	r3, [r3, r2]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2240      	movs	r2, #64	@ 0x40
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7fe fe3f 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2241      	movs	r2, #65	@ 0x41
 8001b76:	2124      	movs	r1, #36	@ 0x24
 8001b78:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	438a      	bics	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	493b      	ldr	r1, [pc, #236]	@ (8001c80 <HAL_I2C_Init+0x13c>)
 8001b94:	400a      	ands	r2, r1
 8001b96:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4938      	ldr	r1, [pc, #224]	@ (8001c84 <HAL_I2C_Init+0x140>)
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d108      	bne.n	8001bc2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2180      	movs	r1, #128	@ 0x80
 8001bba:	0209      	lsls	r1, r1, #8
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	e007      	b.n	8001bd2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2184      	movs	r1, #132	@ 0x84
 8001bcc:	0209      	lsls	r1, r1, #8
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d109      	bne.n	8001bee <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2180      	movs	r1, #128	@ 0x80
 8001be6:	0109      	lsls	r1, r1, #4
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	e007      	b.n	8001bfe <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4923      	ldr	r1, [pc, #140]	@ (8001c88 <HAL_I2C_Init+0x144>)
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4920      	ldr	r1, [pc, #128]	@ (8001c8c <HAL_I2C_Init+0x148>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	491a      	ldr	r1, [pc, #104]	@ (8001c84 <HAL_I2C_Init+0x140>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69d9      	ldr	r1, [r3, #28]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a1a      	ldr	r2, [r3, #32]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2101      	movs	r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2241      	movs	r2, #65	@ 0x41
 8001c62:	2120      	movs	r1, #32
 8001c64:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2242      	movs	r2, #66	@ 0x42
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	f0ffffff 	.word	0xf0ffffff
 8001c84:	ffff7fff 	.word	0xffff7fff
 8001c88:	fffff7ff 	.word	0xfffff7ff
 8001c8c:	02008000 	.word	0x02008000

08001c90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2241      	movs	r2, #65	@ 0x41
 8001c9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d138      	bne.n	8001d18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2240      	movs	r2, #64	@ 0x40
 8001caa:	5c9b      	ldrb	r3, [r3, r2]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e032      	b.n	8001d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2240      	movs	r2, #64	@ 0x40
 8001cb8:	2101      	movs	r1, #1
 8001cba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2241      	movs	r2, #65	@ 0x41
 8001cc0:	2124      	movs	r1, #36	@ 0x24
 8001cc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	438a      	bics	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4911      	ldr	r1, [pc, #68]	@ (8001d24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ce0:	400a      	ands	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2241      	movs	r2, #65	@ 0x41
 8001d08:	2120      	movs	r1, #32
 8001d0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	2100      	movs	r1, #0
 8001d12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d18:	2302      	movs	r3, #2
  }
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	ffffefff 	.word	0xffffefff

08001d28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2241      	movs	r2, #65	@ 0x41
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b20      	cmp	r3, #32
 8001d3c:	d139      	bne.n	8001db2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2240      	movs	r2, #64	@ 0x40
 8001d42:	5c9b      	ldrb	r3, [r3, r2]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e033      	b.n	8001db4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2240      	movs	r2, #64	@ 0x40
 8001d50:	2101      	movs	r1, #1
 8001d52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2241      	movs	r2, #65	@ 0x41
 8001d58:	2124      	movs	r1, #36	@ 0x24
 8001d5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2101      	movs	r1, #1
 8001d68:	438a      	bics	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	021b      	lsls	r3, r3, #8
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2101      	movs	r1, #1
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2241      	movs	r2, #65	@ 0x41
 8001da2:	2120      	movs	r1, #32
 8001da4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2240      	movs	r2, #64	@ 0x40
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001db2:	2302      	movs	r3, #2
  }
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	fffff0ff 	.word	0xfffff0ff

08001dc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	@ (8001e34 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	0019      	movs	r1, r3
 8001dd2:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d11f      	bne.n	8001e24 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001de4:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	0013      	movs	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	189b      	adds	r3, r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4912      	ldr	r1, [pc, #72]	@ (8001e3c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001df2:	0018      	movs	r0, r3
 8001df4:	f7fe f99a 	bl	800012c <__udivsi3>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dfe:	e008      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	e001      	b.n	8001e12 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e009      	b.n	8001e26 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e12:	4b07      	ldr	r3, [pc, #28]	@ (8001e30 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	2380      	movs	r3, #128	@ 0x80
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d0ed      	beq.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	40007000 	.word	0x40007000
 8001e34:	fffff9ff 	.word	0xfffff9ff
 8001e38:	200000c4 	.word	0x200000c4
 8001e3c:	000f4240 	.word	0x000f4240

08001e40 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	23e0      	movs	r3, #224	@ 0xe0
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	4013      	ands	r3, r2
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e2f3      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_OscConfig+0x1e>
 8001e74:	e07c      	b.n	8001f70 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e76:	4bc3      	ldr	r3, [pc, #780]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	2238      	movs	r2, #56	@ 0x38
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e80:	4bc0      	ldr	r3, [pc, #768]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2203      	movs	r2, #3
 8001e86:	4013      	ands	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b10      	cmp	r3, #16
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3e>
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	4bb9      	ldr	r3, [pc, #740]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	029b      	lsls	r3, r3, #10
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d062      	beq.n	8001f6e <HAL_RCC_OscConfig+0x116>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d15e      	bne.n	8001f6e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e2ce      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	025b      	lsls	r3, r3, #9
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x78>
 8001ec0:	4bb0      	ldr	r3, [pc, #704]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4baf      	ldr	r3, [pc, #700]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	2180      	movs	r1, #128	@ 0x80
 8001ec8:	0249      	lsls	r1, r1, #9
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e020      	b.n	8001f12 <HAL_RCC_OscConfig+0xba>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23a0      	movs	r3, #160	@ 0xa0
 8001ed6:	02db      	lsls	r3, r3, #11
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10e      	bne.n	8001efa <HAL_RCC_OscConfig+0xa2>
 8001edc:	4ba9      	ldr	r3, [pc, #676]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4ba8      	ldr	r3, [pc, #672]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	2180      	movs	r1, #128	@ 0x80
 8001ee4:	02c9      	lsls	r1, r1, #11
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	4ba6      	ldr	r3, [pc, #664]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4ba5      	ldr	r3, [pc, #660]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	2180      	movs	r1, #128	@ 0x80
 8001ef2:	0249      	lsls	r1, r1, #9
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0xba>
 8001efa:	4ba2      	ldr	r3, [pc, #648]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4ba1      	ldr	r3, [pc, #644]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001f00:	49a1      	ldr	r1, [pc, #644]	@ (8002188 <HAL_RCC_OscConfig+0x330>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4b9f      	ldr	r3, [pc, #636]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b9e      	ldr	r3, [pc, #632]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	499f      	ldr	r1, [pc, #636]	@ (800218c <HAL_RCC_OscConfig+0x334>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d014      	beq.n	8001f44 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1a:	f7ff f9bf 	bl	800129c <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff f9ba 	bl	800129c <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e28d      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f36:	4b93      	ldr	r3, [pc, #588]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	2380      	movs	r3, #128	@ 0x80
 8001f3c:	029b      	lsls	r3, r3, #10
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xcc>
 8001f42:	e015      	b.n	8001f70 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f9aa 	bl	800129c <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4e:	f7ff f9a5 	bl	800129c <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	@ 0x64
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e278      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f60:	4b88      	ldr	r3, [pc, #544]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0xf6>
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2202      	movs	r2, #2
 8001f76:	4013      	ands	r3, r2
 8001f78:	d100      	bne.n	8001f7c <HAL_RCC_OscConfig+0x124>
 8001f7a:	e099      	b.n	80020b0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7c:	4b81      	ldr	r3, [pc, #516]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2238      	movs	r2, #56	@ 0x38
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f86:	4b7f      	ldr	r3, [pc, #508]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d102      	bne.n	8001f9c <HAL_RCC_OscConfig+0x144>
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d002      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d135      	bne.n	800200e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa2:	4b78      	ldr	r3, [pc, #480]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	4013      	ands	r3, r2
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x162>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e24b      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b72      	ldr	r3, [pc, #456]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a74      	ldr	r2, [pc, #464]	@ (8002190 <HAL_RCC_OscConfig+0x338>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	021a      	lsls	r2, r3, #8
 8001fca:	4b6e      	ldr	r3, [pc, #440]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d112      	bne.n	8001ffc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fd6:	4b6b      	ldr	r3, [pc, #428]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a6e      	ldr	r2, [pc, #440]	@ (8002194 <HAL_RCC_OscConfig+0x33c>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	0019      	movs	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	4b67      	ldr	r3, [pc, #412]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fea:	4b66      	ldr	r3, [pc, #408]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	2207      	movs	r2, #7
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	4a68      	ldr	r2, [pc, #416]	@ (8002198 <HAL_RCC_OscConfig+0x340>)
 8001ff6:	40da      	lsrs	r2, r3
 8001ff8:	4b68      	ldr	r3, [pc, #416]	@ (800219c <HAL_RCC_OscConfig+0x344>)
 8001ffa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ffc:	4b68      	ldr	r3, [pc, #416]	@ (80021a0 <HAL_RCC_OscConfig+0x348>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0018      	movs	r0, r3
 8002002:	f7fe fef9 	bl	8000df8 <HAL_InitTick>
 8002006:	1e03      	subs	r3, r0, #0
 8002008:	d051      	beq.n	80020ae <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e221      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d030      	beq.n	8002078 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002016:	4b5b      	ldr	r3, [pc, #364]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a5e      	ldr	r2, [pc, #376]	@ (8002194 <HAL_RCC_OscConfig+0x33c>)
 800201c:	4013      	ands	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	4b57      	ldr	r3, [pc, #348]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800202a:	4b56      	ldr	r3, [pc, #344]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b55      	ldr	r3, [pc, #340]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8002030:	2180      	movs	r1, #128	@ 0x80
 8002032:	0049      	lsls	r1, r1, #1
 8002034:	430a      	orrs	r2, r1
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff f930 	bl	800129c <HAL_GetTick>
 800203c:	0003      	movs	r3, r0
 800203e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7ff f92b 	bl	800129c <HAL_GetTick>
 8002046:	0002      	movs	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1fe      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002054:	4b4b      	ldr	r3, [pc, #300]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	@ 0x80
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4013      	ands	r3, r2
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002060:	4b48      	ldr	r3, [pc, #288]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a4a      	ldr	r2, [pc, #296]	@ (8002190 <HAL_RCC_OscConfig+0x338>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	021a      	lsls	r2, r3, #8
 8002070:	4b44      	ldr	r3, [pc, #272]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	e01b      	b.n	80020b0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002078:	4b42      	ldr	r3, [pc, #264]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b41      	ldr	r3, [pc, #260]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 800207e:	4949      	ldr	r1, [pc, #292]	@ (80021a4 <HAL_RCC_OscConfig+0x34c>)
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7ff f90a 	bl	800129c <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7ff f905 	bl	800129c <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1d8      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020a0:	4b38      	ldr	r3, [pc, #224]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4013      	ands	r3, r2
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x236>
 80020ac:	e000      	b.n	80020b0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2208      	movs	r2, #8
 80020b6:	4013      	ands	r3, r2
 80020b8:	d047      	beq.n	800214a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020ba:	4b32      	ldr	r3, [pc, #200]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2238      	movs	r2, #56	@ 0x38
 80020c0:	4013      	ands	r3, r2
 80020c2:	2b18      	cmp	r3, #24
 80020c4:	d10a      	bne.n	80020dc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80020c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	d03c      	beq.n	800214a <HAL_RCC_OscConfig+0x2f2>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d138      	bne.n	800214a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e1ba      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d019      	beq.n	8002118 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020e4:	4b27      	ldr	r3, [pc, #156]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020e8:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff f8d4 	bl	800129c <HAL_GetTick>
 80020f4:	0003      	movs	r3, r0
 80020f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fa:	f7ff f8cf 	bl	800129c <HAL_GetTick>
 80020fe:	0002      	movs	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1a2      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210c:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 800210e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002110:	2202      	movs	r2, #2
 8002112:	4013      	ands	r3, r2
 8002114:	d0f1      	beq.n	80020fa <HAL_RCC_OscConfig+0x2a2>
 8002116:	e018      	b.n	800214a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002118:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 800211a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 800211e:	2101      	movs	r1, #1
 8002120:	438a      	bics	r2, r1
 8002122:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f8ba 	bl	800129c <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212e:	f7ff f8b5 	bl	800129c <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e188      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002140:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8002142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d1f1      	bne.n	800212e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2204      	movs	r2, #4
 8002150:	4013      	ands	r3, r2
 8002152:	d100      	bne.n	8002156 <HAL_RCC_OscConfig+0x2fe>
 8002154:	e0c6      	b.n	80022e4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	231f      	movs	r3, #31
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2238      	movs	r2, #56	@ 0x38
 8002164:	4013      	ands	r3, r2
 8002166:	2b20      	cmp	r3, #32
 8002168:	d11e      	bne.n	80021a8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800216a:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_RCC_OscConfig+0x32c>)
 800216c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216e:	2202      	movs	r2, #2
 8002170:	4013      	ands	r3, r2
 8002172:	d100      	bne.n	8002176 <HAL_RCC_OscConfig+0x31e>
 8002174:	e0b6      	b.n	80022e4 <HAL_RCC_OscConfig+0x48c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d000      	beq.n	8002180 <HAL_RCC_OscConfig+0x328>
 800217e:	e0b1      	b.n	80022e4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e166      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
 8002184:	40021000 	.word	0x40021000
 8002188:	fffeffff 	.word	0xfffeffff
 800218c:	fffbffff 	.word	0xfffbffff
 8002190:	ffff80ff 	.word	0xffff80ff
 8002194:	ffffc7ff 	.word	0xffffc7ff
 8002198:	00f42400 	.word	0x00f42400
 800219c:	200000c4 	.word	0x200000c4
 80021a0:	200000c8 	.word	0x200000c8
 80021a4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021a8:	4bac      	ldr	r3, [pc, #688]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80021aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	055b      	lsls	r3, r3, #21
 80021b0:	4013      	ands	r3, r2
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_OscConfig+0x360>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x362>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d011      	beq.n	80021e2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4ba7      	ldr	r3, [pc, #668]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80021c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021c2:	4ba6      	ldr	r3, [pc, #664]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80021c4:	2180      	movs	r1, #128	@ 0x80
 80021c6:	0549      	lsls	r1, r1, #21
 80021c8:	430a      	orrs	r2, r1
 80021ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021cc:	4ba3      	ldr	r3, [pc, #652]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80021ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021d0:	2380      	movs	r3, #128	@ 0x80
 80021d2:	055b      	lsls	r3, r3, #21
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80021da:	231f      	movs	r3, #31
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e2:	4b9f      	ldr	r3, [pc, #636]	@ (8002460 <HAL_RCC_OscConfig+0x608>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	d11a      	bne.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ee:	4b9c      	ldr	r3, [pc, #624]	@ (8002460 <HAL_RCC_OscConfig+0x608>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	4b9b      	ldr	r3, [pc, #620]	@ (8002460 <HAL_RCC_OscConfig+0x608>)
 80021f4:	2180      	movs	r1, #128	@ 0x80
 80021f6:	0049      	lsls	r1, r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80021fc:	f7ff f84e 	bl	800129c <HAL_GetTick>
 8002200:	0003      	movs	r3, r0
 8002202:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7ff f849 	bl	800129c <HAL_GetTick>
 800220a:	0002      	movs	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e11c      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002218:	4b91      	ldr	r3, [pc, #580]	@ (8002460 <HAL_RCC_OscConfig+0x608>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	2380      	movs	r3, #128	@ 0x80
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d0f0      	beq.n	8002206 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x3e2>
 800222c:	4b8b      	ldr	r3, [pc, #556]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800222e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002230:	4b8a      	ldr	r3, [pc, #552]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002232:	2101      	movs	r1, #1
 8002234:	430a      	orrs	r2, r1
 8002236:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x404>
 8002242:	4b86      	ldr	r3, [pc, #536]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002244:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002246:	4b85      	ldr	r3, [pc, #532]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002248:	2104      	movs	r1, #4
 800224a:	430a      	orrs	r2, r1
 800224c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800224e:	4b83      	ldr	r3, [pc, #524]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002250:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002252:	4b82      	ldr	r3, [pc, #520]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	65da      	str	r2, [r3, #92]	@ 0x5c
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
 800225c:	4b7f      	ldr	r3, [pc, #508]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800225e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002260:	4b7e      	ldr	r3, [pc, #504]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002262:	2101      	movs	r1, #1
 8002264:	438a      	bics	r2, r1
 8002266:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002268:	4b7c      	ldr	r3, [pc, #496]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800226a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800226c:	4b7b      	ldr	r3, [pc, #492]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800226e:	2104      	movs	r1, #4
 8002270:	438a      	bics	r2, r1
 8002272:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d014      	beq.n	80022a6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff f80e 	bl	800129c <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002284:	e009      	b.n	800229a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7ff f809 	bl	800129c <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	4a74      	ldr	r2, [pc, #464]	@ (8002464 <HAL_RCC_OscConfig+0x60c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e0db      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229a:	4b70      	ldr	r3, [pc, #448]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800229c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x42e>
 80022a4:	e013      	b.n	80022ce <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fff9 	bl	800129c <HAL_GetTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ae:	e009      	b.n	80022c4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fff4 	bl	800129c <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4a6a      	ldr	r2, [pc, #424]	@ (8002464 <HAL_RCC_OscConfig+0x60c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0c6      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022c4:	4b65      	ldr	r3, [pc, #404]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022ce:	231f      	movs	r3, #31
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b60      	ldr	r3, [pc, #384]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80022da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022dc:	4b5f      	ldr	r3, [pc, #380]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80022de:	4962      	ldr	r1, [pc, #392]	@ (8002468 <HAL_RCC_OscConfig+0x610>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d100      	bne.n	80022ee <HAL_RCC_OscConfig+0x496>
 80022ec:	e0b0      	b.n	8002450 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ee:	4b5b      	ldr	r3, [pc, #364]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2238      	movs	r2, #56	@ 0x38
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b10      	cmp	r3, #16
 80022f8:	d100      	bne.n	80022fc <HAL_RCC_OscConfig+0x4a4>
 80022fa:	e078      	b.n	80023ee <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d153      	bne.n	80023ac <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002304:	4b55      	ldr	r3, [pc, #340]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b54      	ldr	r3, [pc, #336]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800230a:	4958      	ldr	r1, [pc, #352]	@ (800246c <HAL_RCC_OscConfig+0x614>)
 800230c:	400a      	ands	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe ffc4 	bl	800129c <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231a:	f7fe ffbf 	bl	800129c <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e092      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232c:	4b4b      	ldr	r3, [pc, #300]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	049b      	lsls	r3, r3, #18
 8002334:	4013      	ands	r3, r2
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002338:	4b48      	ldr	r3, [pc, #288]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4a4c      	ldr	r2, [pc, #304]	@ (8002470 <HAL_RCC_OscConfig+0x618>)
 800233e:	4013      	ands	r3, r2
 8002340:	0019      	movs	r1, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1a      	ldr	r2, [r3, #32]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	431a      	orrs	r2, r3
 8002360:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002362:	430a      	orrs	r2, r1
 8002364:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002366:	4b3d      	ldr	r3, [pc, #244]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800236c:	2180      	movs	r1, #128	@ 0x80
 800236e:	0449      	lsls	r1, r1, #17
 8002370:	430a      	orrs	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002374:	4b39      	ldr	r3, [pc, #228]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4b38      	ldr	r3, [pc, #224]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 800237a:	2180      	movs	r1, #128	@ 0x80
 800237c:	0549      	lsls	r1, r1, #21
 800237e:	430a      	orrs	r2, r1
 8002380:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7fe ff8b 	bl	800129c <HAL_GetTick>
 8002386:	0003      	movs	r3, r0
 8002388:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe ff86 	bl	800129c <HAL_GetTick>
 8002390:	0002      	movs	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e059      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239e:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	@ 0x80
 80023a4:	049b      	lsls	r3, r3, #18
 80023a6:	4013      	ands	r3, r2
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x534>
 80023aa:	e051      	b.n	8002450 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b2b      	ldr	r3, [pc, #172]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80023b2:	492e      	ldr	r1, [pc, #184]	@ (800246c <HAL_RCC_OscConfig+0x614>)
 80023b4:	400a      	ands	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe ff70 	bl	800129c <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c2:	f7fe ff6b 	bl	800129c <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e03e      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	049b      	lsls	r3, r3, #18
 80023dc:	4013      	ands	r3, r2
 80023de:	d1f0      	bne.n	80023c2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80023e6:	4923      	ldr	r1, [pc, #140]	@ (8002474 <HAL_RCC_OscConfig+0x61c>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	e030      	b.n	8002450 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e02b      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023fa:	4b18      	ldr	r3, [pc, #96]	@ (800245c <HAL_RCC_OscConfig+0x604>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2203      	movs	r2, #3
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	429a      	cmp	r2, r3
 800240c:	d11e      	bne.n	800244c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2270      	movs	r2, #112	@ 0x70
 8002412:	401a      	ands	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d117      	bne.n	800244c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	23fe      	movs	r3, #254	@ 0xfe
 8002420:	01db      	lsls	r3, r3, #7
 8002422:	401a      	ands	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d10e      	bne.n	800244c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	23f8      	movs	r3, #248	@ 0xf8
 8002432:	039b      	lsls	r3, r3, #14
 8002434:	401a      	ands	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	0f5b      	lsrs	r3, r3, #29
 8002442:	075a      	lsls	r2, r3, #29
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b008      	add	sp, #32
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	40021000 	.word	0x40021000
 8002460:	40007000 	.word	0x40007000
 8002464:	00001388 	.word	0x00001388
 8002468:	efffffff 	.word	0xefffffff
 800246c:	feffffff 	.word	0xfeffffff
 8002470:	1fc1808c 	.word	0x1fc1808c
 8002474:	effefffc 	.word	0xeffefffc

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0e9      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b76      	ldr	r3, [pc, #472]	@ (8002668 <HAL_RCC_ClockConfig+0x1f0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2207      	movs	r2, #7
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d91e      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b73      	ldr	r3, [pc, #460]	@ (8002668 <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2207      	movs	r2, #7
 80024a0:	4393      	bics	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	4b70      	ldr	r3, [pc, #448]	@ (8002668 <HAL_RCC_ClockConfig+0x1f0>)
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fef6 	bl	800129c <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024b4:	e009      	b.n	80024ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b6:	f7fe fef1 	bl	800129c <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4a6a      	ldr	r2, [pc, #424]	@ (800266c <HAL_RCC_ClockConfig+0x1f4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0ca      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024ca:	4b67      	ldr	r3, [pc, #412]	@ (8002668 <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2207      	movs	r2, #7
 80024d0:	4013      	ands	r3, r2
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1ee      	bne.n	80024b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2202      	movs	r2, #2
 80024de:	4013      	ands	r3, r2
 80024e0:	d015      	beq.n	800250e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2204      	movs	r2, #4
 80024e8:	4013      	ands	r3, r2
 80024ea:	d006      	beq.n	80024fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024ec:	4b60      	ldr	r3, [pc, #384]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	21e0      	movs	r1, #224	@ 0xe0
 80024f4:	01c9      	lsls	r1, r1, #7
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002674 <HAL_RCC_ClockConfig+0x1fc>)
 8002500:	4013      	ands	r3, r2
 8002502:	0019      	movs	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	430a      	orrs	r2, r1
 800250c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d057      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d107      	bne.n	8002530 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002520:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	d12b      	bne.n	8002584 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e097      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d107      	bne.n	8002548 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002538:	4b4d      	ldr	r3, [pc, #308]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	049b      	lsls	r3, r3, #18
 8002540:	4013      	ands	r3, r2
 8002542:	d11f      	bne.n	8002584 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e08b      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002550:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4013      	ands	r3, r2
 800255a:	d113      	bne.n	8002584 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e07f      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d106      	bne.n	8002576 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002568:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 800256a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256c:	2202      	movs	r2, #2
 800256e:	4013      	ands	r3, r2
 8002570:	d108      	bne.n	8002584 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e074      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002576:	4b3e      	ldr	r3, [pc, #248]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 8002578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e06d      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002584:	4b3a      	ldr	r3, [pc, #232]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2207      	movs	r2, #7
 800258a:	4393      	bics	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4b37      	ldr	r3, [pc, #220]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 8002594:	430a      	orrs	r2, r1
 8002596:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002598:	f7fe fe80 	bl	800129c <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a0:	e009      	b.n	80025b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a2:	f7fe fe7b 	bl	800129c <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	4a2f      	ldr	r2, [pc, #188]	@ (800266c <HAL_RCC_ClockConfig+0x1f4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e054      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2238      	movs	r2, #56	@ 0x38
 80025bc:	401a      	ands	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1ec      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <HAL_RCC_ClockConfig+0x1f0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2207      	movs	r2, #7
 80025ce:	4013      	ands	r3, r2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d21e      	bcs.n	8002614 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b24      	ldr	r3, [pc, #144]	@ (8002668 <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2207      	movs	r2, #7
 80025dc:	4393      	bics	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_RCC_ClockConfig+0x1f0>)
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025e8:	f7fe fe58 	bl	800129c <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025f0:	e009      	b.n	8002606 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f2:	f7fe fe53 	bl	800129c <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	4a1b      	ldr	r2, [pc, #108]	@ (800266c <HAL_RCC_ClockConfig+0x1f4>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e02c      	b.n	8002660 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002606:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <HAL_RCC_ClockConfig+0x1f0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2207      	movs	r2, #7
 800260c:	4013      	ands	r3, r2
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d1ee      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2204      	movs	r2, #4
 800261a:	4013      	ands	r3, r2
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4a15      	ldr	r2, [pc, #84]	@ (8002678 <HAL_RCC_ClockConfig+0x200>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68da      	ldr	r2, [r3, #12]
 800262c:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002632:	f000 f829 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002636:	0001      	movs	r1, r0
 8002638:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <HAL_RCC_ClockConfig+0x1f8>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	220f      	movs	r2, #15
 8002640:	401a      	ands	r2, r3
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_RCC_ClockConfig+0x204>)
 8002644:	0092      	lsls	r2, r2, #2
 8002646:	58d3      	ldr	r3, [r2, r3]
 8002648:	221f      	movs	r2, #31
 800264a:	4013      	ands	r3, r2
 800264c:	000a      	movs	r2, r1
 800264e:	40da      	lsrs	r2, r3
 8002650:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <HAL_RCC_ClockConfig+0x208>)
 8002652:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002654:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_RCC_ClockConfig+0x20c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0018      	movs	r0, r3
 800265a:	f7fe fbcd 	bl	8000df8 <HAL_InitTick>
 800265e:	0003      	movs	r3, r0
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40022000 	.word	0x40022000
 800266c:	00001388 	.word	0x00001388
 8002670:	40021000 	.word	0x40021000
 8002674:	fffff0ff 	.word	0xfffff0ff
 8002678:	ffff8fff 	.word	0xffff8fff
 800267c:	0800bdd4 	.word	0x0800bdd4
 8002680:	200000c4 	.word	0x200000c4
 8002684:	200000c8 	.word	0x200000c8

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800268e:	4b3c      	ldr	r3, [pc, #240]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2238      	movs	r2, #56	@ 0x38
 8002694:	4013      	ands	r3, r2
 8002696:	d10f      	bne.n	80026b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002698:	4b39      	ldr	r3, [pc, #228]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	0adb      	lsrs	r3, r3, #11
 800269e:	2207      	movs	r2, #7
 80026a0:	4013      	ands	r3, r2
 80026a2:	2201      	movs	r2, #1
 80026a4:	409a      	lsls	r2, r3
 80026a6:	0013      	movs	r3, r2
 80026a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026aa:	6839      	ldr	r1, [r7, #0]
 80026ac:	4835      	ldr	r0, [pc, #212]	@ (8002784 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026ae:	f7fd fd3d 	bl	800012c <__udivsi3>
 80026b2:	0003      	movs	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	e05d      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b8:	4b31      	ldr	r3, [pc, #196]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	2238      	movs	r2, #56	@ 0x38
 80026be:	4013      	ands	r3, r2
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d102      	bne.n	80026ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026c4:	4b30      	ldr	r3, [pc, #192]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x100>)
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	e054      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2238      	movs	r2, #56	@ 0x38
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d138      	bne.n	8002748 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2203      	movs	r2, #3
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026e0:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	2207      	movs	r2, #7
 80026e8:	4013      	ands	r3, r2
 80026ea:	3301      	adds	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	4824      	ldr	r0, [pc, #144]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x100>)
 80026f8:	f7fd fd18 	bl	800012c <__udivsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	0019      	movs	r1, r3
 8002700:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	227f      	movs	r2, #127	@ 0x7f
 8002708:	4013      	ands	r3, r2
 800270a:	434b      	muls	r3, r1
 800270c:	617b      	str	r3, [r7, #20]
        break;
 800270e:	e00d      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	481c      	ldr	r0, [pc, #112]	@ (8002784 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002714:	f7fd fd0a 	bl	800012c <__udivsi3>
 8002718:	0003      	movs	r3, r0
 800271a:	0019      	movs	r1, r3
 800271c:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	227f      	movs	r2, #127	@ 0x7f
 8002724:	4013      	ands	r3, r2
 8002726:	434b      	muls	r3, r1
 8002728:	617b      	str	r3, [r7, #20]
        break;
 800272a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800272c:	4b14      	ldr	r3, [pc, #80]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0f5b      	lsrs	r3, r3, #29
 8002732:	2207      	movs	r2, #7
 8002734:	4013      	ands	r3, r2
 8002736:	3301      	adds	r3, #1
 8002738:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	6978      	ldr	r0, [r7, #20]
 800273e:	f7fd fcf5 	bl	800012c <__udivsi3>
 8002742:	0003      	movs	r3, r0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	e015      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002748:	4b0d      	ldr	r3, [pc, #52]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2238      	movs	r2, #56	@ 0x38
 800274e:	4013      	ands	r3, r2
 8002750:	2b20      	cmp	r3, #32
 8002752:	d103      	bne.n	800275c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002754:	2380      	movs	r3, #128	@ 0x80
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800275c:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <HAL_RCC_GetSysClockFreq+0xf8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2238      	movs	r2, #56	@ 0x38
 8002762:	4013      	ands	r3, r2
 8002764:	2b18      	cmp	r3, #24
 8002766:	d103      	bne.n	8002770 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002768:	23fa      	movs	r3, #250	@ 0xfa
 800276a:	01db      	lsls	r3, r3, #7
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e001      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002774:	693b      	ldr	r3, [r7, #16]
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b006      	add	sp, #24
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	40021000 	.word	0x40021000
 8002784:	00f42400 	.word	0x00f42400
 8002788:	007a1200 	.word	0x007a1200

0800278c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b02      	ldr	r3, [pc, #8]	@ (800279c <HAL_RCC_GetHCLKFreq+0x10>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	200000c4 	.word	0x200000c4

080027a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80027a4:	f7ff fff2 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027a8:	0004      	movs	r4, r0
 80027aa:	f7ff fb49 	bl	8001e40 <LL_RCC_GetAPB1Prescaler>
 80027ae:	0003      	movs	r3, r0
 80027b0:	0b1a      	lsrs	r2, r3, #12
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027b4:	0092      	lsls	r2, r2, #2
 80027b6:	58d3      	ldr	r3, [r2, r3]
 80027b8:	221f      	movs	r2, #31
 80027ba:	4013      	ands	r3, r2
 80027bc:	40dc      	lsrs	r4, r3
 80027be:	0023      	movs	r3, r4
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bdb0      	pop	{r4, r5, r7, pc}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	0800be14 	.word	0x0800be14

080027cc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002818 <HAL_RCC_GetClockConfig+0x4c>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2207      	movs	r2, #7
 80027e2:	401a      	ands	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <HAL_RCC_GetClockConfig+0x4c>)
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	23f0      	movs	r3, #240	@ 0xf0
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	401a      	ands	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <HAL_RCC_GetClockConfig+0x4c>)
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	23e0      	movs	r3, #224	@ 0xe0
 80027fc:	01db      	lsls	r3, r3, #7
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002804:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_GetClockConfig+0x50>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2207      	movs	r2, #7
 800280a:	401a      	ands	r2, r3
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	601a      	str	r2, [r3, #0]
}
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	40022000 	.word	0x40022000

08002820 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002828:	2313      	movs	r3, #19
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002830:	2312      	movs	r3, #18
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	029b      	lsls	r3, r3, #10
 8002840:	4013      	ands	r3, r2
 8002842:	d100      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002844:	e0a3      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2011      	movs	r0, #17
 8002848:	183b      	adds	r3, r7, r0
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284e:	4b86      	ldr	r3, [pc, #536]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002850:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002852:	2380      	movs	r3, #128	@ 0x80
 8002854:	055b      	lsls	r3, r3, #21
 8002856:	4013      	ands	r3, r2
 8002858:	d110      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b83      	ldr	r3, [pc, #524]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800285c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800285e:	4b82      	ldr	r3, [pc, #520]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002860:	2180      	movs	r1, #128	@ 0x80
 8002862:	0549      	lsls	r1, r1, #21
 8002864:	430a      	orrs	r2, r1
 8002866:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002868:	4b7f      	ldr	r3, [pc, #508]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800286a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800286c:	2380      	movs	r3, #128	@ 0x80
 800286e:	055b      	lsls	r3, r3, #21
 8002870:	4013      	ands	r3, r2
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002876:	183b      	adds	r3, r7, r0
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800287c:	4b7b      	ldr	r3, [pc, #492]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b7a      	ldr	r3, [pc, #488]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002882:	2180      	movs	r1, #128	@ 0x80
 8002884:	0049      	lsls	r1, r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800288a:	f7fe fd07 	bl	800129c <HAL_GetTick>
 800288e:	0003      	movs	r3, r0
 8002890:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002892:	e00b      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7fe fd02 	bl	800129c <HAL_GetTick>
 8002898:	0002      	movs	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d904      	bls.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80028a2:	2313      	movs	r3, #19
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	2203      	movs	r2, #3
 80028a8:	701a      	strb	r2, [r3, #0]
        break;
 80028aa:	e005      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	2380      	movs	r3, #128	@ 0x80
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0ed      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80028b8:	2313      	movs	r3, #19
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d154      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028c2:	4b69      	ldr	r3, [pc, #420]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028c6:	23c0      	movs	r3, #192	@ 0xc0
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4013      	ands	r3, r2
 80028cc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d019      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d014      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028de:	4b62      	ldr	r3, [pc, #392]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e2:	4a63      	ldr	r2, [pc, #396]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028ee:	2180      	movs	r1, #128	@ 0x80
 80028f0:	0249      	lsls	r1, r1, #9
 80028f2:	430a      	orrs	r2, r1
 80028f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80028fc:	495d      	ldr	r1, [pc, #372]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80028fe:	400a      	ands	r2, r1
 8002900:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002902:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d016      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fcc4 	bl	800129c <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002918:	e00c      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe fcbf 	bl	800129c <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	4a54      	ldr	r2, [pc, #336]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d904      	bls.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800292a:	2313      	movs	r3, #19
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	2203      	movs	r2, #3
 8002930:	701a      	strb	r2, [r3, #0]
            break;
 8002932:	e004      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002934:	4b4c      	ldr	r3, [pc, #304]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002938:	2202      	movs	r2, #2
 800293a:	4013      	ands	r3, r2
 800293c:	d0ed      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800293e:	2313      	movs	r3, #19
 8002940:	18fb      	adds	r3, r7, r3
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002948:	4b47      	ldr	r3, [pc, #284]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	4a48      	ldr	r2, [pc, #288]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800294e:	4013      	ands	r3, r2
 8002950:	0019      	movs	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699a      	ldr	r2, [r3, #24]
 8002956:	4b44      	ldr	r3, [pc, #272]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002958:	430a      	orrs	r2, r1
 800295a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800295c:	e00c      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800295e:	2312      	movs	r3, #18
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	2213      	movs	r2, #19
 8002964:	18ba      	adds	r2, r7, r2
 8002966:	7812      	ldrb	r2, [r2, #0]
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	e005      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	2312      	movs	r3, #18
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2213      	movs	r2, #19
 8002972:	18ba      	adds	r2, r7, r2
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002978:	2311      	movs	r3, #17
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d105      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b39      	ldr	r3, [pc, #228]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002986:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002988:	493c      	ldr	r1, [pc, #240]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800298a:	400a      	ands	r2, r1
 800298c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	4013      	ands	r3, r2
 8002996:	d009      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002998:	4b33      	ldr	r3, [pc, #204]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	2203      	movs	r2, #3
 800299e:	4393      	bics	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4b30      	ldr	r3, [pc, #192]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029a8:	430a      	orrs	r2, r1
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d009      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	220c      	movs	r2, #12
 80029bc:	4393      	bics	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	4013      	ands	r3, r2
 80029d2:	d009      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029d4:	4b24      	ldr	r3, [pc, #144]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d8:	4a29      	ldr	r2, [pc, #164]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68da      	ldr	r2, [r3, #12]
 80029e2:	4b21      	ldr	r3, [pc, #132]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029e4:	430a      	orrs	r2, r1
 80029e6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	01db      	lsls	r3, r3, #7
 80029f0:	4013      	ands	r3, r2
 80029f2:	d015      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	0899      	lsrs	r1, r3, #2
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695a      	ldr	r2, [r3, #20]
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	05db      	lsls	r3, r3, #23
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d106      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a12:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a18:	2180      	movs	r1, #128	@ 0x80
 8002a1a:	0249      	lsls	r1, r1, #9
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d016      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a30:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	0019      	movs	r1, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	01db      	lsls	r3, r3, #7
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4b05      	ldr	r3, [pc, #20]	@ (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a52:	2180      	movs	r1, #128	@ 0x80
 8002a54:	0249      	lsls	r1, r1, #9
 8002a56:	430a      	orrs	r2, r1
 8002a58:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a5a:	2312      	movs	r3, #18
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	781b      	ldrb	r3, [r3, #0]
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b006      	add	sp, #24
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	fffffcff 	.word	0xfffffcff
 8002a74:	fffeffff 	.word	0xfffeffff
 8002a78:	00001388 	.word	0x00001388
 8002a7c:	efffffff 	.word	0xefffffff
 8002a80:	ffffcfff 	.word	0xffffcfff
 8002a84:	ffff3fff 	.word	0xffff3fff

08002a88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0a8      	b.n	8002bec <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d109      	bne.n	8002ab6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	2382      	movs	r3, #130	@ 0x82
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d009      	beq.n	8002ac2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	61da      	str	r2, [r3, #28]
 8002ab4:	e005      	b.n	8002ac2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	225d      	movs	r2, #93	@ 0x5d
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	225c      	movs	r2, #92	@ 0x5c
 8002ad8:	2100      	movs	r1, #0
 8002ada:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f7fe f8e0 	bl	8000ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	225d      	movs	r2, #93	@ 0x5d
 8002ae8:	2102      	movs	r1, #2
 8002aea:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2140      	movs	r1, #64	@ 0x40
 8002af8:	438a      	bics	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	23e0      	movs	r3, #224	@ 0xe0
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d902      	bls.n	8002b0e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e002      	b.n	8002b14 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b0e:	2380      	movs	r3, #128	@ 0x80
 8002b10:	015b      	lsls	r3, r3, #5
 8002b12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	23f0      	movs	r3, #240	@ 0xf0
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d008      	beq.n	8002b32 <HAL_SPI_Init+0xaa>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	23e0      	movs	r3, #224	@ 0xe0
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d002      	beq.n	8002b32 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	2382      	movs	r3, #130	@ 0x82
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	401a      	ands	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	2384      	movs	r3, #132	@ 0x84
 8002b42:	021b      	lsls	r3, r3, #8
 8002b44:	400b      	ands	r3, r1
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	400b      	ands	r3, r1
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	2101      	movs	r1, #1
 8002b58:	400b      	ands	r3, r1
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6999      	ldr	r1, [r3, #24]
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	400b      	ands	r3, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2138      	movs	r1, #56	@ 0x38
 8002b6e:	400b      	ands	r3, r1
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	2180      	movs	r1, #128	@ 0x80
 8002b78:	400b      	ands	r3, r1
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	401a      	ands	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	0c1b      	lsrs	r3, r3, #16
 8002b96:	2204      	movs	r2, #4
 8002b98:	401a      	ands	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	400b      	ands	r3, r1
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba8:	2108      	movs	r1, #8
 8002baa:	400b      	ands	r3, r1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68d9      	ldr	r1, [r3, #12]
 8002bb2:	23f0      	movs	r3, #240	@ 0xf0
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	0011      	movs	r1, r2
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	2380      	movs	r3, #128	@ 0x80
 8002bc0:	015b      	lsls	r3, r3, #5
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4907      	ldr	r1, [pc, #28]	@ (8002bf4 <HAL_SPI_Init+0x16c>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	225d      	movs	r2, #93	@ 0x5d
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	0018      	movs	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	fffff7ff 	.word	0xfffff7ff

08002bf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	1dbb      	adds	r3, r7, #6
 8002c06:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c08:	231f      	movs	r3, #31
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	225c      	movs	r2, #92	@ 0x5c
 8002c14:	5c9b      	ldrb	r3, [r3, r2]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_SPI_Transmit+0x26>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e147      	b.n	8002eae <HAL_SPI_Transmit+0x2b6>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	225c      	movs	r2, #92	@ 0x5c
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c26:	f7fe fb39 	bl	800129c <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c2e:	2316      	movs	r3, #22
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	1dba      	adds	r2, r7, #6
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	225d      	movs	r2, #93	@ 0x5d
 8002c3c:	5c9b      	ldrb	r3, [r3, r2]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d004      	beq.n	8002c4e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002c44:	231f      	movs	r3, #31
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	2202      	movs	r2, #2
 8002c4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c4c:	e128      	b.n	8002ea0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <HAL_SPI_Transmit+0x64>
 8002c54:	1dbb      	adds	r3, r7, #6
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d104      	bne.n	8002c66 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002c5c:	231f      	movs	r3, #31
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c64:	e11c      	b.n	8002ea0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	225d      	movs	r2, #93	@ 0x5d
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1dba      	adds	r2, r7, #6
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1dba      	adds	r2, r7, #6
 8002c86:	8812      	ldrh	r2, [r2, #0]
 8002c88:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2244      	movs	r2, #68	@ 0x44
 8002c94:	2100      	movs	r1, #0
 8002c96:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2246      	movs	r2, #70	@ 0x46
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d110      	bne.n	8002cda <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2140      	movs	r1, #64	@ 0x40
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2180      	movs	r1, #128	@ 0x80
 8002cd4:	01c9      	lsls	r1, r1, #7
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2240      	movs	r2, #64	@ 0x40
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b40      	cmp	r3, #64	@ 0x40
 8002ce6:	d007      	beq.n	8002cf8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2140      	movs	r1, #64	@ 0x40
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	23e0      	movs	r3, #224	@ 0xe0
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d952      	bls.n	8002daa <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_SPI_Transmit+0x11e>
 8002d0c:	2316      	movs	r3, #22
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d143      	bne.n	8002d9e <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1a:	881a      	ldrh	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	1c9a      	adds	r2, r3, #2
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d3a:	e030      	b.n	8002d9e <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2202      	movs	r2, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d112      	bne.n	8002d70 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5a:	1c9a      	adds	r2, r3, #2
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d6e:	e016      	b.n	8002d9e <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d70:	f7fe fa94 	bl	800129c <HAL_GetTick>
 8002d74:	0002      	movs	r2, r0
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d802      	bhi.n	8002d86 <HAL_SPI_Transmit+0x18e>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	d102      	bne.n	8002d8c <HAL_SPI_Transmit+0x194>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d108      	bne.n	8002d9e <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002d8c:	231f      	movs	r3, #31
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2203      	movs	r2, #3
 8002d92:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	225d      	movs	r2, #93	@ 0x5d
 8002d98:	2101      	movs	r1, #1
 8002d9a:	5499      	strb	r1, [r3, r2]
          goto error;
 8002d9c:	e080      	b.n	8002ea0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1c9      	bne.n	8002d3c <HAL_SPI_Transmit+0x144>
 8002da8:	e053      	b.n	8002e52 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d004      	beq.n	8002dbc <HAL_SPI_Transmit+0x1c4>
 8002db2:	2316      	movs	r3, #22
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d145      	bne.n	8002e48 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	7812      	ldrb	r2, [r2, #0]
 8002dc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002de2:	e031      	b.n	8002e48 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2202      	movs	r2, #2
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d113      	bne.n	8002e1a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e18:	e016      	b.n	8002e48 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e1a:	f7fe fa3f 	bl	800129c <HAL_GetTick>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d802      	bhi.n	8002e30 <HAL_SPI_Transmit+0x238>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <HAL_SPI_Transmit+0x23e>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d108      	bne.n	8002e48 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002e36:	231f      	movs	r3, #31
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	225d      	movs	r2, #93	@ 0x5d
 8002e42:	2101      	movs	r1, #1
 8002e44:	5499      	strb	r1, [r3, r2]
          goto error;
 8002e46:	e02b      	b.n	8002ea0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1c8      	bne.n	8002de4 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 fc47 	bl	80036ec <SPI_EndRxTxTransaction>
 8002e5e:	1e03      	subs	r3, r0, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2220      	movs	r2, #32
 8002e66:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e70:	2300      	movs	r3, #0
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d004      	beq.n	8002e98 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002e8e:	231f      	movs	r3, #31
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e003      	b.n	8002ea0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	225d      	movs	r2, #93	@ 0x5d
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	225c      	movs	r2, #92	@ 0x5c
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002ea8:	231f      	movs	r3, #31
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	781b      	ldrb	r3, [r3, #0]
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b008      	add	sp, #32
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	@ 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	1cbb      	adds	r3, r7, #2
 8002ec8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002ece:	2323      	movs	r3, #35	@ 0x23
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	225c      	movs	r2, #92	@ 0x5c
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_SPI_TransmitReceive+0x2c>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e1c4      	b.n	800326e <HAL_SPI_TransmitReceive+0x3b6>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	225c      	movs	r2, #92	@ 0x5c
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eec:	f7fe f9d6 	bl	800129c <HAL_GetTick>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ef4:	201b      	movs	r0, #27
 8002ef6:	183b      	adds	r3, r7, r0
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	215d      	movs	r1, #93	@ 0x5d
 8002efc:	5c52      	ldrb	r2, [r2, r1]
 8002efe:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002f06:	2312      	movs	r3, #18
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	1cba      	adds	r2, r7, #2
 8002f0c:	8812      	ldrh	r2, [r2, #0]
 8002f0e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f10:	183b      	adds	r3, r7, r0
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d011      	beq.n	8002f3c <HAL_SPI_TransmitReceive+0x84>
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	2382      	movs	r3, #130	@ 0x82
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d107      	bne.n	8002f32 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_SPI_TransmitReceive+0x7a>
 8002f2a:	183b      	adds	r3, r7, r0
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d004      	beq.n	8002f3c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002f32:	2323      	movs	r3, #35	@ 0x23
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2202      	movs	r2, #2
 8002f38:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f3a:	e191      	b.n	8003260 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d006      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x98>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x98>
 8002f48:	1cbb      	adds	r3, r7, #2
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002f50:	2323      	movs	r3, #35	@ 0x23
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f58:	e182      	b.n	8003260 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	225d      	movs	r2, #93	@ 0x5d
 8002f5e:	5c9b      	ldrb	r3, [r3, r2]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d003      	beq.n	8002f6e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	225d      	movs	r2, #93	@ 0x5d
 8002f6a:	2105      	movs	r1, #5
 8002f6c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1cba      	adds	r2, r7, #2
 8002f7e:	2146      	movs	r1, #70	@ 0x46
 8002f80:	8812      	ldrh	r2, [r2, #0]
 8002f82:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1cba      	adds	r2, r7, #2
 8002f88:	2144      	movs	r1, #68	@ 0x44
 8002f8a:	8812      	ldrh	r2, [r2, #0]
 8002f8c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1cba      	adds	r2, r7, #2
 8002f98:	8812      	ldrh	r2, [r2, #0]
 8002f9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1cba      	adds	r2, r7, #2
 8002fa0:	8812      	ldrh	r2, [r2, #0]
 8002fa2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	23e0      	movs	r3, #224	@ 0xe0
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d908      	bls.n	8002fce <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	49ac      	ldr	r1, [pc, #688]	@ (8003278 <HAL_SPI_TransmitReceive+0x3c0>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	e008      	b.n	8002fe0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2180      	movs	r1, #128	@ 0x80
 8002fda:	0149      	lsls	r1, r1, #5
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2240      	movs	r2, #64	@ 0x40
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b40      	cmp	r3, #64	@ 0x40
 8002fec:	d007      	beq.n	8002ffe <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2140      	movs	r1, #64	@ 0x40
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	23e0      	movs	r3, #224	@ 0xe0
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	429a      	cmp	r2, r3
 8003008:	d800      	bhi.n	800300c <HAL_SPI_TransmitReceive+0x154>
 800300a:	e083      	b.n	8003114 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x168>
 8003014:	2312      	movs	r3, #18
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d000      	beq.n	8003020 <HAL_SPI_TransmitReceive+0x168>
 800301e:	e06d      	b.n	80030fc <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003024:	881a      	ldrh	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003044:	e05a      	b.n	80030fc <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2202      	movs	r2, #2
 800304e:	4013      	ands	r3, r2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d11b      	bne.n	800308c <HAL_SPI_TransmitReceive+0x1d4>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <HAL_SPI_TransmitReceive+0x1d4>
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	d113      	bne.n	800308c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003068:	881a      	ldrh	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	1c9a      	adds	r2, r3, #2
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2201      	movs	r2, #1
 8003094:	4013      	ands	r3, r2
 8003096:	2b01      	cmp	r3, #1
 8003098:	d11c      	bne.n	80030d4 <HAL_SPI_TransmitReceive+0x21c>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2246      	movs	r2, #70	@ 0x46
 800309e:	5a9b      	ldrh	r3, [r3, r2]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b0:	b292      	uxth	r2, r2
 80030b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2246      	movs	r2, #70	@ 0x46
 80030c2:	5a9b      	ldrh	r3, [r3, r2]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b299      	uxth	r1, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2246      	movs	r2, #70	@ 0x46
 80030ce:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030d0:	2301      	movs	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030d4:	f7fe f8e2 	bl	800129c <HAL_GetTick>
 80030d8:	0002      	movs	r2, r0
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d80b      	bhi.n	80030fc <HAL_SPI_TransmitReceive+0x244>
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	3301      	adds	r3, #1
 80030e8:	d008      	beq.n	80030fc <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80030ea:	2323      	movs	r3, #35	@ 0x23
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	2203      	movs	r2, #3
 80030f0:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	225d      	movs	r2, #93	@ 0x5d
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]
        goto error;
 80030fa:	e0b1      	b.n	8003260 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d19f      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x18e>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2246      	movs	r2, #70	@ 0x46
 800310a:	5a9b      	ldrh	r3, [r3, r2]
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d199      	bne.n	8003046 <HAL_SPI_TransmitReceive+0x18e>
 8003112:	e089      	b.n	8003228 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d005      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x270>
 800311c:	2312      	movs	r3, #18
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d000      	beq.n	8003128 <HAL_SPI_TransmitReceive+0x270>
 8003126:	e074      	b.n	8003212 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	330c      	adds	r3, #12
 8003132:	7812      	ldrb	r2, [r2, #0]
 8003134:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800314e:	e060      	b.n	8003212 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	2b02      	cmp	r3, #2
 800315c:	d11c      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x2e0>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d017      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x2e0>
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	2b01      	cmp	r3, #1
 800316c:	d114      	bne.n	8003198 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	7812      	ldrb	r2, [r2, #0]
 800317a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	1c5a      	adds	r2, r3, #1
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2201      	movs	r2, #1
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d11e      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x32c>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2246      	movs	r2, #70	@ 0x46
 80031aa:	5a9b      	ldrh	r3, [r3, r2]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d018      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	001a      	movs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	7812      	ldrb	r2, [r2, #0]
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2246      	movs	r2, #70	@ 0x46
 80031d2:	5a9b      	ldrh	r3, [r3, r2]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b299      	uxth	r1, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2246      	movs	r2, #70	@ 0x46
 80031de:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031e0:	2301      	movs	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031e4:	f7fe f85a 	bl	800129c <HAL_GetTick>
 80031e8:	0002      	movs	r2, r0
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d802      	bhi.n	80031fa <HAL_SPI_TransmitReceive+0x342>
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	3301      	adds	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_TransmitReceive+0x348>
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d108      	bne.n	8003212 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003200:	2323      	movs	r3, #35	@ 0x23
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2203      	movs	r2, #3
 8003206:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	225d      	movs	r2, #93	@ 0x5d
 800320c:	2101      	movs	r1, #1
 800320e:	5499      	strb	r1, [r3, r2]
        goto error;
 8003210:	e026      	b.n	8003260 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d199      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x298>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2246      	movs	r2, #70	@ 0x46
 8003220:	5a9b      	ldrh	r3, [r3, r2]
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d193      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	0018      	movs	r0, r3
 8003230:	f000 fa5c 	bl	80036ec <SPI_EndRxTxTransaction>
 8003234:	1e03      	subs	r3, r0, #0
 8003236:	d006      	beq.n	8003246 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003238:	2323      	movs	r3, #35	@ 0x23
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	2201      	movs	r2, #1
 800323e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324a:	2b00      	cmp	r3, #0
 800324c:	d004      	beq.n	8003258 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800324e:	2323      	movs	r3, #35	@ 0x23
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
 8003256:	e003      	b.n	8003260 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	225d      	movs	r2, #93	@ 0x5d
 800325c:	2101      	movs	r1, #1
 800325e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	225c      	movs	r2, #92	@ 0x5c
 8003264:	2100      	movs	r1, #0
 8003266:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003268:	2323      	movs	r3, #35	@ 0x23
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	781b      	ldrb	r3, [r3, #0]
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b00a      	add	sp, #40	@ 0x28
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	ffffefff 	.word	0xffffefff

0800327c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2240      	movs	r2, #64	@ 0x40
 8003298:	4013      	ands	r3, r2
 800329a:	d10d      	bne.n	80032b8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2201      	movs	r2, #1
 80032a0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032a2:	d009      	beq.n	80032b8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2240      	movs	r2, #64	@ 0x40
 80032a8:	4013      	ands	r3, r2
 80032aa:	d005      	beq.n	80032b8 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	0010      	movs	r0, r2
 80032b4:	4798      	blx	r3
    return;
 80032b6:	e0c5      	b.n	8003444 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	2202      	movs	r2, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	d009      	beq.n	80032d4 <HAL_SPI_IRQHandler+0x58>
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2280      	movs	r2, #128	@ 0x80
 80032c4:	4013      	ands	r3, r2
 80032c6:	d005      	beq.n	80032d4 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	0010      	movs	r0, r2
 80032d0:	4798      	blx	r3
    return;
 80032d2:	e0b7      	b.n	8003444 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2220      	movs	r2, #32
 80032d8:	4013      	ands	r3, r2
 80032da:	d109      	bne.n	80032f0 <HAL_SPI_IRQHandler+0x74>
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2240      	movs	r2, #64	@ 0x40
 80032e0:	4013      	ands	r3, r2
 80032e2:	d105      	bne.n	80032f0 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	2380      	movs	r3, #128	@ 0x80
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	d100      	bne.n	80032f0 <HAL_SPI_IRQHandler+0x74>
 80032ee:	e0a9      	b.n	8003444 <HAL_SPI_IRQHandler+0x1c8>
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2220      	movs	r2, #32
 80032f4:	4013      	ands	r3, r2
 80032f6:	d100      	bne.n	80032fa <HAL_SPI_IRQHandler+0x7e>
 80032f8:	e0a4      	b.n	8003444 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2240      	movs	r2, #64	@ 0x40
 80032fe:	4013      	ands	r3, r2
 8003300:	d023      	beq.n	800334a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	225d      	movs	r2, #93	@ 0x5d
 8003306:	5c9b      	ldrb	r3, [r3, r2]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b03      	cmp	r3, #3
 800330c:	d011      	beq.n	8003332 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003312:	2204      	movs	r2, #4
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	e00b      	b.n	800334a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
        return;
 8003348:	e07c      	b.n	8003444 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2220      	movs	r2, #32
 800334e:	4013      	ands	r3, r2
 8003350:	d014      	beq.n	800337c <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003356:	2201      	movs	r2, #1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2140      	movs	r1, #64	@ 0x40
 8003376:	438a      	bics	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	2380      	movs	r3, #128	@ 0x80
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4013      	ands	r3, r2
 8003384:	d00c      	beq.n	80033a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800338a:	2208      	movs	r2, #8
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d04c      	beq.n	8003442 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	21e0      	movs	r1, #224	@ 0xe0
 80033b4:	438a      	bics	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	225d      	movs	r2, #93	@ 0x5d
 80033bc:	2101      	movs	r1, #1
 80033be:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2202      	movs	r2, #2
 80033c4:	4013      	ands	r3, r2
 80033c6:	d103      	bne.n	80033d0 <HAL_SPI_IRQHandler+0x154>
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2201      	movs	r2, #1
 80033cc:	4013      	ands	r3, r2
 80033ce:	d032      	beq.n	8003436 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2103      	movs	r1, #3
 80033dc:	438a      	bics	r2, r1
 80033de:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d010      	beq.n	800340a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	4a17      	ldr	r2, [pc, #92]	@ (800344c <HAL_SPI_IRQHandler+0x1d0>)
 80033ee:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7fe f8b7 	bl	8001568 <HAL_DMA_Abort_IT>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d005      	beq.n	800340a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003402:	2240      	movs	r2, #64	@ 0x40
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	2b00      	cmp	r3, #0
 8003410:	d016      	beq.n	8003440 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	4a0d      	ldr	r2, [pc, #52]	@ (800344c <HAL_SPI_IRQHandler+0x1d0>)
 8003418:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	0018      	movs	r0, r3
 8003420:	f7fe f8a2 	bl	8001568 <HAL_DMA_Abort_IT>
 8003424:	1e03      	subs	r3, r0, #0
 8003426:	d00b      	beq.n	8003440 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800342c:	2240      	movs	r2, #64	@ 0x40
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003434:	e004      	b.n	8003440 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	0018      	movs	r0, r3
 800343a:	f000 f809 	bl	8003450 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800343e:	e000      	b.n	8003442 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8003440:	46c0      	nop			@ (mov r8, r8)
    return;
 8003442:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003444:	46bd      	mov	sp, r7
 8003446:	b008      	add	sp, #32
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			@ (mov r8, r8)
 800344c:	08003461 	.word	0x08003461

08003450 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}

08003460 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2246      	movs	r2, #70	@ 0x46
 8003472:	2100      	movs	r1, #0
 8003474:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	0018      	movs	r0, r3
 8003480:	f7ff ffe6 	bl	8003450 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003484:	46c0      	nop			@ (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b004      	add	sp, #16
 800348a:	bd80      	pop	{r7, pc}

0800348c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	1dfb      	adds	r3, r7, #7
 800349a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800349c:	f7fd fefe 	bl	800129c <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	18d3      	adds	r3, r2, r3
 80034aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034ac:	f7fd fef6 	bl	800129c <HAL_GetTick>
 80034b0:	0003      	movs	r3, r0
 80034b2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034b4:	4b3a      	ldr	r3, [pc, #232]	@ (80035a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	015b      	lsls	r3, r3, #5
 80034ba:	0d1b      	lsrs	r3, r3, #20
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	4353      	muls	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034c2:	e058      	b.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	d055      	beq.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034ca:	f7fd fee7 	bl	800129c <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d902      	bls.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d142      	bne.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	21e0      	movs	r1, #224	@ 0xe0
 80034ec:	438a      	bics	r2, r1
 80034ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	2382      	movs	r3, #130	@ 0x82
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d113      	bne.n	8003524 <SPI_WaitFlagStateUntilTimeout+0x98>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	2380      	movs	r3, #128	@ 0x80
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	429a      	cmp	r2, r3
 8003506:	d005      	beq.n	8003514 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	429a      	cmp	r2, r3
 8003512:	d107      	bne.n	8003524 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2140      	movs	r1, #64	@ 0x40
 8003520:	438a      	bics	r2, r1
 8003522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003528:	2380      	movs	r3, #128	@ 0x80
 800352a:	019b      	lsls	r3, r3, #6
 800352c:	429a      	cmp	r2, r3
 800352e:	d110      	bne.n	8003552 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	491a      	ldr	r1, [pc, #104]	@ (80035a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800353c:	400a      	ands	r2, r1
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2180      	movs	r1, #128	@ 0x80
 800354c:	0189      	lsls	r1, r1, #6
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	225d      	movs	r2, #93	@ 0x5d
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	225c      	movs	r2, #92	@ 0x5c
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e017      	b.n	8003596 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3b01      	subs	r3, #1
 8003574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	425a      	negs	r2, r3
 8003586:	4153      	adcs	r3, r2
 8003588:	b2db      	uxtb	r3, r3
 800358a:	001a      	movs	r2, r3
 800358c:	1dfb      	adds	r3, r7, #7
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d197      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b008      	add	sp, #32
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	200000c4 	.word	0x200000c4
 80035a4:	ffffdfff 	.word	0xffffdfff

080035a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08a      	sub	sp, #40	@ 0x28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
 80035b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035b6:	2317      	movs	r3, #23
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035be:	f7fd fe6d 	bl	800129c <HAL_GetTick>
 80035c2:	0002      	movs	r2, r0
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	18d3      	adds	r3, r2, r3
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80035ce:	f7fd fe65 	bl	800129c <HAL_GetTick>
 80035d2:	0003      	movs	r3, r0
 80035d4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	330c      	adds	r3, #12
 80035dc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035de:	4b41      	ldr	r3, [pc, #260]	@ (80036e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	0013      	movs	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	189b      	adds	r3, r3, r2
 80035e8:	00da      	lsls	r2, r3, #3
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	0d1b      	lsrs	r3, r3, #20
 80035ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035f0:	4353      	muls	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035f4:	e068      	b.n	80036c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	23c0      	movs	r3, #192	@ 0xc0
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d10a      	bne.n	8003616 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	b2da      	uxtb	r2, r3
 800360c:	2117      	movs	r1, #23
 800360e:	187b      	adds	r3, r7, r1
 8003610:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003612:	187b      	adds	r3, r7, r1
 8003614:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	d055      	beq.n	80036c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800361c:	f7fd fe3e 	bl	800129c <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003628:	429a      	cmp	r2, r3
 800362a:	d902      	bls.n	8003632 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	2b00      	cmp	r3, #0
 8003630:	d142      	bne.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	21e0      	movs	r1, #224	@ 0xe0
 800363e:	438a      	bics	r2, r1
 8003640:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	2382      	movs	r3, #130	@ 0x82
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	429a      	cmp	r2, r3
 800364c:	d113      	bne.n	8003676 <SPI_WaitFifoStateUntilTimeout+0xce>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	2380      	movs	r3, #128	@ 0x80
 8003654:	021b      	lsls	r3, r3, #8
 8003656:	429a      	cmp	r2, r3
 8003658:	d005      	beq.n	8003666 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	429a      	cmp	r2, r3
 8003664:	d107      	bne.n	8003676 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2140      	movs	r1, #64	@ 0x40
 8003672:	438a      	bics	r2, r1
 8003674:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	429a      	cmp	r2, r3
 8003680:	d110      	bne.n	80036a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4916      	ldr	r1, [pc, #88]	@ (80036e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800368e:	400a      	ands	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2180      	movs	r1, #128	@ 0x80
 800369e:	0189      	lsls	r1, r1, #6
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	225d      	movs	r2, #93	@ 0x5d
 80036a8:	2101      	movs	r1, #1
 80036aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	225c      	movs	r2, #92	@ 0x5c
 80036b0:	2100      	movs	r1, #0
 80036b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e010      	b.n	80036da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4013      	ands	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d18e      	bne.n	80035f6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	0018      	movs	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	b00a      	add	sp, #40	@ 0x28
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	200000c4 	.word	0x200000c4
 80036e8:	ffffdfff 	.word	0xffffdfff

080036ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	23c0      	movs	r3, #192	@ 0xc0
 80036fc:	0159      	lsls	r1, r3, #5
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	0013      	movs	r3, r2
 8003706:	2200      	movs	r2, #0
 8003708:	f7ff ff4e 	bl	80035a8 <SPI_WaitFifoStateUntilTimeout>
 800370c:	1e03      	subs	r3, r0, #0
 800370e:	d007      	beq.n	8003720 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003714:	2220      	movs	r2, #32
 8003716:	431a      	orrs	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e027      	b.n	8003770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	9300      	str	r3, [sp, #0]
 8003728:	0013      	movs	r3, r2
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	@ 0x80
 800372e:	f7ff fead 	bl	800348c <SPI_WaitFlagStateUntilTimeout>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d007      	beq.n	8003746 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373a:	2220      	movs	r2, #32
 800373c:	431a      	orrs	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e014      	b.n	8003770 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	23c0      	movs	r3, #192	@ 0xc0
 800374a:	00d9      	lsls	r1, r3, #3
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	0013      	movs	r3, r2
 8003754:	2200      	movs	r2, #0
 8003756:	f7ff ff27 	bl	80035a8 <SPI_WaitFifoStateUntilTimeout>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d007      	beq.n	800376e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003762:	2220      	movs	r2, #32
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e000      	b.n	8003770 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b004      	add	sp, #16
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e04a      	b.n	8003820 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	223d      	movs	r2, #61	@ 0x3d
 800378e:	5c9b      	ldrb	r3, [r3, r2]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	223c      	movs	r2, #60	@ 0x3c
 800379a:	2100      	movs	r1, #0
 800379c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7fd fc49 	bl	8001038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	223d      	movs	r2, #61	@ 0x3d
 80037aa:	2102      	movs	r1, #2
 80037ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3304      	adds	r3, #4
 80037b6:	0019      	movs	r1, r3
 80037b8:	0010      	movs	r0, r2
 80037ba:	f000 f9b3 	bl	8003b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2248      	movs	r2, #72	@ 0x48
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	223e      	movs	r2, #62	@ 0x3e
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	223f      	movs	r2, #63	@ 0x3f
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2240      	movs	r2, #64	@ 0x40
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2241      	movs	r2, #65	@ 0x41
 80037e2:	2101      	movs	r1, #1
 80037e4:	5499      	strb	r1, [r3, r2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2242      	movs	r2, #66	@ 0x42
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2243      	movs	r2, #67	@ 0x43
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2244      	movs	r2, #68	@ 0x44
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2245      	movs	r2, #69	@ 0x45
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2246      	movs	r2, #70	@ 0x46
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2247      	movs	r2, #71	@ 0x47
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	223d      	movs	r2, #61	@ 0x3d
 800381a:	2101      	movs	r1, #1
 800381c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	223d      	movs	r2, #61	@ 0x3d
 8003834:	5c9b      	ldrb	r3, [r3, r2]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d001      	beq.n	8003840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e03c      	b.n	80038ba <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	223d      	movs	r2, #61	@ 0x3d
 8003844:	2102      	movs	r1, #2
 8003846:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2101      	movs	r1, #1
 8003854:	430a      	orrs	r2, r1
 8003856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a19      	ldr	r2, [pc, #100]	@ (80038c4 <HAL_TIM_Base_Start_IT+0x9c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_TIM_Base_Start_IT+0x4e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a18      	ldr	r2, [pc, #96]	@ (80038c8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_TIM_Base_Start_IT+0x4e>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a16      	ldr	r2, [pc, #88]	@ (80038cc <HAL_TIM_Base_Start_IT+0xa4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d116      	bne.n	80038a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a14      	ldr	r2, [pc, #80]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xa8>)
 800387e:	4013      	ands	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b06      	cmp	r3, #6
 8003886:	d016      	beq.n	80038b6 <HAL_TIM_Base_Start_IT+0x8e>
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	025b      	lsls	r3, r3, #9
 800388e:	429a      	cmp	r2, r3
 8003890:	d011      	beq.n	80038b6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	430a      	orrs	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a2:	e008      	b.n	80038b6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	e000      	b.n	80038b8 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b004      	add	sp, #16
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	40012c00 	.word	0x40012c00
 80038c8:	40000400 	.word	0x40000400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	00010007 	.word	0x00010007

080038d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2202      	movs	r2, #2
 80038f0:	4013      	ands	r3, r2
 80038f2:	d021      	beq.n	8003938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2202      	movs	r2, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	d01d      	beq.n	8003938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2203      	movs	r2, #3
 8003902:	4252      	negs	r2, r2
 8003904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2203      	movs	r2, #3
 8003914:	4013      	ands	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	0018      	movs	r0, r3
 800391c:	f000 f8ea 	bl	8003af4 <HAL_TIM_IC_CaptureCallback>
 8003920:	e007      	b.n	8003932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f000 f8dd 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	0018      	movs	r0, r3
 800392e:	f000 f8e9 	bl	8003b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2204      	movs	r2, #4
 800393c:	4013      	ands	r3, r2
 800393e:	d022      	beq.n	8003986 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2204      	movs	r2, #4
 8003944:	4013      	ands	r3, r2
 8003946:	d01e      	beq.n	8003986 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2205      	movs	r2, #5
 800394e:	4252      	negs	r2, r2
 8003950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2202      	movs	r2, #2
 8003956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	23c0      	movs	r3, #192	@ 0xc0
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4013      	ands	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	0018      	movs	r0, r3
 800396a:	f000 f8c3 	bl	8003af4 <HAL_TIM_IC_CaptureCallback>
 800396e:	e007      	b.n	8003980 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	0018      	movs	r0, r3
 8003974:	f000 f8b6 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	0018      	movs	r0, r3
 800397c:	f000 f8c2 	bl	8003b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2208      	movs	r2, #8
 800398a:	4013      	ands	r3, r2
 800398c:	d021      	beq.n	80039d2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2208      	movs	r2, #8
 8003992:	4013      	ands	r3, r2
 8003994:	d01d      	beq.n	80039d2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2209      	movs	r2, #9
 800399c:	4252      	negs	r2, r2
 800399e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2203      	movs	r2, #3
 80039ae:	4013      	ands	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f000 f89d 	bl	8003af4 <HAL_TIM_IC_CaptureCallback>
 80039ba:	e007      	b.n	80039cc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 f890 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 f89c 	bl	8003b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2210      	movs	r2, #16
 80039d6:	4013      	ands	r3, r2
 80039d8:	d022      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2210      	movs	r2, #16
 80039de:	4013      	ands	r3, r2
 80039e0:	d01e      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2211      	movs	r2, #17
 80039e8:	4252      	negs	r2, r2
 80039ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2208      	movs	r2, #8
 80039f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	23c0      	movs	r3, #192	@ 0xc0
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4013      	ands	r3, r2
 80039fe:	d004      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	0018      	movs	r0, r3
 8003a04:	f000 f876 	bl	8003af4 <HAL_TIM_IC_CaptureCallback>
 8003a08:	e007      	b.n	8003a1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f869 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 f875 	bl	8003b04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2201      	movs	r2, #1
 8003a24:	4013      	ands	r3, r2
 8003a26:	d00c      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d008      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2202      	movs	r2, #2
 8003a36:	4252      	negs	r2, r2
 8003a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7fd f8c9 	bl	8000bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2280      	movs	r2, #128	@ 0x80
 8003a46:	4013      	ands	r3, r2
 8003a48:	d104      	bne.n	8003a54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	019b      	lsls	r3, r3, #6
 8003a50:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a52:	d00b      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2280      	movs	r2, #128	@ 0x80
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1e      	ldr	r2, [pc, #120]	@ (8003adc <HAL_TIM_IRQHandler+0x208>)
 8003a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 f8e8 	bl	8003c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2280      	movs	r2, #128	@ 0x80
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a17      	ldr	r2, [pc, #92]	@ (8003ae0 <HAL_TIM_IRQHandler+0x20c>)
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 f8df 	bl	8003c4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2240      	movs	r2, #64	@ 0x40
 8003a92:	4013      	ands	r3, r2
 8003a94:	d00c      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2240      	movs	r2, #64	@ 0x40
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d008      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2241      	movs	r2, #65	@ 0x41
 8003aa4:	4252      	negs	r2, r2
 8003aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f000 f832 	bl	8003b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	4013      	ands	r3, r2
 8003abe:	d008      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2221      	movs	r2, #33	@ 0x21
 8003ac6:	4252      	negs	r2, r2
 8003ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f000 f8ad 	bl	8003c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	ffffdf7f 	.word	0xffffdf7f
 8003ae0:	fffffeff 	.word	0xfffffeff

08003ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b0c:	46c0      	nop			@ (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b1c:	46c0      	nop			@ (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a36      	ldr	r2, [pc, #216]	@ (8003c10 <TIM_Base_SetConfig+0xec>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0x20>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a35      	ldr	r2, [pc, #212]	@ (8003c14 <TIM_Base_SetConfig+0xf0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d108      	bne.n	8003b56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2270      	movs	r2, #112	@ 0x70
 8003b48:	4393      	bics	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2d      	ldr	r2, [pc, #180]	@ (8003c10 <TIM_Base_SetConfig+0xec>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <TIM_Base_SetConfig+0x62>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	@ (8003c14 <TIM_Base_SetConfig+0xf0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_Base_SetConfig+0x62>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	@ (8003c18 <TIM_Base_SetConfig+0xf4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_Base_SetConfig+0x62>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	@ (8003c1c <TIM_Base_SetConfig+0xf8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0x62>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a29      	ldr	r2, [pc, #164]	@ (8003c20 <TIM_Base_SetConfig+0xfc>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0x62>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a28      	ldr	r2, [pc, #160]	@ (8003c24 <TIM_Base_SetConfig+0x100>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a27      	ldr	r2, [pc, #156]	@ (8003c28 <TIM_Base_SetConfig+0x104>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	4393      	bics	r3, r2
 8003b9e:	001a      	movs	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a13      	ldr	r2, [pc, #76]	@ (8003c10 <TIM_Base_SetConfig+0xec>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00b      	beq.n	8003bde <TIM_Base_SetConfig+0xba>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a14      	ldr	r2, [pc, #80]	@ (8003c1c <TIM_Base_SetConfig+0xf8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <TIM_Base_SetConfig+0xba>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a13      	ldr	r2, [pc, #76]	@ (8003c20 <TIM_Base_SetConfig+0xfc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d003      	beq.n	8003bde <TIM_Base_SetConfig+0xba>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a12      	ldr	r2, [pc, #72]	@ (8003c24 <TIM_Base_SetConfig+0x100>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d103      	bne.n	8003be6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d106      	bne.n	8003c06 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4393      	bics	r3, r2
 8003c00:	001a      	movs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	611a      	str	r2, [r3, #16]
  }
}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b004      	add	sp, #16
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	40012c00 	.word	0x40012c00
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40002000 	.word	0x40002000
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	fffffcff 	.word	0xfffffcff

08003c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c34:	46c0      	nop			@ (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c44:	46c0      	nop			@ (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e046      	b.n	8003cfc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2288      	movs	r2, #136	@ 0x88
 8003c72:	589b      	ldr	r3, [r3, r2]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2284      	movs	r2, #132	@ 0x84
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7fd fa4e 	bl	8001124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2288      	movs	r2, #136	@ 0x88
 8003c8c:	2124      	movs	r1, #36	@ 0x24
 8003c8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 fa74 	bl	8004198 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 f8cc 	bl	8003e50 <UART_SetConfig>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e01c      	b.n	8003cfc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	490d      	ldr	r1, [pc, #52]	@ (8003d04 <HAL_UART_Init+0xa8>)
 8003cce:	400a      	ands	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	212a      	movs	r1, #42	@ 0x2a
 8003cde:	438a      	bics	r2, r1
 8003ce0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2101      	movs	r1, #1
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 fb03 	bl	8004300 <UART_CheckIdleState>
 8003cfa:	0003      	movs	r3, r0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b002      	add	sp, #8
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffffb7ff 	.word	0xffffb7ff

08003d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	@ 0x28
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2288      	movs	r2, #136	@ 0x88
 8003d1c:	589b      	ldr	r3, [r3, r2]
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d000      	beq.n	8003d24 <HAL_UART_Transmit+0x1c>
 8003d22:	e090      	b.n	8003e46 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_UART_Transmit+0x2a>
 8003d2a:	1dbb      	adds	r3, r7, #6
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e088      	b.n	8003e48 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	2380      	movs	r3, #128	@ 0x80
 8003d3c:	015b      	lsls	r3, r3, #5
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d109      	bne.n	8003d56 <HAL_UART_Transmit+0x4e>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d105      	bne.n	8003d56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d001      	beq.n	8003d56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e078      	b.n	8003e48 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2290      	movs	r2, #144	@ 0x90
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2288      	movs	r2, #136	@ 0x88
 8003d62:	2121      	movs	r1, #33	@ 0x21
 8003d64:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d66:	f7fd fa99 	bl	800129c <HAL_GetTick>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1dba      	adds	r2, r7, #6
 8003d72:	2154      	movs	r1, #84	@ 0x54
 8003d74:	8812      	ldrh	r2, [r2, #0]
 8003d76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1dba      	adds	r2, r7, #6
 8003d7c:	2156      	movs	r1, #86	@ 0x56
 8003d7e:	8812      	ldrh	r2, [r2, #0]
 8003d80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	015b      	lsls	r3, r3, #5
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d108      	bne.n	8003da0 <HAL_UART_Transmit+0x98>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e003      	b.n	8003da8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003da8:	e030      	b.n	8003e0c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	0013      	movs	r3, r2
 8003db4:	2200      	movs	r2, #0
 8003db6:	2180      	movs	r1, #128	@ 0x80
 8003db8:	f000 fb4c 	bl	8004454 <UART_WaitOnFlagUntilTimeout>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2288      	movs	r2, #136	@ 0x88
 8003dc4:	2120      	movs	r1, #32
 8003dc6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e03d      	b.n	8003e48 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	001a      	movs	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	05d2      	lsls	r2, r2, #23
 8003dde:	0dd2      	lsrs	r2, r2, #23
 8003de0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	3302      	adds	r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e007      	b.n	8003dfa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2256      	movs	r2, #86	@ 0x56
 8003dfe:	5a9b      	ldrh	r3, [r3, r2]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b299      	uxth	r1, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2256      	movs	r2, #86	@ 0x56
 8003e0a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2256      	movs	r2, #86	@ 0x56
 8003e10:	5a9b      	ldrh	r3, [r3, r2]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1c8      	bne.n	8003daa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	0013      	movs	r3, r2
 8003e22:	2200      	movs	r2, #0
 8003e24:	2140      	movs	r1, #64	@ 0x40
 8003e26:	f000 fb15 	bl	8004454 <UART_WaitOnFlagUntilTimeout>
 8003e2a:	1e03      	subs	r3, r0, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2288      	movs	r2, #136	@ 0x88
 8003e32:	2120      	movs	r1, #32
 8003e34:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e006      	b.n	8003e48 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2288      	movs	r2, #136	@ 0x88
 8003e3e:	2120      	movs	r1, #32
 8003e40:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	e000      	b.n	8003e48 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003e46:	2302      	movs	r3, #2
  }
}
 8003e48:	0018      	movs	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b008      	add	sp, #32
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e58:	231a      	movs	r3, #26
 8003e5a:	18fb      	adds	r3, r7, r3
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4abc      	ldr	r2, [pc, #752]	@ (8004170 <UART_SetConfig+0x320>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	0019      	movs	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4ab7      	ldr	r2, [pc, #732]	@ (8004174 <UART_SetConfig+0x324>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	69fa      	ldr	r2, [r7, #28]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4aae      	ldr	r2, [pc, #696]	@ (8004178 <UART_SetConfig+0x328>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed2:	220f      	movs	r2, #15
 8003ed4:	4393      	bics	r3, r2
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4aa4      	ldr	r2, [pc, #656]	@ (800417c <UART_SetConfig+0x32c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d127      	bne.n	8003f3e <UART_SetConfig+0xee>
 8003eee:	4ba4      	ldr	r3, [pc, #656]	@ (8004180 <UART_SetConfig+0x330>)
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d017      	beq.n	8003f2a <UART_SetConfig+0xda>
 8003efa:	d81b      	bhi.n	8003f34 <UART_SetConfig+0xe4>
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d00a      	beq.n	8003f16 <UART_SetConfig+0xc6>
 8003f00:	d818      	bhi.n	8003f34 <UART_SetConfig+0xe4>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <UART_SetConfig+0xbc>
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d00a      	beq.n	8003f20 <UART_SetConfig+0xd0>
 8003f0a:	e013      	b.n	8003f34 <UART_SetConfig+0xe4>
 8003f0c:	231b      	movs	r3, #27
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	2200      	movs	r2, #0
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	e058      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f16:	231b      	movs	r3, #27
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	701a      	strb	r2, [r3, #0]
 8003f1e:	e053      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f20:	231b      	movs	r3, #27
 8003f22:	18fb      	adds	r3, r7, r3
 8003f24:	2204      	movs	r2, #4
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e04e      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f2a:	231b      	movs	r3, #27
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2208      	movs	r2, #8
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	e049      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f34:	231b      	movs	r3, #27
 8003f36:	18fb      	adds	r3, r7, r3
 8003f38:	2210      	movs	r2, #16
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e044      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a90      	ldr	r2, [pc, #576]	@ (8004184 <UART_SetConfig+0x334>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d127      	bne.n	8003f98 <UART_SetConfig+0x148>
 8003f48:	4b8d      	ldr	r3, [pc, #564]	@ (8004180 <UART_SetConfig+0x330>)
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	220c      	movs	r2, #12
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d017      	beq.n	8003f84 <UART_SetConfig+0x134>
 8003f54:	d81b      	bhi.n	8003f8e <UART_SetConfig+0x13e>
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d00a      	beq.n	8003f70 <UART_SetConfig+0x120>
 8003f5a:	d818      	bhi.n	8003f8e <UART_SetConfig+0x13e>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <UART_SetConfig+0x116>
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d00a      	beq.n	8003f7a <UART_SetConfig+0x12a>
 8003f64:	e013      	b.n	8003f8e <UART_SetConfig+0x13e>
 8003f66:	231b      	movs	r3, #27
 8003f68:	18fb      	adds	r3, r7, r3
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e02b      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f70:	231b      	movs	r3, #27
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	2202      	movs	r2, #2
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e026      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f7a:	231b      	movs	r3, #27
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	2204      	movs	r2, #4
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	e021      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f84:	231b      	movs	r3, #27
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	2208      	movs	r2, #8
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e01c      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f8e:	231b      	movs	r3, #27
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	2210      	movs	r2, #16
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	e017      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a7a      	ldr	r2, [pc, #488]	@ (8004188 <UART_SetConfig+0x338>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d104      	bne.n	8003fac <UART_SetConfig+0x15c>
 8003fa2:	231b      	movs	r3, #27
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	e00d      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a76      	ldr	r2, [pc, #472]	@ (800418c <UART_SetConfig+0x33c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d104      	bne.n	8003fc0 <UART_SetConfig+0x170>
 8003fb6:	231b      	movs	r3, #27
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]
 8003fbe:	e003      	b.n	8003fc8 <UART_SetConfig+0x178>
 8003fc0:	231b      	movs	r3, #27
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2210      	movs	r2, #16
 8003fc6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	2380      	movs	r3, #128	@ 0x80
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d000      	beq.n	8003fd6 <UART_SetConfig+0x186>
 8003fd4:	e065      	b.n	80040a2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003fd6:	231b      	movs	r3, #27
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d015      	beq.n	800400c <UART_SetConfig+0x1bc>
 8003fe0:	dc18      	bgt.n	8004014 <UART_SetConfig+0x1c4>
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d00d      	beq.n	8004002 <UART_SetConfig+0x1b2>
 8003fe6:	dc15      	bgt.n	8004014 <UART_SetConfig+0x1c4>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <UART_SetConfig+0x1a2>
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d005      	beq.n	8003ffc <UART_SetConfig+0x1ac>
 8003ff0:	e010      	b.n	8004014 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff2:	f7fe fbd5 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	617b      	str	r3, [r7, #20]
        break;
 8003ffa:	e012      	b.n	8004022 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ffc:	4b64      	ldr	r3, [pc, #400]	@ (8004190 <UART_SetConfig+0x340>)
 8003ffe:	617b      	str	r3, [r7, #20]
        break;
 8004000:	e00f      	b.n	8004022 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004002:	f7fe fb41 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8004006:	0003      	movs	r3, r0
 8004008:	617b      	str	r3, [r7, #20]
        break;
 800400a:	e00a      	b.n	8004022 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	021b      	lsls	r3, r3, #8
 8004010:	617b      	str	r3, [r7, #20]
        break;
 8004012:	e006      	b.n	8004022 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004018:	231a      	movs	r3, #26
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
        break;
 8004020:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d100      	bne.n	800402a <UART_SetConfig+0x1da>
 8004028:	e08d      	b.n	8004146 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800402e:	4b59      	ldr	r3, [pc, #356]	@ (8004194 <UART_SetConfig+0x344>)
 8004030:	0052      	lsls	r2, r2, #1
 8004032:	5ad3      	ldrh	r3, [r2, r3]
 8004034:	0019      	movs	r1, r3
 8004036:	6978      	ldr	r0, [r7, #20]
 8004038:	f7fc f878 	bl	800012c <__udivsi3>
 800403c:	0003      	movs	r3, r0
 800403e:	005a      	lsls	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	18d2      	adds	r2, r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	0019      	movs	r1, r3
 800404e:	0010      	movs	r0, r2
 8004050:	f7fc f86c 	bl	800012c <__udivsi3>
 8004054:	0003      	movs	r3, r0
 8004056:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	d91c      	bls.n	8004098 <UART_SetConfig+0x248>
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	025b      	lsls	r3, r3, #9
 8004064:	429a      	cmp	r2, r3
 8004066:	d217      	bcs.n	8004098 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	b29a      	uxth	r2, r3
 800406c:	200e      	movs	r0, #14
 800406e:	183b      	adds	r3, r7, r0
 8004070:	210f      	movs	r1, #15
 8004072:	438a      	bics	r2, r1
 8004074:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	b29b      	uxth	r3, r3
 800407c:	2207      	movs	r2, #7
 800407e:	4013      	ands	r3, r2
 8004080:	b299      	uxth	r1, r3
 8004082:	183b      	adds	r3, r7, r0
 8004084:	183a      	adds	r2, r7, r0
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	183a      	adds	r2, r7, r0
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	e056      	b.n	8004146 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004098:	231a      	movs	r3, #26
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e051      	b.n	8004146 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040a2:	231b      	movs	r3, #27
 80040a4:	18fb      	adds	r3, r7, r3
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d015      	beq.n	80040d8 <UART_SetConfig+0x288>
 80040ac:	dc18      	bgt.n	80040e0 <UART_SetConfig+0x290>
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d00d      	beq.n	80040ce <UART_SetConfig+0x27e>
 80040b2:	dc15      	bgt.n	80040e0 <UART_SetConfig+0x290>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <UART_SetConfig+0x26e>
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d005      	beq.n	80040c8 <UART_SetConfig+0x278>
 80040bc:	e010      	b.n	80040e0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040be:	f7fe fb6f 	bl	80027a0 <HAL_RCC_GetPCLK1Freq>
 80040c2:	0003      	movs	r3, r0
 80040c4:	617b      	str	r3, [r7, #20]
        break;
 80040c6:	e012      	b.n	80040ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c8:	4b31      	ldr	r3, [pc, #196]	@ (8004190 <UART_SetConfig+0x340>)
 80040ca:	617b      	str	r3, [r7, #20]
        break;
 80040cc:	e00f      	b.n	80040ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ce:	f7fe fadb 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 80040d2:	0003      	movs	r3, r0
 80040d4:	617b      	str	r3, [r7, #20]
        break;
 80040d6:	e00a      	b.n	80040ee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	617b      	str	r3, [r7, #20]
        break;
 80040de:	e006      	b.n	80040ee <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80040e0:	2300      	movs	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040e4:	231a      	movs	r3, #26
 80040e6:	18fb      	adds	r3, r7, r3
 80040e8:	2201      	movs	r2, #1
 80040ea:	701a      	strb	r2, [r3, #0]
        break;
 80040ec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d028      	beq.n	8004146 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040f8:	4b26      	ldr	r3, [pc, #152]	@ (8004194 <UART_SetConfig+0x344>)
 80040fa:	0052      	lsls	r2, r2, #1
 80040fc:	5ad3      	ldrh	r3, [r2, r3]
 80040fe:	0019      	movs	r1, r3
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f7fc f813 	bl	800012c <__udivsi3>
 8004106:	0003      	movs	r3, r0
 8004108:	001a      	movs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	18d2      	adds	r2, r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	0019      	movs	r1, r3
 8004118:	0010      	movs	r0, r2
 800411a:	f7fc f807 	bl	800012c <__udivsi3>
 800411e:	0003      	movs	r3, r0
 8004120:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d90a      	bls.n	800413e <UART_SetConfig+0x2ee>
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	2380      	movs	r3, #128	@ 0x80
 800412c:	025b      	lsls	r3, r3, #9
 800412e:	429a      	cmp	r2, r3
 8004130:	d205      	bcs.n	800413e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	b29a      	uxth	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	e003      	b.n	8004146 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800413e:	231a      	movs	r3, #26
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	226a      	movs	r2, #106	@ 0x6a
 800414a:	2101      	movs	r1, #1
 800414c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2268      	movs	r2, #104	@ 0x68
 8004152:	2101      	movs	r1, #1
 8004154:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004162:	231a      	movs	r3, #26
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	781b      	ldrb	r3, [r3, #0]
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b008      	add	sp, #32
 800416e:	bd80      	pop	{r7, pc}
 8004170:	cfff69f3 	.word	0xcfff69f3
 8004174:	ffffcfff 	.word	0xffffcfff
 8004178:	11fff4ff 	.word	0x11fff4ff
 800417c:	40013800 	.word	0x40013800
 8004180:	40021000 	.word	0x40021000
 8004184:	40004400 	.word	0x40004400
 8004188:	40004800 	.word	0x40004800
 800418c:	40004c00 	.word	0x40004c00
 8004190:	00f42400 	.word	0x00f42400
 8004194:	0800be34 	.word	0x0800be34

08004198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	2208      	movs	r2, #8
 80041a6:	4013      	ands	r3, r2
 80041a8:	d00b      	beq.n	80041c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a4a      	ldr	r2, [pc, #296]	@ (80042dc <UART_AdvFeatureConfig+0x144>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c6:	2201      	movs	r2, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4a43      	ldr	r2, [pc, #268]	@ (80042e0 <UART_AdvFeatureConfig+0x148>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	0019      	movs	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e8:	2202      	movs	r2, #2
 80041ea:	4013      	ands	r3, r2
 80041ec:	d00b      	beq.n	8004206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4a3b      	ldr	r2, [pc, #236]	@ (80042e4 <UART_AdvFeatureConfig+0x14c>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420a:	2204      	movs	r2, #4
 800420c:	4013      	ands	r3, r2
 800420e:	d00b      	beq.n	8004228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4a34      	ldr	r2, [pc, #208]	@ (80042e8 <UART_AdvFeatureConfig+0x150>)
 8004218:	4013      	ands	r3, r2
 800421a:	0019      	movs	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	2210      	movs	r2, #16
 800422e:	4013      	ands	r3, r2
 8004230:	d00b      	beq.n	800424a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4a2c      	ldr	r2, [pc, #176]	@ (80042ec <UART_AdvFeatureConfig+0x154>)
 800423a:	4013      	ands	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424e:	2220      	movs	r2, #32
 8004250:	4013      	ands	r3, r2
 8004252:	d00b      	beq.n	800426c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4a25      	ldr	r2, [pc, #148]	@ (80042f0 <UART_AdvFeatureConfig+0x158>)
 800425c:	4013      	ands	r3, r2
 800425e:	0019      	movs	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	2240      	movs	r2, #64	@ 0x40
 8004272:	4013      	ands	r3, r2
 8004274:	d01d      	beq.n	80042b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a1d      	ldr	r2, [pc, #116]	@ (80042f4 <UART_AdvFeatureConfig+0x15c>)
 800427e:	4013      	ands	r3, r2
 8004280:	0019      	movs	r1, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004292:	2380      	movs	r3, #128	@ 0x80
 8004294:	035b      	lsls	r3, r3, #13
 8004296:	429a      	cmp	r2, r3
 8004298:	d10b      	bne.n	80042b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	4a15      	ldr	r2, [pc, #84]	@ (80042f8 <UART_AdvFeatureConfig+0x160>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	0019      	movs	r1, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b6:	2280      	movs	r2, #128	@ 0x80
 80042b8:	4013      	ands	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4a0e      	ldr	r2, [pc, #56]	@ (80042fc <UART_AdvFeatureConfig+0x164>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	0019      	movs	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
 80042d6:	46bd      	mov	sp, r7
 80042d8:	b002      	add	sp, #8
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	ffff7fff 	.word	0xffff7fff
 80042e0:	fffdffff 	.word	0xfffdffff
 80042e4:	fffeffff 	.word	0xfffeffff
 80042e8:	fffbffff 	.word	0xfffbffff
 80042ec:	ffffefff 	.word	0xffffefff
 80042f0:	ffffdfff 	.word	0xffffdfff
 80042f4:	ffefffff 	.word	0xffefffff
 80042f8:	ff9fffff 	.word	0xff9fffff
 80042fc:	fff7ffff 	.word	0xfff7ffff

08004300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b092      	sub	sp, #72	@ 0x48
 8004304:	af02      	add	r7, sp, #8
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2290      	movs	r2, #144	@ 0x90
 800430c:	2100      	movs	r1, #0
 800430e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004310:	f7fc ffc4 	bl	800129c <HAL_GetTick>
 8004314:	0003      	movs	r3, r0
 8004316:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2208      	movs	r2, #8
 8004320:	4013      	ands	r3, r2
 8004322:	2b08      	cmp	r3, #8
 8004324:	d12d      	bne.n	8004382 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004328:	2280      	movs	r2, #128	@ 0x80
 800432a:	0391      	lsls	r1, r2, #14
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	4a47      	ldr	r2, [pc, #284]	@ (800444c <UART_CheckIdleState+0x14c>)
 8004330:	9200      	str	r2, [sp, #0]
 8004332:	2200      	movs	r2, #0
 8004334:	f000 f88e 	bl	8004454 <UART_WaitOnFlagUntilTimeout>
 8004338:	1e03      	subs	r3, r0, #0
 800433a:	d022      	beq.n	8004382 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433c:	f3ef 8310 	mrs	r3, PRIMASK
 8004340:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004344:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004346:	2301      	movs	r3, #1
 8004348:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800434c:	f383 8810 	msr	PRIMASK, r3
}
 8004350:	46c0      	nop			@ (mov r8, r8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2180      	movs	r1, #128	@ 0x80
 800435e:	438a      	bics	r2, r1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004368:	f383 8810 	msr	PRIMASK, r3
}
 800436c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2288      	movs	r2, #136	@ 0x88
 8004372:	2120      	movs	r1, #32
 8004374:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2284      	movs	r2, #132	@ 0x84
 800437a:	2100      	movs	r1, #0
 800437c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e060      	b.n	8004444 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2204      	movs	r2, #4
 800438a:	4013      	ands	r3, r2
 800438c:	2b04      	cmp	r3, #4
 800438e:	d146      	bne.n	800441e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004392:	2280      	movs	r2, #128	@ 0x80
 8004394:	03d1      	lsls	r1, r2, #15
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4a2c      	ldr	r2, [pc, #176]	@ (800444c <UART_CheckIdleState+0x14c>)
 800439a:	9200      	str	r2, [sp, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	f000 f859 	bl	8004454 <UART_WaitOnFlagUntilTimeout>
 80043a2:	1e03      	subs	r3, r0, #0
 80043a4:	d03b      	beq.n	800441e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a6:	f3ef 8310 	mrs	r3, PRIMASK
 80043aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80043b0:	2301      	movs	r3, #1
 80043b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4922      	ldr	r1, [pc, #136]	@ (8004450 <UART_CheckIdleState+0x150>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80043de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			@ (mov r8, r8)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	438a      	bics	r2, r1
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004400:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	228c      	movs	r2, #140	@ 0x8c
 800440e:	2120      	movs	r1, #32
 8004410:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2284      	movs	r2, #132	@ 0x84
 8004416:	2100      	movs	r1, #0
 8004418:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e012      	b.n	8004444 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2288      	movs	r2, #136	@ 0x88
 8004422:	2120      	movs	r1, #32
 8004424:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	228c      	movs	r2, #140	@ 0x8c
 800442a:	2120      	movs	r1, #32
 800442c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2284      	movs	r2, #132	@ 0x84
 800443e:	2100      	movs	r1, #0
 8004440:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b010      	add	sp, #64	@ 0x40
 800444a:	bd80      	pop	{r7, pc}
 800444c:	01ffffff 	.word	0x01ffffff
 8004450:	fffffedf 	.word	0xfffffedf

08004454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	1dfb      	adds	r3, r7, #7
 8004462:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004464:	e051      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	3301      	adds	r3, #1
 800446a:	d04e      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446c:	f7fc ff16 	bl	800129c <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <UART_WaitOnFlagUntilTimeout+0x2e>
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e051      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2204      	movs	r2, #4
 800448e:	4013      	ands	r3, r2
 8004490:	d03b      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b80      	cmp	r3, #128	@ 0x80
 8004496:	d038      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b40      	cmp	r3, #64	@ 0x40
 800449c:	d035      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	2208      	movs	r2, #8
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d111      	bne.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	0018      	movs	r0, r3
 80044b8:	f000 f83c 	bl	8004534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2290      	movs	r2, #144	@ 0x90
 80044c0:	2108      	movs	r1, #8
 80044c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2284      	movs	r2, #132	@ 0x84
 80044c8:	2100      	movs	r1, #0
 80044ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e02c      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	2380      	movs	r3, #128	@ 0x80
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	401a      	ands	r2, r3
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d112      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2280      	movs	r2, #128	@ 0x80
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f81f 	bl	8004534 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2290      	movs	r2, #144	@ 0x90
 80044fa:	2120      	movs	r1, #32
 80044fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2284      	movs	r2, #132	@ 0x84
 8004502:	2100      	movs	r1, #0
 8004504:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e00f      	b.n	800452a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	425a      	negs	r2, r3
 800451a:	4153      	adcs	r3, r2
 800451c:	b2db      	uxtb	r3, r3
 800451e:	001a      	movs	r2, r3
 8004520:	1dfb      	adds	r3, r7, #7
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d09e      	beq.n	8004466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b004      	add	sp, #16
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08e      	sub	sp, #56	@ 0x38
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800453c:	f3ef 8310 	mrs	r3, PRIMASK
 8004540:	617b      	str	r3, [r7, #20]
  return(result);
 8004542:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004544:	637b      	str	r3, [r7, #52]	@ 0x34
 8004546:	2301      	movs	r3, #1
 8004548:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4926      	ldr	r1, [pc, #152]	@ (80045f8 <UART_EndRxTransfer+0xc4>)
 800455e:	400a      	ands	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004564:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	f383 8810 	msr	PRIMASK, r3
}
 800456c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456e:	f3ef 8310 	mrs	r3, PRIMASK
 8004572:	623b      	str	r3, [r7, #32]
  return(result);
 8004574:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004576:	633b      	str	r3, [r7, #48]	@ 0x30
 8004578:	2301      	movs	r3, #1
 800457a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	491b      	ldr	r1, [pc, #108]	@ (80045fc <UART_EndRxTransfer+0xc8>)
 8004590:	400a      	ands	r2, r1
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459a:	f383 8810 	msr	PRIMASK, r3
}
 800459e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d118      	bne.n	80045da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045a8:	f3ef 8310 	mrs	r3, PRIMASK
 80045ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b2:	2301      	movs	r3, #1
 80045b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f383 8810 	msr	PRIMASK, r3
}
 80045bc:	46c0      	nop			@ (mov r8, r8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2110      	movs	r1, #16
 80045ca:	438a      	bics	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f383 8810 	msr	PRIMASK, r3
}
 80045d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	228c      	movs	r2, #140	@ 0x8c
 80045de:	2120      	movs	r1, #32
 80045e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80045ee:	46c0      	nop			@ (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b00e      	add	sp, #56	@ 0x38
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	fffffedf 	.word	0xfffffedf
 80045fc:	effffffe 	.word	0xeffffffe

08004600 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2284      	movs	r2, #132	@ 0x84
 800460c:	5c9b      	ldrb	r3, [r3, r2]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_UARTEx_DisableFifoMode+0x16>
 8004612:	2302      	movs	r3, #2
 8004614:	e027      	b.n	8004666 <HAL_UARTEx_DisableFifoMode+0x66>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2284      	movs	r2, #132	@ 0x84
 800461a:	2101      	movs	r1, #1
 800461c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2288      	movs	r2, #136	@ 0x88
 8004622:	2124      	movs	r1, #36	@ 0x24
 8004624:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2101      	movs	r1, #1
 800463a:	438a      	bics	r2, r1
 800463c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a0b      	ldr	r2, [pc, #44]	@ (8004670 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004642:	4013      	ands	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2288      	movs	r2, #136	@ 0x88
 8004658:	2120      	movs	r1, #32
 800465a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2284      	movs	r2, #132	@ 0x84
 8004660:	2100      	movs	r1, #0
 8004662:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b004      	add	sp, #16
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	dfffffff 	.word	0xdfffffff

08004674 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2284      	movs	r2, #132	@ 0x84
 8004682:	5c9b      	ldrb	r3, [r3, r2]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004688:	2302      	movs	r3, #2
 800468a:	e02e      	b.n	80046ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2284      	movs	r2, #132	@ 0x84
 8004690:	2101      	movs	r1, #1
 8004692:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2288      	movs	r2, #136	@ 0x88
 8004698:	2124      	movs	r1, #36	@ 0x24
 800469a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2101      	movs	r1, #1
 80046b0:	438a      	bics	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	08d9      	lsrs	r1, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 f854 	bl	8004778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2288      	movs	r2, #136	@ 0x88
 80046dc:	2120      	movs	r1, #32
 80046de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2284      	movs	r2, #132	@ 0x84
 80046e4:	2100      	movs	r1, #0
 80046e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	0018      	movs	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b004      	add	sp, #16
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2284      	movs	r2, #132	@ 0x84
 8004702:	5c9b      	ldrb	r3, [r3, r2]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d101      	bne.n	800470c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004708:	2302      	movs	r3, #2
 800470a:	e02f      	b.n	800476c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2284      	movs	r2, #132	@ 0x84
 8004710:	2101      	movs	r1, #1
 8004712:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2288      	movs	r2, #136	@ 0x88
 8004718:	2124      	movs	r1, #36	@ 0x24
 800471a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	438a      	bics	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4a0e      	ldr	r2, [pc, #56]	@ (8004774 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800473c:	4013      	ands	r3, r2
 800473e:	0019      	movs	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f000 f813 	bl	8004778 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2288      	movs	r2, #136	@ 0x88
 800475e:	2120      	movs	r1, #32
 8004760:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2284      	movs	r2, #132	@ 0x84
 8004766:	2100      	movs	r1, #0
 8004768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	0018      	movs	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	b004      	add	sp, #16
 8004772:	bd80      	pop	{r7, pc}
 8004774:	f1ffffff 	.word	0xf1ffffff

08004778 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004784:	2b00      	cmp	r3, #0
 8004786:	d108      	bne.n	800479a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	226a      	movs	r2, #106	@ 0x6a
 800478c:	2101      	movs	r1, #1
 800478e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2268      	movs	r2, #104	@ 0x68
 8004794:	2101      	movs	r1, #1
 8004796:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004798:	e043      	b.n	8004822 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800479a:	260f      	movs	r6, #15
 800479c:	19bb      	adds	r3, r7, r6
 800479e:	2208      	movs	r2, #8
 80047a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047a2:	200e      	movs	r0, #14
 80047a4:	183b      	adds	r3, r7, r0
 80047a6:	2208      	movs	r2, #8
 80047a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	0e5b      	lsrs	r3, r3, #25
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	240d      	movs	r4, #13
 80047b6:	193b      	adds	r3, r7, r4
 80047b8:	2107      	movs	r1, #7
 80047ba:	400a      	ands	r2, r1
 80047bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	0f5b      	lsrs	r3, r3, #29
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	250c      	movs	r5, #12
 80047ca:	197b      	adds	r3, r7, r5
 80047cc:	2107      	movs	r1, #7
 80047ce:	400a      	ands	r2, r1
 80047d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047d2:	183b      	adds	r3, r7, r0
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	197a      	adds	r2, r7, r5
 80047d8:	7812      	ldrb	r2, [r2, #0]
 80047da:	4914      	ldr	r1, [pc, #80]	@ (800482c <UARTEx_SetNbDataToProcess+0xb4>)
 80047dc:	5c8a      	ldrb	r2, [r1, r2]
 80047de:	435a      	muls	r2, r3
 80047e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80047e2:	197b      	adds	r3, r7, r5
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	4a12      	ldr	r2, [pc, #72]	@ (8004830 <UARTEx_SetNbDataToProcess+0xb8>)
 80047e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047ea:	0019      	movs	r1, r3
 80047ec:	f7fb fd28 	bl	8000240 <__divsi3>
 80047f0:	0003      	movs	r3, r0
 80047f2:	b299      	uxth	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	226a      	movs	r2, #106	@ 0x6a
 80047f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047fa:	19bb      	adds	r3, r7, r6
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	193a      	adds	r2, r7, r4
 8004800:	7812      	ldrb	r2, [r2, #0]
 8004802:	490a      	ldr	r1, [pc, #40]	@ (800482c <UARTEx_SetNbDataToProcess+0xb4>)
 8004804:	5c8a      	ldrb	r2, [r1, r2]
 8004806:	435a      	muls	r2, r3
 8004808:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800480a:	193b      	adds	r3, r7, r4
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	4a08      	ldr	r2, [pc, #32]	@ (8004830 <UARTEx_SetNbDataToProcess+0xb8>)
 8004810:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004812:	0019      	movs	r1, r3
 8004814:	f7fb fd14 	bl	8000240 <__divsi3>
 8004818:	0003      	movs	r3, r0
 800481a:	b299      	uxth	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2268      	movs	r2, #104	@ 0x68
 8004820:	5299      	strh	r1, [r3, r2]
}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b005      	add	sp, #20
 8004828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	0800be4c 	.word	0x0800be4c
 8004830:	0800be54 	.word	0x0800be54

08004834 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8004838:	4a08      	ldr	r2, [pc, #32]	@ (800485c <MX_FATFS_Init+0x28>)
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <MX_FATFS_Init+0x2c>)
 800483c:	0011      	movs	r1, r2
 800483e:	0018      	movs	r0, r3
 8004840:	f003 fc1a 	bl	8008078 <FATFS_LinkDriver>
 8004844:	1e03      	subs	r3, r0, #0
 8004846:	d002      	beq.n	800484e <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	425b      	negs	r3, r3
 800484c:	e003      	b.n	8004856 <MX_FATFS_Init+0x22>
  }
  else
  {
    Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 800484e:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <MX_FATFS_Init+0x30>)
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8004854:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200004b0 	.word	0x200004b0
 8004860:	200000d0 	.word	0x200000d0
 8004864:	200004b4 	.word	0x200004b4

08004868 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800486c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800486e:	0018      	movs	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	0002      	movs	r2, r0
 800487c:	1dfb      	adds	r3, r7, #7
 800487e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 8004880:	1dfb      	adds	r3, r7, #7
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	0018      	movs	r0, r3
 8004886:	f000 fa19 	bl	8004cbc <USER_SPI_initialize>
 800488a:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 800488c:	0018      	movs	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	b002      	add	sp, #8
 8004892:	bd80      	pop	{r7, pc}

08004894 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	0002      	movs	r2, r0
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 80048a0:	1dfb      	adds	r3, r7, #7
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 fb21 	bl	8004eec <USER_SPI_status>
 80048aa:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80048ac:	0018      	movs	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b002      	add	sp, #8
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80048b4:	b5b0      	push	{r4, r5, r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	250f      	movs	r5, #15
 80048c2:	197b      	adds	r3, r7, r5
 80048c4:	1c02      	adds	r2, r0, #0
 80048c6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 80048c8:	683c      	ldr	r4, [r7, #0]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	197b      	adds	r3, r7, r5
 80048d0:	7818      	ldrb	r0, [r3, #0]
 80048d2:	0023      	movs	r3, r4
 80048d4:	f000 fb20 	bl	8004f18 <USER_SPI_read>
 80048d8:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 80048da:	0018      	movs	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	b004      	add	sp, #16
 80048e0:	bdb0      	pop	{r4, r5, r7, pc}

080048e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80048e2:	b5b0      	push	{r4, r5, r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	250f      	movs	r5, #15
 80048f0:	197b      	adds	r3, r7, r5
 80048f2:	1c02      	adds	r2, r0, #0
 80048f4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 80048f6:	683c      	ldr	r4, [r7, #0]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	197b      	adds	r3, r7, r5
 80048fe:	7818      	ldrb	r0, [r3, #0]
 8004900:	0023      	movs	r3, r4
 8004902:	f000 fb75 	bl	8004ff0 <USER_SPI_write>
 8004906:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b004      	add	sp, #16
 800490e:	bdb0      	pop	{r4, r5, r7, pc}

08004910 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	603a      	str	r2, [r7, #0]
 8004918:	1dfb      	adds	r3, r7, #7
 800491a:	1c02      	adds	r2, r0, #0
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	1dbb      	adds	r3, r7, #6
 8004920:	1c0a      	adds	r2, r1, #0
 8004922:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	1dbb      	adds	r3, r7, #6
 8004928:	7819      	ldrb	r1, [r3, #0]
 800492a:	1dfb      	adds	r3, r7, #7
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 fbde 	bl	80050f0 <USER_SPI_ioctl>
 8004934:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8004936:	0018      	movs	r0, r3
 8004938:	46bd      	mov	sp, r7
 800493a:	b002      	add	sp, #8
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004948:	f7fc fca8 	bl	800129c <HAL_GetTick>
 800494c:	0002      	movs	r2, r0
 800494e:	4b04      	ldr	r3, [pc, #16]	@ (8004960 <SPI_Timer_On+0x20>)
 8004950:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8004952:	4b04      	ldr	r3, [pc, #16]	@ (8004964 <SPI_Timer_On+0x24>)
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
}
 8004958:	46c0      	nop			@ (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}
 8004960:	200004b8 	.word	0x200004b8
 8004964:	200004bc 	.word	0x200004bc

08004968 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800496c:	f7fc fc96 	bl	800129c <HAL_GetTick>
 8004970:	0002      	movs	r2, r0
 8004972:	4b06      	ldr	r3, [pc, #24]	@ (800498c <SPI_Timer_Status+0x24>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <SPI_Timer_Status+0x28>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	419b      	sbcs	r3, r3
 8004980:	425b      	negs	r3, r3
 8004982:	b2db      	uxtb	r3, r3
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	200004b8 	.word	0x200004b8
 8004990:	200004bc 	.word	0x200004bc

08004994 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b087      	sub	sp, #28
 8004998:	af02      	add	r7, sp, #8
 800499a:	0002      	movs	r2, r0
 800499c:	1dfb      	adds	r3, r7, #7
 800499e:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80049a0:	240f      	movs	r4, #15
 80049a2:	193a      	adds	r2, r7, r4
 80049a4:	1df9      	adds	r1, r7, #7
 80049a6:	4806      	ldr	r0, [pc, #24]	@ (80049c0 <xchg_spi+0x2c>)
 80049a8:	2332      	movs	r3, #50	@ 0x32
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2301      	movs	r3, #1
 80049ae:	f7fe fa83 	bl	8002eb8 <HAL_SPI_TransmitReceive>
    return rxDat;
 80049b2:	193b      	adds	r3, r7, r4
 80049b4:	781b      	ldrb	r3, [r3, #0]
}
 80049b6:	0018      	movs	r0, r3
 80049b8:	46bd      	mov	sp, r7
 80049ba:	b005      	add	sp, #20
 80049bc:	bd90      	pop	{r4, r7, pc}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	200002bc 	.word	0x200002bc

080049c4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80049c4:	b590      	push	{r4, r7, lr}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e00a      	b.n	80049ea <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	18d4      	adds	r4, r2, r3
 80049da:	20ff      	movs	r0, #255	@ 0xff
 80049dc:	f7ff ffda 	bl	8004994 <xchg_spi>
 80049e0:	0003      	movs	r3, r0
 80049e2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d3f0      	bcc.n	80049d4 <rcvr_spi_multi+0x10>
	}
}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	46c0      	nop			@ (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b005      	add	sp, #20
 80049fa:	bd90      	pop	{r4, r7, pc}

080049fc <xmit_spi_multi>:
static
void xmit_spi_multi (
	uint8_t *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	425b      	negs	r3, r3
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4803      	ldr	r0, [pc, #12]	@ (8004a20 <xmit_spi_multi+0x24>)
 8004a12:	f7fe f8f1 	bl	8002bf8 <HAL_SPI_Transmit>
}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b002      	add	sp, #8
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	200002bc 	.word	0x200002bc

08004a24 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004a24:	b5b0      	push	{r4, r5, r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004a2c:	f7fc fc36 	bl	800129c <HAL_GetTick>
 8004a30:	0003      	movs	r3, r0
 8004a32:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004a38:	250f      	movs	r5, #15
 8004a3a:	197c      	adds	r4, r7, r5
 8004a3c:	20ff      	movs	r0, #255	@ 0xff
 8004a3e:	f7ff ffa9 	bl	8004994 <xchg_spi>
 8004a42:	0003      	movs	r3, r0
 8004a44:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004a46:	197b      	adds	r3, r7, r5
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2bff      	cmp	r3, #255	@ 0xff
 8004a4c:	d007      	beq.n	8004a5e <wait_ready+0x3a>
 8004a4e:	f7fc fc25 	bl	800129c <HAL_GetTick>
 8004a52:	0002      	movs	r2, r0
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d8ec      	bhi.n	8004a38 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8004a5e:	230f      	movs	r3, #15
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	3bff      	subs	r3, #255	@ 0xff
 8004a66:	425a      	negs	r2, r3
 8004a68:	4153      	adcs	r3, r2
 8004a6a:	b2db      	uxtb	r3, r3
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b006      	add	sp, #24
 8004a72:	bdb0      	pop	{r4, r5, r7, pc}

08004a74 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004a78:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <despiselect+0x1c>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7fd f842 	bl	8001b08 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004a84:	20ff      	movs	r0, #255	@ 0xff
 8004a86:	f7ff ff85 	bl	8004994 <xchg_spi>

}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	50000400 	.word	0x50000400

08004a94 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004a98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <spiselect+0x34>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7fd f832 	bl	8001b08 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004aa4:	20ff      	movs	r0, #255	@ 0xff
 8004aa6:	f7ff ff75 	bl	8004994 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004aaa:	23fa      	movs	r3, #250	@ 0xfa
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f7ff ffb8 	bl	8004a24 <wait_ready>
 8004ab4:	1e03      	subs	r3, r0, #0
 8004ab6:	d001      	beq.n	8004abc <spiselect+0x28>
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e002      	b.n	8004ac2 <spiselect+0x2e>

	despiselect();
 8004abc:	f7ff ffda 	bl	8004a74 <despiselect>
	return 0;	/* Timeout */
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	50000400 	.word	0x50000400

08004acc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004acc:	b5b0      	push	{r4, r5, r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004ad6:	20c8      	movs	r0, #200	@ 0xc8
 8004ad8:	f7ff ff32 	bl	8004940 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004adc:	250f      	movs	r5, #15
 8004ade:	197c      	adds	r4, r7, r5
 8004ae0:	20ff      	movs	r0, #255	@ 0xff
 8004ae2:	f7ff ff57 	bl	8004994 <xchg_spi>
 8004ae6:	0003      	movs	r3, r0
 8004ae8:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004aea:	197b      	adds	r3, r7, r5
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2bff      	cmp	r3, #255	@ 0xff
 8004af0:	d103      	bne.n	8004afa <rcvr_datablock+0x2e>
 8004af2:	f7ff ff39 	bl	8004968 <SPI_Timer_Status>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d1f0      	bne.n	8004adc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004afa:	230f      	movs	r3, #15
 8004afc:	18fb      	adds	r3, r7, r3
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2bfe      	cmp	r3, #254	@ 0xfe
 8004b02:	d001      	beq.n	8004b08 <rcvr_datablock+0x3c>
 8004b04:	2300      	movs	r3, #0
 8004b06:	e00c      	b.n	8004b22 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0011      	movs	r1, r2
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7ff ff58 	bl	80049c4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004b14:	20ff      	movs	r0, #255	@ 0xff
 8004b16:	f7ff ff3d 	bl	8004994 <xchg_spi>
 8004b1a:	20ff      	movs	r0, #255	@ 0xff
 8004b1c:	f7ff ff3a 	bl	8004994 <xchg_spi>

	return 1;						/* Function succeeded */
 8004b20:	2301      	movs	r3, #1
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b004      	add	sp, #16
 8004b28:	bdb0      	pop	{r4, r5, r7, pc}

08004b2a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004b2a:	b5b0      	push	{r4, r5, r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	000a      	movs	r2, r1
 8004b34:	1cfb      	adds	r3, r7, #3
 8004b36:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004b38:	23fa      	movs	r3, #250	@ 0xfa
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f7ff ff71 	bl	8004a24 <wait_ready>
 8004b42:	1e03      	subs	r3, r0, #0
 8004b44:	d101      	bne.n	8004b4a <xmit_datablock+0x20>
 8004b46:	2300      	movs	r3, #0
 8004b48:	e025      	b.n	8004b96 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8004b4a:	1cfb      	adds	r3, r7, #3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f7ff ff20 	bl	8004994 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004b54:	1cfb      	adds	r3, r7, #3
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2bfd      	cmp	r3, #253	@ 0xfd
 8004b5a:	d01b      	beq.n	8004b94 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	009a      	lsls	r2, r3, #2
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	0011      	movs	r1, r2
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7ff ff49 	bl	80049fc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004b6a:	20ff      	movs	r0, #255	@ 0xff
 8004b6c:	f7ff ff12 	bl	8004994 <xchg_spi>
 8004b70:	20ff      	movs	r0, #255	@ 0xff
 8004b72:	f7ff ff0f 	bl	8004994 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004b76:	250f      	movs	r5, #15
 8004b78:	197c      	adds	r4, r7, r5
 8004b7a:	20ff      	movs	r0, #255	@ 0xff
 8004b7c:	f7ff ff0a 	bl	8004994 <xchg_spi>
 8004b80:	0003      	movs	r3, r0
 8004b82:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004b84:	197b      	adds	r3, r7, r5
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	221f      	movs	r2, #31
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d001      	beq.n	8004b94 <xmit_datablock+0x6a>
 8004b90:	2300      	movs	r3, #0
 8004b92:	e000      	b.n	8004b96 <xmit_datablock+0x6c>
	}
	return 1;
 8004b94:	2301      	movs	r3, #1
}
 8004b96:	0018      	movs	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	b004      	add	sp, #16
 8004b9c:	bdb0      	pop	{r4, r5, r7, pc}

08004b9e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004b9e:	b5b0      	push	{r4, r5, r7, lr}
 8004ba0:	b084      	sub	sp, #16
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	6039      	str	r1, [r7, #0]
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004bac:	1dfb      	adds	r3, r7, #7
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	b25b      	sxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da15      	bge.n	8004be2 <send_cmd+0x44>
		cmd &= 0x7F;
 8004bb6:	1dfb      	adds	r3, r7, #7
 8004bb8:	1dfa      	adds	r2, r7, #7
 8004bba:	7812      	ldrb	r2, [r2, #0]
 8004bbc:	217f      	movs	r1, #127	@ 0x7f
 8004bbe:	400a      	ands	r2, r1
 8004bc0:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8004bc2:	250e      	movs	r5, #14
 8004bc4:	197c      	adds	r4, r7, r5
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	2037      	movs	r0, #55	@ 0x37
 8004bca:	f7ff ffe8 	bl	8004b9e <send_cmd>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8004bd2:	002a      	movs	r2, r5
 8004bd4:	18bb      	adds	r3, r7, r2
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d902      	bls.n	8004be2 <send_cmd+0x44>
 8004bdc:	18bb      	adds	r3, r7, r2
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	e067      	b.n	8004cb2 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8004be2:	1dfb      	adds	r3, r7, #7
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d007      	beq.n	8004bfa <send_cmd+0x5c>
		despiselect();
 8004bea:	f7ff ff43 	bl	8004a74 <despiselect>
		if (!spiselect()) return 0xFF;
 8004bee:	f7ff ff51 	bl	8004a94 <spiselect>
 8004bf2:	1e03      	subs	r3, r0, #0
 8004bf4:	d101      	bne.n	8004bfa <send_cmd+0x5c>
 8004bf6:	23ff      	movs	r3, #255	@ 0xff
 8004bf8:	e05b      	b.n	8004cb2 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8004bfa:	1dfb      	adds	r3, r7, #7
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2240      	movs	r2, #64	@ 0x40
 8004c00:	4313      	orrs	r3, r2
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7ff fec5 	bl	8004994 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	0e1b      	lsrs	r3, r3, #24
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7ff febf 	bl	8004994 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7ff feb9 	bl	8004994 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff feb3 	bl	8004994 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7ff feae 	bl	8004994 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8004c38:	210f      	movs	r1, #15
 8004c3a:	187b      	adds	r3, r7, r1
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8004c40:	1dfb      	adds	r3, r7, #7
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <send_cmd+0xb0>
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	2295      	movs	r2, #149	@ 0x95
 8004c4c:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8004c4e:	1dfb      	adds	r3, r7, #7
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d103      	bne.n	8004c5e <send_cmd+0xc0>
 8004c56:	230f      	movs	r3, #15
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	2287      	movs	r2, #135	@ 0x87
 8004c5c:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8004c5e:	230f      	movs	r3, #15
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7ff fe95 	bl	8004994 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8004c6a:	1dfb      	adds	r3, r7, #7
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b0c      	cmp	r3, #12
 8004c70:	d102      	bne.n	8004c78 <send_cmd+0xda>
 8004c72:	20ff      	movs	r0, #255	@ 0xff
 8004c74:	f7ff fe8e 	bl	8004994 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8004c78:	230f      	movs	r3, #15
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	220a      	movs	r2, #10
 8004c7e:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8004c80:	250e      	movs	r5, #14
 8004c82:	197c      	adds	r4, r7, r5
 8004c84:	20ff      	movs	r0, #255	@ 0xff
 8004c86:	f7ff fe85 	bl	8004994 <xchg_spi>
 8004c8a:	0003      	movs	r3, r0
 8004c8c:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8004c8e:	197b      	adds	r3, r7, r5
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	b25b      	sxtb	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	da09      	bge.n	8004cac <send_cmd+0x10e>
 8004c98:	210f      	movs	r1, #15
 8004c9a:	187b      	adds	r3, r7, r1
 8004c9c:	187a      	adds	r2, r7, r1
 8004c9e:	7812      	ldrb	r2, [r2, #0]
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	701a      	strb	r2, [r3, #0]
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e9      	bne.n	8004c80 <send_cmd+0xe2>

	return res;							/* Return received response */
 8004cac:	230e      	movs	r3, #14
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	781b      	ldrb	r3, [r3, #0]
}
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b004      	add	sp, #16
 8004cb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004cbc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004cbc:	b5b0      	push	{r4, r5, r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	0002      	movs	r2, r0
 8004cc4:	1dfb      	adds	r3, r7, #7
 8004cc6:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8004cc8:	1dfb      	adds	r3, r7, #7
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <USER_SPI_initialize+0x18>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e100      	b.n	8004ed6 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8004cd4:	4b82      	ldr	r3, [pc, #520]	@ (8004ee0 <USER_SPI_initialize+0x224>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	001a      	movs	r2, r3
 8004cdc:	2302      	movs	r3, #2
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d003      	beq.n	8004cea <USER_SPI_initialize+0x2e>
 8004ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ee0 <USER_SPI_initialize+0x224>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	e0f5      	b.n	8004ed6 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8004cea:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee4 <USER_SPI_initialize+0x228>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2238      	movs	r2, #56	@ 0x38
 8004cf2:	4393      	bics	r3, r2
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ee4 <USER_SPI_initialize+0x228>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2128      	movs	r1, #40	@ 0x28
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8004d00:	230f      	movs	r3, #15
 8004d02:	18fb      	adds	r3, r7, r3
 8004d04:	220a      	movs	r2, #10
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e008      	b.n	8004d1c <USER_SPI_initialize+0x60>
 8004d0a:	20ff      	movs	r0, #255	@ 0xff
 8004d0c:	f7ff fe42 	bl	8004994 <xchg_spi>
 8004d10:	210f      	movs	r1, #15
 8004d12:	187b      	adds	r3, r7, r1
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	3a01      	subs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
 8004d1c:	240f      	movs	r4, #15
 8004d1e:	193b      	adds	r3, r7, r4
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1f1      	bne.n	8004d0a <USER_SPI_initialize+0x4e>

	ty = 0;
 8004d26:	230d      	movs	r3, #13
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8004d2e:	2100      	movs	r1, #0
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7ff ff34 	bl	8004b9e <send_cmd>
 8004d36:	0003      	movs	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d000      	beq.n	8004d3e <USER_SPI_initialize+0x82>
 8004d3c:	e0a6      	b.n	8004e8c <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8004d3e:	23fa      	movs	r3, #250	@ 0xfa
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	0018      	movs	r0, r3
 8004d44:	f7ff fdfc 	bl	8004940 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8004d48:	23d5      	movs	r3, #213	@ 0xd5
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	2008      	movs	r0, #8
 8004d50:	f7ff ff25 	bl	8004b9e <send_cmd>
 8004d54:	0003      	movs	r3, r0
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d162      	bne.n	8004e20 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8004d5a:	193b      	adds	r3, r7, r4
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e00f      	b.n	8004d82 <USER_SPI_initialize+0xc6>
 8004d62:	250f      	movs	r5, #15
 8004d64:	197b      	adds	r3, r7, r5
 8004d66:	781c      	ldrb	r4, [r3, #0]
 8004d68:	20ff      	movs	r0, #255	@ 0xff
 8004d6a:	f7ff fe13 	bl	8004994 <xchg_spi>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	001a      	movs	r2, r3
 8004d72:	2308      	movs	r3, #8
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	551a      	strb	r2, [r3, r4]
 8004d78:	197b      	adds	r3, r7, r5
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	197b      	adds	r3, r7, r5
 8004d7e:	3201      	adds	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	230f      	movs	r3, #15
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d9ea      	bls.n	8004d62 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	18bb      	adds	r3, r7, r2
 8004d90:	789b      	ldrb	r3, [r3, #2]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d000      	beq.n	8004d98 <USER_SPI_initialize+0xdc>
 8004d96:	e079      	b.n	8004e8c <USER_SPI_initialize+0x1d0>
 8004d98:	18bb      	adds	r3, r7, r2
 8004d9a:	78db      	ldrb	r3, [r3, #3]
 8004d9c:	2baa      	cmp	r3, #170	@ 0xaa
 8004d9e:	d000      	beq.n	8004da2 <USER_SPI_initialize+0xe6>
 8004da0:	e074      	b.n	8004e8c <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8004da2:	46c0      	nop			@ (mov r8, r8)
 8004da4:	f7ff fde0 	bl	8004968 <SPI_Timer_Status>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d007      	beq.n	8004dbc <USER_SPI_initialize+0x100>
 8004dac:	2380      	movs	r3, #128	@ 0x80
 8004dae:	05db      	lsls	r3, r3, #23
 8004db0:	0019      	movs	r1, r3
 8004db2:	20a9      	movs	r0, #169	@ 0xa9
 8004db4:	f7ff fef3 	bl	8004b9e <send_cmd>
 8004db8:	1e03      	subs	r3, r0, #0
 8004dba:	d1f3      	bne.n	8004da4 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8004dbc:	f7ff fdd4 	bl	8004968 <SPI_Timer_Status>
 8004dc0:	1e03      	subs	r3, r0, #0
 8004dc2:	d063      	beq.n	8004e8c <USER_SPI_initialize+0x1d0>
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	203a      	movs	r0, #58	@ 0x3a
 8004dc8:	f7ff fee9 	bl	8004b9e <send_cmd>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d15d      	bne.n	8004e8c <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e00f      	b.n	8004dfa <USER_SPI_initialize+0x13e>
 8004dda:	250f      	movs	r5, #15
 8004ddc:	197b      	adds	r3, r7, r5
 8004dde:	781c      	ldrb	r4, [r3, #0]
 8004de0:	20ff      	movs	r0, #255	@ 0xff
 8004de2:	f7ff fdd7 	bl	8004994 <xchg_spi>
 8004de6:	0003      	movs	r3, r0
 8004de8:	001a      	movs	r2, r3
 8004dea:	2308      	movs	r3, #8
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	551a      	strb	r2, [r3, r4]
 8004df0:	197b      	adds	r3, r7, r5
 8004df2:	781a      	ldrb	r2, [r3, #0]
 8004df4:	197b      	adds	r3, r7, r5
 8004df6:	3201      	adds	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	230f      	movs	r3, #15
 8004dfc:	18fb      	adds	r3, r7, r3
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d9ea      	bls.n	8004dda <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8004e04:	2308      	movs	r3, #8
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	2340      	movs	r3, #64	@ 0x40
 8004e0e:	4013      	ands	r3, r2
 8004e10:	d001      	beq.n	8004e16 <USER_SPI_initialize+0x15a>
 8004e12:	220c      	movs	r2, #12
 8004e14:	e000      	b.n	8004e18 <USER_SPI_initialize+0x15c>
 8004e16:	2204      	movs	r2, #4
 8004e18:	230d      	movs	r3, #13
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e035      	b.n	8004e8c <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8004e20:	2100      	movs	r1, #0
 8004e22:	20a9      	movs	r0, #169	@ 0xa9
 8004e24:	f7ff febb 	bl	8004b9e <send_cmd>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d808      	bhi.n	8004e40 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8004e2e:	230d      	movs	r3, #13
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2202      	movs	r2, #2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	230e      	movs	r3, #14
 8004e38:	18fb      	adds	r3, r7, r3
 8004e3a:	22a9      	movs	r2, #169	@ 0xa9
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e007      	b.n	8004e50 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8004e40:	230d      	movs	r3, #13
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	2201      	movs	r2, #1
 8004e46:	701a      	strb	r2, [r3, #0]
 8004e48:	230e      	movs	r3, #14
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8004e50:	46c0      	nop			@ (mov r8, r8)
 8004e52:	f7ff fd89 	bl	8004968 <SPI_Timer_Status>
 8004e56:	1e03      	subs	r3, r0, #0
 8004e58:	d008      	beq.n	8004e6c <USER_SPI_initialize+0x1b0>
 8004e5a:	230e      	movs	r3, #14
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2100      	movs	r1, #0
 8004e62:	0018      	movs	r0, r3
 8004e64:	f7ff fe9b 	bl	8004b9e <send_cmd>
 8004e68:	1e03      	subs	r3, r0, #0
 8004e6a:	d1f2      	bne.n	8004e52 <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8004e6c:	f7ff fd7c 	bl	8004968 <SPI_Timer_Status>
 8004e70:	1e03      	subs	r3, r0, #0
 8004e72:	d007      	beq.n	8004e84 <USER_SPI_initialize+0x1c8>
 8004e74:	2380      	movs	r3, #128	@ 0x80
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	0019      	movs	r1, r3
 8004e7a:	2010      	movs	r0, #16
 8004e7c:	f7ff fe8f 	bl	8004b9e <send_cmd>
 8004e80:	1e03      	subs	r3, r0, #0
 8004e82:	d003      	beq.n	8004e8c <USER_SPI_initialize+0x1d0>
				ty = 0;
 8004e84:	230d      	movs	r3, #13
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8004e8c:	4b16      	ldr	r3, [pc, #88]	@ (8004ee8 <USER_SPI_initialize+0x22c>)
 8004e8e:	240d      	movs	r4, #13
 8004e90:	193a      	adds	r2, r7, r4
 8004e92:	7812      	ldrb	r2, [r2, #0]
 8004e94:	701a      	strb	r2, [r3, #0]
	despiselect();
 8004e96:	f7ff fded 	bl	8004a74 <despiselect>

	if (ty) {			/* OK */
 8004e9a:	193b      	adds	r3, r7, r4
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d013      	beq.n	8004eca <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <USER_SPI_initialize+0x228>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2238      	movs	r2, #56	@ 0x38
 8004eaa:	4393      	bics	r3, r2
 8004eac:	001a      	movs	r2, r3
 8004eae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <USER_SPI_initialize+0x228>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2108      	movs	r1, #8
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8004eb8:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <USER_SPI_initialize+0x224>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	4393      	bics	r3, r2
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	4b06      	ldr	r3, [pc, #24]	@ (8004ee0 <USER_SPI_initialize+0x224>)
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e002      	b.n	8004ed0 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8004eca:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <USER_SPI_initialize+0x224>)
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	@ (8004ee0 <USER_SPI_initialize+0x224>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b2db      	uxtb	r3, r3
}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b004      	add	sp, #16
 8004edc:	bdb0      	pop	{r4, r5, r7, pc}
 8004ede:	46c0      	nop			@ (mov r8, r8)
 8004ee0:	200000e4 	.word	0x200000e4
 8004ee4:	200002bc 	.word	0x200002bc
 8004ee8:	200004b5 	.word	0x200004b5

08004eec <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	1dfb      	adds	r3, r7, #7
 8004ef6:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8004ef8:	1dfb      	adds	r3, r7, #7
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <USER_SPI_status+0x18>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e002      	b.n	8004f0a <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8004f04:	4b03      	ldr	r3, [pc, #12]	@ (8004f14 <USER_SPI_status+0x28>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	b2db      	uxtb	r3, r3
}
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b002      	add	sp, #8
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			@ (mov r8, r8)
 8004f14:	200000e4 	.word	0x200000e4

08004f18 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	210f      	movs	r1, #15
 8004f26:	187b      	adds	r3, r7, r1
 8004f28:	1c02      	adds	r2, r0, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d102      	bne.n	8004f3a <USER_SPI_read+0x22>
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <USER_SPI_read+0x26>
 8004f3a:	2304      	movs	r3, #4
 8004f3c:	e04f      	b.n	8004fde <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe8 <USER_SPI_read+0xd0>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	001a      	movs	r2, r3
 8004f46:	2301      	movs	r3, #1
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d001      	beq.n	8004f50 <USER_SPI_read+0x38>
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e046      	b.n	8004fde <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8004f50:	4b26      	ldr	r3, [pc, #152]	@ (8004fec <USER_SPI_read+0xd4>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	001a      	movs	r2, r3
 8004f56:	2308      	movs	r3, #8
 8004f58:	4013      	ands	r3, r2
 8004f5a:	d102      	bne.n	8004f62 <USER_SPI_read+0x4a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	025b      	lsls	r3, r3, #9
 8004f60:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d112      	bne.n	8004f8e <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0019      	movs	r1, r3
 8004f6c:	2011      	movs	r0, #17
 8004f6e:	f7ff fe16 	bl	8004b9e <send_cmd>
 8004f72:	1e03      	subs	r3, r0, #0
 8004f74:	d12d      	bne.n	8004fd2 <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8004f76:	2380      	movs	r3, #128	@ 0x80
 8004f78:	009a      	lsls	r2, r3, #2
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	0011      	movs	r1, r2
 8004f7e:	0018      	movs	r0, r3
 8004f80:	f7ff fda4 	bl	8004acc <rcvr_datablock>
 8004f84:	1e03      	subs	r3, r0, #0
 8004f86:	d024      	beq.n	8004fd2 <USER_SPI_read+0xba>
			count = 0;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	e021      	b.n	8004fd2 <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	0019      	movs	r1, r3
 8004f92:	2012      	movs	r0, #18
 8004f94:	f7ff fe03 	bl	8004b9e <send_cmd>
 8004f98:	1e03      	subs	r3, r0, #0
 8004f9a:	d11a      	bne.n	8004fd2 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8004f9c:	2380      	movs	r3, #128	@ 0x80
 8004f9e:	009a      	lsls	r2, r3, #2
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	0011      	movs	r1, r2
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	f7ff fd91 	bl	8004acc <rcvr_datablock>
 8004faa:	1e03      	subs	r3, r0, #0
 8004fac:	d00c      	beq.n	8004fc8 <USER_SPI_read+0xb0>
				buff += 512;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2280      	movs	r2, #128	@ 0x80
 8004fb2:	0092      	lsls	r2, r2, #2
 8004fb4:	4694      	mov	ip, r2
 8004fb6:	4463      	add	r3, ip
 8004fb8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1ea      	bne.n	8004f9c <USER_SPI_read+0x84>
 8004fc6:	e000      	b.n	8004fca <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8004fc8:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8004fca:	2100      	movs	r1, #0
 8004fcc:	200c      	movs	r0, #12
 8004fce:	f7ff fde6 	bl	8004b9e <send_cmd>
		}
	}
	despiselect();
 8004fd2:	f7ff fd4f 	bl	8004a74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	1e5a      	subs	r2, r3, #1
 8004fda:	4193      	sbcs	r3, r2
 8004fdc:	b2db      	uxtb	r3, r3
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b004      	add	sp, #16
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	200000e4 	.word	0x200000e4
 8004fec:	200004b5 	.word	0x200004b5

08004ff0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	210f      	movs	r1, #15
 8004ffe:	187b      	adds	r3, r7, r1
 8005000:	1c02      	adds	r2, r0, #0
 8005002:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005004:	187b      	adds	r3, r7, r1
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d102      	bne.n	8005012 <USER_SPI_write+0x22>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <USER_SPI_write+0x26>
 8005012:	2304      	movs	r3, #4
 8005014:	e063      	b.n	80050de <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005016:	4b34      	ldr	r3, [pc, #208]	@ (80050e8 <USER_SPI_write+0xf8>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	b2db      	uxtb	r3, r3
 800501c:	001a      	movs	r2, r3
 800501e:	2301      	movs	r3, #1
 8005020:	4013      	ands	r3, r2
 8005022:	d001      	beq.n	8005028 <USER_SPI_write+0x38>
 8005024:	2303      	movs	r3, #3
 8005026:	e05a      	b.n	80050de <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005028:	4b2f      	ldr	r3, [pc, #188]	@ (80050e8 <USER_SPI_write+0xf8>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	001a      	movs	r2, r3
 8005030:	2304      	movs	r3, #4
 8005032:	4013      	ands	r3, r2
 8005034:	d001      	beq.n	800503a <USER_SPI_write+0x4a>
 8005036:	2302      	movs	r3, #2
 8005038:	e051      	b.n	80050de <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800503a:	4b2c      	ldr	r3, [pc, #176]	@ (80050ec <USER_SPI_write+0xfc>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	001a      	movs	r2, r3
 8005040:	2308      	movs	r3, #8
 8005042:	4013      	ands	r3, r2
 8005044:	d102      	bne.n	800504c <USER_SPI_write+0x5c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	025b      	lsls	r3, r3, #9
 800504a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d110      	bne.n	8005074 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	0019      	movs	r1, r3
 8005056:	2018      	movs	r0, #24
 8005058:	f7ff fda1 	bl	8004b9e <send_cmd>
 800505c:	1e03      	subs	r3, r0, #0
 800505e:	d138      	bne.n	80050d2 <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	21fe      	movs	r1, #254	@ 0xfe
 8005064:	0018      	movs	r0, r3
 8005066:	f7ff fd60 	bl	8004b2a <xmit_datablock>
 800506a:	1e03      	subs	r3, r0, #0
 800506c:	d031      	beq.n	80050d2 <USER_SPI_write+0xe2>
			count = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	e02e      	b.n	80050d2 <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005074:	4b1d      	ldr	r3, [pc, #116]	@ (80050ec <USER_SPI_write+0xfc>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	001a      	movs	r2, r3
 800507a:	2306      	movs	r3, #6
 800507c:	4013      	ands	r3, r2
 800507e:	d004      	beq.n	800508a <USER_SPI_write+0x9a>
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	0019      	movs	r1, r3
 8005084:	2097      	movs	r0, #151	@ 0x97
 8005086:	f7ff fd8a 	bl	8004b9e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	0019      	movs	r1, r3
 800508e:	2019      	movs	r0, #25
 8005090:	f7ff fd85 	bl	8004b9e <send_cmd>
 8005094:	1e03      	subs	r3, r0, #0
 8005096:	d11c      	bne.n	80050d2 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	21fc      	movs	r1, #252	@ 0xfc
 800509c:	0018      	movs	r0, r3
 800509e:	f7ff fd44 	bl	8004b2a <xmit_datablock>
 80050a2:	1e03      	subs	r3, r0, #0
 80050a4:	d00c      	beq.n	80050c0 <USER_SPI_write+0xd0>
				buff += 512;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	2280      	movs	r2, #128	@ 0x80
 80050aa:	0092      	lsls	r2, r2, #2
 80050ac:	4694      	mov	ip, r2
 80050ae:	4463      	add	r3, ip
 80050b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ec      	bne.n	8005098 <USER_SPI_write+0xa8>
 80050be:	e000      	b.n	80050c2 <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 80050c0:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80050c2:	21fd      	movs	r1, #253	@ 0xfd
 80050c4:	2000      	movs	r0, #0
 80050c6:	f7ff fd30 	bl	8004b2a <xmit_datablock>
 80050ca:	1e03      	subs	r3, r0, #0
 80050cc:	d101      	bne.n	80050d2 <USER_SPI_write+0xe2>
 80050ce:	2301      	movs	r3, #1
 80050d0:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80050d2:	f7ff fccf 	bl	8004a74 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	4193      	sbcs	r3, r2
 80050dc:	b2db      	uxtb	r3, r3
}
 80050de:	0018      	movs	r0, r3
 80050e0:	46bd      	mov	sp, r7
 80050e2:	b004      	add	sp, #16
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	200000e4 	.word	0x200000e4
 80050ec:	200004b5 	.word	0x200004b5

080050f0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80050f0:	b590      	push	{r4, r7, lr}
 80050f2:	b08d      	sub	sp, #52	@ 0x34
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	603a      	str	r2, [r7, #0]
 80050f8:	1dfb      	adds	r3, r7, #7
 80050fa:	1c02      	adds	r2, r0, #0
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	1dbb      	adds	r3, r7, #6
 8005100:	1c0a      	adds	r2, r1, #0
 8005102:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <USER_SPI_ioctl+0x20>
 800510c:	2304      	movs	r3, #4
 800510e:	e178      	b.n	8005402 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005110:	4bbe      	ldr	r3, [pc, #760]	@ (800540c <USER_SPI_ioctl+0x31c>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	001a      	movs	r2, r3
 8005118:	2301      	movs	r3, #1
 800511a:	4013      	ands	r3, r2
 800511c:	d001      	beq.n	8005122 <USER_SPI_ioctl+0x32>
 800511e:	2303      	movs	r3, #3
 8005120:	e16f      	b.n	8005402 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8005122:	232f      	movs	r3, #47	@ 0x2f
 8005124:	18fb      	adds	r3, r7, r3
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 800512a:	1dbb      	adds	r3, r7, #6
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b04      	cmp	r3, #4
 8005130:	d100      	bne.n	8005134 <USER_SPI_ioctl+0x44>
 8005132:	e100      	b.n	8005336 <USER_SPI_ioctl+0x246>
 8005134:	dd00      	ble.n	8005138 <USER_SPI_ioctl+0x48>
 8005136:	e14d      	b.n	80053d4 <USER_SPI_ioctl+0x2e4>
 8005138:	2b03      	cmp	r3, #3
 800513a:	d100      	bne.n	800513e <USER_SPI_ioctl+0x4e>
 800513c:	e074      	b.n	8005228 <USER_SPI_ioctl+0x138>
 800513e:	dd00      	ble.n	8005142 <USER_SPI_ioctl+0x52>
 8005140:	e148      	b.n	80053d4 <USER_SPI_ioctl+0x2e4>
 8005142:	2b00      	cmp	r3, #0
 8005144:	d002      	beq.n	800514c <USER_SPI_ioctl+0x5c>
 8005146:	2b01      	cmp	r3, #1
 8005148:	d00a      	beq.n	8005160 <USER_SPI_ioctl+0x70>
 800514a:	e143      	b.n	80053d4 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800514c:	f7ff fca2 	bl	8004a94 <spiselect>
 8005150:	1e03      	subs	r3, r0, #0
 8005152:	d100      	bne.n	8005156 <USER_SPI_ioctl+0x66>
 8005154:	e143      	b.n	80053de <USER_SPI_ioctl+0x2ee>
 8005156:	232f      	movs	r3, #47	@ 0x2f
 8005158:	18fb      	adds	r3, r7, r3
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
		break;
 800515e:	e13e      	b.n	80053de <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005160:	2100      	movs	r1, #0
 8005162:	2009      	movs	r0, #9
 8005164:	f7ff fd1b 	bl	8004b9e <send_cmd>
 8005168:	1e03      	subs	r3, r0, #0
 800516a:	d000      	beq.n	800516e <USER_SPI_ioctl+0x7e>
 800516c:	e139      	b.n	80053e2 <USER_SPI_ioctl+0x2f2>
 800516e:	240c      	movs	r4, #12
 8005170:	193b      	adds	r3, r7, r4
 8005172:	2110      	movs	r1, #16
 8005174:	0018      	movs	r0, r3
 8005176:	f7ff fca9 	bl	8004acc <rcvr_datablock>
 800517a:	1e03      	subs	r3, r0, #0
 800517c:	d100      	bne.n	8005180 <USER_SPI_ioctl+0x90>
 800517e:	e130      	b.n	80053e2 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8005180:	0020      	movs	r0, r4
 8005182:	183b      	adds	r3, r7, r0
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	099b      	lsrs	r3, r3, #6
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b01      	cmp	r3, #1
 800518c:	d115      	bne.n	80051ba <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800518e:	183b      	adds	r3, r7, r0
 8005190:	7a5b      	ldrb	r3, [r3, #9]
 8005192:	001a      	movs	r2, r3
 8005194:	183b      	adds	r3, r7, r0
 8005196:	7a1b      	ldrb	r3, [r3, #8]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	18d3      	adds	r3, r2, r3
 800519c:	0019      	movs	r1, r3
 800519e:	183b      	adds	r3, r7, r0
 80051a0:	79db      	ldrb	r3, [r3, #7]
 80051a2:	041a      	lsls	r2, r3, #16
 80051a4:	23fc      	movs	r3, #252	@ 0xfc
 80051a6:	039b      	lsls	r3, r3, #14
 80051a8:	4013      	ands	r3, r2
 80051aa:	18cb      	adds	r3, r1, r3
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	029a      	lsls	r2, r3, #10
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e031      	b.n	800521e <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80051ba:	200c      	movs	r0, #12
 80051bc:	183b      	adds	r3, r7, r0
 80051be:	795b      	ldrb	r3, [r3, #5]
 80051c0:	220f      	movs	r2, #15
 80051c2:	4013      	ands	r3, r2
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	183b      	adds	r3, r7, r0
 80051c8:	7a9b      	ldrb	r3, [r3, #10]
 80051ca:	09db      	lsrs	r3, r3, #7
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	18d3      	adds	r3, r2, r3
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	183b      	adds	r3, r7, r0
 80051d4:	7a5b      	ldrb	r3, [r3, #9]
 80051d6:	005b      	lsls	r3, r3, #1
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2106      	movs	r1, #6
 80051dc:	400b      	ands	r3, r1
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	18d3      	adds	r3, r2, r3
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	242e      	movs	r4, #46	@ 0x2e
 80051e6:	193b      	adds	r3, r7, r4
 80051e8:	3202      	adds	r2, #2
 80051ea:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80051ec:	183b      	adds	r3, r7, r0
 80051ee:	7a1b      	ldrb	r3, [r3, #8]
 80051f0:	099b      	lsrs	r3, r3, #6
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	001a      	movs	r2, r3
 80051f6:	183b      	adds	r3, r7, r0
 80051f8:	79db      	ldrb	r3, [r3, #7]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	18d2      	adds	r2, r2, r3
 80051fe:	183b      	adds	r3, r7, r0
 8005200:	799b      	ldrb	r3, [r3, #6]
 8005202:	0299      	lsls	r1, r3, #10
 8005204:	23c0      	movs	r3, #192	@ 0xc0
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	400b      	ands	r3, r1
 800520a:	18d3      	adds	r3, r2, r3
 800520c:	3301      	adds	r3, #1
 800520e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8005210:	193b      	adds	r3, r7, r4
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	3b09      	subs	r3, #9
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	409a      	lsls	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800521e:	232f      	movs	r3, #47	@ 0x2f
 8005220:	18fb      	adds	r3, r7, r3
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005226:	e0dc      	b.n	80053e2 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005228:	4b79      	ldr	r3, [pc, #484]	@ (8005410 <USER_SPI_ioctl+0x320>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	001a      	movs	r2, r3
 800522e:	2304      	movs	r3, #4
 8005230:	4013      	ands	r3, r2
 8005232:	d035      	beq.n	80052a0 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005234:	2100      	movs	r1, #0
 8005236:	208d      	movs	r0, #141	@ 0x8d
 8005238:	f7ff fcb1 	bl	8004b9e <send_cmd>
 800523c:	1e03      	subs	r3, r0, #0
 800523e:	d000      	beq.n	8005242 <USER_SPI_ioctl+0x152>
 8005240:	e0d1      	b.n	80053e6 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8005242:	20ff      	movs	r0, #255	@ 0xff
 8005244:	f7ff fba6 	bl	8004994 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005248:	230c      	movs	r3, #12
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2110      	movs	r1, #16
 800524e:	0018      	movs	r0, r3
 8005250:	f7ff fc3c 	bl	8004acc <rcvr_datablock>
 8005254:	1e03      	subs	r3, r0, #0
 8005256:	d100      	bne.n	800525a <USER_SPI_ioctl+0x16a>
 8005258:	e0c5      	b.n	80053e6 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800525a:	232e      	movs	r3, #46	@ 0x2e
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	2230      	movs	r2, #48	@ 0x30
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e008      	b.n	8005276 <USER_SPI_ioctl+0x186>
 8005264:	20ff      	movs	r0, #255	@ 0xff
 8005266:	f7ff fb95 	bl	8004994 <xchg_spi>
 800526a:	212e      	movs	r1, #46	@ 0x2e
 800526c:	187b      	adds	r3, r7, r1
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	187b      	adds	r3, r7, r1
 8005272:	3a01      	subs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	232e      	movs	r3, #46	@ 0x2e
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f1      	bne.n	8005264 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8005280:	230c      	movs	r3, #12
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	7a9b      	ldrb	r3, [r3, #10]
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	b2db      	uxtb	r3, r3
 800528a:	001a      	movs	r2, r3
 800528c:	2310      	movs	r3, #16
 800528e:	4093      	lsls	r3, r2
 8005290:	001a      	movs	r2, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8005296:	232f      	movs	r3, #47	@ 0x2f
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2200      	movs	r2, #0
 800529c:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800529e:	e0a2      	b.n	80053e6 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80052a0:	2100      	movs	r1, #0
 80052a2:	2009      	movs	r0, #9
 80052a4:	f7ff fc7b 	bl	8004b9e <send_cmd>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d000      	beq.n	80052ae <USER_SPI_ioctl+0x1be>
 80052ac:	e09b      	b.n	80053e6 <USER_SPI_ioctl+0x2f6>
 80052ae:	240c      	movs	r4, #12
 80052b0:	193b      	adds	r3, r7, r4
 80052b2:	2110      	movs	r1, #16
 80052b4:	0018      	movs	r0, r3
 80052b6:	f7ff fc09 	bl	8004acc <rcvr_datablock>
 80052ba:	1e03      	subs	r3, r0, #0
 80052bc:	d100      	bne.n	80052c0 <USER_SPI_ioctl+0x1d0>
 80052be:	e092      	b.n	80053e6 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80052c0:	4b53      	ldr	r3, [pc, #332]	@ (8005410 <USER_SPI_ioctl+0x320>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	001a      	movs	r2, r3
 80052c6:	2302      	movs	r3, #2
 80052c8:	4013      	ands	r3, r2
 80052ca:	d016      	beq.n	80052fa <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80052cc:	0021      	movs	r1, r4
 80052ce:	187b      	adds	r3, r7, r1
 80052d0:	7a9b      	ldrb	r3, [r3, #10]
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	227e      	movs	r2, #126	@ 0x7e
 80052d6:	4013      	ands	r3, r2
 80052d8:	187a      	adds	r2, r7, r1
 80052da:	7ad2      	ldrb	r2, [r2, #11]
 80052dc:	09d2      	lsrs	r2, r2, #7
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	189b      	adds	r3, r3, r2
 80052e2:	1c5a      	adds	r2, r3, #1
 80052e4:	187b      	adds	r3, r7, r1
 80052e6:	7b5b      	ldrb	r3, [r3, #13]
 80052e8:	099b      	lsrs	r3, r3, #6
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	409a      	lsls	r2, r3
 80052f0:	0013      	movs	r3, r2
 80052f2:	001a      	movs	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e018      	b.n	800532c <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80052fa:	210c      	movs	r1, #12
 80052fc:	187b      	adds	r3, r7, r1
 80052fe:	7a9b      	ldrb	r3, [r3, #10]
 8005300:	109b      	asrs	r3, r3, #2
 8005302:	b29b      	uxth	r3, r3
 8005304:	001a      	movs	r2, r3
 8005306:	231f      	movs	r3, #31
 8005308:	4013      	ands	r3, r2
 800530a:	3301      	adds	r3, #1
 800530c:	0008      	movs	r0, r1
 800530e:	187a      	adds	r2, r7, r1
 8005310:	7ad2      	ldrb	r2, [r2, #11]
 8005312:	00d2      	lsls	r2, r2, #3
 8005314:	2118      	movs	r1, #24
 8005316:	400a      	ands	r2, r1
 8005318:	1839      	adds	r1, r7, r0
 800531a:	7ac9      	ldrb	r1, [r1, #11]
 800531c:	0949      	lsrs	r1, r1, #5
 800531e:	b2c9      	uxtb	r1, r1
 8005320:	1852      	adds	r2, r2, r1
 8005322:	3201      	adds	r2, #1
 8005324:	4353      	muls	r3, r2
 8005326:	001a      	movs	r2, r3
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800532c:	232f      	movs	r3, #47	@ 0x2f
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
		break;
 8005334:	e057      	b.n	80053e6 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8005336:	4b36      	ldr	r3, [pc, #216]	@ (8005410 <USER_SPI_ioctl+0x320>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	001a      	movs	r2, r3
 800533c:	2306      	movs	r3, #6
 800533e:	4013      	ands	r3, r2
 8005340:	d053      	beq.n	80053ea <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005342:	240c      	movs	r4, #12
 8005344:	193a      	adds	r2, r7, r4
 8005346:	1dfb      	adds	r3, r7, #7
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	210b      	movs	r1, #11
 800534c:	0018      	movs	r0, r3
 800534e:	f7ff fecf 	bl	80050f0 <USER_SPI_ioctl>
 8005352:	1e03      	subs	r3, r0, #0
 8005354:	d14b      	bne.n	80053ee <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005356:	193b      	adds	r3, r7, r4
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	099b      	lsrs	r3, r3, #6
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <USER_SPI_ioctl+0x27e>
 8005362:	193b      	adds	r3, r7, r4
 8005364:	7a9b      	ldrb	r3, [r3, #10]
 8005366:	001a      	movs	r2, r3
 8005368:	2340      	movs	r3, #64	@ 0x40
 800536a:	4013      	ands	r3, r2
 800536c:	d041      	beq.n	80053f2 <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800537e:	4b24      	ldr	r3, [pc, #144]	@ (8005410 <USER_SPI_ioctl+0x320>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	001a      	movs	r2, r3
 8005384:	2308      	movs	r3, #8
 8005386:	4013      	ands	r3, r2
 8005388:	d105      	bne.n	8005396 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 800538a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538c:	025b      	lsls	r3, r3, #9
 800538e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	025b      	lsls	r3, r3, #9
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	0019      	movs	r1, r3
 800539a:	2020      	movs	r0, #32
 800539c:	f7ff fbff 	bl	8004b9e <send_cmd>
 80053a0:	1e03      	subs	r3, r0, #0
 80053a2:	d128      	bne.n	80053f6 <USER_SPI_ioctl+0x306>
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	0019      	movs	r1, r3
 80053a8:	2021      	movs	r0, #33	@ 0x21
 80053aa:	f7ff fbf8 	bl	8004b9e <send_cmd>
 80053ae:	1e03      	subs	r3, r0, #0
 80053b0:	d121      	bne.n	80053f6 <USER_SPI_ioctl+0x306>
 80053b2:	2100      	movs	r1, #0
 80053b4:	2026      	movs	r0, #38	@ 0x26
 80053b6:	f7ff fbf2 	bl	8004b9e <send_cmd>
 80053ba:	1e03      	subs	r3, r0, #0
 80053bc:	d11b      	bne.n	80053f6 <USER_SPI_ioctl+0x306>
 80053be:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <USER_SPI_ioctl+0x324>)
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7ff fb2f 	bl	8004a24 <wait_ready>
 80053c6:	1e03      	subs	r3, r0, #0
 80053c8:	d015      	beq.n	80053f6 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 80053ca:	232f      	movs	r3, #47	@ 0x2f
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80053d2:	e010      	b.n	80053f6 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 80053d4:	232f      	movs	r3, #47	@ 0x2f
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	2204      	movs	r2, #4
 80053da:	701a      	strb	r2, [r3, #0]
 80053dc:	e00c      	b.n	80053f8 <USER_SPI_ioctl+0x308>
		break;
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	e00a      	b.n	80053f8 <USER_SPI_ioctl+0x308>
		break;
 80053e2:	46c0      	nop			@ (mov r8, r8)
 80053e4:	e008      	b.n	80053f8 <USER_SPI_ioctl+0x308>
		break;
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	e006      	b.n	80053f8 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80053ea:	46c0      	nop			@ (mov r8, r8)
 80053ec:	e004      	b.n	80053f8 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	e002      	b.n	80053f8 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80053f2:	46c0      	nop			@ (mov r8, r8)
 80053f4:	e000      	b.n	80053f8 <USER_SPI_ioctl+0x308>
		break;
 80053f6:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 80053f8:	f7ff fb3c 	bl	8004a74 <despiselect>

	return res;
 80053fc:	232f      	movs	r3, #47	@ 0x2f
 80053fe:	18fb      	adds	r3, r7, r3
 8005400:	781b      	ldrb	r3, [r3, #0]
}
 8005402:	0018      	movs	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	b00d      	add	sp, #52	@ 0x34
 8005408:	bd90      	pop	{r4, r7, pc}
 800540a:	46c0      	nop			@ (mov r8, r8)
 800540c:	200000e4 	.word	0x200000e4
 8005410:	200004b5 	.word	0x200004b5
 8005414:	00007530 	.word	0x00007530

08005418 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005418:	b5b0      	push	{r4, r5, r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	0002      	movs	r2, r0
 8005420:	1dfb      	adds	r3, r7, #7
 8005422:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005424:	1dfb      	adds	r3, r7, #7
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	4a0b      	ldr	r2, [pc, #44]	@ (8005458 <disk_status+0x40>)
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	18d3      	adds	r3, r2, r3
 800542e:	3304      	adds	r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	1dfa      	adds	r2, r7, #7
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	4907      	ldr	r1, [pc, #28]	@ (8005458 <disk_status+0x40>)
 800543a:	188a      	adds	r2, r1, r2
 800543c:	7a12      	ldrb	r2, [r2, #8]
 800543e:	250f      	movs	r5, #15
 8005440:	197c      	adds	r4, r7, r5
 8005442:	0010      	movs	r0, r2
 8005444:	4798      	blx	r3
 8005446:	0003      	movs	r3, r0
 8005448:	7023      	strb	r3, [r4, #0]
  return stat;
 800544a:	197b      	adds	r3, r7, r5
 800544c:	781b      	ldrb	r3, [r3, #0]
}
 800544e:	0018      	movs	r0, r3
 8005450:	46bd      	mov	sp, r7
 8005452:	b004      	add	sp, #16
 8005454:	bdb0      	pop	{r4, r5, r7, pc}
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	200004e8 	.word	0x200004e8

0800545c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	0002      	movs	r2, r0
 8005464:	1dfb      	adds	r3, r7, #7
 8005466:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8005468:	200f      	movs	r0, #15
 800546a:	183b      	adds	r3, r7, r0
 800546c:	2200      	movs	r2, #0
 800546e:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8005470:	1dfb      	adds	r3, r7, #7
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	4a10      	ldr	r2, [pc, #64]	@ (80054b8 <disk_initialize+0x5c>)
 8005476:	5cd3      	ldrb	r3, [r2, r3]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d116      	bne.n	80054aa <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 800547c:	1dfb      	adds	r3, r7, #7
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	4a0d      	ldr	r2, [pc, #52]	@ (80054b8 <disk_initialize+0x5c>)
 8005482:	2101      	movs	r1, #1
 8005484:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005486:	1dfb      	adds	r3, r7, #7
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	4a0b      	ldr	r2, [pc, #44]	@ (80054b8 <disk_initialize+0x5c>)
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	18d3      	adds	r3, r2, r3
 8005490:	3304      	adds	r3, #4
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	1dfa      	adds	r2, r7, #7
 8005498:	7812      	ldrb	r2, [r2, #0]
 800549a:	4907      	ldr	r1, [pc, #28]	@ (80054b8 <disk_initialize+0x5c>)
 800549c:	188a      	adds	r2, r1, r2
 800549e:	7a12      	ldrb	r2, [r2, #8]
 80054a0:	183c      	adds	r4, r7, r0
 80054a2:	0010      	movs	r0, r2
 80054a4:	4798      	blx	r3
 80054a6:	0003      	movs	r3, r0
 80054a8:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80054aa:	230f      	movs	r3, #15
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	781b      	ldrb	r3, [r3, #0]
}
 80054b0:	0018      	movs	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b005      	add	sp, #20
 80054b6:	bd90      	pop	{r4, r7, pc}
 80054b8:	200004e8 	.word	0x200004e8

080054bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054be:	b087      	sub	sp, #28
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	603b      	str	r3, [r7, #0]
 80054c8:	210f      	movs	r1, #15
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	1c02      	adds	r2, r0, #0
 80054ce:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005508 <disk_read+0x4c>)
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	18d3      	adds	r3, r2, r3
 80054da:	3304      	adds	r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	689d      	ldr	r5, [r3, #8]
 80054e0:	187b      	adds	r3, r7, r1
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	4a08      	ldr	r2, [pc, #32]	@ (8005508 <disk_read+0x4c>)
 80054e6:	18d3      	adds	r3, r2, r3
 80054e8:	7a18      	ldrb	r0, [r3, #8]
 80054ea:	2617      	movs	r6, #23
 80054ec:	19bc      	adds	r4, r7, r6
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	47a8      	blx	r5
 80054f6:	0003      	movs	r3, r0
 80054f8:	7023      	strb	r3, [r4, #0]
  return res;
 80054fa:	19bb      	adds	r3, r7, r6
 80054fc:	781b      	ldrb	r3, [r3, #0]
}
 80054fe:	0018      	movs	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	b007      	add	sp, #28
 8005504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005506:	46c0      	nop			@ (mov r8, r8)
 8005508:	200004e8 	.word	0x200004e8

0800550c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	603b      	str	r3, [r7, #0]
 8005518:	210f      	movs	r1, #15
 800551a:	187b      	adds	r3, r7, r1
 800551c:	1c02      	adds	r2, r0, #0
 800551e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005520:	187b      	adds	r3, r7, r1
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	4a0c      	ldr	r2, [pc, #48]	@ (8005558 <disk_write+0x4c>)
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	18d3      	adds	r3, r2, r3
 800552a:	3304      	adds	r3, #4
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68dd      	ldr	r5, [r3, #12]
 8005530:	187b      	adds	r3, r7, r1
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	4a08      	ldr	r2, [pc, #32]	@ (8005558 <disk_write+0x4c>)
 8005536:	18d3      	adds	r3, r2, r3
 8005538:	7a18      	ldrb	r0, [r3, #8]
 800553a:	2617      	movs	r6, #23
 800553c:	19bc      	adds	r4, r7, r6
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	47a8      	blx	r5
 8005546:	0003      	movs	r3, r0
 8005548:	7023      	strb	r3, [r4, #0]
  return res;
 800554a:	19bb      	adds	r3, r7, r6
 800554c:	781b      	ldrb	r3, [r3, #0]
}
 800554e:	0018      	movs	r0, r3
 8005550:	46bd      	mov	sp, r7
 8005552:	b007      	add	sp, #28
 8005554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	200004e8 	.word	0x200004e8

0800555c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800555c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	603a      	str	r2, [r7, #0]
 8005564:	1dfb      	adds	r3, r7, #7
 8005566:	1c02      	adds	r2, r0, #0
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	1dbb      	adds	r3, r7, #6
 800556c:	1c0a      	adds	r2, r1, #0
 800556e:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005570:	1dfb      	adds	r3, r7, #7
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	4a0c      	ldr	r2, [pc, #48]	@ (80055a8 <disk_ioctl+0x4c>)
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	18d3      	adds	r3, r2, r3
 800557a:	3304      	adds	r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	1dfa      	adds	r2, r7, #7
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	4908      	ldr	r1, [pc, #32]	@ (80055a8 <disk_ioctl+0x4c>)
 8005586:	188a      	adds	r2, r1, r2
 8005588:	7a10      	ldrb	r0, [r2, #8]
 800558a:	260f      	movs	r6, #15
 800558c:	19bc      	adds	r4, r7, r6
 800558e:	683d      	ldr	r5, [r7, #0]
 8005590:	1dba      	adds	r2, r7, #6
 8005592:	7811      	ldrb	r1, [r2, #0]
 8005594:	002a      	movs	r2, r5
 8005596:	4798      	blx	r3
 8005598:	0003      	movs	r3, r0
 800559a:	7023      	strb	r3, [r4, #0]
  return res;
 800559c:	19bb      	adds	r3, r7, r6
 800559e:	781b      	ldrb	r3, [r3, #0]
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b005      	add	sp, #20
 80055a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a8:	200004e8 	.word	0x200004e8

080055ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3301      	adds	r3, #1
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	210e      	movs	r1, #14
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 80055c0:	187b      	adds	r3, r7, r1
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	b21a      	sxth	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	b21b      	sxth	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b21a      	sxth	r2, r3
 80055d2:	187b      	adds	r3, r7, r1
 80055d4:	801a      	strh	r2, [r3, #0]
	return rv;
 80055d6:	187b      	adds	r3, r7, r1
 80055d8:	881b      	ldrh	r3, [r3, #0]
}
 80055da:	0018      	movs	r0, r3
 80055dc:	46bd      	mov	sp, r7
 80055de:	b004      	add	sp, #16
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3303      	adds	r3, #3
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	3202      	adds	r2, #2
 80055fa:	7812      	ldrb	r2, [r2, #0]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	021b      	lsls	r3, r3, #8
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	3201      	adds	r2, #1
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	021b      	lsls	r3, r3, #8
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]
	return rv;
 800561a:	68fb      	ldr	r3, [r7, #12]
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	b004      	add	sp, #16
 8005622:	bd80      	pop	{r7, pc}

08005624 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	000a      	movs	r2, r1
 800562e:	1cbb      	adds	r3, r7, #2
 8005630:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	1cba      	adds	r2, r7, #2
 800563a:	8812      	ldrh	r2, [r2, #0]
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	1cbb      	adds	r3, r7, #2
 8005642:	1cba      	adds	r2, r7, #2
 8005644:	8812      	ldrh	r2, [r2, #0]
 8005646:	0a12      	lsrs	r2, r2, #8
 8005648:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	1cba      	adds	r2, r7, #2
 8005652:	8812      	ldrh	r2, [r2, #0]
 8005654:	b2d2      	uxtb	r2, r2
 8005656:	701a      	strb	r2, [r3, #0]
}
 8005658:	46c0      	nop			@ (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b002      	add	sp, #8
 800565e:	bd80      	pop	{r7, pc}

08005660 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	0a1b      	lsrs	r3, r3, #8
 800567a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	607a      	str	r2, [r7, #4]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	b2d2      	uxtb	r2, r2
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	0a1b      	lsrs	r3, r3, #8
 800568c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	0a1b      	lsrs	r3, r3, #8
 800569e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1c5a      	adds	r2, r3, #1
 80056a4:	607a      	str	r2, [r7, #4]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
}
 80056ac:	46c0      	nop			@ (mov r8, r8)
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b002      	add	sp, #8
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00d      	beq.n	80056ea <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	1c53      	adds	r3, r2, #1
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	1c59      	adds	r1, r3, #1
 80056d8:	6179      	str	r1, [r7, #20]
 80056da:	7812      	ldrb	r2, [r2, #0]
 80056dc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3b01      	subs	r3, #1
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f1      	bne.n	80056ce <mem_cpy+0x1a>
	}
}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b006      	add	sp, #24
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b086      	sub	sp, #24
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	617a      	str	r2, [r7, #20]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3b01      	subs	r3, #1
 8005712:	607b      	str	r3, [r7, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1f3      	bne.n	8005702 <mem_set+0x10>
}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	46c0      	nop			@ (mov r8, r8)
 800571e:	46bd      	mov	sp, r7
 8005720:	b006      	add	sp, #24
 8005722:	bd80      	pop	{r7, pc}

08005724 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	61fa      	str	r2, [r7, #28]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	0019      	movs	r1, r3
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	61ba      	str	r2, [r7, #24]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	1acb      	subs	r3, r1, r3
 8005750:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3b01      	subs	r3, #1
 8005756:	607b      	str	r3, [r7, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <mem_cmp+0x40>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0eb      	beq.n	800573c <mem_cmp+0x18>

	return r;
 8005764:	697b      	ldr	r3, [r7, #20]
}
 8005766:	0018      	movs	r0, r3
 8005768:	46bd      	mov	sp, r7
 800576a:	b008      	add	sp, #32
 800576c:	bd80      	pop	{r7, pc}

0800576e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800576e:	b580      	push	{r7, lr}
 8005770:	b082      	sub	sp, #8
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005778:	e002      	b.n	8005780 <chk_chr+0x12>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3301      	adds	r3, #1
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <chk_chr+0x26>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	001a      	movs	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	4293      	cmp	r3, r2
 8005792:	d1f2      	bne.n	800577a <chk_chr+0xc>
	return *str;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	781b      	ldrb	r3, [r3, #0]
}
 8005798:	0018      	movs	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	b002      	add	sp, #8
 800579e:	bd80      	pop	{r7, pc}

080057a0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <lock_fs+0x20>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f002 fc97 	bl	80080e6 <ff_req_grant>
 80057b8:	1e03      	subs	r3, r0, #0
 80057ba:	d001      	beq.n	80057c0 <lock_fs+0x20>
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <lock_fs+0x22>
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	0018      	movs	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	b002      	add	sp, #8
 80057c8:	bd80      	pop	{r7, pc}

080057ca <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	000a      	movs	r2, r1
 80057d4:	1cfb      	adds	r3, r7, #3
 80057d6:	701a      	strb	r2, [r3, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d010      	beq.n	8005800 <unlock_fs+0x36>
 80057de:	1cfb      	adds	r3, r7, #3
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b0c      	cmp	r3, #12
 80057e4:	d00c      	beq.n	8005800 <unlock_fs+0x36>
 80057e6:	1cfb      	adds	r3, r7, #3
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b0b      	cmp	r3, #11
 80057ec:	d008      	beq.n	8005800 <unlock_fs+0x36>
 80057ee:	1cfb      	adds	r3, r7, #3
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d004      	beq.n	8005800 <unlock_fs+0x36>
		ff_rel_grant(fs->sobj);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	0018      	movs	r0, r3
 80057fc:	f002 fc89 	bl	8008112 <ff_rel_grant>
	}
}
 8005800:	46c0      	nop			@ (mov r8, r8)
 8005802:	46bd      	mov	sp, r7
 8005804:	b002      	add	sp, #8
 8005806:	bd80      	pop	{r7, pc}

08005808 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	60fb      	str	r3, [r7, #12]
 800581a:	e027      	b.n	800586c <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 800581c:	4b25      	ldr	r3, [pc, #148]	@ (80058b4 <chk_lock+0xac>)
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	0112      	lsls	r2, r2, #4
 8005822:	58d3      	ldr	r3, [r2, r3]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01c      	beq.n	8005862 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005828:	4b22      	ldr	r3, [pc, #136]	@ (80058b4 <chk_lock+0xac>)
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	0112      	lsls	r2, r2, #4
 800582e:	58d2      	ldr	r2, [r2, r3]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d116      	bne.n	8005866 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8005838:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <chk_lock+0xac>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	18d3      	adds	r3, r2, r3
 8005840:	3304      	adds	r3, #4
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005848:	429a      	cmp	r2, r3
 800584a:	d10c      	bne.n	8005866 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 800584c:	4a19      	ldr	r2, [pc, #100]	@ (80058b4 <chk_lock+0xac>)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	18d3      	adds	r3, r2, r3
 8005854:	3308      	adds	r3, #8
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800585c:	429a      	cmp	r2, r3
 800585e:	d102      	bne.n	8005866 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8005860:	e007      	b.n	8005872 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8005862:	2301      	movs	r3, #1
 8005864:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d9d4      	bls.n	800581c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d109      	bne.n	800588c <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <chk_lock+0x7c>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b02      	cmp	r3, #2
 8005882:	d101      	bne.n	8005888 <chk_lock+0x80>
 8005884:	2300      	movs	r3, #0
 8005886:	e011      	b.n	80058ac <chk_lock+0xa4>
 8005888:	2312      	movs	r3, #18
 800588a:	e00f      	b.n	80058ac <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d109      	bne.n	80058a6 <chk_lock+0x9e>
 8005892:	4a08      	ldr	r2, [pc, #32]	@ (80058b4 <chk_lock+0xac>)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	18d3      	adds	r3, r2, r3
 800589a:	330c      	adds	r3, #12
 800589c:	881a      	ldrh	r2, [r3, #0]
 800589e:	2380      	movs	r3, #128	@ 0x80
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d101      	bne.n	80058aa <chk_lock+0xa2>
 80058a6:	2310      	movs	r3, #16
 80058a8:	e000      	b.n	80058ac <chk_lock+0xa4>
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b004      	add	sp, #16
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200004c8 	.word	0x200004c8

080058b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058be:	2300      	movs	r3, #0
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	e002      	b.n	80058ca <enq_lock+0x12>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3301      	adds	r3, #1
 80058c8:	607b      	str	r3, [r7, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d805      	bhi.n	80058dc <enq_lock+0x24>
 80058d0:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <enq_lock+0x38>)
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	0112      	lsls	r2, r2, #4
 80058d6:	58d3      	ldr	r3, [r2, r3]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f3      	bne.n	80058c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3b02      	subs	r3, #2
 80058e0:	1e5a      	subs	r2, r3, #1
 80058e2:	4193      	sbcs	r3, r2
 80058e4:	b2db      	uxtb	r3, r3
}
 80058e6:	0018      	movs	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	b002      	add	sp, #8
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	46c0      	nop			@ (mov r8, r8)
 80058f0:	200004c8 	.word	0x200004c8

080058f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e01e      	b.n	8005942 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8005904:	4b3f      	ldr	r3, [pc, #252]	@ (8005a04 <inc_lock+0x110>)
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	0112      	lsls	r2, r2, #4
 800590a:	58d2      	ldr	r2, [r2, r3]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d113      	bne.n	800593c <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8005914:	4a3b      	ldr	r2, [pc, #236]	@ (8005a04 <inc_lock+0x110>)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	18d3      	adds	r3, r2, r3
 800591c:	3304      	adds	r3, #4
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005924:	429a      	cmp	r2, r3
 8005926:	d109      	bne.n	800593c <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8005928:	4a36      	ldr	r2, [pc, #216]	@ (8005a04 <inc_lock+0x110>)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	011b      	lsls	r3, r3, #4
 800592e:	18d3      	adds	r3, r2, r3
 8005930:	3308      	adds	r3, #8
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005938:	429a      	cmp	r2, r3
 800593a:	d006      	beq.n	800594a <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3301      	adds	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d9dd      	bls.n	8005904 <inc_lock+0x10>
 8005948:	e000      	b.n	800594c <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 800594a:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d130      	bne.n	80059b4 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e002      	b.n	800595e <inc_lock+0x6a>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3301      	adds	r3, #1
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d805      	bhi.n	8005970 <inc_lock+0x7c>
 8005964:	4b27      	ldr	r3, [pc, #156]	@ (8005a04 <inc_lock+0x110>)
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	0112      	lsls	r2, r2, #4
 800596a:	58d3      	ldr	r3, [r2, r3]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f3      	bne.n	8005958 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d101      	bne.n	800597a <inc_lock+0x86>
 8005976:	2300      	movs	r3, #0
 8005978:	e03f      	b.n	80059fa <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6819      	ldr	r1, [r3, #0]
 800597e:	4b21      	ldr	r3, [pc, #132]	@ (8005a04 <inc_lock+0x110>)
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	0112      	lsls	r2, r2, #4
 8005984:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689a      	ldr	r2, [r3, #8]
 800598a:	491e      	ldr	r1, [pc, #120]	@ (8005a04 <inc_lock+0x110>)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	011b      	lsls	r3, r3, #4
 8005990:	18cb      	adds	r3, r1, r3
 8005992:	3304      	adds	r3, #4
 8005994:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	491a      	ldr	r1, [pc, #104]	@ (8005a04 <inc_lock+0x110>)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	18cb      	adds	r3, r1, r3
 80059a2:	3308      	adds	r3, #8
 80059a4:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80059a6:	4a17      	ldr	r2, [pc, #92]	@ (8005a04 <inc_lock+0x110>)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	18d3      	adds	r3, r2, r3
 80059ae:	330c      	adds	r3, #12
 80059b0:	2200      	movs	r2, #0
 80059b2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <inc_lock+0xda>
 80059ba:	4a12      	ldr	r2, [pc, #72]	@ (8005a04 <inc_lock+0x110>)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	18d3      	adds	r3, r2, r3
 80059c2:	330c      	adds	r3, #12
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <inc_lock+0xda>
 80059ca:	2300      	movs	r3, #0
 80059cc:	e015      	b.n	80059fa <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d108      	bne.n	80059e6 <inc_lock+0xf2>
 80059d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005a04 <inc_lock+0x110>)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	18d3      	adds	r3, r2, r3
 80059dc:	330c      	adds	r3, #12
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	e001      	b.n	80059ea <inc_lock+0xf6>
 80059e6:	2380      	movs	r3, #128	@ 0x80
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	4906      	ldr	r1, [pc, #24]	@ (8005a04 <inc_lock+0x110>)
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	0112      	lsls	r2, r2, #4
 80059f0:	188a      	adds	r2, r1, r2
 80059f2:	320c      	adds	r2, #12
 80059f4:	8013      	strh	r3, [r2, #0]

	return i + 1;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b004      	add	sp, #16
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	200004c8 	.word	0x200004c8

08005a08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d832      	bhi.n	8005a82 <dec_lock+0x7a>
		n = Files[i].ctr;
 8005a1c:	200e      	movs	r0, #14
 8005a1e:	183b      	adds	r3, r7, r0
 8005a20:	491d      	ldr	r1, [pc, #116]	@ (8005a98 <dec_lock+0x90>)
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	0112      	lsls	r2, r2, #4
 8005a26:	188a      	adds	r2, r1, r2
 8005a28:	320c      	adds	r2, #12
 8005a2a:	8812      	ldrh	r2, [r2, #0]
 8005a2c:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a2e:	183b      	adds	r3, r7, r0
 8005a30:	881a      	ldrh	r2, [r3, #0]
 8005a32:	2380      	movs	r3, #128	@ 0x80
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d102      	bne.n	8005a40 <dec_lock+0x38>
 8005a3a:	183b      	adds	r3, r7, r0
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005a40:	210e      	movs	r1, #14
 8005a42:	187b      	adds	r3, r7, r1
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d004      	beq.n	8005a54 <dec_lock+0x4c>
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	881a      	ldrh	r2, [r3, #0]
 8005a4e:	187b      	adds	r3, r7, r1
 8005a50:	3a01      	subs	r2, #1
 8005a52:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8005a54:	4a10      	ldr	r2, [pc, #64]	@ (8005a98 <dec_lock+0x90>)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	18d3      	adds	r3, r2, r3
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	210e      	movs	r1, #14
 8005a60:	187a      	adds	r2, r7, r1
 8005a62:	8812      	ldrh	r2, [r2, #0]
 8005a64:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a66:	187b      	adds	r3, r7, r1
 8005a68:	881b      	ldrh	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <dec_lock+0x70>
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a98 <dec_lock+0x90>)
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	0112      	lsls	r2, r2, #4
 8005a74:	2100      	movs	r1, #0
 8005a76:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8005a78:	230d      	movs	r3, #13
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
 8005a80:	e003      	b.n	8005a8a <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a82:	230d      	movs	r3, #13
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	2202      	movs	r2, #2
 8005a88:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8005a8a:	230d      	movs	r3, #13
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	781b      	ldrb	r3, [r3, #0]
}
 8005a90:	0018      	movs	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b004      	add	sp, #16
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	200004c8 	.word	0x200004c8

08005a9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	e00e      	b.n	8005ac8 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad8 <clear_lock+0x3c>)
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	0112      	lsls	r2, r2, #4
 8005ab0:	58d3      	ldr	r3, [r2, r3]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d104      	bne.n	8005ac2 <clear_lock+0x26>
 8005ab8:	4b07      	ldr	r3, [pc, #28]	@ (8005ad8 <clear_lock+0x3c>)
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	0112      	lsls	r2, r2, #4
 8005abe:	2100      	movs	r1, #0
 8005ac0:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d9ed      	bls.n	8005aaa <clear_lock+0xe>
	}
}
 8005ace:	46c0      	nop			@ (mov r8, r8)
 8005ad0:	46c0      	nop			@ (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b004      	add	sp, #16
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	200004c8 	.word	0x200004c8

08005adc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ae4:	240f      	movs	r4, #15
 8005ae6:	193b      	adds	r3, r7, r4
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	78db      	ldrb	r3, [r3, #3]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d034      	beq.n	8005b5e <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005af8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	7858      	ldrb	r0, [r3, #1]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3334      	adds	r3, #52	@ 0x34
 8005b02:	0019      	movs	r1, r3
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	2301      	movs	r3, #1
 8005b08:	f7ff fd00 	bl	800550c <disk_write>
 8005b0c:	1e03      	subs	r3, r0, #0
 8005b0e:	d003      	beq.n	8005b18 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8005b10:	193b      	adds	r3, r7, r4
 8005b12:	2201      	movs	r2, #1
 8005b14:	701a      	strb	r2, [r3, #0]
 8005b16:	e022      	b.n	8005b5e <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	1ad2      	subs	r2, r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d217      	bcs.n	8005b5e <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	789b      	ldrb	r3, [r3, #2]
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	e010      	b.n	8005b58 <sync_window+0x7c>
					wsect += fs->fsize;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	18d3      	adds	r3, r2, r3
 8005b3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	7858      	ldrb	r0, [r3, #1]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3334      	adds	r3, #52	@ 0x34
 8005b48:	0019      	movs	r1, r3
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f7ff fcdd 	bl	800550c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	613b      	str	r3, [r7, #16]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d8eb      	bhi.n	8005b36 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8005b5e:	230f      	movs	r3, #15
 8005b60:	18fb      	adds	r3, r7, r3
 8005b62:	781b      	ldrb	r3, [r3, #0]
}
 8005b64:	0018      	movs	r0, r3
 8005b66:	46bd      	mov	sp, r7
 8005b68:	b007      	add	sp, #28
 8005b6a:	bd90      	pop	{r4, r7, pc}

08005b6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b6c:	b5b0      	push	{r4, r5, r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b76:	250f      	movs	r5, #15
 8005b78:	197b      	adds	r3, r7, r5
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d01f      	beq.n	8005bc8 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b88:	197c      	adds	r4, r7, r5
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f7ff ffa5 	bl	8005adc <sync_window>
 8005b92:	0003      	movs	r3, r0
 8005b94:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b96:	002c      	movs	r4, r5
 8005b98:	193b      	adds	r3, r7, r4
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d113      	bne.n	8005bc8 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	7858      	ldrb	r0, [r3, #1]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3334      	adds	r3, #52	@ 0x34
 8005ba8:	0019      	movs	r1, r3
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	2301      	movs	r3, #1
 8005bae:	f7ff fc85 	bl	80054bc <disk_read>
 8005bb2:	1e03      	subs	r3, r0, #0
 8005bb4:	d005      	beq.n	8005bc2 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	425b      	negs	r3, r3
 8005bba:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005bbc:	193b      	adds	r3, r7, r4
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8005bc8:	230f      	movs	r3, #15
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	781b      	ldrb	r3, [r3, #0]
}
 8005bce:	0018      	movs	r0, r3
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b004      	add	sp, #16
 8005bd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005bd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005bd8:	b5b0      	push	{r4, r5, r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005be0:	250f      	movs	r5, #15
 8005be2:	197c      	adds	r4, r7, r5
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	0018      	movs	r0, r3
 8005be8:	f7ff ff78 	bl	8005adc <sync_window>
 8005bec:	0003      	movs	r3, r0
 8005bee:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8005bf0:	197b      	adds	r3, r7, r5
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d15d      	bne.n	8005cb4 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d14c      	bne.n	8005c9a <sync_fs+0xc2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	791b      	ldrb	r3, [r3, #4]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d148      	bne.n	8005c9a <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3334      	adds	r3, #52	@ 0x34
 8005c0c:	2280      	movs	r2, #128	@ 0x80
 8005c0e:	0092      	lsls	r2, r2, #2
 8005c10:	2100      	movs	r1, #0
 8005c12:	0018      	movs	r0, r3
 8005c14:	f7ff fd6d 	bl	80056f2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3334      	adds	r3, #52	@ 0x34
 8005c1c:	33ff      	adds	r3, #255	@ 0xff
 8005c1e:	33ff      	adds	r3, #255	@ 0xff
 8005c20:	4a28      	ldr	r2, [pc, #160]	@ (8005cc4 <sync_fs+0xec>)
 8005c22:	0011      	movs	r1, r2
 8005c24:	0018      	movs	r0, r3
 8005c26:	f7ff fcfd 	bl	8005624 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3334      	adds	r3, #52	@ 0x34
 8005c2e:	4a26      	ldr	r2, [pc, #152]	@ (8005cc8 <sync_fs+0xf0>)
 8005c30:	0011      	movs	r1, r2
 8005c32:	0018      	movs	r0, r3
 8005c34:	f7ff fd14 	bl	8005660 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3334      	adds	r3, #52	@ 0x34
 8005c3c:	33e5      	adds	r3, #229	@ 0xe5
 8005c3e:	33ff      	adds	r3, #255	@ 0xff
 8005c40:	4a22      	ldr	r2, [pc, #136]	@ (8005ccc <sync_fs+0xf4>)
 8005c42:	0011      	movs	r1, r2
 8005c44:	0018      	movs	r0, r3
 8005c46:	f7ff fd0b 	bl	8005660 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3334      	adds	r3, #52	@ 0x34
 8005c4e:	33e9      	adds	r3, #233	@ 0xe9
 8005c50:	33ff      	adds	r3, #255	@ 0xff
 8005c52:	001a      	movs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	695b      	ldr	r3, [r3, #20]
 8005c58:	0019      	movs	r1, r3
 8005c5a:	0010      	movs	r0, r2
 8005c5c:	f7ff fd00 	bl	8005660 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3334      	adds	r3, #52	@ 0x34
 8005c64:	33ed      	adds	r3, #237	@ 0xed
 8005c66:	33ff      	adds	r3, #255	@ 0xff
 8005c68:	001a      	movs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	0019      	movs	r1, r3
 8005c70:	0010      	movs	r0, r2
 8005c72:	f7ff fcf5 	bl	8005660 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	7858      	ldrb	r0, [r3, #1]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	3334      	adds	r3, #52	@ 0x34
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f7ff fc3c 	bl	800550c <disk_write>
			fs->fsi_flag = 0;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f7ff fc5a 	bl	800555c <disk_ioctl>
 8005ca8:	1e03      	subs	r3, r0, #0
 8005caa:	d003      	beq.n	8005cb4 <sync_fs+0xdc>
 8005cac:	230f      	movs	r3, #15
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8005cb4:	230f      	movs	r3, #15
 8005cb6:	18fb      	adds	r3, r7, r3
 8005cb8:	781b      	ldrb	r3, [r3, #0]
}
 8005cba:	0018      	movs	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	b004      	add	sp, #16
 8005cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8005cc2:	46c0      	nop			@ (mov r8, r8)
 8005cc4:	0000aa55 	.word	0x0000aa55
 8005cc8:	41615252 	.word	0x41615252
 8005ccc:	61417272 	.word	0x61417272

08005cd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	3b02      	subs	r3, #2
 8005cde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	3b02      	subs	r3, #2
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d301      	bcc.n	8005cf0 <clust2sect+0x20>
 8005cec:	2300      	movs	r3, #0
 8005cee:	e007      	b.n	8005d00 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	895b      	ldrh	r3, [r3, #10]
 8005cf4:	001a      	movs	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	435a      	muls	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfe:	18d3      	adds	r3, r2, r3
}
 8005d00:	0018      	movs	r0, r3
 8005d02:	46bd      	mov	sp, r7
 8005d04:	b002      	add	sp, #8
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d904      	bls.n	8005d28 <get_fat+0x20>
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d302      	bcc.n	8005d2e <get_fat+0x26>
		val = 1;	/* Internal error */
 8005d28:	2301      	movs	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	e091      	b.n	8005e52 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005d2e:	2301      	movs	r3, #1
 8005d30:	425b      	negs	r3, r3
 8005d32:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d063      	beq.n	8005e04 <get_fat+0xfc>
 8005d3c:	dd00      	ble.n	8005d40 <get_fat+0x38>
 8005d3e:	e07e      	b.n	8005e3e <get_fat+0x136>
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d002      	beq.n	8005d4a <get_fat+0x42>
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d042      	beq.n	8005dce <get_fat+0xc6>
 8005d48:	e079      	b.n	8005e3e <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	18d3      	adds	r3, r2, r3
 8005d56:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	0a5b      	lsrs	r3, r3, #9
 8005d60:	18d2      	adds	r2, r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	0011      	movs	r1, r2
 8005d66:	0018      	movs	r0, r3
 8005d68:	f7ff ff00 	bl	8005b6c <move_window>
 8005d6c:	1e03      	subs	r3, r0, #0
 8005d6e:	d169      	bne.n	8005e44 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	60fa      	str	r2, [r7, #12]
 8005d76:	05db      	lsls	r3, r3, #23
 8005d78:	0ddb      	lsrs	r3, r3, #23
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	2134      	movs	r1, #52	@ 0x34
 8005d7e:	18d3      	adds	r3, r2, r3
 8005d80:	185b      	adds	r3, r3, r1
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	0a5b      	lsrs	r3, r3, #9
 8005d8e:	18d2      	adds	r2, r2, r3
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	0011      	movs	r1, r2
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7ff fee9 	bl	8005b6c <move_window>
 8005d9a:	1e03      	subs	r3, r0, #0
 8005d9c:	d154      	bne.n	8005e48 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	05db      	lsls	r3, r3, #23
 8005da2:	0ddb      	lsrs	r3, r3, #23
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	2134      	movs	r1, #52	@ 0x34
 8005da8:	18d3      	adds	r3, r2, r3
 8005daa:	185b      	adds	r3, r3, r1
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	021b      	lsls	r3, r3, #8
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2201      	movs	r2, #1
 8005dba:	4013      	ands	r3, r2
 8005dbc:	d002      	beq.n	8005dc4 <get_fat+0xbc>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	091b      	lsrs	r3, r3, #4
 8005dc2:	e002      	b.n	8005dca <get_fat+0xc2>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	051b      	lsls	r3, r3, #20
 8005dc8:	0d1b      	lsrs	r3, r3, #20
 8005dca:	617b      	str	r3, [r7, #20]
			break;
 8005dcc:	e041      	b.n	8005e52 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	18d2      	adds	r2, r2, r3
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	0011      	movs	r1, r2
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7ff fec5 	bl	8005b6c <move_window>
 8005de2:	1e03      	subs	r3, r0, #0
 8005de4:	d132      	bne.n	8005e4c <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	3334      	adds	r3, #52	@ 0x34
 8005dea:	001a      	movs	r2, r3
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	0059      	lsls	r1, r3, #1
 8005df0:	23ff      	movs	r3, #255	@ 0xff
 8005df2:	005b      	lsls	r3, r3, #1
 8005df4:	400b      	ands	r3, r1
 8005df6:	18d3      	adds	r3, r2, r3
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f7ff fbd7 	bl	80055ac <ld_word>
 8005dfe:	0003      	movs	r3, r0
 8005e00:	617b      	str	r3, [r7, #20]
			break;
 8005e02:	e026      	b.n	8005e52 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	09db      	lsrs	r3, r3, #7
 8005e0c:	18d2      	adds	r2, r2, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	0011      	movs	r1, r2
 8005e12:	0018      	movs	r0, r3
 8005e14:	f7ff feaa 	bl	8005b6c <move_window>
 8005e18:	1e03      	subs	r3, r0, #0
 8005e1a:	d119      	bne.n	8005e50 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	3334      	adds	r3, #52	@ 0x34
 8005e20:	001a      	movs	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	0099      	lsls	r1, r3, #2
 8005e26:	23fe      	movs	r3, #254	@ 0xfe
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	400b      	ands	r3, r1
 8005e2c:	18d3      	adds	r3, r2, r3
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f7ff fbd7 	bl	80055e2 <ld_dword>
 8005e34:	0003      	movs	r3, r0
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	617b      	str	r3, [r7, #20]
			break;
 8005e3c:	e009      	b.n	8005e52 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005e3e:	2301      	movs	r3, #1
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e006      	b.n	8005e52 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e44:	46c0      	nop			@ (mov r8, r8)
 8005e46:	e004      	b.n	8005e52 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e48:	46c0      	nop			@ (mov r8, r8)
 8005e4a:	e002      	b.n	8005e52 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e4c:	46c0      	nop			@ (mov r8, r8)
 8005e4e:	e000      	b.n	8005e52 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e50:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8005e52:	697b      	ldr	r3, [r7, #20]
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b006      	add	sp, #24
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005e5c:	b5b0      	push	{r4, r5, r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005e68:	231f      	movs	r3, #31
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d800      	bhi.n	8005e78 <put_fat+0x1c>
 8005e76:	e0eb      	b.n	8006050 <put_fat+0x1f4>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d300      	bcc.n	8005e84 <put_fat+0x28>
 8005e82:	e0e5      	b.n	8006050 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d100      	bne.n	8005e8e <put_fat+0x32>
 8005e8c:	e0a1      	b.n	8005fd2 <put_fat+0x176>
 8005e8e:	dd00      	ble.n	8005e92 <put_fat+0x36>
 8005e90:	e0de      	b.n	8006050 <put_fat+0x1f4>
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d003      	beq.n	8005e9e <put_fat+0x42>
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d100      	bne.n	8005e9c <put_fat+0x40>
 8005e9a:	e075      	b.n	8005f88 <put_fat+0x12c>
 8005e9c:	e0d8      	b.n	8006050 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	61bb      	str	r3, [r7, #24]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	18d3      	adds	r3, r2, r3
 8005eaa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	0a5b      	lsrs	r3, r3, #9
 8005eb4:	18d2      	adds	r2, r2, r3
 8005eb6:	251f      	movs	r5, #31
 8005eb8:	197c      	adds	r4, r7, r5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	0011      	movs	r1, r2
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7ff fe54 	bl	8005b6c <move_window>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005ec8:	197b      	adds	r3, r7, r5
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d000      	beq.n	8005ed2 <put_fat+0x76>
 8005ed0:	e0b7      	b.n	8006042 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	3334      	adds	r3, #52	@ 0x34
 8005ed6:	001a      	movs	r2, r3
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	61b9      	str	r1, [r7, #24]
 8005ede:	05db      	lsls	r3, r3, #23
 8005ee0:	0ddb      	lsrs	r3, r3, #23
 8005ee2:	18d3      	adds	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	4013      	ands	r3, r2
 8005eec:	d00d      	beq.n	8005f0a <put_fat+0xae>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	b25b      	sxtb	r3, r3
 8005ef4:	220f      	movs	r2, #15
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	b25a      	sxtb	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	b25b      	sxtb	r3, r3
 8005f02:	4313      	orrs	r3, r2
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	e001      	b.n	8005f0e <put_fat+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	0a5b      	lsrs	r3, r3, #9
 8005f20:	18d2      	adds	r2, r2, r3
 8005f22:	251f      	movs	r5, #31
 8005f24:	197c      	adds	r4, r7, r5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	0011      	movs	r1, r2
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7ff fe1e 	bl	8005b6c <move_window>
 8005f30:	0003      	movs	r3, r0
 8005f32:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005f34:	197b      	adds	r3, r7, r5
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d000      	beq.n	8005f3e <put_fat+0xe2>
 8005f3c:	e083      	b.n	8006046 <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	3334      	adds	r3, #52	@ 0x34
 8005f42:	001a      	movs	r2, r3
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	05db      	lsls	r3, r3, #23
 8005f48:	0ddb      	lsrs	r3, r3, #23
 8005f4a:	18d3      	adds	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2201      	movs	r2, #1
 8005f52:	4013      	ands	r3, r2
 8005f54:	d003      	beq.n	8005f5e <put_fat+0x102>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	e00e      	b.n	8005f7c <put_fat+0x120>
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	b25b      	sxtb	r3, r3
 8005f64:	220f      	movs	r2, #15
 8005f66:	4393      	bics	r3, r2
 8005f68:	b25a      	sxtb	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	0a1b      	lsrs	r3, r3, #8
 8005f6e:	b25b      	sxtb	r3, r3
 8005f70:	210f      	movs	r1, #15
 8005f72:	400b      	ands	r3, r1
 8005f74:	b25b      	sxtb	r3, r3
 8005f76:	4313      	orrs	r3, r2
 8005f78:	b25b      	sxtb	r3, r3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2201      	movs	r2, #1
 8005f84:	70da      	strb	r2, [r3, #3]
			break;
 8005f86:	e063      	b.n	8006050 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	0a1b      	lsrs	r3, r3, #8
 8005f90:	18d2      	adds	r2, r2, r3
 8005f92:	251f      	movs	r5, #31
 8005f94:	197c      	adds	r4, r7, r5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	0011      	movs	r1, r2
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f7ff fde6 	bl	8005b6c <move_window>
 8005fa0:	0003      	movs	r3, r0
 8005fa2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005fa4:	197b      	adds	r3, r7, r5
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d14e      	bne.n	800604a <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3334      	adds	r3, #52	@ 0x34
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	0059      	lsls	r1, r3, #1
 8005fb6:	23ff      	movs	r3, #255	@ 0xff
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	400b      	ands	r3, r1
 8005fbc:	18d3      	adds	r3, r2, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	b292      	uxth	r2, r2
 8005fc2:	0011      	movs	r1, r2
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f7ff fb2d 	bl	8005624 <st_word>
			fs->wflag = 1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	70da      	strb	r2, [r3, #3]
			break;
 8005fd0:	e03e      	b.n	8006050 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	09db      	lsrs	r3, r3, #7
 8005fda:	18d2      	adds	r2, r2, r3
 8005fdc:	251f      	movs	r5, #31
 8005fde:	197c      	adds	r4, r7, r5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	0011      	movs	r1, r2
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f7ff fdc1 	bl	8005b6c <move_window>
 8005fea:	0003      	movs	r3, r0
 8005fec:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8005fee:	197b      	adds	r3, r7, r5
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d12b      	bne.n	800604e <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	011b      	lsls	r3, r3, #4
 8005ffa:	091c      	lsrs	r4, r3, #4
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3334      	adds	r3, #52	@ 0x34
 8006000:	001a      	movs	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	0099      	lsls	r1, r3, #2
 8006006:	23fe      	movs	r3, #254	@ 0xfe
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	400b      	ands	r3, r1
 800600c:	18d3      	adds	r3, r2, r3
 800600e:	0018      	movs	r0, r3
 8006010:	f7ff fae7 	bl	80055e2 <ld_dword>
 8006014:	0003      	movs	r3, r0
 8006016:	0f1b      	lsrs	r3, r3, #28
 8006018:	071b      	lsls	r3, r3, #28
 800601a:	4323      	orrs	r3, r4
 800601c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3334      	adds	r3, #52	@ 0x34
 8006022:	001a      	movs	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	0099      	lsls	r1, r3, #2
 8006028:	23fe      	movs	r3, #254	@ 0xfe
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	400b      	ands	r3, r1
 800602e:	18d3      	adds	r3, r2, r3
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	0011      	movs	r1, r2
 8006034:	0018      	movs	r0, r3
 8006036:	f7ff fb13 	bl	8005660 <st_dword>
			fs->wflag = 1;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	70da      	strb	r2, [r3, #3]
			break;
 8006040:	e006      	b.n	8006050 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006042:	46c0      	nop			@ (mov r8, r8)
 8006044:	e004      	b.n	8006050 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006046:	46c0      	nop			@ (mov r8, r8)
 8006048:	e002      	b.n	8006050 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	e000      	b.n	8006050 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800604e:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8006050:	231f      	movs	r3, #31
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	781b      	ldrb	r3, [r3, #0]
}
 8006056:	0018      	movs	r0, r3
 8006058:	46bd      	mov	sp, r7
 800605a:	b008      	add	sp, #32
 800605c:	bdb0      	pop	{r4, r5, r7, pc}

0800605e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800605e:	b5b0      	push	{r4, r5, r7, lr}
 8006060:	b088      	sub	sp, #32
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800606a:	231f      	movs	r3, #31
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d904      	bls.n	8006088 <remove_chain+0x2a>
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	429a      	cmp	r2, r3
 8006086:	d301      	bcc.n	800608c <remove_chain+0x2e>
 8006088:	2302      	movs	r3, #2
 800608a:	e057      	b.n	800613c <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d011      	beq.n	80060b6 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006092:	251f      	movs	r5, #31
 8006094:	197c      	adds	r4, r7, r5
 8006096:	2301      	movs	r3, #1
 8006098:	425a      	negs	r2, r3
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	0018      	movs	r0, r3
 80060a0:	f7ff fedc 	bl	8005e5c <put_fat>
 80060a4:	0003      	movs	r3, r0
 80060a6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 80060a8:	197b      	adds	r3, r7, r5
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <remove_chain+0x58>
 80060b0:	197b      	adds	r3, r7, r5
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	e042      	b.n	800613c <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	0011      	movs	r1, r2
 80060bc:	0018      	movs	r0, r3
 80060be:	f7ff fe23 	bl	8005d08 <get_fat>
 80060c2:	0003      	movs	r3, r0
 80060c4:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d035      	beq.n	8006138 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d101      	bne.n	80060d6 <remove_chain+0x78>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e032      	b.n	800613c <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	3301      	adds	r3, #1
 80060da:	d101      	bne.n	80060e0 <remove_chain+0x82>
 80060dc:	2301      	movs	r3, #1
 80060de:	e02d      	b.n	800613c <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80060e0:	251f      	movs	r5, #31
 80060e2:	197c      	adds	r4, r7, r5
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2200      	movs	r2, #0
 80060ea:	0018      	movs	r0, r3
 80060ec:	f7ff feb6 	bl	8005e5c <put_fat>
 80060f0:	0003      	movs	r3, r0
 80060f2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 80060f4:	197b      	adds	r3, r7, r5
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <remove_chain+0xa4>
 80060fc:	197b      	adds	r3, r7, r5
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	e01c      	b.n	800613c <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	695a      	ldr	r2, [r3, #20]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	3b02      	subs	r3, #2
 800610c:	429a      	cmp	r2, r3
 800610e:	d20b      	bcs.n	8006128 <remove_chain+0xca>
			fs->free_clst++;
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	791b      	ldrb	r3, [r3, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	4313      	orrs	r3, r2
 8006122:	b2da      	uxtb	r2, r3
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	429a      	cmp	r2, r3
 8006134:	d3bf      	bcc.n	80060b6 <remove_chain+0x58>
 8006136:	e000      	b.n	800613a <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8006138:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b008      	add	sp, #32
 8006142:	bdb0      	pop	{r4, r5, r7, pc}

08006144 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006144:	b5b0      	push	{r4, r5, r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10d      	bne.n	8006176 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d004      	beq.n	8006170 <create_chain+0x2c>
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	429a      	cmp	r2, r3
 800616e:	d31d      	bcc.n	80061ac <create_chain+0x68>
 8006170:	2301      	movs	r3, #1
 8006172:	61bb      	str	r3, [r7, #24]
 8006174:	e01a      	b.n	80061ac <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	0011      	movs	r1, r2
 800617c:	0018      	movs	r0, r3
 800617e:	f7ff fdc3 	bl	8005d08 <get_fat>
 8006182:	0003      	movs	r3, r0
 8006184:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d801      	bhi.n	8006190 <create_chain+0x4c>
 800618c:	2301      	movs	r3, #1
 800618e:	e07b      	b.n	8006288 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	d101      	bne.n	800619a <create_chain+0x56>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	e076      	b.n	8006288 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d201      	bcs.n	80061a8 <create_chain+0x64>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	e06f      	b.n	8006288 <create_chain+0x144>
		scl = clst;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	3301      	adds	r3, #1
 80061b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d307      	bcc.n	80061d0 <create_chain+0x8c>
				ncl = 2;
 80061c0:	2302      	movs	r3, #2
 80061c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d901      	bls.n	80061d0 <create_chain+0x8c>
 80061cc:	2300      	movs	r3, #0
 80061ce:	e05b      	b.n	8006288 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	0011      	movs	r1, r2
 80061d6:	0018      	movs	r0, r3
 80061d8:	f7ff fd96 	bl	8005d08 <get_fat>
 80061dc:	0003      	movs	r3, r0
 80061de:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d002      	beq.n	80061f2 <create_chain+0xae>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	3301      	adds	r3, #1
 80061f0:	d101      	bne.n	80061f6 <create_chain+0xb2>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	e048      	b.n	8006288 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d1d8      	bne.n	80061b0 <create_chain+0x6c>
 80061fe:	2300      	movs	r3, #0
 8006200:	e042      	b.n	8006288 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8006202:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006204:	2517      	movs	r5, #23
 8006206:	197c      	adds	r4, r7, r5
 8006208:	2301      	movs	r3, #1
 800620a:	425a      	negs	r2, r3
 800620c:	69f9      	ldr	r1, [r7, #28]
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	0018      	movs	r0, r3
 8006212:	f7ff fe23 	bl	8005e5c <put_fat>
 8006216:	0003      	movs	r3, r0
 8006218:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800621a:	197b      	adds	r3, r7, r5
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10b      	bne.n	800623a <create_chain+0xf6>
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d008      	beq.n	800623a <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006228:	197c      	adds	r4, r7, r5
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	6839      	ldr	r1, [r7, #0]
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	0018      	movs	r0, r3
 8006232:	f7ff fe13 	bl	8005e5c <put_fat>
 8006236:	0003      	movs	r3, r0
 8006238:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800623a:	2317      	movs	r3, #23
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d116      	bne.n	8006272 <create_chain+0x12e>
		fs->last_clst = ncl;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	3b02      	subs	r3, #2
 8006254:	429a      	cmp	r2, r3
 8006256:	d804      	bhi.n	8006262 <create_chain+0x11e>
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	1e5a      	subs	r2, r3, #1
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	4313      	orrs	r3, r2
 800626a:	b2da      	uxtb	r2, r3
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	711a      	strb	r2, [r3, #4]
 8006270:	e009      	b.n	8006286 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006272:	2317      	movs	r3, #23
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d102      	bne.n	8006282 <create_chain+0x13e>
 800627c:	2301      	movs	r3, #1
 800627e:	425b      	negs	r3, r3
 8006280:	e000      	b.n	8006284 <create_chain+0x140>
 8006282:	2301      	movs	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006286:	69fb      	ldr	r3, [r7, #28]
}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	b008      	add	sp, #32
 800628e:	bdb0      	pop	{r4, r5, r7, pc}

08006290 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a4:	3304      	adds	r3, #4
 80062a6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	0a5a      	lsrs	r2, r3, #9
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	895b      	ldrh	r3, [r3, #10]
 80062b0:	0019      	movs	r1, r3
 80062b2:	0010      	movs	r0, r2
 80062b4:	f7f9 ff3a 	bl	800012c <__udivsi3>
 80062b8:	0003      	movs	r3, r0
 80062ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1d1a      	adds	r2, r3, #4
 80062c0:	613a      	str	r2, [r7, #16]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <clmt_clust+0x40>
 80062cc:	2300      	movs	r3, #0
 80062ce:	e010      	b.n	80062f2 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d307      	bcc.n	80062e8 <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	3304      	adds	r3, #4
 80062e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062e6:	e7e9      	b.n	80062bc <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 80062e8:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	18d3      	adds	r3, r2, r3
}
 80062f2:	0018      	movs	r0, r3
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b006      	add	sp, #24
 80062f8:	bd80      	pop	{r7, pc}

080062fa <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b086      	sub	sp, #24
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	2380      	movs	r3, #128	@ 0x80
 800630e:	039b      	lsls	r3, r3, #14
 8006310:	429a      	cmp	r2, r3
 8006312:	d203      	bcs.n	800631c <dir_sdi+0x22>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	221f      	movs	r2, #31
 8006318:	4013      	ands	r3, r2
 800631a:	d001      	beq.n	8006320 <dir_sdi+0x26>
		return FR_INT_ERR;
 800631c:	2302      	movs	r3, #2
 800631e:	e066      	b.n	80063ee <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <dir_sdi+0x46>
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d902      	bls.n	8006340 <dir_sdi+0x46>
		clst = fs->dirbase;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10c      	bne.n	8006360 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	8912      	ldrh	r2, [r2, #8]
 800634e:	4293      	cmp	r3, r2
 8006350:	d301      	bcc.n	8006356 <dir_sdi+0x5c>
 8006352:	2302      	movs	r3, #2
 8006354:	e04b      	b.n	80063ee <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	61da      	str	r2, [r3, #28]
 800635e:	e02c      	b.n	80063ba <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	895b      	ldrh	r3, [r3, #10]
 8006364:	025b      	lsls	r3, r3, #9
 8006366:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006368:	e01a      	b.n	80063a0 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	0011      	movs	r1, r2
 8006370:	0018      	movs	r0, r3
 8006372:	f7ff fcc9 	bl	8005d08 <get_fat>
 8006376:	0003      	movs	r3, r0
 8006378:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3301      	adds	r3, #1
 800637e:	d101      	bne.n	8006384 <dir_sdi+0x8a>
 8006380:	2301      	movs	r3, #1
 8006382:	e034      	b.n	80063ee <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d904      	bls.n	8006394 <dir_sdi+0x9a>
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	429a      	cmp	r2, r3
 8006392:	d301      	bcc.n	8006398 <dir_sdi+0x9e>
 8006394:	2302      	movs	r3, #2
 8006396:	e02a      	b.n	80063ee <dir_sdi+0xf4>
			ofs -= csz;
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d2e0      	bcs.n	800636a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	0011      	movs	r1, r2
 80063ae:	0018      	movs	r0, r3
 80063b0:	f7ff fc8e 	bl	8005cd0 <clust2sect>
 80063b4:	0002      	movs	r2, r0
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <dir_sdi+0xd2>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e010      	b.n	80063ee <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	69da      	ldr	r2, [r3, #28]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	0a5b      	lsrs	r3, r3, #9
 80063d4:	18d2      	adds	r2, r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	3334      	adds	r3, #52	@ 0x34
 80063de:	001a      	movs	r2, r3
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	05db      	lsls	r3, r3, #23
 80063e4:	0ddb      	lsrs	r3, r3, #23
 80063e6:	18d2      	adds	r2, r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	0018      	movs	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b006      	add	sp, #24
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b086      	sub	sp, #24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	3320      	adds	r3, #32
 800640c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <dir_next+0x2a>
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	2380      	movs	r3, #128	@ 0x80
 800641a:	039b      	lsls	r3, r3, #14
 800641c:	429a      	cmp	r2, r3
 800641e:	d301      	bcc.n	8006424 <dir_next+0x2e>
 8006420:	2304      	movs	r3, #4
 8006422:	e0ad      	b.n	8006580 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	05db      	lsls	r3, r3, #23
 8006428:	0ddb      	lsrs	r3, r3, #23
 800642a:	d000      	beq.n	800642e <dir_next+0x38>
 800642c:	e09b      	b.n	8006566 <dir_next+0x170>
		dp->sect++;				/* Next sector */
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	8912      	ldrh	r2, [r2, #8]
 8006448:	4293      	cmp	r3, r2
 800644a:	d200      	bcs.n	800644e <dir_next+0x58>
 800644c:	e08b      	b.n	8006566 <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	61da      	str	r2, [r3, #28]
 8006454:	2304      	movs	r3, #4
 8006456:	e093      	b.n	8006580 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	0a5b      	lsrs	r3, r3, #9
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	8952      	ldrh	r2, [r2, #10]
 8006460:	3a01      	subs	r2, #1
 8006462:	4013      	ands	r3, r2
 8006464:	d000      	beq.n	8006468 <dir_next+0x72>
 8006466:	e07e      	b.n	8006566 <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	0019      	movs	r1, r3
 8006470:	0010      	movs	r0, r2
 8006472:	f7ff fc49 	bl	8005d08 <get_fat>
 8006476:	0003      	movs	r3, r0
 8006478:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d801      	bhi.n	8006484 <dir_next+0x8e>
 8006480:	2302      	movs	r3, #2
 8006482:	e07d      	b.n	8006580 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	3301      	adds	r3, #1
 8006488:	d101      	bne.n	800648e <dir_next+0x98>
 800648a:	2301      	movs	r3, #1
 800648c:	e078      	b.n	8006580 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	429a      	cmp	r2, r3
 8006496:	d35a      	bcc.n	800654e <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d104      	bne.n	80064a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	61da      	str	r2, [r3, #28]
 80064a4:	2304      	movs	r3, #4
 80064a6:	e06b      	b.n	8006580 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	0019      	movs	r1, r3
 80064b0:	0010      	movs	r0, r2
 80064b2:	f7ff fe47 	bl	8006144 <create_chain>
 80064b6:	0003      	movs	r3, r0
 80064b8:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <dir_next+0xce>
 80064c0:	2307      	movs	r3, #7
 80064c2:	e05d      	b.n	8006580 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d101      	bne.n	80064ce <dir_next+0xd8>
 80064ca:	2302      	movs	r3, #2
 80064cc:	e058      	b.n	8006580 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	3301      	adds	r3, #1
 80064d2:	d101      	bne.n	80064d8 <dir_next+0xe2>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e053      	b.n	8006580 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	0018      	movs	r0, r3
 80064dc:	f7ff fafe 	bl	8005adc <sync_window>
 80064e0:	1e03      	subs	r3, r0, #0
 80064e2:	d001      	beq.n	80064e8 <dir_next+0xf2>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e04b      	b.n	8006580 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3334      	adds	r3, #52	@ 0x34
 80064ec:	2280      	movs	r2, #128	@ 0x80
 80064ee:	0092      	lsls	r2, r2, #2
 80064f0:	2100      	movs	r1, #0
 80064f2:	0018      	movs	r0, r3
 80064f4:	f7ff f8fd 	bl	80056f2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	0011      	movs	r1, r2
 8006502:	0018      	movs	r0, r3
 8006504:	f7ff fbe4 	bl	8005cd0 <clust2sect>
 8006508:	0002      	movs	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	631a      	str	r2, [r3, #48]	@ 0x30
 800650e:	e012      	b.n	8006536 <dir_next+0x140>
						fs->wflag = 1;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	0018      	movs	r0, r3
 800651a:	f7ff fadf 	bl	8005adc <sync_window>
 800651e:	1e03      	subs	r3, r0, #0
 8006520:	d001      	beq.n	8006526 <dir_next+0x130>
 8006522:	2301      	movs	r3, #1
 8006524:	e02c      	b.n	8006580 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3301      	adds	r3, #1
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006530:	1c5a      	adds	r2, r3, #1
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	631a      	str	r2, [r3, #48]	@ 0x30
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	895b      	ldrh	r3, [r3, #10]
 800653a:	001a      	movs	r2, r3
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4293      	cmp	r3, r2
 8006540:	d3e6      	bcc.n	8006510 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad2      	subs	r2, r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	0011      	movs	r1, r2
 800655a:	0018      	movs	r0, r3
 800655c:	f7ff fbb8 	bl	8005cd0 <clust2sect>
 8006560:	0002      	movs	r2, r0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3334      	adds	r3, #52	@ 0x34
 8006570:	001a      	movs	r2, r3
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	05db      	lsls	r3, r3, #23
 8006576:	0ddb      	lsrs	r3, r3, #23
 8006578:	18d2      	adds	r2, r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	0018      	movs	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	b006      	add	sp, #24
 8006586:	bd80      	pop	{r7, pc}

08006588 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006588:	b5b0      	push	{r4, r5, r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006598:	2517      	movs	r5, #23
 800659a:	197c      	adds	r4, r7, r5
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2100      	movs	r1, #0
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7ff feaa 	bl	80062fa <dir_sdi>
 80065a6:	0003      	movs	r3, r0
 80065a8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80065aa:	197b      	adds	r3, r7, r5
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d133      	bne.n	800661a <dir_alloc+0x92>
		n = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	2517      	movs	r5, #23
 80065bc:	197c      	adds	r4, r7, r5
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	0011      	movs	r1, r2
 80065c2:	0018      	movs	r0, r3
 80065c4:	f7ff fad2 	bl	8005b6c <move_window>
 80065c8:	0003      	movs	r3, r0
 80065ca:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80065cc:	197b      	adds	r3, r7, r5
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d121      	bne.n	8006618 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	2be5      	cmp	r3, #229	@ 0xe5
 80065dc:	d004      	beq.n	80065e8 <dir_alloc+0x60>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d107      	bne.n	80065f8 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	3301      	adds	r3, #1
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d102      	bne.n	80065fc <dir_alloc+0x74>
 80065f6:	e010      	b.n	800661a <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80065fc:	2517      	movs	r5, #23
 80065fe:	197c      	adds	r4, r7, r5
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2101      	movs	r1, #1
 8006604:	0018      	movs	r0, r3
 8006606:	f7ff fef6 	bl	80063f6 <dir_next>
 800660a:	0003      	movs	r3, r0
 800660c:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800660e:	197b      	adds	r3, r7, r5
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0cf      	beq.n	80065b6 <dir_alloc+0x2e>
 8006616:	e000      	b.n	800661a <dir_alloc+0x92>
			if (res != FR_OK) break;
 8006618:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800661a:	2217      	movs	r2, #23
 800661c:	18bb      	adds	r3, r7, r2
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d102      	bne.n	800662a <dir_alloc+0xa2>
 8006624:	18bb      	adds	r3, r7, r2
 8006626:	2207      	movs	r2, #7
 8006628:	701a      	strb	r2, [r3, #0]
	return res;
 800662a:	2317      	movs	r3, #23
 800662c:	18fb      	adds	r3, r7, r3
 800662e:	781b      	ldrb	r3, [r3, #0]
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b006      	add	sp, #24
 8006636:	bdb0      	pop	{r4, r5, r7, pc}

08006638 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	331a      	adds	r3, #26
 8006646:	0018      	movs	r0, r3
 8006648:	f7fe ffb0 	bl	80055ac <ld_word>
 800664c:	0003      	movs	r3, r0
 800664e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d109      	bne.n	800666c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	3314      	adds	r3, #20
 800665c:	0018      	movs	r0, r3
 800665e:	f7fe ffa5 	bl	80055ac <ld_word>
 8006662:	0003      	movs	r3, r0
 8006664:	041b      	lsls	r3, r3, #16
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	4313      	orrs	r3, r2
 800666a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800666c:	68fb      	ldr	r3, [r7, #12]
}
 800666e:	0018      	movs	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	b004      	add	sp, #16
 8006674:	bd80      	pop	{r7, pc}

08006676 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	331a      	adds	r3, #26
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	b292      	uxth	r2, r2
 800668a:	0011      	movs	r1, r2
 800668c:	0018      	movs	r0, r3
 800668e:	f7fe ffc9 	bl	8005624 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d109      	bne.n	80066ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	3314      	adds	r3, #20
 800669e:	001a      	movs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	0019      	movs	r1, r3
 80066a8:	0010      	movs	r0, r2
 80066aa:	f7fe ffbb 	bl	8005624 <st_word>
	}
}
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	46bd      	mov	sp, r7
 80066b2:	b004      	add	sp, #16
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80066b6:	b5b0      	push	{r4, r5, r7, lr}
 80066b8:	b086      	sub	sp, #24
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066c4:	2517      	movs	r5, #23
 80066c6:	197c      	adds	r4, r7, r5
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2100      	movs	r1, #0
 80066cc:	0018      	movs	r0, r3
 80066ce:	f7ff fe14 	bl	80062fa <dir_sdi>
 80066d2:	0003      	movs	r3, r0
 80066d4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80066d6:	197b      	adds	r3, r7, r5
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <dir_find+0x2e>
 80066de:	197b      	adds	r3, r7, r5
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	e04c      	b.n	800677e <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	2517      	movs	r5, #23
 80066ea:	197c      	adds	r4, r7, r5
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	0011      	movs	r1, r2
 80066f0:	0018      	movs	r0, r3
 80066f2:	f7ff fa3b 	bl	8005b6c <move_window>
 80066f6:	0003      	movs	r3, r0
 80066f8:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80066fa:	0029      	movs	r1, r5
 80066fc:	187b      	adds	r3, r7, r1
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d136      	bne.n	8006772 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	200f      	movs	r0, #15
 800670a:	183b      	adds	r3, r7, r0
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006710:	183b      	adds	r3, r7, r0
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d103      	bne.n	8006720 <dir_find+0x6a>
 8006718:	187b      	adds	r3, r7, r1
 800671a:	2204      	movs	r2, #4
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	e02b      	b.n	8006778 <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	330b      	adds	r3, #11
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	223f      	movs	r2, #63	@ 0x3f
 800672a:	4013      	ands	r3, r2
 800672c:	b2da      	uxtb	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	330b      	adds	r3, #11
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	001a      	movs	r2, r3
 800673c:	2308      	movs	r3, #8
 800673e:	4013      	ands	r3, r2
 8006740:	d109      	bne.n	8006756 <dir_find+0xa0>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a18      	ldr	r0, [r3, #32]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3324      	adds	r3, #36	@ 0x24
 800674a:	220b      	movs	r2, #11
 800674c:	0019      	movs	r1, r3
 800674e:	f7fe ffe9 	bl	8005724 <mem_cmp>
 8006752:	1e03      	subs	r3, r0, #0
 8006754:	d00f      	beq.n	8006776 <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006756:	2517      	movs	r5, #23
 8006758:	197c      	adds	r4, r7, r5
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2100      	movs	r1, #0
 800675e:	0018      	movs	r0, r3
 8006760:	f7ff fe49 	bl	80063f6 <dir_next>
 8006764:	0003      	movs	r3, r0
 8006766:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8006768:	197b      	adds	r3, r7, r5
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0b9      	beq.n	80066e4 <dir_find+0x2e>
 8006770:	e002      	b.n	8006778 <dir_find+0xc2>
		if (res != FR_OK) break;
 8006772:	46c0      	nop			@ (mov r8, r8)
 8006774:	e000      	b.n	8006778 <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006776:	46c0      	nop			@ (mov r8, r8)

	return res;
 8006778:	2317      	movs	r3, #23
 800677a:	18fb      	adds	r3, r7, r3
 800677c:	781b      	ldrb	r3, [r3, #0]
}
 800677e:	0018      	movs	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	b006      	add	sp, #24
 8006784:	bdb0      	pop	{r4, r5, r7, pc}

08006786 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006786:	b5b0      	push	{r4, r5, r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006794:	250f      	movs	r5, #15
 8006796:	197c      	adds	r4, r7, r5
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2101      	movs	r1, #1
 800679c:	0018      	movs	r0, r3
 800679e:	f7ff fef3 	bl	8006588 <dir_alloc>
 80067a2:	0003      	movs	r3, r0
 80067a4:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80067a6:	197b      	adds	r3, r7, r5
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d11f      	bne.n	80067ee <dir_register+0x68>
		res = move_window(fs, dp->sect);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69da      	ldr	r2, [r3, #28]
 80067b2:	197c      	adds	r4, r7, r5
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	0011      	movs	r1, r2
 80067b8:	0018      	movs	r0, r3
 80067ba:	f7ff f9d7 	bl	8005b6c <move_window>
 80067be:	0003      	movs	r3, r0
 80067c0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80067c2:	197b      	adds	r3, r7, r5
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d111      	bne.n	80067ee <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	2220      	movs	r2, #32
 80067d0:	2100      	movs	r1, #0
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7fe ff8d 	bl	80056f2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a18      	ldr	r0, [r3, #32]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3324      	adds	r3, #36	@ 0x24
 80067e0:	220b      	movs	r2, #11
 80067e2:	0019      	movs	r1, r3
 80067e4:	f7fe ff66 	bl	80056b4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2201      	movs	r2, #1
 80067ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80067ee:	230f      	movs	r3, #15
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	781b      	ldrb	r3, [r3, #0]
}
 80067f4:	0018      	movs	r0, r3
 80067f6:	46bd      	mov	sp, r7
 80067f8:	b004      	add	sp, #16
 80067fa:	bdb0      	pop	{r4, r5, r7, pc}

080067fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3324      	adds	r3, #36	@ 0x24
 8006810:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	220b      	movs	r2, #11
 8006816:	2120      	movs	r1, #32
 8006818:	0018      	movs	r0, r3
 800681a:	f7fe ff6a 	bl	80056f2 <mem_set>
	si = i = 0; ni = 8;
 800681e:	2300      	movs	r3, #0
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	2308      	movs	r3, #8
 8006828:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	61fa      	str	r2, [r7, #28]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	18d2      	adds	r2, r2, r3
 8006834:	211b      	movs	r1, #27
 8006836:	187b      	adds	r3, r7, r1
 8006838:	7812      	ldrb	r2, [r2, #0]
 800683a:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800683c:	000a      	movs	r2, r1
 800683e:	18bb      	adds	r3, r7, r2
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b20      	cmp	r3, #32
 8006844:	d800      	bhi.n	8006848 <create_name+0x4c>
 8006846:	e062      	b.n	800690e <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006848:	18bb      	adds	r3, r7, r2
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b2f      	cmp	r3, #47	@ 0x2f
 800684e:	d007      	beq.n	8006860 <create_name+0x64>
 8006850:	18bb      	adds	r3, r7, r2
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	2b5c      	cmp	r3, #92	@ 0x5c
 8006856:	d110      	bne.n	800687a <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006858:	e002      	b.n	8006860 <create_name+0x64>
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3301      	adds	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	18d3      	adds	r3, r2, r3
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b2f      	cmp	r3, #47	@ 0x2f
 800686a:	d0f6      	beq.n	800685a <create_name+0x5e>
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	18d3      	adds	r3, r2, r3
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b5c      	cmp	r3, #92	@ 0x5c
 8006876:	d0f0      	beq.n	800685a <create_name+0x5e>
			break;
 8006878:	e04a      	b.n	8006910 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800687a:	231b      	movs	r3, #27
 800687c:	18fb      	adds	r3, r7, r3
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	2b2e      	cmp	r3, #46	@ 0x2e
 8006882:	d003      	beq.n	800688c <create_name+0x90>
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	429a      	cmp	r2, r3
 800688a:	d30e      	bcc.n	80068aa <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2b0b      	cmp	r3, #11
 8006890:	d004      	beq.n	800689c <create_name+0xa0>
 8006892:	231b      	movs	r3, #27
 8006894:	18fb      	adds	r3, r7, r3
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b2e      	cmp	r3, #46	@ 0x2e
 800689a:	d001      	beq.n	80068a0 <create_name+0xa4>
 800689c:	2306      	movs	r3, #6
 800689e:	e054      	b.n	800694a <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 80068a0:	2308      	movs	r3, #8
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	230b      	movs	r3, #11
 80068a6:	617b      	str	r3, [r7, #20]
			continue;
 80068a8:	e030      	b.n	800690c <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 80068aa:	211b      	movs	r1, #27
 80068ac:	187b      	adds	r3, r7, r1
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	b25b      	sxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da07      	bge.n	80068c6 <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80068b6:	187b      	adds	r3, r7, r1
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	3b80      	subs	r3, #128	@ 0x80
 80068bc:	001a      	movs	r2, r3
 80068be:	187b      	adds	r3, r7, r1
 80068c0:	4924      	ldr	r1, [pc, #144]	@ (8006954 <create_name+0x158>)
 80068c2:	5c8a      	ldrb	r2, [r1, r2]
 80068c4:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80068c6:	231b      	movs	r3, #27
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	4b22      	ldr	r3, [pc, #136]	@ (8006958 <create_name+0x15c>)
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7fe ff4c 	bl	800576e <chk_chr>
 80068d6:	1e03      	subs	r3, r0, #0
 80068d8:	d001      	beq.n	80068de <create_name+0xe2>
 80068da:	2306      	movs	r3, #6
 80068dc:	e035      	b.n	800694a <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80068de:	221b      	movs	r2, #27
 80068e0:	18bb      	adds	r3, r7, r2
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b60      	cmp	r3, #96	@ 0x60
 80068e6:	d908      	bls.n	80068fa <create_name+0xfe>
 80068e8:	18bb      	adds	r3, r7, r2
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b7a      	cmp	r3, #122	@ 0x7a
 80068ee:	d804      	bhi.n	80068fa <create_name+0xfe>
 80068f0:	18bb      	adds	r3, r7, r2
 80068f2:	18ba      	adds	r2, r7, r2
 80068f4:	7812      	ldrb	r2, [r2, #0]
 80068f6:	3a20      	subs	r2, #32
 80068f8:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	613a      	str	r2, [r7, #16]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	18d3      	adds	r3, r2, r3
 8006904:	221b      	movs	r2, #27
 8006906:	18ba      	adds	r2, r7, r2
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800690c:	e78d      	b.n	800682a <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800690e:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	18d2      	adds	r2, r2, r3
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <create_name+0x128>
 8006920:	2306      	movs	r3, #6
 8006922:	e012      	b.n	800694a <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2be5      	cmp	r3, #229	@ 0xe5
 800692a:	d102      	bne.n	8006932 <create_name+0x136>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2205      	movs	r2, #5
 8006930:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006932:	231b      	movs	r3, #27
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b20      	cmp	r3, #32
 800693a:	d801      	bhi.n	8006940 <create_name+0x144>
 800693c:	2204      	movs	r2, #4
 800693e:	e000      	b.n	8006942 <create_name+0x146>
 8006940:	2200      	movs	r2, #0
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	330b      	adds	r3, #11
 8006946:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006948:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800694a:	0018      	movs	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	b008      	add	sp, #32
 8006950:	bd80      	pop	{r7, pc}
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	0800be5c 	.word	0x0800be5c
 8006958:	0800bd0c 	.word	0x0800bd0c

0800695c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800695c:	b5b0      	push	{r4, r5, r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006970:	e002      	b.n	8006978 <follow_path+0x1c>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	3301      	adds	r3, #1
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b2f      	cmp	r3, #47	@ 0x2f
 800697e:	d0f8      	beq.n	8006972 <follow_path+0x16>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	2b5c      	cmp	r3, #92	@ 0x5c
 8006986:	d0f4      	beq.n	8006972 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2200      	movs	r2, #0
 800698c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b1f      	cmp	r3, #31
 8006994:	d80d      	bhi.n	80069b2 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	222f      	movs	r2, #47	@ 0x2f
 800699a:	2180      	movs	r1, #128	@ 0x80
 800699c:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 800699e:	2317      	movs	r3, #23
 80069a0:	18fc      	adds	r4, r7, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2100      	movs	r1, #0
 80069a6:	0018      	movs	r0, r3
 80069a8:	f7ff fca7 	bl	80062fa <dir_sdi>
 80069ac:	0003      	movs	r3, r0
 80069ae:	7023      	strb	r3, [r4, #0]
 80069b0:	e052      	b.n	8006a58 <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80069b2:	2517      	movs	r5, #23
 80069b4:	197c      	adds	r4, r7, r5
 80069b6:	003a      	movs	r2, r7
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	0011      	movs	r1, r2
 80069bc:	0018      	movs	r0, r3
 80069be:	f7ff ff1d 	bl	80067fc <create_name>
 80069c2:	0003      	movs	r3, r0
 80069c4:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80069c6:	197b      	adds	r3, r7, r5
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d13f      	bne.n	8006a4e <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 80069ce:	197c      	adds	r4, r7, r5
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	0018      	movs	r0, r3
 80069d4:	f7ff fe6f 	bl	80066b6 <dir_find>
 80069d8:	0003      	movs	r3, r0
 80069da:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80069dc:	200b      	movs	r0, #11
 80069de:	183b      	adds	r3, r7, r0
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	212f      	movs	r1, #47	@ 0x2f
 80069e4:	5c52      	ldrb	r2, [r2, r1]
 80069e6:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80069e8:	197b      	adds	r3, r7, r5
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00c      	beq.n	8006a0a <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80069f0:	197b      	adds	r3, r7, r5
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d12c      	bne.n	8006a52 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80069f8:	183b      	adds	r3, r7, r0
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	2204      	movs	r2, #4
 80069fe:	4013      	ands	r3, r2
 8006a00:	d127      	bne.n	8006a52 <follow_path+0xf6>
 8006a02:	197b      	adds	r3, r7, r5
 8006a04:	2205      	movs	r2, #5
 8006a06:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8006a08:	e023      	b.n	8006a52 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a0a:	230b      	movs	r3, #11
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2204      	movs	r2, #4
 8006a12:	4013      	ands	r3, r2
 8006a14:	d11f      	bne.n	8006a56 <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	799b      	ldrb	r3, [r3, #6]
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d104      	bne.n	8006a2c <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8006a22:	2317      	movs	r3, #23
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	2205      	movs	r2, #5
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	e015      	b.n	8006a58 <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3334      	adds	r3, #52	@ 0x34
 8006a30:	001a      	movs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	05db      	lsls	r3, r3, #23
 8006a38:	0ddb      	lsrs	r3, r3, #23
 8006a3a:	18d2      	adds	r2, r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	0011      	movs	r1, r2
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7ff fdf9 	bl	8006638 <ld_clust>
 8006a46:	0002      	movs	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a4c:	e7b1      	b.n	80069b2 <follow_path+0x56>
			if (res != FR_OK) break;
 8006a4e:	46c0      	nop			@ (mov r8, r8)
 8006a50:	e002      	b.n	8006a58 <follow_path+0xfc>
				break;
 8006a52:	46c0      	nop			@ (mov r8, r8)
 8006a54:	e000      	b.n	8006a58 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006a56:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 8006a58:	2317      	movs	r3, #23
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	781b      	ldrb	r3, [r3, #0]
}
 8006a5e:	0018      	movs	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	b006      	add	sp, #24
 8006a64:	bdb0      	pop	{r4, r5, r7, pc}

08006a66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b086      	sub	sp, #24
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	425b      	negs	r3, r3
 8006a72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d031      	beq.n	8006ae0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	e002      	b.n	8006a8a <get_ldnumber+0x24>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	3301      	adds	r3, #1
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d903      	bls.n	8006a9a <get_ldnumber+0x34>
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b3a      	cmp	r3, #58	@ 0x3a
 8006a98:	d1f4      	bne.n	8006a84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b3a      	cmp	r3, #58	@ 0x3a
 8006aa0:	d11c      	bne.n	8006adc <get_ldnumber+0x76>
			tp = *path;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	60fa      	str	r2, [r7, #12]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	3b30      	subs	r3, #48	@ 0x30
 8006ab2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b09      	cmp	r3, #9
 8006ab8:	d80e      	bhi.n	8006ad8 <get_ldnumber+0x72>
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d10a      	bne.n	8006ad8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d107      	bne.n	8006ad8 <get_ldnumber+0x72>
					vol = (int)i;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	e002      	b.n	8006ae2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006adc:	2300      	movs	r3, #0
 8006ade:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006ae0:	693b      	ldr	r3, [r7, #16]
}
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b006      	add	sp, #24
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	70da      	strb	r2, [r3, #3]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	4252      	negs	r2, r2
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	0011      	movs	r1, r2
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f7ff f82e 	bl	8005b6c <move_window>
 8006b10:	1e03      	subs	r3, r0, #0
 8006b12:	d001      	beq.n	8006b18 <check_fs+0x2c>
 8006b14:	2304      	movs	r3, #4
 8006b16:	e037      	b.n	8006b88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3334      	adds	r3, #52	@ 0x34
 8006b1c:	33ff      	adds	r3, #255	@ 0xff
 8006b1e:	33ff      	adds	r3, #255	@ 0xff
 8006b20:	0018      	movs	r0, r3
 8006b22:	f7fe fd43 	bl	80055ac <ld_word>
 8006b26:	0003      	movs	r3, r0
 8006b28:	001a      	movs	r2, r3
 8006b2a:	4b19      	ldr	r3, [pc, #100]	@ (8006b90 <check_fs+0xa4>)
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d001      	beq.n	8006b34 <check_fs+0x48>
 8006b30:	2303      	movs	r3, #3
 8006b32:	e029      	b.n	8006b88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2234      	movs	r2, #52	@ 0x34
 8006b38:	5c9b      	ldrb	r3, [r3, r2]
 8006b3a:	2be9      	cmp	r3, #233	@ 0xe9
 8006b3c:	d009      	beq.n	8006b52 <check_fs+0x66>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2234      	movs	r2, #52	@ 0x34
 8006b42:	5c9b      	ldrb	r3, [r3, r2]
 8006b44:	2beb      	cmp	r3, #235	@ 0xeb
 8006b46:	d11e      	bne.n	8006b86 <check_fs+0x9a>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2236      	movs	r2, #54	@ 0x36
 8006b4c:	5c9b      	ldrb	r3, [r3, r2]
 8006b4e:	2b90      	cmp	r3, #144	@ 0x90
 8006b50:	d119      	bne.n	8006b86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3334      	adds	r3, #52	@ 0x34
 8006b56:	3336      	adds	r3, #54	@ 0x36
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f7fe fd42 	bl	80055e2 <ld_dword>
 8006b5e:	0003      	movs	r3, r0
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	4a0b      	ldr	r2, [pc, #44]	@ (8006b94 <check_fs+0xa8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d101      	bne.n	8006b6e <check_fs+0x82>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e00c      	b.n	8006b88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3334      	adds	r3, #52	@ 0x34
 8006b72:	3352      	adds	r3, #82	@ 0x52
 8006b74:	0018      	movs	r0, r3
 8006b76:	f7fe fd34 	bl	80055e2 <ld_dword>
 8006b7a:	0003      	movs	r3, r0
 8006b7c:	4a06      	ldr	r2, [pc, #24]	@ (8006b98 <check_fs+0xac>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d101      	bne.n	8006b86 <check_fs+0x9a>
 8006b82:	2300      	movs	r3, #0
 8006b84:	e000      	b.n	8006b88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006b86:	2302      	movs	r3, #2
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b002      	add	sp, #8
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	0000aa55 	.word	0x0000aa55
 8006b94:	00544146 	.word	0x00544146
 8006b98:	33544146 	.word	0x33544146

08006b9c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006b9c:	b5b0      	push	{r4, r5, r7, lr}
 8006b9e:	b096      	sub	sp, #88	@ 0x58
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	1dfb      	adds	r3, r7, #7
 8006ba8:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2200      	movs	r2, #0
 8006bae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7ff ff57 	bl	8006a66 <get_ldnumber>
 8006bb8:	0003      	movs	r3, r0
 8006bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da01      	bge.n	8006bc6 <find_volume+0x2a>
 8006bc2:	230b      	movs	r3, #11
 8006bc4:	e250      	b.n	8007068 <find_volume+0x4cc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006bc6:	4bb6      	ldr	r3, [pc, #728]	@ (8006ea0 <find_volume+0x304>)
 8006bc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	58d3      	ldr	r3, [r2, r3]
 8006bce:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <find_volume+0x3e>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	e246      	b.n	8007068 <find_volume+0x4cc>

	ENTER_FF(fs);						/* Lock the volume */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7fe fddf 	bl	80057a0 <lock_fs>
 8006be2:	1e03      	subs	r3, r0, #0
 8006be4:	d101      	bne.n	8006bea <find_volume+0x4e>
 8006be6:	230f      	movs	r3, #15
 8006be8:	e23e      	b.n	8007068 <find_volume+0x4cc>
	*rfs = fs;							/* Return pointer to the file system object */
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006bf0:	1dfb      	adds	r3, r7, #7
 8006bf2:	1dfa      	adds	r2, r7, #7
 8006bf4:	7812      	ldrb	r2, [r2, #0]
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	438a      	bics	r2, r1
 8006bfa:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d01b      	beq.n	8006c3c <find_volume+0xa0>
		stat = disk_status(fs->drv);
 8006c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c06:	785b      	ldrb	r3, [r3, #1]
 8006c08:	2537      	movs	r5, #55	@ 0x37
 8006c0a:	197c      	adds	r4, r7, r5
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7fe fc03 	bl	8005418 <disk_status>
 8006c12:	0003      	movs	r3, r0
 8006c14:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006c16:	0029      	movs	r1, r5
 8006c18:	187b      	adds	r3, r7, r1
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d10c      	bne.n	8006c3c <find_volume+0xa0>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006c22:	1dfb      	adds	r3, r7, #7
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d006      	beq.n	8006c38 <find_volume+0x9c>
 8006c2a:	187b      	adds	r3, r7, r1
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	4013      	ands	r3, r2
 8006c32:	d001      	beq.n	8006c38 <find_volume+0x9c>
				return FR_WRITE_PROTECTED;
 8006c34:	230a      	movs	r3, #10
 8006c36:	e217      	b.n	8007068 <find_volume+0x4cc>
			}
			return FR_OK;				/* The file system object is valid */
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e215      	b.n	8007068 <find_volume+0x4cc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c48:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4c:	785b      	ldrb	r3, [r3, #1]
 8006c4e:	2537      	movs	r5, #55	@ 0x37
 8006c50:	197c      	adds	r4, r7, r5
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7fe fc02 	bl	800545c <disk_initialize>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006c5c:	197b      	adds	r3, r7, r5
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2201      	movs	r2, #1
 8006c62:	4013      	ands	r3, r2
 8006c64:	d001      	beq.n	8006c6a <find_volume+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006c66:	2303      	movs	r3, #3
 8006c68:	e1fe      	b.n	8007068 <find_volume+0x4cc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006c6a:	1dfb      	adds	r3, r7, #7
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <find_volume+0xe6>
 8006c72:	2337      	movs	r3, #55	@ 0x37
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d001      	beq.n	8006c82 <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 8006c7e:	230a      	movs	r3, #10
 8006c80:	e1f2      	b.n	8007068 <find_volume+0x4cc>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006c86:	2557      	movs	r5, #87	@ 0x57
 8006c88:	197c      	adds	r4, r7, r5
 8006c8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8e:	0011      	movs	r1, r2
 8006c90:	0018      	movs	r0, r3
 8006c92:	f7ff ff2b 	bl	8006aec <check_fs>
 8006c96:	0003      	movs	r3, r0
 8006c98:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006c9a:	197b      	adds	r3, r7, r5
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d14b      	bne.n	8006d3a <find_volume+0x19e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ca6:	e01d      	b.n	8006ce4 <find_volume+0x148>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006caa:	3334      	adds	r3, #52	@ 0x34
 8006cac:	001a      	movs	r2, r3
 8006cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	33bf      	adds	r3, #191	@ 0xbf
 8006cb4:	33ff      	adds	r3, #255	@ 0xff
 8006cb6:	18d3      	adds	r3, r2, r3
 8006cb8:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d006      	beq.n	8006cd2 <find_volume+0x136>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f7fe fc8a 	bl	80055e2 <ld_dword>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	e000      	b.n	8006cd4 <find_volume+0x138>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2214      	movs	r2, #20
 8006cd6:	18ba      	adds	r2, r7, r2
 8006cd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cda:	0089      	lsls	r1, r1, #2
 8006cdc:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d9de      	bls.n	8006ca8 <find_volume+0x10c>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006cea:	2300      	movs	r3, #0
 8006cec:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <find_volume+0x15e>
 8006cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006cfa:	2314      	movs	r3, #20
 8006cfc:	18fb      	adds	r3, r7, r3
 8006cfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d00:	0092      	lsls	r2, r2, #2
 8006d02:	58d3      	ldr	r3, [r2, r3]
 8006d04:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d008      	beq.n	8006d1e <find_volume+0x182>
 8006d0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d10:	0011      	movs	r1, r2
 8006d12:	0018      	movs	r0, r3
 8006d14:	f7ff feea 	bl	8006aec <check_fs>
 8006d18:	0003      	movs	r3, r0
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	e000      	b.n	8006d20 <find_volume+0x184>
 8006d1e:	2203      	movs	r2, #3
 8006d20:	2157      	movs	r1, #87	@ 0x57
 8006d22:	187b      	adds	r3, r7, r1
 8006d24:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006d26:	187b      	adds	r3, r7, r1
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d905      	bls.n	8006d3a <find_volume+0x19e>
 8006d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d30:	3301      	adds	r3, #1
 8006d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d9df      	bls.n	8006cfa <find_volume+0x15e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006d3a:	2357      	movs	r3, #87	@ 0x57
 8006d3c:	18fb      	adds	r3, r7, r3
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d101      	bne.n	8006d48 <find_volume+0x1ac>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e18f      	b.n	8007068 <find_volume+0x4cc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006d48:	2357      	movs	r3, #87	@ 0x57
 8006d4a:	18fb      	adds	r3, r7, r3
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d901      	bls.n	8006d56 <find_volume+0x1ba>
 8006d52:	230d      	movs	r3, #13
 8006d54:	e188      	b.n	8007068 <find_volume+0x4cc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	3334      	adds	r3, #52	@ 0x34
 8006d5a:	330b      	adds	r3, #11
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	f7fe fc25 	bl	80055ac <ld_word>
 8006d62:	0003      	movs	r3, r0
 8006d64:	001a      	movs	r2, r3
 8006d66:	2380      	movs	r3, #128	@ 0x80
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d001      	beq.n	8006d72 <find_volume+0x1d6>
 8006d6e:	230d      	movs	r3, #13
 8006d70:	e17a      	b.n	8007068 <find_volume+0x4cc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	3334      	adds	r3, #52	@ 0x34
 8006d76:	3316      	adds	r3, #22
 8006d78:	0018      	movs	r0, r3
 8006d7a:	f7fe fc17 	bl	80055ac <ld_word>
 8006d7e:	0003      	movs	r3, r0
 8006d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d107      	bne.n	8006d98 <find_volume+0x1fc>
 8006d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8a:	3334      	adds	r3, #52	@ 0x34
 8006d8c:	3324      	adds	r3, #36	@ 0x24
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f7fe fc27 	bl	80055e2 <ld_dword>
 8006d94:	0003      	movs	r3, r0
 8006d96:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d9c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da0:	2244      	movs	r2, #68	@ 0x44
 8006da2:	5c9a      	ldrb	r2, [r3, r2]
 8006da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	789b      	ldrb	r3, [r3, #2]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d005      	beq.n	8006dbc <find_volume+0x220>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	789b      	ldrb	r3, [r3, #2]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d001      	beq.n	8006dbc <find_volume+0x220>
 8006db8:	230d      	movs	r3, #13
 8006dba:	e155      	b.n	8007068 <find_volume+0x4cc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbe:	789b      	ldrb	r3, [r3, #2]
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dc4:	4353      	muls	r3, r2
 8006dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	2241      	movs	r2, #65	@ 0x41
 8006dcc:	5c9b      	ldrb	r3, [r3, r2]
 8006dce:	001a      	movs	r2, r3
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	895b      	ldrh	r3, [r3, #10]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <find_volume+0x250>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dde:	895b      	ldrh	r3, [r3, #10]
 8006de0:	001a      	movs	r2, r3
 8006de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de4:	895b      	ldrh	r3, [r3, #10]
 8006de6:	3b01      	subs	r3, #1
 8006de8:	4013      	ands	r3, r2
 8006dea:	d001      	beq.n	8006df0 <find_volume+0x254>
 8006dec:	230d      	movs	r3, #13
 8006dee:	e13b      	b.n	8007068 <find_volume+0x4cc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df2:	3334      	adds	r3, #52	@ 0x34
 8006df4:	3311      	adds	r3, #17
 8006df6:	0018      	movs	r0, r3
 8006df8:	f7fe fbd8 	bl	80055ac <ld_word>
 8006dfc:	0003      	movs	r3, r0
 8006dfe:	001a      	movs	r2, r3
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	891b      	ldrh	r3, [r3, #8]
 8006e08:	220f      	movs	r2, #15
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <find_volume+0x27a>
 8006e12:	230d      	movs	r3, #13
 8006e14:	e128      	b.n	8007068 <find_volume+0x4cc>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e18:	3334      	adds	r3, #52	@ 0x34
 8006e1a:	3313      	adds	r3, #19
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f7fe fbc5 	bl	80055ac <ld_word>
 8006e22:	0003      	movs	r3, r0
 8006e24:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d107      	bne.n	8006e3c <find_volume+0x2a0>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2e:	3334      	adds	r3, #52	@ 0x34
 8006e30:	3320      	adds	r3, #32
 8006e32:	0018      	movs	r0, r3
 8006e34:	f7fe fbd5 	bl	80055e2 <ld_dword>
 8006e38:	0003      	movs	r3, r0
 8006e3a:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e3e:	3334      	adds	r3, #52	@ 0x34
 8006e40:	330e      	adds	r3, #14
 8006e42:	252e      	movs	r5, #46	@ 0x2e
 8006e44:	197c      	adds	r4, r7, r5
 8006e46:	0018      	movs	r0, r3
 8006e48:	f7fe fbb0 	bl	80055ac <ld_word>
 8006e4c:	0003      	movs	r3, r0
 8006e4e:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006e50:	197b      	adds	r3, r7, r5
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <find_volume+0x2c0>
 8006e58:	230d      	movs	r3, #13
 8006e5a:	e105      	b.n	8007068 <find_volume+0x4cc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006e5c:	232e      	movs	r3, #46	@ 0x2e
 8006e5e:	18fb      	adds	r3, r7, r3
 8006e60:	881a      	ldrh	r2, [r3, #0]
 8006e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e64:	18d3      	adds	r3, r2, r3
 8006e66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e68:	8912      	ldrh	r2, [r2, #8]
 8006e6a:	0912      	lsrs	r2, r2, #4
 8006e6c:	b292      	uxth	r2, r2
 8006e6e:	189b      	adds	r3, r3, r2
 8006e70:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006e72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d201      	bcs.n	8006e7e <find_volume+0x2e2>
 8006e7a:	230d      	movs	r3, #13
 8006e7c:	e0f4      	b.n	8007068 <find_volume+0x4cc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e82:	1ad2      	subs	r2, r2, r3
 8006e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e86:	895b      	ldrh	r3, [r3, #10]
 8006e88:	0019      	movs	r1, r3
 8006e8a:	0010      	movs	r0, r2
 8006e8c:	f7f9 f94e 	bl	800012c <__udivsi3>
 8006e90:	0003      	movs	r3, r0
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <find_volume+0x308>
 8006e9a:	230d      	movs	r3, #13
 8006e9c:	e0e4      	b.n	8007068 <find_volume+0x4cc>
 8006e9e:	46c0      	nop			@ (mov r8, r8)
 8006ea0:	200004c0 	.word	0x200004c0
		fmt = FS_FAT32;
 8006ea4:	2157      	movs	r1, #87	@ 0x57
 8006ea6:	187b      	adds	r3, r7, r1
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eae:	4a70      	ldr	r2, [pc, #448]	@ (8007070 <find_volume+0x4d4>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d802      	bhi.n	8006eba <find_volume+0x31e>
 8006eb4:	187b      	adds	r3, r7, r1
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	4a6d      	ldr	r2, [pc, #436]	@ (8007074 <find_volume+0x4d8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d803      	bhi.n	8006eca <find_volume+0x32e>
 8006ec2:	2357      	movs	r3, #87	@ 0x57
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	1c9a      	adds	r2, r3, #2
 8006ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ed6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ed8:	232e      	movs	r3, #46	@ 0x2e
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	881a      	ldrh	r2, [r3, #0]
 8006ede:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ee0:	18d2      	adds	r2, r2, r3
 8006ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee4:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006ee6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	18d2      	adds	r2, r2, r3
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8006ef0:	2357      	movs	r3, #87	@ 0x57
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d11d      	bne.n	8006f36 <find_volume+0x39a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	3334      	adds	r3, #52	@ 0x34
 8006efe:	332a      	adds	r3, #42	@ 0x2a
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7fe fb53 	bl	80055ac <ld_word>
 8006f06:	1e03      	subs	r3, r0, #0
 8006f08:	d001      	beq.n	8006f0e <find_volume+0x372>
 8006f0a:	230d      	movs	r3, #13
 8006f0c:	e0ac      	b.n	8007068 <find_volume+0x4cc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	891b      	ldrh	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <find_volume+0x37e>
 8006f16:	230d      	movs	r3, #13
 8006f18:	e0a6      	b.n	8007068 <find_volume+0x4cc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	3334      	adds	r3, #52	@ 0x34
 8006f1e:	332c      	adds	r3, #44	@ 0x2c
 8006f20:	0018      	movs	r0, r3
 8006f22:	f7fe fb5e 	bl	80055e2 <ld_dword>
 8006f26:	0002      	movs	r2, r0
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f34:	e020      	b.n	8006f78 <find_volume+0x3dc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f38:	891b      	ldrh	r3, [r3, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <find_volume+0x3a6>
 8006f3e:	230d      	movs	r3, #13
 8006f40:	e092      	b.n	8007068 <find_volume+0x4cc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f48:	18d2      	adds	r2, r2, r3
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006f4e:	2357      	movs	r3, #87	@ 0x57
 8006f50:	18fb      	adds	r3, r7, r3
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d103      	bne.n	8006f60 <find_volume+0x3c4>
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	005b      	lsls	r3, r3, #1
 8006f5e:	e00a      	b.n	8006f76 <find_volume+0x3da>
 8006f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	0013      	movs	r3, r2
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	189b      	adds	r3, r3, r2
 8006f6a:	085a      	lsrs	r2, r3, #1
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	2101      	movs	r1, #1
 8006f72:	400b      	ands	r3, r1
 8006f74:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006f76:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f7e:	493e      	ldr	r1, [pc, #248]	@ (8007078 <find_volume+0x4dc>)
 8006f80:	468c      	mov	ip, r1
 8006f82:	4463      	add	r3, ip
 8006f84:	0a5b      	lsrs	r3, r3, #9
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d201      	bcs.n	8006f8e <find_volume+0x3f2>
 8006f8a:	230d      	movs	r3, #13
 8006f8c:	e06c      	b.n	8007068 <find_volume+0x4cc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f90:	2201      	movs	r2, #1
 8006f92:	4252      	negs	r2, r2
 8006f94:	615a      	str	r2, [r3, #20]
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa0:	2280      	movs	r2, #128	@ 0x80
 8006fa2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006fa4:	2357      	movs	r3, #87	@ 0x57
 8006fa6:	18fb      	adds	r3, r7, r3
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d148      	bne.n	8007040 <find_volume+0x4a4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	3334      	adds	r3, #52	@ 0x34
 8006fb2:	3330      	adds	r3, #48	@ 0x30
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f7fe faf9 	bl	80055ac <ld_word>
 8006fba:	0003      	movs	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d13f      	bne.n	8007040 <find_volume+0x4a4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006fc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc6:	0011      	movs	r1, r2
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f7fe fdcf 	bl	8005b6c <move_window>
 8006fce:	1e03      	subs	r3, r0, #0
 8006fd0:	d136      	bne.n	8007040 <find_volume+0x4a4>
		{
			fs->fsi_flag = 0;
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fda:	3334      	adds	r3, #52	@ 0x34
 8006fdc:	33ff      	adds	r3, #255	@ 0xff
 8006fde:	33ff      	adds	r3, #255	@ 0xff
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f7fe fae3 	bl	80055ac <ld_word>
 8006fe6:	0003      	movs	r3, r0
 8006fe8:	001a      	movs	r2, r3
 8006fea:	4b24      	ldr	r3, [pc, #144]	@ (800707c <find_volume+0x4e0>)
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d127      	bne.n	8007040 <find_volume+0x4a4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff2:	3334      	adds	r3, #52	@ 0x34
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f7fe faf4 	bl	80055e2 <ld_dword>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	4a20      	ldr	r2, [pc, #128]	@ (8007080 <find_volume+0x4e4>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d11e      	bne.n	8007040 <find_volume+0x4a4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007004:	3334      	adds	r3, #52	@ 0x34
 8007006:	33e5      	adds	r3, #229	@ 0xe5
 8007008:	33ff      	adds	r3, #255	@ 0xff
 800700a:	0018      	movs	r0, r3
 800700c:	f7fe fae9 	bl	80055e2 <ld_dword>
 8007010:	0003      	movs	r3, r0
 8007012:	4a1c      	ldr	r2, [pc, #112]	@ (8007084 <find_volume+0x4e8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d113      	bne.n	8007040 <find_volume+0x4a4>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	3334      	adds	r3, #52	@ 0x34
 800701c:	33e9      	adds	r3, #233	@ 0xe9
 800701e:	33ff      	adds	r3, #255	@ 0xff
 8007020:	0018      	movs	r0, r3
 8007022:	f7fe fade 	bl	80055e2 <ld_dword>
 8007026:	0002      	movs	r2, r0
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800702c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702e:	3334      	adds	r3, #52	@ 0x34
 8007030:	33ed      	adds	r3, #237	@ 0xed
 8007032:	33ff      	adds	r3, #255	@ 0xff
 8007034:	0018      	movs	r0, r3
 8007036:	f7fe fad4 	bl	80055e2 <ld_dword>
 800703a:	0002      	movs	r2, r0
 800703c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007042:	2257      	movs	r2, #87	@ 0x57
 8007044:	18ba      	adds	r2, r7, r2
 8007046:	7812      	ldrb	r2, [r2, #0]
 8007048:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800704a:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <find_volume+0x4ec>)
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	3301      	adds	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	4b0d      	ldr	r3, [pc, #52]	@ (8007088 <find_volume+0x4ec>)
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <find_volume+0x4ec>)
 8007058:	881a      	ldrh	r2, [r3, #0]
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	0018      	movs	r0, r3
 8007062:	f7fe fd1b 	bl	8005a9c <clear_lock>
#endif
	return FR_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	0018      	movs	r0, r3
 800706a:	46bd      	mov	sp, r7
 800706c:	b016      	add	sp, #88	@ 0x58
 800706e:	bdb0      	pop	{r4, r5, r7, pc}
 8007070:	0000fff5 	.word	0x0000fff5
 8007074:	00000ff5 	.word	0x00000ff5
 8007078:	000001ff 	.word	0x000001ff
 800707c:	0000aa55 	.word	0x0000aa55
 8007080:	41615252 	.word	0x41615252
 8007084:	61417272 	.word	0x61417272
 8007088:	200004c4 	.word	0x200004c4

0800708c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007096:	240f      	movs	r4, #15
 8007098:	193b      	adds	r3, r7, r4
 800709a:	2209      	movs	r2, #9
 800709c:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d030      	beq.n	8007106 <validate+0x7a>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d02c      	beq.n	8007106 <validate+0x7a>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d027      	beq.n	8007106 <validate+0x7a>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	889a      	ldrh	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	88db      	ldrh	r3, [r3, #6]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d120      	bne.n	8007106 <validate+0x7a>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	0018      	movs	r0, r3
 80070ca:	f7fe fb69 	bl	80057a0 <lock_fs>
 80070ce:	1e03      	subs	r3, r0, #0
 80070d0:	d015      	beq.n	80070fe <validate+0x72>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	785b      	ldrb	r3, [r3, #1]
 80070d8:	0018      	movs	r0, r3
 80070da:	f7fe f99d 	bl	8005418 <disk_status>
 80070de:	0003      	movs	r3, r0
 80070e0:	001a      	movs	r2, r3
 80070e2:	2301      	movs	r3, #1
 80070e4:	4013      	ands	r3, r2
 80070e6:	d103      	bne.n	80070f0 <validate+0x64>
				res = FR_OK;
 80070e8:	193b      	adds	r3, r7, r4
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
 80070ee:	e00a      	b.n	8007106 <validate+0x7a>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2100      	movs	r1, #0
 80070f6:	0018      	movs	r0, r3
 80070f8:	f7fe fb67 	bl	80057ca <unlock_fs>
 80070fc:	e003      	b.n	8007106 <validate+0x7a>
			}
		} else {
			res = FR_TIMEOUT;
 80070fe:	230f      	movs	r3, #15
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	220f      	movs	r2, #15
 8007104:	701a      	strb	r2, [r3, #0]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007106:	230f      	movs	r3, #15
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d102      	bne.n	8007116 <validate+0x8a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	e000      	b.n	8007118 <validate+0x8c>
 8007116:	2200      	movs	r2, #0
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	601a      	str	r2, [r3, #0]
	return res;
 800711c:	230f      	movs	r3, #15
 800711e:	18fb      	adds	r3, r7, r3
 8007120:	781b      	ldrb	r3, [r3, #0]
}
 8007122:	0018      	movs	r0, r3
 8007124:	46bd      	mov	sp, r7
 8007126:	b005      	add	sp, #20
 8007128:	bd90      	pop	{r4, r7, pc}
	...

0800712c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800712c:	b5b0      	push	{r4, r5, r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	1dfb      	adds	r3, r7, #7
 8007138:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800713e:	2310      	movs	r3, #16
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	0018      	movs	r0, r3
 8007144:	f7ff fc8f 	bl	8006a66 <get_ldnumber>
 8007148:	0003      	movs	r3, r0
 800714a:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	da01      	bge.n	8007156 <f_mount+0x2a>
 8007152:	230b      	movs	r3, #11
 8007154:	e04c      	b.n	80071f0 <f_mount+0xc4>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007156:	4b28      	ldr	r3, [pc, #160]	@ (80071f8 <f_mount+0xcc>)
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	0092      	lsls	r2, r2, #2
 800715c:	58d3      	ldr	r3, [r2, r3]
 800715e:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00f      	beq.n	8007186 <f_mount+0x5a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	0018      	movs	r0, r3
 800716a:	f7fe fc97 	bl	8005a9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	0018      	movs	r0, r3
 8007174:	f000 ffaa 	bl	80080cc <ff_del_syncobj>
 8007178:	1e03      	subs	r3, r0, #0
 800717a:	d101      	bne.n	8007180 <f_mount+0x54>
 800717c:	2302      	movs	r3, #2
 800717e:	e037      	b.n	80071f0 <f_mount+0xc4>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2200      	movs	r2, #0
 8007184:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00e      	beq.n	80071aa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	330c      	adds	r3, #12
 800719a:	0019      	movs	r1, r3
 800719c:	0010      	movs	r0, r2
 800719e:	f000 ff7b 	bl	8008098 <ff_cre_syncobj>
 80071a2:	1e03      	subs	r3, r0, #0
 80071a4:	d101      	bne.n	80071aa <f_mount+0x7e>
 80071a6:	2302      	movs	r3, #2
 80071a8:	e022      	b.n	80071f0 <f_mount+0xc4>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	4b12      	ldr	r3, [pc, #72]	@ (80071f8 <f_mount+0xcc>)
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	0092      	lsls	r2, r2, #2
 80071b2:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <f_mount+0x96>
 80071ba:	1dfb      	adds	r3, r7, #7
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d001      	beq.n	80071c6 <f_mount+0x9a>
 80071c2:	2300      	movs	r3, #0
 80071c4:	e014      	b.n	80071f0 <f_mount+0xc4>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80071c6:	2517      	movs	r5, #23
 80071c8:	197c      	adds	r4, r7, r5
 80071ca:	230c      	movs	r3, #12
 80071cc:	18f9      	adds	r1, r7, r3
 80071ce:	2308      	movs	r3, #8
 80071d0:	18fb      	adds	r3, r7, r3
 80071d2:	2200      	movs	r2, #0
 80071d4:	0018      	movs	r0, r3
 80071d6:	f7ff fce1 	bl	8006b9c <find_volume>
 80071da:	0003      	movs	r3, r0
 80071dc:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	197b      	adds	r3, r7, r5
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	0019      	movs	r1, r3
 80071e6:	0010      	movs	r0, r2
 80071e8:	f7fe faef 	bl	80057ca <unlock_fs>
 80071ec:	197b      	adds	r3, r7, r5
 80071ee:	781b      	ldrb	r3, [r3, #0]
}
 80071f0:	0018      	movs	r0, r3
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b008      	add	sp, #32
 80071f6:	bdb0      	pop	{r4, r5, r7, pc}
 80071f8:	200004c0 	.word	0x200004c0

080071fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80071fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071fe:	b099      	sub	sp, #100	@ 0x64
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	1dfb      	adds	r3, r7, #7
 8007208:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <f_open+0x18>
 8007210:	2309      	movs	r3, #9
 8007212:	e1ea      	b.n	80075ea <f_open+0x3ee>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007214:	1dfb      	adds	r3, r7, #7
 8007216:	1dfa      	adds	r2, r7, #7
 8007218:	7812      	ldrb	r2, [r2, #0]
 800721a:	213f      	movs	r1, #63	@ 0x3f
 800721c:	400a      	ands	r2, r1
 800721e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007220:	255f      	movs	r5, #95	@ 0x5f
 8007222:	197c      	adds	r4, r7, r5
 8007224:	1dfb      	adds	r3, r7, #7
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	2310      	movs	r3, #16
 800722a:	18f9      	adds	r1, r7, r3
 800722c:	2308      	movs	r3, #8
 800722e:	18fb      	adds	r3, r7, r3
 8007230:	0018      	movs	r0, r3
 8007232:	f7ff fcb3 	bl	8006b9c <find_volume>
 8007236:	0003      	movs	r3, r0
 8007238:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800723a:	197b      	adds	r3, r7, r5
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d000      	beq.n	8007244 <f_open+0x48>
 8007242:	e1c0      	b.n	80075c6 <f_open+0x3ca>
		dj.obj.fs = fs;
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	2614      	movs	r6, #20
 8007248:	19bb      	adds	r3, r7, r6
 800724a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	197c      	adds	r4, r7, r5
 8007250:	19bb      	adds	r3, r7, r6
 8007252:	0011      	movs	r1, r2
 8007254:	0018      	movs	r0, r3
 8007256:	f7ff fb81 	bl	800695c <follow_path>
 800725a:	0003      	movs	r3, r0
 800725c:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800725e:	0029      	movs	r1, r5
 8007260:	197b      	adds	r3, r7, r5
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d11b      	bne.n	80072a0 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007268:	19bb      	adds	r3, r7, r6
 800726a:	222f      	movs	r2, #47	@ 0x2f
 800726c:	5c9b      	ldrb	r3, [r3, r2]
 800726e:	b25b      	sxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	da03      	bge.n	800727c <f_open+0x80>
				res = FR_INVALID_NAME;
 8007274:	187b      	adds	r3, r7, r1
 8007276:	2206      	movs	r2, #6
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	e011      	b.n	80072a0 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800727c:	1dfb      	adds	r3, r7, #7
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2201      	movs	r2, #1
 8007282:	429a      	cmp	r2, r3
 8007284:	419b      	sbcs	r3, r3
 8007286:	425b      	negs	r3, r3
 8007288:	b2db      	uxtb	r3, r3
 800728a:	001a      	movs	r2, r3
 800728c:	235f      	movs	r3, #95	@ 0x5f
 800728e:	18fc      	adds	r4, r7, r3
 8007290:	2314      	movs	r3, #20
 8007292:	18fb      	adds	r3, r7, r3
 8007294:	0011      	movs	r1, r2
 8007296:	0018      	movs	r0, r3
 8007298:	f7fe fab6 	bl	8005808 <chk_lock>
 800729c:	0003      	movs	r3, r0
 800729e:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80072a0:	1dfb      	adds	r3, r7, #7
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	221c      	movs	r2, #28
 80072a6:	4013      	ands	r3, r2
 80072a8:	d100      	bne.n	80072ac <f_open+0xb0>
 80072aa:	e096      	b.n	80073da <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 80072ac:	225f      	movs	r2, #95	@ 0x5f
 80072ae:	18bb      	adds	r3, r7, r2
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d01a      	beq.n	80072ec <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80072b6:	18bb      	adds	r3, r7, r2
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d10f      	bne.n	80072de <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80072be:	f7fe fafb 	bl	80058b8 <enq_lock>
 80072c2:	1e03      	subs	r3, r0, #0
 80072c4:	d007      	beq.n	80072d6 <f_open+0xda>
 80072c6:	2314      	movs	r3, #20
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	0018      	movs	r0, r3
 80072cc:	f7ff fa5b 	bl	8006786 <dir_register>
 80072d0:	0003      	movs	r3, r0
 80072d2:	001a      	movs	r2, r3
 80072d4:	e000      	b.n	80072d8 <f_open+0xdc>
 80072d6:	2212      	movs	r2, #18
 80072d8:	235f      	movs	r3, #95	@ 0x5f
 80072da:	18fb      	adds	r3, r7, r3
 80072dc:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80072de:	1dfb      	adds	r3, r7, #7
 80072e0:	1dfa      	adds	r2, r7, #7
 80072e2:	7812      	ldrb	r2, [r2, #0]
 80072e4:	2108      	movs	r1, #8
 80072e6:	430a      	orrs	r2, r1
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	e014      	b.n	8007316 <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80072ec:	2314      	movs	r3, #20
 80072ee:	18fb      	adds	r3, r7, r3
 80072f0:	799b      	ldrb	r3, [r3, #6]
 80072f2:	001a      	movs	r2, r3
 80072f4:	2311      	movs	r3, #17
 80072f6:	4013      	ands	r3, r2
 80072f8:	d004      	beq.n	8007304 <f_open+0x108>
					res = FR_DENIED;
 80072fa:	235f      	movs	r3, #95	@ 0x5f
 80072fc:	18fb      	adds	r3, r7, r3
 80072fe:	2207      	movs	r2, #7
 8007300:	701a      	strb	r2, [r3, #0]
 8007302:	e008      	b.n	8007316 <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007304:	1dfb      	adds	r3, r7, #7
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2204      	movs	r2, #4
 800730a:	4013      	ands	r3, r2
 800730c:	d003      	beq.n	8007316 <f_open+0x11a>
 800730e:	235f      	movs	r3, #95	@ 0x5f
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	2208      	movs	r2, #8
 8007314:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007316:	245f      	movs	r4, #95	@ 0x5f
 8007318:	193b      	adds	r3, r7, r4
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d000      	beq.n	8007322 <f_open+0x126>
 8007320:	e07b      	b.n	800741a <f_open+0x21e>
 8007322:	1dfb      	adds	r3, r7, #7
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2208      	movs	r2, #8
 8007328:	4013      	ands	r3, r2
 800732a:	d100      	bne.n	800732e <f_open+0x132>
 800732c:	e075      	b.n	800741a <f_open+0x21e>
				dw = GET_FATTIME();
 800732e:	f7fd fa9b 	bl	8004868 <get_fattime>
 8007332:	0003      	movs	r3, r0
 8007334:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007336:	2514      	movs	r5, #20
 8007338:	197b      	adds	r3, r7, r5
 800733a:	6a1b      	ldr	r3, [r3, #32]
 800733c:	330e      	adds	r3, #14
 800733e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007340:	0011      	movs	r1, r2
 8007342:	0018      	movs	r0, r3
 8007344:	f7fe f98c 	bl	8005660 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007348:	197b      	adds	r3, r7, r5
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	3316      	adds	r3, #22
 800734e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007350:	0011      	movs	r1, r2
 8007352:	0018      	movs	r0, r3
 8007354:	f7fe f984 	bl	8005660 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007358:	197b      	adds	r3, r7, r5
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	330b      	adds	r3, #11
 800735e:	2220      	movs	r2, #32
 8007360:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	197b      	adds	r3, r7, r5
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	0019      	movs	r1, r3
 800736a:	0010      	movs	r0, r2
 800736c:	f7ff f964 	bl	8006638 <ld_clust>
 8007370:	0003      	movs	r3, r0
 8007372:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007374:	6938      	ldr	r0, [r7, #16]
 8007376:	197b      	adds	r3, r7, r5
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	2200      	movs	r2, #0
 800737c:	0019      	movs	r1, r3
 800737e:	f7ff f97a 	bl	8006676 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007382:	197b      	adds	r3, r7, r5
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	331c      	adds	r3, #28
 8007388:	2100      	movs	r1, #0
 800738a:	0018      	movs	r0, r3
 800738c:	f7fe f968 	bl	8005660 <st_dword>
					fs->wflag = 1;
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2201      	movs	r2, #1
 8007394:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007398:	2b00      	cmp	r3, #0
 800739a:	d03e      	beq.n	800741a <f_open+0x21e>
						dw = fs->winsect;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073a0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80073a2:	0026      	movs	r6, r4
 80073a4:	193c      	adds	r4, r7, r4
 80073a6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80073a8:	197b      	adds	r3, r7, r5
 80073aa:	2200      	movs	r2, #0
 80073ac:	0018      	movs	r0, r3
 80073ae:	f7fe fe56 	bl	800605e <remove_chain>
 80073b2:	0003      	movs	r3, r0
 80073b4:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 80073b6:	19bb      	adds	r3, r7, r6
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d12d      	bne.n	800741a <f_open+0x21e>
							res = move_window(fs, dw);
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	19bc      	adds	r4, r7, r6
 80073c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80073c4:	0011      	movs	r1, r2
 80073c6:	0018      	movs	r0, r3
 80073c8:	f7fe fbd0 	bl	8005b6c <move_window>
 80073cc:	0003      	movs	r3, r0
 80073ce:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073d4:	3a01      	subs	r2, #1
 80073d6:	611a      	str	r2, [r3, #16]
 80073d8:	e01f      	b.n	800741a <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80073da:	215f      	movs	r1, #95	@ 0x5f
 80073dc:	187b      	adds	r3, r7, r1
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d11a      	bne.n	800741a <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80073e4:	2314      	movs	r3, #20
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	799b      	ldrb	r3, [r3, #6]
 80073ea:	001a      	movs	r2, r3
 80073ec:	2310      	movs	r3, #16
 80073ee:	4013      	ands	r3, r2
 80073f0:	d003      	beq.n	80073fa <f_open+0x1fe>
					res = FR_NO_FILE;
 80073f2:	187b      	adds	r3, r7, r1
 80073f4:	2204      	movs	r2, #4
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	e00f      	b.n	800741a <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80073fa:	1dfb      	adds	r3, r7, #7
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2202      	movs	r2, #2
 8007400:	4013      	ands	r3, r2
 8007402:	d00a      	beq.n	800741a <f_open+0x21e>
 8007404:	2314      	movs	r3, #20
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	799b      	ldrb	r3, [r3, #6]
 800740a:	001a      	movs	r2, r3
 800740c:	2301      	movs	r3, #1
 800740e:	4013      	ands	r3, r2
 8007410:	d003      	beq.n	800741a <f_open+0x21e>
						res = FR_DENIED;
 8007412:	235f      	movs	r3, #95	@ 0x5f
 8007414:	18fb      	adds	r3, r7, r3
 8007416:	2207      	movs	r2, #7
 8007418:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800741a:	235f      	movs	r3, #95	@ 0x5f
 800741c:	18fb      	adds	r3, r7, r3
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d12b      	bne.n	800747c <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007424:	1dfb      	adds	r3, r7, #7
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2208      	movs	r2, #8
 800742a:	4013      	ands	r3, r2
 800742c:	d005      	beq.n	800743a <f_open+0x23e>
				mode |= FA_MODIFIED;
 800742e:	1dfb      	adds	r3, r7, #7
 8007430:	1dfa      	adds	r2, r7, #7
 8007432:	7812      	ldrb	r2, [r2, #0]
 8007434:	2140      	movs	r1, #64	@ 0x40
 8007436:	430a      	orrs	r2, r1
 8007438:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007442:	2114      	movs	r1, #20
 8007444:	187b      	adds	r3, r7, r1
 8007446:	6a1a      	ldr	r2, [r3, #32]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800744c:	1dfb      	adds	r3, r7, #7
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2201      	movs	r2, #1
 8007452:	429a      	cmp	r2, r3
 8007454:	419b      	sbcs	r3, r3
 8007456:	425b      	negs	r3, r3
 8007458:	b2db      	uxtb	r3, r3
 800745a:	001a      	movs	r2, r3
 800745c:	187b      	adds	r3, r7, r1
 800745e:	0011      	movs	r1, r2
 8007460:	0018      	movs	r0, r3
 8007462:	f7fe fa47 	bl	80058f4 <inc_lock>
 8007466:	0002      	movs	r2, r0
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d103      	bne.n	800747c <f_open+0x280>
 8007474:	235f      	movs	r3, #95	@ 0x5f
 8007476:	18fb      	adds	r3, r7, r3
 8007478:	2202      	movs	r2, #2
 800747a:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 800747c:	235f      	movs	r3, #95	@ 0x5f
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d000      	beq.n	8007488 <f_open+0x28c>
 8007486:	e09e      	b.n	80075c6 <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	2414      	movs	r4, #20
 800748c:	193b      	adds	r3, r7, r4
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	0019      	movs	r1, r3
 8007492:	0010      	movs	r0, r2
 8007494:	f7ff f8d0 	bl	8006638 <ld_clust>
 8007498:	0002      	movs	r2, r0
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800749e:	193b      	adds	r3, r7, r4
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	331c      	adds	r3, #28
 80074a4:	0018      	movs	r0, r3
 80074a6:	f7fe f89c 	bl	80055e2 <ld_dword>
 80074aa:	0002      	movs	r2, r0
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	88da      	ldrh	r2, [r3, #6]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1dfa      	adds	r2, r7, #7
 80074c8:	7812      	ldrb	r2, [r2, #0]
 80074ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3330      	adds	r3, #48	@ 0x30
 80074e2:	2280      	movs	r2, #128	@ 0x80
 80074e4:	0092      	lsls	r2, r2, #2
 80074e6:	2100      	movs	r1, #0
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7fe f902 	bl	80056f2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80074ee:	1dfb      	adds	r3, r7, #7
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2220      	movs	r2, #32
 80074f4:	4013      	ands	r3, r2
 80074f6:	d066      	beq.n	80075c6 <f_open+0x3ca>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d062      	beq.n	80075c6 <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	895b      	ldrh	r3, [r3, #10]
 800750c:	025b      	lsls	r3, r3, #9
 800750e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	657b      	str	r3, [r7, #84]	@ 0x54
 800751c:	e019      	b.n	8007552 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007522:	0011      	movs	r1, r2
 8007524:	0018      	movs	r0, r3
 8007526:	f7fe fbef 	bl	8005d08 <get_fat>
 800752a:	0003      	movs	r3, r0
 800752c:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800752e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007530:	2b01      	cmp	r3, #1
 8007532:	d803      	bhi.n	800753c <f_open+0x340>
 8007534:	235f      	movs	r3, #95	@ 0x5f
 8007536:	18fb      	adds	r3, r7, r3
 8007538:	2202      	movs	r2, #2
 800753a:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800753c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800753e:	3301      	adds	r3, #1
 8007540:	d103      	bne.n	800754a <f_open+0x34e>
 8007542:	235f      	movs	r3, #95	@ 0x5f
 8007544:	18fb      	adds	r3, r7, r3
 8007546:	2201      	movs	r2, #1
 8007548:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800754a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800754c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	657b      	str	r3, [r7, #84]	@ 0x54
 8007552:	235f      	movs	r3, #95	@ 0x5f
 8007554:	18fb      	adds	r3, r7, r3
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d103      	bne.n	8007564 <f_open+0x368>
 800755c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800755e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007560:	429a      	cmp	r2, r3
 8007562:	d8dc      	bhi.n	800751e <f_open+0x322>
				}
				fp->clust = clst;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007568:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800756a:	245f      	movs	r4, #95	@ 0x5f
 800756c:	193b      	adds	r3, r7, r4
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d128      	bne.n	80075c6 <f_open+0x3ca>
 8007574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007576:	05db      	lsls	r3, r3, #23
 8007578:	0ddb      	lsrs	r3, r3, #23
 800757a:	d024      	beq.n	80075c6 <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007580:	0011      	movs	r1, r2
 8007582:	0018      	movs	r0, r3
 8007584:	f7fe fba4 	bl	8005cd0 <clust2sect>
 8007588:	0003      	movs	r3, r0
 800758a:	647b      	str	r3, [r7, #68]	@ 0x44
 800758c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <f_open+0x39e>
						res = FR_INT_ERR;
 8007592:	193b      	adds	r3, r7, r4
 8007594:	2202      	movs	r2, #2
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	e015      	b.n	80075c6 <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800759a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759c:	0a5a      	lsrs	r2, r3, #9
 800759e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075a0:	18d2      	adds	r2, r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	7858      	ldrb	r0, [r3, #1]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3330      	adds	r3, #48	@ 0x30
 80075ae:	0019      	movs	r1, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a1a      	ldr	r2, [r3, #32]
 80075b4:	2301      	movs	r3, #1
 80075b6:	f7fd ff81 	bl	80054bc <disk_read>
 80075ba:	1e03      	subs	r3, r0, #0
 80075bc:	d003      	beq.n	80075c6 <f_open+0x3ca>
 80075be:	235f      	movs	r3, #95	@ 0x5f
 80075c0:	18fb      	adds	r3, r7, r3
 80075c2:	2201      	movs	r2, #1
 80075c4:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80075c6:	235f      	movs	r3, #95	@ 0x5f
 80075c8:	18fb      	adds	r3, r7, r3
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <f_open+0x3da>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	245f      	movs	r4, #95	@ 0x5f
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	0019      	movs	r1, r3
 80075e0:	0010      	movs	r0, r2
 80075e2:	f7fe f8f2 	bl	80057ca <unlock_fs>
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	781b      	ldrb	r3, [r3, #0]
}
 80075ea:	0018      	movs	r0, r3
 80075ec:	46bd      	mov	sp, r7
 80075ee:	b019      	add	sp, #100	@ 0x64
 80075f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075f2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80075f2:	b5b0      	push	{r4, r5, r7, lr}
 80075f4:	b08e      	sub	sp, #56	@ 0x38
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
 80075fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2537      	movs	r5, #55	@ 0x37
 800760e:	197c      	adds	r4, r7, r5
 8007610:	2214      	movs	r2, #20
 8007612:	18ba      	adds	r2, r7, r2
 8007614:	0011      	movs	r1, r2
 8007616:	0018      	movs	r0, r3
 8007618:	f7ff fd38 	bl	800708c <validate>
 800761c:	0003      	movs	r3, r0
 800761e:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007620:	197b      	adds	r3, r7, r5
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d107      	bne.n	8007638 <f_read+0x46>
 8007628:	197b      	adds	r3, r7, r5
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	7d52      	ldrb	r2, [r2, #21]
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	197b      	adds	r3, r7, r5
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <f_read+0x5c>
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	2437      	movs	r4, #55	@ 0x37
 800763c:	193b      	adds	r3, r7, r4
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	0019      	movs	r1, r3
 8007642:	0010      	movs	r0, r2
 8007644:	f7fe f8c1 	bl	80057ca <unlock_fs>
 8007648:	193b      	adds	r3, r7, r4
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	e13d      	b.n	80078ca <f_read+0x2d8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	7d1b      	ldrb	r3, [r3, #20]
 8007652:	001a      	movs	r2, r3
 8007654:	2301      	movs	r3, #1
 8007656:	4013      	ands	r3, r2
 8007658:	d106      	bne.n	8007668 <f_read+0x76>
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2107      	movs	r1, #7
 800765e:	0018      	movs	r0, r3
 8007660:	f7fe f8b3 	bl	80057ca <unlock_fs>
 8007664:	2307      	movs	r3, #7
 8007666:	e130      	b.n	80078ca <f_read+0x2d8>
	remain = fp->obj.objsize - fp->fptr;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	6a3b      	ldr	r3, [r7, #32]
 8007678:	429a      	cmp	r2, r3
 800767a:	d800      	bhi.n	800767e <f_read+0x8c>
 800767c:	e11b      	b.n	80078b6 <f_read+0x2c4>
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007682:	e118      	b.n	80078b6 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	05db      	lsls	r3, r3, #23
 800768a:	0ddb      	lsrs	r3, r3, #23
 800768c:	d000      	beq.n	8007690 <f_read+0x9e>
 800768e:	e0e3      	b.n	8007858 <f_read+0x266>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	0a5b      	lsrs	r3, r3, #9
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	8952      	ldrh	r2, [r2, #10]
 800769a:	3a01      	subs	r2, #1
 800769c:	4013      	ands	r3, r2
 800769e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d13b      	bne.n	800771e <f_read+0x12c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d103      	bne.n	80076b6 <f_read+0xc4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80076b4:	e016      	b.n	80076e4 <f_read+0xf2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <f_read+0xe0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	0011      	movs	r1, r2
 80076c6:	0018      	movs	r0, r3
 80076c8:	f7fe fde2 	bl	8006290 <clmt_clust>
 80076cc:	0003      	movs	r3, r0
 80076ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80076d0:	e008      	b.n	80076e4 <f_read+0xf2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	69db      	ldr	r3, [r3, #28]
 80076d8:	0019      	movs	r1, r3
 80076da:	0010      	movs	r0, r2
 80076dc:	f7fe fb14 	bl	8005d08 <get_fat>
 80076e0:	0003      	movs	r3, r0
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d809      	bhi.n	80076fe <f_read+0x10c>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2202      	movs	r2, #2
 80076ee:	755a      	strb	r2, [r3, #21]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2102      	movs	r1, #2
 80076f4:	0018      	movs	r0, r3
 80076f6:	f7fe f868 	bl	80057ca <unlock_fs>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e0e5      	b.n	80078ca <f_read+0x2d8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	3301      	adds	r3, #1
 8007702:	d109      	bne.n	8007718 <f_read+0x126>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	755a      	strb	r2, [r3, #21]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2101      	movs	r1, #1
 800770e:	0018      	movs	r0, r3
 8007710:	f7fe f85b 	bl	80057ca <unlock_fs>
 8007714:	2301      	movs	r3, #1
 8007716:	e0d8      	b.n	80078ca <f_read+0x2d8>
				fp->clust = clst;				/* Update current cluster */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800771c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	69db      	ldr	r3, [r3, #28]
 8007724:	0019      	movs	r1, r3
 8007726:	0010      	movs	r0, r2
 8007728:	f7fe fad2 	bl	8005cd0 <clust2sect>
 800772c:	0003      	movs	r3, r0
 800772e:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d109      	bne.n	800774a <f_read+0x158>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2202      	movs	r2, #2
 800773a:	755a      	strb	r2, [r3, #21]
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2102      	movs	r1, #2
 8007740:	0018      	movs	r0, r3
 8007742:	f7fe f842 	bl	80057ca <unlock_fs>
 8007746:	2302      	movs	r3, #2
 8007748:	e0bf      	b.n	80078ca <f_read+0x2d8>
			sect += csect;
 800774a:	69ba      	ldr	r2, [r7, #24]
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	18d3      	adds	r3, r2, r3
 8007750:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	0a5b      	lsrs	r3, r3, #9
 8007756:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d03d      	beq.n	80077da <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007762:	18d3      	adds	r3, r2, r3
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	8952      	ldrh	r2, [r2, #10]
 8007768:	4293      	cmp	r3, r2
 800776a:	d905      	bls.n	8007778 <f_read+0x186>
					cc = fs->csize - csect;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	895b      	ldrh	r3, [r3, #10]
 8007770:	001a      	movs	r2, r3
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	7858      	ldrb	r0, [r3, #1]
 800777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007782:	f7fd fe9b 	bl	80054bc <disk_read>
 8007786:	1e03      	subs	r3, r0, #0
 8007788:	d009      	beq.n	800779e <f_read+0x1ac>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2201      	movs	r2, #1
 800778e:	755a      	strb	r2, [r3, #21]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2101      	movs	r1, #1
 8007794:	0018      	movs	r0, r3
 8007796:	f7fe f818 	bl	80057ca <unlock_fs>
 800779a:	2301      	movs	r3, #1
 800779c:	e095      	b.n	80078ca <f_read+0x2d8>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	7d1b      	ldrb	r3, [r3, #20]
 80077a2:	b25b      	sxtb	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	da14      	bge.n	80077d2 <f_read+0x1e0>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6a1a      	ldr	r2, [r3, #32]
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d90d      	bls.n	80077d2 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	025b      	lsls	r3, r3, #9
 80077c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c2:	18d0      	adds	r0, r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3330      	adds	r3, #48	@ 0x30
 80077c8:	2280      	movs	r2, #128	@ 0x80
 80077ca:	0092      	lsls	r2, r2, #2
 80077cc:	0019      	movs	r1, r3
 80077ce:	f7fd ff71 	bl	80056b4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80077d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d4:	025b      	lsls	r3, r3, #9
 80077d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80077d8:	e059      	b.n	800788e <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a1b      	ldr	r3, [r3, #32]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d036      	beq.n	8007852 <f_read+0x260>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	7d1b      	ldrb	r3, [r3, #20]
 80077e8:	b25b      	sxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	da1c      	bge.n	8007828 <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	7858      	ldrb	r0, [r3, #1]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3330      	adds	r3, #48	@ 0x30
 80077f6:	0019      	movs	r1, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6a1a      	ldr	r2, [r3, #32]
 80077fc:	2301      	movs	r3, #1
 80077fe:	f7fd fe85 	bl	800550c <disk_write>
 8007802:	1e03      	subs	r3, r0, #0
 8007804:	d009      	beq.n	800781a <f_read+0x228>
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	755a      	strb	r2, [r3, #21]
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2101      	movs	r1, #1
 8007810:	0018      	movs	r0, r3
 8007812:	f7fd ffda 	bl	80057ca <unlock_fs>
 8007816:	2301      	movs	r3, #1
 8007818:	e057      	b.n	80078ca <f_read+0x2d8>
					fp->flag &= (BYTE)~FA_DIRTY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	7d1b      	ldrb	r3, [r3, #20]
 800781e:	227f      	movs	r2, #127	@ 0x7f
 8007820:	4013      	ands	r3, r2
 8007822:	b2da      	uxtb	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	7858      	ldrb	r0, [r3, #1]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3330      	adds	r3, #48	@ 0x30
 8007830:	0019      	movs	r1, r3
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	2301      	movs	r3, #1
 8007836:	f7fd fe41 	bl	80054bc <disk_read>
 800783a:	1e03      	subs	r3, r0, #0
 800783c:	d009      	beq.n	8007852 <f_read+0x260>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	755a      	strb	r2, [r3, #21]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	2101      	movs	r1, #1
 8007848:	0018      	movs	r0, r3
 800784a:	f7fd ffbe 	bl	80057ca <unlock_fs>
 800784e:	2301      	movs	r3, #1
 8007850:	e03b      	b.n	80078ca <f_read+0x2d8>
			}
#endif
			fp->sect = sect;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	05db      	lsls	r3, r3, #23
 800785e:	0ddb      	lsrs	r3, r3, #23
 8007860:	2280      	movs	r2, #128	@ 0x80
 8007862:	0092      	lsls	r2, r2, #2
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8007868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	429a      	cmp	r2, r3
 800786e:	d901      	bls.n	8007874 <f_read+0x282>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3330      	adds	r3, #48	@ 0x30
 8007878:	001a      	movs	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	05db      	lsls	r3, r3, #23
 8007880:	0ddb      	lsrs	r3, r3, #23
 8007882:	18d1      	adds	r1, r2, r3
 8007884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007888:	0018      	movs	r0, r3
 800788a:	f7fd ff13 	bl	80056b4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800788e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007892:	18d3      	adds	r3, r2, r3
 8007894:	627b      	str	r3, [r7, #36]	@ 0x24
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	699a      	ldr	r2, [r3, #24]
 800789a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789c:	18d2      	adds	r2, r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	619a      	str	r2, [r3, #24]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a8:	18d2      	adds	r2, r2, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d000      	beq.n	80078be <f_read+0x2cc>
 80078bc:	e6e2      	b.n	8007684 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2100      	movs	r1, #0
 80078c2:	0018      	movs	r0, r3
 80078c4:	f7fd ff81 	bl	80057ca <unlock_fs>
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	0018      	movs	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b00e      	add	sp, #56	@ 0x38
 80078d0:	bdb0      	pop	{r4, r5, r7, pc}

080078d2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80078d2:	b5b0      	push	{r4, r5, r7, lr}
 80078d4:	b08c      	sub	sp, #48	@ 0x30
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	252f      	movs	r5, #47	@ 0x2f
 80078ee:	197c      	adds	r4, r7, r5
 80078f0:	2210      	movs	r2, #16
 80078f2:	18ba      	adds	r2, r7, r2
 80078f4:	0011      	movs	r1, r2
 80078f6:	0018      	movs	r0, r3
 80078f8:	f7ff fbc8 	bl	800708c <validate>
 80078fc:	0003      	movs	r3, r0
 80078fe:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007900:	197b      	adds	r3, r7, r5
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d107      	bne.n	8007918 <f_write+0x46>
 8007908:	197b      	adds	r3, r7, r5
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	7d52      	ldrb	r2, [r2, #21]
 800790e:	701a      	strb	r2, [r3, #0]
 8007910:	197b      	adds	r3, r7, r5
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00a      	beq.n	800792e <f_write+0x5c>
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	242f      	movs	r4, #47	@ 0x2f
 800791c:	193b      	adds	r3, r7, r4
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	0019      	movs	r1, r3
 8007922:	0010      	movs	r0, r2
 8007924:	f7fd ff51 	bl	80057ca <unlock_fs>
 8007928:	193b      	adds	r3, r7, r4
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	e176      	b.n	8007c1c <f_write+0x34a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	7d1b      	ldrb	r3, [r3, #20]
 8007932:	001a      	movs	r2, r3
 8007934:	2302      	movs	r3, #2
 8007936:	4013      	ands	r3, r2
 8007938:	d106      	bne.n	8007948 <f_write+0x76>
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2107      	movs	r1, #7
 800793e:	0018      	movs	r0, r3
 8007940:	f7fd ff43 	bl	80057ca <unlock_fs>
 8007944:	2307      	movs	r3, #7
 8007946:	e169      	b.n	8007c1c <f_write+0x34a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	699a      	ldr	r2, [r3, #24]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	18d2      	adds	r2, r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	429a      	cmp	r2, r3
 8007956:	d300      	bcc.n	800795a <f_write+0x88>
 8007958:	e14d      	b.n	8007bf6 <f_write+0x324>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	43db      	mvns	r3, r3
 8007960:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007962:	e148      	b.n	8007bf6 <f_write+0x324>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	05db      	lsls	r3, r3, #23
 800796a:	0ddb      	lsrs	r3, r3, #23
 800796c:	d000      	beq.n	8007970 <f_write+0x9e>
 800796e:	e101      	b.n	8007b74 <f_write+0x2a2>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	0a5b      	lsrs	r3, r3, #9
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	8952      	ldrh	r2, [r2, #10]
 800797a:	3a01      	subs	r2, #1
 800797c:	4013      	ands	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d150      	bne.n	8007a28 <f_write+0x156>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10d      	bne.n	80079aa <f_write+0xd8>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007996:	2b00      	cmp	r3, #0
 8007998:	d11e      	bne.n	80079d8 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2100      	movs	r1, #0
 800799e:	0018      	movs	r0, r3
 80079a0:	f7fe fbd0 	bl	8006144 <create_chain>
 80079a4:	0003      	movs	r3, r0
 80079a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079a8:	e016      	b.n	80079d8 <f_write+0x106>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <f_write+0xf4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	0011      	movs	r1, r2
 80079ba:	0018      	movs	r0, r3
 80079bc:	f7fe fc68 	bl	8006290 <clmt_clust>
 80079c0:	0003      	movs	r3, r0
 80079c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079c4:	e008      	b.n	80079d8 <f_write+0x106>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	0019      	movs	r1, r3
 80079ce:	0010      	movs	r0, r2
 80079d0:	f7fe fbb8 	bl	8006144 <create_chain>
 80079d4:	0003      	movs	r3, r0
 80079d6:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d100      	bne.n	80079e0 <f_write+0x10e>
 80079de:	e10f      	b.n	8007c00 <f_write+0x32e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80079e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d109      	bne.n	80079fa <f_write+0x128>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2202      	movs	r2, #2
 80079ea:	755a      	strb	r2, [r3, #21]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2102      	movs	r1, #2
 80079f0:	0018      	movs	r0, r3
 80079f2:	f7fd feea 	bl	80057ca <unlock_fs>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e110      	b.n	8007c1c <f_write+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fc:	3301      	adds	r3, #1
 80079fe:	d109      	bne.n	8007a14 <f_write+0x142>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2201      	movs	r2, #1
 8007a04:	755a      	strb	r2, [r3, #21]
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2101      	movs	r1, #1
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7fd fedd 	bl	80057ca <unlock_fs>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e103      	b.n	8007c1c <f_write+0x34a>
				fp->clust = clst;			/* Update current cluster */
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a18:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d102      	bne.n	8007a28 <f_write+0x156>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a26:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	7d1b      	ldrb	r3, [r3, #20]
 8007a2c:	b25b      	sxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da1c      	bge.n	8007a6c <f_write+0x19a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	7858      	ldrb	r0, [r3, #1]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3330      	adds	r3, #48	@ 0x30
 8007a3a:	0019      	movs	r1, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a1a      	ldr	r2, [r3, #32]
 8007a40:	2301      	movs	r3, #1
 8007a42:	f7fd fd63 	bl	800550c <disk_write>
 8007a46:	1e03      	subs	r3, r0, #0
 8007a48:	d009      	beq.n	8007a5e <f_write+0x18c>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	755a      	strb	r2, [r3, #21]
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2101      	movs	r1, #1
 8007a54:	0018      	movs	r0, r3
 8007a56:	f7fd feb8 	bl	80057ca <unlock_fs>
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e0de      	b.n	8007c1c <f_write+0x34a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	7d1b      	ldrb	r3, [r3, #20]
 8007a62:	227f      	movs	r2, #127	@ 0x7f
 8007a64:	4013      	ands	r3, r2
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	0019      	movs	r1, r3
 8007a74:	0010      	movs	r0, r2
 8007a76:	f7fe f92b 	bl	8005cd0 <clust2sect>
 8007a7a:	0003      	movs	r3, r0
 8007a7c:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d109      	bne.n	8007a98 <f_write+0x1c6>
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2202      	movs	r2, #2
 8007a88:	755a      	strb	r2, [r3, #21]
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	0018      	movs	r0, r3
 8007a90:	f7fd fe9b 	bl	80057ca <unlock_fs>
 8007a94:	2302      	movs	r3, #2
 8007a96:	e0c1      	b.n	8007c1c <f_write+0x34a>
			sect += csect;
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	18d3      	adds	r3, r2, r3
 8007a9e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	0a5b      	lsrs	r3, r3, #9
 8007aa4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d040      	beq.n	8007b2e <f_write+0x25c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	18d3      	adds	r3, r2, r3
 8007ab2:	693a      	ldr	r2, [r7, #16]
 8007ab4:	8952      	ldrh	r2, [r2, #10]
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d905      	bls.n	8007ac6 <f_write+0x1f4>
					cc = fs->csize - csect;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	895b      	ldrh	r3, [r3, #10]
 8007abe:	001a      	movs	r2, r3
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	7858      	ldrb	r0, [r3, #1]
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	69f9      	ldr	r1, [r7, #28]
 8007ad0:	f7fd fd1c 	bl	800550c <disk_write>
 8007ad4:	1e03      	subs	r3, r0, #0
 8007ad6:	d009      	beq.n	8007aec <f_write+0x21a>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	755a      	strb	r2, [r3, #21]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2101      	movs	r1, #1
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f7fd fe71 	bl	80057ca <unlock_fs>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e097      	b.n	8007c1c <f_write+0x34a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a1a      	ldr	r2, [r3, #32]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	6a3a      	ldr	r2, [r7, #32]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d915      	bls.n	8007b26 <f_write+0x254>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3330      	adds	r3, #48	@ 0x30
 8007afe:	0018      	movs	r0, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6a1a      	ldr	r2, [r3, #32]
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	025b      	lsls	r3, r3, #9
 8007b0a:	69fa      	ldr	r2, [r7, #28]
 8007b0c:	18d3      	adds	r3, r2, r3
 8007b0e:	2280      	movs	r2, #128	@ 0x80
 8007b10:	0092      	lsls	r2, r2, #2
 8007b12:	0019      	movs	r1, r3
 8007b14:	f7fd fdce 	bl	80056b4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	7d1b      	ldrb	r3, [r3, #20]
 8007b1c:	227f      	movs	r2, #127	@ 0x7f
 8007b1e:	4013      	ands	r3, r2
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	025b      	lsls	r3, r3, #9
 8007b2a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8007b2c:	e045      	b.n	8007bba <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d01a      	beq.n	8007b6e <f_write+0x29c>
				fp->fptr < fp->obj.objsize &&
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	699a      	ldr	r2, [r3, #24]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d214      	bcs.n	8007b6e <f_write+0x29c>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	7858      	ldrb	r0, [r3, #1]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3330      	adds	r3, #48	@ 0x30
 8007b4c:	0019      	movs	r1, r3
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	2301      	movs	r3, #1
 8007b52:	f7fd fcb3 	bl	80054bc <disk_read>
 8007b56:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8007b58:	d009      	beq.n	8007b6e <f_write+0x29c>
					ABORT(fs, FR_DISK_ERR);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	755a      	strb	r2, [r3, #21]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	2101      	movs	r1, #1
 8007b64:	0018      	movs	r0, r3
 8007b66:	f7fd fe30 	bl	80057ca <unlock_fs>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e056      	b.n	8007c1c <f_write+0x34a>
			}
#endif
			fp->sect = sect;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	05db      	lsls	r3, r3, #23
 8007b7a:	0ddb      	lsrs	r3, r3, #23
 8007b7c:	2280      	movs	r2, #128	@ 0x80
 8007b7e:	0092      	lsls	r2, r2, #2
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d901      	bls.n	8007b90 <f_write+0x2be>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3330      	adds	r3, #48	@ 0x30
 8007b94:	001a      	movs	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	05db      	lsls	r3, r3, #23
 8007b9c:	0ddb      	lsrs	r3, r3, #23
 8007b9e:	18d3      	adds	r3, r2, r3
 8007ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba2:	69f9      	ldr	r1, [r7, #28]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f7fd fd85 	bl	80056b4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	7d1b      	ldrb	r3, [r3, #20]
 8007bae:	2280      	movs	r2, #128	@ 0x80
 8007bb0:	4252      	negs	r2, r2
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007bba:	69fa      	ldr	r2, [r7, #28]
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbe:	18d3      	adds	r3, r2, r3
 8007bc0:	61fb      	str	r3, [r7, #28]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	18d2      	adds	r2, r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	619a      	str	r2, [r3, #24]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68d9      	ldr	r1, [r3, #12]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	000b      	movs	r3, r1
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d200      	bcs.n	8007bde <f_write+0x30c>
 8007bdc:	0013      	movs	r3, r2
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	60d3      	str	r3, [r2, #12]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	18d2      	adds	r2, r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	601a      	str	r2, [r3, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d000      	beq.n	8007bfe <f_write+0x32c>
 8007bfc:	e6b2      	b.n	8007964 <f_write+0x92>
 8007bfe:	e000      	b.n	8007c02 <f_write+0x330>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c00:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	7d1b      	ldrb	r3, [r3, #20]
 8007c06:	2240      	movs	r2, #64	@ 0x40
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2100      	movs	r1, #0
 8007c14:	0018      	movs	r0, r3
 8007c16:	f7fd fdd8 	bl	80057ca <unlock_fs>
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	0018      	movs	r0, r3
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	b00c      	add	sp, #48	@ 0x30
 8007c22:	bdb0      	pop	{r4, r5, r7, pc}

08007c24 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007c24:	b5b0      	push	{r4, r5, r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2517      	movs	r5, #23
 8007c30:	197c      	adds	r4, r7, r5
 8007c32:	2208      	movs	r2, #8
 8007c34:	18ba      	adds	r2, r7, r2
 8007c36:	0011      	movs	r1, r2
 8007c38:	0018      	movs	r0, r3
 8007c3a:	f7ff fa27 	bl	800708c <validate>
 8007c3e:	0003      	movs	r3, r0
 8007c40:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007c42:	197b      	adds	r3, r7, r5
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d173      	bne.n	8007d32 <f_sync+0x10e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	7d1b      	ldrb	r3, [r3, #20]
 8007c4e:	001a      	movs	r2, r3
 8007c50:	2340      	movs	r3, #64	@ 0x40
 8007c52:	4013      	ands	r3, r2
 8007c54:	d06d      	beq.n	8007d32 <f_sync+0x10e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	7d1b      	ldrb	r3, [r3, #20]
 8007c5a:	b25b      	sxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da19      	bge.n	8007c94 <f_sync+0x70>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	7858      	ldrb	r0, [r3, #1]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3330      	adds	r3, #48	@ 0x30
 8007c68:	0019      	movs	r1, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1a      	ldr	r2, [r3, #32]
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f7fd fc4c 	bl	800550c <disk_write>
 8007c74:	1e03      	subs	r3, r0, #0
 8007c76:	d006      	beq.n	8007c86 <f_sync+0x62>
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2101      	movs	r1, #1
 8007c7c:	0018      	movs	r0, r3
 8007c7e:	f7fd fda4 	bl	80057ca <unlock_fs>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e05f      	b.n	8007d46 <f_sync+0x122>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7d1b      	ldrb	r3, [r3, #20]
 8007c8a:	227f      	movs	r2, #127	@ 0x7f
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c94:	f7fc fde8 	bl	8004868 <get_fattime>
 8007c98:	0003      	movs	r3, r0
 8007c9a:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca2:	2517      	movs	r5, #23
 8007ca4:	197c      	adds	r4, r7, r5
 8007ca6:	0019      	movs	r1, r3
 8007ca8:	0010      	movs	r0, r2
 8007caa:	f7fd ff5f 	bl	8005b6c <move_window>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8007cb2:	002c      	movs	r4, r5
 8007cb4:	193b      	adds	r3, r7, r4
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d13a      	bne.n	8007d32 <f_sync+0x10e>
					dir = fp->dir_ptr;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	330b      	adds	r3, #11
 8007cc6:	781a      	ldrb	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	330b      	adds	r3, #11
 8007ccc:	2120      	movs	r1, #32
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	b2d2      	uxtb	r2, r2
 8007cd2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6818      	ldr	r0, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	0019      	movs	r1, r3
 8007ce0:	f7fe fcc9 	bl	8006676 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	331c      	adds	r3, #28
 8007ce8:	001a      	movs	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	0019      	movs	r1, r3
 8007cf0:	0010      	movs	r0, r2
 8007cf2:	f7fd fcb5 	bl	8005660 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3316      	adds	r3, #22
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	0011      	movs	r1, r2
 8007cfe:	0018      	movs	r0, r3
 8007d00:	f7fd fcae 	bl	8005660 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3312      	adds	r3, #18
 8007d08:	2100      	movs	r1, #0
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f7fd fc8a 	bl	8005624 <st_word>
					fs->wflag = 1;
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2201      	movs	r2, #1
 8007d14:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	193c      	adds	r4, r7, r4
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f7fd ff5c 	bl	8005bd8 <sync_fs>
 8007d20:	0003      	movs	r3, r0
 8007d22:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	7d1b      	ldrb	r3, [r3, #20]
 8007d28:	2240      	movs	r2, #64	@ 0x40
 8007d2a:	4393      	bics	r3, r2
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	2417      	movs	r4, #23
 8007d36:	193b      	adds	r3, r7, r4
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	0019      	movs	r1, r3
 8007d3c:	0010      	movs	r0, r2
 8007d3e:	f7fd fd44 	bl	80057ca <unlock_fs>
 8007d42:	193b      	adds	r3, r7, r4
 8007d44:	781b      	ldrb	r3, [r3, #0]
}
 8007d46:	0018      	movs	r0, r3
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	b006      	add	sp, #24
 8007d4c:	bdb0      	pop	{r4, r5, r7, pc}

08007d4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007d4e:	b5b0      	push	{r4, r5, r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007d56:	250f      	movs	r5, #15
 8007d58:	197c      	adds	r4, r7, r5
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f7ff ff61 	bl	8007c24 <f_sync>
 8007d62:	0003      	movs	r3, r0
 8007d64:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8007d66:	197b      	adds	r3, r7, r5
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d121      	bne.n	8007db2 <f_close+0x64>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	197c      	adds	r4, r7, r5
 8007d72:	2208      	movs	r2, #8
 8007d74:	18ba      	adds	r2, r7, r2
 8007d76:	0011      	movs	r1, r2
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7ff f987 	bl	800708c <validate>
 8007d7e:	0003      	movs	r3, r0
 8007d80:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8007d82:	197b      	adds	r3, r7, r5
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d113      	bne.n	8007db2 <f_close+0x64>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	197c      	adds	r4, r7, r5
 8007d90:	0018      	movs	r0, r3
 8007d92:	f7fd fe39 	bl	8005a08 <dec_lock>
 8007d96:	0003      	movs	r3, r0
 8007d98:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8007d9a:	197b      	adds	r3, r7, r5
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2100      	movs	r1, #0
 8007dac:	0018      	movs	r0, r3
 8007dae:	f7fd fd0c 	bl	80057ca <unlock_fs>
#endif
		}
	}
	return res;
 8007db2:	230f      	movs	r3, #15
 8007db4:	18fb      	adds	r3, r7, r3
 8007db6:	781b      	ldrb	r3, [r3, #0]
}
 8007db8:	0018      	movs	r0, r3
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	b004      	add	sp, #16
 8007dbe:	bdb0      	pop	{r4, r5, r7, pc}

08007dc0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007dc0:	b5b0      	push	{r4, r5, r7, lr}
 8007dc2:	b092      	sub	sp, #72	@ 0x48
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007dcc:	2547      	movs	r5, #71	@ 0x47
 8007dce:	197c      	adds	r4, r7, r5
 8007dd0:	2328      	movs	r3, #40	@ 0x28
 8007dd2:	18f9      	adds	r1, r7, r3
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	2200      	movs	r2, #0
 8007dda:	0018      	movs	r0, r3
 8007ddc:	f7fe fede 	bl	8006b9c <find_volume>
 8007de0:	0003      	movs	r3, r0
 8007de2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007de4:	197b      	adds	r3, r7, r5
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d000      	beq.n	8007dee <f_getfree+0x2e>
 8007dec:	e09e      	b.n	8007f2c <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007dee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df6:	695a      	ldr	r2, [r3, #20]
 8007df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	3b02      	subs	r3, #2
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d804      	bhi.n	8007e0c <f_getfree+0x4c>
			*nclst = fs->free_clst;
 8007e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e04:	695a      	ldr	r2, [r3, #20]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	e08f      	b.n	8007f2c <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d12d      	bne.n	8007e74 <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 8007e18:	2302      	movs	r3, #2
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e1e:	2314      	movs	r3, #20
 8007e20:	18fb      	adds	r3, r7, r3
 8007e22:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 8007e24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e26:	2314      	movs	r3, #20
 8007e28:	18fb      	adds	r3, r7, r3
 8007e2a:	0011      	movs	r1, r2
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	f7fd ff6b 	bl	8005d08 <get_fat>
 8007e32:	0003      	movs	r3, r0
 8007e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e38:	3301      	adds	r3, #1
 8007e3a:	d104      	bne.n	8007e46 <f_getfree+0x86>
 8007e3c:	2347      	movs	r3, #71	@ 0x47
 8007e3e:	18fb      	adds	r3, r7, r3
 8007e40:	2201      	movs	r2, #1
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	e065      	b.n	8007f12 <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d104      	bne.n	8007e56 <f_getfree+0x96>
 8007e4c:	2347      	movs	r3, #71	@ 0x47
 8007e4e:	18fb      	adds	r3, r7, r3
 8007e50:	2202      	movs	r2, #2
 8007e52:	701a      	strb	r2, [r3, #0]
 8007e54:	e05d      	b.n	8007f12 <f_getfree+0x152>
					if (stat == 0) nfree++;
 8007e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <f_getfree+0xa2>
 8007e5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e5e:	3301      	adds	r3, #1
 8007e60:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8007e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e64:	3301      	adds	r3, #1
 8007e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d3d8      	bcc.n	8007e24 <f_getfree+0x64>
 8007e72:	e04e      	b.n	8007f12 <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8007e80:	2300      	movs	r3, #0
 8007e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e84:	2300      	movs	r3, #0
 8007e86:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8007e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d114      	bne.n	8007eb8 <f_getfree+0xf8>
							res = move_window(fs, sect++);
 8007e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007e96:	2547      	movs	r5, #71	@ 0x47
 8007e98:	197c      	adds	r4, r7, r5
 8007e9a:	0019      	movs	r1, r3
 8007e9c:	f7fd fe66 	bl	8005b6c <move_window>
 8007ea0:	0003      	movs	r3, r0
 8007ea2:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 8007ea4:	197b      	adds	r3, r7, r5
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d131      	bne.n	8007f10 <f_getfree+0x150>
							p = fs->win;
 8007eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eae:	3334      	adds	r3, #52	@ 0x34
 8007eb0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8007eb2:	2380      	movs	r3, #128	@ 0x80
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d10f      	bne.n	8007ee0 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec2:	0018      	movs	r0, r3
 8007ec4:	f7fd fb72 	bl	80055ac <ld_word>
 8007ec8:	1e03      	subs	r3, r0, #0
 8007eca:	d102      	bne.n	8007ed2 <f_getfree+0x112>
 8007ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ece:	3301      	adds	r3, #1
 8007ed0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eda:	3b02      	subs	r3, #2
 8007edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ede:	e010      	b.n	8007f02 <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	f7fd fb7d 	bl	80055e2 <ld_dword>
 8007ee8:	0003      	movs	r3, r0
 8007eea:	011b      	lsls	r3, r3, #4
 8007eec:	091b      	lsrs	r3, r3, #4
 8007eee:	d102      	bne.n	8007ef6 <f_getfree+0x136>
 8007ef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	3304      	adds	r3, #4
 8007efa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efe:	3b04      	subs	r3, #4
 8007f00:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8007f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f04:	3b01      	subs	r3, #1
 8007f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1bc      	bne.n	8007e88 <f_getfree+0xc8>
 8007f0e:	e000      	b.n	8007f12 <f_getfree+0x152>
							if (res != FR_OK) break;
 8007f10:	46c0      	nop			@ (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f16:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f1c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f20:	791a      	ldrb	r2, [r3, #4]
 8007f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f24:	2101      	movs	r1, #1
 8007f26:	430a      	orrs	r2, r1
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f2e:	2447      	movs	r4, #71	@ 0x47
 8007f30:	193b      	adds	r3, r7, r4
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	0019      	movs	r1, r3
 8007f36:	0010      	movs	r0, r2
 8007f38:	f7fd fc47 	bl	80057ca <unlock_fs>
 8007f3c:	193b      	adds	r3, r7, r4
 8007f3e:	781b      	ldrb	r3, [r3, #0]
}
 8007f40:	0018      	movs	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b012      	add	sp, #72	@ 0x48
 8007f46:	bdb0      	pop	{r4, r5, r7, pc}

08007f48 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007f48:	b590      	push	{r4, r7, lr}
 8007f4a:	b089      	sub	sp, #36	@ 0x24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007f5c:	e022      	b.n	8007fa4 <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007f5e:	2310      	movs	r3, #16
 8007f60:	18fb      	adds	r3, r7, r3
 8007f62:	2414      	movs	r4, #20
 8007f64:	1939      	adds	r1, r7, r4
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f7ff fb42 	bl	80075f2 <f_read>
		if (rc != 1) break;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d11d      	bne.n	8007fb0 <f_gets+0x68>
		c = s[0];
 8007f74:	2117      	movs	r1, #23
 8007f76:	187b      	adds	r3, r7, r1
 8007f78:	193a      	adds	r2, r7, r4
 8007f7a:	7812      	ldrb	r2, [r2, #0]
 8007f7c:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007f7e:	187b      	adds	r3, r7, r1
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b0d      	cmp	r3, #13
 8007f84:	d00d      	beq.n	8007fa2 <f_gets+0x5a>
		*p++ = c;
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	61ba      	str	r2, [r7, #24]
 8007f8c:	187a      	adds	r2, r7, r1
 8007f8e:	7812      	ldrb	r2, [r2, #0]
 8007f90:	701a      	strb	r2, [r3, #0]
		n++;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	3301      	adds	r3, #1
 8007f96:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007f98:	187b      	adds	r3, r7, r1
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b0a      	cmp	r3, #10
 8007f9e:	d009      	beq.n	8007fb4 <f_gets+0x6c>
 8007fa0:	e000      	b.n	8007fa4 <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007fa2:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	69fa      	ldr	r2, [r7, #28]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	dbd7      	blt.n	8007f5e <f_gets+0x16>
 8007fae:	e002      	b.n	8007fb6 <f_gets+0x6e>
		if (rc != 1) break;
 8007fb0:	46c0      	nop			@ (mov r8, r8)
 8007fb2:	e000      	b.n	8007fb6 <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8007fb4:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d001      	beq.n	8007fc6 <f_gets+0x7e>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	e000      	b.n	8007fc8 <f_gets+0x80>
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	0018      	movs	r0, r3
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b009      	add	sp, #36	@ 0x24
 8007fce:	bd90      	pop	{r4, r7, pc}

08007fd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007fd0:	b590      	push	{r4, r7, lr}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	1dfb      	adds	r3, r7, #7
 8007fdc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8007fde:	2417      	movs	r4, #23
 8007fe0:	193b      	adds	r3, r7, r4
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8007fe6:	2016      	movs	r0, #22
 8007fe8:	183b      	adds	r3, r7, r0
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8007fee:	4b21      	ldr	r3, [pc, #132]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 8007ff0:	7a5b      	ldrb	r3, [r3, #9]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d136      	bne.n	8008066 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 8007ffa:	7a5b      	ldrb	r3, [r3, #9]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	001a      	movs	r2, r3
 8008000:	4b1c      	ldr	r3, [pc, #112]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 8008002:	2100      	movs	r1, #0
 8008004:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008006:	4b1b      	ldr	r3, [pc, #108]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 8008008:	7a5b      	ldrb	r3, [r3, #9]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	4a19      	ldr	r2, [pc, #100]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	18d3      	adds	r3, r2, r3
 8008012:	3304      	adds	r3, #4
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8008018:	4b16      	ldr	r3, [pc, #88]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 800801a:	7a5b      	ldrb	r3, [r3, #9]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	001a      	movs	r2, r3
 8008020:	4b14      	ldr	r3, [pc, #80]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 8008022:	189b      	adds	r3, r3, r2
 8008024:	1dfa      	adds	r2, r7, #7
 8008026:	7812      	ldrb	r2, [r2, #0]
 8008028:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800802a:	4b12      	ldr	r3, [pc, #72]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 800802c:	7a5b      	ldrb	r3, [r3, #9]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	b2d1      	uxtb	r1, r2
 8008034:	4a0f      	ldr	r2, [pc, #60]	@ (8008074 <FATFS_LinkDriverEx+0xa4>)
 8008036:	7251      	strb	r1, [r2, #9]
 8008038:	183a      	adds	r2, r7, r0
 800803a:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800803c:	183b      	adds	r3, r7, r0
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	3330      	adds	r3, #48	@ 0x30
 8008042:	b2da      	uxtb	r2, r3
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	3301      	adds	r3, #1
 800804c:	223a      	movs	r2, #58	@ 0x3a
 800804e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	3302      	adds	r3, #2
 8008054:	222f      	movs	r2, #47	@ 0x2f
 8008056:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	3303      	adds	r3, #3
 800805c:	2200      	movs	r2, #0
 800805e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008060:	193b      	adds	r3, r7, r4
 8008062:	2200      	movs	r2, #0
 8008064:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008066:	2317      	movs	r3, #23
 8008068:	18fb      	adds	r3, r7, r3
 800806a:	781b      	ldrb	r3, [r3, #0]
}
 800806c:	0018      	movs	r0, r3
 800806e:	46bd      	mov	sp, r7
 8008070:	b007      	add	sp, #28
 8008072:	bd90      	pop	{r4, r7, pc}
 8008074:	200004e8 	.word	0x200004e8

08008078 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	0018      	movs	r0, r3
 800808a:	f7ff ffa1 	bl	8007fd0 <FATFS_LinkDriverEx>
 800808e:	0003      	movs	r3, r0
}
 8008090:	0018      	movs	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	b002      	add	sp, #8
 8008096:	bd80      	pop	{r7, pc}

08008098 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	0002      	movs	r2, r0
 80080a0:	6039      	str	r1, [r7, #0]
 80080a2:	1dfb      	adds	r3, r7, #7
 80080a4:	701a      	strb	r2, [r3, #0]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80080a6:	2200      	movs	r2, #0
 80080a8:	2101      	movs	r1, #1
 80080aa:	2001      	movs	r0, #1
 80080ac:	f000 f9c2 	bl	8008434 <osSemaphoreNew>
 80080b0:	0002      	movs	r2, r0
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	1e5a      	subs	r2, r3, #1
 80080bc:	4193      	sbcs	r3, r2
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	60fb      	str	r3, [r7, #12]

    return ret;
 80080c2:	68fb      	ldr	r3, [r7, #12]
}
 80080c4:	0018      	movs	r0, r3
 80080c6:	46bd      	mov	sp, r7
 80080c8:	b004      	add	sp, #16
 80080ca:	bd80      	pop	{r7, pc}

080080cc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	0018      	movs	r0, r3
 80080d8:	f000 fad0 	bl	800867c <osSemaphoreDelete>
#endif
    return 1;
 80080dc:	2301      	movs	r3, #1
}
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b002      	add	sp, #8
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80080f2:	23fa      	movs	r3, #250	@ 0xfa
 80080f4:	009a      	lsls	r2, r3, #2
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	0011      	movs	r1, r2
 80080fa:	0018      	movs	r0, r3
 80080fc:	f000 fa2e 	bl	800855c <osSemaphoreAcquire>
 8008100:	1e03      	subs	r3, r0, #0
 8008102:	d101      	bne.n	8008108 <ff_req_grant+0x22>
#endif

#endif
  {
    ret = 1;
 8008104:	2301      	movs	r3, #1
 8008106:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008108:	68fb      	ldr	r3, [r7, #12]
}
 800810a:	0018      	movs	r0, r3
 800810c:	46bd      	mov	sp, r7
 800810e:	b004      	add	sp, #16
 8008110:	bd80      	pop	{r7, pc}

08008112 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	0018      	movs	r0, r3
 800811e:	f000 fa6d 	bl	80085fc <osSemaphoreRelease>
#endif
}
 8008122:	46c0      	nop			@ (mov r8, r8)
 8008124:	46bd      	mov	sp, r7
 8008126:	b002      	add	sp, #8
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <__NVIC_SetPriority>:
{
 800812c:	b590      	push	{r4, r7, lr}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	0002      	movs	r2, r0
 8008134:	6039      	str	r1, [r7, #0]
 8008136:	1dfb      	adds	r3, r7, #7
 8008138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800813a:	1dfb      	adds	r3, r7, #7
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b7f      	cmp	r3, #127	@ 0x7f
 8008140:	d828      	bhi.n	8008194 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008142:	4a2f      	ldr	r2, [pc, #188]	@ (8008200 <__NVIC_SetPriority+0xd4>)
 8008144:	1dfb      	adds	r3, r7, #7
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	b25b      	sxtb	r3, r3
 800814a:	089b      	lsrs	r3, r3, #2
 800814c:	33c0      	adds	r3, #192	@ 0xc0
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	589b      	ldr	r3, [r3, r2]
 8008152:	1dfa      	adds	r2, r7, #7
 8008154:	7812      	ldrb	r2, [r2, #0]
 8008156:	0011      	movs	r1, r2
 8008158:	2203      	movs	r2, #3
 800815a:	400a      	ands	r2, r1
 800815c:	00d2      	lsls	r2, r2, #3
 800815e:	21ff      	movs	r1, #255	@ 0xff
 8008160:	4091      	lsls	r1, r2
 8008162:	000a      	movs	r2, r1
 8008164:	43d2      	mvns	r2, r2
 8008166:	401a      	ands	r2, r3
 8008168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	019b      	lsls	r3, r3, #6
 800816e:	22ff      	movs	r2, #255	@ 0xff
 8008170:	401a      	ands	r2, r3
 8008172:	1dfb      	adds	r3, r7, #7
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	0018      	movs	r0, r3
 8008178:	2303      	movs	r3, #3
 800817a:	4003      	ands	r3, r0
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008180:	481f      	ldr	r0, [pc, #124]	@ (8008200 <__NVIC_SetPriority+0xd4>)
 8008182:	1dfb      	adds	r3, r7, #7
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b25b      	sxtb	r3, r3
 8008188:	089b      	lsrs	r3, r3, #2
 800818a:	430a      	orrs	r2, r1
 800818c:	33c0      	adds	r3, #192	@ 0xc0
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	501a      	str	r2, [r3, r0]
}
 8008192:	e031      	b.n	80081f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008194:	4a1b      	ldr	r2, [pc, #108]	@ (8008204 <__NVIC_SetPriority+0xd8>)
 8008196:	1dfb      	adds	r3, r7, #7
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	0019      	movs	r1, r3
 800819c:	230f      	movs	r3, #15
 800819e:	400b      	ands	r3, r1
 80081a0:	3b08      	subs	r3, #8
 80081a2:	089b      	lsrs	r3, r3, #2
 80081a4:	3306      	adds	r3, #6
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	18d3      	adds	r3, r2, r3
 80081aa:	3304      	adds	r3, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	1dfa      	adds	r2, r7, #7
 80081b0:	7812      	ldrb	r2, [r2, #0]
 80081b2:	0011      	movs	r1, r2
 80081b4:	2203      	movs	r2, #3
 80081b6:	400a      	ands	r2, r1
 80081b8:	00d2      	lsls	r2, r2, #3
 80081ba:	21ff      	movs	r1, #255	@ 0xff
 80081bc:	4091      	lsls	r1, r2
 80081be:	000a      	movs	r2, r1
 80081c0:	43d2      	mvns	r2, r2
 80081c2:	401a      	ands	r2, r3
 80081c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	019b      	lsls	r3, r3, #6
 80081ca:	22ff      	movs	r2, #255	@ 0xff
 80081cc:	401a      	ands	r2, r3
 80081ce:	1dfb      	adds	r3, r7, #7
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	0018      	movs	r0, r3
 80081d4:	2303      	movs	r3, #3
 80081d6:	4003      	ands	r3, r0
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80081dc:	4809      	ldr	r0, [pc, #36]	@ (8008204 <__NVIC_SetPriority+0xd8>)
 80081de:	1dfb      	adds	r3, r7, #7
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	001c      	movs	r4, r3
 80081e4:	230f      	movs	r3, #15
 80081e6:	4023      	ands	r3, r4
 80081e8:	3b08      	subs	r3, #8
 80081ea:	089b      	lsrs	r3, r3, #2
 80081ec:	430a      	orrs	r2, r1
 80081ee:	3306      	adds	r3, #6
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	18c3      	adds	r3, r0, r3
 80081f4:	3304      	adds	r3, #4
 80081f6:	601a      	str	r2, [r3, #0]
}
 80081f8:	46c0      	nop			@ (mov r8, r8)
 80081fa:	46bd      	mov	sp, r7
 80081fc:	b003      	add	sp, #12
 80081fe:	bd90      	pop	{r4, r7, pc}
 8008200:	e000e100 	.word	0xe000e100
 8008204:	e000ed00 	.word	0xe000ed00

08008208 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800820c:	4b05      	ldr	r3, [pc, #20]	@ (8008224 <SysTick_Handler+0x1c>)
 800820e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008210:	f001 ffae 	bl	800a170 <xTaskGetSchedulerState>
 8008214:	0003      	movs	r3, r0
 8008216:	2b01      	cmp	r3, #1
 8008218:	d001      	beq.n	800821e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800821a:	f002 fd75 	bl	800ad08 <xPortSysTickHandler>
  }
}
 800821e:	46c0      	nop			@ (mov r8, r8)
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	e000e010 	.word	0xe000e010

08008228 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800822c:	2305      	movs	r3, #5
 800822e:	425b      	negs	r3, r3
 8008230:	2100      	movs	r1, #0
 8008232:	0018      	movs	r0, r3
 8008234:	f7ff ff7a 	bl	800812c <__NVIC_SetPriority>
#endif
}
 8008238:	46c0      	nop			@ (mov r8, r8)
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
	...

08008240 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008246:	f3ef 8305 	mrs	r3, IPSR
 800824a:	603b      	str	r3, [r7, #0]
  return(result);
 800824c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008252:	2306      	movs	r3, #6
 8008254:	425b      	negs	r3, r3
 8008256:	607b      	str	r3, [r7, #4]
 8008258:	e00c      	b.n	8008274 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800825a:	4b09      	ldr	r3, [pc, #36]	@ (8008280 <osKernelInitialize+0x40>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008262:	4b07      	ldr	r3, [pc, #28]	@ (8008280 <osKernelInitialize+0x40>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008268:	2300      	movs	r3, #0
 800826a:	607b      	str	r3, [r7, #4]
 800826c:	e002      	b.n	8008274 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800826e:	2301      	movs	r3, #1
 8008270:	425b      	negs	r3, r3
 8008272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008274:	687b      	ldr	r3, [r7, #4]
}
 8008276:	0018      	movs	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	b002      	add	sp, #8
 800827c:	bd80      	pop	{r7, pc}
 800827e:	46c0      	nop			@ (mov r8, r8)
 8008280:	200004f4 	.word	0x200004f4

08008284 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800828a:	f3ef 8305 	mrs	r3, IPSR
 800828e:	603b      	str	r3, [r7, #0]
  return(result);
 8008290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008296:	2306      	movs	r3, #6
 8008298:	425b      	negs	r3, r3
 800829a:	607b      	str	r3, [r7, #4]
 800829c:	e010      	b.n	80082c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800829e:	4b0b      	ldr	r3, [pc, #44]	@ (80082cc <osKernelStart+0x48>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d109      	bne.n	80082ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082a6:	f7ff ffbf 	bl	8008228 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082aa:	4b08      	ldr	r3, [pc, #32]	@ (80082cc <osKernelStart+0x48>)
 80082ac:	2202      	movs	r2, #2
 80082ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082b0:	f001 fb6a 	bl	8009988 <vTaskStartScheduler>
      stat = osOK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	607b      	str	r3, [r7, #4]
 80082b8:	e002      	b.n	80082c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80082ba:	2301      	movs	r3, #1
 80082bc:	425b      	negs	r3, r3
 80082be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082c0:	687b      	ldr	r3, [r7, #4]
}
 80082c2:	0018      	movs	r0, r3
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b002      	add	sp, #8
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	46c0      	nop			@ (mov r8, r8)
 80082cc:	200004f4 	.word	0x200004f4

080082d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80082d0:	b5b0      	push	{r4, r5, r7, lr}
 80082d2:	b08e      	sub	sp, #56	@ 0x38
 80082d4:	af04      	add	r7, sp, #16
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e0:	f3ef 8305 	mrs	r3, IPSR
 80082e4:	617b      	str	r3, [r7, #20]
  return(result);
 80082e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d000      	beq.n	80082ee <osThreadNew+0x1e>
 80082ec:	e081      	b.n	80083f2 <osThreadNew+0x122>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d100      	bne.n	80082f6 <osThreadNew+0x26>
 80082f4:	e07d      	b.n	80083f2 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 80082f6:	2380      	movs	r3, #128	@ 0x80
 80082f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80082fa:	2318      	movs	r3, #24
 80082fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008302:	2301      	movs	r3, #1
 8008304:	425b      	negs	r3, r3
 8008306:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d044      	beq.n	8008398 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d002      	beq.n	800831c <osThreadNew+0x4c>
        name = attr->name;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d007      	beq.n	8008340 <osThreadNew+0x70>
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	2b38      	cmp	r3, #56	@ 0x38
 8008334:	d804      	bhi.n	8008340 <osThreadNew+0x70>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	4013      	ands	r3, r2
 800833e:	d001      	beq.n	8008344 <osThreadNew+0x74>
        return (NULL);
 8008340:	2300      	movs	r3, #0
 8008342:	e057      	b.n	80083f4 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	089b      	lsrs	r3, r3, #2
 8008352:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00e      	beq.n	800837a <osThreadNew+0xaa>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2ba7      	cmp	r3, #167	@ 0xa7
 8008362:	d90a      	bls.n	800837a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008368:	2b00      	cmp	r3, #0
 800836a:	d006      	beq.n	800837a <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d002      	beq.n	800837a <osThreadNew+0xaa>
        mem = 1;
 8008374:	2301      	movs	r3, #1
 8008376:	61bb      	str	r3, [r7, #24]
 8008378:	e010      	b.n	800839c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10c      	bne.n	800839c <osThreadNew+0xcc>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d108      	bne.n	800839c <osThreadNew+0xcc>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d104      	bne.n	800839c <osThreadNew+0xcc>
          mem = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	e001      	b.n	800839c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d112      	bne.n	80083c8 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083aa:	68bd      	ldr	r5, [r7, #8]
 80083ac:	6a3c      	ldr	r4, [r7, #32]
 80083ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	9302      	str	r3, [sp, #8]
 80083b4:	9201      	str	r2, [sp, #4]
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	002b      	movs	r3, r5
 80083bc:	0022      	movs	r2, r4
 80083be:	f001 f920 	bl	8009602 <xTaskCreateStatic>
 80083c2:	0003      	movs	r3, r0
 80083c4:	613b      	str	r3, [r7, #16]
 80083c6:	e014      	b.n	80083f2 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d111      	bne.n	80083f2 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68bc      	ldr	r4, [r7, #8]
 80083d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	2310      	movs	r3, #16
 80083da:	18fb      	adds	r3, r7, r3
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	0023      	movs	r3, r4
 80083e4:	f001 f954 	bl	8009690 <xTaskCreate>
 80083e8:	0003      	movs	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d001      	beq.n	80083f2 <osThreadNew+0x122>
            hTask = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80083f2:	693b      	ldr	r3, [r7, #16]
}
 80083f4:	0018      	movs	r0, r3
 80083f6:	46bd      	mov	sp, r7
 80083f8:	b00a      	add	sp, #40	@ 0x28
 80083fa:	bdb0      	pop	{r4, r5, r7, pc}

080083fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008404:	f3ef 8305 	mrs	r3, IPSR
 8008408:	60bb      	str	r3, [r7, #8]
  return(result);
 800840a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <osDelay+0x1c>
    stat = osErrorISR;
 8008410:	2306      	movs	r3, #6
 8008412:	425b      	negs	r3, r3
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e008      	b.n	800842a <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d003      	beq.n	800842a <osDelay+0x2e>
      vTaskDelay(ticks);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	0018      	movs	r0, r3
 8008426:	f001 fa89 	bl	800993c <vTaskDelay>
    }
  }

  return (stat);
 800842a:	68fb      	ldr	r3, [r7, #12]
}
 800842c:	0018      	movs	r0, r3
 800842e:	46bd      	mov	sp, r7
 8008430:	b004      	add	sp, #16
 8008432:	bd80      	pop	{r7, pc}

08008434 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	@ 0x28
 8008438:	af02      	add	r7, sp, #8
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008440:	2300      	movs	r3, #0
 8008442:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008444:	f3ef 8305 	mrs	r3, IPSR
 8008448:	613b      	str	r3, [r7, #16]
  return(result);
 800844a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800844c:	2b00      	cmp	r3, #0
 800844e:	d000      	beq.n	8008452 <osSemaphoreNew+0x1e>
 8008450:	e07f      	b.n	8008552 <osSemaphoreNew+0x11e>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d100      	bne.n	800845a <osSemaphoreNew+0x26>
 8008458:	e07b      	b.n	8008552 <osSemaphoreNew+0x11e>
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	429a      	cmp	r2, r3
 8008460:	d900      	bls.n	8008464 <osSemaphoreNew+0x30>
 8008462:	e076      	b.n	8008552 <osSemaphoreNew+0x11e>
    mem = -1;
 8008464:	2301      	movs	r3, #1
 8008466:	425b      	negs	r3, r3
 8008468:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d015      	beq.n	800849c <osSemaphoreNew+0x68>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <osSemaphoreNew+0x52>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	2b4f      	cmp	r3, #79	@ 0x4f
 800847e:	d902      	bls.n	8008486 <osSemaphoreNew+0x52>
        mem = 1;
 8008480:	2301      	movs	r3, #1
 8008482:	61bb      	str	r3, [r7, #24]
 8008484:	e00c      	b.n	80084a0 <osSemaphoreNew+0x6c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d108      	bne.n	80084a0 <osSemaphoreNew+0x6c>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d104      	bne.n	80084a0 <osSemaphoreNew+0x6c>
          mem = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	e001      	b.n	80084a0 <osSemaphoreNew+0x6c>
        }
      }
    }
    else {
      mem = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	3301      	adds	r3, #1
 80084a4:	d055      	beq.n	8008552 <osSemaphoreNew+0x11e>
      if (max_count == 1U) {
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d12b      	bne.n	8008504 <osSemaphoreNew+0xd0>
        if (mem == 1) {
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d10b      	bne.n	80084ca <osSemaphoreNew+0x96>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	2203      	movs	r2, #3
 80084b8:	9200      	str	r2, [sp, #0]
 80084ba:	2200      	movs	r2, #0
 80084bc:	2100      	movs	r1, #0
 80084be:	2001      	movs	r0, #1
 80084c0:	f000 fa30 	bl	8008924 <xQueueGenericCreateStatic>
 80084c4:	0003      	movs	r3, r0
 80084c6:	61fb      	str	r3, [r7, #28]
 80084c8:	e006      	b.n	80084d8 <osSemaphoreNew+0xa4>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80084ca:	2203      	movs	r2, #3
 80084cc:	2100      	movs	r1, #0
 80084ce:	2001      	movs	r0, #1
 80084d0:	f000 fa79 	bl	80089c6 <xQueueGenericCreate>
 80084d4:	0003      	movs	r3, r0
 80084d6:	61fb      	str	r3, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d027      	beq.n	800852e <osSemaphoreNew+0xfa>
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d024      	beq.n	800852e <osSemaphoreNew+0xfa>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80084e4:	69f8      	ldr	r0, [r7, #28]
 80084e6:	2300      	movs	r3, #0
 80084e8:	2200      	movs	r2, #0
 80084ea:	2100      	movs	r1, #0
 80084ec:	f000 fb12 	bl	8008b14 <xQueueGenericSend>
 80084f0:	0003      	movs	r3, r0
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d01b      	beq.n	800852e <osSemaphoreNew+0xfa>
            vSemaphoreDelete (hSemaphore);
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	0018      	movs	r0, r3
 80084fa:	f000 fead 	bl	8009258 <vQueueDelete>
            hSemaphore = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	e014      	b.n	800852e <osSemaphoreNew+0xfa>
          }
        }
      }
      else {
        if (mem == 1) {
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d109      	bne.n	800851e <osSemaphoreNew+0xea>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689a      	ldr	r2, [r3, #8]
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	0018      	movs	r0, r3
 8008514:	f000 fab1 	bl	8008a7a <xQueueCreateCountingSemaphoreStatic>
 8008518:	0003      	movs	r3, r0
 800851a:	61fb      	str	r3, [r7, #28]
 800851c:	e007      	b.n	800852e <osSemaphoreNew+0xfa>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	0011      	movs	r1, r2
 8008524:	0018      	movs	r0, r3
 8008526:	f000 fad0 	bl	8008aca <xQueueCreateCountingSemaphore>
 800852a:	0003      	movs	r3, r0
 800852c:	61fb      	str	r3, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00e      	beq.n	8008552 <osSemaphoreNew+0x11e>
        if (attr != NULL) {
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <osSemaphoreNew+0x10e>
          name = attr->name;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	e001      	b.n	8008546 <osSemaphoreNew+0x112>
        } else {
          name = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	0011      	movs	r1, r2
 800854c:	0018      	movs	r0, r3
 800854e:	f000 ffd3 	bl	80094f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008552:	69fb      	ldr	r3, [r7, #28]
}
 8008554:	0018      	movs	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	b008      	add	sp, #32
 800855a:	bd80      	pop	{r7, pc}

0800855c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d103      	bne.n	800857c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008574:	2304      	movs	r3, #4
 8008576:	425b      	negs	r3, r3
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	e037      	b.n	80085ec <osSemaphoreAcquire+0x90>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800857c:	f3ef 8305 	mrs	r3, IPSR
 8008580:	60fb      	str	r3, [r7, #12]
  return(result);
 8008582:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008584:	2b00      	cmp	r3, #0
 8008586:	d01e      	beq.n	80085c6 <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800858e:	2304      	movs	r3, #4
 8008590:	425b      	negs	r3, r3
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e02a      	b.n	80085ec <osSemaphoreAcquire+0x90>
    }
    else {
      yield = pdFALSE;
 8008596:	2300      	movs	r3, #0
 8008598:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800859a:	2308      	movs	r3, #8
 800859c:	18fa      	adds	r2, r7, r3
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2100      	movs	r1, #0
 80085a2:	0018      	movs	r0, r3
 80085a4:	f000 fdf3 	bl	800918e <xQueueReceiveFromISR>
 80085a8:	0003      	movs	r3, r0
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d003      	beq.n	80085b6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80085ae:	2303      	movs	r3, #3
 80085b0:	425b      	negs	r3, r3
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	e01a      	b.n	80085ec <osSemaphoreAcquire+0x90>
      } else {
        portYIELD_FROM_ISR (yield);
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d017      	beq.n	80085ec <osSemaphoreAcquire+0x90>
 80085bc:	4b0e      	ldr	r3, [pc, #56]	@ (80085f8 <osSemaphoreAcquire+0x9c>)
 80085be:	2280      	movs	r2, #128	@ 0x80
 80085c0:	0552      	lsls	r2, r2, #21
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	e012      	b.n	80085ec <osSemaphoreAcquire+0x90>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80085c6:	683a      	ldr	r2, [r7, #0]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	0011      	movs	r1, r2
 80085cc:	0018      	movs	r0, r3
 80085ce:	f000 fd00 	bl	8008fd2 <xQueueSemaphoreTake>
 80085d2:	0003      	movs	r3, r0
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d009      	beq.n	80085ec <osSemaphoreAcquire+0x90>
      if (timeout != 0U) {
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <osSemaphoreAcquire+0x8a>
        stat = osErrorTimeout;
 80085de:	2302      	movs	r3, #2
 80085e0:	425b      	negs	r3, r3
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	e002      	b.n	80085ec <osSemaphoreAcquire+0x90>
      } else {
        stat = osErrorResource;
 80085e6:	2303      	movs	r3, #3
 80085e8:	425b      	negs	r3, r3
 80085ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80085ec:	697b      	ldr	r3, [r7, #20]
}
 80085ee:	0018      	movs	r0, r3
 80085f0:	46bd      	mov	sp, r7
 80085f2:	b006      	add	sp, #24
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	46c0      	nop			@ (mov r8, r8)
 80085f8:	e000ed04 	.word	0xe000ed04

080085fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d103      	bne.n	800861a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008612:	2304      	movs	r3, #4
 8008614:	425b      	negs	r3, r3
 8008616:	617b      	str	r3, [r7, #20]
 8008618:	e029      	b.n	800866e <osSemaphoreRelease+0x72>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800861a:	f3ef 8305 	mrs	r3, IPSR
 800861e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008620:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008622:	2b00      	cmp	r3, #0
 8008624:	d017      	beq.n	8008656 <osSemaphoreRelease+0x5a>
    yield = pdFALSE;
 8008626:	2300      	movs	r3, #0
 8008628:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800862a:	2308      	movs	r3, #8
 800862c:	18fa      	adds	r2, r7, r3
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	0011      	movs	r1, r2
 8008632:	0018      	movs	r0, r3
 8008634:	f000 fbad 	bl	8008d92 <xQueueGiveFromISR>
 8008638:	0003      	movs	r3, r0
 800863a:	2b01      	cmp	r3, #1
 800863c:	d003      	beq.n	8008646 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
 800863e:	2303      	movs	r3, #3
 8008640:	425b      	negs	r3, r3
 8008642:	617b      	str	r3, [r7, #20]
 8008644:	e013      	b.n	800866e <osSemaphoreRelease+0x72>
    } else {
      portYIELD_FROM_ISR (yield);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d010      	beq.n	800866e <osSemaphoreRelease+0x72>
 800864c:	4b0a      	ldr	r3, [pc, #40]	@ (8008678 <osSemaphoreRelease+0x7c>)
 800864e:	2280      	movs	r2, #128	@ 0x80
 8008650:	0552      	lsls	r2, r2, #21
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e00b      	b.n	800866e <osSemaphoreRelease+0x72>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008656:	6938      	ldr	r0, [r7, #16]
 8008658:	2300      	movs	r3, #0
 800865a:	2200      	movs	r2, #0
 800865c:	2100      	movs	r1, #0
 800865e:	f000 fa59 	bl	8008b14 <xQueueGenericSend>
 8008662:	0003      	movs	r3, r0
 8008664:	2b01      	cmp	r3, #1
 8008666:	d002      	beq.n	800866e <osSemaphoreRelease+0x72>
      stat = osErrorResource;
 8008668:	2303      	movs	r3, #3
 800866a:	425b      	negs	r3, r3
 800866c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800866e:	697b      	ldr	r3, [r7, #20]
}
 8008670:	0018      	movs	r0, r3
 8008672:	46bd      	mov	sp, r7
 8008674:	b006      	add	sp, #24
 8008676:	bd80      	pop	{r7, pc}
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008688:	f3ef 8305 	mrs	r3, IPSR
 800868c:	60fb      	str	r3, [r7, #12]
  return(result);
 800868e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008690:	2b00      	cmp	r3, #0
 8008692:	d003      	beq.n	800869c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008694:	2306      	movs	r3, #6
 8008696:	425b      	negs	r3, r3
 8008698:	617b      	str	r3, [r7, #20]
 800869a:	e010      	b.n	80086be <osSemaphoreDelete+0x42>
  }
  else if (hSemaphore == NULL) {
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80086a2:	2304      	movs	r3, #4
 80086a4:	425b      	negs	r3, r3
 80086a6:	617b      	str	r3, [r7, #20]
 80086a8:	e009      	b.n	80086be <osSemaphoreDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	0018      	movs	r0, r3
 80086ae:	f000 ff4b 	bl	8009548 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	0018      	movs	r0, r3
 80086ba:	f000 fdcd 	bl	8009258 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80086be:	697b      	ldr	r3, [r7, #20]
}
 80086c0:	0018      	movs	r0, r3
 80086c2:	46bd      	mov	sp, r7
 80086c4:	b006      	add	sp, #24
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	4a06      	ldr	r2, [pc, #24]	@ (80086f0 <vApplicationGetIdleTaskMemory+0x28>)
 80086d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	4a05      	ldr	r2, [pc, #20]	@ (80086f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80086de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2280      	movs	r2, #128	@ 0x80
 80086e4:	601a      	str	r2, [r3, #0]
}
 80086e6:	46c0      	nop			@ (mov r8, r8)
 80086e8:	46bd      	mov	sp, r7
 80086ea:	b004      	add	sp, #16
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	46c0      	nop			@ (mov r8, r8)
 80086f0:	200004f8 	.word	0x200004f8
 80086f4:	200005a0 	.word	0x200005a0

080086f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4a06      	ldr	r2, [pc, #24]	@ (8008720 <vApplicationGetTimerTaskMemory+0x28>)
 8008708:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4a05      	ldr	r2, [pc, #20]	@ (8008724 <vApplicationGetTimerTaskMemory+0x2c>)
 800870e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2280      	movs	r2, #128	@ 0x80
 8008714:	0052      	lsls	r2, r2, #1
 8008716:	601a      	str	r2, [r3, #0]
}
 8008718:	46c0      	nop			@ (mov r8, r8)
 800871a:	46bd      	mov	sp, r7
 800871c:	b004      	add	sp, #16
 800871e:	bd80      	pop	{r7, pc}
 8008720:	200007a0 	.word	0x200007a0
 8008724:	20000848 	.word	0x20000848

08008728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3308      	adds	r3, #8
 8008734:	001a      	movs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	4252      	negs	r2, r2
 8008740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	3308      	adds	r3, #8
 8008746:	001a      	movs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	3308      	adds	r3, #8
 8008750:	001a      	movs	r2, r3
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800875c:	46c0      	nop			@ (mov r8, r8)
 800875e:	46bd      	mov	sp, r7
 8008760:	b002      	add	sp, #8
 8008762:	bd80      	pop	{r7, pc}

08008764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008772:	46c0      	nop			@ (mov r8, r8)
 8008774:	46bd      	mov	sp, r7
 8008776:	b002      	add	sp, #8
 8008778:	bd80      	pop	{r7, pc}

0800877a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	683a      	ldr	r2, [r7, #0]
 800879e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	1c5a      	adds	r2, r3, #1
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
}
 80087b6:	46c0      	nop			@ (mov r8, r8)
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b004      	add	sp, #16
 80087bc:	bd80      	pop	{r7, pc}

080087be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	3301      	adds	r3, #1
 80087d2:	d103      	bne.n	80087dc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	60fb      	str	r3, [r7, #12]
 80087da:	e00c      	b.n	80087f6 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3308      	adds	r3, #8
 80087e0:	60fb      	str	r3, [r7, #12]
 80087e2:	e002      	b.n	80087ea <vListInsert+0x2c>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	60fb      	str	r3, [r7, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d2f6      	bcs.n	80087e4 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	601a      	str	r2, [r3, #0]
}
 8008822:	46c0      	nop			@ (mov r8, r8)
 8008824:	46bd      	mov	sp, r7
 8008826:	b004      	add	sp, #16
 8008828:	bd80      	pop	{r7, pc}

0800882a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6892      	ldr	r2, [r2, #8]
 8008840:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6852      	ldr	r2, [r2, #4]
 800884a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	429a      	cmp	r2, r3
 8008854:	d103      	bne.n	800885e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	1e5a      	subs	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
}
 8008872:	0018      	movs	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	b004      	add	sp, #16
 8008878:	bd80      	pop	{r7, pc}

0800887a <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <xQueueGenericReset+0x1a>
 800888e:	b672      	cpsid	i
 8008890:	46c0      	nop			@ (mov r8, r8)
 8008892:	e7fd      	b.n	8008890 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008894:	f002 f9dc 	bl	800ac50 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a4:	434b      	muls	r3, r1
 80088a6:	18d2      	adds	r2, r2, r3
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c2:	1e59      	subs	r1, r3, #1
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c8:	434b      	muls	r3, r1
 80088ca:	18d2      	adds	r2, r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2244      	movs	r2, #68	@ 0x44
 80088d4:	21ff      	movs	r1, #255	@ 0xff
 80088d6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2245      	movs	r2, #69	@ 0x45
 80088dc:	21ff      	movs	r1, #255	@ 0xff
 80088de:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10d      	bne.n	8008902 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d013      	beq.n	8008916 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3310      	adds	r3, #16
 80088f2:	0018      	movs	r0, r3
 80088f4:	f001 faa0 	bl	8009e38 <xTaskRemoveFromEventList>
 80088f8:	1e03      	subs	r3, r0, #0
 80088fa:	d00c      	beq.n	8008916 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088fc:	f002 f998 	bl	800ac30 <vPortYield>
 8008900:	e009      	b.n	8008916 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	3310      	adds	r3, #16
 8008906:	0018      	movs	r0, r3
 8008908:	f7ff ff0e 	bl	8008728 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	3324      	adds	r3, #36	@ 0x24
 8008910:	0018      	movs	r0, r3
 8008912:	f7ff ff09 	bl	8008728 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008916:	f002 f9ad 	bl	800ac74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800891a:	2301      	movs	r3, #1
}
 800891c:	0018      	movs	r0, r3
 800891e:	46bd      	mov	sp, r7
 8008920:	b004      	add	sp, #16
 8008922:	bd80      	pop	{r7, pc}

08008924 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b089      	sub	sp, #36	@ 0x24
 8008928:	af02      	add	r7, sp, #8
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <xQueueGenericCreateStatic+0x1a>
 8008938:	b672      	cpsid	i
 800893a:	46c0      	nop			@ (mov r8, r8)
 800893c:	e7fd      	b.n	800893a <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <xQueueGenericCreateStatic+0x26>
 8008944:	b672      	cpsid	i
 8008946:	46c0      	nop			@ (mov r8, r8)
 8008948:	e7fd      	b.n	8008946 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <xQueueGenericCreateStatic+0x32>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <xQueueGenericCreateStatic+0x36>
 8008956:	2301      	movs	r3, #1
 8008958:	e000      	b.n	800895c <xQueueGenericCreateStatic+0x38>
 800895a:	2300      	movs	r3, #0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d102      	bne.n	8008966 <xQueueGenericCreateStatic+0x42>
 8008960:	b672      	cpsid	i
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	e7fd      	b.n	8008962 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <xQueueGenericCreateStatic+0x4e>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <xQueueGenericCreateStatic+0x52>
 8008972:	2301      	movs	r3, #1
 8008974:	e000      	b.n	8008978 <xQueueGenericCreateStatic+0x54>
 8008976:	2300      	movs	r3, #0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <xQueueGenericCreateStatic+0x5e>
 800897c:	b672      	cpsid	i
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	e7fd      	b.n	800897e <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008982:	2350      	movs	r3, #80	@ 0x50
 8008984:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2b50      	cmp	r3, #80	@ 0x50
 800898a:	d002      	beq.n	8008992 <xQueueGenericCreateStatic+0x6e>
 800898c:	b672      	cpsid	i
 800898e:	46c0      	nop			@ (mov r8, r8)
 8008990:	e7fd      	b.n	800898e <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008992:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00e      	beq.n	80089bc <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2246      	movs	r2, #70	@ 0x46
 80089a2:	2101      	movs	r1, #1
 80089a4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089a6:	2328      	movs	r3, #40	@ 0x28
 80089a8:	18fb      	adds	r3, r7, r3
 80089aa:	781c      	ldrb	r4, [r3, #0]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	68b9      	ldr	r1, [r7, #8]
 80089b0:	68f8      	ldr	r0, [r7, #12]
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	0023      	movs	r3, r4
 80089b8:	f000 f838 	bl	8008a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089bc:	697b      	ldr	r3, [r7, #20]
	}
 80089be:	0018      	movs	r0, r3
 80089c0:	46bd      	mov	sp, r7
 80089c2:	b007      	add	sp, #28
 80089c4:	bd90      	pop	{r4, r7, pc}

080089c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80089c6:	b590      	push	{r4, r7, lr}
 80089c8:	b08b      	sub	sp, #44	@ 0x2c
 80089ca:	af02      	add	r7, sp, #8
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	1dfb      	adds	r3, r7, #7
 80089d2:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d102      	bne.n	80089e0 <xQueueGenericCreate+0x1a>
 80089da:	b672      	cpsid	i
 80089dc:	46c0      	nop			@ (mov r8, r8)
 80089de:	e7fd      	b.n	80089dc <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4353      	muls	r3, r2
 80089e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	3350      	adds	r3, #80	@ 0x50
 80089ec:	0018      	movs	r0, r3
 80089ee:	f002 f9c7 	bl	800ad80 <pvPortMalloc>
 80089f2:	0003      	movs	r3, r0
 80089f4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d012      	beq.n	8008a22 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	3350      	adds	r3, #80	@ 0x50
 8008a04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2246      	movs	r2, #70	@ 0x46
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a0e:	1dfb      	adds	r3, r7, #7
 8008a10:	781c      	ldrb	r4, [r3, #0]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	68b9      	ldr	r1, [r7, #8]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	0023      	movs	r3, r4
 8008a1e:	f000 f805 	bl	8008a2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a22:	69bb      	ldr	r3, [r7, #24]
	}
 8008a24:	0018      	movs	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b009      	add	sp, #36	@ 0x24
 8008a2a:	bd90      	pop	{r4, r7, pc}

08008a2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	001a      	movs	r2, r3
 8008a3a:	1cfb      	adds	r3, r7, #3
 8008a3c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d103      	bne.n	8008a4c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e002      	b.n	8008a52 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	68ba      	ldr	r2, [r7, #8]
 8008a5c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	2101      	movs	r1, #1
 8008a62:	0018      	movs	r0, r3
 8008a64:	f7ff ff09 	bl	800887a <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	1cfa      	adds	r2, r7, #3
 8008a6c:	214c      	movs	r1, #76	@ 0x4c
 8008a6e:	7812      	ldrb	r2, [r2, #0]
 8008a70:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008a72:	46c0      	nop			@ (mov r8, r8)
 8008a74:	46bd      	mov	sp, r7
 8008a76:	b004      	add	sp, #16
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b088      	sub	sp, #32
 8008a7e:	af02      	add	r7, sp, #8
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <xQueueCreateCountingSemaphoreStatic+0x18>
 8008a8c:	b672      	cpsid	i
 8008a8e:	46c0      	nop			@ (mov r8, r8)
 8008a90:	e7fd      	b.n	8008a8e <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d902      	bls.n	8008aa0 <xQueueCreateCountingSemaphoreStatic+0x26>
 8008a9a:	b672      	cpsid	i
 8008a9c:	46c0      	nop			@ (mov r8, r8)
 8008a9e:	e7fd      	b.n	8008a9c <xQueueCreateCountingSemaphoreStatic+0x22>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	2202      	movs	r2, #2
 8008aa6:	9200      	str	r2, [sp, #0]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2100      	movs	r1, #0
 8008aac:	f7ff ff3a 	bl	8008924 <xQueueGenericCreateStatic>
 8008ab0:	0003      	movs	r3, r0
 8008ab2:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <xQueueCreateCountingSemaphoreStatic+0x46>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008ac0:	697b      	ldr	r3, [r7, #20]
	}
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	b006      	add	sp, #24
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <xQueueCreateCountingSemaphore+0x16>
 8008ada:	b672      	cpsid	i
 8008adc:	46c0      	nop			@ (mov r8, r8)
 8008ade:	e7fd      	b.n	8008adc <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d902      	bls.n	8008aee <xQueueCreateCountingSemaphore+0x24>
 8008ae8:	b672      	cpsid	i
 8008aea:	46c0      	nop			@ (mov r8, r8)
 8008aec:	e7fd      	b.n	8008aea <xQueueCreateCountingSemaphore+0x20>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2202      	movs	r2, #2
 8008af2:	2100      	movs	r1, #0
 8008af4:	0018      	movs	r0, r3
 8008af6:	f7ff ff66 	bl	80089c6 <xQueueGenericCreate>
 8008afa:	0003      	movs	r3, r0
 8008afc:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
	}
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	b004      	add	sp, #16
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08a      	sub	sp, #40	@ 0x28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b22:	2300      	movs	r3, #0
 8008b24:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d102      	bne.n	8008b36 <xQueueGenericSend+0x22>
 8008b30:	b672      	cpsid	i
 8008b32:	46c0      	nop			@ (mov r8, r8)
 8008b34:	e7fd      	b.n	8008b32 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d103      	bne.n	8008b44 <xQueueGenericSend+0x30>
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d101      	bne.n	8008b48 <xQueueGenericSend+0x34>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e000      	b.n	8008b4a <xQueueGenericSend+0x36>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d102      	bne.n	8008b54 <xQueueGenericSend+0x40>
 8008b4e:	b672      	cpsid	i
 8008b50:	46c0      	nop			@ (mov r8, r8)
 8008b52:	e7fd      	b.n	8008b50 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d103      	bne.n	8008b62 <xQueueGenericSend+0x4e>
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d101      	bne.n	8008b66 <xQueueGenericSend+0x52>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <xQueueGenericSend+0x54>
 8008b66:	2300      	movs	r3, #0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d102      	bne.n	8008b72 <xQueueGenericSend+0x5e>
 8008b6c:	b672      	cpsid	i
 8008b6e:	46c0      	nop			@ (mov r8, r8)
 8008b70:	e7fd      	b.n	8008b6e <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b72:	f001 fafd 	bl	800a170 <xTaskGetSchedulerState>
 8008b76:	1e03      	subs	r3, r0, #0
 8008b78:	d102      	bne.n	8008b80 <xQueueGenericSend+0x6c>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <xQueueGenericSend+0x70>
 8008b80:	2301      	movs	r3, #1
 8008b82:	e000      	b.n	8008b86 <xQueueGenericSend+0x72>
 8008b84:	2300      	movs	r3, #0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d102      	bne.n	8008b90 <xQueueGenericSend+0x7c>
 8008b8a:	b672      	cpsid	i
 8008b8c:	46c0      	nop			@ (mov r8, r8)
 8008b8e:	e7fd      	b.n	8008b8c <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b90:	f002 f85e 	bl	800ac50 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b98:	6a3b      	ldr	r3, [r7, #32]
 8008b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d302      	bcc.n	8008ba6 <xQueueGenericSend+0x92>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d11e      	bne.n	8008be4 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ba6:	683a      	ldr	r2, [r7, #0]
 8008ba8:	68b9      	ldr	r1, [r7, #8]
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	0018      	movs	r0, r3
 8008bae:	f000 fb86 	bl	80092be <prvCopyDataToQueue>
 8008bb2:	0003      	movs	r3, r0
 8008bb4:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	3324      	adds	r3, #36	@ 0x24
 8008bc2:	0018      	movs	r0, r3
 8008bc4:	f001 f938 	bl	8009e38 <xTaskRemoveFromEventList>
 8008bc8:	1e03      	subs	r3, r0, #0
 8008bca:	d007      	beq.n	8008bdc <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bcc:	f002 f830 	bl	800ac30 <vPortYield>
 8008bd0:	e004      	b.n	8008bdc <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008bd8:	f002 f82a 	bl	800ac30 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bdc:	f002 f84a 	bl	800ac74 <vPortExitCritical>
				return pdPASS;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e05b      	b.n	8008c9c <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bea:	f002 f843 	bl	800ac74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	e054      	b.n	8008c9c <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bf8:	2314      	movs	r3, #20
 8008bfa:	18fb      	adds	r3, r7, r3
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	f001 f979 	bl	8009ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c02:	2301      	movs	r3, #1
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c06:	f002 f835 	bl	800ac74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c0a:	f000 ff1d 	bl	8009a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c0e:	f002 f81f 	bl	800ac50 <vPortEnterCritical>
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	2244      	movs	r2, #68	@ 0x44
 8008c16:	5c9b      	ldrb	r3, [r3, r2]
 8008c18:	b25b      	sxtb	r3, r3
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	d103      	bne.n	8008c26 <xQueueGenericSend+0x112>
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	2244      	movs	r2, #68	@ 0x44
 8008c22:	2100      	movs	r1, #0
 8008c24:	5499      	strb	r1, [r3, r2]
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	2245      	movs	r2, #69	@ 0x45
 8008c2a:	5c9b      	ldrb	r3, [r3, r2]
 8008c2c:	b25b      	sxtb	r3, r3
 8008c2e:	3301      	adds	r3, #1
 8008c30:	d103      	bne.n	8008c3a <xQueueGenericSend+0x126>
 8008c32:	6a3b      	ldr	r3, [r7, #32]
 8008c34:	2245      	movs	r2, #69	@ 0x45
 8008c36:	2100      	movs	r1, #0
 8008c38:	5499      	strb	r1, [r3, r2]
 8008c3a:	f002 f81b 	bl	800ac74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c3e:	1d3a      	adds	r2, r7, #4
 8008c40:	2314      	movs	r3, #20
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	0011      	movs	r1, r2
 8008c46:	0018      	movs	r0, r3
 8008c48:	f001 f968 	bl	8009f1c <xTaskCheckForTimeOut>
 8008c4c:	1e03      	subs	r3, r0, #0
 8008c4e:	d11e      	bne.n	8008c8e <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c50:	6a3b      	ldr	r3, [r7, #32]
 8008c52:	0018      	movs	r0, r3
 8008c54:	f000 fc38 	bl	80094c8 <prvIsQueueFull>
 8008c58:	1e03      	subs	r3, r0, #0
 8008c5a:	d011      	beq.n	8008c80 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c5c:	6a3b      	ldr	r3, [r7, #32]
 8008c5e:	3310      	adds	r3, #16
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	0011      	movs	r1, r2
 8008c64:	0018      	movs	r0, r3
 8008c66:	f001 f89f 	bl	8009da8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f000 fbb7 	bl	80093e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c72:	f000 fef5 	bl	8009a60 <xTaskResumeAll>
 8008c76:	1e03      	subs	r3, r0, #0
 8008c78:	d18a      	bne.n	8008b90 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8008c7a:	f001 ffd9 	bl	800ac30 <vPortYield>
 8008c7e:	e787      	b.n	8008b90 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	0018      	movs	r0, r3
 8008c84:	f000 fbac 	bl	80093e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c88:	f000 feea 	bl	8009a60 <xTaskResumeAll>
 8008c8c:	e780      	b.n	8008b90 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	0018      	movs	r0, r3
 8008c92:	f000 fba5 	bl	80093e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c96:	f000 fee3 	bl	8009a60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c9c:	0018      	movs	r0, r3
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	b00a      	add	sp, #40	@ 0x28
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ca4:	b590      	push	{r4, r7, lr}
 8008ca6:	b08b      	sub	sp, #44	@ 0x2c
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
 8008cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <xQueueGenericSendFromISR+0x1e>
 8008cbc:	b672      	cpsid	i
 8008cbe:	46c0      	nop			@ (mov r8, r8)
 8008cc0:	e7fd      	b.n	8008cbe <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d103      	bne.n	8008cd0 <xQueueGenericSendFromISR+0x2c>
 8008cc8:	6a3b      	ldr	r3, [r7, #32]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d101      	bne.n	8008cd4 <xQueueGenericSendFromISR+0x30>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e000      	b.n	8008cd6 <xQueueGenericSendFromISR+0x32>
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <xQueueGenericSendFromISR+0x3c>
 8008cda:	b672      	cpsid	i
 8008cdc:	46c0      	nop			@ (mov r8, r8)
 8008cde:	e7fd      	b.n	8008cdc <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d103      	bne.n	8008cee <xQueueGenericSendFromISR+0x4a>
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <xQueueGenericSendFromISR+0x4e>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e000      	b.n	8008cf4 <xQueueGenericSendFromISR+0x50>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d102      	bne.n	8008cfe <xQueueGenericSendFromISR+0x5a>
 8008cf8:	b672      	cpsid	i
 8008cfa:	46c0      	nop			@ (mov r8, r8)
 8008cfc:	e7fd      	b.n	8008cfa <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cfe:	f001 ffd1 	bl	800aca4 <ulSetInterruptMaskFromISR>
 8008d02:	0003      	movs	r3, r0
 8008d04:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d0a:	6a3b      	ldr	r3, [r7, #32]
 8008d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d302      	bcc.n	8008d18 <xQueueGenericSendFromISR+0x74>
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d131      	bne.n	8008d7c <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d18:	241b      	movs	r4, #27
 8008d1a:	193b      	adds	r3, r7, r4
 8008d1c:	6a3a      	ldr	r2, [r7, #32]
 8008d1e:	2145      	movs	r1, #69	@ 0x45
 8008d20:	5c52      	ldrb	r2, [r2, r1]
 8008d22:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d28:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	0018      	movs	r0, r3
 8008d32:	f000 fac4 	bl	80092be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d36:	193b      	adds	r3, r7, r4
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	b25b      	sxtb	r3, r3
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	d111      	bne.n	8008d64 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d40:	6a3b      	ldr	r3, [r7, #32]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d016      	beq.n	8008d76 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	3324      	adds	r3, #36	@ 0x24
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	f001 f873 	bl	8009e38 <xTaskRemoveFromEventList>
 8008d52:	1e03      	subs	r3, r0, #0
 8008d54:	d00f      	beq.n	8008d76 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00c      	beq.n	8008d76 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	e008      	b.n	8008d76 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d64:	231b      	movs	r3, #27
 8008d66:	18fb      	adds	r3, r7, r3
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	b259      	sxtb	r1, r3
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	2245      	movs	r2, #69	@ 0x45
 8008d74:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008d76:	2301      	movs	r3, #1
 8008d78:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 8008d7a:	e001      	b.n	8008d80 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	0018      	movs	r0, r3
 8008d84:	f001 ff94 	bl	800acb0 <vClearInterruptMaskFromISR>

	return xReturn;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d8a:	0018      	movs	r0, r3
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	b00b      	add	sp, #44	@ 0x2c
 8008d90:	bd90      	pop	{r4, r7, pc}

08008d92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d102      	bne.n	8008dac <xQueueGiveFromISR+0x1a>
 8008da6:	b672      	cpsid	i
 8008da8:	46c0      	nop			@ (mov r8, r8)
 8008daa:	e7fd      	b.n	8008da8 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008dac:	69bb      	ldr	r3, [r7, #24]
 8008dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <xQueueGiveFromISR+0x28>
 8008db4:	b672      	cpsid	i
 8008db6:	46c0      	nop			@ (mov r8, r8)
 8008db8:	e7fd      	b.n	8008db6 <xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <xQueueGiveFromISR+0x38>
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <xQueueGiveFromISR+0x3c>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e000      	b.n	8008dd0 <xQueueGiveFromISR+0x3e>
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d102      	bne.n	8008dda <xQueueGiveFromISR+0x48>
 8008dd4:	b672      	cpsid	i
 8008dd6:	46c0      	nop			@ (mov r8, r8)
 8008dd8:	e7fd      	b.n	8008dd6 <xQueueGiveFromISR+0x44>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dda:	f001 ff63 	bl	800aca4 <ulSetInterruptMaskFromISR>
 8008dde:	0003      	movs	r3, r0
 8008de0:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de6:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d22c      	bcs.n	8008e4c <xQueueGiveFromISR+0xba>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008df2:	200f      	movs	r0, #15
 8008df4:	183b      	adds	r3, r7, r0
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	2145      	movs	r1, #69	@ 0x45
 8008dfa:	5c52      	ldrb	r2, [r2, r1]
 8008dfc:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e06:	183b      	adds	r3, r7, r0
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b25b      	sxtb	r3, r3
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	d111      	bne.n	8008e34 <xQueueGiveFromISR+0xa2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d016      	beq.n	8008e46 <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	3324      	adds	r3, #36	@ 0x24
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	f001 f80b 	bl	8009e38 <xTaskRemoveFromEventList>
 8008e22:	1e03      	subs	r3, r0, #0
 8008e24:	d00f      	beq.n	8008e46 <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00c      	beq.n	8008e46 <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	e008      	b.n	8008e46 <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e34:	230f      	movs	r3, #15
 8008e36:	18fb      	adds	r3, r7, r3
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	b259      	sxtb	r1, r3
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	2245      	movs	r2, #69	@ 0x45
 8008e44:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008e46:	2301      	movs	r3, #1
 8008e48:	61fb      	str	r3, [r7, #28]
 8008e4a:	e001      	b.n	8008e50 <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	0018      	movs	r0, r3
 8008e54:	f001 ff2c 	bl	800acb0 <vClearInterruptMaskFromISR>

	return xReturn;
 8008e58:	69fb      	ldr	r3, [r7, #28]
}
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	b008      	add	sp, #32
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b08a      	sub	sp, #40	@ 0x28
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d102      	bne.n	8008e82 <xQueueReceive+0x20>
 8008e7c:	b672      	cpsid	i
 8008e7e:	46c0      	nop			@ (mov r8, r8)
 8008e80:	e7fd      	b.n	8008e7e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d103      	bne.n	8008e90 <xQueueReceive+0x2e>
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <xQueueReceive+0x32>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e000      	b.n	8008e96 <xQueueReceive+0x34>
 8008e94:	2300      	movs	r3, #0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <xQueueReceive+0x3e>
 8008e9a:	b672      	cpsid	i
 8008e9c:	46c0      	nop			@ (mov r8, r8)
 8008e9e:	e7fd      	b.n	8008e9c <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ea0:	f001 f966 	bl	800a170 <xTaskGetSchedulerState>
 8008ea4:	1e03      	subs	r3, r0, #0
 8008ea6:	d102      	bne.n	8008eae <xQueueReceive+0x4c>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <xQueueReceive+0x50>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e000      	b.n	8008eb4 <xQueueReceive+0x52>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <xQueueReceive+0x5c>
 8008eb8:	b672      	cpsid	i
 8008eba:	46c0      	nop			@ (mov r8, r8)
 8008ebc:	e7fd      	b.n	8008eba <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ebe:	f001 fec7 	bl	800ac50 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d01a      	beq.n	8008f04 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	0011      	movs	r1, r2
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f000 fa5d 	bl	8009394 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	1e5a      	subs	r2, r3, #1
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d008      	beq.n	8008efc <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eea:	6a3b      	ldr	r3, [r7, #32]
 8008eec:	3310      	adds	r3, #16
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f000 ffa2 	bl	8009e38 <xTaskRemoveFromEventList>
 8008ef4:	1e03      	subs	r3, r0, #0
 8008ef6:	d001      	beq.n	8008efc <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ef8:	f001 fe9a 	bl	800ac30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008efc:	f001 feba 	bl	800ac74 <vPortExitCritical>
				return pdPASS;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e062      	b.n	8008fca <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d103      	bne.n	8008f12 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f0a:	f001 feb3 	bl	800ac74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	e05b      	b.n	8008fca <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f18:	2314      	movs	r3, #20
 8008f1a:	18fb      	adds	r3, r7, r3
 8008f1c:	0018      	movs	r0, r3
 8008f1e:	f000 ffe9 	bl	8009ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f22:	2301      	movs	r3, #1
 8008f24:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f26:	f001 fea5 	bl	800ac74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f2a:	f000 fd8d 	bl	8009a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f2e:	f001 fe8f 	bl	800ac50 <vPortEnterCritical>
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	2244      	movs	r2, #68	@ 0x44
 8008f36:	5c9b      	ldrb	r3, [r3, r2]
 8008f38:	b25b      	sxtb	r3, r3
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	d103      	bne.n	8008f46 <xQueueReceive+0xe4>
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	2244      	movs	r2, #68	@ 0x44
 8008f42:	2100      	movs	r1, #0
 8008f44:	5499      	strb	r1, [r3, r2]
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	2245      	movs	r2, #69	@ 0x45
 8008f4a:	5c9b      	ldrb	r3, [r3, r2]
 8008f4c:	b25b      	sxtb	r3, r3
 8008f4e:	3301      	adds	r3, #1
 8008f50:	d103      	bne.n	8008f5a <xQueueReceive+0xf8>
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	2245      	movs	r2, #69	@ 0x45
 8008f56:	2100      	movs	r1, #0
 8008f58:	5499      	strb	r1, [r3, r2]
 8008f5a:	f001 fe8b 	bl	800ac74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f5e:	1d3a      	adds	r2, r7, #4
 8008f60:	2314      	movs	r3, #20
 8008f62:	18fb      	adds	r3, r7, r3
 8008f64:	0011      	movs	r1, r2
 8008f66:	0018      	movs	r0, r3
 8008f68:	f000 ffd8 	bl	8009f1c <xTaskCheckForTimeOut>
 8008f6c:	1e03      	subs	r3, r0, #0
 8008f6e:	d11e      	bne.n	8008fae <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	0018      	movs	r0, r3
 8008f74:	f000 fa92 	bl	800949c <prvIsQueueEmpty>
 8008f78:	1e03      	subs	r3, r0, #0
 8008f7a:	d011      	beq.n	8008fa0 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	3324      	adds	r3, #36	@ 0x24
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	0011      	movs	r1, r2
 8008f84:	0018      	movs	r0, r3
 8008f86:	f000 ff0f 	bl	8009da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	f000 fa27 	bl	80093e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f92:	f000 fd65 	bl	8009a60 <xTaskResumeAll>
 8008f96:	1e03      	subs	r3, r0, #0
 8008f98:	d191      	bne.n	8008ebe <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8008f9a:	f001 fe49 	bl	800ac30 <vPortYield>
 8008f9e:	e78e      	b.n	8008ebe <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	f000 fa1c 	bl	80093e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa8:	f000 fd5a 	bl	8009a60 <xTaskResumeAll>
 8008fac:	e787      	b.n	8008ebe <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	0018      	movs	r0, r3
 8008fb2:	f000 fa15 	bl	80093e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fb6:	f000 fd53 	bl	8009a60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	f000 fa6d 	bl	800949c <prvIsQueueEmpty>
 8008fc2:	1e03      	subs	r3, r0, #0
 8008fc4:	d100      	bne.n	8008fc8 <xQueueReceive+0x166>
 8008fc6:	e77a      	b.n	8008ebe <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fca:	0018      	movs	r0, r3
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	b00a      	add	sp, #40	@ 0x28
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b08a      	sub	sp, #40	@ 0x28
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d102      	bne.n	8008ff4 <xQueueSemaphoreTake+0x22>
 8008fee:	b672      	cpsid	i
 8008ff0:	46c0      	nop			@ (mov r8, r8)
 8008ff2:	e7fd      	b.n	8008ff0 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <xQueueSemaphoreTake+0x30>
 8008ffc:	b672      	cpsid	i
 8008ffe:	46c0      	nop			@ (mov r8, r8)
 8009000:	e7fd      	b.n	8008ffe <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009002:	f001 f8b5 	bl	800a170 <xTaskGetSchedulerState>
 8009006:	1e03      	subs	r3, r0, #0
 8009008:	d102      	bne.n	8009010 <xQueueSemaphoreTake+0x3e>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <xQueueSemaphoreTake+0x42>
 8009010:	2301      	movs	r3, #1
 8009012:	e000      	b.n	8009016 <xQueueSemaphoreTake+0x44>
 8009014:	2300      	movs	r3, #0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d102      	bne.n	8009020 <xQueueSemaphoreTake+0x4e>
 800901a:	b672      	cpsid	i
 800901c:	46c0      	nop			@ (mov r8, r8)
 800901e:	e7fd      	b.n	800901c <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009020:	f001 fe16 	bl	800ac50 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009028:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01d      	beq.n	800906c <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009030:	69bb      	ldr	r3, [r7, #24]
 8009032:	1e5a      	subs	r2, r3, #1
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009040:	f001 f9ea 	bl	800a418 <pvTaskIncrementMutexHeldCount>
 8009044:	0002      	movs	r2, r0
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d008      	beq.n	8009064 <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	3310      	adds	r3, #16
 8009056:	0018      	movs	r0, r3
 8009058:	f000 feee 	bl	8009e38 <xTaskRemoveFromEventList>
 800905c:	1e03      	subs	r3, r0, #0
 800905e:	d001      	beq.n	8009064 <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009060:	f001 fde6 	bl	800ac30 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009064:	f001 fe06 	bl	800ac74 <vPortExitCritical>
				return pdPASS;
 8009068:	2301      	movs	r3, #1
 800906a:	e08c      	b.n	8009186 <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d109      	bne.n	8009086 <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <xQueueSemaphoreTake+0xac>
 8009078:	b672      	cpsid	i
 800907a:	46c0      	nop			@ (mov r8, r8)
 800907c:	e7fd      	b.n	800907a <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800907e:	f001 fdf9 	bl	800ac74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009082:	2300      	movs	r3, #0
 8009084:	e07f      	b.n	8009186 <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	2b00      	cmp	r3, #0
 800908a:	d106      	bne.n	800909a <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800908c:	230c      	movs	r3, #12
 800908e:	18fb      	adds	r3, r7, r3
 8009090:	0018      	movs	r0, r3
 8009092:	f000 ff2f 	bl	8009ef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009096:	2301      	movs	r3, #1
 8009098:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800909a:	f001 fdeb 	bl	800ac74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800909e:	f000 fcd3 	bl	8009a48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090a2:	f001 fdd5 	bl	800ac50 <vPortEnterCritical>
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	2244      	movs	r2, #68	@ 0x44
 80090aa:	5c9b      	ldrb	r3, [r3, r2]
 80090ac:	b25b      	sxtb	r3, r3
 80090ae:	3301      	adds	r3, #1
 80090b0:	d103      	bne.n	80090ba <xQueueSemaphoreTake+0xe8>
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	2244      	movs	r2, #68	@ 0x44
 80090b6:	2100      	movs	r1, #0
 80090b8:	5499      	strb	r1, [r3, r2]
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	2245      	movs	r2, #69	@ 0x45
 80090be:	5c9b      	ldrb	r3, [r3, r2]
 80090c0:	b25b      	sxtb	r3, r3
 80090c2:	3301      	adds	r3, #1
 80090c4:	d103      	bne.n	80090ce <xQueueSemaphoreTake+0xfc>
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	2245      	movs	r2, #69	@ 0x45
 80090ca:	2100      	movs	r1, #0
 80090cc:	5499      	strb	r1, [r3, r2]
 80090ce:	f001 fdd1 	bl	800ac74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090d2:	003a      	movs	r2, r7
 80090d4:	230c      	movs	r3, #12
 80090d6:	18fb      	adds	r3, r7, r3
 80090d8:	0011      	movs	r1, r2
 80090da:	0018      	movs	r0, r3
 80090dc:	f000 ff1e 	bl	8009f1c <xTaskCheckForTimeOut>
 80090e0:	1e03      	subs	r3, r0, #0
 80090e2:	d12e      	bne.n	8009142 <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	0018      	movs	r0, r3
 80090e8:	f000 f9d8 	bl	800949c <prvIsQueueEmpty>
 80090ec:	1e03      	subs	r3, r0, #0
 80090ee:	d021      	beq.n	8009134 <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 80090f8:	f001 fdaa 	bl	800ac50 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	0018      	movs	r0, r3
 8009102:	f001 f851 	bl	800a1a8 <xTaskPriorityInherit>
 8009106:	0003      	movs	r3, r0
 8009108:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800910a:	f001 fdb3 	bl	800ac74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	3324      	adds	r3, #36	@ 0x24
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	0011      	movs	r1, r2
 8009116:	0018      	movs	r0, r3
 8009118:	f000 fe46 	bl	8009da8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	0018      	movs	r0, r3
 8009120:	f000 f95e 	bl	80093e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009124:	f000 fc9c 	bl	8009a60 <xTaskResumeAll>
 8009128:	1e03      	subs	r3, r0, #0
 800912a:	d000      	beq.n	800912e <xQueueSemaphoreTake+0x15c>
 800912c:	e778      	b.n	8009020 <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 800912e:	f001 fd7f 	bl	800ac30 <vPortYield>
 8009132:	e775      	b.n	8009020 <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	0018      	movs	r0, r3
 8009138:	f000 f952 	bl	80093e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800913c:	f000 fc90 	bl	8009a60 <xTaskResumeAll>
 8009140:	e76e      	b.n	8009020 <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	0018      	movs	r0, r3
 8009146:	f000 f94b 	bl	80093e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800914a:	f000 fc89 	bl	8009a60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	0018      	movs	r0, r3
 8009152:	f000 f9a3 	bl	800949c <prvIsQueueEmpty>
 8009156:	1e03      	subs	r3, r0, #0
 8009158:	d100      	bne.n	800915c <xQueueSemaphoreTake+0x18a>
 800915a:	e761      	b.n	8009020 <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d010      	beq.n	8009184 <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 8009162:	f001 fd75 	bl	800ac50 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	0018      	movs	r0, r3
 800916a:	f000 f892 	bl	8009292 <prvGetDisinheritPriorityAfterTimeout>
 800916e:	0003      	movs	r3, r0
 8009170:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	0011      	movs	r1, r2
 800917a:	0018      	movs	r0, r3
 800917c:	f001 f8da 	bl	800a334 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009180:	f001 fd78 	bl	800ac74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009184:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009186:	0018      	movs	r0, r3
 8009188:	46bd      	mov	sp, r7
 800918a:	b00a      	add	sp, #40	@ 0x28
 800918c:	bd80      	pop	{r7, pc}

0800918e <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800918e:	b590      	push	{r4, r7, lr}
 8009190:	b08b      	sub	sp, #44	@ 0x2c
 8009192:	af00      	add	r7, sp, #0
 8009194:	60f8      	str	r0, [r7, #12]
 8009196:	60b9      	str	r1, [r7, #8]
 8009198:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <xQueueReceiveFromISR+0x1c>
 80091a4:	b672      	cpsid	i
 80091a6:	46c0      	nop			@ (mov r8, r8)
 80091a8:	e7fd      	b.n	80091a6 <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d103      	bne.n	80091b8 <xQueueReceiveFromISR+0x2a>
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <xQueueReceiveFromISR+0x2e>
 80091b8:	2301      	movs	r3, #1
 80091ba:	e000      	b.n	80091be <xQueueReceiveFromISR+0x30>
 80091bc:	2300      	movs	r3, #0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d102      	bne.n	80091c8 <xQueueReceiveFromISR+0x3a>
 80091c2:	b672      	cpsid	i
 80091c4:	46c0      	nop			@ (mov r8, r8)
 80091c6:	e7fd      	b.n	80091c4 <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091c8:	f001 fd6c 	bl	800aca4 <ulSetInterruptMaskFromISR>
 80091cc:	0003      	movs	r3, r0
 80091ce:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d4:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d032      	beq.n	8009242 <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80091dc:	2417      	movs	r4, #23
 80091de:	193b      	adds	r3, r7, r4
 80091e0:	6a3a      	ldr	r2, [r7, #32]
 80091e2:	2144      	movs	r1, #68	@ 0x44
 80091e4:	5c52      	ldrb	r2, [r2, r1]
 80091e6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	0011      	movs	r1, r2
 80091ee:	0018      	movs	r0, r3
 80091f0:	f000 f8d0 	bl	8009394 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	1e5a      	subs	r2, r3, #1
 80091f8:	6a3b      	ldr	r3, [r7, #32]
 80091fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80091fc:	193b      	adds	r3, r7, r4
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b25b      	sxtb	r3, r3
 8009202:	3301      	adds	r3, #1
 8009204:	d111      	bne.n	800922a <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d016      	beq.n	800923c <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	3310      	adds	r3, #16
 8009212:	0018      	movs	r0, r3
 8009214:	f000 fe10 	bl	8009e38 <xTaskRemoveFromEventList>
 8009218:	1e03      	subs	r3, r0, #0
 800921a:	d00f      	beq.n	800923c <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00c      	beq.n	800923c <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	e008      	b.n	800923c <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800922a:	2317      	movs	r3, #23
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	b2db      	uxtb	r3, r3
 8009234:	b259      	sxtb	r1, r3
 8009236:	6a3b      	ldr	r3, [r7, #32]
 8009238:	2244      	movs	r2, #68	@ 0x44
 800923a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800923c:	2301      	movs	r3, #1
 800923e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009240:	e001      	b.n	8009246 <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 8009242:	2300      	movs	r3, #0
 8009244:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	0018      	movs	r0, r3
 800924a:	f001 fd31 	bl	800acb0 <vClearInterruptMaskFromISR>

	return xReturn;
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009250:	0018      	movs	r0, r3
 8009252:	46bd      	mov	sp, r7
 8009254:	b00b      	add	sp, #44	@ 0x2c
 8009256:	bd90      	pop	{r4, r7, pc}

08009258 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d102      	bne.n	8009270 <vQueueDelete+0x18>
 800926a:	b672      	cpsid	i
 800926c:	46c0      	nop			@ (mov r8, r8)
 800926e:	e7fd      	b.n	800926c <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	0018      	movs	r0, r3
 8009274:	f000 f968 	bl	8009548 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2246      	movs	r2, #70	@ 0x46
 800927c:	5c9b      	ldrb	r3, [r3, r2]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <vQueueDelete+0x32>
		{
			vPortFree( pxQueue );
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	0018      	movs	r0, r3
 8009286:	f001 fe2b 	bl	800aee0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800928a:	46c0      	nop			@ (mov r8, r8)
 800928c:	46bd      	mov	sp, r7
 800928e:	b004      	add	sp, #16
 8009290:	bd80      	pop	{r7, pc}

08009292 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d006      	beq.n	80092b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2238      	movs	r2, #56	@ 0x38
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	e001      	b.n	80092b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80092b4:	68fb      	ldr	r3, [r7, #12]
	}
 80092b6:	0018      	movs	r0, r3
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b004      	add	sp, #16
 80092bc:	bd80      	pop	{r7, pc}

080092be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b086      	sub	sp, #24
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092ca:	2300      	movs	r3, #0
 80092cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10e      	bne.n	80092fa <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d14e      	bne.n	8009382 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	0018      	movs	r0, r3
 80092ea:	f000 ffc5 	bl	800a278 <xTaskPriorityDisinherit>
 80092ee:	0003      	movs	r3, r0
 80092f0:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	609a      	str	r2, [r3, #8]
 80092f8:	e043      	b.n	8009382 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d119      	bne.n	8009334 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6858      	ldr	r0, [r3, #4]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	0019      	movs	r1, r3
 800930c:	f001 ffbc 	bl	800b288 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009318:	18d2      	adds	r2, r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	429a      	cmp	r2, r3
 8009328:	d32b      	bcc.n	8009382 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	605a      	str	r2, [r3, #4]
 8009332:	e026      	b.n	8009382 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	68d8      	ldr	r0, [r3, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	0019      	movs	r1, r3
 8009340:	f001 ffa2 	bl	800b288 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	68da      	ldr	r2, [r3, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800934c:	425b      	negs	r3, r3
 800934e:	18d2      	adds	r2, r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68da      	ldr	r2, [r3, #12]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	429a      	cmp	r2, r3
 800935e:	d207      	bcs.n	8009370 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009368:	425b      	negs	r3, r3
 800936a:	18d2      	adds	r2, r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d105      	bne.n	8009382 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	3b01      	subs	r3, #1
 8009380:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800938a:	697b      	ldr	r3, [r7, #20]
}
 800938c:	0018      	movs	r0, r3
 800938e:	46bd      	mov	sp, r7
 8009390:	b006      	add	sp, #24
 8009392:	bd80      	pop	{r7, pc}

08009394 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d018      	beq.n	80093d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68da      	ldr	r2, [r3, #12]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ae:	18d2      	adds	r2, r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68da      	ldr	r2, [r3, #12]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d303      	bcc.n	80093c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68d9      	ldr	r1, [r3, #12]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	0018      	movs	r0, r3
 80093d4:	f001 ff58 	bl	800b288 <memcpy>
	}
}
 80093d8:	46c0      	nop			@ (mov r8, r8)
 80093da:	46bd      	mov	sp, r7
 80093dc:	b002      	add	sp, #8
 80093de:	bd80      	pop	{r7, pc}

080093e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093e8:	f001 fc32 	bl	800ac50 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093ec:	230f      	movs	r3, #15
 80093ee:	18fb      	adds	r3, r7, r3
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	2145      	movs	r1, #69	@ 0x45
 80093f4:	5c52      	ldrb	r2, [r2, r1]
 80093f6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093f8:	e013      	b.n	8009422 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d016      	beq.n	8009430 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	3324      	adds	r3, #36	@ 0x24
 8009406:	0018      	movs	r0, r3
 8009408:	f000 fd16 	bl	8009e38 <xTaskRemoveFromEventList>
 800940c:	1e03      	subs	r3, r0, #0
 800940e:	d001      	beq.n	8009414 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009410:	f000 fdd6 	bl	8009fc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009414:	210f      	movs	r1, #15
 8009416:	187b      	adds	r3, r7, r1
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	3b01      	subs	r3, #1
 800941c:	b2da      	uxtb	r2, r3
 800941e:	187b      	adds	r3, r7, r1
 8009420:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009422:	230f      	movs	r3, #15
 8009424:	18fb      	adds	r3, r7, r3
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	b25b      	sxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	dce5      	bgt.n	80093fa <prvUnlockQueue+0x1a>
 800942e:	e000      	b.n	8009432 <prvUnlockQueue+0x52>
					break;
 8009430:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2245      	movs	r2, #69	@ 0x45
 8009436:	21ff      	movs	r1, #255	@ 0xff
 8009438:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800943a:	f001 fc1b 	bl	800ac74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800943e:	f001 fc07 	bl	800ac50 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009442:	230e      	movs	r3, #14
 8009444:	18fb      	adds	r3, r7, r3
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	2144      	movs	r1, #68	@ 0x44
 800944a:	5c52      	ldrb	r2, [r2, r1]
 800944c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800944e:	e013      	b.n	8009478 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d016      	beq.n	8009486 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	3310      	adds	r3, #16
 800945c:	0018      	movs	r0, r3
 800945e:	f000 fceb 	bl	8009e38 <xTaskRemoveFromEventList>
 8009462:	1e03      	subs	r3, r0, #0
 8009464:	d001      	beq.n	800946a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8009466:	f000 fdab 	bl	8009fc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800946a:	210e      	movs	r1, #14
 800946c:	187b      	adds	r3, r7, r1
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	3b01      	subs	r3, #1
 8009472:	b2da      	uxtb	r2, r3
 8009474:	187b      	adds	r3, r7, r1
 8009476:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009478:	230e      	movs	r3, #14
 800947a:	18fb      	adds	r3, r7, r3
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	b25b      	sxtb	r3, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	dce5      	bgt.n	8009450 <prvUnlockQueue+0x70>
 8009484:	e000      	b.n	8009488 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8009486:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2244      	movs	r2, #68	@ 0x44
 800948c:	21ff      	movs	r1, #255	@ 0xff
 800948e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009490:	f001 fbf0 	bl	800ac74 <vPortExitCritical>
}
 8009494:	46c0      	nop			@ (mov r8, r8)
 8009496:	46bd      	mov	sp, r7
 8009498:	b004      	add	sp, #16
 800949a:	bd80      	pop	{r7, pc}

0800949c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094a4:	f001 fbd4 	bl	800ac50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d102      	bne.n	80094b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	e001      	b.n	80094ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094ba:	f001 fbdb 	bl	800ac74 <vPortExitCritical>

	return xReturn;
 80094be:	68fb      	ldr	r3, [r7, #12]
}
 80094c0:	0018      	movs	r0, r3
 80094c2:	46bd      	mov	sp, r7
 80094c4:	b004      	add	sp, #16
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094d0:	f001 fbbe 	bl	800ac50 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094dc:	429a      	cmp	r2, r3
 80094de:	d102      	bne.n	80094e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094e0:	2301      	movs	r3, #1
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e001      	b.n	80094ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094ea:	f001 fbc3 	bl	800ac74 <vPortExitCritical>

	return xReturn;
 80094ee:	68fb      	ldr	r3, [r7, #12]
}
 80094f0:	0018      	movs	r0, r3
 80094f2:	46bd      	mov	sp, r7
 80094f4:	b004      	add	sp, #16
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	e015      	b.n	8009534 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009508:	4b0e      	ldr	r3, [pc, #56]	@ (8009544 <vQueueAddToRegistry+0x4c>)
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	00d2      	lsls	r2, r2, #3
 800950e:	58d3      	ldr	r3, [r2, r3]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10c      	bne.n	800952e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009514:	4b0b      	ldr	r3, [pc, #44]	@ (8009544 <vQueueAddToRegistry+0x4c>)
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	00d2      	lsls	r2, r2, #3
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800951e:	4a09      	ldr	r2, [pc, #36]	@ (8009544 <vQueueAddToRegistry+0x4c>)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	00db      	lsls	r3, r3, #3
 8009524:	18d3      	adds	r3, r2, r3
 8009526:	3304      	adds	r3, #4
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800952c:	e006      	b.n	800953c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3301      	adds	r3, #1
 8009532:	60fb      	str	r3, [r7, #12]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b07      	cmp	r3, #7
 8009538:	d9e6      	bls.n	8009508 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800953a:	46c0      	nop			@ (mov r8, r8)
 800953c:	46c0      	nop			@ (mov r8, r8)
 800953e:	46bd      	mov	sp, r7
 8009540:	b004      	add	sp, #16
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20000c48 	.word	0x20000c48

08009548 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009550:	2300      	movs	r3, #0
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	e018      	b.n	8009588 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009556:	4a10      	ldr	r2, [pc, #64]	@ (8009598 <vQueueUnregisterQueue+0x50>)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	18d3      	adds	r3, r2, r3
 800955e:	3304      	adds	r3, #4
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	429a      	cmp	r2, r3
 8009566:	d10c      	bne.n	8009582 <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009568:	4b0b      	ldr	r3, [pc, #44]	@ (8009598 <vQueueUnregisterQueue+0x50>)
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	00d2      	lsls	r2, r2, #3
 800956e:	2100      	movs	r1, #0
 8009570:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009572:	4a09      	ldr	r2, [pc, #36]	@ (8009598 <vQueueUnregisterQueue+0x50>)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	00db      	lsls	r3, r3, #3
 8009578:	18d3      	adds	r3, r2, r3
 800957a:	3304      	adds	r3, #4
 800957c:	2200      	movs	r2, #0
 800957e:	601a      	str	r2, [r3, #0]
				break;
 8009580:	e006      	b.n	8009590 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b07      	cmp	r3, #7
 800958c:	d9e3      	bls.n	8009556 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800958e:	46c0      	nop			@ (mov r8, r8)
 8009590:	46c0      	nop			@ (mov r8, r8)
 8009592:	46bd      	mov	sp, r7
 8009594:	b004      	add	sp, #16
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20000c48 	.word	0x20000c48

0800959c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80095ac:	f001 fb50 	bl	800ac50 <vPortEnterCritical>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2244      	movs	r2, #68	@ 0x44
 80095b4:	5c9b      	ldrb	r3, [r3, r2]
 80095b6:	b25b      	sxtb	r3, r3
 80095b8:	3301      	adds	r3, #1
 80095ba:	d103      	bne.n	80095c4 <vQueueWaitForMessageRestricted+0x28>
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2244      	movs	r2, #68	@ 0x44
 80095c0:	2100      	movs	r1, #0
 80095c2:	5499      	strb	r1, [r3, r2]
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	2245      	movs	r2, #69	@ 0x45
 80095c8:	5c9b      	ldrb	r3, [r3, r2]
 80095ca:	b25b      	sxtb	r3, r3
 80095cc:	3301      	adds	r3, #1
 80095ce:	d103      	bne.n	80095d8 <vQueueWaitForMessageRestricted+0x3c>
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2245      	movs	r2, #69	@ 0x45
 80095d4:	2100      	movs	r1, #0
 80095d6:	5499      	strb	r1, [r3, r2]
 80095d8:	f001 fb4c 	bl	800ac74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	3324      	adds	r3, #36	@ 0x24
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	68b9      	ldr	r1, [r7, #8]
 80095ec:	0018      	movs	r0, r3
 80095ee:	f000 fbfb 	bl	8009de8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	0018      	movs	r0, r3
 80095f6:	f7ff fef3 	bl	80093e0 <prvUnlockQueue>
	}
 80095fa:	46c0      	nop			@ (mov r8, r8)
 80095fc:	46bd      	mov	sp, r7
 80095fe:	b006      	add	sp, #24
 8009600:	bd80      	pop	{r7, pc}

08009602 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009602:	b590      	push	{r4, r7, lr}
 8009604:	b08d      	sub	sp, #52	@ 0x34
 8009606:	af04      	add	r7, sp, #16
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009612:	2b00      	cmp	r3, #0
 8009614:	d102      	bne.n	800961c <xTaskCreateStatic+0x1a>
 8009616:	b672      	cpsid	i
 8009618:	46c0      	nop			@ (mov r8, r8)
 800961a:	e7fd      	b.n	8009618 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800961c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <xTaskCreateStatic+0x26>
 8009622:	b672      	cpsid	i
 8009624:	46c0      	nop			@ (mov r8, r8)
 8009626:	e7fd      	b.n	8009624 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009628:	23a8      	movs	r3, #168	@ 0xa8
 800962a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2ba8      	cmp	r3, #168	@ 0xa8
 8009630:	d002      	beq.n	8009638 <xTaskCreateStatic+0x36>
 8009632:	b672      	cpsid	i
 8009634:	46c0      	nop			@ (mov r8, r8)
 8009636:	e7fd      	b.n	8009634 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009638:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800963a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963c:	2b00      	cmp	r3, #0
 800963e:	d020      	beq.n	8009682 <xTaskCreateStatic+0x80>
 8009640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009642:	2b00      	cmp	r3, #0
 8009644:	d01d      	beq.n	8009682 <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009648:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800964e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	22a5      	movs	r2, #165	@ 0xa5
 8009654:	2102      	movs	r1, #2
 8009656:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009658:	683c      	ldr	r4, [r7, #0]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	2300      	movs	r3, #0
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	9302      	str	r3, [sp, #8]
 8009668:	2318      	movs	r3, #24
 800966a:	18fb      	adds	r3, r7, r3
 800966c:	9301      	str	r3, [sp, #4]
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	0023      	movs	r3, r4
 8009674:	f000 f858 	bl	8009728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	0018      	movs	r0, r3
 800967c:	f000 f8f6 	bl	800986c <prvAddNewTaskToReadyList>
 8009680:	e001      	b.n	8009686 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 8009682:	2300      	movs	r3, #0
 8009684:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009686:	69bb      	ldr	r3, [r7, #24]
	}
 8009688:	0018      	movs	r0, r3
 800968a:	46bd      	mov	sp, r7
 800968c:	b009      	add	sp, #36	@ 0x24
 800968e:	bd90      	pop	{r4, r7, pc}

08009690 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009690:	b590      	push	{r4, r7, lr}
 8009692:	b08d      	sub	sp, #52	@ 0x34
 8009694:	af04      	add	r7, sp, #16
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	1dbb      	adds	r3, r7, #6
 800969e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80096a0:	1dbb      	adds	r3, r7, #6
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	0018      	movs	r0, r3
 80096a8:	f001 fb6a 	bl	800ad80 <pvPortMalloc>
 80096ac:	0003      	movs	r3, r0
 80096ae:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d010      	beq.n	80096d8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80096b6:	20a8      	movs	r0, #168	@ 0xa8
 80096b8:	f001 fb62 	bl	800ad80 <pvPortMalloc>
 80096bc:	0003      	movs	r3, r0
 80096be:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d003      	beq.n	80096ce <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	697a      	ldr	r2, [r7, #20]
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80096cc:	e006      	b.n	80096dc <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	0018      	movs	r0, r3
 80096d2:	f001 fc05 	bl	800aee0 <vPortFree>
 80096d6:	e001      	b.n	80096dc <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80096d8:	2300      	movs	r3, #0
 80096da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d01a      	beq.n	8009718 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	22a5      	movs	r2, #165	@ 0xa5
 80096e6:	2100      	movs	r1, #0
 80096e8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096ea:	1dbb      	adds	r3, r7, #6
 80096ec:	881a      	ldrh	r2, [r3, #0]
 80096ee:	683c      	ldr	r4, [r7, #0]
 80096f0:	68b9      	ldr	r1, [r7, #8]
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	2300      	movs	r3, #0
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	9302      	str	r3, [sp, #8]
 80096fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fe:	9301      	str	r3, [sp, #4]
 8009700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	0023      	movs	r3, r4
 8009706:	f000 f80f 	bl	8009728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	0018      	movs	r0, r3
 800970e:	f000 f8ad 	bl	800986c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009712:	2301      	movs	r3, #1
 8009714:	61bb      	str	r3, [r7, #24]
 8009716:	e002      	b.n	800971e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009718:	2301      	movs	r3, #1
 800971a:	425b      	negs	r3, r3
 800971c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800971e:	69bb      	ldr	r3, [r7, #24]
	}
 8009720:	0018      	movs	r0, r3
 8009722:	46bd      	mov	sp, r7
 8009724:	b009      	add	sp, #36	@ 0x24
 8009726:	bd90      	pop	{r4, r7, pc}

08009728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009738:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	001a      	movs	r2, r3
 8009740:	21a5      	movs	r1, #165	@ 0xa5
 8009742:	f001 fd0d 	bl	800b160 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4943      	ldr	r1, [pc, #268]	@ (800985c <prvInitialiseNewTask+0x134>)
 800974e:	468c      	mov	ip, r1
 8009750:	4463      	add	r3, ip
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	18d3      	adds	r3, r2, r3
 8009756:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	2207      	movs	r2, #7
 800975c:	4393      	bics	r3, r2
 800975e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	2207      	movs	r2, #7
 8009764:	4013      	ands	r3, r2
 8009766:	d002      	beq.n	800976e <prvInitialiseNewTask+0x46>
 8009768:	b672      	cpsid	i
 800976a:	46c0      	nop			@ (mov r8, r8)
 800976c:	e7fd      	b.n	800976a <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d020      	beq.n	80097b6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	e013      	b.n	80097a2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	18d3      	adds	r3, r2, r3
 8009780:	7818      	ldrb	r0, [r3, #0]
 8009782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009784:	2134      	movs	r1, #52	@ 0x34
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	18d3      	adds	r3, r2, r3
 800978a:	185b      	adds	r3, r3, r1
 800978c:	1c02      	adds	r2, r0, #0
 800978e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	18d3      	adds	r3, r2, r3
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d006      	beq.n	80097aa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	3301      	adds	r3, #1
 80097a0:	617b      	str	r3, [r7, #20]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2b0f      	cmp	r3, #15
 80097a6:	d9e8      	bls.n	800977a <prvInitialiseNewTask+0x52>
 80097a8:	e000      	b.n	80097ac <prvInitialiseNewTask+0x84>
			{
				break;
 80097aa:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80097ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ae:	2243      	movs	r2, #67	@ 0x43
 80097b0:	2100      	movs	r1, #0
 80097b2:	5499      	strb	r1, [r3, r2]
 80097b4:	e003      	b.n	80097be <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80097b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b8:	2234      	movs	r2, #52	@ 0x34
 80097ba:	2100      	movs	r1, #0
 80097bc:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	2b37      	cmp	r3, #55	@ 0x37
 80097c2:	d901      	bls.n	80097c8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80097c4:	2337      	movs	r3, #55	@ 0x37
 80097c6:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80097c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ca:	6a3a      	ldr	r2, [r7, #32]
 80097cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80097ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d0:	6a3a      	ldr	r2, [r7, #32]
 80097d2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	2200      	movs	r2, #0
 80097d8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80097da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097dc:	3304      	adds	r3, #4
 80097de:	0018      	movs	r0, r3
 80097e0:	f7fe ffc0 	bl	8008764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	3318      	adds	r3, #24
 80097e8:	0018      	movs	r0, r3
 80097ea:	f7fe ffbb 	bl	8008764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	2238      	movs	r2, #56	@ 0x38
 80097f8:	1ad2      	subs	r2, r2, r3
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009802:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009806:	22a0      	movs	r2, #160	@ 0xa0
 8009808:	2100      	movs	r1, #0
 800980a:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800980c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980e:	22a4      	movs	r2, #164	@ 0xa4
 8009810:	2100      	movs	r1, #0
 8009812:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009816:	3354      	adds	r3, #84	@ 0x54
 8009818:	224c      	movs	r2, #76	@ 0x4c
 800981a:	2100      	movs	r1, #0
 800981c:	0018      	movs	r0, r3
 800981e:	f001 fc9f 	bl	800b160 <memset>
 8009822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009824:	4a0e      	ldr	r2, [pc, #56]	@ (8009860 <prvInitialiseNewTask+0x138>)
 8009826:	659a      	str	r2, [r3, #88]	@ 0x58
 8009828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982a:	4a0e      	ldr	r2, [pc, #56]	@ (8009864 <prvInitialiseNewTask+0x13c>)
 800982c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009830:	4a0d      	ldr	r2, [pc, #52]	@ (8009868 <prvInitialiseNewTask+0x140>)
 8009832:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	68f9      	ldr	r1, [r7, #12]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	0018      	movs	r0, r3
 800983c:	f001 f970 	bl	800ab20 <pxPortInitialiseStack>
 8009840:	0002      	movs	r2, r0
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	2b00      	cmp	r3, #0
 800984a:	d002      	beq.n	8009852 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800984c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800984e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009852:	46c0      	nop			@ (mov r8, r8)
 8009854:	46bd      	mov	sp, r7
 8009856:	b006      	add	sp, #24
 8009858:	bd80      	pop	{r7, pc}
 800985a:	46c0      	nop			@ (mov r8, r8)
 800985c:	3fffffff 	.word	0x3fffffff
 8009860:	20001ed4 	.word	0x20001ed4
 8009864:	20001f3c 	.word	0x20001f3c
 8009868:	20001fa4 	.word	0x20001fa4

0800986c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009874:	f001 f9ec 	bl	800ac50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009878:	4b2a      	ldr	r3, [pc, #168]	@ (8009924 <prvAddNewTaskToReadyList+0xb8>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	1c5a      	adds	r2, r3, #1
 800987e:	4b29      	ldr	r3, [pc, #164]	@ (8009924 <prvAddNewTaskToReadyList+0xb8>)
 8009880:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8009882:	4b29      	ldr	r3, [pc, #164]	@ (8009928 <prvAddNewTaskToReadyList+0xbc>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d109      	bne.n	800989e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800988a:	4b27      	ldr	r3, [pc, #156]	@ (8009928 <prvAddNewTaskToReadyList+0xbc>)
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009890:	4b24      	ldr	r3, [pc, #144]	@ (8009924 <prvAddNewTaskToReadyList+0xb8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d110      	bne.n	80098ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009898:	f000 fbac 	bl	8009ff4 <prvInitialiseTaskLists>
 800989c:	e00d      	b.n	80098ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800989e:	4b23      	ldr	r3, [pc, #140]	@ (800992c <prvAddNewTaskToReadyList+0xc0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d109      	bne.n	80098ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80098a6:	4b20      	ldr	r3, [pc, #128]	@ (8009928 <prvAddNewTaskToReadyList+0xbc>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d802      	bhi.n	80098ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80098b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009928 <prvAddNewTaskToReadyList+0xbc>)
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80098ba:	4b1d      	ldr	r3, [pc, #116]	@ (8009930 <prvAddNewTaskToReadyList+0xc4>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	1c5a      	adds	r2, r3, #1
 80098c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009930 <prvAddNewTaskToReadyList+0xc4>)
 80098c2:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80098c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009930 <prvAddNewTaskToReadyList+0xc4>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d0:	4b18      	ldr	r3, [pc, #96]	@ (8009934 <prvAddNewTaskToReadyList+0xc8>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d903      	bls.n	80098e0 <prvAddNewTaskToReadyList+0x74>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098dc:	4b15      	ldr	r3, [pc, #84]	@ (8009934 <prvAddNewTaskToReadyList+0xc8>)
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098e4:	0013      	movs	r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	189b      	adds	r3, r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4a12      	ldr	r2, [pc, #72]	@ (8009938 <prvAddNewTaskToReadyList+0xcc>)
 80098ee:	189a      	adds	r2, r3, r2
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	3304      	adds	r3, #4
 80098f4:	0019      	movs	r1, r3
 80098f6:	0010      	movs	r0, r2
 80098f8:	f7fe ff3f 	bl	800877a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098fc:	f001 f9ba 	bl	800ac74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009900:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <prvAddNewTaskToReadyList+0xc0>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009908:	4b07      	ldr	r3, [pc, #28]	@ (8009928 <prvAddNewTaskToReadyList+0xbc>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009912:	429a      	cmp	r2, r3
 8009914:	d201      	bcs.n	800991a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009916:	f001 f98b 	bl	800ac30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800991a:	46c0      	nop			@ (mov r8, r8)
 800991c:	46bd      	mov	sp, r7
 800991e:	b002      	add	sp, #8
 8009920:	bd80      	pop	{r7, pc}
 8009922:	46c0      	nop			@ (mov r8, r8)
 8009924:	2000115c 	.word	0x2000115c
 8009928:	20000c88 	.word	0x20000c88
 800992c:	20001168 	.word	0x20001168
 8009930:	20001178 	.word	0x20001178
 8009934:	20001164 	.word	0x20001164
 8009938:	20000c8c 	.word	0x20000c8c

0800993c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009944:	2300      	movs	r3, #0
 8009946:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d011      	beq.n	8009972 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800994e:	4b0d      	ldr	r3, [pc, #52]	@ (8009984 <vTaskDelay+0x48>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d002      	beq.n	800995c <vTaskDelay+0x20>
 8009956:	b672      	cpsid	i
 8009958:	46c0      	nop			@ (mov r8, r8)
 800995a:	e7fd      	b.n	8009958 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800995c:	f000 f874 	bl	8009a48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2100      	movs	r1, #0
 8009964:	0018      	movs	r0, r3
 8009966:	f000 fd69 	bl	800a43c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800996a:	f000 f879 	bl	8009a60 <xTaskResumeAll>
 800996e:	0003      	movs	r3, r0
 8009970:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8009978:	f001 f95a 	bl	800ac30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800997c:	46c0      	nop			@ (mov r8, r8)
 800997e:	46bd      	mov	sp, r7
 8009980:	b004      	add	sp, #16
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20001184 	.word	0x20001184

08009988 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009988:	b590      	push	{r4, r7, lr}
 800998a:	b089      	sub	sp, #36	@ 0x24
 800998c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800998e:	2300      	movs	r3, #0
 8009990:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009996:	003a      	movs	r2, r7
 8009998:	1d39      	adds	r1, r7, #4
 800999a:	2308      	movs	r3, #8
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	0018      	movs	r0, r3
 80099a0:	f7fe fe92 	bl	80086c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80099a4:	683c      	ldr	r4, [r7, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	491f      	ldr	r1, [pc, #124]	@ (8009a28 <vTaskStartScheduler+0xa0>)
 80099ac:	481f      	ldr	r0, [pc, #124]	@ (8009a2c <vTaskStartScheduler+0xa4>)
 80099ae:	9202      	str	r2, [sp, #8]
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	2300      	movs	r3, #0
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	2300      	movs	r3, #0
 80099b8:	0022      	movs	r2, r4
 80099ba:	f7ff fe22 	bl	8009602 <xTaskCreateStatic>
 80099be:	0002      	movs	r2, r0
 80099c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a30 <vTaskStartScheduler+0xa8>)
 80099c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80099c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a30 <vTaskStartScheduler+0xa8>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80099cc:	2301      	movs	r3, #1
 80099ce:	60fb      	str	r3, [r7, #12]
 80099d0:	e001      	b.n	80099d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d103      	bne.n	80099e4 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80099dc:	f000 fd82 	bl	800a4e4 <xTimerCreateTimerTask>
 80099e0:	0003      	movs	r3, r0
 80099e2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d113      	bne.n	8009a12 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80099ea:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099ec:	4b11      	ldr	r3, [pc, #68]	@ (8009a34 <vTaskStartScheduler+0xac>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3354      	adds	r3, #84	@ 0x54
 80099f2:	001a      	movs	r2, r3
 80099f4:	4b10      	ldr	r3, [pc, #64]	@ (8009a38 <vTaskStartScheduler+0xb0>)
 80099f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80099f8:	4b10      	ldr	r3, [pc, #64]	@ (8009a3c <vTaskStartScheduler+0xb4>)
 80099fa:	2201      	movs	r2, #1
 80099fc:	4252      	negs	r2, r2
 80099fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009a00:	4b0f      	ldr	r3, [pc, #60]	@ (8009a40 <vTaskStartScheduler+0xb8>)
 8009a02:	2201      	movs	r2, #1
 8009a04:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009a06:	4b0f      	ldr	r3, [pc, #60]	@ (8009a44 <vTaskStartScheduler+0xbc>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009a0c:	f001 f8ec 	bl	800abe8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009a10:	e005      	b.n	8009a1e <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	3301      	adds	r3, #1
 8009a16:	d102      	bne.n	8009a1e <vTaskStartScheduler+0x96>
 8009a18:	b672      	cpsid	i
 8009a1a:	46c0      	nop			@ (mov r8, r8)
 8009a1c:	e7fd      	b.n	8009a1a <vTaskStartScheduler+0x92>
}
 8009a1e:	46c0      	nop			@ (mov r8, r8)
 8009a20:	46bd      	mov	sp, r7
 8009a22:	b005      	add	sp, #20
 8009a24:	bd90      	pop	{r4, r7, pc}
 8009a26:	46c0      	nop			@ (mov r8, r8)
 8009a28:	0800bd50 	.word	0x0800bd50
 8009a2c:	08009fd5 	.word	0x08009fd5
 8009a30:	20001180 	.word	0x20001180
 8009a34:	20000c88 	.word	0x20000c88
 8009a38:	200000ec 	.word	0x200000ec
 8009a3c:	2000117c 	.word	0x2000117c
 8009a40:	20001168 	.word	0x20001168
 8009a44:	20001160 	.word	0x20001160

08009a48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009a4c:	4b03      	ldr	r3, [pc, #12]	@ (8009a5c <vTaskSuspendAll+0x14>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	4b02      	ldr	r3, [pc, #8]	@ (8009a5c <vTaskSuspendAll+0x14>)
 8009a54:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009a56:	46c0      	nop			@ (mov r8, r8)
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	20001184 	.word	0x20001184

08009a60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009a6e:	4b3a      	ldr	r3, [pc, #232]	@ (8009b58 <xTaskResumeAll+0xf8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d102      	bne.n	8009a7c <xTaskResumeAll+0x1c>
 8009a76:	b672      	cpsid	i
 8009a78:	46c0      	nop			@ (mov r8, r8)
 8009a7a:	e7fd      	b.n	8009a78 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a7c:	f001 f8e8 	bl	800ac50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a80:	4b35      	ldr	r3, [pc, #212]	@ (8009b58 <xTaskResumeAll+0xf8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	1e5a      	subs	r2, r3, #1
 8009a86:	4b34      	ldr	r3, [pc, #208]	@ (8009b58 <xTaskResumeAll+0xf8>)
 8009a88:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a8a:	4b33      	ldr	r3, [pc, #204]	@ (8009b58 <xTaskResumeAll+0xf8>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d15b      	bne.n	8009b4a <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a92:	4b32      	ldr	r3, [pc, #200]	@ (8009b5c <xTaskResumeAll+0xfc>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d057      	beq.n	8009b4a <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a9a:	e02f      	b.n	8009afc <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a9c:	4b30      	ldr	r3, [pc, #192]	@ (8009b60 <xTaskResumeAll+0x100>)
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	3318      	adds	r3, #24
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f7fe febe 	bl	800882a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	0018      	movs	r0, r3
 8009ab4:	f7fe feb9 	bl	800882a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009abc:	4b29      	ldr	r3, [pc, #164]	@ (8009b64 <xTaskResumeAll+0x104>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d903      	bls.n	8009acc <xTaskResumeAll+0x6c>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ac8:	4b26      	ldr	r3, [pc, #152]	@ (8009b64 <xTaskResumeAll+0x104>)
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ad0:	0013      	movs	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	189b      	adds	r3, r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4a23      	ldr	r2, [pc, #140]	@ (8009b68 <xTaskResumeAll+0x108>)
 8009ada:	189a      	adds	r2, r3, r2
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3304      	adds	r3, #4
 8009ae0:	0019      	movs	r1, r3
 8009ae2:	0010      	movs	r0, r2
 8009ae4:	f7fe fe49 	bl	800877a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009aec:	4b1f      	ldr	r3, [pc, #124]	@ (8009b6c <xTaskResumeAll+0x10c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d302      	bcc.n	8009afc <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8009af6:	4b1e      	ldr	r3, [pc, #120]	@ (8009b70 <xTaskResumeAll+0x110>)
 8009af8:	2201      	movs	r2, #1
 8009afa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009afc:	4b18      	ldr	r3, [pc, #96]	@ (8009b60 <xTaskResumeAll+0x100>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1cb      	bne.n	8009a9c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009b0a:	f000 fb13 	bl	800a134 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009b0e:	4b19      	ldr	r3, [pc, #100]	@ (8009b74 <xTaskResumeAll+0x114>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00f      	beq.n	8009b3a <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009b1a:	f000 f83b 	bl	8009b94 <xTaskIncrementTick>
 8009b1e:	1e03      	subs	r3, r0, #0
 8009b20:	d002      	beq.n	8009b28 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8009b22:	4b13      	ldr	r3, [pc, #76]	@ (8009b70 <xTaskResumeAll+0x110>)
 8009b24:	2201      	movs	r2, #1
 8009b26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1f2      	bne.n	8009b1a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8009b34:	4b0f      	ldr	r3, [pc, #60]	@ (8009b74 <xTaskResumeAll+0x114>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b70 <xTaskResumeAll+0x110>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009b42:	2301      	movs	r3, #1
 8009b44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009b46:	f001 f873 	bl	800ac30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b4a:	f001 f893 	bl	800ac74 <vPortExitCritical>

	return xAlreadyYielded;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
}
 8009b50:	0018      	movs	r0, r3
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b004      	add	sp, #16
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	20001184 	.word	0x20001184
 8009b5c:	2000115c 	.word	0x2000115c
 8009b60:	2000111c 	.word	0x2000111c
 8009b64:	20001164 	.word	0x20001164
 8009b68:	20000c8c 	.word	0x20000c8c
 8009b6c:	20000c88 	.word	0x20000c88
 8009b70:	20001170 	.word	0x20001170
 8009b74:	2000116c 	.word	0x2000116c

08009b78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b7e:	4b04      	ldr	r3, [pc, #16]	@ (8009b90 <xTaskGetTickCount+0x18>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b84:	687b      	ldr	r3, [r7, #4]
}
 8009b86:	0018      	movs	r0, r3
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	b002      	add	sp, #8
 8009b8c:	bd80      	pop	{r7, pc}
 8009b8e:	46c0      	nop			@ (mov r8, r8)
 8009b90:	20001160 	.word	0x20001160

08009b94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8009cc8 <xTaskIncrementTick+0x134>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d000      	beq.n	8009ba8 <xTaskIncrementTick+0x14>
 8009ba6:	e085      	b.n	8009cb4 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ba8:	4b48      	ldr	r3, [pc, #288]	@ (8009ccc <xTaskIncrementTick+0x138>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3301      	adds	r3, #1
 8009bae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009bb0:	4b46      	ldr	r3, [pc, #280]	@ (8009ccc <xTaskIncrementTick+0x138>)
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d118      	bne.n	8009bee <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009bbc:	4b44      	ldr	r3, [pc, #272]	@ (8009cd0 <xTaskIncrementTick+0x13c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <xTaskIncrementTick+0x38>
 8009bc6:	b672      	cpsid	i
 8009bc8:	46c0      	nop			@ (mov r8, r8)
 8009bca:	e7fd      	b.n	8009bc8 <xTaskIncrementTick+0x34>
 8009bcc:	4b40      	ldr	r3, [pc, #256]	@ (8009cd0 <xTaskIncrementTick+0x13c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	60fb      	str	r3, [r7, #12]
 8009bd2:	4b40      	ldr	r3, [pc, #256]	@ (8009cd4 <xTaskIncrementTick+0x140>)
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	4b3e      	ldr	r3, [pc, #248]	@ (8009cd0 <xTaskIncrementTick+0x13c>)
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	4b3e      	ldr	r3, [pc, #248]	@ (8009cd4 <xTaskIncrementTick+0x140>)
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	4b3d      	ldr	r3, [pc, #244]	@ (8009cd8 <xTaskIncrementTick+0x144>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	1c5a      	adds	r2, r3, #1
 8009be6:	4b3c      	ldr	r3, [pc, #240]	@ (8009cd8 <xTaskIncrementTick+0x144>)
 8009be8:	601a      	str	r2, [r3, #0]
 8009bea:	f000 faa3 	bl	800a134 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009bee:	4b3b      	ldr	r3, [pc, #236]	@ (8009cdc <xTaskIncrementTick+0x148>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d349      	bcc.n	8009c8c <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bf8:	4b35      	ldr	r3, [pc, #212]	@ (8009cd0 <xTaskIncrementTick+0x13c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c02:	4b36      	ldr	r3, [pc, #216]	@ (8009cdc <xTaskIncrementTick+0x148>)
 8009c04:	2201      	movs	r2, #1
 8009c06:	4252      	negs	r2, r2
 8009c08:	601a      	str	r2, [r3, #0]
					break;
 8009c0a:	e03f      	b.n	8009c8c <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c0c:	4b30      	ldr	r3, [pc, #192]	@ (8009cd0 <xTaskIncrementTick+0x13c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d203      	bcs.n	8009c2c <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009c24:	4b2d      	ldr	r3, [pc, #180]	@ (8009cdc <xTaskIncrementTick+0x148>)
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009c2a:	e02f      	b.n	8009c8c <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	0018      	movs	r0, r3
 8009c32:	f7fe fdfa 	bl	800882a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	3318      	adds	r3, #24
 8009c42:	0018      	movs	r0, r3
 8009c44:	f7fe fdf1 	bl	800882a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4c:	4b24      	ldr	r3, [pc, #144]	@ (8009ce0 <xTaskIncrementTick+0x14c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d903      	bls.n	8009c5c <xTaskIncrementTick+0xc8>
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c58:	4b21      	ldr	r3, [pc, #132]	@ (8009ce0 <xTaskIncrementTick+0x14c>)
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c60:	0013      	movs	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	189b      	adds	r3, r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4a1e      	ldr	r2, [pc, #120]	@ (8009ce4 <xTaskIncrementTick+0x150>)
 8009c6a:	189a      	adds	r2, r3, r2
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	3304      	adds	r3, #4
 8009c70:	0019      	movs	r1, r3
 8009c72:	0010      	movs	r0, r2
 8009c74:	f7fe fd81 	bl	800877a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce8 <xTaskIncrementTick+0x154>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d3b8      	bcc.n	8009bf8 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8009c86:	2301      	movs	r3, #1
 8009c88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c8a:	e7b5      	b.n	8009bf8 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c8c:	4b16      	ldr	r3, [pc, #88]	@ (8009ce8 <xTaskIncrementTick+0x154>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c92:	4914      	ldr	r1, [pc, #80]	@ (8009ce4 <xTaskIncrementTick+0x150>)
 8009c94:	0013      	movs	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	189b      	adds	r3, r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	585b      	ldr	r3, [r3, r1]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d901      	bls.n	8009ca6 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ca6:	4b11      	ldr	r3, [pc, #68]	@ (8009cec <xTaskIncrementTick+0x158>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]
 8009cb2:	e004      	b.n	8009cbe <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8009cf0 <xTaskIncrementTick+0x15c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	1c5a      	adds	r2, r3, #1
 8009cba:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf0 <xTaskIncrementTick+0x15c>)
 8009cbc:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009cbe:	697b      	ldr	r3, [r7, #20]
}
 8009cc0:	0018      	movs	r0, r3
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	b006      	add	sp, #24
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	20001184 	.word	0x20001184
 8009ccc:	20001160 	.word	0x20001160
 8009cd0:	20001114 	.word	0x20001114
 8009cd4:	20001118 	.word	0x20001118
 8009cd8:	20001174 	.word	0x20001174
 8009cdc:	2000117c 	.word	0x2000117c
 8009ce0:	20001164 	.word	0x20001164
 8009ce4:	20000c8c 	.word	0x20000c8c
 8009ce8:	20000c88 	.word	0x20000c88
 8009cec:	20001170 	.word	0x20001170
 8009cf0:	2000116c 	.word	0x2000116c

08009cf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cfa:	4b25      	ldr	r3, [pc, #148]	@ (8009d90 <vTaskSwitchContext+0x9c>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009d02:	4b24      	ldr	r3, [pc, #144]	@ (8009d94 <vTaskSwitchContext+0xa0>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009d08:	e03e      	b.n	8009d88 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009d0a:	4b22      	ldr	r3, [pc, #136]	@ (8009d94 <vTaskSwitchContext+0xa0>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d10:	4b21      	ldr	r3, [pc, #132]	@ (8009d98 <vTaskSwitchContext+0xa4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	607b      	str	r3, [r7, #4]
 8009d16:	e008      	b.n	8009d2a <vTaskSwitchContext+0x36>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d102      	bne.n	8009d24 <vTaskSwitchContext+0x30>
 8009d1e:	b672      	cpsid	i
 8009d20:	46c0      	nop			@ (mov r8, r8)
 8009d22:	e7fd      	b.n	8009d20 <vTaskSwitchContext+0x2c>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	607b      	str	r3, [r7, #4]
 8009d2a:	491c      	ldr	r1, [pc, #112]	@ (8009d9c <vTaskSwitchContext+0xa8>)
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	0013      	movs	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	189b      	adds	r3, r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	585b      	ldr	r3, [r3, r1]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0ed      	beq.n	8009d18 <vTaskSwitchContext+0x24>
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	0013      	movs	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	189b      	adds	r3, r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4a15      	ldr	r2, [pc, #84]	@ (8009d9c <vTaskSwitchContext+0xa8>)
 8009d48:	189b      	adds	r3, r3, r2
 8009d4a:	603b      	str	r3, [r7, #0]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	605a      	str	r2, [r3, #4]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	3308      	adds	r3, #8
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d104      	bne.n	8009d6c <vTaskSwitchContext+0x78>
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	605a      	str	r2, [r3, #4]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	68da      	ldr	r2, [r3, #12]
 8009d72:	4b0b      	ldr	r3, [pc, #44]	@ (8009da0 <vTaskSwitchContext+0xac>)
 8009d74:	601a      	str	r2, [r3, #0]
 8009d76:	4b08      	ldr	r3, [pc, #32]	@ (8009d98 <vTaskSwitchContext+0xa4>)
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d7c:	4b08      	ldr	r3, [pc, #32]	@ (8009da0 <vTaskSwitchContext+0xac>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3354      	adds	r3, #84	@ 0x54
 8009d82:	001a      	movs	r2, r3
 8009d84:	4b07      	ldr	r3, [pc, #28]	@ (8009da4 <vTaskSwitchContext+0xb0>)
 8009d86:	601a      	str	r2, [r3, #0]
}
 8009d88:	46c0      	nop			@ (mov r8, r8)
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	b002      	add	sp, #8
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	20001184 	.word	0x20001184
 8009d94:	20001170 	.word	0x20001170
 8009d98:	20001164 	.word	0x20001164
 8009d9c:	20000c8c 	.word	0x20000c8c
 8009da0:	20000c88 	.word	0x20000c88
 8009da4:	200000ec 	.word	0x200000ec

08009da8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <vTaskPlaceOnEventList+0x16>
 8009db8:	b672      	cpsid	i
 8009dba:	46c0      	nop			@ (mov r8, r8)
 8009dbc:	e7fd      	b.n	8009dba <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009dbe:	4b09      	ldr	r3, [pc, #36]	@ (8009de4 <vTaskPlaceOnEventList+0x3c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3318      	adds	r3, #24
 8009dc4:	001a      	movs	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	0011      	movs	r1, r2
 8009dca:	0018      	movs	r0, r3
 8009dcc:	f7fe fcf7 	bl	80087be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2101      	movs	r1, #1
 8009dd4:	0018      	movs	r0, r3
 8009dd6:	f000 fb31 	bl	800a43c <prvAddCurrentTaskToDelayedList>
}
 8009dda:	46c0      	nop			@ (mov r8, r8)
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	b002      	add	sp, #8
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	46c0      	nop			@ (mov r8, r8)
 8009de4:	20000c88 	.word	0x20000c88

08009de8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d102      	bne.n	8009e00 <vTaskPlaceOnEventListRestricted+0x18>
 8009dfa:	b672      	cpsid	i
 8009dfc:	46c0      	nop			@ (mov r8, r8)
 8009dfe:	e7fd      	b.n	8009dfc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e00:	4b0c      	ldr	r3, [pc, #48]	@ (8009e34 <vTaskPlaceOnEventListRestricted+0x4c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3318      	adds	r3, #24
 8009e06:	001a      	movs	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	0011      	movs	r1, r2
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	f7fe fcb4 	bl	800877a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	425b      	negs	r3, r3
 8009e1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	0011      	movs	r1, r2
 8009e24:	0018      	movs	r0, r3
 8009e26:	f000 fb09 	bl	800a43c <prvAddCurrentTaskToDelayedList>
	}
 8009e2a:	46c0      	nop			@ (mov r8, r8)
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	b004      	add	sp, #16
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	46c0      	nop			@ (mov r8, r8)
 8009e34:	20000c88 	.word	0x20000c88

08009e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d102      	bne.n	8009e54 <xTaskRemoveFromEventList+0x1c>
 8009e4e:	b672      	cpsid	i
 8009e50:	46c0      	nop			@ (mov r8, r8)
 8009e52:	e7fd      	b.n	8009e50 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	3318      	adds	r3, #24
 8009e58:	0018      	movs	r0, r3
 8009e5a:	f7fe fce6 	bl	800882a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e5e:	4b1f      	ldr	r3, [pc, #124]	@ (8009edc <xTaskRemoveFromEventList+0xa4>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d11d      	bne.n	8009ea2 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	0018      	movs	r0, r3
 8009e6c:	f7fe fcdd 	bl	800882a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e74:	4b1a      	ldr	r3, [pc, #104]	@ (8009ee0 <xTaskRemoveFromEventList+0xa8>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d903      	bls.n	8009e84 <xTaskRemoveFromEventList+0x4c>
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e80:	4b17      	ldr	r3, [pc, #92]	@ (8009ee0 <xTaskRemoveFromEventList+0xa8>)
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e88:	0013      	movs	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	189b      	adds	r3, r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4a14      	ldr	r2, [pc, #80]	@ (8009ee4 <xTaskRemoveFromEventList+0xac>)
 8009e92:	189a      	adds	r2, r3, r2
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	3304      	adds	r3, #4
 8009e98:	0019      	movs	r1, r3
 8009e9a:	0010      	movs	r0, r2
 8009e9c:	f7fe fc6d 	bl	800877a <vListInsertEnd>
 8009ea0:	e007      	b.n	8009eb2 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	3318      	adds	r3, #24
 8009ea6:	001a      	movs	r2, r3
 8009ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee8 <xTaskRemoveFromEventList+0xb0>)
 8009eaa:	0011      	movs	r1, r2
 8009eac:	0018      	movs	r0, r3
 8009eae:	f7fe fc64 	bl	800877a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8009eec <xTaskRemoveFromEventList+0xb4>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d905      	bls.n	8009ecc <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef0 <xTaskRemoveFromEventList+0xb8>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e001      	b.n	8009ed0 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
}
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	b004      	add	sp, #16
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	46c0      	nop			@ (mov r8, r8)
 8009edc:	20001184 	.word	0x20001184
 8009ee0:	20001164 	.word	0x20001164
 8009ee4:	20000c8c 	.word	0x20000c8c
 8009ee8:	2000111c 	.word	0x2000111c
 8009eec:	20000c88 	.word	0x20000c88
 8009ef0:	20001170 	.word	0x20001170

08009ef4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009efc:	4b05      	ldr	r3, [pc, #20]	@ (8009f14 <vTaskInternalSetTimeOutState+0x20>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f04:	4b04      	ldr	r3, [pc, #16]	@ (8009f18 <vTaskInternalSetTimeOutState+0x24>)
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	605a      	str	r2, [r3, #4]
}
 8009f0c:	46c0      	nop			@ (mov r8, r8)
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	b002      	add	sp, #8
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	20001174 	.word	0x20001174
 8009f18:	20001160 	.word	0x20001160

08009f1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d102      	bne.n	8009f32 <xTaskCheckForTimeOut+0x16>
 8009f2c:	b672      	cpsid	i
 8009f2e:	46c0      	nop			@ (mov r8, r8)
 8009f30:	e7fd      	b.n	8009f2e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d102      	bne.n	8009f3e <xTaskCheckForTimeOut+0x22>
 8009f38:	b672      	cpsid	i
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	e7fd      	b.n	8009f3a <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8009f3e:	f000 fe87 	bl	800ac50 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f42:	4b1d      	ldr	r3, [pc, #116]	@ (8009fb8 <xTaskCheckForTimeOut+0x9c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3301      	adds	r3, #1
 8009f58:	d102      	bne.n	8009f60 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	617b      	str	r3, [r7, #20]
 8009f5e:	e024      	b.n	8009faa <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	4b15      	ldr	r3, [pc, #84]	@ (8009fbc <xTaskCheckForTimeOut+0xa0>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d007      	beq.n	8009f7c <xTaskCheckForTimeOut+0x60>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d302      	bcc.n	8009f7c <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f76:	2301      	movs	r3, #1
 8009f78:	617b      	str	r3, [r7, #20]
 8009f7a:	e016      	b.n	8009faa <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d20c      	bcs.n	8009fa0 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	1ad2      	subs	r2, r2, r3
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	0018      	movs	r0, r3
 8009f96:	f7ff ffad 	bl	8009ef4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
 8009f9e:	e004      	b.n	8009faa <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009faa:	f000 fe63 	bl	800ac74 <vPortExitCritical>

	return xReturn;
 8009fae:	697b      	ldr	r3, [r7, #20]
}
 8009fb0:	0018      	movs	r0, r3
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	b006      	add	sp, #24
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	20001160 	.word	0x20001160
 8009fbc:	20001174 	.word	0x20001174

08009fc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fc4:	4b02      	ldr	r3, [pc, #8]	@ (8009fd0 <vTaskMissedYield+0x10>)
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]
}
 8009fca:	46c0      	nop			@ (mov r8, r8)
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20001170 	.word	0x20001170

08009fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fdc:	f000 f84e 	bl	800a07c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fe0:	4b03      	ldr	r3, [pc, #12]	@ (8009ff0 <prvIdleTask+0x1c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d9f9      	bls.n	8009fdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fe8:	f000 fe22 	bl	800ac30 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009fec:	e7f6      	b.n	8009fdc <prvIdleTask+0x8>
 8009fee:	46c0      	nop			@ (mov r8, r8)
 8009ff0:	20000c8c 	.word	0x20000c8c

08009ff4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	607b      	str	r3, [r7, #4]
 8009ffe:	e00c      	b.n	800a01a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	0013      	movs	r3, r2
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	189b      	adds	r3, r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4a14      	ldr	r2, [pc, #80]	@ (800a05c <prvInitialiseTaskLists+0x68>)
 800a00c:	189b      	adds	r3, r3, r2
 800a00e:	0018      	movs	r0, r3
 800a010:	f7fe fb8a 	bl	8008728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3301      	adds	r3, #1
 800a018:	607b      	str	r3, [r7, #4]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b37      	cmp	r3, #55	@ 0x37
 800a01e:	d9ef      	bls.n	800a000 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a020:	4b0f      	ldr	r3, [pc, #60]	@ (800a060 <prvInitialiseTaskLists+0x6c>)
 800a022:	0018      	movs	r0, r3
 800a024:	f7fe fb80 	bl	8008728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a028:	4b0e      	ldr	r3, [pc, #56]	@ (800a064 <prvInitialiseTaskLists+0x70>)
 800a02a:	0018      	movs	r0, r3
 800a02c:	f7fe fb7c 	bl	8008728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a030:	4b0d      	ldr	r3, [pc, #52]	@ (800a068 <prvInitialiseTaskLists+0x74>)
 800a032:	0018      	movs	r0, r3
 800a034:	f7fe fb78 	bl	8008728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a038:	4b0c      	ldr	r3, [pc, #48]	@ (800a06c <prvInitialiseTaskLists+0x78>)
 800a03a:	0018      	movs	r0, r3
 800a03c:	f7fe fb74 	bl	8008728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a040:	4b0b      	ldr	r3, [pc, #44]	@ (800a070 <prvInitialiseTaskLists+0x7c>)
 800a042:	0018      	movs	r0, r3
 800a044:	f7fe fb70 	bl	8008728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a048:	4b0a      	ldr	r3, [pc, #40]	@ (800a074 <prvInitialiseTaskLists+0x80>)
 800a04a:	4a05      	ldr	r2, [pc, #20]	@ (800a060 <prvInitialiseTaskLists+0x6c>)
 800a04c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a04e:	4b0a      	ldr	r3, [pc, #40]	@ (800a078 <prvInitialiseTaskLists+0x84>)
 800a050:	4a04      	ldr	r2, [pc, #16]	@ (800a064 <prvInitialiseTaskLists+0x70>)
 800a052:	601a      	str	r2, [r3, #0]
}
 800a054:	46c0      	nop			@ (mov r8, r8)
 800a056:	46bd      	mov	sp, r7
 800a058:	b002      	add	sp, #8
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	20000c8c 	.word	0x20000c8c
 800a060:	200010ec 	.word	0x200010ec
 800a064:	20001100 	.word	0x20001100
 800a068:	2000111c 	.word	0x2000111c
 800a06c:	20001130 	.word	0x20001130
 800a070:	20001148 	.word	0x20001148
 800a074:	20001114 	.word	0x20001114
 800a078:	20001118 	.word	0x20001118

0800a07c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b082      	sub	sp, #8
 800a080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a082:	e01a      	b.n	800a0ba <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800a084:	f000 fde4 	bl	800ac50 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a088:	4b10      	ldr	r3, [pc, #64]	@ (800a0cc <prvCheckTasksWaitingTermination+0x50>)
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	3304      	adds	r3, #4
 800a094:	0018      	movs	r0, r3
 800a096:	f7fe fbc8 	bl	800882a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a09a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d0 <prvCheckTasksWaitingTermination+0x54>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	1e5a      	subs	r2, r3, #1
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d0 <prvCheckTasksWaitingTermination+0x54>)
 800a0a2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <prvCheckTasksWaitingTermination+0x58>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	1e5a      	subs	r2, r3, #1
 800a0aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a0d4 <prvCheckTasksWaitingTermination+0x58>)
 800a0ac:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800a0ae:	f000 fde1 	bl	800ac74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	0018      	movs	r0, r3
 800a0b6:	f000 f80f 	bl	800a0d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0ba:	4b06      	ldr	r3, [pc, #24]	@ (800a0d4 <prvCheckTasksWaitingTermination+0x58>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e0      	bne.n	800a084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0c2:	46c0      	nop			@ (mov r8, r8)
 800a0c4:	46c0      	nop			@ (mov r8, r8)
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b002      	add	sp, #8
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20001130 	.word	0x20001130
 800a0d0:	2000115c 	.word	0x2000115c
 800a0d4:	20001144 	.word	0x20001144

0800a0d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	3354      	adds	r3, #84	@ 0x54
 800a0e4:	0018      	movs	r0, r3
 800a0e6:	f001 f843 	bl	800b170 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	22a5      	movs	r2, #165	@ 0xa5
 800a0ee:	5c9b      	ldrb	r3, [r3, r2]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	f000 fef1 	bl	800aee0 <vPortFree>
				vPortFree( pxTCB );
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	0018      	movs	r0, r3
 800a102:	f000 feed 	bl	800aee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a106:	e011      	b.n	800a12c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	22a5      	movs	r2, #165	@ 0xa5
 800a10c:	5c9b      	ldrb	r3, [r3, r2]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d104      	bne.n	800a11c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	0018      	movs	r0, r3
 800a116:	f000 fee3 	bl	800aee0 <vPortFree>
	}
 800a11a:	e007      	b.n	800a12c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	22a5      	movs	r2, #165	@ 0xa5
 800a120:	5c9b      	ldrb	r3, [r3, r2]
 800a122:	2b02      	cmp	r3, #2
 800a124:	d002      	beq.n	800a12c <prvDeleteTCB+0x54>
 800a126:	b672      	cpsid	i
 800a128:	46c0      	nop			@ (mov r8, r8)
 800a12a:	e7fd      	b.n	800a128 <prvDeleteTCB+0x50>
	}
 800a12c:	46c0      	nop			@ (mov r8, r8)
 800a12e:	46bd      	mov	sp, r7
 800a130:	b002      	add	sp, #8
 800a132:	bd80      	pop	{r7, pc}

0800a134 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a13a:	4b0b      	ldr	r3, [pc, #44]	@ (800a168 <prvResetNextTaskUnblockTime+0x34>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d104      	bne.n	800a14e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a144:	4b09      	ldr	r3, [pc, #36]	@ (800a16c <prvResetNextTaskUnblockTime+0x38>)
 800a146:	2201      	movs	r2, #1
 800a148:	4252      	negs	r2, r2
 800a14a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a14c:	e008      	b.n	800a160 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a14e:	4b06      	ldr	r3, [pc, #24]	@ (800a168 <prvResetNextTaskUnblockTime+0x34>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	4b03      	ldr	r3, [pc, #12]	@ (800a16c <prvResetNextTaskUnblockTime+0x38>)
 800a15e:	601a      	str	r2, [r3, #0]
}
 800a160:	46c0      	nop			@ (mov r8, r8)
 800a162:	46bd      	mov	sp, r7
 800a164:	b002      	add	sp, #8
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20001114 	.word	0x20001114
 800a16c:	2000117c 	.word	0x2000117c

0800a170 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a176:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a0 <xTaskGetSchedulerState+0x30>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d102      	bne.n	800a184 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a17e:	2301      	movs	r3, #1
 800a180:	607b      	str	r3, [r7, #4]
 800a182:	e008      	b.n	800a196 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a184:	4b07      	ldr	r3, [pc, #28]	@ (800a1a4 <xTaskGetSchedulerState+0x34>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d102      	bne.n	800a192 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a18c:	2302      	movs	r3, #2
 800a18e:	607b      	str	r3, [r7, #4]
 800a190:	e001      	b.n	800a196 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a192:	2300      	movs	r3, #0
 800a194:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a196:	687b      	ldr	r3, [r7, #4]
	}
 800a198:	0018      	movs	r0, r3
 800a19a:	46bd      	mov	sp, r7
 800a19c:	b002      	add	sp, #8
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20001168 	.word	0x20001168
 800a1a4:	20001184 	.word	0x20001184

0800a1a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d051      	beq.n	800a262 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c2:	4b2a      	ldr	r3, [pc, #168]	@ (800a26c <xTaskPriorityInherit+0xc4>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d241      	bcs.n	800a250 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	db06      	blt.n	800a1e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d4:	4b25      	ldr	r3, [pc, #148]	@ (800a26c <xTaskPriorityInherit+0xc4>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1da:	2238      	movs	r2, #56	@ 0x38
 800a1dc:	1ad2      	subs	r2, r2, r3
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6959      	ldr	r1, [r3, #20]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ea:	0013      	movs	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	189b      	adds	r3, r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4a1f      	ldr	r2, [pc, #124]	@ (800a270 <xTaskPriorityInherit+0xc8>)
 800a1f4:	189b      	adds	r3, r3, r2
 800a1f6:	4299      	cmp	r1, r3
 800a1f8:	d122      	bne.n	800a240 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	0018      	movs	r0, r3
 800a200:	f7fe fb13 	bl	800882a <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a204:	4b19      	ldr	r3, [pc, #100]	@ (800a26c <xTaskPriorityInherit+0xc4>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a212:	4b18      	ldr	r3, [pc, #96]	@ (800a274 <xTaskPriorityInherit+0xcc>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d903      	bls.n	800a222 <xTaskPriorityInherit+0x7a>
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a21e:	4b15      	ldr	r3, [pc, #84]	@ (800a274 <xTaskPriorityInherit+0xcc>)
 800a220:	601a      	str	r2, [r3, #0]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a226:	0013      	movs	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	189b      	adds	r3, r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4a10      	ldr	r2, [pc, #64]	@ (800a270 <xTaskPriorityInherit+0xc8>)
 800a230:	189a      	adds	r2, r3, r2
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	3304      	adds	r3, #4
 800a236:	0019      	movs	r1, r3
 800a238:	0010      	movs	r0, r2
 800a23a:	f7fe fa9e 	bl	800877a <vListInsertEnd>
 800a23e:	e004      	b.n	800a24a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a240:	4b0a      	ldr	r3, [pc, #40]	@ (800a26c <xTaskPriorityInherit+0xc4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a24a:	2301      	movs	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	e008      	b.n	800a262 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a254:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <xTaskPriorityInherit+0xc4>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d201      	bcs.n	800a262 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a25e:	2301      	movs	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a262:	68fb      	ldr	r3, [r7, #12]
	}
 800a264:	0018      	movs	r0, r3
 800a266:	46bd      	mov	sp, r7
 800a268:	b004      	add	sp, #16
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20000c88 	.word	0x20000c88
 800a270:	20000c8c 	.word	0x20000c8c
 800a274:	20001164 	.word	0x20001164

0800a278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a284:	2300      	movs	r3, #0
 800a286:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d046      	beq.n	800a31c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a28e:	4b26      	ldr	r3, [pc, #152]	@ (800a328 <xTaskPriorityDisinherit+0xb0>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	429a      	cmp	r2, r3
 800a296:	d002      	beq.n	800a29e <xTaskPriorityDisinherit+0x26>
 800a298:	b672      	cpsid	i
 800a29a:	46c0      	nop			@ (mov r8, r8)
 800a29c:	e7fd      	b.n	800a29a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d102      	bne.n	800a2ac <xTaskPriorityDisinherit+0x34>
 800a2a6:	b672      	cpsid	i
 800a2a8:	46c0      	nop			@ (mov r8, r8)
 800a2aa:	e7fd      	b.n	800a2a8 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2b0:	1e5a      	subs	r2, r3, #1
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d02c      	beq.n	800a31c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d128      	bne.n	800a31c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f7fe faab 	bl	800882a <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2e0:	2238      	movs	r2, #56	@ 0x38
 800a2e2:	1ad2      	subs	r2, r2, r3
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a32c <xTaskPriorityDisinherit+0xb4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d903      	bls.n	800a2fc <xTaskPriorityDisinherit+0x84>
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a32c <xTaskPriorityDisinherit+0xb4>)
 800a2fa:	601a      	str	r2, [r3, #0]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a300:	0013      	movs	r3, r2
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	189b      	adds	r3, r3, r2
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4a09      	ldr	r2, [pc, #36]	@ (800a330 <xTaskPriorityDisinherit+0xb8>)
 800a30a:	189a      	adds	r2, r3, r2
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	3304      	adds	r3, #4
 800a310:	0019      	movs	r1, r3
 800a312:	0010      	movs	r0, r2
 800a314:	f7fe fa31 	bl	800877a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a318:	2301      	movs	r3, #1
 800a31a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a31c:	68fb      	ldr	r3, [r7, #12]
	}
 800a31e:	0018      	movs	r0, r3
 800a320:	46bd      	mov	sp, r7
 800a322:	b004      	add	sp, #16
 800a324:	bd80      	pop	{r7, pc}
 800a326:	46c0      	nop			@ (mov r8, r8)
 800a328:	20000c88 	.word	0x20000c88
 800a32c:	20001164 	.word	0x20001164
 800a330:	20000c8c 	.word	0x20000c8c

0800a334 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a342:	2301      	movs	r3, #1
 800a344:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d05a      	beq.n	800a402 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a350:	2b00      	cmp	r3, #0
 800a352:	d102      	bne.n	800a35a <vTaskPriorityDisinheritAfterTimeout+0x26>
 800a354:	b672      	cpsid	i
 800a356:	46c0      	nop			@ (mov r8, r8)
 800a358:	e7fd      	b.n	800a356 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d902      	bls.n	800a36a <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e002      	b.n	800a370 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a36e:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	429a      	cmp	r2, r3
 800a378:	d043      	beq.n	800a402 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	429a      	cmp	r2, r3
 800a382:	d13e      	bne.n	800a402 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a384:	4b21      	ldr	r3, [pc, #132]	@ (800a40c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d102      	bne.n	800a394 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800a38e:	b672      	cpsid	i
 800a390:	46c0      	nop			@ (mov r8, r8)
 800a392:	e7fd      	b.n	800a390 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a398:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	db04      	blt.n	800a3b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2238      	movs	r2, #56	@ 0x38
 800a3ac:	1ad2      	subs	r2, r2, r3
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6959      	ldr	r1, [r3, #20]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	0013      	movs	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	189b      	adds	r3, r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4a13      	ldr	r2, [pc, #76]	@ (800a410 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800a3c2:	189b      	adds	r3, r3, r2
 800a3c4:	4299      	cmp	r1, r3
 800a3c6:	d11c      	bne.n	800a402 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f7fe fa2c 	bl	800882a <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a414 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d903      	bls.n	800a3e6 <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a414 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ea:	0013      	movs	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	189b      	adds	r3, r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	4a07      	ldr	r2, [pc, #28]	@ (800a410 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800a3f4:	189a      	adds	r2, r3, r2
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	3304      	adds	r3, #4
 800a3fa:	0019      	movs	r1, r3
 800a3fc:	0010      	movs	r0, r2
 800a3fe:	f7fe f9bc 	bl	800877a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a402:	46c0      	nop			@ (mov r8, r8)
 800a404:	46bd      	mov	sp, r7
 800a406:	b006      	add	sp, #24
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	20000c88 	.word	0x20000c88
 800a410:	20000c8c 	.word	0x20000c8c
 800a414:	20001164 	.word	0x20001164

0800a418 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a41c:	4b06      	ldr	r3, [pc, #24]	@ (800a438 <pvTaskIncrementMutexHeldCount+0x20>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d004      	beq.n	800a42e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a424:	4b04      	ldr	r3, [pc, #16]	@ (800a438 <pvTaskIncrementMutexHeldCount+0x20>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a42a:	3201      	adds	r2, #1
 800a42c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a42e:	4b02      	ldr	r3, [pc, #8]	@ (800a438 <pvTaskIncrementMutexHeldCount+0x20>)
 800a430:	681b      	ldr	r3, [r3, #0]
	}
 800a432:	0018      	movs	r0, r3
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000c88 	.word	0x20000c88

0800a43c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a446:	4b21      	ldr	r3, [pc, #132]	@ (800a4cc <prvAddCurrentTaskToDelayedList+0x90>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a44c:	4b20      	ldr	r3, [pc, #128]	@ (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3304      	adds	r3, #4
 800a452:	0018      	movs	r0, r3
 800a454:	f7fe f9e9 	bl	800882a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3301      	adds	r3, #1
 800a45c:	d10b      	bne.n	800a476 <prvAddCurrentTaskToDelayedList+0x3a>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d008      	beq.n	800a476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a464:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	1d1a      	adds	r2, r3, #4
 800a46a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a46c:	0011      	movs	r1, r2
 800a46e:	0018      	movs	r0, r3
 800a470:	f7fe f983 	bl	800877a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a474:	e026      	b.n	800a4c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	18d3      	adds	r3, r2, r3
 800a47c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a47e:	4b14      	ldr	r3, [pc, #80]	@ (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d209      	bcs.n	800a4a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a48e:	4b12      	ldr	r3, [pc, #72]	@ (800a4d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	4b0f      	ldr	r3, [pc, #60]	@ (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3304      	adds	r3, #4
 800a498:	0019      	movs	r1, r3
 800a49a:	0010      	movs	r0, r2
 800a49c:	f7fe f98f 	bl	80087be <vListInsert>
}
 800a4a0:	e010      	b.n	800a4c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a4dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	0019      	movs	r1, r3
 800a4ae:	0010      	movs	r0, r2
 800a4b0:	f7fe f985 	bl	80087be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d202      	bcs.n	800a4c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4be:	4b08      	ldr	r3, [pc, #32]	@ (800a4e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	601a      	str	r2, [r3, #0]
}
 800a4c4:	46c0      	nop			@ (mov r8, r8)
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	b004      	add	sp, #16
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	20001160 	.word	0x20001160
 800a4d0:	20000c88 	.word	0x20000c88
 800a4d4:	20001148 	.word	0x20001148
 800a4d8:	20001118 	.word	0x20001118
 800a4dc:	20001114 	.word	0x20001114
 800a4e0:	2000117c 	.word	0x2000117c

0800a4e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4e4:	b590      	push	{r4, r7, lr}
 800a4e6:	b089      	sub	sp, #36	@ 0x24
 800a4e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4ee:	f000 fad5 	bl	800aa9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4f2:	4b18      	ldr	r3, [pc, #96]	@ (800a554 <xTimerCreateTimerTask+0x70>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d020      	beq.n	800a53c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a502:	003a      	movs	r2, r7
 800a504:	1d39      	adds	r1, r7, #4
 800a506:	2308      	movs	r3, #8
 800a508:	18fb      	adds	r3, r7, r3
 800a50a:	0018      	movs	r0, r3
 800a50c:	f7fe f8f4 	bl	80086f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a510:	683c      	ldr	r4, [r7, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	4910      	ldr	r1, [pc, #64]	@ (800a558 <xTimerCreateTimerTask+0x74>)
 800a518:	4810      	ldr	r0, [pc, #64]	@ (800a55c <xTimerCreateTimerTask+0x78>)
 800a51a:	9202      	str	r2, [sp, #8]
 800a51c:	9301      	str	r3, [sp, #4]
 800a51e:	2302      	movs	r3, #2
 800a520:	9300      	str	r3, [sp, #0]
 800a522:	2300      	movs	r3, #0
 800a524:	0022      	movs	r2, r4
 800a526:	f7ff f86c 	bl	8009602 <xTaskCreateStatic>
 800a52a:	0002      	movs	r2, r0
 800a52c:	4b0c      	ldr	r3, [pc, #48]	@ (800a560 <xTimerCreateTimerTask+0x7c>)
 800a52e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a530:	4b0b      	ldr	r3, [pc, #44]	@ (800a560 <xTimerCreateTimerTask+0x7c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a538:	2301      	movs	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d102      	bne.n	800a548 <xTimerCreateTimerTask+0x64>
 800a542:	b672      	cpsid	i
 800a544:	46c0      	nop			@ (mov r8, r8)
 800a546:	e7fd      	b.n	800a544 <xTimerCreateTimerTask+0x60>
	return xReturn;
 800a548:	68fb      	ldr	r3, [r7, #12]
}
 800a54a:	0018      	movs	r0, r3
 800a54c:	46bd      	mov	sp, r7
 800a54e:	b005      	add	sp, #20
 800a550:	bd90      	pop	{r4, r7, pc}
 800a552:	46c0      	nop			@ (mov r8, r8)
 800a554:	200011b8 	.word	0x200011b8
 800a558:	0800bd58 	.word	0x0800bd58
 800a55c:	0800a689 	.word	0x0800a689
 800a560:	200011bc 	.word	0x200011bc

0800a564 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a564:	b590      	push	{r4, r7, lr}
 800a566:	b08b      	sub	sp, #44	@ 0x2c
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a572:	2300      	movs	r3, #0
 800a574:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d102      	bne.n	800a582 <xTimerGenericCommand+0x1e>
 800a57c:	b672      	cpsid	i
 800a57e:	46c0      	nop			@ (mov r8, r8)
 800a580:	e7fd      	b.n	800a57e <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a582:	4b1d      	ldr	r3, [pc, #116]	@ (800a5f8 <xTimerGenericCommand+0x94>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d030      	beq.n	800a5ec <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a58a:	2414      	movs	r4, #20
 800a58c:	193b      	adds	r3, r7, r4
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a592:	193b      	adds	r3, r7, r4
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a598:	193b      	adds	r3, r7, r4
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b05      	cmp	r3, #5
 800a5a2:	dc19      	bgt.n	800a5d8 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5a4:	f7ff fde4 	bl	800a170 <xTaskGetSchedulerState>
 800a5a8:	0003      	movs	r3, r0
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d109      	bne.n	800a5c2 <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5ae:	4b12      	ldr	r3, [pc, #72]	@ (800a5f8 <xTimerGenericCommand+0x94>)
 800a5b0:	6818      	ldr	r0, [r3, #0]
 800a5b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5b4:	1939      	adds	r1, r7, r4
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	f7fe faac 	bl	8008b14 <xQueueGenericSend>
 800a5bc:	0003      	movs	r3, r0
 800a5be:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5c0:	e014      	b.n	800a5ec <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f8 <xTimerGenericCommand+0x94>)
 800a5c4:	6818      	ldr	r0, [r3, #0]
 800a5c6:	2314      	movs	r3, #20
 800a5c8:	18f9      	adds	r1, r7, r3
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f7fe faa1 	bl	8008b14 <xQueueGenericSend>
 800a5d2:	0003      	movs	r3, r0
 800a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d6:	e009      	b.n	800a5ec <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5d8:	4b07      	ldr	r3, [pc, #28]	@ (800a5f8 <xTimerGenericCommand+0x94>)
 800a5da:	6818      	ldr	r0, [r3, #0]
 800a5dc:	683a      	ldr	r2, [r7, #0]
 800a5de:	2314      	movs	r3, #20
 800a5e0:	18f9      	adds	r1, r7, r3
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f7fe fb5e 	bl	8008ca4 <xQueueGenericSendFromISR>
 800a5e8:	0003      	movs	r3, r0
 800a5ea:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5ee:	0018      	movs	r0, r3
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	b00b      	add	sp, #44	@ 0x2c
 800a5f4:	bd90      	pop	{r4, r7, pc}
 800a5f6:	46c0      	nop			@ (mov r8, r8)
 800a5f8:	200011b8 	.word	0x200011b8

0800a5fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af02      	add	r7, sp, #8
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a606:	4b1f      	ldr	r3, [pc, #124]	@ (800a684 <prvProcessExpiredTimer+0x88>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3304      	adds	r3, #4
 800a614:	0018      	movs	r0, r3
 800a616:	f7fe f908 	bl	800882a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2228      	movs	r2, #40	@ 0x28
 800a61e:	5c9b      	ldrb	r3, [r3, r2]
 800a620:	001a      	movs	r2, r3
 800a622:	2304      	movs	r3, #4
 800a624:	4013      	ands	r3, r2
 800a626:	d01a      	beq.n	800a65e <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	699a      	ldr	r2, [r3, #24]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	18d1      	adds	r1, r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	683a      	ldr	r2, [r7, #0]
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f000 f8c7 	bl	800a7c8 <prvInsertTimerInActiveList>
 800a63a:	1e03      	subs	r3, r0, #0
 800a63c:	d018      	beq.n	800a670 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	2300      	movs	r3, #0
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	2300      	movs	r3, #0
 800a648:	2100      	movs	r1, #0
 800a64a:	f7ff ff8b 	bl	800a564 <xTimerGenericCommand>
 800a64e:	0003      	movs	r3, r0
 800a650:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10b      	bne.n	800a670 <prvProcessExpiredTimer+0x74>
 800a658:	b672      	cpsid	i
 800a65a:	46c0      	nop			@ (mov r8, r8)
 800a65c:	e7fd      	b.n	800a65a <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2228      	movs	r2, #40	@ 0x28
 800a662:	5c9b      	ldrb	r3, [r3, r2]
 800a664:	2201      	movs	r2, #1
 800a666:	4393      	bics	r3, r2
 800a668:	b2d9      	uxtb	r1, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2228      	movs	r2, #40	@ 0x28
 800a66e:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	0010      	movs	r0, r2
 800a678:	4798      	blx	r3
}
 800a67a:	46c0      	nop			@ (mov r8, r8)
 800a67c:	46bd      	mov	sp, r7
 800a67e:	b004      	add	sp, #16
 800a680:	bd80      	pop	{r7, pc}
 800a682:	46c0      	nop			@ (mov r8, r8)
 800a684:	200011b0 	.word	0x200011b0

0800a688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a690:	2308      	movs	r3, #8
 800a692:	18fb      	adds	r3, r7, r3
 800a694:	0018      	movs	r0, r3
 800a696:	f000 f855 	bl	800a744 <prvGetNextExpireTime>
 800a69a:	0003      	movs	r3, r0
 800a69c:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a69e:	68ba      	ldr	r2, [r7, #8]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	0011      	movs	r1, r2
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f000 f805 	bl	800a6b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6aa:	f000 f8cf 	bl	800a84c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6ae:	46c0      	nop			@ (mov r8, r8)
 800a6b0:	e7ee      	b.n	800a690 <prvTimerTask+0x8>
	...

0800a6b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6be:	f7ff f9c3 	bl	8009a48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6c2:	2308      	movs	r3, #8
 800a6c4:	18fb      	adds	r3, r7, r3
 800a6c6:	0018      	movs	r0, r3
 800a6c8:	f000 f85e 	bl	800a788 <prvSampleTimeNow>
 800a6cc:	0003      	movs	r3, r0
 800a6ce:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d12b      	bne.n	800a72e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10c      	bne.n	800a6f6 <prvProcessTimerOrBlockTask+0x42>
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d808      	bhi.n	800a6f6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800a6e4:	f7ff f9bc 	bl	8009a60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	0011      	movs	r1, r2
 800a6ee:	0018      	movs	r0, r3
 800a6f0:	f7ff ff84 	bl	800a5fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6f4:	e01d      	b.n	800a732 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d008      	beq.n	800a70e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6fc:	4b0f      	ldr	r3, [pc, #60]	@ (800a73c <prvProcessTimerOrBlockTask+0x88>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d101      	bne.n	800a70a <prvProcessTimerOrBlockTask+0x56>
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <prvProcessTimerOrBlockTask+0x58>
 800a70a:	2300      	movs	r3, #0
 800a70c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a70e:	4b0c      	ldr	r3, [pc, #48]	@ (800a740 <prvProcessTimerOrBlockTask+0x8c>)
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	0019      	movs	r1, r3
 800a71c:	f7fe ff3e 	bl	800959c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a720:	f7ff f99e 	bl	8009a60 <xTaskResumeAll>
 800a724:	1e03      	subs	r3, r0, #0
 800a726:	d104      	bne.n	800a732 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800a728:	f000 fa82 	bl	800ac30 <vPortYield>
}
 800a72c:	e001      	b.n	800a732 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800a72e:	f7ff f997 	bl	8009a60 <xTaskResumeAll>
}
 800a732:	46c0      	nop			@ (mov r8, r8)
 800a734:	46bd      	mov	sp, r7
 800a736:	b004      	add	sp, #16
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	46c0      	nop			@ (mov r8, r8)
 800a73c:	200011b4 	.word	0x200011b4
 800a740:	200011b8 	.word	0x200011b8

0800a744 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a74c:	4b0d      	ldr	r3, [pc, #52]	@ (800a784 <prvGetNextExpireTime+0x40>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <prvGetNextExpireTime+0x16>
 800a756:	2201      	movs	r2, #1
 800a758:	e000      	b.n	800a75c <prvGetNextExpireTime+0x18>
 800a75a:	2200      	movs	r2, #0
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d105      	bne.n	800a774 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a768:	4b06      	ldr	r3, [pc, #24]	@ (800a784 <prvGetNextExpireTime+0x40>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	60fb      	str	r3, [r7, #12]
 800a772:	e001      	b.n	800a778 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a774:	2300      	movs	r3, #0
 800a776:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a778:	68fb      	ldr	r3, [r7, #12]
}
 800a77a:	0018      	movs	r0, r3
 800a77c:	46bd      	mov	sp, r7
 800a77e:	b004      	add	sp, #16
 800a780:	bd80      	pop	{r7, pc}
 800a782:	46c0      	nop			@ (mov r8, r8)
 800a784:	200011b0 	.word	0x200011b0

0800a788 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a790:	f7ff f9f2 	bl	8009b78 <xTaskGetTickCount>
 800a794:	0003      	movs	r3, r0
 800a796:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800a798:	4b0a      	ldr	r3, [pc, #40]	@ (800a7c4 <prvSampleTimeNow+0x3c>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d205      	bcs.n	800a7ae <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800a7a2:	f000 f91d 	bl	800a9e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	e002      	b.n	800a7b4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7b4:	4b03      	ldr	r3, [pc, #12]	@ (800a7c4 <prvSampleTimeNow+0x3c>)
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
}
 800a7bc:	0018      	movs	r0, r3
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	b004      	add	sp, #16
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	200011c0 	.word	0x200011c0

0800a7c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d812      	bhi.n	800a814 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	1ad2      	subs	r2, r2, r3
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d302      	bcc.n	800a802 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	e01b      	b.n	800a83a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a802:	4b10      	ldr	r3, [pc, #64]	@ (800a844 <prvInsertTimerInActiveList+0x7c>)
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3304      	adds	r3, #4
 800a80a:	0019      	movs	r1, r3
 800a80c:	0010      	movs	r0, r2
 800a80e:	f7fd ffd6 	bl	80087be <vListInsert>
 800a812:	e012      	b.n	800a83a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d206      	bcs.n	800a82a <prvInsertTimerInActiveList+0x62>
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d302      	bcc.n	800a82a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	e007      	b.n	800a83a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a82a:	4b07      	ldr	r3, [pc, #28]	@ (800a848 <prvInsertTimerInActiveList+0x80>)
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3304      	adds	r3, #4
 800a832:	0019      	movs	r1, r3
 800a834:	0010      	movs	r0, r2
 800a836:	f7fd ffc2 	bl	80087be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a83a:	697b      	ldr	r3, [r7, #20]
}
 800a83c:	0018      	movs	r0, r3
 800a83e:	46bd      	mov	sp, r7
 800a840:	b006      	add	sp, #24
 800a842:	bd80      	pop	{r7, pc}
 800a844:	200011b4 	.word	0x200011b4
 800a848:	200011b0 	.word	0x200011b0

0800a84c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a84c:	b590      	push	{r4, r7, lr}
 800a84e:	b08d      	sub	sp, #52	@ 0x34
 800a850:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a852:	e0b1      	b.n	800a9b8 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a854:	2208      	movs	r2, #8
 800a856:	18bb      	adds	r3, r7, r2
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	da10      	bge.n	800a880 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a85e:	18bb      	adds	r3, r7, r2
 800a860:	3304      	adds	r3, #4
 800a862:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a866:	2b00      	cmp	r3, #0
 800a868:	d102      	bne.n	800a870 <prvProcessReceivedCommands+0x24>
 800a86a:	b672      	cpsid	i
 800a86c:	46c0      	nop			@ (mov r8, r8)
 800a86e:	e7fd      	b.n	800a86c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a876:	6858      	ldr	r0, [r3, #4]
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	0019      	movs	r1, r3
 800a87e:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a880:	2208      	movs	r2, #8
 800a882:	18bb      	adds	r3, r7, r2
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	da00      	bge.n	800a88c <prvProcessReceivedCommands+0x40>
 800a88a:	e095      	b.n	800a9b8 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a88c:	18bb      	adds	r3, r7, r2
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d004      	beq.n	800a8a4 <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	3304      	adds	r3, #4
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f7fd ffc3 	bl	800882a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8a4:	1d3b      	adds	r3, r7, #4
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	f7ff ff6e 	bl	800a788 <prvSampleTimeNow>
 800a8ac:	0003      	movs	r3, r0
 800a8ae:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	18fb      	adds	r3, r7, r3
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	2b09      	cmp	r3, #9
 800a8b8:	d900      	bls.n	800a8bc <prvProcessReceivedCommands+0x70>
 800a8ba:	e07a      	b.n	800a9b2 <prvProcessReceivedCommands+0x166>
 800a8bc:	009a      	lsls	r2, r3, #2
 800a8be:	4b46      	ldr	r3, [pc, #280]	@ (800a9d8 <prvProcessReceivedCommands+0x18c>)
 800a8c0:	18d3      	adds	r3, r2, r3
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	2228      	movs	r2, #40	@ 0x28
 800a8ca:	5c9b      	ldrb	r3, [r3, r2]
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	b2d9      	uxtb	r1, r3
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	2228      	movs	r2, #40	@ 0x28
 800a8d6:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a8d8:	2408      	movs	r4, #8
 800a8da:	193b      	adds	r3, r7, r4
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	18d1      	adds	r1, r2, r3
 800a8e4:	193b      	adds	r3, r7, r4
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	69fa      	ldr	r2, [r7, #28]
 800a8ea:	6a38      	ldr	r0, [r7, #32]
 800a8ec:	f7ff ff6c 	bl	800a7c8 <prvInsertTimerInActiveList>
 800a8f0:	1e03      	subs	r3, r0, #0
 800a8f2:	d060      	beq.n	800a9b6 <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	6a1b      	ldr	r3, [r3, #32]
 800a8f8:	6a3a      	ldr	r2, [r7, #32]
 800a8fa:	0010      	movs	r0, r2
 800a8fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	2228      	movs	r2, #40	@ 0x28
 800a902:	5c9b      	ldrb	r3, [r3, r2]
 800a904:	001a      	movs	r2, r3
 800a906:	2304      	movs	r3, #4
 800a908:	4013      	ands	r3, r2
 800a90a:	d054      	beq.n	800a9b6 <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a90c:	193b      	adds	r3, r7, r4
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	18d2      	adds	r2, r2, r3
 800a916:	6a38      	ldr	r0, [r7, #32]
 800a918:	2300      	movs	r3, #0
 800a91a:	9300      	str	r3, [sp, #0]
 800a91c:	2300      	movs	r3, #0
 800a91e:	2100      	movs	r1, #0
 800a920:	f7ff fe20 	bl	800a564 <xTimerGenericCommand>
 800a924:	0003      	movs	r3, r0
 800a926:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d143      	bne.n	800a9b6 <prvProcessReceivedCommands+0x16a>
 800a92e:	b672      	cpsid	i
 800a930:	46c0      	nop			@ (mov r8, r8)
 800a932:	e7fd      	b.n	800a930 <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	2228      	movs	r2, #40	@ 0x28
 800a938:	5c9b      	ldrb	r3, [r3, r2]
 800a93a:	2201      	movs	r2, #1
 800a93c:	4393      	bics	r3, r2
 800a93e:	b2d9      	uxtb	r1, r3
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	2228      	movs	r2, #40	@ 0x28
 800a944:	5499      	strb	r1, [r3, r2]
					break;
 800a946:	e037      	b.n	800a9b8 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a948:	6a3b      	ldr	r3, [r7, #32]
 800a94a:	2228      	movs	r2, #40	@ 0x28
 800a94c:	5c9b      	ldrb	r3, [r3, r2]
 800a94e:	2201      	movs	r2, #1
 800a950:	4313      	orrs	r3, r2
 800a952:	b2d9      	uxtb	r1, r3
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	2228      	movs	r2, #40	@ 0x28
 800a958:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a95a:	2308      	movs	r3, #8
 800a95c:	18fb      	adds	r3, r7, r3
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d102      	bne.n	800a972 <prvProcessReceivedCommands+0x126>
 800a96c:	b672      	cpsid	i
 800a96e:	46c0      	nop			@ (mov r8, r8)
 800a970:	e7fd      	b.n	800a96e <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	699a      	ldr	r2, [r3, #24]
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	18d1      	adds	r1, r2, r3
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	69fa      	ldr	r2, [r7, #28]
 800a97e:	6a38      	ldr	r0, [r7, #32]
 800a980:	f7ff ff22 	bl	800a7c8 <prvInsertTimerInActiveList>
					break;
 800a984:	e018      	b.n	800a9b8 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	2228      	movs	r2, #40	@ 0x28
 800a98a:	5c9b      	ldrb	r3, [r3, r2]
 800a98c:	001a      	movs	r2, r3
 800a98e:	2302      	movs	r3, #2
 800a990:	4013      	ands	r3, r2
 800a992:	d104      	bne.n	800a99e <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800a994:	6a3b      	ldr	r3, [r7, #32]
 800a996:	0018      	movs	r0, r3
 800a998:	f000 faa2 	bl	800aee0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a99c:	e00c      	b.n	800a9b8 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	2228      	movs	r2, #40	@ 0x28
 800a9a2:	5c9b      	ldrb	r3, [r3, r2]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	4393      	bics	r3, r2
 800a9a8:	b2d9      	uxtb	r1, r3
 800a9aa:	6a3b      	ldr	r3, [r7, #32]
 800a9ac:	2228      	movs	r2, #40	@ 0x28
 800a9ae:	5499      	strb	r1, [r3, r2]
					break;
 800a9b0:	e002      	b.n	800a9b8 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 800a9b2:	46c0      	nop			@ (mov r8, r8)
 800a9b4:	e000      	b.n	800a9b8 <prvProcessReceivedCommands+0x16c>
					break;
 800a9b6:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9b8:	4b08      	ldr	r3, [pc, #32]	@ (800a9dc <prvProcessReceivedCommands+0x190>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2208      	movs	r2, #8
 800a9be:	18b9      	adds	r1, r7, r2
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f7fe fa4d 	bl	8008e62 <xQueueReceive>
 800a9c8:	1e03      	subs	r3, r0, #0
 800a9ca:	d000      	beq.n	800a9ce <prvProcessReceivedCommands+0x182>
 800a9cc:	e742      	b.n	800a854 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a9ce:	46c0      	nop			@ (mov r8, r8)
 800a9d0:	46c0      	nop			@ (mov r8, r8)
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	b00b      	add	sp, #44	@ 0x2c
 800a9d6:	bd90      	pop	{r4, r7, pc}
 800a9d8:	0800bedc 	.word	0x0800bedc
 800a9dc:	200011b8 	.word	0x200011b8

0800a9e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a9e6:	e042      	b.n	800aa6e <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a9e8:	4b2a      	ldr	r3, [pc, #168]	@ (800aa94 <prvSwitchTimerLists+0xb4>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9f2:	4b28      	ldr	r3, [pc, #160]	@ (800aa94 <prvSwitchTimerLists+0xb4>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3304      	adds	r3, #4
 800aa00:	0018      	movs	r0, r3
 800aa02:	f7fd ff12 	bl	800882a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	0010      	movs	r0, r2
 800aa0e:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2228      	movs	r2, #40	@ 0x28
 800aa14:	5c9b      	ldrb	r3, [r3, r2]
 800aa16:	001a      	movs	r2, r3
 800aa18:	2304      	movs	r3, #4
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	d027      	beq.n	800aa6e <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	18d3      	adds	r3, r2, r3
 800aa26:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d90e      	bls.n	800aa4e <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	68ba      	ldr	r2, [r7, #8]
 800aa34:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa3c:	4b15      	ldr	r3, [pc, #84]	@ (800aa94 <prvSwitchTimerLists+0xb4>)
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3304      	adds	r3, #4
 800aa44:	0019      	movs	r1, r3
 800aa46:	0010      	movs	r0, r2
 800aa48:	f7fd feb9 	bl	80087be <vListInsert>
 800aa4c:	e00f      	b.n	800aa6e <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	2300      	movs	r3, #0
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	2300      	movs	r3, #0
 800aa58:	2100      	movs	r1, #0
 800aa5a:	f7ff fd83 	bl	800a564 <xTimerGenericCommand>
 800aa5e:	0003      	movs	r3, r0
 800aa60:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d102      	bne.n	800aa6e <prvSwitchTimerLists+0x8e>
 800aa68:	b672      	cpsid	i
 800aa6a:	46c0      	nop			@ (mov r8, r8)
 800aa6c:	e7fd      	b.n	800aa6a <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa6e:	4b09      	ldr	r3, [pc, #36]	@ (800aa94 <prvSwitchTimerLists+0xb4>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1b7      	bne.n	800a9e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aa78:	4b06      	ldr	r3, [pc, #24]	@ (800aa94 <prvSwitchTimerLists+0xb4>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aa7e:	4b06      	ldr	r3, [pc, #24]	@ (800aa98 <prvSwitchTimerLists+0xb8>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	4b04      	ldr	r3, [pc, #16]	@ (800aa94 <prvSwitchTimerLists+0xb4>)
 800aa84:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800aa86:	4b04      	ldr	r3, [pc, #16]	@ (800aa98 <prvSwitchTimerLists+0xb8>)
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	601a      	str	r2, [r3, #0]
}
 800aa8c:	46c0      	nop			@ (mov r8, r8)
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	b006      	add	sp, #24
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	200011b0 	.word	0x200011b0
 800aa98:	200011b4 	.word	0x200011b4

0800aa9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aaa2:	f000 f8d5 	bl	800ac50 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aaa6:	4b16      	ldr	r3, [pc, #88]	@ (800ab00 <prvCheckForValidListAndQueue+0x64>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d123      	bne.n	800aaf6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800aaae:	4b15      	ldr	r3, [pc, #84]	@ (800ab04 <prvCheckForValidListAndQueue+0x68>)
 800aab0:	0018      	movs	r0, r3
 800aab2:	f7fd fe39 	bl	8008728 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aab6:	4b14      	ldr	r3, [pc, #80]	@ (800ab08 <prvCheckForValidListAndQueue+0x6c>)
 800aab8:	0018      	movs	r0, r3
 800aaba:	f7fd fe35 	bl	8008728 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aabe:	4b13      	ldr	r3, [pc, #76]	@ (800ab0c <prvCheckForValidListAndQueue+0x70>)
 800aac0:	4a10      	ldr	r2, [pc, #64]	@ (800ab04 <prvCheckForValidListAndQueue+0x68>)
 800aac2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aac4:	4b12      	ldr	r3, [pc, #72]	@ (800ab10 <prvCheckForValidListAndQueue+0x74>)
 800aac6:	4a10      	ldr	r2, [pc, #64]	@ (800ab08 <prvCheckForValidListAndQueue+0x6c>)
 800aac8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aaca:	4b12      	ldr	r3, [pc, #72]	@ (800ab14 <prvCheckForValidListAndQueue+0x78>)
 800aacc:	4a12      	ldr	r2, [pc, #72]	@ (800ab18 <prvCheckForValidListAndQueue+0x7c>)
 800aace:	2100      	movs	r1, #0
 800aad0:	9100      	str	r1, [sp, #0]
 800aad2:	2110      	movs	r1, #16
 800aad4:	200a      	movs	r0, #10
 800aad6:	f7fd ff25 	bl	8008924 <xQueueGenericCreateStatic>
 800aada:	0002      	movs	r2, r0
 800aadc:	4b08      	ldr	r3, [pc, #32]	@ (800ab00 <prvCheckForValidListAndQueue+0x64>)
 800aade:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800aae0:	4b07      	ldr	r3, [pc, #28]	@ (800ab00 <prvCheckForValidListAndQueue+0x64>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d006      	beq.n	800aaf6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800aae8:	4b05      	ldr	r3, [pc, #20]	@ (800ab00 <prvCheckForValidListAndQueue+0x64>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a0b      	ldr	r2, [pc, #44]	@ (800ab1c <prvCheckForValidListAndQueue+0x80>)
 800aaee:	0011      	movs	r1, r2
 800aaf0:	0018      	movs	r0, r3
 800aaf2:	f7fe fd01 	bl	80094f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aaf6:	f000 f8bd 	bl	800ac74 <vPortExitCritical>
}
 800aafa:	46c0      	nop			@ (mov r8, r8)
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200011b8 	.word	0x200011b8
 800ab04:	20001188 	.word	0x20001188
 800ab08:	2000119c 	.word	0x2000119c
 800ab0c:	200011b0 	.word	0x200011b0
 800ab10:	200011b4 	.word	0x200011b4
 800ab14:	20001264 	.word	0x20001264
 800ab18:	200011c4 	.word	0x200011c4
 800ab1c:	0800bd60 	.word	0x0800bd60

0800ab20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3b04      	subs	r3, #4
 800ab30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2280      	movs	r2, #128	@ 0x80
 800ab36:	0452      	lsls	r2, r2, #17
 800ab38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3b04      	subs	r3, #4
 800ab3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800ab40:	68ba      	ldr	r2, [r7, #8]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3b04      	subs	r3, #4
 800ab4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab4c:	4a08      	ldr	r2, [pc, #32]	@ (800ab70 <pxPortInitialiseStack+0x50>)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3b14      	subs	r3, #20
 800ab56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3b20      	subs	r3, #32
 800ab62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab64:	68fb      	ldr	r3, [r7, #12]
}
 800ab66:	0018      	movs	r0, r3
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	b004      	add	sp, #16
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	46c0      	nop			@ (mov r8, r8)
 800ab70:	0800ab75 	.word	0x0800ab75

0800ab74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab7e:	4b08      	ldr	r3, [pc, #32]	@ (800aba0 <prvTaskExitError+0x2c>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3301      	adds	r3, #1
 800ab84:	d002      	beq.n	800ab8c <prvTaskExitError+0x18>
 800ab86:	b672      	cpsid	i
 800ab88:	46c0      	nop			@ (mov r8, r8)
 800ab8a:	e7fd      	b.n	800ab88 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800ab8c:	b672      	cpsid	i
	while( ulDummy == 0 )
 800ab8e:	46c0      	nop			@ (mov r8, r8)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0fc      	beq.n	800ab90 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab96:	46c0      	nop			@ (mov r8, r8)
 800ab98:	46c0      	nop			@ (mov r8, r8)
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	b002      	add	sp, #8
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	200000e8 	.word	0x200000e8

0800aba4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800aba8:	46c0      	nop			@ (mov r8, r8)
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800abb0:	4a0b      	ldr	r2, [pc, #44]	@ (800abe0 <pxCurrentTCBConst2>)
 800abb2:	6813      	ldr	r3, [r2, #0]
 800abb4:	6818      	ldr	r0, [r3, #0]
 800abb6:	3020      	adds	r0, #32
 800abb8:	f380 8809 	msr	PSP, r0
 800abbc:	2002      	movs	r0, #2
 800abbe:	f380 8814 	msr	CONTROL, r0
 800abc2:	f3bf 8f6f 	isb	sy
 800abc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800abc8:	46ae      	mov	lr, r5
 800abca:	bc08      	pop	{r3}
 800abcc:	bc04      	pop	{r2}
 800abce:	b662      	cpsie	i
 800abd0:	4718      	bx	r3
 800abd2:	46c0      	nop			@ (mov r8, r8)
 800abd4:	46c0      	nop			@ (mov r8, r8)
 800abd6:	46c0      	nop			@ (mov r8, r8)
 800abd8:	46c0      	nop			@ (mov r8, r8)
 800abda:	46c0      	nop			@ (mov r8, r8)
 800abdc:	46c0      	nop			@ (mov r8, r8)
 800abde:	46c0      	nop			@ (mov r8, r8)

0800abe0 <pxCurrentTCBConst2>:
 800abe0:	20000c88 	.word	0x20000c88
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800abe4:	46c0      	nop			@ (mov r8, r8)
 800abe6:	46c0      	nop			@ (mov r8, r8)

0800abe8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800abec:	4b0e      	ldr	r3, [pc, #56]	@ (800ac28 <xPortStartScheduler+0x40>)
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	4b0d      	ldr	r3, [pc, #52]	@ (800ac28 <xPortStartScheduler+0x40>)
 800abf2:	21ff      	movs	r1, #255	@ 0xff
 800abf4:	0409      	lsls	r1, r1, #16
 800abf6:	430a      	orrs	r2, r1
 800abf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800abfa:	4b0b      	ldr	r3, [pc, #44]	@ (800ac28 <xPortStartScheduler+0x40>)
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4b0a      	ldr	r3, [pc, #40]	@ (800ac28 <xPortStartScheduler+0x40>)
 800ac00:	21ff      	movs	r1, #255	@ 0xff
 800ac02:	0609      	lsls	r1, r1, #24
 800ac04:	430a      	orrs	r2, r1
 800ac06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ac08:	f000 f898 	bl	800ad3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ac0c:	4b07      	ldr	r3, [pc, #28]	@ (800ac2c <xPortStartScheduler+0x44>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800ac12:	f7ff ffcd 	bl	800abb0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ac16:	f7ff f86d 	bl	8009cf4 <vTaskSwitchContext>
	prvTaskExitError();
 800ac1a:	f7ff ffab 	bl	800ab74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	0018      	movs	r0, r3
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	46c0      	nop			@ (mov r8, r8)
 800ac28:	e000ed20 	.word	0xe000ed20
 800ac2c:	200000e8 	.word	0x200000e8

0800ac30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac34:	4b05      	ldr	r3, [pc, #20]	@ (800ac4c <vPortYield+0x1c>)
 800ac36:	2280      	movs	r2, #128	@ 0x80
 800ac38:	0552      	lsls	r2, r2, #21
 800ac3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800ac3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ac40:	f3bf 8f6f 	isb	sy
}
 800ac44:	46c0      	nop			@ (mov r8, r8)
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	46c0      	nop			@ (mov r8, r8)
 800ac4c:	e000ed04 	.word	0xe000ed04

0800ac50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800ac54:	b672      	cpsid	i
	uxCriticalNesting++;
 800ac56:	4b06      	ldr	r3, [pc, #24]	@ (800ac70 <vPortEnterCritical+0x20>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	1c5a      	adds	r2, r3, #1
 800ac5c:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <vPortEnterCritical+0x20>)
 800ac5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800ac60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ac64:	f3bf 8f6f 	isb	sy
}
 800ac68:	46c0      	nop			@ (mov r8, r8)
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
 800ac6e:	46c0      	nop			@ (mov r8, r8)
 800ac70:	200000e8 	.word	0x200000e8

0800ac74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac78:	4b09      	ldr	r3, [pc, #36]	@ (800aca0 <vPortExitCritical+0x2c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d102      	bne.n	800ac86 <vPortExitCritical+0x12>
 800ac80:	b672      	cpsid	i
 800ac82:	46c0      	nop			@ (mov r8, r8)
 800ac84:	e7fd      	b.n	800ac82 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800ac86:	4b06      	ldr	r3, [pc, #24]	@ (800aca0 <vPortExitCritical+0x2c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	1e5a      	subs	r2, r3, #1
 800ac8c:	4b04      	ldr	r3, [pc, #16]	@ (800aca0 <vPortExitCritical+0x2c>)
 800ac8e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800ac90:	4b03      	ldr	r3, [pc, #12]	@ (800aca0 <vPortExitCritical+0x2c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d100      	bne.n	800ac9a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 800ac98:	b662      	cpsie	i
	}
}
 800ac9a:	46c0      	nop			@ (mov r8, r8)
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	200000e8 	.word	0x200000e8

0800aca4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800aca4:	f3ef 8010 	mrs	r0, PRIMASK
 800aca8:	b672      	cpsid	i
 800acaa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800acac:	46c0      	nop			@ (mov r8, r8)
 800acae:	0018      	movs	r0, r3

0800acb0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800acb0:	f380 8810 	msr	PRIMASK, r0
 800acb4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800acb6:	46c0      	nop			@ (mov r8, r8)
	...

0800acc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800acc0:	f3ef 8009 	mrs	r0, PSP
 800acc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ad00 <pxCurrentTCBConst>)
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	3820      	subs	r0, #32
 800acca:	6010      	str	r0, [r2, #0]
 800accc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800acce:	4644      	mov	r4, r8
 800acd0:	464d      	mov	r5, r9
 800acd2:	4656      	mov	r6, sl
 800acd4:	465f      	mov	r7, fp
 800acd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800acd8:	b508      	push	{r3, lr}
 800acda:	b672      	cpsid	i
 800acdc:	f7ff f80a 	bl	8009cf4 <vTaskSwitchContext>
 800ace0:	b662      	cpsie	i
 800ace2:	bc0c      	pop	{r2, r3}
 800ace4:	6811      	ldr	r1, [r2, #0]
 800ace6:	6808      	ldr	r0, [r1, #0]
 800ace8:	3010      	adds	r0, #16
 800acea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800acec:	46a0      	mov	r8, r4
 800acee:	46a9      	mov	r9, r5
 800acf0:	46b2      	mov	sl, r6
 800acf2:	46bb      	mov	fp, r7
 800acf4:	f380 8809 	msr	PSP, r0
 800acf8:	3820      	subs	r0, #32
 800acfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800acfc:	4718      	bx	r3
 800acfe:	46c0      	nop			@ (mov r8, r8)

0800ad00 <pxCurrentTCBConst>:
 800ad00:	20000c88 	.word	0x20000c88
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800ad04:	46c0      	nop			@ (mov r8, r8)
 800ad06:	46c0      	nop			@ (mov r8, r8)

0800ad08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad0e:	f7ff ffc9 	bl	800aca4 <ulSetInterruptMaskFromISR>
 800ad12:	0003      	movs	r3, r0
 800ad14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad16:	f7fe ff3d 	bl	8009b94 <xTaskIncrementTick>
 800ad1a:	1e03      	subs	r3, r0, #0
 800ad1c:	d003      	beq.n	800ad26 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad1e:	4b06      	ldr	r3, [pc, #24]	@ (800ad38 <xPortSysTickHandler+0x30>)
 800ad20:	2280      	movs	r2, #128	@ 0x80
 800ad22:	0552      	lsls	r2, r2, #21
 800ad24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	0018      	movs	r0, r3
 800ad2a:	f7ff ffc1 	bl	800acb0 <vClearInterruptMaskFromISR>
}
 800ad2e:	46c0      	nop			@ (mov r8, r8)
 800ad30:	46bd      	mov	sp, r7
 800ad32:	b002      	add	sp, #8
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	46c0      	nop			@ (mov r8, r8)
 800ad38:	e000ed04 	.word	0xe000ed04

0800ad3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad40:	4b0b      	ldr	r3, [pc, #44]	@ (800ad70 <vPortSetupTimerInterrupt+0x34>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad46:	4b0b      	ldr	r3, [pc, #44]	@ (800ad74 <vPortSetupTimerInterrupt+0x38>)
 800ad48:	2200      	movs	r2, #0
 800ad4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ad78 <vPortSetupTimerInterrupt+0x3c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	22fa      	movs	r2, #250	@ 0xfa
 800ad52:	0091      	lsls	r1, r2, #2
 800ad54:	0018      	movs	r0, r3
 800ad56:	f7f5 f9e9 	bl	800012c <__udivsi3>
 800ad5a:	0003      	movs	r3, r0
 800ad5c:	001a      	movs	r2, r3
 800ad5e:	4b07      	ldr	r3, [pc, #28]	@ (800ad7c <vPortSetupTimerInterrupt+0x40>)
 800ad60:	3a01      	subs	r2, #1
 800ad62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800ad64:	4b02      	ldr	r3, [pc, #8]	@ (800ad70 <vPortSetupTimerInterrupt+0x34>)
 800ad66:	2207      	movs	r2, #7
 800ad68:	601a      	str	r2, [r3, #0]
}
 800ad6a:	46c0      	nop			@ (mov r8, r8)
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	e000e010 	.word	0xe000e010
 800ad74:	e000e018 	.word	0xe000e018
 800ad78:	200000c4 	.word	0x200000c4
 800ad7c:	e000e014 	.word	0xe000e014

0800ad80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b086      	sub	sp, #24
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800ad8c:	f7fe fe5c 	bl	8009a48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad90:	4b4d      	ldr	r3, [pc, #308]	@ (800aec8 <pvPortMalloc+0x148>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad98:	f000 f8f2 	bl	800af80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad9c:	4b4b      	ldr	r3, [pc, #300]	@ (800aecc <pvPortMalloc+0x14c>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	4013      	ands	r3, r2
 800ada4:	d000      	beq.n	800ada8 <pvPortMalloc+0x28>
 800ada6:	e080      	b.n	800aeaa <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d013      	beq.n	800add6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800adae:	2208      	movs	r2, #8
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	189b      	adds	r3, r3, r2
 800adb4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2207      	movs	r2, #7
 800adba:	4013      	ands	r3, r2
 800adbc:	d00b      	beq.n	800add6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2207      	movs	r2, #7
 800adc2:	4393      	bics	r3, r2
 800adc4:	3308      	adds	r3, #8
 800adc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2207      	movs	r2, #7
 800adcc:	4013      	ands	r3, r2
 800adce:	d002      	beq.n	800add6 <pvPortMalloc+0x56>
 800add0:	b672      	cpsid	i
 800add2:	46c0      	nop			@ (mov r8, r8)
 800add4:	e7fd      	b.n	800add2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d066      	beq.n	800aeaa <pvPortMalloc+0x12a>
 800addc:	4b3c      	ldr	r3, [pc, #240]	@ (800aed0 <pvPortMalloc+0x150>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d861      	bhi.n	800aeaa <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ade6:	4b3b      	ldr	r3, [pc, #236]	@ (800aed4 <pvPortMalloc+0x154>)
 800ade8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800adea:	4b3a      	ldr	r3, [pc, #232]	@ (800aed4 <pvPortMalloc+0x154>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adf0:	e004      	b.n	800adfc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d903      	bls.n	800ae0e <pvPortMalloc+0x8e>
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1f1      	bne.n	800adf2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae0e:	4b2e      	ldr	r3, [pc, #184]	@ (800aec8 <pvPortMalloc+0x148>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d048      	beq.n	800aeaa <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2208      	movs	r2, #8
 800ae1e:	189b      	adds	r3, r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	681a      	ldr	r2, [r3, #0]
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	685a      	ldr	r2, [r3, #4]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	1ad2      	subs	r2, r2, r3
 800ae32:	2308      	movs	r3, #8
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d917      	bls.n	800ae6a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	18d3      	adds	r3, r2, r3
 800ae40:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	2207      	movs	r2, #7
 800ae46:	4013      	ands	r3, r2
 800ae48:	d002      	beq.n	800ae50 <pvPortMalloc+0xd0>
 800ae4a:	b672      	cpsid	i
 800ae4c:	46c0      	nop			@ (mov r8, r8)
 800ae4e:	e7fd      	b.n	800ae4c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	685a      	ldr	r2, [r3, #4]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	1ad2      	subs	r2, r2, r3
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	0018      	movs	r0, r3
 800ae66:	f000 f8eb 	bl	800b040 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae6a:	4b19      	ldr	r3, [pc, #100]	@ (800aed0 <pvPortMalloc+0x150>)
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	1ad2      	subs	r2, r2, r3
 800ae74:	4b16      	ldr	r3, [pc, #88]	@ (800aed0 <pvPortMalloc+0x150>)
 800ae76:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae78:	4b15      	ldr	r3, [pc, #84]	@ (800aed0 <pvPortMalloc+0x150>)
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	4b16      	ldr	r3, [pc, #88]	@ (800aed8 <pvPortMalloc+0x158>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d203      	bcs.n	800ae8c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae84:	4b12      	ldr	r3, [pc, #72]	@ (800aed0 <pvPortMalloc+0x150>)
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	4b13      	ldr	r3, [pc, #76]	@ (800aed8 <pvPortMalloc+0x158>)
 800ae8a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	685a      	ldr	r2, [r3, #4]
 800ae90:	4b0e      	ldr	r3, [pc, #56]	@ (800aecc <pvPortMalloc+0x14c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	431a      	orrs	r2, r3
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aea0:	4b0e      	ldr	r3, [pc, #56]	@ (800aedc <pvPortMalloc+0x15c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	1c5a      	adds	r2, r3, #1
 800aea6:	4b0d      	ldr	r3, [pc, #52]	@ (800aedc <pvPortMalloc+0x15c>)
 800aea8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aeaa:	f7fe fdd9 	bl	8009a60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	d002      	beq.n	800aebc <pvPortMalloc+0x13c>
 800aeb6:	b672      	cpsid	i
 800aeb8:	46c0      	nop			@ (mov r8, r8)
 800aeba:	e7fd      	b.n	800aeb8 <pvPortMalloc+0x138>
	return pvReturn;
 800aebc:	68fb      	ldr	r3, [r7, #12]
}
 800aebe:	0018      	movs	r0, r3
 800aec0:	46bd      	mov	sp, r7
 800aec2:	b006      	add	sp, #24
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	46c0      	nop			@ (mov r8, r8)
 800aec8:	20001ebc 	.word	0x20001ebc
 800aecc:	20001ed0 	.word	0x20001ed0
 800aed0:	20001ec0 	.word	0x20001ec0
 800aed4:	20001eb4 	.word	0x20001eb4
 800aed8:	20001ec4 	.word	0x20001ec4
 800aedc:	20001ec8 	.word	0x20001ec8

0800aee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d03c      	beq.n	800af6c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aef2:	2308      	movs	r3, #8
 800aef4:	425b      	negs	r3, r3
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	18d3      	adds	r3, r2, r3
 800aefa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	4b1b      	ldr	r3, [pc, #108]	@ (800af74 <vPortFree+0x94>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4013      	ands	r3, r2
 800af0a:	d102      	bne.n	800af12 <vPortFree+0x32>
 800af0c:	b672      	cpsid	i
 800af0e:	46c0      	nop			@ (mov r8, r8)
 800af10:	e7fd      	b.n	800af0e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <vPortFree+0x40>
 800af1a:	b672      	cpsid	i
 800af1c:	46c0      	nop			@ (mov r8, r8)
 800af1e:	e7fd      	b.n	800af1c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	685a      	ldr	r2, [r3, #4]
 800af24:	4b13      	ldr	r3, [pc, #76]	@ (800af74 <vPortFree+0x94>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4013      	ands	r3, r2
 800af2a:	d01f      	beq.n	800af6c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d11b      	bne.n	800af6c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	4b0e      	ldr	r3, [pc, #56]	@ (800af74 <vPortFree+0x94>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	43db      	mvns	r3, r3
 800af3e:	401a      	ands	r2, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af44:	f7fe fd80 	bl	8009a48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	4b0a      	ldr	r3, [pc, #40]	@ (800af78 <vPortFree+0x98>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	18d2      	adds	r2, r2, r3
 800af52:	4b09      	ldr	r3, [pc, #36]	@ (800af78 <vPortFree+0x98>)
 800af54:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	0018      	movs	r0, r3
 800af5a:	f000 f871 	bl	800b040 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800af5e:	4b07      	ldr	r3, [pc, #28]	@ (800af7c <vPortFree+0x9c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	4b05      	ldr	r3, [pc, #20]	@ (800af7c <vPortFree+0x9c>)
 800af66:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800af68:	f7fe fd7a 	bl	8009a60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af6c:	46c0      	nop			@ (mov r8, r8)
 800af6e:	46bd      	mov	sp, r7
 800af70:	b004      	add	sp, #16
 800af72:	bd80      	pop	{r7, pc}
 800af74:	20001ed0 	.word	0x20001ed0
 800af78:	20001ec0 	.word	0x20001ec0
 800af7c:	20001ecc 	.word	0x20001ecc

0800af80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af86:	23c0      	movs	r3, #192	@ 0xc0
 800af88:	011b      	lsls	r3, r3, #4
 800af8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af8c:	4b26      	ldr	r3, [pc, #152]	@ (800b028 <prvHeapInit+0xa8>)
 800af8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2207      	movs	r2, #7
 800af94:	4013      	ands	r3, r2
 800af96:	d00c      	beq.n	800afb2 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3307      	adds	r3, #7
 800af9c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2207      	movs	r2, #7
 800afa2:	4393      	bics	r3, r2
 800afa4:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800afa6:	68ba      	ldr	r2, [r7, #8]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	1ad2      	subs	r2, r2, r3
 800afac:	4b1e      	ldr	r3, [pc, #120]	@ (800b028 <prvHeapInit+0xa8>)
 800afae:	18d3      	adds	r3, r2, r3
 800afb0:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800afb6:	4b1d      	ldr	r3, [pc, #116]	@ (800b02c <prvHeapInit+0xac>)
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afbc:	4b1b      	ldr	r3, [pc, #108]	@ (800b02c <prvHeapInit+0xac>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	18d3      	adds	r3, r2, r3
 800afc8:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afca:	2208      	movs	r2, #8
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	1a9b      	subs	r3, r3, r2
 800afd0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2207      	movs	r2, #7
 800afd6:	4393      	bics	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	4b14      	ldr	r3, [pc, #80]	@ (800b030 <prvHeapInit+0xb0>)
 800afde:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800afe0:	4b13      	ldr	r3, [pc, #76]	@ (800b030 <prvHeapInit+0xb0>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2200      	movs	r2, #0
 800afe6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afe8:	4b11      	ldr	r3, [pc, #68]	@ (800b030 <prvHeapInit+0xb0>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	1ad2      	subs	r2, r2, r3
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800affe:	4b0c      	ldr	r3, [pc, #48]	@ (800b030 <prvHeapInit+0xb0>)
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	4b0a      	ldr	r3, [pc, #40]	@ (800b034 <prvHeapInit+0xb4>)
 800b00c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	4b09      	ldr	r3, [pc, #36]	@ (800b038 <prvHeapInit+0xb8>)
 800b014:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b016:	4b09      	ldr	r3, [pc, #36]	@ (800b03c <prvHeapInit+0xbc>)
 800b018:	2280      	movs	r2, #128	@ 0x80
 800b01a:	0612      	lsls	r2, r2, #24
 800b01c:	601a      	str	r2, [r3, #0]
}
 800b01e:	46c0      	nop			@ (mov r8, r8)
 800b020:	46bd      	mov	sp, r7
 800b022:	b004      	add	sp, #16
 800b024:	bd80      	pop	{r7, pc}
 800b026:	46c0      	nop			@ (mov r8, r8)
 800b028:	200012b4 	.word	0x200012b4
 800b02c:	20001eb4 	.word	0x20001eb4
 800b030:	20001ebc 	.word	0x20001ebc
 800b034:	20001ec4 	.word	0x20001ec4
 800b038:	20001ec0 	.word	0x20001ec0
 800b03c:	20001ed0 	.word	0x20001ed0

0800b040 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b048:	4b27      	ldr	r3, [pc, #156]	@ (800b0e8 <prvInsertBlockIntoFreeList+0xa8>)
 800b04a:	60fb      	str	r3, [r7, #12]
 800b04c:	e002      	b.n	800b054 <prvInsertBlockIntoFreeList+0x14>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d8f7      	bhi.n	800b04e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	18d3      	adds	r3, r2, r3
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d108      	bne.n	800b082 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	18d2      	adds	r2, r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	18d2      	adds	r2, r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	429a      	cmp	r2, r3
 800b094:	d118      	bne.n	800b0c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	4b14      	ldr	r3, [pc, #80]	@ (800b0ec <prvInsertBlockIntoFreeList+0xac>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d00d      	beq.n	800b0be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685a      	ldr	r2, [r3, #4]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	18d2      	adds	r2, r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	601a      	str	r2, [r3, #0]
 800b0bc:	e008      	b.n	800b0d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0be:	4b0b      	ldr	r3, [pc, #44]	@ (800b0ec <prvInsertBlockIntoFreeList+0xac>)
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	e003      	b.n	800b0d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d002      	beq.n	800b0de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0de:	46c0      	nop			@ (mov r8, r8)
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	b004      	add	sp, #16
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	46c0      	nop			@ (mov r8, r8)
 800b0e8:	20001eb4 	.word	0x20001eb4
 800b0ec:	20001ebc 	.word	0x20001ebc

0800b0f0 <_vsniprintf_r>:
 800b0f0:	b530      	push	{r4, r5, lr}
 800b0f2:	0014      	movs	r4, r2
 800b0f4:	0005      	movs	r5, r0
 800b0f6:	001a      	movs	r2, r3
 800b0f8:	b09b      	sub	sp, #108	@ 0x6c
 800b0fa:	2c00      	cmp	r4, #0
 800b0fc:	da05      	bge.n	800b10a <_vsniprintf_r+0x1a>
 800b0fe:	238b      	movs	r3, #139	@ 0x8b
 800b100:	6003      	str	r3, [r0, #0]
 800b102:	2001      	movs	r0, #1
 800b104:	4240      	negs	r0, r0
 800b106:	b01b      	add	sp, #108	@ 0x6c
 800b108:	bd30      	pop	{r4, r5, pc}
 800b10a:	2382      	movs	r3, #130	@ 0x82
 800b10c:	4668      	mov	r0, sp
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	8183      	strh	r3, [r0, #12]
 800b112:	2300      	movs	r3, #0
 800b114:	9100      	str	r1, [sp, #0]
 800b116:	9104      	str	r1, [sp, #16]
 800b118:	429c      	cmp	r4, r3
 800b11a:	d000      	beq.n	800b11e <_vsniprintf_r+0x2e>
 800b11c:	1e63      	subs	r3, r4, #1
 800b11e:	9302      	str	r3, [sp, #8]
 800b120:	9305      	str	r3, [sp, #20]
 800b122:	2301      	movs	r3, #1
 800b124:	4669      	mov	r1, sp
 800b126:	425b      	negs	r3, r3
 800b128:	81cb      	strh	r3, [r1, #14]
 800b12a:	0028      	movs	r0, r5
 800b12c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b12e:	f000 f95f 	bl	800b3f0 <_svfiprintf_r>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	da01      	bge.n	800b13a <_vsniprintf_r+0x4a>
 800b136:	238b      	movs	r3, #139	@ 0x8b
 800b138:	602b      	str	r3, [r5, #0]
 800b13a:	2c00      	cmp	r4, #0
 800b13c:	d0e3      	beq.n	800b106 <_vsniprintf_r+0x16>
 800b13e:	2200      	movs	r2, #0
 800b140:	9b00      	ldr	r3, [sp, #0]
 800b142:	701a      	strb	r2, [r3, #0]
 800b144:	e7df      	b.n	800b106 <_vsniprintf_r+0x16>
	...

0800b148 <vsniprintf>:
 800b148:	b513      	push	{r0, r1, r4, lr}
 800b14a:	4c04      	ldr	r4, [pc, #16]	@ (800b15c <vsniprintf+0x14>)
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	0013      	movs	r3, r2
 800b150:	000a      	movs	r2, r1
 800b152:	0001      	movs	r1, r0
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	f7ff ffcb 	bl	800b0f0 <_vsniprintf_r>
 800b15a:	bd16      	pop	{r1, r2, r4, pc}
 800b15c:	200000ec 	.word	0x200000ec

0800b160 <memset>:
 800b160:	0003      	movs	r3, r0
 800b162:	1882      	adds	r2, r0, r2
 800b164:	4293      	cmp	r3, r2
 800b166:	d100      	bne.n	800b16a <memset+0xa>
 800b168:	4770      	bx	lr
 800b16a:	7019      	strb	r1, [r3, #0]
 800b16c:	3301      	adds	r3, #1
 800b16e:	e7f9      	b.n	800b164 <memset+0x4>

0800b170 <_reclaim_reent>:
 800b170:	4b2e      	ldr	r3, [pc, #184]	@ (800b22c <_reclaim_reent+0xbc>)
 800b172:	b570      	push	{r4, r5, r6, lr}
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	0004      	movs	r4, r0
 800b178:	4283      	cmp	r3, r0
 800b17a:	d04f      	beq.n	800b21c <_reclaim_reent+0xac>
 800b17c:	69c3      	ldr	r3, [r0, #28]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d017      	beq.n	800b1b2 <_reclaim_reent+0x42>
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00d      	beq.n	800b1a4 <_reclaim_reent+0x34>
 800b188:	2500      	movs	r5, #0
 800b18a:	69e3      	ldr	r3, [r4, #28]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	5959      	ldr	r1, [r3, r5]
 800b190:	2900      	cmp	r1, #0
 800b192:	d144      	bne.n	800b21e <_reclaim_reent+0xae>
 800b194:	3504      	adds	r5, #4
 800b196:	2d80      	cmp	r5, #128	@ 0x80
 800b198:	d1f7      	bne.n	800b18a <_reclaim_reent+0x1a>
 800b19a:	69e3      	ldr	r3, [r4, #28]
 800b19c:	0020      	movs	r0, r4
 800b19e:	68d9      	ldr	r1, [r3, #12]
 800b1a0:	f000 f87c 	bl	800b29c <_free_r>
 800b1a4:	69e3      	ldr	r3, [r4, #28]
 800b1a6:	6819      	ldr	r1, [r3, #0]
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	d002      	beq.n	800b1b2 <_reclaim_reent+0x42>
 800b1ac:	0020      	movs	r0, r4
 800b1ae:	f000 f875 	bl	800b29c <_free_r>
 800b1b2:	6961      	ldr	r1, [r4, #20]
 800b1b4:	2900      	cmp	r1, #0
 800b1b6:	d002      	beq.n	800b1be <_reclaim_reent+0x4e>
 800b1b8:	0020      	movs	r0, r4
 800b1ba:	f000 f86f 	bl	800b29c <_free_r>
 800b1be:	69e1      	ldr	r1, [r4, #28]
 800b1c0:	2900      	cmp	r1, #0
 800b1c2:	d002      	beq.n	800b1ca <_reclaim_reent+0x5a>
 800b1c4:	0020      	movs	r0, r4
 800b1c6:	f000 f869 	bl	800b29c <_free_r>
 800b1ca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	d002      	beq.n	800b1d6 <_reclaim_reent+0x66>
 800b1d0:	0020      	movs	r0, r4
 800b1d2:	f000 f863 	bl	800b29c <_free_r>
 800b1d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1d8:	2900      	cmp	r1, #0
 800b1da:	d002      	beq.n	800b1e2 <_reclaim_reent+0x72>
 800b1dc:	0020      	movs	r0, r4
 800b1de:	f000 f85d 	bl	800b29c <_free_r>
 800b1e2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	d002      	beq.n	800b1ee <_reclaim_reent+0x7e>
 800b1e8:	0020      	movs	r0, r4
 800b1ea:	f000 f857 	bl	800b29c <_free_r>
 800b1ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	d002      	beq.n	800b1fa <_reclaim_reent+0x8a>
 800b1f4:	0020      	movs	r0, r4
 800b1f6:	f000 f851 	bl	800b29c <_free_r>
 800b1fa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	d002      	beq.n	800b206 <_reclaim_reent+0x96>
 800b200:	0020      	movs	r0, r4
 800b202:	f000 f84b 	bl	800b29c <_free_r>
 800b206:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b208:	2900      	cmp	r1, #0
 800b20a:	d002      	beq.n	800b212 <_reclaim_reent+0xa2>
 800b20c:	0020      	movs	r0, r4
 800b20e:	f000 f845 	bl	800b29c <_free_r>
 800b212:	6a23      	ldr	r3, [r4, #32]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <_reclaim_reent+0xac>
 800b218:	0020      	movs	r0, r4
 800b21a:	4798      	blx	r3
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
 800b21e:	680e      	ldr	r6, [r1, #0]
 800b220:	0020      	movs	r0, r4
 800b222:	f000 f83b 	bl	800b29c <_free_r>
 800b226:	0031      	movs	r1, r6
 800b228:	e7b2      	b.n	800b190 <_reclaim_reent+0x20>
 800b22a:	46c0      	nop			@ (mov r8, r8)
 800b22c:	200000ec 	.word	0x200000ec

0800b230 <__errno>:
 800b230:	4b01      	ldr	r3, [pc, #4]	@ (800b238 <__errno+0x8>)
 800b232:	6818      	ldr	r0, [r3, #0]
 800b234:	4770      	bx	lr
 800b236:	46c0      	nop			@ (mov r8, r8)
 800b238:	200000ec 	.word	0x200000ec

0800b23c <__libc_init_array>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	2600      	movs	r6, #0
 800b240:	4c0c      	ldr	r4, [pc, #48]	@ (800b274 <__libc_init_array+0x38>)
 800b242:	4d0d      	ldr	r5, [pc, #52]	@ (800b278 <__libc_init_array+0x3c>)
 800b244:	1b64      	subs	r4, r4, r5
 800b246:	10a4      	asrs	r4, r4, #2
 800b248:	42a6      	cmp	r6, r4
 800b24a:	d109      	bne.n	800b260 <__libc_init_array+0x24>
 800b24c:	2600      	movs	r6, #0
 800b24e:	f000 fc65 	bl	800bb1c <_init>
 800b252:	4c0a      	ldr	r4, [pc, #40]	@ (800b27c <__libc_init_array+0x40>)
 800b254:	4d0a      	ldr	r5, [pc, #40]	@ (800b280 <__libc_init_array+0x44>)
 800b256:	1b64      	subs	r4, r4, r5
 800b258:	10a4      	asrs	r4, r4, #2
 800b25a:	42a6      	cmp	r6, r4
 800b25c:	d105      	bne.n	800b26a <__libc_init_array+0x2e>
 800b25e:	bd70      	pop	{r4, r5, r6, pc}
 800b260:	00b3      	lsls	r3, r6, #2
 800b262:	58eb      	ldr	r3, [r5, r3]
 800b264:	4798      	blx	r3
 800b266:	3601      	adds	r6, #1
 800b268:	e7ee      	b.n	800b248 <__libc_init_array+0xc>
 800b26a:	00b3      	lsls	r3, r6, #2
 800b26c:	58eb      	ldr	r3, [r5, r3]
 800b26e:	4798      	blx	r3
 800b270:	3601      	adds	r6, #1
 800b272:	e7f2      	b.n	800b25a <__libc_init_array+0x1e>
 800b274:	0800bf38 	.word	0x0800bf38
 800b278:	0800bf38 	.word	0x0800bf38
 800b27c:	0800bf3c 	.word	0x0800bf3c
 800b280:	0800bf38 	.word	0x0800bf38

0800b284 <__retarget_lock_acquire_recursive>:
 800b284:	4770      	bx	lr

0800b286 <__retarget_lock_release_recursive>:
 800b286:	4770      	bx	lr

0800b288 <memcpy>:
 800b288:	2300      	movs	r3, #0
 800b28a:	b510      	push	{r4, lr}
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d100      	bne.n	800b292 <memcpy+0xa>
 800b290:	bd10      	pop	{r4, pc}
 800b292:	5ccc      	ldrb	r4, [r1, r3]
 800b294:	54c4      	strb	r4, [r0, r3]
 800b296:	3301      	adds	r3, #1
 800b298:	e7f8      	b.n	800b28c <memcpy+0x4>
	...

0800b29c <_free_r>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	0005      	movs	r5, r0
 800b2a0:	1e0c      	subs	r4, r1, #0
 800b2a2:	d010      	beq.n	800b2c6 <_free_r+0x2a>
 800b2a4:	3c04      	subs	r4, #4
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	da00      	bge.n	800b2ae <_free_r+0x12>
 800b2ac:	18e4      	adds	r4, r4, r3
 800b2ae:	0028      	movs	r0, r5
 800b2b0:	f000 fbbc 	bl	800ba2c <__malloc_lock>
 800b2b4:	4a1d      	ldr	r2, [pc, #116]	@ (800b32c <_free_r+0x90>)
 800b2b6:	6813      	ldr	r3, [r2, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d105      	bne.n	800b2c8 <_free_r+0x2c>
 800b2bc:	6063      	str	r3, [r4, #4]
 800b2be:	6014      	str	r4, [r2, #0]
 800b2c0:	0028      	movs	r0, r5
 800b2c2:	f000 fbbb 	bl	800ba3c <__malloc_unlock>
 800b2c6:	bd70      	pop	{r4, r5, r6, pc}
 800b2c8:	42a3      	cmp	r3, r4
 800b2ca:	d908      	bls.n	800b2de <_free_r+0x42>
 800b2cc:	6820      	ldr	r0, [r4, #0]
 800b2ce:	1821      	adds	r1, r4, r0
 800b2d0:	428b      	cmp	r3, r1
 800b2d2:	d1f3      	bne.n	800b2bc <_free_r+0x20>
 800b2d4:	6819      	ldr	r1, [r3, #0]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	1809      	adds	r1, r1, r0
 800b2da:	6021      	str	r1, [r4, #0]
 800b2dc:	e7ee      	b.n	800b2bc <_free_r+0x20>
 800b2de:	001a      	movs	r2, r3
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <_free_r+0x4e>
 800b2e6:	42a3      	cmp	r3, r4
 800b2e8:	d9f9      	bls.n	800b2de <_free_r+0x42>
 800b2ea:	6811      	ldr	r1, [r2, #0]
 800b2ec:	1850      	adds	r0, r2, r1
 800b2ee:	42a0      	cmp	r0, r4
 800b2f0:	d10b      	bne.n	800b30a <_free_r+0x6e>
 800b2f2:	6820      	ldr	r0, [r4, #0]
 800b2f4:	1809      	adds	r1, r1, r0
 800b2f6:	1850      	adds	r0, r2, r1
 800b2f8:	6011      	str	r1, [r2, #0]
 800b2fa:	4283      	cmp	r3, r0
 800b2fc:	d1e0      	bne.n	800b2c0 <_free_r+0x24>
 800b2fe:	6818      	ldr	r0, [r3, #0]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	1841      	adds	r1, r0, r1
 800b304:	6011      	str	r1, [r2, #0]
 800b306:	6053      	str	r3, [r2, #4]
 800b308:	e7da      	b.n	800b2c0 <_free_r+0x24>
 800b30a:	42a0      	cmp	r0, r4
 800b30c:	d902      	bls.n	800b314 <_free_r+0x78>
 800b30e:	230c      	movs	r3, #12
 800b310:	602b      	str	r3, [r5, #0]
 800b312:	e7d5      	b.n	800b2c0 <_free_r+0x24>
 800b314:	6820      	ldr	r0, [r4, #0]
 800b316:	1821      	adds	r1, r4, r0
 800b318:	428b      	cmp	r3, r1
 800b31a:	d103      	bne.n	800b324 <_free_r+0x88>
 800b31c:	6819      	ldr	r1, [r3, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	1809      	adds	r1, r1, r0
 800b322:	6021      	str	r1, [r4, #0]
 800b324:	6063      	str	r3, [r4, #4]
 800b326:	6054      	str	r4, [r2, #4]
 800b328:	e7ca      	b.n	800b2c0 <_free_r+0x24>
 800b32a:	46c0      	nop			@ (mov r8, r8)
 800b32c:	20002018 	.word	0x20002018

0800b330 <__ssputs_r>:
 800b330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b332:	688e      	ldr	r6, [r1, #8]
 800b334:	b085      	sub	sp, #20
 800b336:	001f      	movs	r7, r3
 800b338:	000c      	movs	r4, r1
 800b33a:	680b      	ldr	r3, [r1, #0]
 800b33c:	9002      	str	r0, [sp, #8]
 800b33e:	9203      	str	r2, [sp, #12]
 800b340:	42be      	cmp	r6, r7
 800b342:	d830      	bhi.n	800b3a6 <__ssputs_r+0x76>
 800b344:	210c      	movs	r1, #12
 800b346:	5e62      	ldrsh	r2, [r4, r1]
 800b348:	2190      	movs	r1, #144	@ 0x90
 800b34a:	00c9      	lsls	r1, r1, #3
 800b34c:	420a      	tst	r2, r1
 800b34e:	d028      	beq.n	800b3a2 <__ssputs_r+0x72>
 800b350:	2003      	movs	r0, #3
 800b352:	6921      	ldr	r1, [r4, #16]
 800b354:	1a5b      	subs	r3, r3, r1
 800b356:	9301      	str	r3, [sp, #4]
 800b358:	6963      	ldr	r3, [r4, #20]
 800b35a:	4343      	muls	r3, r0
 800b35c:	9801      	ldr	r0, [sp, #4]
 800b35e:	0fdd      	lsrs	r5, r3, #31
 800b360:	18ed      	adds	r5, r5, r3
 800b362:	1c7b      	adds	r3, r7, #1
 800b364:	181b      	adds	r3, r3, r0
 800b366:	106d      	asrs	r5, r5, #1
 800b368:	42ab      	cmp	r3, r5
 800b36a:	d900      	bls.n	800b36e <__ssputs_r+0x3e>
 800b36c:	001d      	movs	r5, r3
 800b36e:	0552      	lsls	r2, r2, #21
 800b370:	d528      	bpl.n	800b3c4 <__ssputs_r+0x94>
 800b372:	0029      	movs	r1, r5
 800b374:	9802      	ldr	r0, [sp, #8]
 800b376:	f000 f95b 	bl	800b630 <_malloc_r>
 800b37a:	1e06      	subs	r6, r0, #0
 800b37c:	d02c      	beq.n	800b3d8 <__ssputs_r+0xa8>
 800b37e:	9a01      	ldr	r2, [sp, #4]
 800b380:	6921      	ldr	r1, [r4, #16]
 800b382:	f7ff ff81 	bl	800b288 <memcpy>
 800b386:	89a2      	ldrh	r2, [r4, #12]
 800b388:	4b18      	ldr	r3, [pc, #96]	@ (800b3ec <__ssputs_r+0xbc>)
 800b38a:	401a      	ands	r2, r3
 800b38c:	2380      	movs	r3, #128	@ 0x80
 800b38e:	4313      	orrs	r3, r2
 800b390:	81a3      	strh	r3, [r4, #12]
 800b392:	9b01      	ldr	r3, [sp, #4]
 800b394:	6126      	str	r6, [r4, #16]
 800b396:	18f6      	adds	r6, r6, r3
 800b398:	6026      	str	r6, [r4, #0]
 800b39a:	003e      	movs	r6, r7
 800b39c:	6165      	str	r5, [r4, #20]
 800b39e:	1aed      	subs	r5, r5, r3
 800b3a0:	60a5      	str	r5, [r4, #8]
 800b3a2:	42be      	cmp	r6, r7
 800b3a4:	d900      	bls.n	800b3a8 <__ssputs_r+0x78>
 800b3a6:	003e      	movs	r6, r7
 800b3a8:	0032      	movs	r2, r6
 800b3aa:	9903      	ldr	r1, [sp, #12]
 800b3ac:	6820      	ldr	r0, [r4, #0]
 800b3ae:	f000 fb7c 	bl	800baaa <memmove>
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	68a3      	ldr	r3, [r4, #8]
 800b3b6:	1b9b      	subs	r3, r3, r6
 800b3b8:	60a3      	str	r3, [r4, #8]
 800b3ba:	6823      	ldr	r3, [r4, #0]
 800b3bc:	199b      	adds	r3, r3, r6
 800b3be:	6023      	str	r3, [r4, #0]
 800b3c0:	b005      	add	sp, #20
 800b3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c4:	002a      	movs	r2, r5
 800b3c6:	9802      	ldr	r0, [sp, #8]
 800b3c8:	f000 fb40 	bl	800ba4c <_realloc_r>
 800b3cc:	1e06      	subs	r6, r0, #0
 800b3ce:	d1e0      	bne.n	800b392 <__ssputs_r+0x62>
 800b3d0:	6921      	ldr	r1, [r4, #16]
 800b3d2:	9802      	ldr	r0, [sp, #8]
 800b3d4:	f7ff ff62 	bl	800b29c <_free_r>
 800b3d8:	230c      	movs	r3, #12
 800b3da:	2001      	movs	r0, #1
 800b3dc:	9a02      	ldr	r2, [sp, #8]
 800b3de:	4240      	negs	r0, r0
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	89a2      	ldrh	r2, [r4, #12]
 800b3e4:	3334      	adds	r3, #52	@ 0x34
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	81a3      	strh	r3, [r4, #12]
 800b3ea:	e7e9      	b.n	800b3c0 <__ssputs_r+0x90>
 800b3ec:	fffffb7f 	.word	0xfffffb7f

0800b3f0 <_svfiprintf_r>:
 800b3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3f2:	b0a1      	sub	sp, #132	@ 0x84
 800b3f4:	9003      	str	r0, [sp, #12]
 800b3f6:	001d      	movs	r5, r3
 800b3f8:	898b      	ldrh	r3, [r1, #12]
 800b3fa:	000f      	movs	r7, r1
 800b3fc:	0016      	movs	r6, r2
 800b3fe:	061b      	lsls	r3, r3, #24
 800b400:	d511      	bpl.n	800b426 <_svfiprintf_r+0x36>
 800b402:	690b      	ldr	r3, [r1, #16]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d10e      	bne.n	800b426 <_svfiprintf_r+0x36>
 800b408:	2140      	movs	r1, #64	@ 0x40
 800b40a:	f000 f911 	bl	800b630 <_malloc_r>
 800b40e:	6038      	str	r0, [r7, #0]
 800b410:	6138      	str	r0, [r7, #16]
 800b412:	2800      	cmp	r0, #0
 800b414:	d105      	bne.n	800b422 <_svfiprintf_r+0x32>
 800b416:	230c      	movs	r3, #12
 800b418:	9a03      	ldr	r2, [sp, #12]
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	2001      	movs	r0, #1
 800b41e:	4240      	negs	r0, r0
 800b420:	e0cf      	b.n	800b5c2 <_svfiprintf_r+0x1d2>
 800b422:	2340      	movs	r3, #64	@ 0x40
 800b424:	617b      	str	r3, [r7, #20]
 800b426:	2300      	movs	r3, #0
 800b428:	ac08      	add	r4, sp, #32
 800b42a:	6163      	str	r3, [r4, #20]
 800b42c:	3320      	adds	r3, #32
 800b42e:	7663      	strb	r3, [r4, #25]
 800b430:	3310      	adds	r3, #16
 800b432:	76a3      	strb	r3, [r4, #26]
 800b434:	9507      	str	r5, [sp, #28]
 800b436:	0035      	movs	r5, r6
 800b438:	782b      	ldrb	r3, [r5, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <_svfiprintf_r+0x52>
 800b43e:	2b25      	cmp	r3, #37	@ 0x25
 800b440:	d148      	bne.n	800b4d4 <_svfiprintf_r+0xe4>
 800b442:	1bab      	subs	r3, r5, r6
 800b444:	9305      	str	r3, [sp, #20]
 800b446:	42b5      	cmp	r5, r6
 800b448:	d00b      	beq.n	800b462 <_svfiprintf_r+0x72>
 800b44a:	0032      	movs	r2, r6
 800b44c:	0039      	movs	r1, r7
 800b44e:	9803      	ldr	r0, [sp, #12]
 800b450:	f7ff ff6e 	bl	800b330 <__ssputs_r>
 800b454:	3001      	adds	r0, #1
 800b456:	d100      	bne.n	800b45a <_svfiprintf_r+0x6a>
 800b458:	e0ae      	b.n	800b5b8 <_svfiprintf_r+0x1c8>
 800b45a:	6963      	ldr	r3, [r4, #20]
 800b45c:	9a05      	ldr	r2, [sp, #20]
 800b45e:	189b      	adds	r3, r3, r2
 800b460:	6163      	str	r3, [r4, #20]
 800b462:	782b      	ldrb	r3, [r5, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d100      	bne.n	800b46a <_svfiprintf_r+0x7a>
 800b468:	e0a6      	b.n	800b5b8 <_svfiprintf_r+0x1c8>
 800b46a:	2201      	movs	r2, #1
 800b46c:	2300      	movs	r3, #0
 800b46e:	4252      	negs	r2, r2
 800b470:	6062      	str	r2, [r4, #4]
 800b472:	a904      	add	r1, sp, #16
 800b474:	3254      	adds	r2, #84	@ 0x54
 800b476:	1852      	adds	r2, r2, r1
 800b478:	1c6e      	adds	r6, r5, #1
 800b47a:	6023      	str	r3, [r4, #0]
 800b47c:	60e3      	str	r3, [r4, #12]
 800b47e:	60a3      	str	r3, [r4, #8]
 800b480:	7013      	strb	r3, [r2, #0]
 800b482:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b484:	4b54      	ldr	r3, [pc, #336]	@ (800b5d8 <_svfiprintf_r+0x1e8>)
 800b486:	2205      	movs	r2, #5
 800b488:	0018      	movs	r0, r3
 800b48a:	7831      	ldrb	r1, [r6, #0]
 800b48c:	9305      	str	r3, [sp, #20]
 800b48e:	f000 fb31 	bl	800baf4 <memchr>
 800b492:	1c75      	adds	r5, r6, #1
 800b494:	2800      	cmp	r0, #0
 800b496:	d11f      	bne.n	800b4d8 <_svfiprintf_r+0xe8>
 800b498:	6822      	ldr	r2, [r4, #0]
 800b49a:	06d3      	lsls	r3, r2, #27
 800b49c:	d504      	bpl.n	800b4a8 <_svfiprintf_r+0xb8>
 800b49e:	2353      	movs	r3, #83	@ 0x53
 800b4a0:	a904      	add	r1, sp, #16
 800b4a2:	185b      	adds	r3, r3, r1
 800b4a4:	2120      	movs	r1, #32
 800b4a6:	7019      	strb	r1, [r3, #0]
 800b4a8:	0713      	lsls	r3, r2, #28
 800b4aa:	d504      	bpl.n	800b4b6 <_svfiprintf_r+0xc6>
 800b4ac:	2353      	movs	r3, #83	@ 0x53
 800b4ae:	a904      	add	r1, sp, #16
 800b4b0:	185b      	adds	r3, r3, r1
 800b4b2:	212b      	movs	r1, #43	@ 0x2b
 800b4b4:	7019      	strb	r1, [r3, #0]
 800b4b6:	7833      	ldrb	r3, [r6, #0]
 800b4b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4ba:	d016      	beq.n	800b4ea <_svfiprintf_r+0xfa>
 800b4bc:	0035      	movs	r5, r6
 800b4be:	2100      	movs	r1, #0
 800b4c0:	200a      	movs	r0, #10
 800b4c2:	68e3      	ldr	r3, [r4, #12]
 800b4c4:	782a      	ldrb	r2, [r5, #0]
 800b4c6:	1c6e      	adds	r6, r5, #1
 800b4c8:	3a30      	subs	r2, #48	@ 0x30
 800b4ca:	2a09      	cmp	r2, #9
 800b4cc:	d950      	bls.n	800b570 <_svfiprintf_r+0x180>
 800b4ce:	2900      	cmp	r1, #0
 800b4d0:	d111      	bne.n	800b4f6 <_svfiprintf_r+0x106>
 800b4d2:	e017      	b.n	800b504 <_svfiprintf_r+0x114>
 800b4d4:	3501      	adds	r5, #1
 800b4d6:	e7af      	b.n	800b438 <_svfiprintf_r+0x48>
 800b4d8:	9b05      	ldr	r3, [sp, #20]
 800b4da:	6822      	ldr	r2, [r4, #0]
 800b4dc:	1ac0      	subs	r0, r0, r3
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4083      	lsls	r3, r0
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	002e      	movs	r6, r5
 800b4e6:	6023      	str	r3, [r4, #0]
 800b4e8:	e7cc      	b.n	800b484 <_svfiprintf_r+0x94>
 800b4ea:	9b07      	ldr	r3, [sp, #28]
 800b4ec:	1d19      	adds	r1, r3, #4
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	9107      	str	r1, [sp, #28]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	db01      	blt.n	800b4fa <_svfiprintf_r+0x10a>
 800b4f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4f8:	e004      	b.n	800b504 <_svfiprintf_r+0x114>
 800b4fa:	425b      	negs	r3, r3
 800b4fc:	60e3      	str	r3, [r4, #12]
 800b4fe:	2302      	movs	r3, #2
 800b500:	4313      	orrs	r3, r2
 800b502:	6023      	str	r3, [r4, #0]
 800b504:	782b      	ldrb	r3, [r5, #0]
 800b506:	2b2e      	cmp	r3, #46	@ 0x2e
 800b508:	d10c      	bne.n	800b524 <_svfiprintf_r+0x134>
 800b50a:	786b      	ldrb	r3, [r5, #1]
 800b50c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b50e:	d134      	bne.n	800b57a <_svfiprintf_r+0x18a>
 800b510:	9b07      	ldr	r3, [sp, #28]
 800b512:	3502      	adds	r5, #2
 800b514:	1d1a      	adds	r2, r3, #4
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	9207      	str	r2, [sp, #28]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	da01      	bge.n	800b522 <_svfiprintf_r+0x132>
 800b51e:	2301      	movs	r3, #1
 800b520:	425b      	negs	r3, r3
 800b522:	9309      	str	r3, [sp, #36]	@ 0x24
 800b524:	4e2d      	ldr	r6, [pc, #180]	@ (800b5dc <_svfiprintf_r+0x1ec>)
 800b526:	2203      	movs	r2, #3
 800b528:	0030      	movs	r0, r6
 800b52a:	7829      	ldrb	r1, [r5, #0]
 800b52c:	f000 fae2 	bl	800baf4 <memchr>
 800b530:	2800      	cmp	r0, #0
 800b532:	d006      	beq.n	800b542 <_svfiprintf_r+0x152>
 800b534:	2340      	movs	r3, #64	@ 0x40
 800b536:	1b80      	subs	r0, r0, r6
 800b538:	4083      	lsls	r3, r0
 800b53a:	6822      	ldr	r2, [r4, #0]
 800b53c:	3501      	adds	r5, #1
 800b53e:	4313      	orrs	r3, r2
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	7829      	ldrb	r1, [r5, #0]
 800b544:	2206      	movs	r2, #6
 800b546:	4826      	ldr	r0, [pc, #152]	@ (800b5e0 <_svfiprintf_r+0x1f0>)
 800b548:	1c6e      	adds	r6, r5, #1
 800b54a:	7621      	strb	r1, [r4, #24]
 800b54c:	f000 fad2 	bl	800baf4 <memchr>
 800b550:	2800      	cmp	r0, #0
 800b552:	d038      	beq.n	800b5c6 <_svfiprintf_r+0x1d6>
 800b554:	4b23      	ldr	r3, [pc, #140]	@ (800b5e4 <_svfiprintf_r+0x1f4>)
 800b556:	2b00      	cmp	r3, #0
 800b558:	d122      	bne.n	800b5a0 <_svfiprintf_r+0x1b0>
 800b55a:	2207      	movs	r2, #7
 800b55c:	9b07      	ldr	r3, [sp, #28]
 800b55e:	3307      	adds	r3, #7
 800b560:	4393      	bics	r3, r2
 800b562:	3308      	adds	r3, #8
 800b564:	9307      	str	r3, [sp, #28]
 800b566:	6963      	ldr	r3, [r4, #20]
 800b568:	9a04      	ldr	r2, [sp, #16]
 800b56a:	189b      	adds	r3, r3, r2
 800b56c:	6163      	str	r3, [r4, #20]
 800b56e:	e762      	b.n	800b436 <_svfiprintf_r+0x46>
 800b570:	4343      	muls	r3, r0
 800b572:	0035      	movs	r5, r6
 800b574:	2101      	movs	r1, #1
 800b576:	189b      	adds	r3, r3, r2
 800b578:	e7a4      	b.n	800b4c4 <_svfiprintf_r+0xd4>
 800b57a:	2300      	movs	r3, #0
 800b57c:	200a      	movs	r0, #10
 800b57e:	0019      	movs	r1, r3
 800b580:	3501      	adds	r5, #1
 800b582:	6063      	str	r3, [r4, #4]
 800b584:	782a      	ldrb	r2, [r5, #0]
 800b586:	1c6e      	adds	r6, r5, #1
 800b588:	3a30      	subs	r2, #48	@ 0x30
 800b58a:	2a09      	cmp	r2, #9
 800b58c:	d903      	bls.n	800b596 <_svfiprintf_r+0x1a6>
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0c8      	beq.n	800b524 <_svfiprintf_r+0x134>
 800b592:	9109      	str	r1, [sp, #36]	@ 0x24
 800b594:	e7c6      	b.n	800b524 <_svfiprintf_r+0x134>
 800b596:	4341      	muls	r1, r0
 800b598:	0035      	movs	r5, r6
 800b59a:	2301      	movs	r3, #1
 800b59c:	1889      	adds	r1, r1, r2
 800b59e:	e7f1      	b.n	800b584 <_svfiprintf_r+0x194>
 800b5a0:	aa07      	add	r2, sp, #28
 800b5a2:	9200      	str	r2, [sp, #0]
 800b5a4:	0021      	movs	r1, r4
 800b5a6:	003a      	movs	r2, r7
 800b5a8:	4b0f      	ldr	r3, [pc, #60]	@ (800b5e8 <_svfiprintf_r+0x1f8>)
 800b5aa:	9803      	ldr	r0, [sp, #12]
 800b5ac:	e000      	b.n	800b5b0 <_svfiprintf_r+0x1c0>
 800b5ae:	bf00      	nop
 800b5b0:	9004      	str	r0, [sp, #16]
 800b5b2:	9b04      	ldr	r3, [sp, #16]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	d1d6      	bne.n	800b566 <_svfiprintf_r+0x176>
 800b5b8:	89bb      	ldrh	r3, [r7, #12]
 800b5ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b5bc:	065b      	lsls	r3, r3, #25
 800b5be:	d500      	bpl.n	800b5c2 <_svfiprintf_r+0x1d2>
 800b5c0:	e72c      	b.n	800b41c <_svfiprintf_r+0x2c>
 800b5c2:	b021      	add	sp, #132	@ 0x84
 800b5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5c6:	aa07      	add	r2, sp, #28
 800b5c8:	9200      	str	r2, [sp, #0]
 800b5ca:	0021      	movs	r1, r4
 800b5cc:	003a      	movs	r2, r7
 800b5ce:	4b06      	ldr	r3, [pc, #24]	@ (800b5e8 <_svfiprintf_r+0x1f8>)
 800b5d0:	9803      	ldr	r0, [sp, #12]
 800b5d2:	f000 f91d 	bl	800b810 <_printf_i>
 800b5d6:	e7eb      	b.n	800b5b0 <_svfiprintf_r+0x1c0>
 800b5d8:	0800bf04 	.word	0x0800bf04
 800b5dc:	0800bf0a 	.word	0x0800bf0a
 800b5e0:	0800bf0e 	.word	0x0800bf0e
 800b5e4:	00000000 	.word	0x00000000
 800b5e8:	0800b331 	.word	0x0800b331

0800b5ec <sbrk_aligned>:
 800b5ec:	b570      	push	{r4, r5, r6, lr}
 800b5ee:	4e0f      	ldr	r6, [pc, #60]	@ (800b62c <sbrk_aligned+0x40>)
 800b5f0:	000d      	movs	r5, r1
 800b5f2:	6831      	ldr	r1, [r6, #0]
 800b5f4:	0004      	movs	r4, r0
 800b5f6:	2900      	cmp	r1, #0
 800b5f8:	d102      	bne.n	800b600 <sbrk_aligned+0x14>
 800b5fa:	f000 fa69 	bl	800bad0 <_sbrk_r>
 800b5fe:	6030      	str	r0, [r6, #0]
 800b600:	0029      	movs	r1, r5
 800b602:	0020      	movs	r0, r4
 800b604:	f000 fa64 	bl	800bad0 <_sbrk_r>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d103      	bne.n	800b614 <sbrk_aligned+0x28>
 800b60c:	2501      	movs	r5, #1
 800b60e:	426d      	negs	r5, r5
 800b610:	0028      	movs	r0, r5
 800b612:	bd70      	pop	{r4, r5, r6, pc}
 800b614:	2303      	movs	r3, #3
 800b616:	1cc5      	adds	r5, r0, #3
 800b618:	439d      	bics	r5, r3
 800b61a:	42a8      	cmp	r0, r5
 800b61c:	d0f8      	beq.n	800b610 <sbrk_aligned+0x24>
 800b61e:	1a29      	subs	r1, r5, r0
 800b620:	0020      	movs	r0, r4
 800b622:	f000 fa55 	bl	800bad0 <_sbrk_r>
 800b626:	3001      	adds	r0, #1
 800b628:	d1f2      	bne.n	800b610 <sbrk_aligned+0x24>
 800b62a:	e7ef      	b.n	800b60c <sbrk_aligned+0x20>
 800b62c:	20002014 	.word	0x20002014

0800b630 <_malloc_r>:
 800b630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b632:	2203      	movs	r2, #3
 800b634:	1ccb      	adds	r3, r1, #3
 800b636:	4393      	bics	r3, r2
 800b638:	3308      	adds	r3, #8
 800b63a:	0005      	movs	r5, r0
 800b63c:	001f      	movs	r7, r3
 800b63e:	2b0c      	cmp	r3, #12
 800b640:	d234      	bcs.n	800b6ac <_malloc_r+0x7c>
 800b642:	270c      	movs	r7, #12
 800b644:	42b9      	cmp	r1, r7
 800b646:	d833      	bhi.n	800b6b0 <_malloc_r+0x80>
 800b648:	0028      	movs	r0, r5
 800b64a:	f000 f9ef 	bl	800ba2c <__malloc_lock>
 800b64e:	4e37      	ldr	r6, [pc, #220]	@ (800b72c <_malloc_r+0xfc>)
 800b650:	6833      	ldr	r3, [r6, #0]
 800b652:	001c      	movs	r4, r3
 800b654:	2c00      	cmp	r4, #0
 800b656:	d12f      	bne.n	800b6b8 <_malloc_r+0x88>
 800b658:	0039      	movs	r1, r7
 800b65a:	0028      	movs	r0, r5
 800b65c:	f7ff ffc6 	bl	800b5ec <sbrk_aligned>
 800b660:	0004      	movs	r4, r0
 800b662:	1c43      	adds	r3, r0, #1
 800b664:	d15f      	bne.n	800b726 <_malloc_r+0xf6>
 800b666:	6834      	ldr	r4, [r6, #0]
 800b668:	9400      	str	r4, [sp, #0]
 800b66a:	9b00      	ldr	r3, [sp, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d14a      	bne.n	800b706 <_malloc_r+0xd6>
 800b670:	2c00      	cmp	r4, #0
 800b672:	d052      	beq.n	800b71a <_malloc_r+0xea>
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	0028      	movs	r0, r5
 800b678:	18e3      	adds	r3, r4, r3
 800b67a:	9900      	ldr	r1, [sp, #0]
 800b67c:	9301      	str	r3, [sp, #4]
 800b67e:	f000 fa27 	bl	800bad0 <_sbrk_r>
 800b682:	9b01      	ldr	r3, [sp, #4]
 800b684:	4283      	cmp	r3, r0
 800b686:	d148      	bne.n	800b71a <_malloc_r+0xea>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	0028      	movs	r0, r5
 800b68c:	1aff      	subs	r7, r7, r3
 800b68e:	0039      	movs	r1, r7
 800b690:	f7ff ffac 	bl	800b5ec <sbrk_aligned>
 800b694:	3001      	adds	r0, #1
 800b696:	d040      	beq.n	800b71a <_malloc_r+0xea>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	19db      	adds	r3, r3, r7
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	6833      	ldr	r3, [r6, #0]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	2a00      	cmp	r2, #0
 800b6a4:	d133      	bne.n	800b70e <_malloc_r+0xde>
 800b6a6:	9b00      	ldr	r3, [sp, #0]
 800b6a8:	6033      	str	r3, [r6, #0]
 800b6aa:	e019      	b.n	800b6e0 <_malloc_r+0xb0>
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	dac9      	bge.n	800b644 <_malloc_r+0x14>
 800b6b0:	230c      	movs	r3, #12
 800b6b2:	602b      	str	r3, [r5, #0]
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b6b8:	6821      	ldr	r1, [r4, #0]
 800b6ba:	1bc9      	subs	r1, r1, r7
 800b6bc:	d420      	bmi.n	800b700 <_malloc_r+0xd0>
 800b6be:	290b      	cmp	r1, #11
 800b6c0:	d90a      	bls.n	800b6d8 <_malloc_r+0xa8>
 800b6c2:	19e2      	adds	r2, r4, r7
 800b6c4:	6027      	str	r7, [r4, #0]
 800b6c6:	42a3      	cmp	r3, r4
 800b6c8:	d104      	bne.n	800b6d4 <_malloc_r+0xa4>
 800b6ca:	6032      	str	r2, [r6, #0]
 800b6cc:	6863      	ldr	r3, [r4, #4]
 800b6ce:	6011      	str	r1, [r2, #0]
 800b6d0:	6053      	str	r3, [r2, #4]
 800b6d2:	e005      	b.n	800b6e0 <_malloc_r+0xb0>
 800b6d4:	605a      	str	r2, [r3, #4]
 800b6d6:	e7f9      	b.n	800b6cc <_malloc_r+0x9c>
 800b6d8:	6862      	ldr	r2, [r4, #4]
 800b6da:	42a3      	cmp	r3, r4
 800b6dc:	d10e      	bne.n	800b6fc <_malloc_r+0xcc>
 800b6de:	6032      	str	r2, [r6, #0]
 800b6e0:	0028      	movs	r0, r5
 800b6e2:	f000 f9ab 	bl	800ba3c <__malloc_unlock>
 800b6e6:	0020      	movs	r0, r4
 800b6e8:	2207      	movs	r2, #7
 800b6ea:	300b      	adds	r0, #11
 800b6ec:	1d23      	adds	r3, r4, #4
 800b6ee:	4390      	bics	r0, r2
 800b6f0:	1ac2      	subs	r2, r0, r3
 800b6f2:	4298      	cmp	r0, r3
 800b6f4:	d0df      	beq.n	800b6b6 <_malloc_r+0x86>
 800b6f6:	1a1b      	subs	r3, r3, r0
 800b6f8:	50a3      	str	r3, [r4, r2]
 800b6fa:	e7dc      	b.n	800b6b6 <_malloc_r+0x86>
 800b6fc:	605a      	str	r2, [r3, #4]
 800b6fe:	e7ef      	b.n	800b6e0 <_malloc_r+0xb0>
 800b700:	0023      	movs	r3, r4
 800b702:	6864      	ldr	r4, [r4, #4]
 800b704:	e7a6      	b.n	800b654 <_malloc_r+0x24>
 800b706:	9c00      	ldr	r4, [sp, #0]
 800b708:	6863      	ldr	r3, [r4, #4]
 800b70a:	9300      	str	r3, [sp, #0]
 800b70c:	e7ad      	b.n	800b66a <_malloc_r+0x3a>
 800b70e:	001a      	movs	r2, r3
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	42a3      	cmp	r3, r4
 800b714:	d1fb      	bne.n	800b70e <_malloc_r+0xde>
 800b716:	2300      	movs	r3, #0
 800b718:	e7da      	b.n	800b6d0 <_malloc_r+0xa0>
 800b71a:	230c      	movs	r3, #12
 800b71c:	0028      	movs	r0, r5
 800b71e:	602b      	str	r3, [r5, #0]
 800b720:	f000 f98c 	bl	800ba3c <__malloc_unlock>
 800b724:	e7c6      	b.n	800b6b4 <_malloc_r+0x84>
 800b726:	6007      	str	r7, [r0, #0]
 800b728:	e7da      	b.n	800b6e0 <_malloc_r+0xb0>
 800b72a:	46c0      	nop			@ (mov r8, r8)
 800b72c:	20002018 	.word	0x20002018

0800b730 <_printf_common>:
 800b730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b732:	0016      	movs	r6, r2
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	688a      	ldr	r2, [r1, #8]
 800b738:	690b      	ldr	r3, [r1, #16]
 800b73a:	000c      	movs	r4, r1
 800b73c:	9000      	str	r0, [sp, #0]
 800b73e:	4293      	cmp	r3, r2
 800b740:	da00      	bge.n	800b744 <_printf_common+0x14>
 800b742:	0013      	movs	r3, r2
 800b744:	0022      	movs	r2, r4
 800b746:	6033      	str	r3, [r6, #0]
 800b748:	3243      	adds	r2, #67	@ 0x43
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	2a00      	cmp	r2, #0
 800b74e:	d001      	beq.n	800b754 <_printf_common+0x24>
 800b750:	3301      	adds	r3, #1
 800b752:	6033      	str	r3, [r6, #0]
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	069b      	lsls	r3, r3, #26
 800b758:	d502      	bpl.n	800b760 <_printf_common+0x30>
 800b75a:	6833      	ldr	r3, [r6, #0]
 800b75c:	3302      	adds	r3, #2
 800b75e:	6033      	str	r3, [r6, #0]
 800b760:	6822      	ldr	r2, [r4, #0]
 800b762:	2306      	movs	r3, #6
 800b764:	0015      	movs	r5, r2
 800b766:	401d      	ands	r5, r3
 800b768:	421a      	tst	r2, r3
 800b76a:	d027      	beq.n	800b7bc <_printf_common+0x8c>
 800b76c:	0023      	movs	r3, r4
 800b76e:	3343      	adds	r3, #67	@ 0x43
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	1e5a      	subs	r2, r3, #1
 800b774:	4193      	sbcs	r3, r2
 800b776:	6822      	ldr	r2, [r4, #0]
 800b778:	0692      	lsls	r2, r2, #26
 800b77a:	d430      	bmi.n	800b7de <_printf_common+0xae>
 800b77c:	0022      	movs	r2, r4
 800b77e:	9901      	ldr	r1, [sp, #4]
 800b780:	9800      	ldr	r0, [sp, #0]
 800b782:	9d08      	ldr	r5, [sp, #32]
 800b784:	3243      	adds	r2, #67	@ 0x43
 800b786:	47a8      	blx	r5
 800b788:	3001      	adds	r0, #1
 800b78a:	d025      	beq.n	800b7d8 <_printf_common+0xa8>
 800b78c:	2206      	movs	r2, #6
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	2500      	movs	r5, #0
 800b792:	4013      	ands	r3, r2
 800b794:	2b04      	cmp	r3, #4
 800b796:	d105      	bne.n	800b7a4 <_printf_common+0x74>
 800b798:	6833      	ldr	r3, [r6, #0]
 800b79a:	68e5      	ldr	r5, [r4, #12]
 800b79c:	1aed      	subs	r5, r5, r3
 800b79e:	43eb      	mvns	r3, r5
 800b7a0:	17db      	asrs	r3, r3, #31
 800b7a2:	401d      	ands	r5, r3
 800b7a4:	68a3      	ldr	r3, [r4, #8]
 800b7a6:	6922      	ldr	r2, [r4, #16]
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	dd01      	ble.n	800b7b0 <_printf_common+0x80>
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	18ed      	adds	r5, r5, r3
 800b7b0:	2600      	movs	r6, #0
 800b7b2:	42b5      	cmp	r5, r6
 800b7b4:	d120      	bne.n	800b7f8 <_printf_common+0xc8>
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	e010      	b.n	800b7dc <_printf_common+0xac>
 800b7ba:	3501      	adds	r5, #1
 800b7bc:	68e3      	ldr	r3, [r4, #12]
 800b7be:	6832      	ldr	r2, [r6, #0]
 800b7c0:	1a9b      	subs	r3, r3, r2
 800b7c2:	42ab      	cmp	r3, r5
 800b7c4:	ddd2      	ble.n	800b76c <_printf_common+0x3c>
 800b7c6:	0022      	movs	r2, r4
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	9901      	ldr	r1, [sp, #4]
 800b7cc:	9800      	ldr	r0, [sp, #0]
 800b7ce:	9f08      	ldr	r7, [sp, #32]
 800b7d0:	3219      	adds	r2, #25
 800b7d2:	47b8      	blx	r7
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	d1f0      	bne.n	800b7ba <_printf_common+0x8a>
 800b7d8:	2001      	movs	r0, #1
 800b7da:	4240      	negs	r0, r0
 800b7dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7de:	2030      	movs	r0, #48	@ 0x30
 800b7e0:	18e1      	adds	r1, r4, r3
 800b7e2:	3143      	adds	r1, #67	@ 0x43
 800b7e4:	7008      	strb	r0, [r1, #0]
 800b7e6:	0021      	movs	r1, r4
 800b7e8:	1c5a      	adds	r2, r3, #1
 800b7ea:	3145      	adds	r1, #69	@ 0x45
 800b7ec:	7809      	ldrb	r1, [r1, #0]
 800b7ee:	18a2      	adds	r2, r4, r2
 800b7f0:	3243      	adds	r2, #67	@ 0x43
 800b7f2:	3302      	adds	r3, #2
 800b7f4:	7011      	strb	r1, [r2, #0]
 800b7f6:	e7c1      	b.n	800b77c <_printf_common+0x4c>
 800b7f8:	0022      	movs	r2, r4
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	9901      	ldr	r1, [sp, #4]
 800b7fe:	9800      	ldr	r0, [sp, #0]
 800b800:	9f08      	ldr	r7, [sp, #32]
 800b802:	321a      	adds	r2, #26
 800b804:	47b8      	blx	r7
 800b806:	3001      	adds	r0, #1
 800b808:	d0e6      	beq.n	800b7d8 <_printf_common+0xa8>
 800b80a:	3601      	adds	r6, #1
 800b80c:	e7d1      	b.n	800b7b2 <_printf_common+0x82>
	...

0800b810 <_printf_i>:
 800b810:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b812:	b08b      	sub	sp, #44	@ 0x2c
 800b814:	9206      	str	r2, [sp, #24]
 800b816:	000a      	movs	r2, r1
 800b818:	3243      	adds	r2, #67	@ 0x43
 800b81a:	9307      	str	r3, [sp, #28]
 800b81c:	9005      	str	r0, [sp, #20]
 800b81e:	9203      	str	r2, [sp, #12]
 800b820:	7e0a      	ldrb	r2, [r1, #24]
 800b822:	000c      	movs	r4, r1
 800b824:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b826:	2a78      	cmp	r2, #120	@ 0x78
 800b828:	d809      	bhi.n	800b83e <_printf_i+0x2e>
 800b82a:	2a62      	cmp	r2, #98	@ 0x62
 800b82c:	d80b      	bhi.n	800b846 <_printf_i+0x36>
 800b82e:	2a00      	cmp	r2, #0
 800b830:	d100      	bne.n	800b834 <_printf_i+0x24>
 800b832:	e0bc      	b.n	800b9ae <_printf_i+0x19e>
 800b834:	497b      	ldr	r1, [pc, #492]	@ (800ba24 <_printf_i+0x214>)
 800b836:	9104      	str	r1, [sp, #16]
 800b838:	2a58      	cmp	r2, #88	@ 0x58
 800b83a:	d100      	bne.n	800b83e <_printf_i+0x2e>
 800b83c:	e090      	b.n	800b960 <_printf_i+0x150>
 800b83e:	0025      	movs	r5, r4
 800b840:	3542      	adds	r5, #66	@ 0x42
 800b842:	702a      	strb	r2, [r5, #0]
 800b844:	e022      	b.n	800b88c <_printf_i+0x7c>
 800b846:	0010      	movs	r0, r2
 800b848:	3863      	subs	r0, #99	@ 0x63
 800b84a:	2815      	cmp	r0, #21
 800b84c:	d8f7      	bhi.n	800b83e <_printf_i+0x2e>
 800b84e:	f7f4 fc63 	bl	8000118 <__gnu_thumb1_case_shi>
 800b852:	0016      	.short	0x0016
 800b854:	fff6001f 	.word	0xfff6001f
 800b858:	fff6fff6 	.word	0xfff6fff6
 800b85c:	001ffff6 	.word	0x001ffff6
 800b860:	fff6fff6 	.word	0xfff6fff6
 800b864:	fff6fff6 	.word	0xfff6fff6
 800b868:	003600a1 	.word	0x003600a1
 800b86c:	fff60080 	.word	0xfff60080
 800b870:	00b2fff6 	.word	0x00b2fff6
 800b874:	0036fff6 	.word	0x0036fff6
 800b878:	fff6fff6 	.word	0xfff6fff6
 800b87c:	0084      	.short	0x0084
 800b87e:	0025      	movs	r5, r4
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	3542      	adds	r5, #66	@ 0x42
 800b884:	1d11      	adds	r1, r2, #4
 800b886:	6019      	str	r1, [r3, #0]
 800b888:	6813      	ldr	r3, [r2, #0]
 800b88a:	702b      	strb	r3, [r5, #0]
 800b88c:	2301      	movs	r3, #1
 800b88e:	e0a0      	b.n	800b9d2 <_printf_i+0x1c2>
 800b890:	6818      	ldr	r0, [r3, #0]
 800b892:	6809      	ldr	r1, [r1, #0]
 800b894:	1d02      	adds	r2, r0, #4
 800b896:	060d      	lsls	r5, r1, #24
 800b898:	d50b      	bpl.n	800b8b2 <_printf_i+0xa2>
 800b89a:	6806      	ldr	r6, [r0, #0]
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	2e00      	cmp	r6, #0
 800b8a0:	da03      	bge.n	800b8aa <_printf_i+0x9a>
 800b8a2:	232d      	movs	r3, #45	@ 0x2d
 800b8a4:	9a03      	ldr	r2, [sp, #12]
 800b8a6:	4276      	negs	r6, r6
 800b8a8:	7013      	strb	r3, [r2, #0]
 800b8aa:	4b5e      	ldr	r3, [pc, #376]	@ (800ba24 <_printf_i+0x214>)
 800b8ac:	270a      	movs	r7, #10
 800b8ae:	9304      	str	r3, [sp, #16]
 800b8b0:	e018      	b.n	800b8e4 <_printf_i+0xd4>
 800b8b2:	6806      	ldr	r6, [r0, #0]
 800b8b4:	601a      	str	r2, [r3, #0]
 800b8b6:	0649      	lsls	r1, r1, #25
 800b8b8:	d5f1      	bpl.n	800b89e <_printf_i+0x8e>
 800b8ba:	b236      	sxth	r6, r6
 800b8bc:	e7ef      	b.n	800b89e <_printf_i+0x8e>
 800b8be:	6808      	ldr	r0, [r1, #0]
 800b8c0:	6819      	ldr	r1, [r3, #0]
 800b8c2:	c940      	ldmia	r1!, {r6}
 800b8c4:	0605      	lsls	r5, r0, #24
 800b8c6:	d402      	bmi.n	800b8ce <_printf_i+0xbe>
 800b8c8:	0640      	lsls	r0, r0, #25
 800b8ca:	d500      	bpl.n	800b8ce <_printf_i+0xbe>
 800b8cc:	b2b6      	uxth	r6, r6
 800b8ce:	6019      	str	r1, [r3, #0]
 800b8d0:	4b54      	ldr	r3, [pc, #336]	@ (800ba24 <_printf_i+0x214>)
 800b8d2:	270a      	movs	r7, #10
 800b8d4:	9304      	str	r3, [sp, #16]
 800b8d6:	2a6f      	cmp	r2, #111	@ 0x6f
 800b8d8:	d100      	bne.n	800b8dc <_printf_i+0xcc>
 800b8da:	3f02      	subs	r7, #2
 800b8dc:	0023      	movs	r3, r4
 800b8de:	2200      	movs	r2, #0
 800b8e0:	3343      	adds	r3, #67	@ 0x43
 800b8e2:	701a      	strb	r2, [r3, #0]
 800b8e4:	6863      	ldr	r3, [r4, #4]
 800b8e6:	60a3      	str	r3, [r4, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db03      	blt.n	800b8f4 <_printf_i+0xe4>
 800b8ec:	2104      	movs	r1, #4
 800b8ee:	6822      	ldr	r2, [r4, #0]
 800b8f0:	438a      	bics	r2, r1
 800b8f2:	6022      	str	r2, [r4, #0]
 800b8f4:	2e00      	cmp	r6, #0
 800b8f6:	d102      	bne.n	800b8fe <_printf_i+0xee>
 800b8f8:	9d03      	ldr	r5, [sp, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00c      	beq.n	800b918 <_printf_i+0x108>
 800b8fe:	9d03      	ldr	r5, [sp, #12]
 800b900:	0030      	movs	r0, r6
 800b902:	0039      	movs	r1, r7
 800b904:	f7f4 fc98 	bl	8000238 <__aeabi_uidivmod>
 800b908:	9b04      	ldr	r3, [sp, #16]
 800b90a:	3d01      	subs	r5, #1
 800b90c:	5c5b      	ldrb	r3, [r3, r1]
 800b90e:	702b      	strb	r3, [r5, #0]
 800b910:	0033      	movs	r3, r6
 800b912:	0006      	movs	r6, r0
 800b914:	429f      	cmp	r7, r3
 800b916:	d9f3      	bls.n	800b900 <_printf_i+0xf0>
 800b918:	2f08      	cmp	r7, #8
 800b91a:	d109      	bne.n	800b930 <_printf_i+0x120>
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	07db      	lsls	r3, r3, #31
 800b920:	d506      	bpl.n	800b930 <_printf_i+0x120>
 800b922:	6862      	ldr	r2, [r4, #4]
 800b924:	6923      	ldr	r3, [r4, #16]
 800b926:	429a      	cmp	r2, r3
 800b928:	dc02      	bgt.n	800b930 <_printf_i+0x120>
 800b92a:	2330      	movs	r3, #48	@ 0x30
 800b92c:	3d01      	subs	r5, #1
 800b92e:	702b      	strb	r3, [r5, #0]
 800b930:	9b03      	ldr	r3, [sp, #12]
 800b932:	1b5b      	subs	r3, r3, r5
 800b934:	6123      	str	r3, [r4, #16]
 800b936:	9b07      	ldr	r3, [sp, #28]
 800b938:	0021      	movs	r1, r4
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	9805      	ldr	r0, [sp, #20]
 800b93e:	9b06      	ldr	r3, [sp, #24]
 800b940:	aa09      	add	r2, sp, #36	@ 0x24
 800b942:	f7ff fef5 	bl	800b730 <_printf_common>
 800b946:	3001      	adds	r0, #1
 800b948:	d148      	bne.n	800b9dc <_printf_i+0x1cc>
 800b94a:	2001      	movs	r0, #1
 800b94c:	4240      	negs	r0, r0
 800b94e:	b00b      	add	sp, #44	@ 0x2c
 800b950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b952:	2220      	movs	r2, #32
 800b954:	6809      	ldr	r1, [r1, #0]
 800b956:	430a      	orrs	r2, r1
 800b958:	6022      	str	r2, [r4, #0]
 800b95a:	2278      	movs	r2, #120	@ 0x78
 800b95c:	4932      	ldr	r1, [pc, #200]	@ (800ba28 <_printf_i+0x218>)
 800b95e:	9104      	str	r1, [sp, #16]
 800b960:	0021      	movs	r1, r4
 800b962:	3145      	adds	r1, #69	@ 0x45
 800b964:	700a      	strb	r2, [r1, #0]
 800b966:	6819      	ldr	r1, [r3, #0]
 800b968:	6822      	ldr	r2, [r4, #0]
 800b96a:	c940      	ldmia	r1!, {r6}
 800b96c:	0610      	lsls	r0, r2, #24
 800b96e:	d402      	bmi.n	800b976 <_printf_i+0x166>
 800b970:	0650      	lsls	r0, r2, #25
 800b972:	d500      	bpl.n	800b976 <_printf_i+0x166>
 800b974:	b2b6      	uxth	r6, r6
 800b976:	6019      	str	r1, [r3, #0]
 800b978:	07d3      	lsls	r3, r2, #31
 800b97a:	d502      	bpl.n	800b982 <_printf_i+0x172>
 800b97c:	2320      	movs	r3, #32
 800b97e:	4313      	orrs	r3, r2
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	2e00      	cmp	r6, #0
 800b984:	d001      	beq.n	800b98a <_printf_i+0x17a>
 800b986:	2710      	movs	r7, #16
 800b988:	e7a8      	b.n	800b8dc <_printf_i+0xcc>
 800b98a:	2220      	movs	r2, #32
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	4393      	bics	r3, r2
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	e7f8      	b.n	800b986 <_printf_i+0x176>
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	680d      	ldr	r5, [r1, #0]
 800b998:	1d10      	adds	r0, r2, #4
 800b99a:	6949      	ldr	r1, [r1, #20]
 800b99c:	6018      	str	r0, [r3, #0]
 800b99e:	6813      	ldr	r3, [r2, #0]
 800b9a0:	062e      	lsls	r6, r5, #24
 800b9a2:	d501      	bpl.n	800b9a8 <_printf_i+0x198>
 800b9a4:	6019      	str	r1, [r3, #0]
 800b9a6:	e002      	b.n	800b9ae <_printf_i+0x19e>
 800b9a8:	066d      	lsls	r5, r5, #25
 800b9aa:	d5fb      	bpl.n	800b9a4 <_printf_i+0x194>
 800b9ac:	8019      	strh	r1, [r3, #0]
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	9d03      	ldr	r5, [sp, #12]
 800b9b2:	6123      	str	r3, [r4, #16]
 800b9b4:	e7bf      	b.n	800b936 <_printf_i+0x126>
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	1d11      	adds	r1, r2, #4
 800b9ba:	6019      	str	r1, [r3, #0]
 800b9bc:	6815      	ldr	r5, [r2, #0]
 800b9be:	2100      	movs	r1, #0
 800b9c0:	0028      	movs	r0, r5
 800b9c2:	6862      	ldr	r2, [r4, #4]
 800b9c4:	f000 f896 	bl	800baf4 <memchr>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d001      	beq.n	800b9d0 <_printf_i+0x1c0>
 800b9cc:	1b40      	subs	r0, r0, r5
 800b9ce:	6060      	str	r0, [r4, #4]
 800b9d0:	6863      	ldr	r3, [r4, #4]
 800b9d2:	6123      	str	r3, [r4, #16]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9a03      	ldr	r2, [sp, #12]
 800b9d8:	7013      	strb	r3, [r2, #0]
 800b9da:	e7ac      	b.n	800b936 <_printf_i+0x126>
 800b9dc:	002a      	movs	r2, r5
 800b9de:	6923      	ldr	r3, [r4, #16]
 800b9e0:	9906      	ldr	r1, [sp, #24]
 800b9e2:	9805      	ldr	r0, [sp, #20]
 800b9e4:	9d07      	ldr	r5, [sp, #28]
 800b9e6:	47a8      	blx	r5
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	d0ae      	beq.n	800b94a <_printf_i+0x13a>
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	079b      	lsls	r3, r3, #30
 800b9f0:	d415      	bmi.n	800ba1e <_printf_i+0x20e>
 800b9f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9f4:	68e0      	ldr	r0, [r4, #12]
 800b9f6:	4298      	cmp	r0, r3
 800b9f8:	daa9      	bge.n	800b94e <_printf_i+0x13e>
 800b9fa:	0018      	movs	r0, r3
 800b9fc:	e7a7      	b.n	800b94e <_printf_i+0x13e>
 800b9fe:	0022      	movs	r2, r4
 800ba00:	2301      	movs	r3, #1
 800ba02:	9906      	ldr	r1, [sp, #24]
 800ba04:	9805      	ldr	r0, [sp, #20]
 800ba06:	9e07      	ldr	r6, [sp, #28]
 800ba08:	3219      	adds	r2, #25
 800ba0a:	47b0      	blx	r6
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	d09c      	beq.n	800b94a <_printf_i+0x13a>
 800ba10:	3501      	adds	r5, #1
 800ba12:	68e3      	ldr	r3, [r4, #12]
 800ba14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba16:	1a9b      	subs	r3, r3, r2
 800ba18:	42ab      	cmp	r3, r5
 800ba1a:	dcf0      	bgt.n	800b9fe <_printf_i+0x1ee>
 800ba1c:	e7e9      	b.n	800b9f2 <_printf_i+0x1e2>
 800ba1e:	2500      	movs	r5, #0
 800ba20:	e7f7      	b.n	800ba12 <_printf_i+0x202>
 800ba22:	46c0      	nop			@ (mov r8, r8)
 800ba24:	0800bf15 	.word	0x0800bf15
 800ba28:	0800bf26 	.word	0x0800bf26

0800ba2c <__malloc_lock>:
 800ba2c:	b510      	push	{r4, lr}
 800ba2e:	4802      	ldr	r0, [pc, #8]	@ (800ba38 <__malloc_lock+0xc>)
 800ba30:	f7ff fc28 	bl	800b284 <__retarget_lock_acquire_recursive>
 800ba34:	bd10      	pop	{r4, pc}
 800ba36:	46c0      	nop			@ (mov r8, r8)
 800ba38:	20002010 	.word	0x20002010

0800ba3c <__malloc_unlock>:
 800ba3c:	b510      	push	{r4, lr}
 800ba3e:	4802      	ldr	r0, [pc, #8]	@ (800ba48 <__malloc_unlock+0xc>)
 800ba40:	f7ff fc21 	bl	800b286 <__retarget_lock_release_recursive>
 800ba44:	bd10      	pop	{r4, pc}
 800ba46:	46c0      	nop			@ (mov r8, r8)
 800ba48:	20002010 	.word	0x20002010

0800ba4c <_realloc_r>:
 800ba4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba4e:	0006      	movs	r6, r0
 800ba50:	000c      	movs	r4, r1
 800ba52:	0015      	movs	r5, r2
 800ba54:	2900      	cmp	r1, #0
 800ba56:	d105      	bne.n	800ba64 <_realloc_r+0x18>
 800ba58:	0011      	movs	r1, r2
 800ba5a:	f7ff fde9 	bl	800b630 <_malloc_r>
 800ba5e:	0004      	movs	r4, r0
 800ba60:	0020      	movs	r0, r4
 800ba62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ba64:	2a00      	cmp	r2, #0
 800ba66:	d103      	bne.n	800ba70 <_realloc_r+0x24>
 800ba68:	f7ff fc18 	bl	800b29c <_free_r>
 800ba6c:	2400      	movs	r4, #0
 800ba6e:	e7f7      	b.n	800ba60 <_realloc_r+0x14>
 800ba70:	f000 f84b 	bl	800bb0a <_malloc_usable_size_r>
 800ba74:	0007      	movs	r7, r0
 800ba76:	4285      	cmp	r5, r0
 800ba78:	d802      	bhi.n	800ba80 <_realloc_r+0x34>
 800ba7a:	0843      	lsrs	r3, r0, #1
 800ba7c:	42ab      	cmp	r3, r5
 800ba7e:	d3ef      	bcc.n	800ba60 <_realloc_r+0x14>
 800ba80:	0029      	movs	r1, r5
 800ba82:	0030      	movs	r0, r6
 800ba84:	f7ff fdd4 	bl	800b630 <_malloc_r>
 800ba88:	9001      	str	r0, [sp, #4]
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d0ee      	beq.n	800ba6c <_realloc_r+0x20>
 800ba8e:	002a      	movs	r2, r5
 800ba90:	42bd      	cmp	r5, r7
 800ba92:	d900      	bls.n	800ba96 <_realloc_r+0x4a>
 800ba94:	003a      	movs	r2, r7
 800ba96:	0021      	movs	r1, r4
 800ba98:	9801      	ldr	r0, [sp, #4]
 800ba9a:	f7ff fbf5 	bl	800b288 <memcpy>
 800ba9e:	0021      	movs	r1, r4
 800baa0:	0030      	movs	r0, r6
 800baa2:	f7ff fbfb 	bl	800b29c <_free_r>
 800baa6:	9c01      	ldr	r4, [sp, #4]
 800baa8:	e7da      	b.n	800ba60 <_realloc_r+0x14>

0800baaa <memmove>:
 800baaa:	b510      	push	{r4, lr}
 800baac:	4288      	cmp	r0, r1
 800baae:	d806      	bhi.n	800babe <memmove+0x14>
 800bab0:	2300      	movs	r3, #0
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d008      	beq.n	800bac8 <memmove+0x1e>
 800bab6:	5ccc      	ldrb	r4, [r1, r3]
 800bab8:	54c4      	strb	r4, [r0, r3]
 800baba:	3301      	adds	r3, #1
 800babc:	e7f9      	b.n	800bab2 <memmove+0x8>
 800babe:	188b      	adds	r3, r1, r2
 800bac0:	4298      	cmp	r0, r3
 800bac2:	d2f5      	bcs.n	800bab0 <memmove+0x6>
 800bac4:	3a01      	subs	r2, #1
 800bac6:	d200      	bcs.n	800baca <memmove+0x20>
 800bac8:	bd10      	pop	{r4, pc}
 800baca:	5c8b      	ldrb	r3, [r1, r2]
 800bacc:	5483      	strb	r3, [r0, r2]
 800bace:	e7f9      	b.n	800bac4 <memmove+0x1a>

0800bad0 <_sbrk_r>:
 800bad0:	2300      	movs	r3, #0
 800bad2:	b570      	push	{r4, r5, r6, lr}
 800bad4:	4d06      	ldr	r5, [pc, #24]	@ (800baf0 <_sbrk_r+0x20>)
 800bad6:	0004      	movs	r4, r0
 800bad8:	0008      	movs	r0, r1
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	f7f5 fa48 	bl	8000f70 <_sbrk>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d103      	bne.n	800baec <_sbrk_r+0x1c>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d000      	beq.n	800baec <_sbrk_r+0x1c>
 800baea:	6023      	str	r3, [r4, #0]
 800baec:	bd70      	pop	{r4, r5, r6, pc}
 800baee:	46c0      	nop			@ (mov r8, r8)
 800baf0:	2000200c 	.word	0x2000200c

0800baf4 <memchr>:
 800baf4:	b2c9      	uxtb	r1, r1
 800baf6:	1882      	adds	r2, r0, r2
 800baf8:	4290      	cmp	r0, r2
 800bafa:	d101      	bne.n	800bb00 <memchr+0xc>
 800bafc:	2000      	movs	r0, #0
 800bafe:	4770      	bx	lr
 800bb00:	7803      	ldrb	r3, [r0, #0]
 800bb02:	428b      	cmp	r3, r1
 800bb04:	d0fb      	beq.n	800bafe <memchr+0xa>
 800bb06:	3001      	adds	r0, #1
 800bb08:	e7f6      	b.n	800baf8 <memchr+0x4>

0800bb0a <_malloc_usable_size_r>:
 800bb0a:	1f0b      	subs	r3, r1, #4
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	1f18      	subs	r0, r3, #4
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	da01      	bge.n	800bb18 <_malloc_usable_size_r+0xe>
 800bb14:	580b      	ldr	r3, [r1, r0]
 800bb16:	18c0      	adds	r0, r0, r3
 800bb18:	4770      	bx	lr
	...

0800bb1c <_init>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	46c0      	nop			@ (mov r8, r8)
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr

0800bb28 <_fini>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	46c0      	nop			@ (mov r8, r8)
 800bb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2e:	bc08      	pop	{r3}
 800bb30:	469e      	mov	lr, r3
 800bb32:	4770      	bx	lr
