
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d514  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  0800d5d4  0800d5d4  0000e5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d918  0800d918  0000f138  2**0
                  CONTENTS
  4 .ARM          00000000  0800d918  0800d918  0000f138  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d918  0800d918  0000f138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d918  0800d918  0000e918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d91c  0800d91c  0000e91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  0800d920  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000254c  20000138  0800da58  0000f138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002684  0800da58  0000f684  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000280e0  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d63  00000000  00000000  00037240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002218  00000000  00000000  0003cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a84  00000000  00000000  0003f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e4d7  00000000  00000000  00040c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002de3e  00000000  00000000  0005f11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa92c  00000000  00000000  0008cf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137885  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fc8  00000000  00000000  001378c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0013f890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000138 	.word	0x20000138
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d5bc 	.word	0x0800d5bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000013c 	.word	0x2000013c
 8000104:	0800d5bc 	.word	0x0800d5bc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	230c      	movs	r3, #12
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f00c fbf2 	bl	800cc00 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800041c:	4b2d      	ldr	r3, [pc, #180]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800041e:	4a2e      	ldr	r2, [pc, #184]	@ (80004d8 <MX_ADC1_Init+0xd0>)
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000422:	4b2c      	ldr	r3, [pc, #176]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	05d2      	lsls	r2, r2, #23
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042a:	4b2a      	ldr	r3, [pc, #168]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000436:	4b27      	ldr	r3, [pc, #156]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043c:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800043e:	2204      	movs	r2, #4
 8000440:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000444:	2200      	movs	r2, #0
 8000446:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000448:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800044a:	2200      	movs	r2, #0
 800044c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800044e:	4b21      	ldr	r3, [pc, #132]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000454:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000456:	2201      	movs	r2, #1
 8000458:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b1e      	ldr	r3, [pc, #120]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800045c:	2220      	movs	r2, #32
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000462:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000464:	2200      	movs	r2, #0
 8000466:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000468:	4b1a      	ldr	r3, [pc, #104]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800046a:	2200      	movs	r2, #0
 800046c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800046e:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000470:	222c      	movs	r2, #44	@ 0x2c
 8000472:	2100      	movs	r1, #0
 8000474:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000476:	4b17      	ldr	r3, [pc, #92]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000482:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000484:	2200      	movs	r2, #0
 8000486:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800048a:	223c      	movs	r2, #60	@ 0x3c
 800048c:	2100      	movs	r1, #0
 800048e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000490:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000492:	2200      	movs	r2, #0
 8000494:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fa89 	bl	80019b0 <HAL_ADC_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004a2:	f000 fd51 	bl	8000f48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2201      	movs	r2, #1
 80004aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b8:	1d3a      	adds	r2, r7, #4
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fc1e 	bl	8001d00 <HAL_ADC_ConfigChannel>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004c8:	f000 fd3e 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b004      	add	sp, #16
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000154 	.word	0x20000154
 80004d8:	40012400 	.word	0x40012400

080004dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b08b      	sub	sp, #44	@ 0x2c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	2414      	movs	r4, #20
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2314      	movs	r3, #20
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f00c fb86 	bl	800cc00 <memset>
  if(adcHandle->Instance==ADC1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a18      	ldr	r2, [pc, #96]	@ (800055c <HAL_ADC_MspInit+0x80>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d129      	bne.n	8000552 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004fe:	4b18      	ldr	r3, [pc, #96]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000504:	2180      	movs	r1, #128	@ 0x80
 8000506:	0349      	lsls	r1, r1, #13
 8000508:	430a      	orrs	r2, r1
 800050a:	641a      	str	r2, [r3, #64]	@ 0x40
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 800050e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	035b      	lsls	r3, r3, #13
 8000514:	4013      	ands	r3, r2
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 800051c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2203      	movs	r2, #3
 800053c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	193a      	adds	r2, r7, r4
 8000546:	23a0      	movs	r3, #160	@ 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fed3 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b00b      	add	sp, #44	@ 0x2c
 8000558:	bd90      	pop	{r4, r7, pc}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	40012400 	.word	0x40012400
 8000560:	40021000 	.word	0x40021000

08000564 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of driveLED */
  driveLEDHandle = osThreadNew(StartDriveLED, NULL, &driveLED_attributes);
 8000568:	4a05      	ldr	r2, [pc, #20]	@ (8000580 <MX_FREERTOS_Init+0x1c>)
 800056a:	4b06      	ldr	r3, [pc, #24]	@ (8000584 <MX_FREERTOS_Init+0x20>)
 800056c:	2100      	movs	r1, #0
 800056e:	0018      	movs	r0, r3
 8000570:	f009 fc12 	bl	8009d98 <osThreadNew>
 8000574:	0002      	movs	r2, r0
 8000576:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <MX_FREERTOS_Init+0x24>)
 8000578:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	0800d73c 	.word	0x0800d73c
 8000584:	0800058d 	.word	0x0800058d
 8000588:	20000898 	.word	0x20000898

0800058c <StartDriveLED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDriveLED */
void StartDriveLED(void *argument)
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDriveLED */
  /* Infinite loop */
  for(;;)
  {
	  for (uint8_t i = 0; i < 16; i++) {
 8000594:	230f      	movs	r3, #15
 8000596:	18fb      	adds	r3, r7, r3
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	e069      	b.n	8000672 <StartDriveLED+0xe6>
		  // set columns
		  for (uint8_t j = 0; j < 16; j++) {
 800059e:	230e      	movs	r3, #14
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e03a      	b.n	800061e <StartDriveLED+0x92>
			  if (image_leds[current_frame][i] & (0x1 << (15-j))) {
 80005a8:	4b35      	ldr	r3, [pc, #212]	@ (8000680 <StartDriveLED+0xf4>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	0019      	movs	r1, r3
 80005ae:	230f      	movs	r3, #15
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	4b33      	ldr	r3, [pc, #204]	@ (8000684 <StartDriveLED+0xf8>)
 80005b6:	0109      	lsls	r1, r1, #4
 80005b8:	188a      	adds	r2, r1, r2
 80005ba:	0052      	lsls	r2, r2, #1
 80005bc:	5ad3      	ldrh	r3, [r2, r3]
 80005be:	0019      	movs	r1, r3
 80005c0:	200e      	movs	r0, #14
 80005c2:	183b      	adds	r3, r7, r0
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	220f      	movs	r2, #15
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	4119      	asrs	r1, r3
 80005cc:	000b      	movs	r3, r1
 80005ce:	2201      	movs	r2, #1
 80005d0:	4013      	ands	r3, r2
 80005d2:	d00f      	beq.n	80005f4 <StartDriveLED+0x68>
				  HAL_GPIO_WritePin(led_column_ports[j], led_column_pins[j], GPIO_PIN_SET);
 80005d4:	0001      	movs	r1, r0
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	781a      	ldrb	r2, [r3, #0]
 80005da:	4b2b      	ldr	r3, [pc, #172]	@ (8000688 <StartDriveLED+0xfc>)
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	58d0      	ldr	r0, [r2, r3]
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	781a      	ldrb	r2, [r3, #0]
 80005e4:	4b29      	ldr	r3, [pc, #164]	@ (800068c <StartDriveLED+0x100>)
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	5ad3      	ldrh	r3, [r2, r3]
 80005ea:	2201      	movs	r2, #1
 80005ec:	0019      	movs	r1, r3
 80005ee:	f001 ffe7 	bl	80025c0 <HAL_GPIO_WritePin>
 80005f2:	e00e      	b.n	8000612 <StartDriveLED+0x86>
			  } else {
				  HAL_GPIO_WritePin(led_column_ports[j], led_column_pins[j], GPIO_PIN_RESET);
 80005f4:	210e      	movs	r1, #14
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	781a      	ldrb	r2, [r3, #0]
 80005fa:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <StartDriveLED+0xfc>)
 80005fc:	0092      	lsls	r2, r2, #2
 80005fe:	58d0      	ldr	r0, [r2, r3]
 8000600:	187b      	adds	r3, r7, r1
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <StartDriveLED+0x100>)
 8000606:	0052      	lsls	r2, r2, #1
 8000608:	5ad3      	ldrh	r3, [r2, r3]
 800060a:	2200      	movs	r2, #0
 800060c:	0019      	movs	r1, r3
 800060e:	f001 ffd7 	bl	80025c0 <HAL_GPIO_WritePin>
		  for (uint8_t j = 0; j < 16; j++) {
 8000612:	210e      	movs	r1, #14
 8000614:	187b      	adds	r3, r7, r1
 8000616:	781a      	ldrb	r2, [r3, #0]
 8000618:	187b      	adds	r3, r7, r1
 800061a:	3201      	adds	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
 800061e:	230e      	movs	r3, #14
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d9bf      	bls.n	80005a8 <StartDriveLED+0x1c>
			  }
		  }
		  // turn on row (active low)
		  HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_RESET);
 8000628:	240f      	movs	r4, #15
 800062a:	193b      	adds	r3, r7, r4
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <StartDriveLED+0x104>)
 8000630:	0092      	lsls	r2, r2, #2
 8000632:	58d0      	ldr	r0, [r2, r3]
 8000634:	193b      	adds	r3, r7, r4
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <StartDriveLED+0x108>)
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	5ad3      	ldrh	r3, [r2, r3]
 800063e:	2200      	movs	r2, #0
 8000640:	0019      	movs	r1, r3
 8000642:	f001 ffbd 	bl	80025c0 <HAL_GPIO_WritePin>
		  osDelay(1);
 8000646:	2001      	movs	r0, #1
 8000648:	f009 fc3c 	bl	8009ec4 <osDelay>

		  // turn off row
		  HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_SET);
 800064c:	193b      	adds	r3, r7, r4
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <StartDriveLED+0x104>)
 8000652:	0092      	lsls	r2, r2, #2
 8000654:	58d0      	ldr	r0, [r2, r3]
 8000656:	193b      	adds	r3, r7, r4
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <StartDriveLED+0x108>)
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	5ad3      	ldrh	r3, [r2, r3]
 8000660:	2201      	movs	r2, #1
 8000662:	0019      	movs	r1, r3
 8000664:	f001 ffac 	bl	80025c0 <HAL_GPIO_WritePin>
	  for (uint8_t i = 0; i < 16; i++) {
 8000668:	193b      	adds	r3, r7, r4
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	193b      	adds	r3, r7, r4
 800066e:	3201      	adds	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	230f      	movs	r3, #15
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d990      	bls.n	800059e <StartDriveLED+0x12>
 800067c:	e78a      	b.n	8000594 <StartDriveLED+0x8>
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	200008f0 	.word	0x200008f0
 8000684:	200001b8 	.word	0x200001b8
 8000688:	20000000 	.word	0x20000000
 800068c:	20000040 	.word	0x20000040
 8000690:	20000060 	.word	0x20000060
 8000694:	200000a0 	.word	0x200000a0

08000698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b08b      	sub	sp, #44	@ 0x2c
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	2414      	movs	r4, #20
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	0018      	movs	r0, r3
 80006a4:	2314      	movs	r3, #20
 80006a6:	001a      	movs	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	f00c faa9 	bl	800cc00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b5f      	ldr	r3, [pc, #380]	@ (800082c <MX_GPIO_Init+0x194>)
 80006b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b2:	4b5e      	ldr	r3, [pc, #376]	@ (800082c <MX_GPIO_Init+0x194>)
 80006b4:	2104      	movs	r1, #4
 80006b6:	430a      	orrs	r2, r1
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ba:	4b5c      	ldr	r3, [pc, #368]	@ (800082c <MX_GPIO_Init+0x194>)
 80006bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006be:	2204      	movs	r2, #4
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b59      	ldr	r3, [pc, #356]	@ (800082c <MX_GPIO_Init+0x194>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	4b58      	ldr	r3, [pc, #352]	@ (800082c <MX_GPIO_Init+0x194>)
 80006cc:	2120      	movs	r1, #32
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	4b56      	ldr	r3, [pc, #344]	@ (800082c <MX_GPIO_Init+0x194>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	2220      	movs	r2, #32
 80006d8:	4013      	ands	r3, r2
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b53      	ldr	r3, [pc, #332]	@ (800082c <MX_GPIO_Init+0x194>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e2:	4b52      	ldr	r3, [pc, #328]	@ (800082c <MX_GPIO_Init+0x194>)
 80006e4:	2101      	movs	r1, #1
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ea:	4b50      	ldr	r3, [pc, #320]	@ (800082c <MX_GPIO_Init+0x194>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ee:	2201      	movs	r2, #1
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b4d      	ldr	r3, [pc, #308]	@ (800082c <MX_GPIO_Init+0x194>)
 80006f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006fa:	4b4c      	ldr	r3, [pc, #304]	@ (800082c <MX_GPIO_Init+0x194>)
 80006fc:	2102      	movs	r1, #2
 80006fe:	430a      	orrs	r2, r1
 8000700:	635a      	str	r2, [r3, #52]	@ 0x34
 8000702:	4b4a      	ldr	r3, [pc, #296]	@ (800082c <MX_GPIO_Init+0x194>)
 8000704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000706:	2202      	movs	r2, #2
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	4b47      	ldr	r3, [pc, #284]	@ (800082c <MX_GPIO_Init+0x194>)
 8000710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000712:	4b46      	ldr	r3, [pc, #280]	@ (800082c <MX_GPIO_Init+0x194>)
 8000714:	2108      	movs	r1, #8
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
 800071a:	4b44      	ldr	r3, [pc, #272]	@ (800082c <MX_GPIO_Init+0x194>)
 800071c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071e:	2208      	movs	r2, #8
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_NS_Pin|LED_Row13_Pin|LED_Row15_Pin|LED_Row4_Pin
 8000726:	238f      	movs	r3, #143	@ 0x8f
 8000728:	019b      	lsls	r3, r3, #6
 800072a:	4841      	ldr	r0, [pc, #260]	@ (8000830 <MX_GPIO_Init+0x198>)
 800072c:	2200      	movs	r2, #0
 800072e:	0019      	movs	r1, r3
 8000730:	f001 ff46 	bl	80025c0 <HAL_GPIO_WritePin>
                          |LED_Row2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Column8_Pin|LED_Column10_Pin|LED_Column12_Pin|LED_Column9_Pin
 8000734:	493f      	ldr	r1, [pc, #252]	@ (8000834 <MX_GPIO_Init+0x19c>)
 8000736:	23a0      	movs	r3, #160	@ 0xa0
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2200      	movs	r2, #0
 800073c:	0018      	movs	r0, r3
 800073e:	f001 ff3f 	bl	80025c0 <HAL_GPIO_WritePin>
                          |LED_Row9_Pin|LED_Row11_Pin|LED_Row10_Pin|LED_Row8_Pin
                          |LED_Row6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Column11_Pin|LED_Column13_Pin|LED_Column14_Pin|LED_Column15_Pin
 8000742:	493d      	ldr	r1, [pc, #244]	@ (8000838 <MX_GPIO_Init+0x1a0>)
 8000744:	4b3d      	ldr	r3, [pc, #244]	@ (800083c <MX_GPIO_Init+0x1a4>)
 8000746:	2200      	movs	r2, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f001 ff39 	bl	80025c0 <HAL_GPIO_WritePin>
                          |LED_Row1_Pin|LED_Row3_Pin|LED_Row5_Pin|LED_Row7_Pin
                          |LED_Column5_Pin|LED_Column7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Row14_Pin|LED_Row12_Pin|LED_Row0_Pin|LED_Column0_Pin
 800074e:	493c      	ldr	r1, [pc, #240]	@ (8000840 <MX_GPIO_Init+0x1a8>)
 8000750:	4b3c      	ldr	r3, [pc, #240]	@ (8000844 <MX_GPIO_Init+0x1ac>)
 8000752:	2200      	movs	r2, #0
 8000754:	0018      	movs	r0, r3
 8000756:	f001 ff33 	bl	80025c0 <HAL_GPIO_WritePin>
                          |LED_Column1_Pin|LED_Column2_Pin|LED_Column4_Pin|LED_Column6_Pin
                          |LED_Column3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MOTOR_NS_Pin LED_Row13_Pin LED_Row15_Pin LED_Row4_Pin
                           LED_Row2_Pin */
  GPIO_InitStruct.Pin = MOTOR_NS_Pin|LED_Row13_Pin|LED_Row15_Pin|LED_Row4_Pin
 800075a:	193b      	adds	r3, r7, r4
 800075c:	228f      	movs	r2, #143	@ 0x8f
 800075e:	0192      	lsls	r2, r2, #6
 8000760:	601a      	str	r2, [r3, #0]
                          |LED_Row2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2201      	movs	r2, #1
 8000766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000774:	193b      	adds	r3, r7, r4
 8000776:	4a2e      	ldr	r2, [pc, #184]	@ (8000830 <MX_GPIO_Init+0x198>)
 8000778:	0019      	movs	r1, r3
 800077a:	0010      	movs	r0, r2
 800077c:	f001 fdbc 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Column8_Pin LED_Column10_Pin LED_Column12_Pin LED_Column9_Pin
                           LED_Row9_Pin LED_Row11_Pin LED_Row10_Pin LED_Row8_Pin
                           LED_Row6_Pin */
  GPIO_InitStruct.Pin = LED_Column8_Pin|LED_Column10_Pin|LED_Column12_Pin|LED_Column9_Pin
 8000780:	193b      	adds	r3, r7, r4
 8000782:	4a2c      	ldr	r2, [pc, #176]	@ (8000834 <MX_GPIO_Init+0x19c>)
 8000784:	601a      	str	r2, [r3, #0]
                          |LED_Row9_Pin|LED_Row11_Pin|LED_Row10_Pin|LED_Row8_Pin
                          |LED_Row6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2201      	movs	r2, #1
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	193a      	adds	r2, r7, r4
 800079a:	23a0      	movs	r3, #160	@ 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fda9 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Column11_Pin LED_Column13_Pin LED_Column14_Pin LED_Column15_Pin
                           LED_Row1_Pin LED_Row3_Pin LED_Row5_Pin LED_Row7_Pin
                           LED_Column5_Pin LED_Column7_Pin */
  GPIO_InitStruct.Pin = LED_Column11_Pin|LED_Column13_Pin|LED_Column14_Pin|LED_Column15_Pin
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <MX_GPIO_Init+0x1a0>)
 80007aa:	601a      	str	r2, [r3, #0]
                          |LED_Row1_Pin|LED_Row3_Pin|LED_Row5_Pin|LED_Row7_Pin
                          |LED_Column5_Pin|LED_Column7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	4a1e      	ldr	r2, [pc, #120]	@ (800083c <MX_GPIO_Init+0x1a4>)
 80007c2:	0019      	movs	r1, r3
 80007c4:	0010      	movs	r0, r2
 80007c6:	f001 fd97 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Row14_Pin LED_Row12_Pin LED_Row0_Pin LED_Column0_Pin
                           LED_Column1_Pin LED_Column2_Pin LED_Column4_Pin LED_Column6_Pin
                           LED_Column3_Pin */
  GPIO_InitStruct.Pin = LED_Row14_Pin|LED_Row12_Pin|LED_Row0_Pin|LED_Column0_Pin
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	4a1c      	ldr	r2, [pc, #112]	@ (8000840 <MX_GPIO_Init+0x1a8>)
 80007ce:	601a      	str	r2, [r3, #0]
                          |LED_Column1_Pin|LED_Column2_Pin|LED_Column4_Pin|LED_Column6_Pin
                          |LED_Column3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	4a17      	ldr	r2, [pc, #92]	@ (8000844 <MX_GPIO_Init+0x1ac>)
 80007e6:	0019      	movs	r1, r3
 80007e8:	0010      	movs	r0, r2
 80007ea:	f001 fd85 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80007ee:	0021      	movs	r1, r4
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2280      	movs	r2, #128	@ 0x80
 80007f4:	0052      	lsls	r2, r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2284      	movs	r2, #132	@ 0x84
 80007fc:	0392      	lsls	r2, r2, #14
 80007fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2201      	movs	r2, #1
 8000804:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000806:	187b      	adds	r3, r7, r1
 8000808:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <MX_GPIO_Init+0x1a4>)
 800080a:	0019      	movs	r1, r3
 800080c:	0010      	movs	r0, r2
 800080e:	f001 fd73 	bl	80022f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2103      	movs	r1, #3
 8000816:	2007      	movs	r0, #7
 8000818:	f001 fcd2 	bl	80021c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800081c:	2007      	movs	r0, #7
 800081e:	f001 fce4 	bl	80021ea <HAL_NVIC_EnableIRQ>

}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b00b      	add	sp, #44	@ 0x2c
 8000828:	bd90      	pop	{r4, r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	40021000 	.word	0x40021000
 8000830:	50000800 	.word	0x50000800
 8000834:	00008ff0 	.word	0x00008ff0
 8000838:	0000dc37 	.word	0x0000dc37
 800083c:	50000400 	.word	0x50000400
 8000840:	0000037f 	.word	0x0000037f
 8000844:	50000c00 	.word	0x50000c00

08000848 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800084c:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_I2C1_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <MX_I2C1_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <MX_I2C1_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_I2C1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000884:	0018      	movs	r0, r3
 8000886:	f001 feed 	bl	8002664 <HAL_I2C_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 fb5b 	bl	8000f48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_I2C1_Init+0x74>)
 8000894:	2100      	movs	r1, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f002 fde6 	bl	8003468 <HAL_I2CEx_ConfigAnalogFilter>
 800089c:	1e03      	subs	r3, r0, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 fb52 	bl	8000f48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008a4:	4b05      	ldr	r3, [pc, #20]	@ (80008bc <MX_I2C1_Init+0x74>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	0018      	movs	r0, r3
 80008aa:	f002 fe29 	bl	8003500 <HAL_I2CEx_ConfigDigitalFilter>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 fb49 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	2000089c 	.word	0x2000089c
 80008c0:	40005400 	.word	0x40005400
 80008c4:	00503d58 	.word	0x00503d58

080008c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b091      	sub	sp, #68	@ 0x44
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	232c      	movs	r3, #44	@ 0x2c
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	0018      	movs	r0, r3
 80008d6:	2314      	movs	r3, #20
 80008d8:	001a      	movs	r2, r3
 80008da:	2100      	movs	r1, #0
 80008dc:	f00c f990 	bl	800cc00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e0:	2410      	movs	r4, #16
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	0018      	movs	r0, r3
 80008e6:	231c      	movs	r3, #28
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f00c f988 	bl	800cc00 <memset>
  if(i2cHandle->Instance==I2C1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a26      	ldr	r2, [pc, #152]	@ (8000990 <HAL_I2C_MspInit+0xc8>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d145      	bne.n	8000986 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2220      	movs	r2, #32
 80008fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000906:	193b      	adds	r3, r7, r4
 8000908:	0018      	movs	r0, r3
 800090a:	f003 fb75 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d001      	beq.n	8000916 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000912:	f000 fb19 	bl	8000f48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <HAL_I2C_MspInit+0xcc>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091a:	4b1e      	ldr	r3, [pc, #120]	@ (8000994 <HAL_I2C_MspInit+0xcc>)
 800091c:	2102      	movs	r1, #2
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	@ 0x34
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <HAL_I2C_MspInit+0xcc>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000926:	2202      	movs	r2, #2
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800092e:	212c      	movs	r1, #44	@ 0x2c
 8000930:	187b      	adds	r3, r7, r1
 8000932:	22c0      	movs	r2, #192	@ 0xc0
 8000934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2212      	movs	r2, #18
 800093a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2201      	movs	r2, #1
 8000940:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2203      	movs	r2, #3
 8000946:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2206      	movs	r2, #6
 800094c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094e:	187b      	adds	r3, r7, r1
 8000950:	4a11      	ldr	r2, [pc, #68]	@ (8000998 <HAL_I2C_MspInit+0xd0>)
 8000952:	0019      	movs	r1, r3
 8000954:	0010      	movs	r0, r2
 8000956:	f001 fccf 	bl	80022f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <HAL_I2C_MspInit+0xcc>)
 800095c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_I2C_MspInit+0xcc>)
 8000960:	2180      	movs	r1, #128	@ 0x80
 8000962:	0389      	lsls	r1, r1, #14
 8000964:	430a      	orrs	r2, r1
 8000966:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <HAL_I2C_MspInit+0xcc>)
 800096a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	039b      	lsls	r3, r3, #14
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2103      	movs	r1, #3
 800097a:	2017      	movs	r0, #23
 800097c:	f001 fc20 	bl	80021c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000980:	2017      	movs	r0, #23
 8000982:	f001 fc32 	bl	80021ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	46bd      	mov	sp, r7
 800098a:	b011      	add	sp, #68	@ 0x44
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	40005400 	.word	0x40005400
 8000994:	40021000 	.word	0x40021000
 8000998:	50000400 	.word	0x50000400

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fea7 	bl	80016f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f8b5 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f7ff fe75 	bl	8000698 <MX_GPIO_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80009ae:	f005 fe49 	bl	8006644 <MX_FATFS_Init>
 80009b2:	1e03      	subs	r3, r0, #0
 80009b4:	d001      	beq.n	80009ba <main+0x1e>
    Error_Handler();
 80009b6:	f000 fac7 	bl	8000f48 <Error_Handler>
  }
  MX_TIM16_Init();
 80009ba:	f000 fcf5 	bl	80013a8 <MX_TIM16_Init>
  MX_I2C1_Init();
 80009be:	f7ff ff43 	bl	8000848 <MX_I2C1_Init>
  MX_ADC1_Init();
 80009c2:	f7ff fd21 	bl	8000408 <MX_ADC1_Init>
  MX_SPI2_Init();
 80009c6:	f000 fac5 	bl	8000f54 <MX_SPI2_Init>
  MX_TIM14_Init();
 80009ca:	f000 fc9d 	bl	8001308 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80009ce:	f000 fd8f 	bl	80014f0 <MX_USART1_UART_Init>
  		HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_SET);
  		i++;
  		if (i > 15) i = 0;
  	}
#else
  for (uint8_t i = 0; i < 55; i++) {
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
 80009d8:	e08a      	b.n	8000af0 <main+0x154>
	  image_leds[i][0] = 0xFFFF;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781a      	ldrb	r2, [r3, #0]
 80009de:	4b4b      	ldr	r3, [pc, #300]	@ (8000b0c <main+0x170>)
 80009e0:	0152      	lsls	r2, r2, #5
 80009e2:	2101      	movs	r1, #1
 80009e4:	4249      	negs	r1, r1
 80009e6:	52d1      	strh	r1, [r2, r3]
	  image_leds[i][1] = 0xFFFF;
 80009e8:	1dfb      	adds	r3, r7, #7
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4a47      	ldr	r2, [pc, #284]	@ (8000b0c <main+0x170>)
 80009ee:	015b      	lsls	r3, r3, #5
 80009f0:	18d3      	adds	r3, r2, r3
 80009f2:	3302      	adds	r3, #2
 80009f4:	2201      	movs	r2, #1
 80009f6:	4252      	negs	r2, r2
 80009f8:	801a      	strh	r2, [r3, #0]
	  image_leds[i][2] = 0xFFFF;
 80009fa:	1dfb      	adds	r3, r7, #7
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4a43      	ldr	r2, [pc, #268]	@ (8000b0c <main+0x170>)
 8000a00:	015b      	lsls	r3, r3, #5
 8000a02:	18d3      	adds	r3, r2, r3
 8000a04:	3304      	adds	r3, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4252      	negs	r2, r2
 8000a0a:	801a      	strh	r2, [r3, #0]
	  image_leds[i][3] = 0xFFFF;
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4a3e      	ldr	r2, [pc, #248]	@ (8000b0c <main+0x170>)
 8000a12:	015b      	lsls	r3, r3, #5
 8000a14:	18d3      	adds	r3, r2, r3
 8000a16:	3306      	adds	r3, #6
 8000a18:	2201      	movs	r2, #1
 8000a1a:	4252      	negs	r2, r2
 8000a1c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][4] = 0xF00F;
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4a3a      	ldr	r2, [pc, #232]	@ (8000b0c <main+0x170>)
 8000a24:	015b      	lsls	r3, r3, #5
 8000a26:	18d3      	adds	r3, r2, r3
 8000a28:	3308      	adds	r3, #8
 8000a2a:	4a39      	ldr	r2, [pc, #228]	@ (8000b10 <main+0x174>)
 8000a2c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][5] = 0xF00F;
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4a36      	ldr	r2, [pc, #216]	@ (8000b0c <main+0x170>)
 8000a34:	015b      	lsls	r3, r3, #5
 8000a36:	18d3      	adds	r3, r2, r3
 8000a38:	330a      	adds	r3, #10
 8000a3a:	4a35      	ldr	r2, [pc, #212]	@ (8000b10 <main+0x174>)
 8000a3c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][6] = 0xF00F;
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4a32      	ldr	r2, [pc, #200]	@ (8000b0c <main+0x170>)
 8000a44:	015b      	lsls	r3, r3, #5
 8000a46:	18d3      	adds	r3, r2, r3
 8000a48:	330c      	adds	r3, #12
 8000a4a:	4a31      	ldr	r2, [pc, #196]	@ (8000b10 <main+0x174>)
 8000a4c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][7] = 0xF00F;
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	4a2e      	ldr	r2, [pc, #184]	@ (8000b0c <main+0x170>)
 8000a54:	015b      	lsls	r3, r3, #5
 8000a56:	18d3      	adds	r3, r2, r3
 8000a58:	330e      	adds	r3, #14
 8000a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b10 <main+0x174>)
 8000a5c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][8] = 0xF00F;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4a2a      	ldr	r2, [pc, #168]	@ (8000b0c <main+0x170>)
 8000a64:	015b      	lsls	r3, r3, #5
 8000a66:	18d3      	adds	r3, r2, r3
 8000a68:	3310      	adds	r3, #16
 8000a6a:	4a29      	ldr	r2, [pc, #164]	@ (8000b10 <main+0x174>)
 8000a6c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][9] = 0xF00F;
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	4a26      	ldr	r2, [pc, #152]	@ (8000b0c <main+0x170>)
 8000a74:	015b      	lsls	r3, r3, #5
 8000a76:	18d3      	adds	r3, r2, r3
 8000a78:	3312      	adds	r3, #18
 8000a7a:	4a25      	ldr	r2, [pc, #148]	@ (8000b10 <main+0x174>)
 8000a7c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][10] = 0xF00F;
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	4a22      	ldr	r2, [pc, #136]	@ (8000b0c <main+0x170>)
 8000a84:	015b      	lsls	r3, r3, #5
 8000a86:	18d3      	adds	r3, r2, r3
 8000a88:	3314      	adds	r3, #20
 8000a8a:	4a21      	ldr	r2, [pc, #132]	@ (8000b10 <main+0x174>)
 8000a8c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][11] = 0xF00F;
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4a1e      	ldr	r2, [pc, #120]	@ (8000b0c <main+0x170>)
 8000a94:	015b      	lsls	r3, r3, #5
 8000a96:	18d3      	adds	r3, r2, r3
 8000a98:	3316      	adds	r3, #22
 8000a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <main+0x174>)
 8000a9c:	801a      	strh	r2, [r3, #0]
	  image_leds[i][12] = 0xFFFF;
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8000b0c <main+0x170>)
 8000aa4:	015b      	lsls	r3, r3, #5
 8000aa6:	18d3      	adds	r3, r2, r3
 8000aa8:	3318      	adds	r3, #24
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4252      	negs	r2, r2
 8000aae:	801a      	strh	r2, [r3, #0]
	  image_leds[i][13] = 0xFFFF;
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4a15      	ldr	r2, [pc, #84]	@ (8000b0c <main+0x170>)
 8000ab6:	015b      	lsls	r3, r3, #5
 8000ab8:	18d3      	adds	r3, r2, r3
 8000aba:	331a      	adds	r3, #26
 8000abc:	2201      	movs	r2, #1
 8000abe:	4252      	negs	r2, r2
 8000ac0:	801a      	strh	r2, [r3, #0]
	  image_leds[i][14] = 0xFFFF;
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	4a11      	ldr	r2, [pc, #68]	@ (8000b0c <main+0x170>)
 8000ac8:	015b      	lsls	r3, r3, #5
 8000aca:	18d3      	adds	r3, r2, r3
 8000acc:	331c      	adds	r3, #28
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4252      	negs	r2, r2
 8000ad2:	801a      	strh	r2, [r3, #0]
	  image_leds[i][15] = 0xFFFF;
 8000ad4:	1dfb      	adds	r3, r7, #7
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b0c <main+0x170>)
 8000ada:	015b      	lsls	r3, r3, #5
 8000adc:	18d3      	adds	r3, r2, r3
 8000ade:	331e      	adds	r3, #30
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4252      	negs	r2, r2
 8000ae4:	801a      	strh	r2, [r3, #0]
  for (uint8_t i = 0; i < 55; i++) {
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	3201      	adds	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b36      	cmp	r3, #54	@ 0x36
 8000af6:	d800      	bhi.n	8000afa <main+0x15e>
 8000af8:	e76f      	b.n	80009da <main+0x3e>

  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000afa:	f009 f905 	bl	8009d08 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000afe:	f7ff fd31 	bl	8000564 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b02:	f009 f923 	bl	8009d4c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#endif
	while (1)
 8000b06:	46c0      	nop			@ (mov r8, r8)
 8000b08:	e7fd      	b.n	8000b06 <main+0x16a>
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	200001b8 	.word	0x200001b8
 8000b10:	fffff00f 	.word	0xfffff00f

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b093      	sub	sp, #76	@ 0x4c
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	2414      	movs	r4, #20
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	0018      	movs	r0, r3
 8000b20:	2334      	movs	r3, #52	@ 0x34
 8000b22:	001a      	movs	r2, r3
 8000b24:	2100      	movs	r1, #0
 8000b26:	f00c f86b 	bl	800cc00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	2310      	movs	r3, #16
 8000b30:	001a      	movs	r2, r3
 8000b32:	2100      	movs	r1, #0
 8000b34:	f00c f864 	bl	800cc00 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2380      	movs	r3, #128	@ 0x80
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f002 fd2b 	bl	8003598 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2202      	movs	r2, #2
 8000b46:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	2280      	movs	r2, #128	@ 0x80
 8000b4c:	0052      	lsls	r2, r2, #1
 8000b4e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2240      	movs	r2, #64	@ 0x40
 8000b5a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 fd63 	bl	8003630 <HAL_RCC_OscConfig>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000b6e:	f000 f9eb 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2207      	movs	r2, #7
 8000b76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f003 f85e 	bl	8003c50 <HAL_RCC_ClockConfig>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b98:	f000 f9d6 	bl	8000f48 <Error_Handler>
  }
}
 8000b9c:	46c0      	nop			@ (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b013      	add	sp, #76	@ 0x4c
 8000ba2:	bd90      	pop	{r4, r7, pc}

08000ba4 <ReadSD>:

/* USER CODE BEGIN 4 */
void ReadSD() {
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	4cac      	ldr	r4, [pc, #688]	@ (8000e58 <ReadSD+0x2b4>)
 8000ba8:	44a5      	add	sp, r4
 8000baa:	af00      	add	r7, sp, #0
	HAL_Delay(1000); // short delay to let the SD card settle
 8000bac:	23fa      	movs	r3, #250	@ 0xfa
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fddb 	bl	800176c <HAL_Delay>
	FATFS FatFs; 	// Fatfs handle
	FIL fil; 		// File handle
	FRESULT fres; 	// Result after operations

	// open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000bb6:	4da9      	ldr	r5, [pc, #676]	@ (8000e5c <ReadSD+0x2b8>)
 8000bb8:	197c      	adds	r4, r7, r5
 8000bba:	49a9      	ldr	r1, [pc, #676]	@ (8000e60 <ReadSD+0x2bc>)
 8000bbc:	23b3      	movs	r3, #179	@ 0xb3
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f008 f9bd 	bl	8008f44 <f_mount>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8000bce:	197b      	adds	r3, r7, r5
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00c      	beq.n	8000bf0 <ReadSD+0x4c>
		sprintf((char *) OutputBuffer, "f_mount error (%i)\r\n", fres);
 8000bd6:	197b      	adds	r3, r7, r5
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	49a2      	ldr	r1, [pc, #648]	@ (8000e64 <ReadSD+0x2c0>)
 8000bdc:	4ba2      	ldr	r3, [pc, #648]	@ (8000e68 <ReadSD+0x2c4>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f00b ffee 	bl	800cbc0 <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000be4:	4ba0      	ldr	r3, [pc, #640]	@ (8000e68 <ReadSD+0x2c4>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 fd32 	bl	8001650 <PrintOutputBuffer>
		while(1);
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	e7fd      	b.n	8000bec <ReadSD+0x48>
	// gather statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000bf0:	4d9a      	ldr	r5, [pc, #616]	@ (8000e5c <ReadSD+0x2b8>)
 8000bf2:	197c      	adds	r4, r7, r5
 8000bf4:	2394      	movs	r3, #148	@ 0x94
 8000bf6:	18fa      	adds	r2, r7, r3
 8000bf8:	2398      	movs	r3, #152	@ 0x98
 8000bfa:	18f9      	adds	r1, r7, r3
 8000bfc:	4b98      	ldr	r3, [pc, #608]	@ (8000e60 <ReadSD+0x2bc>)
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f008 fe41 	bl	8009886 <f_getfree>
 8000c04:	0003      	movs	r3, r0
 8000c06:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8000c08:	197b      	adds	r3, r7, r5
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00c      	beq.n	8000c2a <ReadSD+0x86>
		sprintf((char *) OutputBuffer, "f_getfree error (%i)\r\n", fres);
 8000c10:	197b      	adds	r3, r7, r5
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	4995      	ldr	r1, [pc, #596]	@ (8000e6c <ReadSD+0x2c8>)
 8000c16:	4b94      	ldr	r3, [pc, #592]	@ (8000e68 <ReadSD+0x2c4>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f00b ffd1 	bl	800cbc0 <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000c1e:	4b92      	ldr	r3, [pc, #584]	@ (8000e68 <ReadSD+0x2c4>)
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 fd15 	bl	8001650 <PrintOutputBuffer>
		while(1);
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	e7fd      	b.n	8000c26 <ReadSD+0x82>
	}

	// formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000c2a:	2194      	movs	r1, #148	@ 0x94
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	3b02      	subs	r3, #2
 8000c34:	187a      	adds	r2, r7, r1
 8000c36:	6812      	ldr	r2, [r2, #0]
 8000c38:	8952      	ldrh	r2, [r2, #10]
 8000c3a:	4353      	muls	r3, r2
 8000c3c:	488c      	ldr	r0, [pc, #560]	@ (8000e70 <ReadSD+0x2cc>)
 8000c3e:	183a      	adds	r2, r7, r0
 8000c40:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	895b      	ldrh	r3, [r3, #10]
 8000c48:	001a      	movs	r2, r3
 8000c4a:	2398      	movs	r3, #152	@ 0x98
 8000c4c:	18fb      	adds	r3, r7, r3
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4353      	muls	r3, r2
 8000c52:	24a1      	movs	r4, #161	@ 0xa1
 8000c54:	00e4      	lsls	r4, r4, #3
 8000c56:	193a      	adds	r2, r7, r4
 8000c58:	6013      	str	r3, [r2, #0]

	sprintf((char *) OutputBuffer, "SD card stats:\r\n%10lu KiB total drive space.\r\n", total_sectors/2);
 8000c5a:	183b      	adds	r3, r7, r0
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	085a      	lsrs	r2, r3, #1
 8000c60:	4984      	ldr	r1, [pc, #528]	@ (8000e74 <ReadSD+0x2d0>)
 8000c62:	4b81      	ldr	r3, [pc, #516]	@ (8000e68 <ReadSD+0x2c4>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f00b ffab 	bl	800cbc0 <siprintf>
	PrintOutputBuffer(OutputBuffer);
 8000c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e68 <ReadSD+0x2c4>)
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 fcef 	bl	8001650 <PrintOutputBuffer>
	sprintf((char *) OutputBuffer, "%10lu KiB available.\r\n", free_sectors/2);
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	085a      	lsrs	r2, r3, #1
 8000c78:	497f      	ldr	r1, [pc, #508]	@ (8000e78 <ReadSD+0x2d4>)
 8000c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e68 <ReadSD+0x2c4>)
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f00b ff9f 	bl	800cbc0 <siprintf>
	PrintOutputBuffer(OutputBuffer);
 8000c82:	4b79      	ldr	r3, [pc, #484]	@ (8000e68 <ReadSD+0x2c4>)
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fce3 	bl	8001650 <PrintOutputBuffer>

	//Now let's try to open file "test.txt"
	fres = f_open(&fil, "test.txt", FA_READ);
 8000c8a:	4d74      	ldr	r5, [pc, #464]	@ (8000e5c <ReadSD+0x2b8>)
 8000c8c:	197c      	adds	r4, r7, r5
 8000c8e:	497b      	ldr	r1, [pc, #492]	@ (8000e7c <ReadSD+0x2d8>)
 8000c90:	239c      	movs	r3, #156	@ 0x9c
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	2201      	movs	r2, #1
 8000c96:	0018      	movs	r0, r3
 8000c98:	f008 f9bc 	bl	8009014 <f_open>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8000ca0:	197b      	adds	r3, r7, r5
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00c      	beq.n	8000cc2 <ReadSD+0x11e>
		sprintf((char *) OutputBuffer, "f_open error (%i)\r\n", fres);
 8000ca8:	197b      	adds	r3, r7, r5
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	4974      	ldr	r1, [pc, #464]	@ (8000e80 <ReadSD+0x2dc>)
 8000cae:	4b6e      	ldr	r3, [pc, #440]	@ (8000e68 <ReadSD+0x2c4>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f00b ff85 	bl	800cbc0 <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8000e68 <ReadSD+0x2c4>)
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 fcc9 	bl	8001650 <PrintOutputBuffer>
		while(1);
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	e7fd      	b.n	8000cbe <ReadSD+0x11a>
	}
	sprintf((char *) OutputBuffer, "I was able to open 'test.txt' for reading!\r\n");
 8000cc2:	4a70      	ldr	r2, [pc, #448]	@ (8000e84 <ReadSD+0x2e0>)
 8000cc4:	4b68      	ldr	r3, [pc, #416]	@ (8000e68 <ReadSD+0x2c4>)
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f00b ff79 	bl	800cbc0 <siprintf>
	PrintOutputBuffer(OutputBuffer);
 8000cce:	4b66      	ldr	r3, [pc, #408]	@ (8000e68 <ReadSD+0x2c4>)
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f000 fcbd 	bl	8001650 <PrintOutputBuffer>

	BYTE readBuf[17];
	int x = -1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	425b      	negs	r3, r3
 8000cda:	4a6b      	ldr	r2, [pc, #428]	@ (8000e88 <ReadSD+0x2e4>)
 8000cdc:	18ba      	adds	r2, r7, r2
 8000cde:	6013      	str	r3, [r2, #0]
	int x3 = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	22a4      	movs	r2, #164	@ 0xa4
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	18ba      	adds	r2, r7, r2
 8000ce8:	6013      	str	r3, [r2, #0]
	int image = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	4a67      	ldr	r2, [pc, #412]	@ (8000e8c <ReadSD+0x2e8>)
 8000cee:	18ba      	adds	r2, r7, r2
 8000cf0:	6013      	str	r3, [r2, #0]
	char fullText[128];
	unsigned int decimal_value = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	22a3      	movs	r2, #163	@ 0xa3
 8000cf6:	00d2      	lsls	r2, r2, #3
 8000cf8:	18ba      	adds	r2, r7, r2
 8000cfa:	6013      	str	r3, [r2, #0]
	memset(fullText, 0, sizeof(fullText));
 8000cfc:	003b      	movs	r3, r7
 8000cfe:	2280      	movs	r2, #128	@ 0x80
 8000d00:	2100      	movs	r1, #0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f00b ff7c 	bl	800cc00 <memset>
	TCHAR* rres3 = "4";
 8000d08:	4b61      	ldr	r3, [pc, #388]	@ (8000e90 <ReadSD+0x2ec>)
 8000d0a:	4a62      	ldr	r2, [pc, #392]	@ (8000e94 <ReadSD+0x2f0>)
 8000d0c:	18b9      	adds	r1, r7, r2
 8000d0e:	600b      	str	r3, [r1, #0]
	if(rres3 != 0) {
 8000d10:	18bb      	adds	r3, r7, r2
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d100      	bne.n	8000d1a <ReadSD+0x176>
 8000d18:	e080      	b.n	8000e1c <ReadSD+0x278>
		while (x < 1760) { //this states limit of how big the txt is
 8000d1a:	e06d      	b.n	8000df8 <ReadSD+0x254>
			f_gets((TCHAR*)readBuf, 17, &fil);
 8000d1c:	239c      	movs	r3, #156	@ 0x9c
 8000d1e:	18fa      	adds	r2, r7, r3
 8000d20:	2380      	movs	r3, #128	@ 0x80
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	2111      	movs	r1, #17
 8000d26:	0018      	movs	r0, r3
 8000d28:	f008 fe71 	bl	8009a0e <f_gets>
			x += 1;
 8000d2c:	4a56      	ldr	r2, [pc, #344]	@ (8000e88 <ReadSD+0x2e4>)
 8000d2e:	18bb      	adds	r3, r7, r2
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	18b9      	adds	r1, r7, r2
 8000d36:	600b      	str	r3, [r1, #0]
			decimal_value = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	21a3      	movs	r1, #163	@ 0xa3
 8000d3c:	00c9      	lsls	r1, r1, #3
 8000d3e:	1879      	adds	r1, r7, r1
 8000d40:	600b      	str	r3, [r1, #0]
			if ((x+1) % 2 == 1) {
 8000d42:	18bb      	adds	r3, r7, r2
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a53      	ldr	r2, [pc, #332]	@ (8000e98 <ReadSD+0x2f4>)
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	d504      	bpl.n	8000d58 <ReadSD+0x1b4>
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	2202      	movs	r2, #2
 8000d52:	4252      	negs	r2, r2
 8000d54:	4313      	orrs	r3, r2
 8000d56:	3301      	adds	r3, #1
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d13e      	bne.n	8000dda <ReadSD+0x236>
				// Concatenate the read line to the full text buffer
				for (int i = 0; i < 16; i++) { // the 16 bits when running
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4a4f      	ldr	r2, [pc, #316]	@ (8000e9c <ReadSD+0x2f8>)
 8000d60:	18ba      	adds	r2, r7, r2
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e01d      	b.n	8000da2 <ReadSD+0x1fe>
					// Convert '1' or '0' char to its integer value
					int bit_value = readBuf[i] - '0'; // '1' - '0' = 1, '0' - '0' = 0
 8000d66:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea0 <ReadSD+0x2fc>)
 8000d68:	22a5      	movs	r2, #165	@ 0xa5
 8000d6a:	00d2      	lsls	r2, r2, #3
 8000d6c:	189b      	adds	r3, r3, r2
 8000d6e:	19da      	adds	r2, r3, r7
 8000d70:	494a      	ldr	r1, [pc, #296]	@ (8000e9c <ReadSD+0x2f8>)
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	18d3      	adds	r3, r2, r3
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	3b30      	subs	r3, #48	@ 0x30
 8000d7c:	20a0      	movs	r0, #160	@ 0xa0
 8000d7e:	00c0      	lsls	r0, r0, #3
 8000d80:	183a      	adds	r2, r7, r0
 8000d82:	6013      	str	r3, [r2, #0]

					// Update the decimal value
					decimal_value = (decimal_value << 1) | bit_value; // Left-shift and add the current bit
 8000d84:	24a3      	movs	r4, #163	@ 0xa3
 8000d86:	00e4      	lsls	r4, r4, #3
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	005a      	lsls	r2, r3, #1
 8000d8e:	183b      	adds	r3, r7, r0
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	193a      	adds	r2, r7, r4
 8000d96:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 16; i++) { // the 16 bits when running
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	187a      	adds	r2, r7, r1
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	4b3e      	ldr	r3, [pc, #248]	@ (8000e9c <ReadSD+0x2f8>)
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	dddc      	ble.n	8000d66 <ReadSD+0x1c2>
				}
				image_leds[image][x3] = decimal_value;
 8000dac:	23a3      	movs	r3, #163	@ 0xa3
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	b298      	uxth	r0, r3
 8000db6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea4 <ReadSD+0x300>)
 8000db8:	4a34      	ldr	r2, [pc, #208]	@ (8000e8c <ReadSD+0x2e8>)
 8000dba:	18ba      	adds	r2, r7, r2
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	0111      	lsls	r1, r2, #4
 8000dc0:	24a4      	movs	r4, #164	@ 0xa4
 8000dc2:	00e4      	lsls	r4, r4, #3
 8000dc4:	193a      	adds	r2, r7, r4
 8000dc6:	6812      	ldr	r2, [r2, #0]
 8000dc8:	188a      	adds	r2, r1, r2
 8000dca:	0052      	lsls	r2, r2, #1
 8000dcc:	1c01      	adds	r1, r0, #0
 8000dce:	52d1      	strh	r1, [r2, r3]
				x3 += 1;
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	193a      	adds	r2, r7, r4
 8000dd8:	6013      	str	r3, [r2, #0]
			}
			if (x3 > 15) {
 8000dda:	22a4      	movs	r2, #164	@ 0xa4
 8000ddc:	00d2      	lsls	r2, r2, #3
 8000dde:	18bb      	adds	r3, r7, r2
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	dd08      	ble.n	8000df8 <ReadSD+0x254>
				image += 1;
 8000de6:	4929      	ldr	r1, [pc, #164]	@ (8000e8c <ReadSD+0x2e8>)
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	1879      	adds	r1, r7, r1
 8000df0:	600b      	str	r3, [r1, #0]
				x3 = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	18ba      	adds	r2, r7, r2
 8000df6:	6013      	str	r3, [r2, #0]
		while (x < 1760) { //this states limit of how big the txt is
 8000df8:	4b23      	ldr	r3, [pc, #140]	@ (8000e88 <ReadSD+0x2e4>)
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	23dc      	movs	r3, #220	@ 0xdc
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	429a      	cmp	r2, r3
 8000e04:	db8a      	blt.n	8000d1c <ReadSD+0x178>
			}
		}

		sprintf((char *) OutputBuffer, "Read string from 'test.txt'");
 8000e06:	4a28      	ldr	r2, [pc, #160]	@ (8000ea8 <ReadSD+0x304>)
 8000e08:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <ReadSD+0x2c4>)
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f00b fed7 	bl	800cbc0 <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <ReadSD+0x2c4>)
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fc1b 	bl	8001650 <PrintOutputBuffer>
 8000e1a:	e00b      	b.n	8000e34 <ReadSD+0x290>
	} else {
		sprintf((char *) OutputBuffer, "f_gets error (%i)\r\n", fres);
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <ReadSD+0x2b8>)
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	4922      	ldr	r1, [pc, #136]	@ (8000eac <ReadSD+0x308>)
 8000e24:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <ReadSD+0x2c4>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f00b feca 	bl	800cbc0 <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <ReadSD+0x2c4>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f000 fc0e 	bl	8001650 <PrintOutputBuffer>
	}

	f_close(&fil);
 8000e34:	239c      	movs	r3, #156	@ 0x9c
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f008 fceb 	bl	8009814 <f_close>

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <ReadSD+0x2bc>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	0019      	movs	r1, r3
 8000e44:	2000      	movs	r0, #0
 8000e46:	f008 f87d 	bl	8008f44 <f_mount>
}
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	23a5      	movs	r3, #165	@ 0xa5
 8000e50:	00db      	lsls	r3, r3, #3
 8000e52:	449d      	add	sp, r3
 8000e54:	bdb0      	pop	{r4, r5, r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	fffffad8 	.word	0xfffffad8
 8000e5c:	00000513 	.word	0x00000513
 8000e60:	0800d5e0 	.word	0x0800d5e0
 8000e64:	0800d5e4 	.word	0x0800d5e4
 8000e68:	200008f4 	.word	0x200008f4
 8000e6c:	0800d5fc 	.word	0x0800d5fc
 8000e70:	0000050c 	.word	0x0000050c
 8000e74:	0800d614 	.word	0x0800d614
 8000e78:	0800d644 	.word	0x0800d644
 8000e7c:	0800d65c 	.word	0x0800d65c
 8000e80:	0800d668 	.word	0x0800d668
 8000e84:	0800d67c 	.word	0x0800d67c
 8000e88:	00000524 	.word	0x00000524
 8000e8c:	0000051c 	.word	0x0000051c
 8000e90:	0800d6ac 	.word	0x0800d6ac
 8000e94:	00000504 	.word	0x00000504
 8000e98:	80000001 	.word	0x80000001
 8000e9c:	00000514 	.word	0x00000514
 8000ea0:	fffffb58 	.word	0xfffffb58
 8000ea4:	200001b8 	.word	0x200001b8
 8000ea8:	0800d6b0 	.word	0x0800d6b0
 8000eac:	0800d6cc 	.word	0x0800d6cc

08000eb0 <HAL_GPIO_EXTI_Falling_Callback>:

//
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	801a      	strh	r2, [r3, #0]
	// If chip select pin goes low, SD card was plugged in
	if (GPIO_Pin == SPI2_NSS_Pin) {
 8000ebc:	1dbb      	adds	r3, r7, #6
 8000ebe:	881a      	ldrh	r2, [r3, #0]
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d105      	bne.n	8000ed4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		// critical section to stop scheduler from exiting SD mount
		taskENTER_CRITICAL();
 8000ec8:	f00b fc2a 	bl	800c720 <vPortEnterCritical>
		ReadSD();
 8000ecc:	f7ff fe6a 	bl	8000ba4 <ReadSD>
		taskEXIT_CRITICAL();
 8000ed0:	f00b fc38 	bl	800c744 <vPortExitCritical>
	}
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}

08000edc <HAL_I2C_ErrorCallback>:
    	HAL_I2C_Master_Receive_IT(&hi2c1, 0x70, rx_buffer, BUFFER_SIZE);
    }
}

// Error callback
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_I2C_ErrorCallback+0x20>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d101      	bne.n	8000ef2 <HAL_I2C_ErrorCallback+0x16>
        // Handle I2C error
        Error_Handler();
 8000eee:	f000 f82b 	bl	8000f48 <Error_Handler>
    }
}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	40005400 	.word	0x40005400

08000f00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim == &htim16 ) {
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d10a      	bne.n	8000f26 <HAL_TIM_PeriodElapsedCallback+0x26>
		current_frame = (current_frame + 1) % 55;
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	2137      	movs	r1, #55	@ 0x37
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f7ff fa6f 	bl	80003fc <__aeabi_idivmod>
 8000f1e:	000b      	movs	r3, r1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4b07      	ldr	r3, [pc, #28]	@ (8000f40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f24:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d101      	bne.n	8000f34 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8000f30:	f000 fc00 	bl	8001734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000a34 	.word	0x20000a34
 8000f40:	200008f0 	.word	0x200008f0
 8000f44:	40001000 	.word	0x40001000

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	e7fd      	b.n	8000f50 <Error_Handler+0x8>

08000f54 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fcc <MX_SPI2_Init+0x78>)
 8000f5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f60:	2282      	movs	r2, #130	@ 0x82
 8000f62:	0052      	lsls	r2, r2, #1
 8000f64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f6e:	22e0      	movs	r2, #224	@ 0xe0
 8000f70:	00d2      	lsls	r2, r2, #3
 8000f72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f80:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f82:	2280      	movs	r2, #128	@ 0x80
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000fa2:	2207      	movs	r2, #7
 8000fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fac:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000fae:	2208      	movs	r2, #8
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fb2:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <MX_SPI2_Init+0x74>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f003 f953 	bl	8004260 <HAL_SPI_Init>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000fbe:	f7ff ffc3 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000934 	.word	0x20000934
 8000fcc:	40003800 	.word	0x40003800

08000fd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd0:	b590      	push	{r4, r7, lr}
 8000fd2:	b08b      	sub	sp, #44	@ 0x2c
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	2414      	movs	r4, #20
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	0018      	movs	r0, r3
 8000fde:	2314      	movs	r3, #20
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	f00b fe0c 	bl	800cc00 <memset>
  if(spiHandle->Instance==SPI2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a2c      	ldr	r2, [pc, #176]	@ (80010a0 <HAL_SPI_MspInit+0xd0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d151      	bne.n	8001096 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 8000ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 8000ff8:	2180      	movs	r1, #128	@ 0x80
 8000ffa:	01c9      	lsls	r1, r1, #7
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001000:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 8001002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	01db      	lsls	r3, r3, #7
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 8001010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001012:	4b24      	ldr	r3, [pc, #144]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 8001014:	2104      	movs	r1, #4
 8001016:	430a      	orrs	r2, r1
 8001018:	635a      	str	r2, [r3, #52]	@ 0x34
 800101a:	4b22      	ldr	r3, [pc, #136]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 800101c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800101e:	2204      	movs	r2, #4
 8001020:	4013      	ands	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b1f      	ldr	r3, [pc, #124]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 8001028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102a:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 800102c:	2102      	movs	r1, #2
 800102e:	430a      	orrs	r2, r1
 8001030:	635a      	str	r2, [r3, #52]	@ 0x34
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <HAL_SPI_MspInit+0xd4>)
 8001034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001036:	2202      	movs	r2, #2
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	220c      	movs	r2, #12
 8001042:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	193b      	adds	r3, r7, r4
 8001046:	2202      	movs	r2, #2
 8001048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	193b      	adds	r3, r7, r4
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	2201      	movs	r2, #1
 800105a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	193b      	adds	r3, r7, r4
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <HAL_SPI_MspInit+0xd8>)
 8001060:	0019      	movs	r1, r3
 8001062:	0010      	movs	r0, r2
 8001064:	f001 f948 	bl	80022f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001068:	0021      	movs	r1, r4
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2280      	movs	r2, #128	@ 0x80
 800106e:	0192      	lsls	r2, r2, #6
 8001070:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2202      	movs	r2, #2
 8001076:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	187b      	adds	r3, r7, r1
 800108c:	4a07      	ldr	r2, [pc, #28]	@ (80010ac <HAL_SPI_MspInit+0xdc>)
 800108e:	0019      	movs	r1, r3
 8001090:	0010      	movs	r0, r2
 8001092:	f001 f931 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b00b      	add	sp, #44	@ 0x2c
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	40003800 	.word	0x40003800
 80010a4:	40021000 	.word	0x40021000
 80010a8:	50000800 	.word	0x50000800
 80010ac:	50000400 	.word	0x50000400

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_MspInit+0x50>)
 80010b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_MspInit+0x50>)
 80010bc:	2101      	movs	r1, #1
 80010be:	430a      	orrs	r2, r1
 80010c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_MspInit+0x50>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c6:	2201      	movs	r2, #1
 80010c8:	4013      	ands	r3, r2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_MspInit+0x50>)
 80010d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <HAL_MspInit+0x50>)
 80010d4:	2180      	movs	r1, #128	@ 0x80
 80010d6:	0549      	lsls	r1, r1, #21
 80010d8:	430a      	orrs	r2, r1
 80010da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <HAL_MspInit+0x50>)
 80010de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010e0:	2380      	movs	r3, #128	@ 0x80
 80010e2:	055b      	lsls	r3, r3, #21
 80010e4:	4013      	ands	r3, r2
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80010ea:	2302      	movs	r3, #2
 80010ec:	425b      	negs	r3, r3
 80010ee:	2200      	movs	r2, #0
 80010f0:	2103      	movs	r1, #3
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 f864 	bl	80021c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b08c      	sub	sp, #48	@ 0x30
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800110c:	232b      	movs	r3, #43	@ 0x2b
 800110e:	18fb      	adds	r3, r7, r3
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001114:	4b37      	ldr	r3, [pc, #220]	@ (80011f4 <HAL_InitTick+0xf0>)
 8001116:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001118:	4b36      	ldr	r3, [pc, #216]	@ (80011f4 <HAL_InitTick+0xf0>)
 800111a:	2110      	movs	r1, #16
 800111c:	430a      	orrs	r2, r1
 800111e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001120:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <HAL_InitTick+0xf0>)
 8001122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001124:	2210      	movs	r2, #16
 8001126:	4013      	ands	r3, r2
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800112c:	230c      	movs	r3, #12
 800112e:	18fa      	adds	r2, r7, r3
 8001130:	2410      	movs	r4, #16
 8001132:	193b      	adds	r3, r7, r4
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f002 ff34 	bl	8003fa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	2b00      	cmp	r3, #0
 8001146:	d104      	bne.n	8001152 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001148:	f002 ff16 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 800114c:	0003      	movs	r3, r0
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001150:	e004      	b.n	800115c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001152:	f002 ff11 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8001156:	0003      	movs	r3, r0
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800115c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115e:	4926      	ldr	r1, [pc, #152]	@ (80011f8 <HAL_InitTick+0xf4>)
 8001160:	0018      	movs	r0, r3
 8001162:	f7fe ffdb 	bl	800011c <__udivsi3>
 8001166:	0003      	movs	r3, r0
 8001168:	3b01      	subs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800116c:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <HAL_InitTick+0xf8>)
 800116e:	4a24      	ldr	r2, [pc, #144]	@ (8001200 <HAL_InitTick+0xfc>)
 8001170:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001172:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <HAL_InitTick+0xf8>)
 8001174:	4a23      	ldr	r2, [pc, #140]	@ (8001204 <HAL_InitTick+0x100>)
 8001176:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001178:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <HAL_InitTick+0xf8>)
 800117a:	6a3a      	ldr	r2, [r7, #32]
 800117c:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <HAL_InitTick+0xf8>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <HAL_InitTick+0xf8>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <HAL_InitTick+0xf8>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001190:	252b      	movs	r5, #43	@ 0x2b
 8001192:	197c      	adds	r4, r7, r5
 8001194:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_InitTick+0xf8>)
 8001196:	0018      	movs	r0, r3
 8001198:	f003 fdd2 	bl	8004d40 <HAL_TIM_Base_Init>
 800119c:	0003      	movs	r3, r0
 800119e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80011a0:	197b      	adds	r3, r7, r5
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d11e      	bne.n	80011e6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011a8:	197c      	adds	r4, r7, r5
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <HAL_InitTick+0xf8>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f003 fe1f 	bl	8004df0 <HAL_TIM_Base_Start_IT>
 80011b2:	0003      	movs	r3, r0
 80011b4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80011b6:	197b      	adds	r3, r7, r5
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d113      	bne.n	80011e6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80011be:	2011      	movs	r0, #17
 80011c0:	f001 f813 	bl	80021ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d809      	bhi.n	80011de <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	0019      	movs	r1, r3
 80011d0:	2011      	movs	r0, #17
 80011d2:	f000 fff5 	bl	80021c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <HAL_InitTick+0x104>)
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e003      	b.n	80011e6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80011de:	232b      	movs	r3, #43	@ 0x2b
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80011e6:	232b      	movs	r3, #43	@ 0x2b
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b00c      	add	sp, #48	@ 0x30
 80011f2:	bdb0      	pop	{r4, r5, r7, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	000f4240 	.word	0x000f4240
 80011fc:	20000998 	.word	0x20000998
 8001200:	40001000 	.word	0x40001000
 8001204:	000003e7 	.word	0x000003e7
 8001208:	200000c4 	.word	0x200000c4

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_NSS_Pin);
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	0018      	movs	r0, r3
 8001226:	f001 f9e9 	bl	80025fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001234:	4b03      	ldr	r3, [pc, #12]	@ (8001244 <TIM6_IRQHandler+0x14>)
 8001236:	0018      	movs	r0, r3
 8001238:	f003 fe90 	bl	8004f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800123c:	46c0      	nop			@ (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	20000998 	.word	0x20000998

08001248 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <TIM16_IRQHandler+0x14>)
 800124e:	0018      	movs	r0, r3
 8001250:	f003 fe84 	bl	8004f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			@ (mov r8, r8)
 800125c:	20000a34 	.word	0x20000a34

08001260 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <I2C1_IRQHandler+0x2c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699a      	ldr	r2, [r3, #24]
 800126a:	23e0      	movs	r3, #224	@ 0xe0
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4013      	ands	r3, r2
 8001270:	d004      	beq.n	800127c <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <I2C1_IRQHandler+0x2c>)
 8001274:	0018      	movs	r0, r3
 8001276:	f001 fab5 	bl	80027e4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800127a:	e003      	b.n	8001284 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800127c:	4b03      	ldr	r3, [pc, #12]	@ (800128c <I2C1_IRQHandler+0x2c>)
 800127e:	0018      	movs	r0, r3
 8001280:	f001 fa96 	bl	80027b0 <HAL_I2C_EV_IRQHandler>
}
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	2000089c 	.word	0x2000089c

08001290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001298:	4a14      	ldr	r2, [pc, #80]	@ (80012ec <_sbrk+0x5c>)
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <_sbrk+0x60>)
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d102      	bne.n	80012b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ac:	4b11      	ldr	r3, [pc, #68]	@ (80012f4 <_sbrk+0x64>)
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <_sbrk+0x68>)
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b2:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	18d3      	adds	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d207      	bcs.n	80012d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c0:	f00b fd06 	bl	800ccd0 <__errno>
 80012c4:	0003      	movs	r3, r0
 80012c6:	220c      	movs	r2, #12
 80012c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	425b      	negs	r3, r3
 80012ce:	e009      	b.n	80012e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012d6:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	18d2      	adds	r2, r2, r3
 80012de:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <_sbrk+0x64>)
 80012e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012e2:	68fb      	ldr	r3, [r7, #12]
}
 80012e4:	0018      	movs	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b006      	add	sp, #24
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20009000 	.word	0x20009000
 80012f0:	00000400 	.word	0x00000400
 80012f4:	200009e4 	.word	0x200009e4
 80012f8:	20002688 	.word	0x20002688

080012fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <MX_TIM14_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	0018      	movs	r0, r3
 8001312:	231c      	movs	r3, #28
 8001314:	001a      	movs	r2, r3
 8001316:	2100      	movs	r1, #0
 8001318:	f00b fc72 	bl	800cc00 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800131c:	4b1f      	ldr	r3, [pc, #124]	@ (800139c <MX_TIM14_Init+0x94>)
 800131e:	4a20      	ldr	r2, [pc, #128]	@ (80013a0 <MX_TIM14_Init+0x98>)
 8001320:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001322:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <MX_TIM14_Init+0x94>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <MX_TIM14_Init+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800132e:	4b1b      	ldr	r3, [pc, #108]	@ (800139c <MX_TIM14_Init+0x94>)
 8001330:	4a1c      	ldr	r2, [pc, #112]	@ (80013a4 <MX_TIM14_Init+0x9c>)
 8001332:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <MX_TIM14_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_TIM14_Init+0x94>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <MX_TIM14_Init+0x94>)
 8001342:	0018      	movs	r0, r3
 8001344:	f003 fcfc 	bl	8004d40 <HAL_TIM_Base_Init>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800134c:	f7ff fdfc 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_TIM14_Init+0x94>)
 8001352:	0018      	movs	r0, r3
 8001354:	f003 fda2 	bl	8004e9c <HAL_TIM_PWM_Init>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800135c:	f7ff fdf4 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2260      	movs	r2, #96	@ 0x60
 8001364:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001378:	1d39      	adds	r1, r7, #4
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <MX_TIM14_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	0018      	movs	r0, r3
 8001380:	f003 fef4 	bl	800516c <HAL_TIM_PWM_ConfigChannel>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001388:	f7ff fdde 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <MX_TIM14_Init+0x94>)
 800138e:	0018      	movs	r0, r3
 8001390:	f000 f870 	bl	8001474 <HAL_TIM_MspPostInit>

}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b008      	add	sp, #32
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200009e8 	.word	0x200009e8
 80013a0:	40002000 	.word	0x40002000
 80013a4:	0000ffff 	.word	0x0000ffff

080013a8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_TIM16_Init+0x44>)
 80013ae:	4a10      	ldr	r2, [pc, #64]	@ (80013f0 <MX_TIM16_Init+0x48>)
 80013b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_TIM16_Init+0x44>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_TIM16_Init+0x44>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 36360-1;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_TIM16_Init+0x44>)
 80013c0:	4a0c      	ldr	r2, [pc, #48]	@ (80013f4 <MX_TIM16_Init+0x4c>)
 80013c2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_TIM16_Init+0x44>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_TIM16_Init+0x44>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_TIM16_Init+0x44>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013d6:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <MX_TIM16_Init+0x44>)
 80013d8:	0018      	movs	r0, r3
 80013da:	f003 fcb1 	bl	8004d40 <HAL_TIM_Base_Init>
 80013de:	1e03      	subs	r3, r0, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80013e2:	f7ff fdb1 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000a34 	.word	0x20000a34
 80013f0:	40014400 	.word	0x40014400
 80013f4:	00008e07 	.word	0x00008e07

080013f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a18      	ldr	r2, [pc, #96]	@ (8001468 <HAL_TIM_Base_MspInit+0x70>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10e      	bne.n	8001428 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <HAL_TIM_Base_MspInit+0x74>)
 800140c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <HAL_TIM_Base_MspInit+0x74>)
 8001410:	2180      	movs	r1, #128	@ 0x80
 8001412:	0209      	lsls	r1, r1, #8
 8001414:	430a      	orrs	r2, r1
 8001416:	641a      	str	r2, [r3, #64]	@ 0x40
 8001418:	4b14      	ldr	r3, [pc, #80]	@ (800146c <HAL_TIM_Base_MspInit+0x74>)
 800141a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800141c:	2380      	movs	r3, #128	@ 0x80
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001426:	e01a      	b.n	800145e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM16)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a10      	ldr	r2, [pc, #64]	@ (8001470 <HAL_TIM_Base_MspInit+0x78>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d115      	bne.n	800145e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <HAL_TIM_Base_MspInit+0x74>)
 8001434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <HAL_TIM_Base_MspInit+0x74>)
 8001438:	2180      	movs	r1, #128	@ 0x80
 800143a:	0289      	lsls	r1, r1, #10
 800143c:	430a      	orrs	r2, r1
 800143e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_TIM_Base_MspInit+0x74>)
 8001442:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001444:	2380      	movs	r3, #128	@ 0x80
 8001446:	029b      	lsls	r3, r3, #10
 8001448:	4013      	ands	r3, r2
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2103      	movs	r1, #3
 8001452:	2015      	movs	r0, #21
 8001454:	f000 feb4 	bl	80021c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001458:	2015      	movs	r0, #21
 800145a:	f000 fec6 	bl	80021ea <HAL_NVIC_EnableIRQ>
}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	40002000 	.word	0x40002000
 800146c:	40021000 	.word	0x40021000
 8001470:	40014400 	.word	0x40014400

08001474 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	240c      	movs	r4, #12
 800147e:	193b      	adds	r3, r7, r4
 8001480:	0018      	movs	r0, r3
 8001482:	2314      	movs	r3, #20
 8001484:	001a      	movs	r2, r3
 8001486:	2100      	movs	r1, #0
 8001488:	f00b fbba 	bl	800cc00 <memset>
  if(timHandle->Instance==TIM14)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <HAL_TIM_MspPostInit+0x70>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d122      	bne.n	80014dc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <HAL_TIM_MspPostInit+0x74>)
 8001498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <HAL_TIM_MspPostInit+0x74>)
 800149c:	2104      	movs	r1, #4
 800149e:	430a      	orrs	r2, r1
 80014a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_TIM_MspPostInit+0x74>)
 80014a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014a6:	2204      	movs	r2, #4
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ae:	193b      	adds	r3, r7, r4
 80014b0:	2280      	movs	r2, #128	@ 0x80
 80014b2:	0152      	lsls	r2, r2, #5
 80014b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	0021      	movs	r1, r4
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2202      	movs	r2, #2
 80014bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	2202      	movs	r2, #2
 80014ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	4a06      	ldr	r2, [pc, #24]	@ (80014ec <HAL_TIM_MspPostInit+0x78>)
 80014d4:	0019      	movs	r1, r3
 80014d6:	0010      	movs	r0, r2
 80014d8:	f000 ff0e 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80014dc:	46c0      	nop			@ (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b009      	add	sp, #36	@ 0x24
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	40002000 	.word	0x40002000
 80014e8:	40021000 	.word	0x40021000
 80014ec:	50000800 	.word	0x50000800

080014f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f4:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 80014f6:	4a24      	ldr	r2, [pc, #144]	@ (8001588 <MX_USART1_UART_Init+0x98>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fa:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 80014fc:	22e1      	movs	r2, #225	@ 0xe1
 80014fe:	0252      	lsls	r2, r2, #9
 8001500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b1a      	ldr	r3, [pc, #104]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 800153a:	0018      	movs	r0, r3
 800153c:	f004 fa96 	bl	8005a6c <HAL_UART_Init>
 8001540:	1e03      	subs	r3, r0, #0
 8001542:	d001      	beq.n	8001548 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001544:	f7ff fd00 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001548:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 800154a:	2100      	movs	r1, #0
 800154c:	0018      	movs	r0, r3
 800154e:	f004 ff99 	bl	8006484 <HAL_UARTEx_SetTxFifoThreshold>
 8001552:	1e03      	subs	r3, r0, #0
 8001554:	d001      	beq.n	800155a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001556:	f7ff fcf7 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 800155c:	2100      	movs	r1, #0
 800155e:	0018      	movs	r0, r3
 8001560:	f004 ffd0 	bl	8006504 <HAL_UARTEx_SetRxFifoThreshold>
 8001564:	1e03      	subs	r3, r0, #0
 8001566:	d001      	beq.n	800156c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001568:	f7ff fcee 	bl	8000f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <MX_USART1_UART_Init+0x94>)
 800156e:	0018      	movs	r0, r3
 8001570:	f004 ff4e 	bl	8006410 <HAL_UARTEx_DisableFifoMode>
 8001574:	1e03      	subs	r3, r0, #0
 8001576:	d001      	beq.n	800157c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001578:	f7ff fce6 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157c:	46c0      	nop			@ (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	20000a80 	.word	0x20000a80
 8001588:	40013800 	.word	0x40013800

0800158c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b091      	sub	sp, #68	@ 0x44
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	232c      	movs	r3, #44	@ 0x2c
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	0018      	movs	r0, r3
 800159a:	2314      	movs	r3, #20
 800159c:	001a      	movs	r2, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	f00b fb2e 	bl	800cc00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015a4:	2410      	movs	r4, #16
 80015a6:	193b      	adds	r3, r7, r4
 80015a8:	0018      	movs	r0, r3
 80015aa:	231c      	movs	r3, #28
 80015ac:	001a      	movs	r2, r3
 80015ae:	2100      	movs	r1, #0
 80015b0:	f00b fb26 	bl	800cc00 <memset>
  if(uartHandle->Instance==USART1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <HAL_UART_MspInit+0xb8>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d13d      	bne.n	800163a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015be:	193b      	adds	r3, r7, r4
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ca:	193b      	adds	r3, r7, r4
 80015cc:	0018      	movs	r0, r3
 80015ce:	f002 fd13 	bl	8003ff8 <HAL_RCCEx_PeriphCLKConfig>
 80015d2:	1e03      	subs	r3, r0, #0
 80015d4:	d001      	beq.n	80015da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015d6:	f7ff fcb7 	bl	8000f48 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015da:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_UART_MspInit+0xbc>)
 80015dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <HAL_UART_MspInit+0xbc>)
 80015e0:	2180      	movs	r1, #128	@ 0x80
 80015e2:	01c9      	lsls	r1, r1, #7
 80015e4:	430a      	orrs	r2, r1
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_UART_MspInit+0xbc>)
 80015ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	01db      	lsls	r3, r3, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <HAL_UART_MspInit+0xbc>)
 80015f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015fa:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <HAL_UART_MspInit+0xbc>)
 80015fc:	2104      	movs	r1, #4
 80015fe:	430a      	orrs	r2, r1
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_UART_MspInit+0xbc>)
 8001604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001606:	2204      	movs	r2, #4
 8001608:	4013      	ands	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800160e:	212c      	movs	r1, #44	@ 0x2c
 8001610:	187b      	adds	r3, r7, r1
 8001612:	2230      	movs	r2, #48	@ 0x30
 8001614:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	187b      	adds	r3, r7, r1
 8001618:	2202      	movs	r2, #2
 800161a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	187b      	adds	r3, r7, r1
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2200      	movs	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001628:	187b      	adds	r3, r7, r1
 800162a:	2201      	movs	r2, #1
 800162c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	187b      	adds	r3, r7, r1
 8001630:	4a06      	ldr	r2, [pc, #24]	@ (800164c <HAL_UART_MspInit+0xc0>)
 8001632:	0019      	movs	r1, r3
 8001634:	0010      	movs	r0, r2
 8001636:	f000 fe5f 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800163a:	46c0      	nop			@ (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b011      	add	sp, #68	@ 0x44
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	40013800 	.word	0x40013800
 8001648:	40021000 	.word	0x40021000
 800164c:	50000800 	.word	0x50000800

08001650 <PrintOutputBuffer>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void PrintOutputBuffer(uint8_t *OutputBuffer){
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	uint32_t StringLength;
	HAL_StatusTypeDef HALStatus;

	for (StringLength = 0; *(OutputBuffer+StringLength); StringLength++);
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e002      	b.n	8001664 <PrintOutputBuffer+0x14>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	3301      	adds	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1f6      	bne.n	800165e <PrintOutputBuffer+0xe>

	HALStatus = HAL_UART_Transmit(&huart1, OutputBuffer, StringLength, HAL_MAX_DELAY);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	b29a      	uxth	r2, r3
 8001674:	250b      	movs	r5, #11
 8001676:	197c      	adds	r4, r7, r5
 8001678:	2301      	movs	r3, #1
 800167a:	425b      	negs	r3, r3
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4807      	ldr	r0, [pc, #28]	@ (800169c <PrintOutputBuffer+0x4c>)
 8001680:	f004 fa4a 	bl	8005b18 <HAL_UART_Transmit>
 8001684:	0003      	movs	r3, r0
 8001686:	7023      	strb	r3, [r4, #0]

	if (HALStatus != HAL_OK){
 8001688:	197b      	adds	r3, r7, r5
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <PrintOutputBuffer+0x44>
		Error_Handler();
 8001690:	f7ff fc5a 	bl	8000f48 <Error_Handler>
	}
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b004      	add	sp, #16
 800169a:	bdb0      	pop	{r4, r5, r7, pc}
 800169c:	20000a80 	.word	0x20000a80

080016a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016a0:	480d      	ldr	r0, [pc, #52]	@ (80016d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016a4:	f7ff fe2a 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a8:	480c      	ldr	r0, [pc, #48]	@ (80016dc <LoopForever+0x6>)
  ldr r1, =_edata
 80016aa:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016ac:	4a0d      	ldr	r2, [pc, #52]	@ (80016e4 <LoopForever+0xe>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b0:	e002      	b.n	80016b8 <LoopCopyDataInit>

080016b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b6:	3304      	adds	r3, #4

080016b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016bc:	d3f9      	bcc.n	80016b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016c0:	4c0a      	ldr	r4, [pc, #40]	@ (80016ec <LoopForever+0x16>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c4:	e001      	b.n	80016ca <LoopFillZerobss>

080016c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c8:	3204      	adds	r2, #4

080016ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016cc:	d3fb      	bcc.n	80016c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016ce:	f00b fb05 	bl	800ccdc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016d2:	f7ff f963 	bl	800099c <main>

080016d6 <LoopForever>:

LoopForever:
  b LoopForever
 80016d6:	e7fe      	b.n	80016d6 <LoopForever>
  ldr   r0, =_estack
 80016d8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e0:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80016e4:	0800d920 	.word	0x0800d920
  ldr r2, =_sbss
 80016e8:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80016ec:	20002684 	.word	0x20002684

080016f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016f0:	e7fe      	b.n	80016f0 <ADC1_IRQHandler>
	...

080016f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016fa:	1dfb      	adds	r3, r7, #7
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_Init+0x3c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <HAL_Init+0x3c>)
 8001706:	2180      	movs	r1, #128	@ 0x80
 8001708:	0049      	lsls	r1, r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800170e:	2003      	movs	r0, #3
 8001710:	f7ff fcf8 	bl	8001104 <HAL_InitTick>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d003      	beq.n	8001720 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001718:	1dfb      	adds	r3, r7, #7
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
 800171e:	e001      	b.n	8001724 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff fcc6 	bl	80010b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001724:	1dfb      	adds	r3, r7, #7
 8001726:	781b      	ldrb	r3, [r3, #0]
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40022000 	.word	0x40022000

08001734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001738:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_IncTick+0x1c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	001a      	movs	r2, r3
 800173e:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_IncTick+0x20>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	18d2      	adds	r2, r2, r3
 8001744:	4b03      	ldr	r3, [pc, #12]	@ (8001754 <HAL_IncTick+0x20>)
 8001746:	601a      	str	r2, [r3, #0]
}
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	200000c8 	.word	0x200000c8
 8001754:	20000b14 	.word	0x20000b14

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b02      	ldr	r3, [pc, #8]	@ (8001768 <HAL_GetTick+0x10>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	20000b14 	.word	0x20000b14

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fff0 	bl	8001758 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	001a      	movs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	189b      	adds	r3, r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	f7ff ffe0 	bl	8001758 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	200000c8 	.word	0x200000c8

080017b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80017c4:	401a      	ands	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	fe3fffff 	.word	0xfe3fffff

080017dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	23e0      	movs	r3, #224	@ 0xe0
 80017ea:	045b      	lsls	r3, r3, #17
 80017ec:	4013      	ands	r3, r2
}
 80017ee:	0018      	movs	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	2104      	movs	r1, #4
 800180a:	400a      	ands	r2, r1
 800180c:	2107      	movs	r1, #7
 800180e:	4091      	lsls	r1, r2
 8001810:	000a      	movs	r2, r1
 8001812:	43d2      	mvns	r2, r2
 8001814:	401a      	ands	r2, r3
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2104      	movs	r1, #4
 800181a:	400b      	ands	r3, r1
 800181c:	6879      	ldr	r1, [r7, #4]
 800181e:	4099      	lsls	r1, r3
 8001820:	000b      	movs	r3, r1
 8001822:	431a      	orrs	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}

08001830 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	2104      	movs	r1, #4
 8001842:	400a      	ands	r2, r1
 8001844:	2107      	movs	r1, #7
 8001846:	4091      	lsls	r1, r2
 8001848:	000a      	movs	r2, r1
 800184a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2104      	movs	r1, #4
 8001850:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001852:	40da      	lsrs	r2, r3
 8001854:	0013      	movs	r3, r2
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b002      	add	sp, #8
 800185c:	bd80      	pop	{r7, pc}

0800185e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	211f      	movs	r1, #31
 8001872:	400a      	ands	r2, r1
 8001874:	210f      	movs	r1, #15
 8001876:	4091      	lsls	r1, r2
 8001878:	000a      	movs	r2, r1
 800187a:	43d2      	mvns	r2, r2
 800187c:	401a      	ands	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0e9b      	lsrs	r3, r3, #26
 8001882:	210f      	movs	r1, #15
 8001884:	4019      	ands	r1, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	201f      	movs	r0, #31
 800188a:	4003      	ands	r3, r0
 800188c:	4099      	lsls	r1, r3
 800188e:	000b      	movs	r3, r1
 8001890:	431a      	orrs	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001896:	46c0      	nop			@ (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bd80      	pop	{r7, pc}

0800189e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	035b      	lsls	r3, r3, #13
 80018b0:	0b5b      	lsrs	r3, r3, #13
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018b8:	46c0      	nop			@ (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b002      	add	sp, #8
 80018be:	bd80      	pop	{r7, pc}

080018c0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	0352      	lsls	r2, r2, #13
 80018d2:	0b52      	lsrs	r2, r2, #13
 80018d4:	43d2      	mvns	r2, r2
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018dc:	46c0      	nop			@ (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	0212      	lsls	r2, r2, #8
 80018f8:	43d2      	mvns	r2, r2
 80018fa:	401a      	ands	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	400b      	ands	r3, r1
 8001904:	4904      	ldr	r1, [pc, #16]	@ (8001918 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001906:	400b      	ands	r3, r1
 8001908:	431a      	orrs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b004      	add	sp, #16
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	07ffff00 	.word	0x07ffff00

0800191c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <LL_ADC_EnableInternalRegulator+0x24>)
 800192a:	4013      	ands	r3, r2
 800192c:	2280      	movs	r2, #128	@ 0x80
 800192e:	0552      	lsls	r2, r2, #21
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	6fffffe8 	.word	0x6fffffe8

08001944 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	055b      	lsls	r3, r3, #21
 8001954:	401a      	ands	r2, r3
 8001956:	2380      	movs	r3, #128	@ 0x80
 8001958:	055b      	lsls	r3, r3, #21
 800195a:	429a      	cmp	r2, r3
 800195c:	d101      	bne.n	8001962 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001962:	2300      	movs	r3, #0
}
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}

0800196c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <LL_ADC_IsEnabled+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_ADC_IsEnabled+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}

0800198e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d101      	bne.n	80019a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	231f      	movs	r3, #31
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e17f      	b.n	8001cd6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10a      	bne.n	80019f4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7fe fd7b 	bl	80004dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2254      	movs	r2, #84	@ 0x54
 80019f0:	2100      	movs	r1, #0
 80019f2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff ffa3 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 80019fe:	1e03      	subs	r3, r0, #0
 8001a00:	d115      	bne.n	8001a2e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7ff ff88 	bl	800191c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a0c:	4bb4      	ldr	r3, [pc, #720]	@ (8001ce0 <HAL_ADC_Init+0x330>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	49b4      	ldr	r1, [pc, #720]	@ (8001ce4 <HAL_ADC_Init+0x334>)
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7fe fb82 	bl	800011c <__udivsi3>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff ff86 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001a38:	1e03      	subs	r3, r0, #0
 8001a3a:	d10f      	bne.n	8001a5c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	2210      	movs	r2, #16
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a54:	231f      	movs	r3, #31
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff ff94 	bl	800198e <LL_ADC_REG_IsConversionOngoing>
 8001a66:	0003      	movs	r3, r0
 8001a68:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6e:	2210      	movs	r2, #16
 8001a70:	4013      	ands	r3, r2
 8001a72:	d000      	beq.n	8001a76 <HAL_ADC_Init+0xc6>
 8001a74:	e122      	b.n	8001cbc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d000      	beq.n	8001a7e <HAL_ADC_Init+0xce>
 8001a7c:	e11e      	b.n	8001cbc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a82:	4a99      	ldr	r2, [pc, #612]	@ (8001ce8 <HAL_ADC_Init+0x338>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	2202      	movs	r2, #2
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7ff ff6a 	bl	800196c <LL_ADC_IsEnabled>
 8001a98:	1e03      	subs	r3, r0, #0
 8001a9a:	d000      	beq.n	8001a9e <HAL_ADC_Init+0xee>
 8001a9c:	e0ad      	b.n	8001bfa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7e1b      	ldrb	r3, [r3, #24]
 8001aa6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001aa8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7e5b      	ldrb	r3, [r3, #25]
 8001aae:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ab0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7e9b      	ldrb	r3, [r3, #26]
 8001ab6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ab8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <HAL_ADC_Init+0x118>
 8001ac2:	2380      	movs	r3, #128	@ 0x80
 8001ac4:	015b      	lsls	r3, r3, #5
 8001ac6:	e000      	b.n	8001aca <HAL_ADC_Init+0x11a>
 8001ac8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001aca:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ad0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da04      	bge.n	8001ae4 <HAL_ADC_Init+0x134>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	e001      	b.n	8001ae8 <HAL_ADC_Init+0x138>
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001ae8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	212c      	movs	r1, #44	@ 0x2c
 8001aee:	5c5b      	ldrb	r3, [r3, r1]
 8001af0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001af2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2220      	movs	r2, #32
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d115      	bne.n	8001b30 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7e9b      	ldrb	r3, [r3, #26]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	0252      	lsls	r2, r2, #9
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e00b      	b.n	8001b30 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00a      	beq.n	8001b4e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3c:	23e0      	movs	r3, #224	@ 0xe0
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b46:	4313      	orrs	r3, r2
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4a65      	ldr	r2, [pc, #404]	@ (8001cec <HAL_ADC_Init+0x33c>)
 8001b56:	4013      	ands	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	0f9b      	lsrs	r3, r3, #30
 8001b6a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b70:	4313      	orrs	r3, r2
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	223c      	movs	r2, #60	@ 0x3c
 8001b7c:	5c9b      	ldrb	r3, [r3, r2]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d111      	bne.n	8001ba6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0f9b      	lsrs	r3, r3, #30
 8001b88:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b8e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001b94:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001b9a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	4a50      	ldr	r2, [pc, #320]	@ (8001cf0 <HAL_ADC_Init+0x340>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	23c0      	movs	r3, #192	@ 0xc0
 8001bc2:	061b      	lsls	r3, r3, #24
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d018      	beq.n	8001bfa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	05db      	lsls	r3, r3, #23
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d012      	beq.n	8001bfa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	061b      	lsls	r3, r3, #24
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d00c      	beq.n	8001bfa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001be0:	4b44      	ldr	r3, [pc, #272]	@ (8001cf4 <HAL_ADC_Init+0x344>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a44      	ldr	r2, [pc, #272]	@ (8001cf8 <HAL_ADC_Init+0x348>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	23f0      	movs	r3, #240	@ 0xf0
 8001bf0:	039b      	lsls	r3, r3, #14
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cf4 <HAL_ADC_Init+0x344>)
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c02:	001a      	movs	r2, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	f7ff fdf6 	bl	80017f6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c12:	493a      	ldr	r1, [pc, #232]	@ (8001cfc <HAL_ADC_Init+0x34c>)
 8001c14:	001a      	movs	r2, r3
 8001c16:	f7ff fdee 	bl	80017f6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2110      	movs	r1, #16
 8001c2e:	4249      	negs	r1, r1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c34:	e018      	b.n	8001c68 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	039b      	lsls	r3, r3, #14
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d112      	bne.n	8001c68 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69db      	ldr	r3, [r3, #28]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	221c      	movs	r2, #28
 8001c52:	4013      	ands	r3, r2
 8001c54:	2210      	movs	r2, #16
 8001c56:	4252      	negs	r2, r2
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	0011      	movs	r1, r2
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7ff fdde 	bl	8001830 <LL_ADC_GetSamplingTimeCommonChannels>
 8001c74:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d10b      	bne.n	8001c96 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c88:	2203      	movs	r2, #3
 8001c8a:	4393      	bics	r3, r2
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c94:	e01c      	b.n	8001cd0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9a:	2212      	movs	r2, #18
 8001c9c:	4393      	bics	r3, r2
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001caa:	2201      	movs	r2, #1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001cb2:	231f      	movs	r3, #31
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cba:	e009      	b.n	8001cd0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	2210      	movs	r2, #16
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001cc8:	231f      	movs	r3, #31
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001cd0:	231f      	movs	r3, #31
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
}
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	b008      	add	sp, #32
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	200000c0 	.word	0x200000c0
 8001ce4:	00030d40 	.word	0x00030d40
 8001ce8:	fffffefd 	.word	0xfffffefd
 8001cec:	ffde0201 	.word	0xffde0201
 8001cf0:	1ffffc02 	.word	0x1ffffc02
 8001cf4:	40012708 	.word	0x40012708
 8001cf8:	ffc3ffff 	.word	0xffc3ffff
 8001cfc:	07ffff04 	.word	0x07ffff04

08001d00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0a:	2317      	movs	r3, #23
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2254      	movs	r2, #84	@ 0x54
 8001d1a:	5c9b      	ldrb	r3, [r3, r2]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x24>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e1c0      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x3a6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2254      	movs	r2, #84	@ 0x54
 8001d28:	2101      	movs	r1, #1
 8001d2a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fe2c 	bl	800198e <LL_ADC_REG_IsConversionOngoing>
 8001d36:	1e03      	subs	r3, r0, #0
 8001d38:	d000      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x3c>
 8001d3a:	e1a3      	b.n	8002084 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d100      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x46>
 8001d44:	e143      	b.n	8001fce <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d004      	beq.n	8001d5c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d56:	4ac1      	ldr	r2, [pc, #772]	@ (800205c <HAL_ADC_ConfigChannel+0x35c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d108      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	0019      	movs	r1, r3
 8001d66:	0010      	movs	r0, r2
 8001d68:	f7ff fd99 	bl	800189e <LL_ADC_REG_SetSequencerChAdd>
 8001d6c:	e0c9      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	211f      	movs	r1, #31
 8001d78:	400b      	ands	r3, r1
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	4099      	lsls	r1, r3
 8001d7e:	000b      	movs	r3, r1
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4013      	ands	r3, r2
 8001d84:	0019      	movs	r1, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	035b      	lsls	r3, r3, #13
 8001d8c:	0b5b      	lsrs	r3, r3, #13
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x9c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	221f      	movs	r2, #31
 8001d98:	4013      	ands	r3, r2
 8001d9a:	e098      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	d000      	beq.n	8001da8 <HAL_ADC_ConfigChannel+0xa8>
 8001da6:	e091      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x1cc>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d000      	beq.n	8001db4 <HAL_ADC_ConfigChannel+0xb4>
 8001db2:	e089      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x1c8>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d000      	beq.n	8001dc0 <HAL_ADC_ConfigChannel+0xc0>
 8001dbe:	e081      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1c4>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2208      	movs	r2, #8
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d000      	beq.n	8001dcc <HAL_ADC_ConfigChannel+0xcc>
 8001dca:	e079      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1c0>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d000      	beq.n	8001dd8 <HAL_ADC_ConfigChannel+0xd8>
 8001dd6:	e071      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1bc>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	4013      	ands	r3, r2
 8001de0:	d000      	beq.n	8001de4 <HAL_ADC_ConfigChannel+0xe4>
 8001de2:	e069      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x1b8>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2240      	movs	r2, #64	@ 0x40
 8001dea:	4013      	ands	r3, r2
 8001dec:	d000      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0xf0>
 8001dee:	e061      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1b4>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2280      	movs	r2, #128	@ 0x80
 8001df6:	4013      	ands	r3, r2
 8001df8:	d000      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0xfc>
 8001dfa:	e059      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x1b0>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4013      	ands	r3, r2
 8001e06:	d151      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x1ac>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4013      	ands	r3, r2
 8001e12:	d149      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x1a8>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d141      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1a4>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d139      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1a0>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	015b      	lsls	r3, r3, #5
 8001e34:	4013      	ands	r3, r2
 8001e36:	d131      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x19c>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	2380      	movs	r3, #128	@ 0x80
 8001e3e:	019b      	lsls	r3, r3, #6
 8001e40:	4013      	ands	r3, r2
 8001e42:	d129      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x198>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	01db      	lsls	r3, r3, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d121      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x194>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d119      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x190>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	@ 0x80
 8001e62:	025b      	lsls	r3, r3, #9
 8001e64:	4013      	ands	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x18c>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	4013      	ands	r3, r2
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x188>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	02db      	lsls	r3, r3, #11
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d001      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x184>
 8001e80:	2312      	movs	r3, #18
 8001e82:	e024      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e84:	2300      	movs	r3, #0
 8001e86:	e022      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e88:	2311      	movs	r3, #17
 8001e8a:	e020      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	e01e      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e90:	230f      	movs	r3, #15
 8001e92:	e01c      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e94:	230e      	movs	r3, #14
 8001e96:	e01a      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e98:	230d      	movs	r3, #13
 8001e9a:	e018      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	e016      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ea0:	230b      	movs	r3, #11
 8001ea2:	e014      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	e012      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ea8:	2309      	movs	r3, #9
 8001eaa:	e010      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001eac:	2308      	movs	r3, #8
 8001eae:	e00e      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	e00c      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001eb4:	2306      	movs	r3, #6
 8001eb6:	e00a      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001eb8:	2305      	movs	r3, #5
 8001eba:	e008      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e006      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e004      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e002      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e000      	b.n	8001ece <HAL_ADC_ConfigChannel+0x1ce>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	6852      	ldr	r2, [r2, #4]
 8001ed2:	201f      	movs	r0, #31
 8001ed4:	4002      	ands	r2, r0
 8001ed6:	4093      	lsls	r3, r2
 8001ed8:	000a      	movs	r2, r1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	089b      	lsrs	r3, r3, #2
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d808      	bhi.n	8001f02 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6818      	ldr	r0, [r3, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	001a      	movs	r2, r3
 8001efe:	f7ff fcae 	bl	800185e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	001a      	movs	r2, r3
 8001f10:	f7ff fce8 	bl	80018e4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	db00      	blt.n	8001f1e <HAL_ADC_ConfigChannel+0x21e>
 8001f1c:	e0bc      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f1e:	4b50      	ldr	r3, [pc, #320]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff fc5b 	bl	80017dc <LL_ADC_GetCommonPathInternalCh>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8002064 <HAL_ADC_ConfigChannel+0x364>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d122      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	041b      	lsls	r3, r3, #16
 8001f3a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f3c:	d11d      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2280      	movs	r2, #128	@ 0x80
 8001f42:	0412      	lsls	r2, r2, #16
 8001f44:	4313      	orrs	r3, r2
 8001f46:	4a46      	ldr	r2, [pc, #280]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001f48:	0019      	movs	r1, r3
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	f7ff fc32 	bl	80017b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f50:	4b45      	ldr	r3, [pc, #276]	@ (8002068 <HAL_ADC_ConfigChannel+0x368>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4945      	ldr	r1, [pc, #276]	@ (800206c <HAL_ADC_ConfigChannel+0x36c>)
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7fe f8e0 	bl	800011c <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	0013      	movs	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	189b      	adds	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f6a:	e002      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f78:	e08e      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8002070 <HAL_ADC_ConfigChannel+0x370>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d10e      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	2380      	movs	r3, #128	@ 0x80
 8001f88:	045b      	lsls	r3, r3, #17
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d109      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2280      	movs	r2, #128	@ 0x80
 8001f92:	0452      	lsls	r2, r2, #17
 8001f94:	4313      	orrs	r3, r2
 8001f96:	4a32      	ldr	r2, [pc, #200]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001f98:	0019      	movs	r1, r3
 8001f9a:	0010      	movs	r0, r2
 8001f9c:	f7ff fc0a 	bl	80017b4 <LL_ADC_SetCommonPathInternalCh>
 8001fa0:	e07a      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a33      	ldr	r2, [pc, #204]	@ (8002074 <HAL_ADC_ConfigChannel+0x374>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d000      	beq.n	8001fae <HAL_ADC_ConfigChannel+0x2ae>
 8001fac:	e074      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	03db      	lsls	r3, r3, #15
 8001fb4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fb6:	d000      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x2ba>
 8001fb8:	e06e      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2280      	movs	r2, #128	@ 0x80
 8001fbe:	03d2      	lsls	r2, r2, #15
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	4a27      	ldr	r2, [pc, #156]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	0010      	movs	r0, r2
 8001fc8:	f7ff fbf4 	bl	80017b4 <LL_ADC_SetCommonPathInternalCh>
 8001fcc:	e064      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fde:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_ADC_ConfigChannel+0x35c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d107      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0019      	movs	r1, r3
 8001fee:	0010      	movs	r0, r2
 8001ff0:	f7ff fc66 	bl	80018c0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da4d      	bge.n	8002098 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ffc:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7ff fbec 	bl	80017dc <LL_ADC_GetCommonPathInternalCh>
 8002004:	0003      	movs	r3, r0
 8002006:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a15      	ldr	r2, [pc, #84]	@ (8002064 <HAL_ADC_ConfigChannel+0x364>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d108      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <HAL_ADC_ConfigChannel+0x378>)
 8002016:	4013      	ands	r3, r2
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 800201a:	0019      	movs	r1, r3
 800201c:	0010      	movs	r0, r2
 800201e:	f7ff fbc9 	bl	80017b4 <LL_ADC_SetCommonPathInternalCh>
 8002022:	e039      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <HAL_ADC_ConfigChannel+0x370>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4a12      	ldr	r2, [pc, #72]	@ (800207c <HAL_ADC_ConfigChannel+0x37c>)
 8002032:	4013      	ands	r3, r2
 8002034:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8002036:	0019      	movs	r1, r3
 8002038:	0010      	movs	r0, r2
 800203a:	f7ff fbbb 	bl	80017b4 <LL_ADC_SetCommonPathInternalCh>
 800203e:	e02b      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <HAL_ADC_ConfigChannel+0x374>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d126      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4a0c      	ldr	r2, [pc, #48]	@ (8002080 <HAL_ADC_ConfigChannel+0x380>)
 800204e:	4013      	ands	r3, r2
 8002050:	4a03      	ldr	r2, [pc, #12]	@ (8002060 <HAL_ADC_ConfigChannel+0x360>)
 8002052:	0019      	movs	r1, r3
 8002054:	0010      	movs	r0, r2
 8002056:	f7ff fbad 	bl	80017b4 <LL_ADC_SetCommonPathInternalCh>
 800205a:	e01d      	b.n	8002098 <HAL_ADC_ConfigChannel+0x398>
 800205c:	80000004 	.word	0x80000004
 8002060:	40012708 	.word	0x40012708
 8002064:	b0001000 	.word	0xb0001000
 8002068:	200000c0 	.word	0x200000c0
 800206c:	00030d40 	.word	0x00030d40
 8002070:	b8004000 	.word	0xb8004000
 8002074:	b4002000 	.word	0xb4002000
 8002078:	ff7fffff 	.word	0xff7fffff
 800207c:	feffffff 	.word	0xfeffffff
 8002080:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	2220      	movs	r2, #32
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002090:	2317      	movs	r3, #23
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2254      	movs	r2, #84	@ 0x54
 800209c:	2100      	movs	r1, #0
 800209e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80020a0:	2317      	movs	r3, #23
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	781b      	ldrb	r3, [r3, #0]
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b006      	add	sp, #24
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80020c2:	d809      	bhi.n	80020d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	231f      	movs	r3, #31
 80020cc:	401a      	ands	r2, r3
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_EnableIRQ+0x30>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	4091      	lsls	r1, r2
 80020d4:	000a      	movs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020d8:	46c0      	nop			@ (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	0002      	movs	r2, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80020f8:	d828      	bhi.n	800214c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fa:	4a2f      	ldr	r2, [pc, #188]	@ (80021b8 <__NVIC_SetPriority+0xd4>)
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	33c0      	adds	r3, #192	@ 0xc0
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	589b      	ldr	r3, [r3, r2]
 800210a:	1dfa      	adds	r2, r7, #7
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	0011      	movs	r1, r2
 8002110:	2203      	movs	r2, #3
 8002112:	400a      	ands	r2, r1
 8002114:	00d2      	lsls	r2, r2, #3
 8002116:	21ff      	movs	r1, #255	@ 0xff
 8002118:	4091      	lsls	r1, r2
 800211a:	000a      	movs	r2, r1
 800211c:	43d2      	mvns	r2, r2
 800211e:	401a      	ands	r2, r3
 8002120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	22ff      	movs	r2, #255	@ 0xff
 8002128:	401a      	ands	r2, r3
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	0018      	movs	r0, r3
 8002130:	2303      	movs	r3, #3
 8002132:	4003      	ands	r3, r0
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002138:	481f      	ldr	r0, [pc, #124]	@ (80021b8 <__NVIC_SetPriority+0xd4>)
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b25b      	sxtb	r3, r3
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	430a      	orrs	r2, r1
 8002144:	33c0      	adds	r3, #192	@ 0xc0
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800214a:	e031      	b.n	80021b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800214c:	4a1b      	ldr	r2, [pc, #108]	@ (80021bc <__NVIC_SetPriority+0xd8>)
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	0019      	movs	r1, r3
 8002154:	230f      	movs	r3, #15
 8002156:	400b      	ands	r3, r1
 8002158:	3b08      	subs	r3, #8
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3306      	adds	r3, #6
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1dfa      	adds	r2, r7, #7
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	0011      	movs	r1, r2
 800216c:	2203      	movs	r2, #3
 800216e:	400a      	ands	r2, r1
 8002170:	00d2      	lsls	r2, r2, #3
 8002172:	21ff      	movs	r1, #255	@ 0xff
 8002174:	4091      	lsls	r1, r2
 8002176:	000a      	movs	r2, r1
 8002178:	43d2      	mvns	r2, r2
 800217a:	401a      	ands	r2, r3
 800217c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	22ff      	movs	r2, #255	@ 0xff
 8002184:	401a      	ands	r2, r3
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	0018      	movs	r0, r3
 800218c:	2303      	movs	r3, #3
 800218e:	4003      	ands	r3, r0
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002194:	4809      	ldr	r0, [pc, #36]	@ (80021bc <__NVIC_SetPriority+0xd8>)
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	001c      	movs	r4, r3
 800219c:	230f      	movs	r3, #15
 800219e:	4023      	ands	r3, r4
 80021a0:	3b08      	subs	r3, #8
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	430a      	orrs	r2, r1
 80021a6:	3306      	adds	r3, #6
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	18c3      	adds	r3, r0, r3
 80021ac:	3304      	adds	r3, #4
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b003      	add	sp, #12
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	210f      	movs	r1, #15
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	1c02      	adds	r2, r0, #0
 80021d0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b25b      	sxtb	r3, r3
 80021da:	0011      	movs	r1, r2
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff ff81 	bl	80020e4 <__NVIC_SetPriority>
}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b004      	add	sp, #16
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	0002      	movs	r2, r0
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f6:	1dfb      	adds	r3, r7, #7
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	b25b      	sxtb	r3, r3
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7ff ff57 	bl	80020b0 <__NVIC_EnableIRQ>
}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b002      	add	sp, #8
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	210f      	movs	r1, #15
 8002216:	187b      	adds	r3, r7, r1
 8002218:	2200      	movs	r2, #0
 800221a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2225      	movs	r2, #37	@ 0x25
 8002220:	5c9b      	ldrb	r3, [r3, r2]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d006      	beq.n	8002236 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2204      	movs	r2, #4
 800222c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e049      	b.n	80022ca <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	210e      	movs	r1, #14
 8002242:	438a      	bics	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	438a      	bics	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002260:	491d      	ldr	r1, [pc, #116]	@ (80022d8 <HAL_DMA_Abort_IT+0xcc>)
 8002262:	400a      	ands	r2, r1
 8002264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002266:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <HAL_DMA_Abort_IT+0xd0>)
 8002268:	6859      	ldr	r1, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	221c      	movs	r2, #28
 8002270:	4013      	ands	r3, r2
 8002272:	2201      	movs	r2, #1
 8002274:	409a      	lsls	r2, r3
 8002276:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_DMA_Abort_IT+0xd0>)
 8002278:	430a      	orrs	r2, r1
 800227a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002284:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002298:	490f      	ldr	r1, [pc, #60]	@ (80022d8 <HAL_DMA_Abort_IT+0xcc>)
 800229a:	400a      	ands	r2, r1
 800229c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80022a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2225      	movs	r2, #37	@ 0x25
 80022ac:	2101      	movs	r1, #1
 80022ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2224      	movs	r2, #36	@ 0x24
 80022b4:	2100      	movs	r1, #0
 80022b6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	0010      	movs	r0, r2
 80022c8:	4798      	blx	r3
    }
  }
  return status;
 80022ca:	230f      	movs	r3, #15
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	781b      	ldrb	r3, [r3, #0]
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	fffffeff 	.word	0xfffffeff
 80022dc:	40020000 	.word	0x40020000

080022e0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2225      	movs	r2, #37	@ 0x25
 80022ec:	5c9b      	ldrb	r3, [r3, r2]
 80022ee:	b2db      	uxtb	r3, r3
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002306:	e147      	b.n	8002598 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4091      	lsls	r1, r2
 8002312:	000a      	movs	r2, r1
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d100      	bne.n	8002320 <HAL_GPIO_Init+0x28>
 800231e:	e138      	b.n	8002592 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	4013      	ands	r3, r2
 8002328:	2b01      	cmp	r3, #1
 800232a:	d005      	beq.n	8002338 <HAL_GPIO_Init+0x40>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	4013      	ands	r3, r2
 8002334:	2b02      	cmp	r3, #2
 8002336:	d130      	bne.n	800239a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	409a      	lsls	r2, r3
 8002346:	0013      	movs	r3, r2
 8002348:	43da      	mvns	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	409a      	lsls	r2, r3
 800235a:	0013      	movs	r3, r2
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800236e:	2201      	movs	r2, #1
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
 8002374:	0013      	movs	r3, r2
 8002376:	43da      	mvns	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	2201      	movs	r2, #1
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2203      	movs	r2, #3
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d017      	beq.n	80023d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	409a      	lsls	r2, r3
 80023b4:	0013      	movs	r3, r2
 80023b6:	43da      	mvns	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	409a      	lsls	r2, r3
 80023c8:	0013      	movs	r3, r2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	4013      	ands	r3, r2
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d123      	bne.n	800242a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	08da      	lsrs	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3208      	adds	r2, #8
 80023ea:	0092      	lsls	r2, r2, #2
 80023ec:	58d3      	ldr	r3, [r2, r3]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2207      	movs	r2, #7
 80023f4:	4013      	ands	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	43da      	mvns	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2107      	movs	r1, #7
 800240e:	400b      	ands	r3, r1
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	409a      	lsls	r2, r3
 8002414:	0013      	movs	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	409a      	lsls	r2, r3
 8002438:	0013      	movs	r3, r2
 800243a:	43da      	mvns	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2203      	movs	r2, #3
 8002448:	401a      	ands	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	23c0      	movs	r3, #192	@ 0xc0
 8002464:	029b      	lsls	r3, r3, #10
 8002466:	4013      	ands	r3, r2
 8002468:	d100      	bne.n	800246c <HAL_GPIO_Init+0x174>
 800246a:	e092      	b.n	8002592 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800246c:	4a50      	ldr	r2, [pc, #320]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	3318      	adds	r3, #24
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	589b      	ldr	r3, [r3, r2]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2203      	movs	r2, #3
 800247e:	4013      	ands	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	220f      	movs	r2, #15
 8002484:	409a      	lsls	r2, r3
 8002486:	0013      	movs	r3, r2
 8002488:	43da      	mvns	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	23a0      	movs	r3, #160	@ 0xa0
 8002494:	05db      	lsls	r3, r3, #23
 8002496:	429a      	cmp	r2, r3
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x1ca>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a45      	ldr	r2, [pc, #276]	@ (80025b4 <HAL_GPIO_Init+0x2bc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x1c6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a44      	ldr	r2, [pc, #272]	@ (80025b8 <HAL_GPIO_Init+0x2c0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x1c2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a43      	ldr	r2, [pc, #268]	@ (80025bc <HAL_GPIO_Init+0x2c4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x1be>
 80024b2:	2303      	movs	r3, #3
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x1cc>
 80024b6:	2305      	movs	r3, #5
 80024b8:	e004      	b.n	80024c4 <HAL_GPIO_Init+0x1cc>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_Init+0x1cc>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_GPIO_Init+0x1cc>
 80024c2:	2300      	movs	r3, #0
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	2103      	movs	r1, #3
 80024c8:	400a      	ands	r2, r1
 80024ca:	00d2      	lsls	r2, r2, #3
 80024cc:	4093      	lsls	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80024d4:	4936      	ldr	r1, [pc, #216]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3318      	adds	r3, #24
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e2:	4b33      	ldr	r3, [pc, #204]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43da      	mvns	r2, r3
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	2380      	movs	r3, #128	@ 0x80
 80024f8:	035b      	lsls	r3, r3, #13
 80024fa:	4013      	ands	r3, r2
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002506:	4b2a      	ldr	r3, [pc, #168]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800250c:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43da      	mvns	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	039b      	lsls	r3, r3, #14
 8002524:	4013      	ands	r3, r2
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002530:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002536:	4a1e      	ldr	r2, [pc, #120]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 8002538:	2384      	movs	r3, #132	@ 0x84
 800253a:	58d3      	ldr	r3, [r2, r3]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	43da      	mvns	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	029b      	lsls	r3, r3, #10
 8002550:	4013      	ands	r3, r2
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4313      	orrs	r3, r2
 800255a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800255c:	4914      	ldr	r1, [pc, #80]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 800255e:	2284      	movs	r2, #132	@ 0x84
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002564:	4a12      	ldr	r2, [pc, #72]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	58d3      	ldr	r3, [r2, r3]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43da      	mvns	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	025b      	lsls	r3, r3, #9
 800257e:	4013      	ands	r3, r2
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800258a:	4909      	ldr	r1, [pc, #36]	@ (80025b0 <HAL_GPIO_Init+0x2b8>)
 800258c:	2280      	movs	r2, #128	@ 0x80
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	40da      	lsrs	r2, r3
 80025a0:	1e13      	subs	r3, r2, #0
 80025a2:	d000      	beq.n	80025a6 <HAL_GPIO_Init+0x2ae>
 80025a4:	e6b0      	b.n	8002308 <HAL_GPIO_Init+0x10>
  }
}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	46c0      	nop			@ (mov r8, r8)
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b006      	add	sp, #24
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021800 	.word	0x40021800
 80025b4:	50000400 	.word	0x50000400
 80025b8:	50000800 	.word	0x50000800
 80025bc:	50000c00 	.word	0x50000c00

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	0008      	movs	r0, r1
 80025ca:	0011      	movs	r1, r2
 80025cc:	1cbb      	adds	r3, r7, #2
 80025ce:	1c02      	adds	r2, r0, #0
 80025d0:	801a      	strh	r2, [r3, #0]
 80025d2:	1c7b      	adds	r3, r7, #1
 80025d4:	1c0a      	adds	r2, r1, #0
 80025d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	1c7b      	adds	r3, r7, #1
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025e0:	1cbb      	adds	r3, r7, #2
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025ea:	1cbb      	adds	r3, r7, #2
 80025ec:	881a      	ldrh	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b002      	add	sp, #8
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	0002      	movs	r2, r0
 8002604:	1dbb      	adds	r3, r7, #6
 8002606:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002608:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	1dba      	adds	r2, r7, #6
 800260e:	8812      	ldrh	r2, [r2, #0]
 8002610:	4013      	ands	r3, r2
 8002612:	d008      	beq.n	8002626 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002614:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002616:	1dba      	adds	r2, r7, #6
 8002618:	8812      	ldrh	r2, [r2, #0]
 800261a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800261c:	1dbb      	adds	r3, r7, #6
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f815 	bl	8002650 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002626:	4b09      	ldr	r3, [pc, #36]	@ (800264c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	1dba      	adds	r2, r7, #6
 800262c:	8812      	ldrh	r2, [r2, #0]
 800262e:	4013      	ands	r3, r2
 8002630:	d008      	beq.n	8002644 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002632:	4b06      	ldr	r3, [pc, #24]	@ (800264c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002634:	1dba      	adds	r2, r7, #6
 8002636:	8812      	ldrh	r2, [r2, #0]
 8002638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800263a:	1dbb      	adds	r3, r7, #6
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	0018      	movs	r0, r3
 8002640:	f7fe fc36 	bl	8000eb0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002644:	46c0      	nop			@ (mov r8, r8)
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40021800 	.word	0x40021800

08002650 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	0002      	movs	r2, r0
 8002658:	1dbb      	adds	r3, r7, #6
 800265a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800265c:	46c0      	nop			@ (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b002      	add	sp, #8
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e08f      	b.n	8002796 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2241      	movs	r2, #65	@ 0x41
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2240      	movs	r2, #64	@ 0x40
 8002686:	2100      	movs	r1, #0
 8002688:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f7fe f91b 	bl	80008c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2241      	movs	r2, #65	@ 0x41
 8002696:	2124      	movs	r1, #36	@ 0x24
 8002698:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2101      	movs	r1, #1
 80026a6:	438a      	bics	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	493b      	ldr	r1, [pc, #236]	@ (80027a0 <HAL_I2C_Init+0x13c>)
 80026b4:	400a      	ands	r2, r1
 80026b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4938      	ldr	r1, [pc, #224]	@ (80027a4 <HAL_I2C_Init+0x140>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d108      	bne.n	80026e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2180      	movs	r1, #128	@ 0x80
 80026da:	0209      	lsls	r1, r1, #8
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	e007      	b.n	80026f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2184      	movs	r1, #132	@ 0x84
 80026ec:	0209      	lsls	r1, r1, #8
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d109      	bne.n	800270e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2180      	movs	r1, #128	@ 0x80
 8002706:	0109      	lsls	r1, r1, #4
 8002708:	430a      	orrs	r2, r1
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	e007      	b.n	800271e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4923      	ldr	r1, [pc, #140]	@ (80027a8 <HAL_I2C_Init+0x144>)
 800271a:	400a      	ands	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4920      	ldr	r1, [pc, #128]	@ (80027ac <HAL_I2C_Init+0x148>)
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	491a      	ldr	r1, [pc, #104]	@ (80027a4 <HAL_I2C_Init+0x140>)
 800273a:	400a      	ands	r2, r1
 800273c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	431a      	orrs	r2, r3
 8002748:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69d9      	ldr	r1, [r3, #28]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1a      	ldr	r2, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2241      	movs	r2, #65	@ 0x41
 8002782:	2120      	movs	r1, #32
 8002784:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2242      	movs	r2, #66	@ 0x42
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b002      	add	sp, #8
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			@ (mov r8, r8)
 80027a0:	f0ffffff 	.word	0xf0ffffff
 80027a4:	ffff7fff 	.word	0xffff7fff
 80027a8:	fffff7ff 	.word	0xfffff7ff
 80027ac:	02008000 	.word	0x02008000

080027b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	68f9      	ldr	r1, [r7, #12]
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
  }
}
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4013      	ands	r3, r2
 8002804:	d00e      	beq.n	8002824 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800280c:	d00a      	beq.n	8002824 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002812:	2201      	movs	r2, #1
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	0052      	lsls	r2, r2, #1
 8002822:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	2380      	movs	r3, #128	@ 0x80
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4013      	ands	r3, r2
 800282c:	d00e      	beq.n	800284c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2280      	movs	r2, #128	@ 0x80
 8002832:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002834:	d00a      	beq.n	800284c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283a:	2208      	movs	r2, #8
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2280      	movs	r2, #128	@ 0x80
 8002848:	00d2      	lsls	r2, r2, #3
 800284a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	2380      	movs	r3, #128	@ 0x80
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d00e      	beq.n	8002874 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2280      	movs	r2, #128	@ 0x80
 800285a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800285c:	d00a      	beq.n	8002874 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	2202      	movs	r2, #2
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2280      	movs	r2, #128	@ 0x80
 8002870:	0092      	lsls	r2, r2, #2
 8002872:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002878:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	220b      	movs	r2, #11
 800287e:	4013      	ands	r3, r2
 8002880:	d005      	beq.n	800288e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f000 fc1d 	bl	80030c8 <I2C_ITError>
  }
}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b006      	add	sp, #24
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	0008      	movs	r0, r1
 80028c0:	0011      	movs	r1, r2
 80028c2:	1cfb      	adds	r3, r7, #3
 80028c4:	1c02      	adds	r2, r0, #0
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	003b      	movs	r3, r7
 80028ca:	1c0a      	adds	r2, r1, #0
 80028cc:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b002      	add	sp, #8
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b002      	add	sp, #8
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2240      	movs	r2, #64	@ 0x40
 8002912:	5c9b      	ldrb	r3, [r3, r2]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <I2C_Slave_ISR_IT+0x24>
 8002918:	2302      	movs	r3, #2
 800291a:	e0e7      	b.n	8002aec <I2C_Slave_ISR_IT+0x1f4>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2240      	movs	r2, #64	@ 0x40
 8002920:	2101      	movs	r1, #1
 8002922:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	d00a      	beq.n	8002942 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002932:	d006      	beq.n	8002942 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	0011      	movs	r1, r2
 800293a:	0018      	movs	r0, r3
 800293c:	f000 f9e4 	bl	8002d08 <I2C_ITSlaveCplt>
 8002940:	e0cf      	b.n	8002ae2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2210      	movs	r2, #16
 8002946:	4013      	ands	r3, r2
 8002948:	d052      	beq.n	80029f0 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2210      	movs	r2, #16
 800294e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002950:	d04e      	beq.n	80029f0 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d12d      	bne.n	80029b8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2241      	movs	r2, #65	@ 0x41
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b28      	cmp	r3, #40	@ 0x28
 8002966:	d10b      	bne.n	8002980 <I2C_Slave_ISR_IT+0x88>
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	2380      	movs	r3, #128	@ 0x80
 800296c:	049b      	lsls	r3, r3, #18
 800296e:	429a      	cmp	r2, r3
 8002970:	d106      	bne.n	8002980 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0011      	movs	r1, r2
 8002978:	0018      	movs	r0, r3
 800297a:	f000 fb4d 	bl	8003018 <I2C_ITListenCplt>
 800297e:	e036      	b.n	80029ee <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2241      	movs	r2, #65	@ 0x41
 8002984:	5c9b      	ldrb	r3, [r3, r2]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b29      	cmp	r3, #41	@ 0x29
 800298a:	d110      	bne.n	80029ae <I2C_Slave_ISR_IT+0xb6>
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	4a59      	ldr	r2, [pc, #356]	@ (8002af4 <I2C_Slave_ISR_IT+0x1fc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00c      	beq.n	80029ae <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2210      	movs	r2, #16
 800299a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 fcbd 	bl	800331e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 f94a 	bl	8002c40 <I2C_ITSlaveSeqCplt>
 80029ac:	e01f      	b.n	80029ee <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2210      	movs	r2, #16
 80029b4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80029b6:	e091      	b.n	8002adc <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2210      	movs	r2, #16
 80029be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c4:	2204      	movs	r2, #4
 80029c6:	431a      	orrs	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <I2C_Slave_ISR_IT+0xe6>
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	045b      	lsls	r3, r3, #17
 80029d8:	429a      	cmp	r2, r3
 80029da:	d000      	beq.n	80029de <I2C_Slave_ISR_IT+0xe6>
 80029dc:	e07e      	b.n	8002adc <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	0011      	movs	r1, r2
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 fb6e 	bl	80030c8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80029ec:	e076      	b.n	8002adc <I2C_Slave_ISR_IT+0x1e4>
 80029ee:	e075      	b.n	8002adc <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	2204      	movs	r2, #4
 80029f4:	4013      	ands	r3, r2
 80029f6:	d02f      	beq.n	8002a58 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2204      	movs	r2, #4
 80029fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029fe:	d02b      	beq.n	8002a58 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d018      	beq.n	8002a3c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d14c      	bne.n	8002ae0 <I2C_Slave_ISR_IT+0x1e8>
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	4a2a      	ldr	r2, [pc, #168]	@ (8002af4 <I2C_Slave_ISR_IT+0x1fc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d048      	beq.n	8002ae0 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f8f5 	bl	8002c40 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a56:	e043      	b.n	8002ae0 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	2208      	movs	r2, #8
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d00a      	beq.n	8002a76 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2208      	movs	r2, #8
 8002a64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a66:	d006      	beq.n	8002a76 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 f842 	bl	8002af8 <I2C_ITAddrCplt>
 8002a74:	e035      	b.n	8002ae2 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d031      	beq.n	8002ae2 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a84:	d02d      	beq.n	8002ae2 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d018      	beq.n	8002ac2 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002ac0:	e00f      	b.n	8002ae2 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	045b      	lsls	r3, r3, #17
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d002      	beq.n	8002ad2 <I2C_Slave_ISR_IT+0x1da>
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d107      	bne.n	8002ae2 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 f8b3 	bl	8002c40 <I2C_ITSlaveSeqCplt>
 8002ada:	e002      	b.n	8002ae2 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8002adc:	46c0      	nop			@ (mov r8, r8)
 8002ade:	e000      	b.n	8002ae2 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8002ae0:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2240      	movs	r2, #64	@ 0x40
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b006      	add	sp, #24
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	ffff0000 	.word	0xffff0000

08002af8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2241      	movs	r2, #65	@ 0x41
 8002b06:	5c9b      	ldrb	r3, [r3, r2]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	001a      	movs	r2, r3
 8002b0c:	2328      	movs	r3, #40	@ 0x28
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b28      	cmp	r3, #40	@ 0x28
 8002b12:	d000      	beq.n	8002b16 <I2C_ITAddrCplt+0x1e>
 8002b14:	e088      	b.n	8002c28 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	250f      	movs	r5, #15
 8002b22:	197b      	adds	r3, r7, r5
 8002b24:	2101      	movs	r1, #1
 8002b26:	400a      	ands	r2, r1
 8002b28:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	0c1b      	lsrs	r3, r3, #16
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	200c      	movs	r0, #12
 8002b36:	183b      	adds	r3, r7, r0
 8002b38:	21fe      	movs	r1, #254	@ 0xfe
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	240a      	movs	r4, #10
 8002b48:	193b      	adds	r3, r7, r4
 8002b4a:	0592      	lsls	r2, r2, #22
 8002b4c:	0d92      	lsrs	r2, r2, #22
 8002b4e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	2308      	movs	r3, #8
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	21fe      	movs	r1, #254	@ 0xfe
 8002b5e:	400a      	ands	r2, r1
 8002b60:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d148      	bne.n	8002bfc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b6a:	0021      	movs	r1, r4
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	09db      	lsrs	r3, r3, #7
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	183b      	adds	r3, r7, r0
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	4053      	eors	r3, r2
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2306      	movs	r3, #6
 8002b80:	4013      	ands	r3, r2
 8002b82:	d120      	bne.n	8002bc6 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002b84:	183b      	adds	r3, r7, r0
 8002b86:	187a      	adds	r2, r7, r1
 8002b88:	8812      	ldrh	r2, [r2, #0]
 8002b8a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d14c      	bne.n	8002c38 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2240      	movs	r2, #64	@ 0x40
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bb4:	183b      	adds	r3, r7, r0
 8002bb6:	881a      	ldrh	r2, [r3, #0]
 8002bb8:	197b      	adds	r3, r7, r5
 8002bba:	7819      	ldrb	r1, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f7ff fe79 	bl	80028b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002bc4:	e038      	b.n	8002c38 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002bc6:	240c      	movs	r4, #12
 8002bc8:	193b      	adds	r3, r7, r4
 8002bca:	2208      	movs	r2, #8
 8002bcc:	18ba      	adds	r2, r7, r2
 8002bce:	8812      	ldrh	r2, [r2, #0]
 8002bd0:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 fbe0 	bl	80033a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2240      	movs	r2, #64	@ 0x40
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	881a      	ldrh	r2, [r3, #0]
 8002bec:	230f      	movs	r3, #15
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	7819      	ldrb	r1, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f7ff fe5e 	bl	80028b6 <HAL_I2C_AddrCallback>
}
 8002bfa:	e01d      	b.n	8002c38 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	021a      	lsls	r2, r3, #8
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	0011      	movs	r1, r2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 fbcb 	bl	80033a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2240      	movs	r2, #64	@ 0x40
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c12:	230c      	movs	r3, #12
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	230f      	movs	r3, #15
 8002c1a:	18fb      	adds	r3, r7, r3
 8002c1c:	7819      	ldrb	r1, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7ff fe48 	bl	80028b6 <HAL_I2C_AddrCallback>
}
 8002c26:	e007      	b.n	8002c38 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2240      	movs	r2, #64	@ 0x40
 8002c34:	2100      	movs	r1, #0
 8002c36:	5499      	strb	r1, [r3, r2]
}
 8002c38:	46c0      	nop			@ (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bdb0      	pop	{r4, r5, r7, pc}

08002c40 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2242      	movs	r2, #66	@ 0x42
 8002c54:	2100      	movs	r1, #0
 8002c56:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	01db      	lsls	r3, r3, #7
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d008      	beq.n	8002c74 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4924      	ldr	r1, [pc, #144]	@ (8002d00 <I2C_ITSlaveSeqCplt+0xc0>)
 8002c6e:	400a      	ands	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e00c      	b.n	8002c8e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	491e      	ldr	r1, [pc, #120]	@ (8002d04 <I2C_ITSlaveSeqCplt+0xc4>)
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2241      	movs	r2, #65	@ 0x41
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b29      	cmp	r3, #41	@ 0x29
 8002c98:	d114      	bne.n	8002cc4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2241      	movs	r2, #65	@ 0x41
 8002c9e:	2128      	movs	r1, #40	@ 0x28
 8002ca0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2221      	movs	r2, #33	@ 0x21
 8002ca6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2101      	movs	r1, #1
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 fb77 	bl	80033a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2240      	movs	r2, #64	@ 0x40
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7ff fdea 	bl	8002896 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002cc2:	e019      	b.n	8002cf8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2241      	movs	r2, #65	@ 0x41
 8002cc8:	5c9b      	ldrb	r3, [r3, r2]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002cce:	d113      	bne.n	8002cf8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2241      	movs	r2, #65	@ 0x41
 8002cd4:	2128      	movs	r1, #40	@ 0x28
 8002cd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2222      	movs	r2, #34	@ 0x22
 8002cdc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2102      	movs	r1, #2
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fb5c 	bl	80033a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2240      	movs	r2, #64	@ 0x40
 8002cec:	2100      	movs	r1, #0
 8002cee:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7ff fdd7 	bl	80028a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002cf8:	46c0      	nop			@ (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	ffffbfff 	.word	0xffffbfff
 8002d04:	ffff7fff 	.word	0xffff7fff

08002d08 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d22:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d24:	200b      	movs	r0, #11
 8002d26:	183b      	adds	r3, r7, r0
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	2141      	movs	r1, #65	@ 0x41
 8002d2c:	5c52      	ldrb	r2, [r2, r1]
 8002d2e:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2220      	movs	r2, #32
 8002d36:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d38:	183b      	adds	r3, r7, r0
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b21      	cmp	r3, #33	@ 0x21
 8002d3e:	d003      	beq.n	8002d48 <I2C_ITSlaveCplt+0x40>
 8002d40:	183b      	adds	r3, r7, r0
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b29      	cmp	r3, #41	@ 0x29
 8002d46:	d109      	bne.n	8002d5c <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002d48:	4aac      	ldr	r2, [pc, #688]	@ (8002ffc <I2C_ITSlaveCplt+0x2f4>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0011      	movs	r1, r2
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fb26 	bl	80033a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2221      	movs	r2, #33	@ 0x21
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d5a:	e020      	b.n	8002d9e <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d5c:	220b      	movs	r2, #11
 8002d5e:	18bb      	adds	r3, r7, r2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b22      	cmp	r3, #34	@ 0x22
 8002d64:	d003      	beq.n	8002d6e <I2C_ITSlaveCplt+0x66>
 8002d66:	18bb      	adds	r3, r7, r2
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d6c:	d109      	bne.n	8002d82 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002d6e:	4aa4      	ldr	r2, [pc, #656]	@ (8003000 <I2C_ITSlaveCplt+0x2f8>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0011      	movs	r1, r2
 8002d74:	0018      	movs	r0, r3
 8002d76:	f000 fb13 	bl	80033a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2222      	movs	r2, #34	@ 0x22
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d80:	e00d      	b.n	8002d9e <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002d82:	230b      	movs	r3, #11
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b28      	cmp	r3, #40	@ 0x28
 8002d8a:	d108      	bne.n	8002d9e <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002d8c:	4a9d      	ldr	r2, [pc, #628]	@ (8003004 <I2C_ITSlaveCplt+0x2fc>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0011      	movs	r1, r2
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 fb04 	bl	80033a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2180      	movs	r1, #128	@ 0x80
 8002daa:	0209      	lsls	r1, r1, #8
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4993      	ldr	r1, [pc, #588]	@ (8003008 <I2C_ITSlaveCplt+0x300>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f000 faab 	bl	800331e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	01db      	lsls	r3, r3, #7
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	498b      	ldr	r1, [pc, #556]	@ (800300c <I2C_ITSlaveCplt+0x304>)
 8002dde:	400a      	ands	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01f      	beq.n	8002e2a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df8:	e017      	b.n	8002e2a <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	2380      	movs	r3, #128	@ 0x80
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	4013      	ands	r3, r2
 8002e02:	d012      	beq.n	8002e2a <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4980      	ldr	r1, [pc, #512]	@ (8003010 <I2C_ITSlaveCplt+0x308>)
 8002e10:	400a      	ands	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d006      	beq.n	8002e2a <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d020      	beq.n	8002e74 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2204      	movs	r2, #4
 8002e36:	4393      	bics	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d005      	beq.n	8002e8a <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	2204      	movs	r2, #4
 8002e84:	431a      	orrs	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d04f      	beq.n	8002f32 <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	2210      	movs	r2, #16
 8002e96:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e98:	d04b      	beq.n	8002f32 <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d12d      	bne.n	8002f00 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2241      	movs	r2, #65	@ 0x41
 8002ea8:	5c9b      	ldrb	r3, [r3, r2]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b28      	cmp	r3, #40	@ 0x28
 8002eae:	d10b      	bne.n	8002ec8 <I2C_ITSlaveCplt+0x1c0>
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	049b      	lsls	r3, r3, #18
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d106      	bne.n	8002ec8 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	0011      	movs	r1, r2
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 f8a9 	bl	8003018 <I2C_ITListenCplt>
 8002ec6:	e034      	b.n	8002f32 <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2241      	movs	r2, #65	@ 0x41
 8002ecc:	5c9b      	ldrb	r3, [r3, r2]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b29      	cmp	r3, #41	@ 0x29
 8002ed2:	d110      	bne.n	8002ef6 <I2C_ITSlaveCplt+0x1ee>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a4f      	ldr	r2, [pc, #316]	@ (8003014 <I2C_ITSlaveCplt+0x30c>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00c      	beq.n	8002ef6 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2210      	movs	r2, #16
 8002ee2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fa19 	bl	800331e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f7ff fea6 	bl	8002c40 <I2C_ITSlaveSeqCplt>
 8002ef4:	e01d      	b.n	8002f32 <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2210      	movs	r2, #16
 8002efc:	61da      	str	r2, [r3, #28]
 8002efe:	e018      	b.n	8002f32 <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d004      	beq.n	8002f24 <I2C_ITSlaveCplt+0x21c>
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	2380      	movs	r3, #128	@ 0x80
 8002f1e:	045b      	lsls	r3, r3, #17
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d106      	bne.n	8002f32 <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	0011      	movs	r1, r2
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 f8cb 	bl	80030c8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2242      	movs	r2, #66	@ 0x42
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	0011      	movs	r1, r2
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 f8b9 	bl	80030c8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2241      	movs	r2, #65	@ 0x41
 8002f5a:	5c9b      	ldrb	r3, [r3, r2]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b28      	cmp	r3, #40	@ 0x28
 8002f60:	d147      	bne.n	8002ff2 <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0011      	movs	r1, r2
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f000 f855 	bl	8003018 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f6e:	e040      	b.n	8002ff2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	4a27      	ldr	r2, [pc, #156]	@ (8003014 <I2C_ITSlaveCplt+0x30c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d016      	beq.n	8002fa8 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f7ff fe5f 	bl	8002c40 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a23      	ldr	r2, [pc, #140]	@ (8003014 <I2C_ITSlaveCplt+0x30c>)
 8002f86:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2241      	movs	r2, #65	@ 0x41
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2240      	movs	r2, #64	@ 0x40
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7ff fc98 	bl	80028d6 <HAL_I2C_ListenCpltCallback>
}
 8002fa6:	e024      	b.n	8002ff2 <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2241      	movs	r2, #65	@ 0x41
 8002fac:	5c9b      	ldrb	r3, [r3, r2]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b22      	cmp	r3, #34	@ 0x22
 8002fb2:	d10f      	bne.n	8002fd4 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2241      	movs	r2, #65	@ 0x41
 8002fb8:	2120      	movs	r1, #32
 8002fba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff fc6a 	bl	80028a6 <HAL_I2C_SlaveRxCpltCallback>
}
 8002fd2:	e00e      	b.n	8002ff2 <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2241      	movs	r2, #65	@ 0x41
 8002fd8:	2120      	movs	r1, #32
 8002fda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2240      	movs	r2, #64	@ 0x40
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7ff fc52 	bl	8002896 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ff2:	46c0      	nop			@ (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			@ (mov r8, r8)
 8002ffc:	00008001 	.word	0x00008001
 8003000:	00008002 	.word	0x00008002
 8003004:	00008003 	.word	0x00008003
 8003008:	fe00e800 	.word	0xfe00e800
 800300c:	ffffbfff 	.word	0xffffbfff
 8003010:	ffff7fff 	.word	0xffff7fff
 8003014:	ffff0000 	.word	0xffff0000

08003018 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a26      	ldr	r2, [pc, #152]	@ (80030c0 <I2C_ITListenCplt+0xa8>)
 8003026:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2241      	movs	r2, #65	@ 0x41
 8003032:	2120      	movs	r1, #32
 8003034:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2242      	movs	r2, #66	@ 0x42
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	2204      	movs	r2, #4
 8003048:	4013      	ands	r3, r2
 800304a:	d022      	beq.n	8003092 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	2204      	movs	r2, #4
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003092:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <I2C_ITListenCplt+0xac>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	0011      	movs	r1, r2
 8003098:	0018      	movs	r0, r3
 800309a:	f000 f981 	bl	80033a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2210      	movs	r2, #16
 80030a4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2240      	movs	r2, #64	@ 0x40
 80030aa:	2100      	movs	r1, #0
 80030ac:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff fc10 	bl	80028d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b002      	add	sp, #8
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			@ (mov r8, r8)
 80030c0:	ffff0000 	.word	0xffff0000
 80030c4:	00008003 	.word	0x00008003

080030c8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030d2:	200f      	movs	r0, #15
 80030d4:	183b      	adds	r3, r7, r0
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	2141      	movs	r1, #65	@ 0x41
 80030da:	5c52      	ldrb	r2, [r2, r1]
 80030dc:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2242      	movs	r2, #66	@ 0x42
 80030e2:	2100      	movs	r1, #0
 80030e4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a72      	ldr	r2, [pc, #456]	@ (80032b4 <I2C_ITError+0x1ec>)
 80030ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80030fe:	183b      	adds	r3, r7, r0
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b28      	cmp	r3, #40	@ 0x28
 8003104:	d007      	beq.n	8003116 <I2C_ITError+0x4e>
 8003106:	183b      	adds	r3, r7, r0
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b29      	cmp	r3, #41	@ 0x29
 800310c:	d003      	beq.n	8003116 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800310e:	183b      	adds	r3, r7, r0
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b2a      	cmp	r3, #42	@ 0x2a
 8003114:	d10c      	bne.n	8003130 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2103      	movs	r1, #3
 800311a:	0018      	movs	r0, r3
 800311c:	f000 f940 	bl	80033a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2241      	movs	r2, #65	@ 0x41
 8003124:	2128      	movs	r1, #40	@ 0x28
 8003126:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a63      	ldr	r2, [pc, #396]	@ (80032b8 <I2C_ITError+0x1f0>)
 800312c:	635a      	str	r2, [r3, #52]	@ 0x34
 800312e:	e032      	b.n	8003196 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003130:	4a62      	ldr	r2, [pc, #392]	@ (80032bc <I2C_ITError+0x1f4>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	0011      	movs	r1, r2
 8003136:	0018      	movs	r0, r3
 8003138:	f000 f932 	bl	80033a0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 f8ed 	bl	800331e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2241      	movs	r2, #65	@ 0x41
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b60      	cmp	r3, #96	@ 0x60
 800314e:	d01f      	beq.n	8003190 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2241      	movs	r2, #65	@ 0x41
 8003154:	2120      	movs	r1, #32
 8003156:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2220      	movs	r2, #32
 8003160:	4013      	ands	r3, r2
 8003162:	2b20      	cmp	r3, #32
 8003164:	d114      	bne.n	8003190 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2210      	movs	r2, #16
 800316e:	4013      	ands	r3, r2
 8003170:	2b10      	cmp	r3, #16
 8003172:	d109      	bne.n	8003188 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2210      	movs	r2, #16
 800317a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003180:	2204      	movs	r2, #4
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d03b      	beq.n	800321c <I2C_ITError+0x154>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b11      	cmp	r3, #17
 80031a8:	d002      	beq.n	80031b0 <I2C_ITError+0xe8>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b21      	cmp	r3, #33	@ 0x21
 80031ae:	d135      	bne.n	800321c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	@ 0x80
 80031b8:	01db      	lsls	r3, r3, #7
 80031ba:	401a      	ands	r2, r3
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	01db      	lsls	r3, r3, #7
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d107      	bne.n	80031d4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	493c      	ldr	r1, [pc, #240]	@ (80032c0 <I2C_ITError+0x1f8>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d8:	0018      	movs	r0, r3
 80031da:	f7ff f881 	bl	80022e0 <HAL_DMA_GetState>
 80031de:	0003      	movs	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d016      	beq.n	8003212 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e8:	4a36      	ldr	r2, [pc, #216]	@ (80032c4 <I2C_ITError+0x1fc>)
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2240      	movs	r2, #64	@ 0x40
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff f807 	bl	800220c <HAL_DMA_Abort_IT>
 80031fe:	1e03      	subs	r3, r0, #0
 8003200:	d051      	beq.n	80032a6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	0018      	movs	r0, r3
 800320e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003210:	e049      	b.n	80032a6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0018      	movs	r0, r3
 8003216:	f000 f859 	bl	80032cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800321a:	e044      	b.n	80032a6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d03b      	beq.n	800329c <I2C_ITError+0x1d4>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b12      	cmp	r3, #18
 8003228:	d002      	beq.n	8003230 <I2C_ITError+0x168>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b22      	cmp	r3, #34	@ 0x22
 800322e:	d135      	bne.n	800329c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	401a      	ands	r2, r3
 800323c:	2380      	movs	r3, #128	@ 0x80
 800323e:	021b      	lsls	r3, r3, #8
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	491e      	ldr	r1, [pc, #120]	@ (80032c8 <I2C_ITError+0x200>)
 8003250:	400a      	ands	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff f841 	bl	80022e0 <HAL_DMA_GetState>
 800325e:	0003      	movs	r3, r0
 8003260:	2b01      	cmp	r3, #1
 8003262:	d016      	beq.n	8003292 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003268:	4a16      	ldr	r2, [pc, #88]	@ (80032c4 <I2C_ITError+0x1fc>)
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2240      	movs	r2, #64	@ 0x40
 8003270:	2100      	movs	r1, #0
 8003272:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003278:	0018      	movs	r0, r3
 800327a:	f7fe ffc7 	bl	800220c <HAL_DMA_Abort_IT>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d013      	beq.n	80032aa <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	0018      	movs	r0, r3
 800328e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003290:	e00b      	b.n	80032aa <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f000 f819 	bl	80032cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800329a:	e006      	b.n	80032aa <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f814 	bl	80032cc <I2C_TreatErrorCallback>
  }
}
 80032a4:	e002      	b.n	80032ac <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	e000      	b.n	80032ac <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032aa:	46c0      	nop			@ (mov r8, r8)
}
 80032ac:	46c0      	nop			@ (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b004      	add	sp, #16
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	ffff0000 	.word	0xffff0000
 80032b8:	080028f9 	.word	0x080028f9
 80032bc:	00008003 	.word	0x00008003
 80032c0:	ffffbfff 	.word	0xffffbfff
 80032c4:	08003363 	.word	0x08003363
 80032c8:	ffff7fff 	.word	0xffff7fff

080032cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2241      	movs	r2, #65	@ 0x41
 80032d8:	5c9b      	ldrb	r3, [r3, r2]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b60      	cmp	r3, #96	@ 0x60
 80032de:	d10f      	bne.n	8003300 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2241      	movs	r2, #65	@ 0x41
 80032e4:	2120      	movs	r1, #32
 80032e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2240      	movs	r2, #64	@ 0x40
 80032f2:	2100      	movs	r1, #0
 80032f4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff faf4 	bl	80028e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032fe:	e00a      	b.n	8003316 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2240      	movs	r2, #64	@ 0x40
 800330a:	2100      	movs	r1, #0
 800330c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f7fd fde3 	bl	8000edc <HAL_I2C_ErrorCallback>
}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b002      	add	sp, #8
 800331c:	bd80      	pop	{r7, pc}

0800331e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2202      	movs	r2, #2
 800332e:	4013      	ands	r3, r2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d103      	bne.n	800333c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2200      	movs	r2, #0
 800333a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2201      	movs	r2, #1
 8003344:	4013      	ands	r3, r2
 8003346:	2b01      	cmp	r3, #1
 8003348:	d007      	beq.n	800335a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2101      	movs	r1, #1
 8003356:	430a      	orrs	r2, r1
 8003358:	619a      	str	r2, [r3, #24]
  }
}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}

08003362 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	2200      	movs	r2, #0
 800337e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	2200      	movs	r2, #0
 800338e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	0018      	movs	r0, r3
 8003394:	f7ff ff9a 	bl	80032cc <I2C_TreatErrorCallback>
}
 8003398:	46c0      	nop			@ (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b004      	add	sp, #16
 800339e:	bd80      	pop	{r7, pc}

080033a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	000a      	movs	r2, r1
 80033aa:	1cbb      	adds	r3, r7, #2
 80033ac:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033b2:	1cbb      	adds	r3, r7, #2
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	2201      	movs	r2, #1
 80033b8:	4013      	ands	r3, r2
 80033ba:	d010      	beq.n	80033de <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2242      	movs	r2, #66	@ 0x42
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2241      	movs	r2, #65	@ 0x41
 80033c8:	5c9b      	ldrb	r3, [r3, r2]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	001a      	movs	r2, r3
 80033ce:	2328      	movs	r3, #40	@ 0x28
 80033d0:	4013      	ands	r3, r2
 80033d2:	2b28      	cmp	r3, #40	@ 0x28
 80033d4:	d003      	beq.n	80033de <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	22b0      	movs	r2, #176	@ 0xb0
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033de:	1cbb      	adds	r3, r7, #2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	2202      	movs	r2, #2
 80033e4:	4013      	ands	r3, r2
 80033e6:	d010      	beq.n	800340a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2244      	movs	r2, #68	@ 0x44
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2241      	movs	r2, #65	@ 0x41
 80033f4:	5c9b      	ldrb	r3, [r3, r2]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	001a      	movs	r2, r3
 80033fa:	2328      	movs	r3, #40	@ 0x28
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b28      	cmp	r3, #40	@ 0x28
 8003400:	d003      	beq.n	800340a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	22b0      	movs	r2, #176	@ 0xb0
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800340a:	1cbb      	adds	r3, r7, #2
 800340c:	2200      	movs	r2, #0
 800340e:	5e9b      	ldrsh	r3, [r3, r2]
 8003410:	2b00      	cmp	r3, #0
 8003412:	da03      	bge.n	800341c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	22b8      	movs	r2, #184	@ 0xb8
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800341c:	1cbb      	adds	r3, r7, #2
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	2b10      	cmp	r3, #16
 8003422:	d103      	bne.n	800342c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2290      	movs	r2, #144	@ 0x90
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800342c:	1cbb      	adds	r3, r7, #2
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	2b20      	cmp	r3, #32
 8003432:	d103      	bne.n	800343c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2220      	movs	r2, #32
 8003438:	4313      	orrs	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800343c:	1cbb      	adds	r3, r7, #2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	2b40      	cmp	r3, #64	@ 0x40
 8003442:	d103      	bne.n	800344c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2240      	movs	r2, #64	@ 0x40
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43d9      	mvns	r1, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	400a      	ands	r2, r1
 800345c:	601a      	str	r2, [r3, #0]
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2241      	movs	r2, #65	@ 0x41
 8003476:	5c9b      	ldrb	r3, [r3, r2]
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b20      	cmp	r3, #32
 800347c:	d138      	bne.n	80034f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2240      	movs	r2, #64	@ 0x40
 8003482:	5c9b      	ldrb	r3, [r3, r2]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003488:	2302      	movs	r3, #2
 800348a:	e032      	b.n	80034f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2240      	movs	r2, #64	@ 0x40
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2241      	movs	r2, #65	@ 0x41
 8003498:	2124      	movs	r1, #36	@ 0x24
 800349a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2101      	movs	r1, #1
 80034a8:	438a      	bics	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4911      	ldr	r1, [pc, #68]	@ (80034fc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6819      	ldr	r1, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2101      	movs	r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2241      	movs	r2, #65	@ 0x41
 80034e0:	2120      	movs	r1, #32
 80034e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2240      	movs	r2, #64	@ 0x40
 80034e8:	2100      	movs	r1, #0
 80034ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034ec:	2300      	movs	r3, #0
 80034ee:	e000      	b.n	80034f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034f0:	2302      	movs	r3, #2
  }
}
 80034f2:	0018      	movs	r0, r3
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b002      	add	sp, #8
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			@ (mov r8, r8)
 80034fc:	ffffefff 	.word	0xffffefff

08003500 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2241      	movs	r2, #65	@ 0x41
 800350e:	5c9b      	ldrb	r3, [r3, r2]
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b20      	cmp	r3, #32
 8003514:	d139      	bne.n	800358a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2240      	movs	r2, #64	@ 0x40
 800351a:	5c9b      	ldrb	r3, [r3, r2]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003520:	2302      	movs	r3, #2
 8003522:	e033      	b.n	800358c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2240      	movs	r2, #64	@ 0x40
 8003528:	2101      	movs	r1, #1
 800352a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2241      	movs	r2, #65	@ 0x41
 8003530:	2124      	movs	r1, #36	@ 0x24
 8003532:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2101      	movs	r1, #1
 8003540:	438a      	bics	r2, r1
 8003542:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a11      	ldr	r2, [pc, #68]	@ (8003594 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2241      	movs	r2, #65	@ 0x41
 800357a:	2120      	movs	r1, #32
 800357c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2240      	movs	r2, #64	@ 0x40
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e000      	b.n	800358c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800358a:	2302      	movs	r3, #2
  }
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b004      	add	sp, #16
 8003592:	bd80      	pop	{r7, pc}
 8003594:	fffff0ff 	.word	0xfffff0ff

08003598 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80035a0:	4b19      	ldr	r3, [pc, #100]	@ (8003608 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a19      	ldr	r2, [pc, #100]	@ (800360c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	0019      	movs	r1, r3
 80035aa:	4b17      	ldr	r3, [pc, #92]	@ (8003608 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	2380      	movs	r3, #128	@ 0x80
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d11f      	bne.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80035bc:	4b14      	ldr	r3, [pc, #80]	@ (8003610 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	0013      	movs	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	189b      	adds	r3, r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4912      	ldr	r1, [pc, #72]	@ (8003614 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80035ca:	0018      	movs	r0, r3
 80035cc:	f7fc fda6 	bl	800011c <__udivsi3>
 80035d0:	0003      	movs	r3, r0
 80035d2:	3301      	adds	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035d6:	e008      	b.n	80035ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e001      	b.n	80035ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e009      	b.n	80035fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ea:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	401a      	ands	r2, r3
 80035f4:	2380      	movs	r3, #128	@ 0x80
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d0ed      	beq.n	80035d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	b004      	add	sp, #16
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	40007000 	.word	0x40007000
 800360c:	fffff9ff 	.word	0xfffff9ff
 8003610:	200000c0 	.word	0x200000c0
 8003614:	000f4240 	.word	0x000f4240

08003618 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <LL_RCC_GetAPB1Prescaler+0x14>)
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	23e0      	movs	r3, #224	@ 0xe0
 8003622:	01db      	lsls	r3, r3, #7
 8003624:	4013      	ands	r3, r2
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000

08003630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e2f3      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2201      	movs	r2, #1
 8003648:	4013      	ands	r3, r2
 800364a:	d100      	bne.n	800364e <HAL_RCC_OscConfig+0x1e>
 800364c:	e07c      	b.n	8003748 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364e:	4bc3      	ldr	r3, [pc, #780]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2238      	movs	r2, #56	@ 0x38
 8003654:	4013      	ands	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003658:	4bc0      	ldr	r3, [pc, #768]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2203      	movs	r2, #3
 800365e:	4013      	ands	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b10      	cmp	r3, #16
 8003666:	d102      	bne.n	800366e <HAL_RCC_OscConfig+0x3e>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d002      	beq.n	8003674 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d10b      	bne.n	800368c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	4bb9      	ldr	r3, [pc, #740]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	@ 0x80
 800367a:	029b      	lsls	r3, r3, #10
 800367c:	4013      	ands	r3, r2
 800367e:	d062      	beq.n	8003746 <HAL_RCC_OscConfig+0x116>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d15e      	bne.n	8003746 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e2ce      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	2380      	movs	r3, #128	@ 0x80
 8003692:	025b      	lsls	r3, r3, #9
 8003694:	429a      	cmp	r2, r3
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_OscConfig+0x78>
 8003698:	4bb0      	ldr	r3, [pc, #704]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4baf      	ldr	r3, [pc, #700]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800369e:	2180      	movs	r1, #128	@ 0x80
 80036a0:	0249      	lsls	r1, r1, #9
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e020      	b.n	80036ea <HAL_RCC_OscConfig+0xba>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	23a0      	movs	r3, #160	@ 0xa0
 80036ae:	02db      	lsls	r3, r3, #11
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d10e      	bne.n	80036d2 <HAL_RCC_OscConfig+0xa2>
 80036b4:	4ba9      	ldr	r3, [pc, #676]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4ba8      	ldr	r3, [pc, #672]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80036ba:	2180      	movs	r1, #128	@ 0x80
 80036bc:	02c9      	lsls	r1, r1, #11
 80036be:	430a      	orrs	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	4ba6      	ldr	r3, [pc, #664]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4ba5      	ldr	r3, [pc, #660]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80036c8:	2180      	movs	r1, #128	@ 0x80
 80036ca:	0249      	lsls	r1, r1, #9
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e00b      	b.n	80036ea <HAL_RCC_OscConfig+0xba>
 80036d2:	4ba2      	ldr	r3, [pc, #648]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4ba1      	ldr	r3, [pc, #644]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80036d8:	49a1      	ldr	r1, [pc, #644]	@ (8003960 <HAL_RCC_OscConfig+0x330>)
 80036da:	400a      	ands	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	4b9f      	ldr	r3, [pc, #636]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b9e      	ldr	r3, [pc, #632]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80036e4:	499f      	ldr	r1, [pc, #636]	@ (8003964 <HAL_RCC_OscConfig+0x334>)
 80036e6:	400a      	ands	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d014      	beq.n	800371c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe f831 	bl	8001758 <HAL_GetTick>
 80036f6:	0003      	movs	r3, r0
 80036f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe f82c 	bl	8001758 <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	@ 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e28d      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370e:	4b93      	ldr	r3, [pc, #588]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	@ 0x80
 8003714:	029b      	lsls	r3, r3, #10
 8003716:	4013      	ands	r3, r2
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0xcc>
 800371a:	e015      	b.n	8003748 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe f81c 	bl	8001758 <HAL_GetTick>
 8003720:	0003      	movs	r3, r0
 8003722:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003726:	f7fe f817 	bl	8001758 <HAL_GetTick>
 800372a:	0002      	movs	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b64      	cmp	r3, #100	@ 0x64
 8003732:	d901      	bls.n	8003738 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e278      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003738:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	@ 0x80
 800373e:	029b      	lsls	r3, r3, #10
 8003740:	4013      	ands	r3, r2
 8003742:	d1f0      	bne.n	8003726 <HAL_RCC_OscConfig+0xf6>
 8003744:	e000      	b.n	8003748 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003746:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2202      	movs	r2, #2
 800374e:	4013      	ands	r3, r2
 8003750:	d100      	bne.n	8003754 <HAL_RCC_OscConfig+0x124>
 8003752:	e099      	b.n	8003888 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003754:	4b81      	ldr	r3, [pc, #516]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2238      	movs	r2, #56	@ 0x38
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800375e:	4b7f      	ldr	r3, [pc, #508]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2203      	movs	r2, #3
 8003764:	4013      	ands	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b10      	cmp	r3, #16
 800376c:	d102      	bne.n	8003774 <HAL_RCC_OscConfig+0x144>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b02      	cmp	r3, #2
 8003772:	d002      	beq.n	800377a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d135      	bne.n	80037e6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800377a:	4b78      	ldr	r3, [pc, #480]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4013      	ands	r3, r2
 8003784:	d005      	beq.n	8003792 <HAL_RCC_OscConfig+0x162>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e24b      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003792:	4b72      	ldr	r3, [pc, #456]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a74      	ldr	r2, [pc, #464]	@ (8003968 <HAL_RCC_OscConfig+0x338>)
 8003798:	4013      	ands	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	021a      	lsls	r2, r3, #8
 80037a2:	4b6e      	ldr	r3, [pc, #440]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d112      	bne.n	80037d4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037ae:	4b6b      	ldr	r3, [pc, #428]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a6e      	ldr	r2, [pc, #440]	@ (800396c <HAL_RCC_OscConfig+0x33c>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	4b67      	ldr	r3, [pc, #412]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80037be:	430a      	orrs	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80037c2:	4b66      	ldr	r3, [pc, #408]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	0adb      	lsrs	r3, r3, #11
 80037c8:	2207      	movs	r2, #7
 80037ca:	4013      	ands	r3, r2
 80037cc:	4a68      	ldr	r2, [pc, #416]	@ (8003970 <HAL_RCC_OscConfig+0x340>)
 80037ce:	40da      	lsrs	r2, r3
 80037d0:	4b68      	ldr	r3, [pc, #416]	@ (8003974 <HAL_RCC_OscConfig+0x344>)
 80037d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037d4:	4b68      	ldr	r3, [pc, #416]	@ (8003978 <HAL_RCC_OscConfig+0x348>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	0018      	movs	r0, r3
 80037da:	f7fd fc93 	bl	8001104 <HAL_InitTick>
 80037de:	1e03      	subs	r3, r0, #0
 80037e0:	d051      	beq.n	8003886 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e221      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d030      	beq.n	8003850 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037ee:	4b5b      	ldr	r3, [pc, #364]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5e      	ldr	r2, [pc, #376]	@ (800396c <HAL_RCC_OscConfig+0x33c>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	4b57      	ldr	r3, [pc, #348]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003802:	4b56      	ldr	r3, [pc, #344]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b55      	ldr	r3, [pc, #340]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003808:	2180      	movs	r1, #128	@ 0x80
 800380a:	0049      	lsls	r1, r1, #1
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fd ffa2 	bl	8001758 <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fd ff9d 	bl	8001758 <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e1fe      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800382c:	4b4b      	ldr	r3, [pc, #300]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	2380      	movs	r3, #128	@ 0x80
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4013      	ands	r3, r2
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b48      	ldr	r3, [pc, #288]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <HAL_RCC_OscConfig+0x338>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	021a      	lsls	r2, r3, #8
 8003848:	4b44      	ldr	r3, [pc, #272]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	e01b      	b.n	8003888 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003850:	4b42      	ldr	r3, [pc, #264]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b41      	ldr	r3, [pc, #260]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003856:	4949      	ldr	r1, [pc, #292]	@ (800397c <HAL_RCC_OscConfig+0x34c>)
 8003858:	400a      	ands	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fd ff7c 	bl	8001758 <HAL_GetTick>
 8003860:	0003      	movs	r3, r0
 8003862:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003866:	f7fd ff77 	bl	8001758 <HAL_GetTick>
 800386a:	0002      	movs	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1d8      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003878:	4b38      	ldr	r3, [pc, #224]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4013      	ands	r3, r2
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x236>
 8003884:	e000      	b.n	8003888 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003886:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	4013      	ands	r3, r2
 8003890:	d047      	beq.n	8003922 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003892:	4b32      	ldr	r3, [pc, #200]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2238      	movs	r2, #56	@ 0x38
 8003898:	4013      	ands	r3, r2
 800389a:	2b18      	cmp	r3, #24
 800389c:	d10a      	bne.n	80038b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800389e:	4b2f      	ldr	r3, [pc, #188]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	2202      	movs	r2, #2
 80038a4:	4013      	ands	r3, r2
 80038a6:	d03c      	beq.n	8003922 <HAL_RCC_OscConfig+0x2f2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d138      	bne.n	8003922 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e1ba      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d019      	beq.n	80038f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80038bc:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80038be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038c0:	4b26      	ldr	r3, [pc, #152]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80038c2:	2101      	movs	r1, #1
 80038c4:	430a      	orrs	r2, r1
 80038c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd ff46 	bl	8001758 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d2:	f7fd ff41 	bl	8001758 <HAL_GetTick>
 80038d6:	0002      	movs	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e1a2      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038e4:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80038e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e8:	2202      	movs	r2, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d0f1      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2a2>
 80038ee:	e018      	b.n	8003922 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80038f0:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80038f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038f4:	4b19      	ldr	r3, [pc, #100]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	438a      	bics	r2, r1
 80038fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd ff2c 	bl	8001758 <HAL_GetTick>
 8003900:	0003      	movs	r3, r0
 8003902:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fd ff27 	bl	8001758 <HAL_GetTick>
 800390a:	0002      	movs	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e188      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003918:	4b10      	ldr	r3, [pc, #64]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 800391a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391c:	2202      	movs	r2, #2
 800391e:	4013      	ands	r3, r2
 8003920:	d1f1      	bne.n	8003906 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2204      	movs	r2, #4
 8003928:	4013      	ands	r3, r2
 800392a:	d100      	bne.n	800392e <HAL_RCC_OscConfig+0x2fe>
 800392c:	e0c6      	b.n	8003abc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392e:	231f      	movs	r3, #31
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003936:	4b09      	ldr	r3, [pc, #36]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2238      	movs	r2, #56	@ 0x38
 800393c:	4013      	ands	r3, r2
 800393e:	2b20      	cmp	r3, #32
 8003940:	d11e      	bne.n	8003980 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_OscConfig+0x32c>)
 8003944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003946:	2202      	movs	r2, #2
 8003948:	4013      	ands	r3, r2
 800394a:	d100      	bne.n	800394e <HAL_RCC_OscConfig+0x31e>
 800394c:	e0b6      	b.n	8003abc <HAL_RCC_OscConfig+0x48c>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d000      	beq.n	8003958 <HAL_RCC_OscConfig+0x328>
 8003956:	e0b1      	b.n	8003abc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e166      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
 800395c:	40021000 	.word	0x40021000
 8003960:	fffeffff 	.word	0xfffeffff
 8003964:	fffbffff 	.word	0xfffbffff
 8003968:	ffff80ff 	.word	0xffff80ff
 800396c:	ffffc7ff 	.word	0xffffc7ff
 8003970:	00f42400 	.word	0x00f42400
 8003974:	200000c0 	.word	0x200000c0
 8003978:	200000c4 	.word	0x200000c4
 800397c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003980:	4bac      	ldr	r3, [pc, #688]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003982:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	055b      	lsls	r3, r3, #21
 8003988:	4013      	ands	r3, r2
 800398a:	d101      	bne.n	8003990 <HAL_RCC_OscConfig+0x360>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <HAL_RCC_OscConfig+0x362>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d011      	beq.n	80039ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	4ba7      	ldr	r3, [pc, #668]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003998:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800399a:	4ba6      	ldr	r3, [pc, #664]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 800399c:	2180      	movs	r1, #128	@ 0x80
 800399e:	0549      	lsls	r1, r1, #21
 80039a0:	430a      	orrs	r2, r1
 80039a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039a4:	4ba3      	ldr	r3, [pc, #652]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 80039a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039a8:	2380      	movs	r3, #128	@ 0x80
 80039aa:	055b      	lsls	r3, r3, #21
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80039b2:	231f      	movs	r3, #31
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039ba:	4b9f      	ldr	r3, [pc, #636]	@ (8003c38 <HAL_RCC_OscConfig+0x608>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	2380      	movs	r3, #128	@ 0x80
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4013      	ands	r3, r2
 80039c4:	d11a      	bne.n	80039fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c6:	4b9c      	ldr	r3, [pc, #624]	@ (8003c38 <HAL_RCC_OscConfig+0x608>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b9b      	ldr	r3, [pc, #620]	@ (8003c38 <HAL_RCC_OscConfig+0x608>)
 80039cc:	2180      	movs	r1, #128	@ 0x80
 80039ce:	0049      	lsls	r1, r1, #1
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80039d4:	f7fd fec0 	bl	8001758 <HAL_GetTick>
 80039d8:	0003      	movs	r3, r0
 80039da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fd febb 	bl	8001758 <HAL_GetTick>
 80039e2:	0002      	movs	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e11c      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f0:	4b91      	ldr	r3, [pc, #580]	@ (8003c38 <HAL_RCC_OscConfig+0x608>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x3e2>
 8003a04:	4b8b      	ldr	r3, [pc, #556]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a08:	4b8a      	ldr	r3, [pc, #552]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a10:	e01c      	b.n	8003a4c <HAL_RCC_OscConfig+0x41c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x404>
 8003a1a:	4b86      	ldr	r3, [pc, #536]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a1e:	4b85      	ldr	r3, [pc, #532]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a20:	2104      	movs	r1, #4
 8003a22:	430a      	orrs	r2, r1
 8003a24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a26:	4b83      	ldr	r3, [pc, #524]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a2a:	4b82      	ldr	r3, [pc, #520]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0x41c>
 8003a34:	4b7f      	ldr	r3, [pc, #508]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a38:	4b7e      	ldr	r3, [pc, #504]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a40:	4b7c      	ldr	r3, [pc, #496]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003a44:	4b7b      	ldr	r3, [pc, #492]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a46:	2104      	movs	r1, #4
 8003a48:	438a      	bics	r2, r1
 8003a4a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d014      	beq.n	8003a7e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fd fe80 	bl	8001758 <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5c:	e009      	b.n	8003a72 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a5e:	f7fd fe7b 	bl	8001758 <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	4a74      	ldr	r2, [pc, #464]	@ (8003c3c <HAL_RCC_OscConfig+0x60c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e0db      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	4b70      	ldr	r3, [pc, #448]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	2202      	movs	r2, #2
 8003a78:	4013      	ands	r3, r2
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x42e>
 8003a7c:	e013      	b.n	8003aa6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fe6b 	bl	8001758 <HAL_GetTick>
 8003a82:	0003      	movs	r3, r0
 8003a84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a86:	e009      	b.n	8003a9c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fd fe66 	bl	8001758 <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	4a6a      	ldr	r2, [pc, #424]	@ (8003c3c <HAL_RCC_OscConfig+0x60c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0c6      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a9c:	4b65      	ldr	r3, [pc, #404]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d1f0      	bne.n	8003a88 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003aa6:	231f      	movs	r3, #31
 8003aa8:	18fb      	adds	r3, r7, r3
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	4b60      	ldr	r3, [pc, #384]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003ab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ab4:	4b5f      	ldr	r3, [pc, #380]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003ab6:	4962      	ldr	r1, [pc, #392]	@ (8003c40 <HAL_RCC_OscConfig+0x610>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d100      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x496>
 8003ac4:	e0b0      	b.n	8003c28 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2238      	movs	r2, #56	@ 0x38
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d100      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x4a4>
 8003ad2:	e078      	b.n	8003bc6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d153      	bne.n	8003b84 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003adc:	4b55      	ldr	r3, [pc, #340]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b54      	ldr	r3, [pc, #336]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003ae2:	4958      	ldr	r1, [pc, #352]	@ (8003c44 <HAL_RCC_OscConfig+0x614>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fe36 	bl	8001758 <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fd fe31 	bl	8001758 <HAL_GetTick>
 8003af6:	0002      	movs	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e092      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b04:	4b4b      	ldr	r3, [pc, #300]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2380      	movs	r3, #128	@ 0x80
 8003b0a:	049b      	lsls	r3, r3, #18
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b10:	4b48      	ldr	r3, [pc, #288]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a4c      	ldr	r2, [pc, #304]	@ (8003c48 <HAL_RCC_OscConfig+0x618>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1a      	ldr	r2, [r3, #32]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	431a      	orrs	r2, r3
 8003b38:	4b3e      	ldr	r3, [pc, #248]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	4b3c      	ldr	r3, [pc, #240]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b44:	2180      	movs	r1, #128	@ 0x80
 8003b46:	0449      	lsls	r1, r1, #17
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003b4c:	4b39      	ldr	r3, [pc, #228]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	4b38      	ldr	r3, [pc, #224]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b52:	2180      	movs	r1, #128	@ 0x80
 8003b54:	0549      	lsls	r1, r1, #21
 8003b56:	430a      	orrs	r2, r1
 8003b58:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fd fdfd 	bl	8001758 <HAL_GetTick>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fd fdf8 	bl	8001758 <HAL_GetTick>
 8003b68:	0002      	movs	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e059      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b76:	4b2f      	ldr	r3, [pc, #188]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	@ 0x80
 8003b7c:	049b      	lsls	r3, r3, #18
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x534>
 8003b82:	e051      	b.n	8003c28 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b84:	4b2b      	ldr	r3, [pc, #172]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b2a      	ldr	r3, [pc, #168]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003b8a:	492e      	ldr	r1, [pc, #184]	@ (8003c44 <HAL_RCC_OscConfig+0x614>)
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fd fde2 	bl	8001758 <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b98:	e008      	b.n	8003bac <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9a:	f7fd fddd 	bl	8001758 <HAL_GetTick>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e03e      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bac:	4b21      	ldr	r3, [pc, #132]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	@ 0x80
 8003bb2:	049b      	lsls	r3, r3, #18
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003bbe:	4923      	ldr	r1, [pc, #140]	@ (8003c4c <HAL_RCC_OscConfig+0x61c>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	e030      	b.n	8003c28 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e02b      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003bd2:	4b18      	ldr	r3, [pc, #96]	@ (8003c34 <HAL_RCC_OscConfig+0x604>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2203      	movs	r2, #3
 8003bdc:	401a      	ands	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d11e      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2270      	movs	r2, #112	@ 0x70
 8003bea:	401a      	ands	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d117      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	23fe      	movs	r3, #254	@ 0xfe
 8003bf8:	01db      	lsls	r3, r3, #7
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d10e      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	23f8      	movs	r3, #248	@ 0xf8
 8003c0a:	039b      	lsls	r3, r3, #14
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	0f5b      	lsrs	r3, r3, #29
 8003c1a:	075a      	lsls	r2, r3, #29
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b008      	add	sp, #32
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	00001388 	.word	0x00001388
 8003c40:	efffffff 	.word	0xefffffff
 8003c44:	feffffff 	.word	0xfeffffff
 8003c48:	1fc1808c 	.word	0x1fc1808c
 8003c4c:	effefffc 	.word	0xeffefffc

08003c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0e9      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b76      	ldr	r3, [pc, #472]	@ (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2207      	movs	r2, #7
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d91e      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b73      	ldr	r3, [pc, #460]	@ (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2207      	movs	r2, #7
 8003c78:	4393      	bics	r3, r2
 8003c7a:	0019      	movs	r1, r3
 8003c7c:	4b70      	ldr	r3, [pc, #448]	@ (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c84:	f7fd fd68 	bl	8001758 <HAL_GetTick>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c8c:	e009      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c8e:	f7fd fd63 	bl	8001758 <HAL_GetTick>
 8003c92:	0002      	movs	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	4a6a      	ldr	r2, [pc, #424]	@ (8003e44 <HAL_RCC_ClockConfig+0x1f4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e0ca      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ca2:	4b67      	ldr	r3, [pc, #412]	@ (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2207      	movs	r2, #7
 8003ca8:	4013      	ands	r3, r2
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d1ee      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d015      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d006      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003cc4:	4b60      	ldr	r3, [pc, #384]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	4b5f      	ldr	r3, [pc, #380]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003cca:	21e0      	movs	r1, #224	@ 0xe0
 8003ccc:	01c9      	lsls	r1, r1, #7
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4a5d      	ldr	r2, [pc, #372]	@ (8003e4c <HAL_RCC_ClockConfig+0x1fc>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	0019      	movs	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	4b59      	ldr	r3, [pc, #356]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	d057      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d107      	bne.n	8003d08 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf8:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	2380      	movs	r3, #128	@ 0x80
 8003cfe:	029b      	lsls	r3, r3, #10
 8003d00:	4013      	ands	r3, r2
 8003d02:	d12b      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e097      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d10:	4b4d      	ldr	r3, [pc, #308]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	@ 0x80
 8003d16:	049b      	lsls	r3, r3, #18
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d11f      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e08b      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d28:	4b47      	ldr	r3, [pc, #284]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4013      	ands	r3, r2
 8003d32:	d113      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e07f      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d40:	4b41      	ldr	r3, [pc, #260]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d44:	2202      	movs	r2, #2
 8003d46:	4013      	ands	r3, r2
 8003d48:	d108      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e074      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d52:	2202      	movs	r2, #2
 8003d54:	4013      	ands	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e06d      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2207      	movs	r2, #7
 8003d62:	4393      	bics	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	4b37      	ldr	r3, [pc, #220]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d70:	f7fd fcf2 	bl	8001758 <HAL_GetTick>
 8003d74:	0003      	movs	r3, r0
 8003d76:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d78:	e009      	b.n	8003d8e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d7a:	f7fd fced 	bl	8001758 <HAL_GetTick>
 8003d7e:	0002      	movs	r2, r0
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	4a2f      	ldr	r2, [pc, #188]	@ (8003e44 <HAL_RCC_ClockConfig+0x1f4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e054      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2238      	movs	r2, #56	@ 0x38
 8003d94:	401a      	ands	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1ec      	bne.n	8003d7a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b27      	ldr	r3, [pc, #156]	@ (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2207      	movs	r2, #7
 8003da6:	4013      	ands	r3, r2
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d21e      	bcs.n	8003dec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2207      	movs	r2, #7
 8003db4:	4393      	bics	r3, r2
 8003db6:	0019      	movs	r1, r3
 8003db8:	4b21      	ldr	r3, [pc, #132]	@ (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fcca 	bl	8001758 <HAL_GetTick>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dc8:	e009      	b.n	8003dde <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dca:	f7fd fcc5 	bl	8001758 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e44 <HAL_RCC_ClockConfig+0x1f4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e02c      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003dde:	4b18      	ldr	r3, [pc, #96]	@ (8003e40 <HAL_RCC_ClockConfig+0x1f0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2207      	movs	r2, #7
 8003de4:	4013      	ands	r3, r2
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2204      	movs	r2, #4
 8003df2:	4013      	ands	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003df6:	4b14      	ldr	r3, [pc, #80]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	4a15      	ldr	r2, [pc, #84]	@ (8003e50 <HAL_RCC_ClockConfig+0x200>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	0019      	movs	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	4b10      	ldr	r3, [pc, #64]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003e0a:	f000 f829 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8003e0e:	0001      	movs	r1, r0
 8003e10:	4b0d      	ldr	r3, [pc, #52]	@ (8003e48 <HAL_RCC_ClockConfig+0x1f8>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	220f      	movs	r2, #15
 8003e18:	401a      	ands	r2, r3
 8003e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e54 <HAL_RCC_ClockConfig+0x204>)
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	58d3      	ldr	r3, [r2, r3]
 8003e20:	221f      	movs	r2, #31
 8003e22:	4013      	ands	r3, r2
 8003e24:	000a      	movs	r2, r1
 8003e26:	40da      	lsrs	r2, r3
 8003e28:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <HAL_RCC_ClockConfig+0x208>)
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_ClockConfig+0x20c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7fd f967 	bl	8001104 <HAL_InitTick>
 8003e36:	0003      	movs	r3, r0
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b004      	add	sp, #16
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40022000 	.word	0x40022000
 8003e44:	00001388 	.word	0x00001388
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	fffff0ff 	.word	0xfffff0ff
 8003e50:	ffff8fff 	.word	0xffff8fff
 8003e54:	0800d760 	.word	0x0800d760
 8003e58:	200000c0 	.word	0x200000c0
 8003e5c:	200000c4 	.word	0x200000c4

08003e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e66:	4b3c      	ldr	r3, [pc, #240]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2238      	movs	r2, #56	@ 0x38
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d10f      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003e70:	4b39      	ldr	r3, [pc, #228]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	0adb      	lsrs	r3, r3, #11
 8003e76:	2207      	movs	r2, #7
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	0013      	movs	r3, r2
 8003e80:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003e82:	6839      	ldr	r1, [r7, #0]
 8003e84:	4835      	ldr	r0, [pc, #212]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e86:	f7fc f949 	bl	800011c <__udivsi3>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e05d      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e90:	4b31      	ldr	r3, [pc, #196]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2238      	movs	r2, #56	@ 0x38
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d102      	bne.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e9c:	4b30      	ldr	r3, [pc, #192]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	e054      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	2238      	movs	r2, #56	@ 0x38
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b10      	cmp	r3, #16
 8003eac:	d138      	bne.n	8003f20 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003eae:	4b2a      	ldr	r3, [pc, #168]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb8:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	2207      	movs	r2, #7
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d10d      	bne.n	8003ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4824      	ldr	r0, [pc, #144]	@ (8003f60 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ed0:	f7fc f924 	bl	800011c <__udivsi3>
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	0a1b      	lsrs	r3, r3, #8
 8003ede:	227f      	movs	r2, #127	@ 0x7f
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	434b      	muls	r3, r1
 8003ee4:	617b      	str	r3, [r7, #20]
        break;
 8003ee6:	e00d      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	481c      	ldr	r0, [pc, #112]	@ (8003f5c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003eec:	f7fc f916 	bl	800011c <__udivsi3>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	227f      	movs	r2, #127	@ 0x7f
 8003efc:	4013      	ands	r3, r2
 8003efe:	434b      	muls	r3, r1
 8003f00:	617b      	str	r3, [r7, #20]
        break;
 8003f02:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003f04:	4b14      	ldr	r3, [pc, #80]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	0f5b      	lsrs	r3, r3, #29
 8003f0a:	2207      	movs	r2, #7
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	3301      	adds	r3, #1
 8003f10:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	6978      	ldr	r0, [r7, #20]
 8003f16:	f7fc f901 	bl	800011c <__udivsi3>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	e015      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f20:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2238      	movs	r2, #56	@ 0x38
 8003f26:	4013      	ands	r3, r2
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d103      	bne.n	8003f34 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	021b      	lsls	r3, r3, #8
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e00b      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f34:	4b08      	ldr	r3, [pc, #32]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2238      	movs	r2, #56	@ 0x38
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b18      	cmp	r3, #24
 8003f3e:	d103      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003f40:	23fa      	movs	r3, #250	@ 0xfa
 8003f42:	01db      	lsls	r3, r3, #7
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e001      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f4c:	693b      	ldr	r3, [r7, #16]
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b006      	add	sp, #24
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	00f42400 	.word	0x00f42400
 8003f60:	007a1200 	.word	0x007a1200

08003f64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f68:	4b02      	ldr	r3, [pc, #8]	@ (8003f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	200000c0 	.word	0x200000c0

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b5b0      	push	{r4, r5, r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003f7c:	f7ff fff2 	bl	8003f64 <HAL_RCC_GetHCLKFreq>
 8003f80:	0004      	movs	r4, r0
 8003f82:	f7ff fb49 	bl	8003618 <LL_RCC_GetAPB1Prescaler>
 8003f86:	0003      	movs	r3, r0
 8003f88:	0b1a      	lsrs	r2, r3, #12
 8003f8a:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f8c:	0092      	lsls	r2, r2, #2
 8003f8e:	58d3      	ldr	r3, [r2, r3]
 8003f90:	221f      	movs	r2, #31
 8003f92:	4013      	ands	r3, r2
 8003f94:	40dc      	lsrs	r4, r3
 8003f96:	0023      	movs	r3, r4
}
 8003f98:	0018      	movs	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	0800d7a0 	.word	0x0800d7a0

08003fa4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <HAL_RCC_GetClockConfig+0x4c>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2207      	movs	r2, #7
 8003fba:	401a      	ands	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_RCC_GetClockConfig+0x4c>)
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	23f0      	movs	r3, #240	@ 0xf0
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	401a      	ands	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003fce:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <HAL_RCC_GetClockConfig+0x4c>)
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	23e0      	movs	r3, #224	@ 0xe0
 8003fd4:	01db      	lsls	r3, r3, #7
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_RCC_GetClockConfig+0x50>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	46c0      	nop			@ (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40022000 	.word	0x40022000

08003ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004000:	2313      	movs	r3, #19
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004008:	2312      	movs	r3, #18
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	2380      	movs	r3, #128	@ 0x80
 8004016:	029b      	lsls	r3, r3, #10
 8004018:	4013      	ands	r3, r2
 800401a:	d100      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800401c:	e0a3      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401e:	2011      	movs	r0, #17
 8004020:	183b      	adds	r3, r7, r0
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004026:	4b86      	ldr	r3, [pc, #536]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004028:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	055b      	lsls	r3, r3, #21
 800402e:	4013      	ands	r3, r2
 8004030:	d110      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004032:	4b83      	ldr	r3, [pc, #524]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004034:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004036:	4b82      	ldr	r3, [pc, #520]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004038:	2180      	movs	r1, #128	@ 0x80
 800403a:	0549      	lsls	r1, r1, #21
 800403c:	430a      	orrs	r2, r1
 800403e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004040:	4b7f      	ldr	r3, [pc, #508]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	055b      	lsls	r3, r3, #21
 8004048:	4013      	ands	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800404e:	183b      	adds	r3, r7, r0
 8004050:	2201      	movs	r2, #1
 8004052:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004054:	4b7b      	ldr	r3, [pc, #492]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b7a      	ldr	r3, [pc, #488]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800405a:	2180      	movs	r1, #128	@ 0x80
 800405c:	0049      	lsls	r1, r1, #1
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004062:	f7fd fb79 	bl	8001758 <HAL_GetTick>
 8004066:	0003      	movs	r3, r0
 8004068:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800406a:	e00b      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406c:	f7fd fb74 	bl	8001758 <HAL_GetTick>
 8004070:	0002      	movs	r2, r0
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d904      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800407a:	2313      	movs	r3, #19
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	2203      	movs	r2, #3
 8004080:	701a      	strb	r2, [r3, #0]
        break;
 8004082:	e005      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004084:	4b6f      	ldr	r3, [pc, #444]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2380      	movs	r3, #128	@ 0x80
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4013      	ands	r3, r2
 800408e:	d0ed      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004090:	2313      	movs	r3, #19
 8004092:	18fb      	adds	r3, r7, r3
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d154      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800409a:	4b69      	ldr	r3, [pc, #420]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800409c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800409e:	23c0      	movs	r3, #192	@ 0xc0
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4013      	ands	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d019      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d014      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040b6:	4b62      	ldr	r3, [pc, #392]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ba:	4a63      	ldr	r2, [pc, #396]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80040bc:	4013      	ands	r3, r2
 80040be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040c4:	4b5e      	ldr	r3, [pc, #376]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040c6:	2180      	movs	r1, #128	@ 0x80
 80040c8:	0249      	lsls	r1, r1, #9
 80040ca:	430a      	orrs	r2, r1
 80040cc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040d4:	495d      	ldr	r1, [pc, #372]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80040d6:	400a      	ands	r2, r1
 80040d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040da:	4b59      	ldr	r3, [pc, #356]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2201      	movs	r2, #1
 80040e4:	4013      	ands	r3, r2
 80040e6:	d016      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd fb36 	bl	8001758 <HAL_GetTick>
 80040ec:	0003      	movs	r3, r0
 80040ee:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f0:	e00c      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fd fb31 	bl	8001758 <HAL_GetTick>
 80040f6:	0002      	movs	r2, r0
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	4a54      	ldr	r2, [pc, #336]	@ (8004250 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d904      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004102:	2313      	movs	r3, #19
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	2203      	movs	r2, #3
 8004108:	701a      	strb	r2, [r3, #0]
            break;
 800410a:	e004      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800410c:	4b4c      	ldr	r3, [pc, #304]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	2202      	movs	r2, #2
 8004112:	4013      	ands	r3, r2
 8004114:	d0ed      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004116:	2313      	movs	r3, #19
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004120:	4b47      	ldr	r3, [pc, #284]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004124:	4a48      	ldr	r2, [pc, #288]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004126:	4013      	ands	r3, r2
 8004128:	0019      	movs	r1, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	4b44      	ldr	r3, [pc, #272]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004130:	430a      	orrs	r2, r1
 8004132:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004134:	e00c      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004136:	2312      	movs	r3, #18
 8004138:	18fb      	adds	r3, r7, r3
 800413a:	2213      	movs	r2, #19
 800413c:	18ba      	adds	r2, r7, r2
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e005      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	2312      	movs	r3, #18
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2213      	movs	r2, #19
 800414a:	18ba      	adds	r2, r7, r2
 800414c:	7812      	ldrb	r2, [r2, #0]
 800414e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004150:	2311      	movs	r3, #17
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4b39      	ldr	r3, [pc, #228]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800415c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800415e:	4b38      	ldr	r3, [pc, #224]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004160:	493c      	ldr	r1, [pc, #240]	@ (8004254 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004162:	400a      	ands	r2, r1
 8004164:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2201      	movs	r2, #1
 800416c:	4013      	ands	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004170:	4b33      	ldr	r3, [pc, #204]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004174:	2203      	movs	r2, #3
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	4b30      	ldr	r3, [pc, #192]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004180:	430a      	orrs	r2, r1
 8004182:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2202      	movs	r2, #2
 800418a:	4013      	ands	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800418e:	4b2c      	ldr	r3, [pc, #176]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004192:	220c      	movs	r2, #12
 8004194:	4393      	bics	r3, r2
 8004196:	0019      	movs	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	4b28      	ldr	r3, [pc, #160]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800419e:	430a      	orrs	r2, r1
 80041a0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2220      	movs	r2, #32
 80041a8:	4013      	ands	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041ac:	4b24      	ldr	r3, [pc, #144]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b0:	4a29      	ldr	r2, [pc, #164]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	4b21      	ldr	r3, [pc, #132]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2380      	movs	r3, #128	@ 0x80
 80041c6:	01db      	lsls	r3, r3, #7
 80041c8:	4013      	ands	r3, r2
 80041ca:	d015      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	0899      	lsrs	r1, r3, #2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695a      	ldr	r2, [r3, #20]
 80041d8:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041da:	430a      	orrs	r2, r1
 80041dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	05db      	lsls	r3, r3, #23
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d106      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80041ea:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	4b14      	ldr	r3, [pc, #80]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80041f0:	2180      	movs	r1, #128	@ 0x80
 80041f2:	0249      	lsls	r1, r1, #9
 80041f4:	430a      	orrs	r2, r1
 80041f6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	2380      	movs	r3, #128	@ 0x80
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	4013      	ands	r3, r2
 8004202:	d016      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004204:	4b0e      	ldr	r3, [pc, #56]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004208:	4a14      	ldr	r2, [pc, #80]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	4b0b      	ldr	r3, [pc, #44]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004214:	430a      	orrs	r2, r1
 8004216:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	2380      	movs	r3, #128	@ 0x80
 800421e:	01db      	lsls	r3, r3, #7
 8004220:	429a      	cmp	r2, r3
 8004222:	d106      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	4b05      	ldr	r3, [pc, #20]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800422a:	2180      	movs	r1, #128	@ 0x80
 800422c:	0249      	lsls	r1, r1, #9
 800422e:	430a      	orrs	r2, r1
 8004230:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004232:	2312      	movs	r3, #18
 8004234:	18fb      	adds	r3, r7, r3
 8004236:	781b      	ldrb	r3, [r3, #0]
}
 8004238:	0018      	movs	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	b006      	add	sp, #24
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	40007000 	.word	0x40007000
 8004248:	fffffcff 	.word	0xfffffcff
 800424c:	fffeffff 	.word	0xfffeffff
 8004250:	00001388 	.word	0x00001388
 8004254:	efffffff 	.word	0xefffffff
 8004258:	ffffcfff 	.word	0xffffcfff
 800425c:	ffff3fff 	.word	0xffff3fff

08004260 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0a8      	b.n	80043c4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	2382      	movs	r3, #130	@ 0x82
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	429a      	cmp	r2, r3
 8004284:	d009      	beq.n	800429a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	61da      	str	r2, [r3, #28]
 800428c:	e005      	b.n	800429a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	225d      	movs	r2, #93	@ 0x5d
 80042a4:	5c9b      	ldrb	r3, [r3, r2]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d107      	bne.n	80042bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	225c      	movs	r2, #92	@ 0x5c
 80042b0:	2100      	movs	r1, #0
 80042b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f7fc fe8a 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	225d      	movs	r2, #93	@ 0x5d
 80042c0:	2102      	movs	r1, #2
 80042c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2140      	movs	r1, #64	@ 0x40
 80042d0:	438a      	bics	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	23e0      	movs	r3, #224	@ 0xe0
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	429a      	cmp	r2, r3
 80042de:	d902      	bls.n	80042e6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e002      	b.n	80042ec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042e6:	2380      	movs	r3, #128	@ 0x80
 80042e8:	015b      	lsls	r3, r3, #5
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	23f0      	movs	r3, #240	@ 0xf0
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d008      	beq.n	800430a <HAL_SPI_Init+0xaa>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	23e0      	movs	r3, #224	@ 0xe0
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	429a      	cmp	r2, r3
 8004302:	d002      	beq.n	800430a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	2382      	movs	r3, #130	@ 0x82
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	401a      	ands	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6899      	ldr	r1, [r3, #8]
 8004318:	2384      	movs	r3, #132	@ 0x84
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	400b      	ands	r3, r1
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	2102      	movs	r1, #2
 8004326:	400b      	ands	r3, r1
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	2101      	movs	r1, #1
 8004330:	400b      	ands	r3, r1
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6999      	ldr	r1, [r3, #24]
 8004338:	2380      	movs	r3, #128	@ 0x80
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	400b      	ands	r3, r1
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	2138      	movs	r1, #56	@ 0x38
 8004346:	400b      	ands	r3, r1
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	2180      	movs	r1, #128	@ 0x80
 8004350:	400b      	ands	r3, r1
 8004352:	431a      	orrs	r2, r3
 8004354:	0011      	movs	r1, r2
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	019b      	lsls	r3, r3, #6
 800435e:	401a      	ands	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	0c1b      	lsrs	r3, r3, #16
 800436e:	2204      	movs	r2, #4
 8004370:	401a      	ands	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	2110      	movs	r1, #16
 8004378:	400b      	ands	r3, r1
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004380:	2108      	movs	r1, #8
 8004382:	400b      	ands	r3, r1
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68d9      	ldr	r1, [r3, #12]
 800438a:	23f0      	movs	r3, #240	@ 0xf0
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	400b      	ands	r3, r1
 8004390:	431a      	orrs	r2, r3
 8004392:	0011      	movs	r1, r2
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	2380      	movs	r3, #128	@ 0x80
 8004398:	015b      	lsls	r3, r3, #5
 800439a:	401a      	ands	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4907      	ldr	r1, [pc, #28]	@ (80043cc <HAL_SPI_Init+0x16c>)
 80043b0:	400a      	ands	r2, r1
 80043b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	225d      	movs	r2, #93	@ 0x5d
 80043be:	2101      	movs	r1, #1
 80043c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	fffff7ff 	.word	0xfffff7ff

080043d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	1dbb      	adds	r3, r7, #6
 80043de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043e0:	231f      	movs	r3, #31
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	225c      	movs	r2, #92	@ 0x5c
 80043ec:	5c9b      	ldrb	r3, [r3, r2]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_SPI_Transmit+0x26>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e147      	b.n	8004686 <HAL_SPI_Transmit+0x2b6>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	225c      	movs	r2, #92	@ 0x5c
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043fe:	f7fd f9ab 	bl	8001758 <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004406:	2316      	movs	r3, #22
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	1dba      	adds	r2, r7, #6
 800440c:	8812      	ldrh	r2, [r2, #0]
 800440e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	225d      	movs	r2, #93	@ 0x5d
 8004414:	5c9b      	ldrb	r3, [r3, r2]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d004      	beq.n	8004426 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800441c:	231f      	movs	r3, #31
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	2202      	movs	r2, #2
 8004422:	701a      	strb	r2, [r3, #0]
    goto error;
 8004424:	e128      	b.n	8004678 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_SPI_Transmit+0x64>
 800442c:	1dbb      	adds	r3, r7, #6
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004434:	231f      	movs	r3, #31
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	2201      	movs	r2, #1
 800443a:	701a      	strb	r2, [r3, #0]
    goto error;
 800443c:	e11c      	b.n	8004678 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	225d      	movs	r2, #93	@ 0x5d
 8004442:	2103      	movs	r1, #3
 8004444:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1dba      	adds	r2, r7, #6
 8004456:	8812      	ldrh	r2, [r2, #0]
 8004458:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1dba      	adds	r2, r7, #6
 800445e:	8812      	ldrh	r2, [r2, #0]
 8004460:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2244      	movs	r2, #68	@ 0x44
 800446c:	2100      	movs	r1, #0
 800446e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2246      	movs	r2, #70	@ 0x46
 8004474:	2100      	movs	r1, #0
 8004476:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	429a      	cmp	r2, r3
 800448e:	d110      	bne.n	80044b2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2140      	movs	r1, #64	@ 0x40
 800449c:	438a      	bics	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2180      	movs	r1, #128	@ 0x80
 80044ac:	01c9      	lsls	r1, r1, #7
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d007      	beq.n	80044d0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2140      	movs	r1, #64	@ 0x40
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	23e0      	movs	r3, #224	@ 0xe0
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	429a      	cmp	r2, r3
 80044da:	d952      	bls.n	8004582 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_SPI_Transmit+0x11e>
 80044e4:	2316      	movs	r3, #22
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d143      	bne.n	8004576 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f2:	881a      	ldrh	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fe:	1c9a      	adds	r2, r3, #2
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004508:	b29b      	uxth	r3, r3
 800450a:	3b01      	subs	r3, #1
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004512:	e030      	b.n	8004576 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2202      	movs	r2, #2
 800451c:	4013      	ands	r3, r2
 800451e:	2b02      	cmp	r3, #2
 8004520:	d112      	bne.n	8004548 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004526:	881a      	ldrh	r2, [r3, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	1c9a      	adds	r2, r3, #2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800453c:	b29b      	uxth	r3, r3
 800453e:	3b01      	subs	r3, #1
 8004540:	b29a      	uxth	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004546:	e016      	b.n	8004576 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004548:	f7fd f906 	bl	8001758 <HAL_GetTick>
 800454c:	0002      	movs	r2, r0
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d802      	bhi.n	800455e <HAL_SPI_Transmit+0x18e>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	3301      	adds	r3, #1
 800455c:	d102      	bne.n	8004564 <HAL_SPI_Transmit+0x194>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d108      	bne.n	8004576 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004564:	231f      	movs	r3, #31
 8004566:	18fb      	adds	r3, r7, r3
 8004568:	2203      	movs	r2, #3
 800456a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	225d      	movs	r2, #93	@ 0x5d
 8004570:	2101      	movs	r1, #1
 8004572:	5499      	strb	r1, [r3, r2]
          goto error;
 8004574:	e080      	b.n	8004678 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1c9      	bne.n	8004514 <HAL_SPI_Transmit+0x144>
 8004580:	e053      	b.n	800462a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <HAL_SPI_Transmit+0x1c4>
 800458a:	2316      	movs	r3, #22
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d145      	bne.n	8004620 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	330c      	adds	r3, #12
 800459e:	7812      	ldrb	r2, [r2, #0]
 80045a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80045ba:	e031      	b.n	8004620 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	2202      	movs	r2, #2
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d113      	bne.n	80045f2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	7812      	ldrb	r2, [r2, #0]
 80045d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045f0:	e016      	b.n	8004620 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045f2:	f7fd f8b1 	bl	8001758 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d802      	bhi.n	8004608 <HAL_SPI_Transmit+0x238>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	d102      	bne.n	800460e <HAL_SPI_Transmit+0x23e>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d108      	bne.n	8004620 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800460e:	231f      	movs	r3, #31
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	2203      	movs	r2, #3
 8004614:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	225d      	movs	r2, #93	@ 0x5d
 800461a:	2101      	movs	r1, #1
 800461c:	5499      	strb	r1, [r3, r2]
          goto error;
 800461e:	e02b      	b.n	8004678 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1c8      	bne.n	80045bc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 fb3f 	bl	8004cb4 <SPI_EndRxTxTransaction>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d002      	beq.n	8004640 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004662:	2b00      	cmp	r3, #0
 8004664:	d004      	beq.n	8004670 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004666:	231f      	movs	r3, #31
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	2201      	movs	r2, #1
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e003      	b.n	8004678 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	225d      	movs	r2, #93	@ 0x5d
 8004674:	2101      	movs	r1, #1
 8004676:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	225c      	movs	r2, #92	@ 0x5c
 800467c:	2100      	movs	r1, #0
 800467e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004680:	231f      	movs	r3, #31
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	781b      	ldrb	r3, [r3, #0]
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b008      	add	sp, #32
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	@ 0x28
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	001a      	movs	r2, r3
 800469e:	1cbb      	adds	r3, r7, #2
 80046a0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046a2:	2301      	movs	r3, #1
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046a6:	2323      	movs	r3, #35	@ 0x23
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	225c      	movs	r2, #92	@ 0x5c
 80046b2:	5c9b      	ldrb	r3, [r3, r2]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x2c>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e1c4      	b.n	8004a46 <HAL_SPI_TransmitReceive+0x3b6>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	225c      	movs	r2, #92	@ 0x5c
 80046c0:	2101      	movs	r1, #1
 80046c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046c4:	f7fd f848 	bl	8001758 <HAL_GetTick>
 80046c8:	0003      	movs	r3, r0
 80046ca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046cc:	201b      	movs	r0, #27
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	215d      	movs	r1, #93	@ 0x5d
 80046d4:	5c52      	ldrb	r2, [r2, r1]
 80046d6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80046de:	2312      	movs	r3, #18
 80046e0:	18fb      	adds	r3, r7, r3
 80046e2:	1cba      	adds	r2, r7, #2
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046e8:	183b      	adds	r3, r7, r0
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d011      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x84>
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	2382      	movs	r3, #130	@ 0x82
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d107      	bne.n	800470a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <HAL_SPI_TransmitReceive+0x7a>
 8004702:	183b      	adds	r3, r7, r0
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b04      	cmp	r3, #4
 8004708:	d004      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800470a:	2323      	movs	r3, #35	@ 0x23
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	2202      	movs	r2, #2
 8004710:	701a      	strb	r2, [r3, #0]
    goto error;
 8004712:	e191      	b.n	8004a38 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <HAL_SPI_TransmitReceive+0x98>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_SPI_TransmitReceive+0x98>
 8004720:	1cbb      	adds	r3, r7, #2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004728:	2323      	movs	r3, #35	@ 0x23
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004730:	e182      	b.n	8004a38 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	225d      	movs	r2, #93	@ 0x5d
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b04      	cmp	r3, #4
 800473c:	d003      	beq.n	8004746 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	225d      	movs	r2, #93	@ 0x5d
 8004742:	2105      	movs	r1, #5
 8004744:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1cba      	adds	r2, r7, #2
 8004756:	2146      	movs	r1, #70	@ 0x46
 8004758:	8812      	ldrh	r2, [r2, #0]
 800475a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1cba      	adds	r2, r7, #2
 8004760:	2144      	movs	r1, #68	@ 0x44
 8004762:	8812      	ldrh	r2, [r2, #0]
 8004764:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1cba      	adds	r2, r7, #2
 8004770:	8812      	ldrh	r2, [r2, #0]
 8004772:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1cba      	adds	r2, r7, #2
 8004778:	8812      	ldrh	r2, [r2, #0]
 800477a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	23e0      	movs	r3, #224	@ 0xe0
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	429a      	cmp	r2, r3
 8004792:	d908      	bls.n	80047a6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	49ac      	ldr	r1, [pc, #688]	@ (8004a50 <HAL_SPI_TransmitReceive+0x3c0>)
 80047a0:	400a      	ands	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]
 80047a4:	e008      	b.n	80047b8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2180      	movs	r1, #128	@ 0x80
 80047b2:	0149      	lsls	r1, r1, #5
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2240      	movs	r2, #64	@ 0x40
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b40      	cmp	r3, #64	@ 0x40
 80047c4:	d007      	beq.n	80047d6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2140      	movs	r1, #64	@ 0x40
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	23e0      	movs	r3, #224	@ 0xe0
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	429a      	cmp	r2, r3
 80047e0:	d800      	bhi.n	80047e4 <HAL_SPI_TransmitReceive+0x154>
 80047e2:	e083      	b.n	80048ec <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_SPI_TransmitReceive+0x168>
 80047ec:	2312      	movs	r3, #18
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d000      	beq.n	80047f8 <HAL_SPI_TransmitReceive+0x168>
 80047f6:	e06d      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fc:	881a      	ldrh	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	1c9a      	adds	r2, r3, #2
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800481c:	e05a      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2202      	movs	r2, #2
 8004826:	4013      	ands	r3, r2
 8004828:	2b02      	cmp	r3, #2
 800482a:	d11b      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x1d4>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d016      	beq.n	8004864 <HAL_SPI_TransmitReceive+0x1d4>
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	2b01      	cmp	r3, #1
 800483a:	d113      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	881a      	ldrh	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	1c9a      	adds	r2, r3, #2
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2201      	movs	r2, #1
 800486c:	4013      	ands	r3, r2
 800486e:	2b01      	cmp	r3, #1
 8004870:	d11c      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x21c>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2246      	movs	r2, #70	@ 0x46
 8004876:	5a9b      	ldrh	r3, [r3, r2]
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d016      	beq.n	80048ac <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004888:	b292      	uxth	r2, r2
 800488a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004890:	1c9a      	adds	r2, r3, #2
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2246      	movs	r2, #70	@ 0x46
 800489a:	5a9b      	ldrh	r3, [r3, r2]
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b299      	uxth	r1, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2246      	movs	r2, #70	@ 0x46
 80048a6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80048a8:	2301      	movs	r3, #1
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80048ac:	f7fc ff54 	bl	8001758 <HAL_GetTick>
 80048b0:	0002      	movs	r2, r0
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d80b      	bhi.n	80048d4 <HAL_SPI_TransmitReceive+0x244>
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	3301      	adds	r3, #1
 80048c0:	d008      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80048c2:	2323      	movs	r3, #35	@ 0x23
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2203      	movs	r2, #3
 80048c8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	225d      	movs	r2, #93	@ 0x5d
 80048ce:	2101      	movs	r1, #1
 80048d0:	5499      	strb	r1, [r3, r2]
        goto error;
 80048d2:	e0b1      	b.n	8004a38 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d19f      	bne.n	800481e <HAL_SPI_TransmitReceive+0x18e>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2246      	movs	r2, #70	@ 0x46
 80048e2:	5a9b      	ldrh	r3, [r3, r2]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d199      	bne.n	800481e <HAL_SPI_TransmitReceive+0x18e>
 80048ea:	e089      	b.n	8004a00 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x270>
 80048f4:	2312      	movs	r3, #18
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d000      	beq.n	8004900 <HAL_SPI_TransmitReceive+0x270>
 80048fe:	e074      	b.n	80049ea <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004926:	e060      	b.n	80049ea <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	2202      	movs	r2, #2
 8004930:	4013      	ands	r3, r2
 8004932:	2b02      	cmp	r3, #2
 8004934:	d11c      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x2e0>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d017      	beq.n	8004970 <HAL_SPI_TransmitReceive+0x2e0>
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004942:	2b01      	cmp	r3, #1
 8004944:	d114      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	330c      	adds	r3, #12
 8004950:	7812      	ldrb	r2, [r2, #0]
 8004952:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2201      	movs	r2, #1
 8004978:	4013      	ands	r3, r2
 800497a:	2b01      	cmp	r3, #1
 800497c:	d11e      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x32c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2246      	movs	r2, #70	@ 0x46
 8004982:	5a9b      	ldrh	r3, [r3, r2]
 8004984:	b29b      	uxth	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d018      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	001a      	movs	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	7812      	ldrb	r2, [r2, #0]
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2246      	movs	r2, #70	@ 0x46
 80049aa:	5a9b      	ldrh	r3, [r3, r2]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b299      	uxth	r1, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2246      	movs	r2, #70	@ 0x46
 80049b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049b8:	2301      	movs	r3, #1
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049bc:	f7fc fecc 	bl	8001758 <HAL_GetTick>
 80049c0:	0002      	movs	r2, r0
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d802      	bhi.n	80049d2 <HAL_SPI_TransmitReceive+0x342>
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	3301      	adds	r3, #1
 80049d0:	d102      	bne.n	80049d8 <HAL_SPI_TransmitReceive+0x348>
 80049d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d108      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80049d8:	2323      	movs	r3, #35	@ 0x23
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	2203      	movs	r2, #3
 80049de:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	225d      	movs	r2, #93	@ 0x5d
 80049e4:	2101      	movs	r1, #1
 80049e6:	5499      	strb	r1, [r3, r2]
        goto error;
 80049e8:	e026      	b.n	8004a38 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d199      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x298>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2246      	movs	r2, #70	@ 0x46
 80049f8:	5a9b      	ldrh	r3, [r3, r2]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d193      	bne.n	8004928 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	0018      	movs	r0, r3
 8004a08:	f000 f954 	bl	8004cb4 <SPI_EndRxTxTransaction>
 8004a0c:	1e03      	subs	r3, r0, #0
 8004a0e:	d006      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8004a10:	2323      	movs	r3, #35	@ 0x23
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d004      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8004a26:	2323      	movs	r3, #35	@ 0x23
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	e003      	b.n	8004a38 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	225d      	movs	r2, #93	@ 0x5d
 8004a34:	2101      	movs	r1, #1
 8004a36:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	225c      	movs	r2, #92	@ 0x5c
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a40:	2323      	movs	r3, #35	@ 0x23
 8004a42:	18fb      	adds	r3, r7, r3
 8004a44:	781b      	ldrb	r3, [r3, #0]
}
 8004a46:	0018      	movs	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b00a      	add	sp, #40	@ 0x28
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	ffffefff 	.word	0xffffefff

08004a54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	1dfb      	adds	r3, r7, #7
 8004a62:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a64:	f7fc fe78 	bl	8001758 <HAL_GetTick>
 8004a68:	0002      	movs	r2, r0
 8004a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	18d3      	adds	r3, r2, r3
 8004a72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a74:	f7fc fe70 	bl	8001758 <HAL_GetTick>
 8004a78:	0003      	movs	r3, r0
 8004a7a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b68 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	015b      	lsls	r3, r3, #5
 8004a82:	0d1b      	lsrs	r3, r3, #20
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	4353      	muls	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a8a:	e058      	b.n	8004b3e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	d055      	beq.n	8004b3e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a92:	f7fc fe61 	bl	8001758 <HAL_GetTick>
 8004a96:	0002      	movs	r2, r0
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d902      	bls.n	8004aa8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d142      	bne.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	21e0      	movs	r1, #224	@ 0xe0
 8004ab4:	438a      	bics	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	2382      	movs	r3, #130	@ 0x82
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d113      	bne.n	8004aec <SPI_WaitFlagStateUntilTimeout+0x98>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d005      	beq.n	8004adc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	2380      	movs	r3, #128	@ 0x80
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d107      	bne.n	8004aec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2140      	movs	r1, #64	@ 0x40
 8004ae8:	438a      	bics	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004af0:	2380      	movs	r3, #128	@ 0x80
 8004af2:	019b      	lsls	r3, r3, #6
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d110      	bne.n	8004b1a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	491a      	ldr	r1, [pc, #104]	@ (8004b6c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2180      	movs	r1, #128	@ 0x80
 8004b14:	0189      	lsls	r1, r1, #6
 8004b16:	430a      	orrs	r2, r1
 8004b18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	225d      	movs	r2, #93	@ 0x5d
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	225c      	movs	r2, #92	@ 0x5c
 8004b26:	2100      	movs	r1, #0
 8004b28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e017      	b.n	8004b5e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	4013      	ands	r3, r2
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	425a      	negs	r2, r3
 8004b4e:	4153      	adcs	r3, r2
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	001a      	movs	r2, r3
 8004b54:	1dfb      	adds	r3, r7, #7
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d197      	bne.n	8004a8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	0018      	movs	r0, r3
 8004b60:	46bd      	mov	sp, r7
 8004b62:	b008      	add	sp, #32
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	200000c0 	.word	0x200000c0
 8004b6c:	ffffdfff 	.word	0xffffdfff

08004b70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08a      	sub	sp, #40	@ 0x28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b7e:	2317      	movs	r3, #23
 8004b80:	18fb      	adds	r3, r7, r3
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b86:	f7fc fde7 	bl	8001758 <HAL_GetTick>
 8004b8a:	0002      	movs	r2, r0
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	18d3      	adds	r3, r2, r3
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004b96:	f7fc fddf 	bl	8001758 <HAL_GetTick>
 8004b9a:	0003      	movs	r3, r0
 8004b9c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ba6:	4b41      	ldr	r3, [pc, #260]	@ (8004cac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	0013      	movs	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	189b      	adds	r3, r3, r2
 8004bb0:	00da      	lsls	r2, r3, #3
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	0d1b      	lsrs	r3, r3, #20
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb8:	4353      	muls	r3, r2
 8004bba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bbc:	e068      	b.n	8004c90 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	23c0      	movs	r3, #192	@ 0xc0
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d10a      	bne.n	8004bde <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d107      	bne.n	8004bde <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	2117      	movs	r1, #23
 8004bd6:	187b      	adds	r3, r7, r1
 8004bd8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	d055      	beq.n	8004c90 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004be4:	f7fc fdb8 	bl	8001758 <HAL_GetTick>
 8004be8:	0002      	movs	r2, r0
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d902      	bls.n	8004bfa <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d142      	bne.n	8004c80 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	21e0      	movs	r1, #224	@ 0xe0
 8004c06:	438a      	bics	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	2382      	movs	r3, #130	@ 0x82
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d113      	bne.n	8004c3e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	2380      	movs	r3, #128	@ 0x80
 8004c1c:	021b      	lsls	r3, r3, #8
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d005      	beq.n	8004c2e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	2380      	movs	r3, #128	@ 0x80
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d107      	bne.n	8004c3e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2140      	movs	r1, #64	@ 0x40
 8004c3a:	438a      	bics	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	019b      	lsls	r3, r3, #6
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d110      	bne.n	8004c6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4916      	ldr	r1, [pc, #88]	@ (8004cb0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004c56:	400a      	ands	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2180      	movs	r1, #128	@ 0x80
 8004c66:	0189      	lsls	r1, r1, #6
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	225d      	movs	r2, #93	@ 0x5d
 8004c70:	2101      	movs	r1, #1
 8004c72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	225c      	movs	r2, #92	@ 0x5c
 8004c78:	2100      	movs	r1, #0
 8004c7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e010      	b.n	8004ca2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d18e      	bne.n	8004bbe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b00a      	add	sp, #40	@ 0x28
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	200000c0 	.word	0x200000c0
 8004cb0:	ffffdfff 	.word	0xffffdfff

08004cb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	23c0      	movs	r3, #192	@ 0xc0
 8004cc4:	0159      	lsls	r1, r3, #5
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	0013      	movs	r3, r2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f7ff ff4e 	bl	8004b70 <SPI_WaitFifoStateUntilTimeout>
 8004cd4:	1e03      	subs	r3, r0, #0
 8004cd6:	d007      	beq.n	8004ce8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cdc:	2220      	movs	r2, #32
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e027      	b.n	8004d38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	0013      	movs	r3, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2180      	movs	r1, #128	@ 0x80
 8004cf6:	f7ff fead 	bl	8004a54 <SPI_WaitFlagStateUntilTimeout>
 8004cfa:	1e03      	subs	r3, r0, #0
 8004cfc:	d007      	beq.n	8004d0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d02:	2220      	movs	r2, #32
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e014      	b.n	8004d38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	23c0      	movs	r3, #192	@ 0xc0
 8004d12:	00d9      	lsls	r1, r3, #3
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	0013      	movs	r3, r2
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f7ff ff27 	bl	8004b70 <SPI_WaitFifoStateUntilTimeout>
 8004d22:	1e03      	subs	r3, r0, #0
 8004d24:	d007      	beq.n	8004d36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e000      	b.n	8004d38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	0018      	movs	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	b004      	add	sp, #16
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e04a      	b.n	8004de8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	223d      	movs	r2, #61	@ 0x3d
 8004d56:	5c9b      	ldrb	r3, [r3, r2]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d107      	bne.n	8004d6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	223c      	movs	r2, #60	@ 0x3c
 8004d62:	2100      	movs	r1, #0
 8004d64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f7fc fb45 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	223d      	movs	r2, #61	@ 0x3d
 8004d72:	2102      	movs	r1, #2
 8004d74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	0019      	movs	r1, r3
 8004d80:	0010      	movs	r0, r2
 8004d82:	f000 fb13 	bl	80053ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2248      	movs	r2, #72	@ 0x48
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	223e      	movs	r2, #62	@ 0x3e
 8004d92:	2101      	movs	r1, #1
 8004d94:	5499      	strb	r1, [r3, r2]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	223f      	movs	r2, #63	@ 0x3f
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	5499      	strb	r1, [r3, r2]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2240      	movs	r2, #64	@ 0x40
 8004da2:	2101      	movs	r1, #1
 8004da4:	5499      	strb	r1, [r3, r2]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2241      	movs	r2, #65	@ 0x41
 8004daa:	2101      	movs	r1, #1
 8004dac:	5499      	strb	r1, [r3, r2]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2242      	movs	r2, #66	@ 0x42
 8004db2:	2101      	movs	r1, #1
 8004db4:	5499      	strb	r1, [r3, r2]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2243      	movs	r2, #67	@ 0x43
 8004dba:	2101      	movs	r1, #1
 8004dbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2244      	movs	r2, #68	@ 0x44
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	5499      	strb	r1, [r3, r2]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2245      	movs	r2, #69	@ 0x45
 8004dca:	2101      	movs	r1, #1
 8004dcc:	5499      	strb	r1, [r3, r2]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2246      	movs	r2, #70	@ 0x46
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	5499      	strb	r1, [r3, r2]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2247      	movs	r2, #71	@ 0x47
 8004dda:	2101      	movs	r1, #1
 8004ddc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	223d      	movs	r2, #61	@ 0x3d
 8004de2:	2101      	movs	r1, #1
 8004de4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	0018      	movs	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b002      	add	sp, #8
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	223d      	movs	r2, #61	@ 0x3d
 8004dfc:	5c9b      	ldrb	r3, [r3, r2]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e03c      	b.n	8004e82 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	223d      	movs	r2, #61	@ 0x3d
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a19      	ldr	r2, [pc, #100]	@ (8004e8c <HAL_TIM_Base_Start_IT+0x9c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_TIM_Base_Start_IT+0x4e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a18      	ldr	r2, [pc, #96]	@ (8004e90 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_TIM_Base_Start_IT+0x4e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <HAL_TIM_Base_Start_IT+0xa4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d116      	bne.n	8004e6c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a14      	ldr	r2, [pc, #80]	@ (8004e98 <HAL_TIM_Base_Start_IT+0xa8>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b06      	cmp	r3, #6
 8004e4e:	d016      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x8e>
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	2380      	movs	r3, #128	@ 0x80
 8004e54:	025b      	lsls	r3, r3, #9
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d011      	beq.n	8004e7e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2101      	movs	r1, #1
 8004e66:	430a      	orrs	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	e008      	b.n	8004e7e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2101      	movs	r1, #1
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	e000      	b.n	8004e80 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	0018      	movs	r0, r3
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b004      	add	sp, #16
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	46c0      	nop			@ (mov r8, r8)
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40000400 	.word	0x40000400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	00010007 	.word	0x00010007

08004e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e04a      	b.n	8004f44 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	223d      	movs	r2, #61	@ 0x3d
 8004eb2:	5c9b      	ldrb	r3, [r3, r2]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	223c      	movs	r2, #60	@ 0x3c
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 f841 	bl	8004f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	223d      	movs	r2, #61	@ 0x3d
 8004ece:	2102      	movs	r1, #2
 8004ed0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	0019      	movs	r1, r3
 8004edc:	0010      	movs	r0, r2
 8004ede:	f000 fa65 	bl	80053ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2248      	movs	r2, #72	@ 0x48
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	223e      	movs	r2, #62	@ 0x3e
 8004eee:	2101      	movs	r1, #1
 8004ef0:	5499      	strb	r1, [r3, r2]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	223f      	movs	r2, #63	@ 0x3f
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	5499      	strb	r1, [r3, r2]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2240      	movs	r2, #64	@ 0x40
 8004efe:	2101      	movs	r1, #1
 8004f00:	5499      	strb	r1, [r3, r2]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2241      	movs	r2, #65	@ 0x41
 8004f06:	2101      	movs	r1, #1
 8004f08:	5499      	strb	r1, [r3, r2]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2242      	movs	r2, #66	@ 0x42
 8004f0e:	2101      	movs	r1, #1
 8004f10:	5499      	strb	r1, [r3, r2]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2243      	movs	r2, #67	@ 0x43
 8004f16:	2101      	movs	r1, #1
 8004f18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2244      	movs	r2, #68	@ 0x44
 8004f1e:	2101      	movs	r1, #1
 8004f20:	5499      	strb	r1, [r3, r2]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2245      	movs	r2, #69	@ 0x45
 8004f26:	2101      	movs	r1, #1
 8004f28:	5499      	strb	r1, [r3, r2]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2246      	movs	r2, #70	@ 0x46
 8004f2e:	2101      	movs	r1, #1
 8004f30:	5499      	strb	r1, [r3, r2]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2247      	movs	r2, #71	@ 0x47
 8004f36:	2101      	movs	r1, #1
 8004f38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	223d      	movs	r2, #61	@ 0x3d
 8004f3e:	2101      	movs	r1, #1
 8004f40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	0018      	movs	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	b002      	add	sp, #8
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f54:	46c0      	nop			@ (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	2202      	movs	r2, #2
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d021      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	4013      	ands	r3, r2
 8004f82:	d01d      	beq.n	8004fc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2203      	movs	r2, #3
 8004f8a:	4252      	negs	r2, r2
 8004f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 f9ea 	bl	800537c <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e007      	b.n	8004fba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f000 f9dd 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 f9e9 	bl	800538c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d022      	beq.n	800500e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d01e      	beq.n	800500e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2205      	movs	r2, #5
 8004fd6:	4252      	negs	r2, r2
 8004fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	23c0      	movs	r3, #192	@ 0xc0
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4013      	ands	r3, r2
 8004fec:	d004      	beq.n	8004ff8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f000 f9c3 	bl	800537c <HAL_TIM_IC_CaptureCallback>
 8004ff6:	e007      	b.n	8005008 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f000 f9b6 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	0018      	movs	r0, r3
 8005004:	f000 f9c2 	bl	800538c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2208      	movs	r2, #8
 8005012:	4013      	ands	r3, r2
 8005014:	d021      	beq.n	800505a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2208      	movs	r2, #8
 800501a:	4013      	ands	r3, r2
 800501c:	d01d      	beq.n	800505a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2209      	movs	r2, #9
 8005024:	4252      	negs	r2, r2
 8005026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2204      	movs	r2, #4
 800502c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2203      	movs	r2, #3
 8005036:	4013      	ands	r3, r2
 8005038:	d004      	beq.n	8005044 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 f99d 	bl	800537c <HAL_TIM_IC_CaptureCallback>
 8005042:	e007      	b.n	8005054 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	0018      	movs	r0, r3
 8005048:	f000 f990 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	0018      	movs	r0, r3
 8005050:	f000 f99c 	bl	800538c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2210      	movs	r2, #16
 800505e:	4013      	ands	r3, r2
 8005060:	d022      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2210      	movs	r2, #16
 8005066:	4013      	ands	r3, r2
 8005068:	d01e      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2211      	movs	r2, #17
 8005070:	4252      	negs	r2, r2
 8005072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2208      	movs	r2, #8
 8005078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	23c0      	movs	r3, #192	@ 0xc0
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4013      	ands	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	0018      	movs	r0, r3
 800508c:	f000 f976 	bl	800537c <HAL_TIM_IC_CaptureCallback>
 8005090:	e007      	b.n	80050a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	0018      	movs	r0, r3
 8005096:	f000 f969 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 f975 	bl	800538c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2201      	movs	r2, #1
 80050ac:	4013      	ands	r3, r2
 80050ae:	d00c      	beq.n	80050ca <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	4013      	ands	r3, r2
 80050b6:	d008      	beq.n	80050ca <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2202      	movs	r2, #2
 80050be:	4252      	negs	r2, r2
 80050c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	0018      	movs	r0, r3
 80050c6:	f7fb ff1b 	bl	8000f00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2280      	movs	r2, #128	@ 0x80
 80050ce:	4013      	ands	r3, r2
 80050d0:	d104      	bne.n	80050dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	2380      	movs	r3, #128	@ 0x80
 80050d6:	019b      	lsls	r3, r3, #6
 80050d8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80050da:	d00b      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2280      	movs	r2, #128	@ 0x80
 80050e0:	4013      	ands	r3, r2
 80050e2:	d007      	beq.n	80050f4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005164 <HAL_TIM_IRQHandler+0x208>)
 80050ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	0018      	movs	r0, r3
 80050f0:	f000 fcac 	bl	8005a4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	2380      	movs	r3, #128	@ 0x80
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	4013      	ands	r3, r2
 80050fc:	d00b      	beq.n	8005116 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2280      	movs	r2, #128	@ 0x80
 8005102:	4013      	ands	r3, r2
 8005104:	d007      	beq.n	8005116 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a17      	ldr	r2, [pc, #92]	@ (8005168 <HAL_TIM_IRQHandler+0x20c>)
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	0018      	movs	r0, r3
 8005112:	f000 fca3 	bl	8005a5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2240      	movs	r2, #64	@ 0x40
 800511a:	4013      	ands	r3, r2
 800511c:	d00c      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2240      	movs	r2, #64	@ 0x40
 8005122:	4013      	ands	r3, r2
 8005124:	d008      	beq.n	8005138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2241      	movs	r2, #65	@ 0x41
 800512c:	4252      	negs	r2, r2
 800512e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	0018      	movs	r0, r3
 8005134:	f000 f932 	bl	800539c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	2220      	movs	r2, #32
 800513c:	4013      	ands	r3, r2
 800513e:	d00c      	beq.n	800515a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	4013      	ands	r3, r2
 8005146:	d008      	beq.n	800515a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2221      	movs	r2, #33	@ 0x21
 800514e:	4252      	negs	r2, r2
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0018      	movs	r0, r3
 8005156:	f000 fc71 	bl	8005a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	ffffdf7f 	.word	0xffffdf7f
 8005168:	fffffeff 	.word	0xfffffeff

0800516c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005178:	2317      	movs	r3, #23
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	223c      	movs	r2, #60	@ 0x3c
 8005184:	5c9b      	ldrb	r3, [r3, r2]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d101      	bne.n	800518e <HAL_TIM_PWM_ConfigChannel+0x22>
 800518a:	2302      	movs	r3, #2
 800518c:	e0e5      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	223c      	movs	r2, #60	@ 0x3c
 8005192:	2101      	movs	r1, #1
 8005194:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b14      	cmp	r3, #20
 800519a:	d900      	bls.n	800519e <HAL_TIM_PWM_ConfigChannel+0x32>
 800519c:	e0d1      	b.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	009a      	lsls	r2, r3, #2
 80051a2:	4b70      	ldr	r3, [pc, #448]	@ (8005364 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80051a4:	18d3      	adds	r3, r2, r3
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	0011      	movs	r1, r2
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f97e 	bl	80054b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	699a      	ldr	r2, [r3, #24]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2108      	movs	r1, #8
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2104      	movs	r1, #4
 80051d4:	438a      	bics	r2, r1
 80051d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6999      	ldr	r1, [r3, #24]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	619a      	str	r2, [r3, #24]
      break;
 80051ea:	e0af      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	0011      	movs	r1, r2
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 f9e7 	bl	80055c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699a      	ldr	r2, [r3, #24]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2180      	movs	r1, #128	@ 0x80
 8005206:	0109      	lsls	r1, r1, #4
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4954      	ldr	r1, [pc, #336]	@ (8005368 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005218:	400a      	ands	r2, r1
 800521a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6999      	ldr	r1, [r3, #24]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	021a      	lsls	r2, r3, #8
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	619a      	str	r2, [r3, #24]
      break;
 8005230:	e08c      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	0011      	movs	r1, r2
 800523a:	0018      	movs	r0, r3
 800523c:	f000 fa48 	bl	80056d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2108      	movs	r1, #8
 800524c:	430a      	orrs	r2, r1
 800524e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69da      	ldr	r2, [r3, #28]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2104      	movs	r1, #4
 800525c:	438a      	bics	r2, r1
 800525e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69d9      	ldr	r1, [r3, #28]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	61da      	str	r2, [r3, #28]
      break;
 8005272:	e06b      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	0011      	movs	r1, r2
 800527c:	0018      	movs	r0, r3
 800527e:	f000 faaf 	bl	80057e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2180      	movs	r1, #128	@ 0x80
 800528e:	0109      	lsls	r1, r1, #4
 8005290:	430a      	orrs	r2, r1
 8005292:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4932      	ldr	r1, [pc, #200]	@ (8005368 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80052a0:	400a      	ands	r2, r1
 80052a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69d9      	ldr	r1, [r3, #28]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	021a      	lsls	r2, r3, #8
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	61da      	str	r2, [r3, #28]
      break;
 80052b8:	e048      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0011      	movs	r1, r2
 80052c2:	0018      	movs	r0, r3
 80052c4:	f000 faf6 	bl	80058b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2108      	movs	r1, #8
 80052d4:	430a      	orrs	r2, r1
 80052d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2104      	movs	r1, #4
 80052e4:	438a      	bics	r2, r1
 80052e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052fa:	e027      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	0011      	movs	r1, r2
 8005304:	0018      	movs	r0, r3
 8005306:	f000 fb35 	bl	8005974 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2180      	movs	r1, #128	@ 0x80
 8005316:	0109      	lsls	r1, r1, #4
 8005318:	430a      	orrs	r2, r1
 800531a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4910      	ldr	r1, [pc, #64]	@ (8005368 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005328:	400a      	ands	r2, r1
 800532a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	021a      	lsls	r2, r3, #8
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005340:	e004      	b.n	800534c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005342:	2317      	movs	r3, #23
 8005344:	18fb      	adds	r3, r7, r3
 8005346:	2201      	movs	r2, #1
 8005348:	701a      	strb	r2, [r3, #0]
      break;
 800534a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	223c      	movs	r2, #60	@ 0x3c
 8005350:	2100      	movs	r1, #0
 8005352:	5499      	strb	r1, [r3, r2]

  return status;
 8005354:	2317      	movs	r3, #23
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	781b      	ldrb	r3, [r3, #0]
}
 800535a:	0018      	movs	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	b006      	add	sp, #24
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			@ (mov r8, r8)
 8005364:	0800d7c0 	.word	0x0800d7c0
 8005368:	fffffbff 	.word	0xfffffbff

0800536c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005374:	46c0      	nop			@ (mov r8, r8)
 8005376:	46bd      	mov	sp, r7
 8005378:	b002      	add	sp, #8
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005384:	46c0      	nop			@ (mov r8, r8)
 8005386:	46bd      	mov	sp, r7
 8005388:	b002      	add	sp, #8
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005394:	46c0      	nop			@ (mov r8, r8)
 8005396:	46bd      	mov	sp, r7
 8005398:	b002      	add	sp, #8
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053a4:	46c0      	nop			@ (mov r8, r8)
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b002      	add	sp, #8
 80053aa:	bd80      	pop	{r7, pc}

080053ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a36      	ldr	r2, [pc, #216]	@ (8005498 <TIM_Base_SetConfig+0xec>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_Base_SetConfig+0x20>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a35      	ldr	r2, [pc, #212]	@ (800549c <TIM_Base_SetConfig+0xf0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2270      	movs	r2, #112	@ 0x70
 80053d0:	4393      	bics	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005498 <TIM_Base_SetConfig+0xec>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <TIM_Base_SetConfig+0x62>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2c      	ldr	r2, [pc, #176]	@ (800549c <TIM_Base_SetConfig+0xf0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00f      	beq.n	800540e <TIM_Base_SetConfig+0x62>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2b      	ldr	r2, [pc, #172]	@ (80054a0 <TIM_Base_SetConfig+0xf4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00b      	beq.n	800540e <TIM_Base_SetConfig+0x62>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a2a      	ldr	r2, [pc, #168]	@ (80054a4 <TIM_Base_SetConfig+0xf8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <TIM_Base_SetConfig+0x62>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a29      	ldr	r2, [pc, #164]	@ (80054a8 <TIM_Base_SetConfig+0xfc>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_Base_SetConfig+0x62>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a28      	ldr	r2, [pc, #160]	@ (80054ac <TIM_Base_SetConfig+0x100>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a27      	ldr	r2, [pc, #156]	@ (80054b0 <TIM_Base_SetConfig+0x104>)
 8005412:	4013      	ands	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2280      	movs	r2, #128	@ 0x80
 8005424:	4393      	bics	r3, r2
 8005426:	001a      	movs	r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a13      	ldr	r2, [pc, #76]	@ (8005498 <TIM_Base_SetConfig+0xec>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00b      	beq.n	8005466 <TIM_Base_SetConfig+0xba>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a14      	ldr	r2, [pc, #80]	@ (80054a4 <TIM_Base_SetConfig+0xf8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d007      	beq.n	8005466 <TIM_Base_SetConfig+0xba>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a13      	ldr	r2, [pc, #76]	@ (80054a8 <TIM_Base_SetConfig+0xfc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d003      	beq.n	8005466 <TIM_Base_SetConfig+0xba>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a12      	ldr	r2, [pc, #72]	@ (80054ac <TIM_Base_SetConfig+0x100>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d103      	bne.n	800546e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	2201      	movs	r2, #1
 800547a:	4013      	ands	r3, r2
 800547c:	2b01      	cmp	r3, #1
 800547e:	d106      	bne.n	800548e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2201      	movs	r2, #1
 8005486:	4393      	bics	r3, r2
 8005488:	001a      	movs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	611a      	str	r2, [r3, #16]
  }
}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	46bd      	mov	sp, r7
 8005492:	b004      	add	sp, #16
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			@ (mov r8, r8)
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40000400 	.word	0x40000400
 80054a0:	40002000 	.word	0x40002000
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800
 80054b0:	fffffcff 	.word	0xfffffcff

080054b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4393      	bics	r3, r2
 80054cc:	001a      	movs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4a32      	ldr	r2, [pc, #200]	@ (80055ac <TIM_OC1_SetConfig+0xf8>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2203      	movs	r2, #3
 80054ea:	4393      	bics	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2202      	movs	r2, #2
 80054fc:	4393      	bics	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a28      	ldr	r2, [pc, #160]	@ (80055b0 <TIM_OC1_SetConfig+0xfc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d00b      	beq.n	800552a <TIM_OC1_SetConfig+0x76>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a27      	ldr	r2, [pc, #156]	@ (80055b4 <TIM_OC1_SetConfig+0x100>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d007      	beq.n	800552a <TIM_OC1_SetConfig+0x76>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a26      	ldr	r2, [pc, #152]	@ (80055b8 <TIM_OC1_SetConfig+0x104>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d003      	beq.n	800552a <TIM_OC1_SetConfig+0x76>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <TIM_OC1_SetConfig+0x108>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d10c      	bne.n	8005544 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2208      	movs	r2, #8
 800552e:	4393      	bics	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4313      	orrs	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2204      	movs	r2, #4
 8005540:	4393      	bics	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a1a      	ldr	r2, [pc, #104]	@ (80055b0 <TIM_OC1_SetConfig+0xfc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d00b      	beq.n	8005564 <TIM_OC1_SetConfig+0xb0>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a19      	ldr	r2, [pc, #100]	@ (80055b4 <TIM_OC1_SetConfig+0x100>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d007      	beq.n	8005564 <TIM_OC1_SetConfig+0xb0>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a18      	ldr	r2, [pc, #96]	@ (80055b8 <TIM_OC1_SetConfig+0x104>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_OC1_SetConfig+0xb0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a17      	ldr	r2, [pc, #92]	@ (80055bc <TIM_OC1_SetConfig+0x108>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d111      	bne.n	8005588 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <TIM_OC1_SetConfig+0x10c>)
 8005568:	4013      	ands	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	4a15      	ldr	r2, [pc, #84]	@ (80055c4 <TIM_OC1_SetConfig+0x110>)
 8005570:	4013      	ands	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4313      	orrs	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b006      	add	sp, #24
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	fffeff8f 	.word	0xfffeff8f
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800
 80055c0:	fffffeff 	.word	0xfffffeff
 80055c4:	fffffdff 	.word	0xfffffdff

080055c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	2210      	movs	r2, #16
 80055de:	4393      	bics	r3, r2
 80055e0:	001a      	movs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4a2e      	ldr	r2, [pc, #184]	@ (80056b0 <TIM_OC2_SetConfig+0xe8>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a2d      	ldr	r2, [pc, #180]	@ (80056b4 <TIM_OC2_SetConfig+0xec>)
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2220      	movs	r2, #32
 8005612:	4393      	bics	r3, r2
 8005614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a24      	ldr	r2, [pc, #144]	@ (80056b8 <TIM_OC2_SetConfig+0xf0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10d      	bne.n	8005646 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2280      	movs	r2, #128	@ 0x80
 800562e:	4393      	bics	r3, r2
 8005630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2240      	movs	r2, #64	@ 0x40
 8005642:	4393      	bics	r3, r2
 8005644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1b      	ldr	r2, [pc, #108]	@ (80056b8 <TIM_OC2_SetConfig+0xf0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_OC2_SetConfig+0x9e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1a      	ldr	r2, [pc, #104]	@ (80056bc <TIM_OC2_SetConfig+0xf4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_OC2_SetConfig+0x9e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a19      	ldr	r2, [pc, #100]	@ (80056c0 <TIM_OC2_SetConfig+0xf8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_OC2_SetConfig+0x9e>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a18      	ldr	r2, [pc, #96]	@ (80056c4 <TIM_OC2_SetConfig+0xfc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d113      	bne.n	800568e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4a17      	ldr	r2, [pc, #92]	@ (80056c8 <TIM_OC2_SetConfig+0x100>)
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4a16      	ldr	r2, [pc, #88]	@ (80056cc <TIM_OC2_SetConfig+0x104>)
 8005672:	4013      	ands	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	621a      	str	r2, [r3, #32]
}
 80056a8:	46c0      	nop			@ (mov r8, r8)
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b006      	add	sp, #24
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	feff8fff 	.word	0xfeff8fff
 80056b4:	fffffcff 	.word	0xfffffcff
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800
 80056c8:	fffffbff 	.word	0xfffffbff
 80056cc:	fffff7ff 	.word	0xfffff7ff

080056d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	4a33      	ldr	r2, [pc, #204]	@ (80057b4 <TIM_OC3_SetConfig+0xe4>)
 80056e6:	401a      	ands	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a2f      	ldr	r2, [pc, #188]	@ (80057b8 <TIM_OC3_SetConfig+0xe8>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2203      	movs	r2, #3
 8005704:	4393      	bics	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	4a29      	ldr	r2, [pc, #164]	@ (80057bc <TIM_OC3_SetConfig+0xec>)
 8005716:	4013      	ands	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a25      	ldr	r2, [pc, #148]	@ (80057c0 <TIM_OC3_SetConfig+0xf0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10d      	bne.n	800574a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	4a24      	ldr	r2, [pc, #144]	@ (80057c4 <TIM_OC3_SetConfig+0xf4>)
 8005732:	4013      	ands	r3, r2
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	4a20      	ldr	r2, [pc, #128]	@ (80057c8 <TIM_OC3_SetConfig+0xf8>)
 8005746:	4013      	ands	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1c      	ldr	r2, [pc, #112]	@ (80057c0 <TIM_OC3_SetConfig+0xf0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_OC3_SetConfig+0x9a>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1d      	ldr	r2, [pc, #116]	@ (80057cc <TIM_OC3_SetConfig+0xfc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <TIM_OC3_SetConfig+0x9a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a1c      	ldr	r2, [pc, #112]	@ (80057d0 <TIM_OC3_SetConfig+0x100>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_OC3_SetConfig+0x9a>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a1b      	ldr	r2, [pc, #108]	@ (80057d4 <TIM_OC3_SetConfig+0x104>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d113      	bne.n	8005792 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	4a1a      	ldr	r2, [pc, #104]	@ (80057d8 <TIM_OC3_SetConfig+0x108>)
 800576e:	4013      	ands	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4a19      	ldr	r2, [pc, #100]	@ (80057dc <TIM_OC3_SetConfig+0x10c>)
 8005776:	4013      	ands	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	46c0      	nop			@ (mov r8, r8)
 80057ae:	46bd      	mov	sp, r7
 80057b0:	b006      	add	sp, #24
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	fffffeff 	.word	0xfffffeff
 80057b8:	fffeff8f 	.word	0xfffeff8f
 80057bc:	fffffdff 	.word	0xfffffdff
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	fffff7ff 	.word	0xfffff7ff
 80057c8:	fffffbff 	.word	0xfffffbff
 80057cc:	40014000 	.word	0x40014000
 80057d0:	40014400 	.word	0x40014400
 80057d4:	40014800 	.word	0x40014800
 80057d8:	ffffefff 	.word	0xffffefff
 80057dc:	ffffdfff 	.word	0xffffdfff

080057e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	4a26      	ldr	r2, [pc, #152]	@ (8005890 <TIM_OC4_SetConfig+0xb0>)
 80057f6:	401a      	ands	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a22      	ldr	r2, [pc, #136]	@ (8005894 <TIM_OC4_SetConfig+0xb4>)
 800580c:	4013      	ands	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a21      	ldr	r2, [pc, #132]	@ (8005898 <TIM_OC4_SetConfig+0xb8>)
 8005814:	4013      	ands	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	021b      	lsls	r3, r3, #8
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4a1d      	ldr	r2, [pc, #116]	@ (800589c <TIM_OC4_SetConfig+0xbc>)
 8005828:	4013      	ands	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	031b      	lsls	r3, r3, #12
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a19      	ldr	r2, [pc, #100]	@ (80058a0 <TIM_OC4_SetConfig+0xc0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_OC4_SetConfig+0x78>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a18      	ldr	r2, [pc, #96]	@ (80058a4 <TIM_OC4_SetConfig+0xc4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_OC4_SetConfig+0x78>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a17      	ldr	r2, [pc, #92]	@ (80058a8 <TIM_OC4_SetConfig+0xc8>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_OC4_SetConfig+0x78>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <TIM_OC4_SetConfig+0xcc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d109      	bne.n	800586c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	4a15      	ldr	r2, [pc, #84]	@ (80058b0 <TIM_OC4_SetConfig+0xd0>)
 800585c:	4013      	ands	r3, r2
 800585e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	019b      	lsls	r3, r3, #6
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b006      	add	sp, #24
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	ffffefff 	.word	0xffffefff
 8005894:	feff8fff 	.word	0xfeff8fff
 8005898:	fffffcff 	.word	0xfffffcff
 800589c:	ffffdfff 	.word	0xffffdfff
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40014000 	.word	0x40014000
 80058a8:	40014400 	.word	0x40014400
 80058ac:	40014800 	.word	0x40014800
 80058b0:	ffffbfff 	.word	0xffffbfff

080058b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	4a23      	ldr	r2, [pc, #140]	@ (8005958 <TIM_OC5_SetConfig+0xa4>)
 80058ca:	401a      	ands	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4a1f      	ldr	r2, [pc, #124]	@ (800595c <TIM_OC5_SetConfig+0xa8>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005960 <TIM_OC5_SetConfig+0xac>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	041b      	lsls	r3, r3, #16
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a17      	ldr	r2, [pc, #92]	@ (8005964 <TIM_OC5_SetConfig+0xb0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_OC5_SetConfig+0x6e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a16      	ldr	r2, [pc, #88]	@ (8005968 <TIM_OC5_SetConfig+0xb4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_OC5_SetConfig+0x6e>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a15      	ldr	r2, [pc, #84]	@ (800596c <TIM_OC5_SetConfig+0xb8>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC5_SetConfig+0x6e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a14      	ldr	r2, [pc, #80]	@ (8005970 <TIM_OC5_SetConfig+0xbc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d109      	bne.n	8005936 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	4a0c      	ldr	r2, [pc, #48]	@ (8005958 <TIM_OC5_SetConfig+0xa4>)
 8005926:	4013      	ands	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	621a      	str	r2, [r3, #32]
}
 8005950:	46c0      	nop			@ (mov r8, r8)
 8005952:	46bd      	mov	sp, r7
 8005954:	b006      	add	sp, #24
 8005956:	bd80      	pop	{r7, pc}
 8005958:	fffeffff 	.word	0xfffeffff
 800595c:	fffeff8f 	.word	0xfffeff8f
 8005960:	fffdffff 	.word	0xfffdffff
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800

08005974 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a1b      	ldr	r3, [r3, #32]
 8005988:	4a24      	ldr	r2, [pc, #144]	@ (8005a1c <TIM_OC6_SetConfig+0xa8>)
 800598a:	401a      	ands	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800599a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4a20      	ldr	r2, [pc, #128]	@ (8005a20 <TIM_OC6_SetConfig+0xac>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	021b      	lsls	r3, r3, #8
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a24 <TIM_OC6_SetConfig+0xb0>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	051b      	lsls	r3, r3, #20
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a18      	ldr	r2, [pc, #96]	@ (8005a28 <TIM_OC6_SetConfig+0xb4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d00b      	beq.n	80059e4 <TIM_OC6_SetConfig+0x70>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a17      	ldr	r2, [pc, #92]	@ (8005a2c <TIM_OC6_SetConfig+0xb8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d007      	beq.n	80059e4 <TIM_OC6_SetConfig+0x70>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a16      	ldr	r2, [pc, #88]	@ (8005a30 <TIM_OC6_SetConfig+0xbc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC6_SetConfig+0x70>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a15      	ldr	r2, [pc, #84]	@ (8005a34 <TIM_OC6_SetConfig+0xc0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d109      	bne.n	80059f8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	4a14      	ldr	r2, [pc, #80]	@ (8005a38 <TIM_OC6_SetConfig+0xc4>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	029b      	lsls	r3, r3, #10
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b006      	add	sp, #24
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	ffefffff 	.word	0xffefffff
 8005a20:	feff8fff 	.word	0xfeff8fff
 8005a24:	ffdfffff 	.word	0xffdfffff
 8005a28:	40012c00 	.word	0x40012c00
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40014400 	.word	0x40014400
 8005a34:	40014800 	.word	0x40014800
 8005a38:	fffbffff 	.word	0xfffbffff

08005a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a44:	46c0      	nop			@ (mov r8, r8)
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a54:	46c0      	nop			@ (mov r8, r8)
 8005a56:	46bd      	mov	sp, r7
 8005a58:	b002      	add	sp, #8
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a64:	46c0      	nop			@ (mov r8, r8)
 8005a66:	46bd      	mov	sp, r7
 8005a68:	b002      	add	sp, #8
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e046      	b.n	8005b0c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2288      	movs	r2, #136	@ 0x88
 8005a82:	589b      	ldr	r3, [r3, r2]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2284      	movs	r2, #132	@ 0x84
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7fb fd7a 	bl	800158c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2288      	movs	r2, #136	@ 0x88
 8005a9c:	2124      	movs	r1, #36	@ 0x24
 8005a9e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2101      	movs	r1, #1
 8005aac:	438a      	bics	r2, r1
 8005aae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d003      	beq.n	8005ac0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	0018      	movs	r0, r3
 8005abc:	f000 fa74 	bl	8005fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f000 f8cc 	bl	8005c60 <UART_SetConfig>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e01c      	b.n	8005b0c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	490d      	ldr	r1, [pc, #52]	@ (8005b14 <HAL_UART_Init+0xa8>)
 8005ade:	400a      	ands	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	212a      	movs	r1, #42	@ 0x2a
 8005aee:	438a      	bics	r2, r1
 8005af0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2101      	movs	r1, #1
 8005afe:	430a      	orrs	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 fb03 	bl	8006110 <UART_CheckIdleState>
 8005b0a:	0003      	movs	r3, r0
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b002      	add	sp, #8
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	ffffb7ff 	.word	0xffffb7ff

08005b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08a      	sub	sp, #40	@ 0x28
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	1dbb      	adds	r3, r7, #6
 8005b26:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2288      	movs	r2, #136	@ 0x88
 8005b2c:	589b      	ldr	r3, [r3, r2]
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d000      	beq.n	8005b34 <HAL_UART_Transmit+0x1c>
 8005b32:	e090      	b.n	8005c56 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_UART_Transmit+0x2a>
 8005b3a:	1dbb      	adds	r3, r7, #6
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e088      	b.n	8005c58 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	2380      	movs	r3, #128	@ 0x80
 8005b4c:	015b      	lsls	r3, r3, #5
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d109      	bne.n	8005b66 <HAL_UART_Transmit+0x4e>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d105      	bne.n	8005b66 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d001      	beq.n	8005b66 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e078      	b.n	8005c58 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2290      	movs	r2, #144	@ 0x90
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2288      	movs	r2, #136	@ 0x88
 8005b72:	2121      	movs	r1, #33	@ 0x21
 8005b74:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b76:	f7fb fdef 	bl	8001758 <HAL_GetTick>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1dba      	adds	r2, r7, #6
 8005b82:	2154      	movs	r1, #84	@ 0x54
 8005b84:	8812      	ldrh	r2, [r2, #0]
 8005b86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1dba      	adds	r2, r7, #6
 8005b8c:	2156      	movs	r1, #86	@ 0x56
 8005b8e:	8812      	ldrh	r2, [r2, #0]
 8005b90:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	2380      	movs	r3, #128	@ 0x80
 8005b98:	015b      	lsls	r3, r3, #5
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d108      	bne.n	8005bb0 <HAL_UART_Transmit+0x98>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e003      	b.n	8005bb8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bb8:	e030      	b.n	8005c1c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	0013      	movs	r3, r2
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	2180      	movs	r1, #128	@ 0x80
 8005bc8:	f000 fb4c 	bl	8006264 <UART_WaitOnFlagUntilTimeout>
 8005bcc:	1e03      	subs	r3, r0, #0
 8005bce:	d005      	beq.n	8005bdc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2288      	movs	r2, #136	@ 0x88
 8005bd4:	2120      	movs	r1, #32
 8005bd6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e03d      	b.n	8005c58 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10b      	bne.n	8005bfa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	881b      	ldrh	r3, [r3, #0]
 8005be6:	001a      	movs	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	05d2      	lsls	r2, r2, #23
 8005bee:	0dd2      	lsrs	r2, r2, #23
 8005bf0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e007      	b.n	8005c0a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2256      	movs	r2, #86	@ 0x56
 8005c0e:	5a9b      	ldrh	r3, [r3, r2]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b299      	uxth	r1, r3
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2256      	movs	r2, #86	@ 0x56
 8005c1a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2256      	movs	r2, #86	@ 0x56
 8005c20:	5a9b      	ldrh	r3, [r3, r2]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1c8      	bne.n	8005bba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	0013      	movs	r3, r2
 8005c32:	2200      	movs	r2, #0
 8005c34:	2140      	movs	r1, #64	@ 0x40
 8005c36:	f000 fb15 	bl	8006264 <UART_WaitOnFlagUntilTimeout>
 8005c3a:	1e03      	subs	r3, r0, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2288      	movs	r2, #136	@ 0x88
 8005c42:	2120      	movs	r1, #32
 8005c44:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e006      	b.n	8005c58 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2288      	movs	r2, #136	@ 0x88
 8005c4e:	2120      	movs	r1, #32
 8005c50:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	e000      	b.n	8005c58 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005c56:	2302      	movs	r3, #2
  }
}
 8005c58:	0018      	movs	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	b008      	add	sp, #32
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c68:	231a      	movs	r3, #26
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4abc      	ldr	r2, [pc, #752]	@ (8005f80 <UART_SetConfig+0x320>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	0019      	movs	r1, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69fa      	ldr	r2, [r7, #28]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4ab7      	ldr	r2, [pc, #732]	@ (8005f84 <UART_SetConfig+0x324>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	0019      	movs	r1, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	4aae      	ldr	r2, [pc, #696]	@ (8005f88 <UART_SetConfig+0x328>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	220f      	movs	r2, #15
 8005ce4:	4393      	bics	r3, r2
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4aa4      	ldr	r2, [pc, #656]	@ (8005f8c <UART_SetConfig+0x32c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d127      	bne.n	8005d4e <UART_SetConfig+0xee>
 8005cfe:	4ba4      	ldr	r3, [pc, #656]	@ (8005f90 <UART_SetConfig+0x330>)
 8005d00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d02:	2203      	movs	r2, #3
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d017      	beq.n	8005d3a <UART_SetConfig+0xda>
 8005d0a:	d81b      	bhi.n	8005d44 <UART_SetConfig+0xe4>
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d00a      	beq.n	8005d26 <UART_SetConfig+0xc6>
 8005d10:	d818      	bhi.n	8005d44 <UART_SetConfig+0xe4>
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <UART_SetConfig+0xbc>
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d00a      	beq.n	8005d30 <UART_SetConfig+0xd0>
 8005d1a:	e013      	b.n	8005d44 <UART_SetConfig+0xe4>
 8005d1c:	231b      	movs	r3, #27
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e058      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d26:	231b      	movs	r3, #27
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	e053      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d30:	231b      	movs	r3, #27
 8005d32:	18fb      	adds	r3, r7, r3
 8005d34:	2204      	movs	r2, #4
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	e04e      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d3a:	231b      	movs	r3, #27
 8005d3c:	18fb      	adds	r3, r7, r3
 8005d3e:	2208      	movs	r2, #8
 8005d40:	701a      	strb	r2, [r3, #0]
 8005d42:	e049      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d44:	231b      	movs	r3, #27
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	2210      	movs	r2, #16
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e044      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a90      	ldr	r2, [pc, #576]	@ (8005f94 <UART_SetConfig+0x334>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d127      	bne.n	8005da8 <UART_SetConfig+0x148>
 8005d58:	4b8d      	ldr	r3, [pc, #564]	@ (8005f90 <UART_SetConfig+0x330>)
 8005d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5c:	220c      	movs	r2, #12
 8005d5e:	4013      	ands	r3, r2
 8005d60:	2b0c      	cmp	r3, #12
 8005d62:	d017      	beq.n	8005d94 <UART_SetConfig+0x134>
 8005d64:	d81b      	bhi.n	8005d9e <UART_SetConfig+0x13e>
 8005d66:	2b08      	cmp	r3, #8
 8005d68:	d00a      	beq.n	8005d80 <UART_SetConfig+0x120>
 8005d6a:	d818      	bhi.n	8005d9e <UART_SetConfig+0x13e>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <UART_SetConfig+0x116>
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d00a      	beq.n	8005d8a <UART_SetConfig+0x12a>
 8005d74:	e013      	b.n	8005d9e <UART_SetConfig+0x13e>
 8005d76:	231b      	movs	r3, #27
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e02b      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d80:	231b      	movs	r3, #27
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2202      	movs	r2, #2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	e026      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d8a:	231b      	movs	r3, #27
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	2204      	movs	r2, #4
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e021      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d94:	231b      	movs	r3, #27
 8005d96:	18fb      	adds	r3, r7, r3
 8005d98:	2208      	movs	r2, #8
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	e01c      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005d9e:	231b      	movs	r3, #27
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	2210      	movs	r2, #16
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e017      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a7a      	ldr	r2, [pc, #488]	@ (8005f98 <UART_SetConfig+0x338>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d104      	bne.n	8005dbc <UART_SetConfig+0x15c>
 8005db2:	231b      	movs	r3, #27
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	e00d      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a76      	ldr	r2, [pc, #472]	@ (8005f9c <UART_SetConfig+0x33c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d104      	bne.n	8005dd0 <UART_SetConfig+0x170>
 8005dc6:	231b      	movs	r3, #27
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	2200      	movs	r2, #0
 8005dcc:	701a      	strb	r2, [r3, #0]
 8005dce:	e003      	b.n	8005dd8 <UART_SetConfig+0x178>
 8005dd0:	231b      	movs	r3, #27
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	2380      	movs	r3, #128	@ 0x80
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d000      	beq.n	8005de6 <UART_SetConfig+0x186>
 8005de4:	e065      	b.n	8005eb2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8005de6:	231b      	movs	r3, #27
 8005de8:	18fb      	adds	r3, r7, r3
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d015      	beq.n	8005e1c <UART_SetConfig+0x1bc>
 8005df0:	dc18      	bgt.n	8005e24 <UART_SetConfig+0x1c4>
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d00d      	beq.n	8005e12 <UART_SetConfig+0x1b2>
 8005df6:	dc15      	bgt.n	8005e24 <UART_SetConfig+0x1c4>
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <UART_SetConfig+0x1a2>
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d005      	beq.n	8005e0c <UART_SetConfig+0x1ac>
 8005e00:	e010      	b.n	8005e24 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e02:	f7fe f8b9 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8005e06:	0003      	movs	r3, r0
 8005e08:	617b      	str	r3, [r7, #20]
        break;
 8005e0a:	e012      	b.n	8005e32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e0c:	4b64      	ldr	r3, [pc, #400]	@ (8005fa0 <UART_SetConfig+0x340>)
 8005e0e:	617b      	str	r3, [r7, #20]
        break;
 8005e10:	e00f      	b.n	8005e32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e12:	f7fe f825 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8005e16:	0003      	movs	r3, r0
 8005e18:	617b      	str	r3, [r7, #20]
        break;
 8005e1a:	e00a      	b.n	8005e32 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e1c:	2380      	movs	r3, #128	@ 0x80
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	617b      	str	r3, [r7, #20]
        break;
 8005e22:	e006      	b.n	8005e32 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e28:	231a      	movs	r3, #26
 8005e2a:	18fb      	adds	r3, r7, r3
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	701a      	strb	r2, [r3, #0]
        break;
 8005e30:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d100      	bne.n	8005e3a <UART_SetConfig+0x1da>
 8005e38:	e08d      	b.n	8005f56 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e3e:	4b59      	ldr	r3, [pc, #356]	@ (8005fa4 <UART_SetConfig+0x344>)
 8005e40:	0052      	lsls	r2, r2, #1
 8005e42:	5ad3      	ldrh	r3, [r2, r3]
 8005e44:	0019      	movs	r1, r3
 8005e46:	6978      	ldr	r0, [r7, #20]
 8005e48:	f7fa f968 	bl	800011c <__udivsi3>
 8005e4c:	0003      	movs	r3, r0
 8005e4e:	005a      	lsls	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	18d2      	adds	r2, r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	0019      	movs	r1, r3
 8005e5e:	0010      	movs	r0, r2
 8005e60:	f7fa f95c 	bl	800011c <__udivsi3>
 8005e64:	0003      	movs	r3, r0
 8005e66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b0f      	cmp	r3, #15
 8005e6c:	d91c      	bls.n	8005ea8 <UART_SetConfig+0x248>
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	2380      	movs	r3, #128	@ 0x80
 8005e72:	025b      	lsls	r3, r3, #9
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d217      	bcs.n	8005ea8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	200e      	movs	r0, #14
 8005e7e:	183b      	adds	r3, r7, r0
 8005e80:	210f      	movs	r1, #15
 8005e82:	438a      	bics	r2, r1
 8005e84:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	085b      	lsrs	r3, r3, #1
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2207      	movs	r2, #7
 8005e8e:	4013      	ands	r3, r2
 8005e90:	b299      	uxth	r1, r3
 8005e92:	183b      	adds	r3, r7, r0
 8005e94:	183a      	adds	r2, r7, r0
 8005e96:	8812      	ldrh	r2, [r2, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	183a      	adds	r2, r7, r0
 8005ea2:	8812      	ldrh	r2, [r2, #0]
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	e056      	b.n	8005f56 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005ea8:	231a      	movs	r3, #26
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	2201      	movs	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	e051      	b.n	8005f56 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eb2:	231b      	movs	r3, #27
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d015      	beq.n	8005ee8 <UART_SetConfig+0x288>
 8005ebc:	dc18      	bgt.n	8005ef0 <UART_SetConfig+0x290>
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d00d      	beq.n	8005ede <UART_SetConfig+0x27e>
 8005ec2:	dc15      	bgt.n	8005ef0 <UART_SetConfig+0x290>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <UART_SetConfig+0x26e>
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d005      	beq.n	8005ed8 <UART_SetConfig+0x278>
 8005ecc:	e010      	b.n	8005ef0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ece:	f7fe f853 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8005ed2:	0003      	movs	r3, r0
 8005ed4:	617b      	str	r3, [r7, #20]
        break;
 8005ed6:	e012      	b.n	8005efe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b31      	ldr	r3, [pc, #196]	@ (8005fa0 <UART_SetConfig+0x340>)
 8005eda:	617b      	str	r3, [r7, #20]
        break;
 8005edc:	e00f      	b.n	8005efe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fd ffbf 	bl	8003e60 <HAL_RCC_GetSysClockFreq>
 8005ee2:	0003      	movs	r3, r0
 8005ee4:	617b      	str	r3, [r7, #20]
        break;
 8005ee6:	e00a      	b.n	8005efe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	617b      	str	r3, [r7, #20]
        break;
 8005eee:	e006      	b.n	8005efe <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ef4:	231a      	movs	r3, #26
 8005ef6:	18fb      	adds	r3, r7, r3
 8005ef8:	2201      	movs	r2, #1
 8005efa:	701a      	strb	r2, [r3, #0]
        break;
 8005efc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d028      	beq.n	8005f56 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f08:	4b26      	ldr	r3, [pc, #152]	@ (8005fa4 <UART_SetConfig+0x344>)
 8005f0a:	0052      	lsls	r2, r2, #1
 8005f0c:	5ad3      	ldrh	r3, [r2, r3]
 8005f0e:	0019      	movs	r1, r3
 8005f10:	6978      	ldr	r0, [r7, #20]
 8005f12:	f7fa f903 	bl	800011c <__udivsi3>
 8005f16:	0003      	movs	r3, r0
 8005f18:	001a      	movs	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	18d2      	adds	r2, r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	0019      	movs	r1, r3
 8005f28:	0010      	movs	r0, r2
 8005f2a:	f7fa f8f7 	bl	800011c <__udivsi3>
 8005f2e:	0003      	movs	r3, r0
 8005f30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b0f      	cmp	r3, #15
 8005f36:	d90a      	bls.n	8005f4e <UART_SetConfig+0x2ee>
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	2380      	movs	r3, #128	@ 0x80
 8005f3c:	025b      	lsls	r3, r3, #9
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d205      	bcs.n	8005f4e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60da      	str	r2, [r3, #12]
 8005f4c:	e003      	b.n	8005f56 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005f4e:	231a      	movs	r3, #26
 8005f50:	18fb      	adds	r3, r7, r3
 8005f52:	2201      	movs	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	226a      	movs	r2, #106	@ 0x6a
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2268      	movs	r2, #104	@ 0x68
 8005f62:	2101      	movs	r1, #1
 8005f64:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f72:	231a      	movs	r3, #26
 8005f74:	18fb      	adds	r3, r7, r3
 8005f76:	781b      	ldrb	r3, [r3, #0]
}
 8005f78:	0018      	movs	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b008      	add	sp, #32
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	cfff69f3 	.word	0xcfff69f3
 8005f84:	ffffcfff 	.word	0xffffcfff
 8005f88:	11fff4ff 	.word	0x11fff4ff
 8005f8c:	40013800 	.word	0x40013800
 8005f90:	40021000 	.word	0x40021000
 8005f94:	40004400 	.word	0x40004400
 8005f98:	40004800 	.word	0x40004800
 8005f9c:	40004c00 	.word	0x40004c00
 8005fa0:	00f42400 	.word	0x00f42400
 8005fa4:	0800d814 	.word	0x0800d814

08005fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	d00b      	beq.n	8005fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4a4a      	ldr	r2, [pc, #296]	@ (80060ec <UART_AdvFeatureConfig+0x144>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	0019      	movs	r1, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	4013      	ands	r3, r2
 8005fda:	d00b      	beq.n	8005ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	4a43      	ldr	r2, [pc, #268]	@ (80060f0 <UART_AdvFeatureConfig+0x148>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	0019      	movs	r1, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d00b      	beq.n	8006016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	4a3b      	ldr	r2, [pc, #236]	@ (80060f4 <UART_AdvFeatureConfig+0x14c>)
 8006006:	4013      	ands	r3, r2
 8006008:	0019      	movs	r1, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601a:	2204      	movs	r2, #4
 800601c:	4013      	ands	r3, r2
 800601e:	d00b      	beq.n	8006038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4a34      	ldr	r2, [pc, #208]	@ (80060f8 <UART_AdvFeatureConfig+0x150>)
 8006028:	4013      	ands	r3, r2
 800602a:	0019      	movs	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	2210      	movs	r2, #16
 800603e:	4013      	ands	r3, r2
 8006040:	d00b      	beq.n	800605a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	4a2c      	ldr	r2, [pc, #176]	@ (80060fc <UART_AdvFeatureConfig+0x154>)
 800604a:	4013      	ands	r3, r2
 800604c:	0019      	movs	r1, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	430a      	orrs	r2, r1
 8006058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605e:	2220      	movs	r2, #32
 8006060:	4013      	ands	r3, r2
 8006062:	d00b      	beq.n	800607c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	4a25      	ldr	r2, [pc, #148]	@ (8006100 <UART_AdvFeatureConfig+0x158>)
 800606c:	4013      	ands	r3, r2
 800606e:	0019      	movs	r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	2240      	movs	r2, #64	@ 0x40
 8006082:	4013      	ands	r3, r2
 8006084:	d01d      	beq.n	80060c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	4a1d      	ldr	r2, [pc, #116]	@ (8006104 <UART_AdvFeatureConfig+0x15c>)
 800608e:	4013      	ands	r3, r2
 8006090:	0019      	movs	r1, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060a2:	2380      	movs	r3, #128	@ 0x80
 80060a4:	035b      	lsls	r3, r3, #13
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d10b      	bne.n	80060c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4a15      	ldr	r2, [pc, #84]	@ (8006108 <UART_AdvFeatureConfig+0x160>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	0019      	movs	r1, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c6:	2280      	movs	r2, #128	@ 0x80
 80060c8:	4013      	ands	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	4a0e      	ldr	r2, [pc, #56]	@ (800610c <UART_AdvFeatureConfig+0x164>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	0019      	movs	r1, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }
}
 80060e4:	46c0      	nop			@ (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b002      	add	sp, #8
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	ffff7fff 	.word	0xffff7fff
 80060f0:	fffdffff 	.word	0xfffdffff
 80060f4:	fffeffff 	.word	0xfffeffff
 80060f8:	fffbffff 	.word	0xfffbffff
 80060fc:	ffffefff 	.word	0xffffefff
 8006100:	ffffdfff 	.word	0xffffdfff
 8006104:	ffefffff 	.word	0xffefffff
 8006108:	ff9fffff 	.word	0xff9fffff
 800610c:	fff7ffff 	.word	0xfff7ffff

08006110 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b092      	sub	sp, #72	@ 0x48
 8006114:	af02      	add	r7, sp, #8
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2290      	movs	r2, #144	@ 0x90
 800611c:	2100      	movs	r1, #0
 800611e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006120:	f7fb fb1a 	bl	8001758 <HAL_GetTick>
 8006124:	0003      	movs	r3, r0
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2208      	movs	r2, #8
 8006130:	4013      	ands	r3, r2
 8006132:	2b08      	cmp	r3, #8
 8006134:	d12d      	bne.n	8006192 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006138:	2280      	movs	r2, #128	@ 0x80
 800613a:	0391      	lsls	r1, r2, #14
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4a47      	ldr	r2, [pc, #284]	@ (800625c <UART_CheckIdleState+0x14c>)
 8006140:	9200      	str	r2, [sp, #0]
 8006142:	2200      	movs	r2, #0
 8006144:	f000 f88e 	bl	8006264 <UART_WaitOnFlagUntilTimeout>
 8006148:	1e03      	subs	r3, r0, #0
 800614a:	d022      	beq.n	8006192 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614c:	f3ef 8310 	mrs	r3, PRIMASK
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006154:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006156:	2301      	movs	r3, #1
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	f383 8810 	msr	PRIMASK, r3
}
 8006160:	46c0      	nop			@ (mov r8, r8)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2180      	movs	r1, #128	@ 0x80
 800616e:	438a      	bics	r2, r1
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	f383 8810 	msr	PRIMASK, r3
}
 800617c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2288      	movs	r2, #136	@ 0x88
 8006182:	2120      	movs	r1, #32
 8006184:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2284      	movs	r2, #132	@ 0x84
 800618a:	2100      	movs	r1, #0
 800618c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e060      	b.n	8006254 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2204      	movs	r2, #4
 800619a:	4013      	ands	r3, r2
 800619c:	2b04      	cmp	r3, #4
 800619e:	d146      	bne.n	800622e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a2:	2280      	movs	r2, #128	@ 0x80
 80061a4:	03d1      	lsls	r1, r2, #15
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4a2c      	ldr	r2, [pc, #176]	@ (800625c <UART_CheckIdleState+0x14c>)
 80061aa:	9200      	str	r2, [sp, #0]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f000 f859 	bl	8006264 <UART_WaitOnFlagUntilTimeout>
 80061b2:	1e03      	subs	r3, r0, #0
 80061b4:	d03b      	beq.n	800622e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b6:	f3ef 8310 	mrs	r3, PRIMASK
 80061ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80061bc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
 80061c0:	2301      	movs	r3, #1
 80061c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f383 8810 	msr	PRIMASK, r3
}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4922      	ldr	r1, [pc, #136]	@ (8006260 <UART_CheckIdleState+0x150>)
 80061d8:	400a      	ands	r2, r1
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f383 8810 	msr	PRIMASK, r3
}
 80061e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061e8:	f3ef 8310 	mrs	r3, PRIMASK
 80061ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80061ee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f2:	2301      	movs	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f383 8810 	msr	PRIMASK, r3
}
 80061fc:	46c0      	nop			@ (mov r8, r8)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2101      	movs	r1, #1
 800620a:	438a      	bics	r2, r1
 800620c:	609a      	str	r2, [r3, #8]
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	f383 8810 	msr	PRIMASK, r3
}
 8006218:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	228c      	movs	r2, #140	@ 0x8c
 800621e:	2120      	movs	r1, #32
 8006220:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2284      	movs	r2, #132	@ 0x84
 8006226:	2100      	movs	r1, #0
 8006228:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e012      	b.n	8006254 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2288      	movs	r2, #136	@ 0x88
 8006232:	2120      	movs	r1, #32
 8006234:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	228c      	movs	r2, #140	@ 0x8c
 800623a:	2120      	movs	r1, #32
 800623c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2284      	movs	r2, #132	@ 0x84
 800624e:	2100      	movs	r1, #0
 8006250:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	0018      	movs	r0, r3
 8006256:	46bd      	mov	sp, r7
 8006258:	b010      	add	sp, #64	@ 0x40
 800625a:	bd80      	pop	{r7, pc}
 800625c:	01ffffff 	.word	0x01ffffff
 8006260:	fffffedf 	.word	0xfffffedf

08006264 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	1dfb      	adds	r3, r7, #7
 8006272:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006274:	e051      	b.n	800631a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	3301      	adds	r3, #1
 800627a:	d04e      	beq.n	800631a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627c:	f7fb fa6c 	bl	8001758 <HAL_GetTick>
 8006280:	0002      	movs	r2, r0
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	429a      	cmp	r2, r3
 800628a:	d302      	bcc.n	8006292 <UART_WaitOnFlagUntilTimeout+0x2e>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e051      	b.n	800633a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2204      	movs	r2, #4
 800629e:	4013      	ands	r3, r2
 80062a0:	d03b      	beq.n	800631a <UART_WaitOnFlagUntilTimeout+0xb6>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b80      	cmp	r3, #128	@ 0x80
 80062a6:	d038      	beq.n	800631a <UART_WaitOnFlagUntilTimeout+0xb6>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b40      	cmp	r3, #64	@ 0x40
 80062ac:	d035      	beq.n	800631a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	2208      	movs	r2, #8
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d111      	bne.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2208      	movs	r2, #8
 80062c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	0018      	movs	r0, r3
 80062c8:	f000 f83c 	bl	8006344 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2290      	movs	r2, #144	@ 0x90
 80062d0:	2108      	movs	r1, #8
 80062d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2284      	movs	r2, #132	@ 0x84
 80062d8:	2100      	movs	r1, #0
 80062da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e02c      	b.n	800633a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69da      	ldr	r2, [r3, #28]
 80062e6:	2380      	movs	r3, #128	@ 0x80
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	401a      	ands	r2, r3
 80062ec:	2380      	movs	r3, #128	@ 0x80
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d112      	bne.n	800631a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2280      	movs	r2, #128	@ 0x80
 80062fa:	0112      	lsls	r2, r2, #4
 80062fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	0018      	movs	r0, r3
 8006302:	f000 f81f 	bl	8006344 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2290      	movs	r2, #144	@ 0x90
 800630a:	2120      	movs	r1, #32
 800630c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2284      	movs	r2, #132	@ 0x84
 8006312:	2100      	movs	r1, #0
 8006314:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e00f      	b.n	800633a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	425a      	negs	r2, r3
 800632a:	4153      	adcs	r3, r2
 800632c:	b2db      	uxtb	r3, r3
 800632e:	001a      	movs	r2, r3
 8006330:	1dfb      	adds	r3, r7, #7
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d09e      	beq.n	8006276 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	b004      	add	sp, #16
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b08e      	sub	sp, #56	@ 0x38
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800634c:	f3ef 8310 	mrs	r3, PRIMASK
 8006350:	617b      	str	r3, [r7, #20]
  return(result);
 8006352:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006354:	637b      	str	r3, [r7, #52]	@ 0x34
 8006356:	2301      	movs	r3, #1
 8006358:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	f383 8810 	msr	PRIMASK, r3
}
 8006360:	46c0      	nop			@ (mov r8, r8)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4926      	ldr	r1, [pc, #152]	@ (8006408 <UART_EndRxTransfer+0xc4>)
 800636e:	400a      	ands	r2, r1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006374:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	f383 8810 	msr	PRIMASK, r3
}
 800637c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800637e:	f3ef 8310 	mrs	r3, PRIMASK
 8006382:	623b      	str	r3, [r7, #32]
  return(result);
 8006384:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006386:	633b      	str	r3, [r7, #48]	@ 0x30
 8006388:	2301      	movs	r3, #1
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	f383 8810 	msr	PRIMASK, r3
}
 8006392:	46c0      	nop			@ (mov r8, r8)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	491b      	ldr	r1, [pc, #108]	@ (800640c <UART_EndRxTransfer+0xc8>)
 80063a0:	400a      	ands	r2, r1
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063aa:	f383 8810 	msr	PRIMASK, r3
}
 80063ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d118      	bne.n	80063ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063b8:	f3ef 8310 	mrs	r3, PRIMASK
 80063bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80063be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063c2:	2301      	movs	r3, #1
 80063c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f383 8810 	msr	PRIMASK, r3
}
 80063cc:	46c0      	nop			@ (mov r8, r8)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2110      	movs	r1, #16
 80063da:	438a      	bics	r2, r1
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f383 8810 	msr	PRIMASK, r3
}
 80063e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	228c      	movs	r2, #140	@ 0x8c
 80063ee:	2120      	movs	r1, #32
 80063f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063fe:	46c0      	nop			@ (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	b00e      	add	sp, #56	@ 0x38
 8006404:	bd80      	pop	{r7, pc}
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	fffffedf 	.word	0xfffffedf
 800640c:	effffffe 	.word	0xeffffffe

08006410 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2284      	movs	r2, #132	@ 0x84
 800641c:	5c9b      	ldrb	r3, [r3, r2]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_UARTEx_DisableFifoMode+0x16>
 8006422:	2302      	movs	r3, #2
 8006424:	e027      	b.n	8006476 <HAL_UARTEx_DisableFifoMode+0x66>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2284      	movs	r2, #132	@ 0x84
 800642a:	2101      	movs	r1, #1
 800642c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2288      	movs	r2, #136	@ 0x88
 8006432:	2124      	movs	r1, #36	@ 0x24
 8006434:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2101      	movs	r1, #1
 800644a:	438a      	bics	r2, r1
 800644c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a0b      	ldr	r2, [pc, #44]	@ (8006480 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006452:	4013      	ands	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2288      	movs	r2, #136	@ 0x88
 8006468:	2120      	movs	r1, #32
 800646a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2284      	movs	r2, #132	@ 0x84
 8006470:	2100      	movs	r1, #0
 8006472:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	0018      	movs	r0, r3
 8006478:	46bd      	mov	sp, r7
 800647a:	b004      	add	sp, #16
 800647c:	bd80      	pop	{r7, pc}
 800647e:	46c0      	nop			@ (mov r8, r8)
 8006480:	dfffffff 	.word	0xdfffffff

08006484 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2284      	movs	r2, #132	@ 0x84
 8006492:	5c9b      	ldrb	r3, [r3, r2]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006498:	2302      	movs	r3, #2
 800649a:	e02e      	b.n	80064fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2284      	movs	r2, #132	@ 0x84
 80064a0:	2101      	movs	r1, #1
 80064a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2288      	movs	r2, #136	@ 0x88
 80064a8:	2124      	movs	r1, #36	@ 0x24
 80064aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2101      	movs	r1, #1
 80064c0:	438a      	bics	r2, r1
 80064c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	08d9      	lsrs	r1, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	0018      	movs	r0, r3
 80064dc:	f000 f854 	bl	8006588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2288      	movs	r2, #136	@ 0x88
 80064ec:	2120      	movs	r1, #32
 80064ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2284      	movs	r2, #132	@ 0x84
 80064f4:	2100      	movs	r1, #0
 80064f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	0018      	movs	r0, r3
 80064fc:	46bd      	mov	sp, r7
 80064fe:	b004      	add	sp, #16
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2284      	movs	r2, #132	@ 0x84
 8006512:	5c9b      	ldrb	r3, [r3, r2]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006518:	2302      	movs	r3, #2
 800651a:	e02f      	b.n	800657c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2284      	movs	r2, #132	@ 0x84
 8006520:	2101      	movs	r1, #1
 8006522:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2288      	movs	r2, #136	@ 0x88
 8006528:	2124      	movs	r1, #36	@ 0x24
 800652a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2101      	movs	r1, #1
 8006540:	438a      	bics	r2, r1
 8006542:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	4a0e      	ldr	r2, [pc, #56]	@ (8006584 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800654c:	4013      	ands	r3, r2
 800654e:	0019      	movs	r1, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	0018      	movs	r0, r3
 800655e:	f000 f813 	bl	8006588 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2288      	movs	r2, #136	@ 0x88
 800656e:	2120      	movs	r1, #32
 8006570:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2284      	movs	r2, #132	@ 0x84
 8006576:	2100      	movs	r1, #0
 8006578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	0018      	movs	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	b004      	add	sp, #16
 8006582:	bd80      	pop	{r7, pc}
 8006584:	f1ffffff 	.word	0xf1ffffff

08006588 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006594:	2b00      	cmp	r3, #0
 8006596:	d108      	bne.n	80065aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	226a      	movs	r2, #106	@ 0x6a
 800659c:	2101      	movs	r1, #1
 800659e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2268      	movs	r2, #104	@ 0x68
 80065a4:	2101      	movs	r1, #1
 80065a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065a8:	e043      	b.n	8006632 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065aa:	260f      	movs	r6, #15
 80065ac:	19bb      	adds	r3, r7, r6
 80065ae:	2208      	movs	r2, #8
 80065b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065b2:	200e      	movs	r0, #14
 80065b4:	183b      	adds	r3, r7, r0
 80065b6:	2208      	movs	r2, #8
 80065b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	0e5b      	lsrs	r3, r3, #25
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	240d      	movs	r4, #13
 80065c6:	193b      	adds	r3, r7, r4
 80065c8:	2107      	movs	r1, #7
 80065ca:	400a      	ands	r2, r1
 80065cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	0f5b      	lsrs	r3, r3, #29
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	250c      	movs	r5, #12
 80065da:	197b      	adds	r3, r7, r5
 80065dc:	2107      	movs	r1, #7
 80065de:	400a      	ands	r2, r1
 80065e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065e2:	183b      	adds	r3, r7, r0
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	197a      	adds	r2, r7, r5
 80065e8:	7812      	ldrb	r2, [r2, #0]
 80065ea:	4914      	ldr	r1, [pc, #80]	@ (800663c <UARTEx_SetNbDataToProcess+0xb4>)
 80065ec:	5c8a      	ldrb	r2, [r1, r2]
 80065ee:	435a      	muls	r2, r3
 80065f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80065f2:	197b      	adds	r3, r7, r5
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	4a12      	ldr	r2, [pc, #72]	@ (8006640 <UARTEx_SetNbDataToProcess+0xb8>)
 80065f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065fa:	0019      	movs	r1, r3
 80065fc:	f7f9 fe18 	bl	8000230 <__divsi3>
 8006600:	0003      	movs	r3, r0
 8006602:	b299      	uxth	r1, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	226a      	movs	r2, #106	@ 0x6a
 8006608:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800660a:	19bb      	adds	r3, r7, r6
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	193a      	adds	r2, r7, r4
 8006610:	7812      	ldrb	r2, [r2, #0]
 8006612:	490a      	ldr	r1, [pc, #40]	@ (800663c <UARTEx_SetNbDataToProcess+0xb4>)
 8006614:	5c8a      	ldrb	r2, [r1, r2]
 8006616:	435a      	muls	r2, r3
 8006618:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800661a:	193b      	adds	r3, r7, r4
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	4a08      	ldr	r2, [pc, #32]	@ (8006640 <UARTEx_SetNbDataToProcess+0xb8>)
 8006620:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006622:	0019      	movs	r1, r3
 8006624:	f7f9 fe04 	bl	8000230 <__divsi3>
 8006628:	0003      	movs	r3, r0
 800662a:	b299      	uxth	r1, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2268      	movs	r2, #104	@ 0x68
 8006630:	5299      	strh	r1, [r3, r2]
}
 8006632:	46c0      	nop			@ (mov r8, r8)
 8006634:	46bd      	mov	sp, r7
 8006636:	b005      	add	sp, #20
 8006638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	0800d82c 	.word	0x0800d82c
 8006640:	0800d834 	.word	0x0800d834

08006644 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006648:	4a08      	ldr	r2, [pc, #32]	@ (800666c <MX_FATFS_Init+0x28>)
 800664a:	4b09      	ldr	r3, [pc, #36]	@ (8006670 <MX_FATFS_Init+0x2c>)
 800664c:	0011      	movs	r1, r2
 800664e:	0018      	movs	r0, r3
 8006650:	f003 fa76 	bl	8009b40 <FATFS_LinkDriver>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d002      	beq.n	800665e <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
	{
		return APP_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	425b      	negs	r3, r3
 800665c:	e003      	b.n	8006666 <MX_FATFS_Init+0x22>
	}
	else
	{
		Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 800665e:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <MX_FATFS_Init+0x30>)
 8006660:	2201      	movs	r2, #1
 8006662:	701a      	strb	r2, [r3, #0]
		return APP_OK;
 8006664:	2300      	movs	r3, #0
	}
  /* USER CODE END FATFS_Init */
}
 8006666:	0018      	movs	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20000b18 	.word	0x20000b18
 8006670:	200000cc 	.word	0x200000cc
 8006674:	20000b1c 	.word	0x20000b1c

08006678 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 800667c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	0002      	movs	r2, r0
 800668c:	1dfb      	adds	r3, r7, #7
 800668e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006690:	1dfb      	adds	r3, r7, #7
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	0018      	movs	r0, r3
 8006696:	f000 fa1d 	bl	8006ad4 <USER_SPI_initialize>
 800669a:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 800669c:	0018      	movs	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	b002      	add	sp, #8
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	0002      	movs	r2, r0
 80066ac:	1dfb      	adds	r3, r7, #7
 80066ae:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80066b0:	1dfb      	adds	r3, r7, #7
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	0018      	movs	r0, r3
 80066b6:	f000 fb25 	bl	8006d04 <USER_SPI_status>
 80066ba:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 80066bc:	0018      	movs	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	b002      	add	sp, #8
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80066c4:	b5b0      	push	{r4, r5, r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	250f      	movs	r5, #15
 80066d2:	197b      	adds	r3, r7, r5
 80066d4:	1c02      	adds	r2, r0, #0
 80066d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80066d8:	683c      	ldr	r4, [r7, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	197b      	adds	r3, r7, r5
 80066e0:	7818      	ldrb	r0, [r3, #0]
 80066e2:	0023      	movs	r3, r4
 80066e4:	f000 fb24 	bl	8006d30 <USER_SPI_read>
 80066e8:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b004      	add	sp, #16
 80066f0:	bdb0      	pop	{r4, r5, r7, pc}

080066f2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80066f2:	b5b0      	push	{r4, r5, r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	250f      	movs	r5, #15
 8006700:	197b      	adds	r3, r7, r5
 8006702:	1c02      	adds	r2, r0, #0
 8006704:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006706:	683c      	ldr	r4, [r7, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	197b      	adds	r3, r7, r5
 800670e:	7818      	ldrb	r0, [r3, #0]
 8006710:	0023      	movs	r3, r4
 8006712:	f000 fb79 	bl	8006e08 <USER_SPI_write>
 8006716:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8006718:	0018      	movs	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	b004      	add	sp, #16
 800671e:	bdb0      	pop	{r4, r5, r7, pc}

08006720 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	603a      	str	r2, [r7, #0]
 8006728:	1dfb      	adds	r3, r7, #7
 800672a:	1c02      	adds	r2, r0, #0
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	1dbb      	adds	r3, r7, #6
 8006730:	1c0a      	adds	r2, r1, #0
 8006732:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	1dbb      	adds	r3, r7, #6
 8006738:	7819      	ldrb	r1, [r3, #0]
 800673a:	1dfb      	adds	r3, r7, #7
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	0018      	movs	r0, r3
 8006740:	f000 fbe2 	bl	8006f08 <USER_SPI_ioctl>
 8006744:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8006746:	0018      	movs	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	b002      	add	sp, #8
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 8006758:	f7fa fffe 	bl	8001758 <HAL_GetTick>
 800675c:	0002      	movs	r2, r0
 800675e:	4b04      	ldr	r3, [pc, #16]	@ (8006770 <SPI_Timer_On+0x20>)
 8006760:	601a      	str	r2, [r3, #0]
	spiTimerTickDelay = waitTicks;
 8006762:	4b04      	ldr	r3, [pc, #16]	@ (8006774 <SPI_Timer_On+0x24>)
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	601a      	str	r2, [r3, #0]
}
 8006768:	46c0      	nop			@ (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000b20 	.word	0x20000b20
 8006774:	20000b24 	.word	0x20000b24

08006778 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800677c:	f7fa ffec 	bl	8001758 <HAL_GetTick>
 8006780:	0002      	movs	r2, r0
 8006782:	4b06      	ldr	r3, [pc, #24]	@ (800679c <SPI_Timer_Status+0x24>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <SPI_Timer_Status+0x28>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	419b      	sbcs	r3, r3
 8006790:	425b      	negs	r3, r3
 8006792:	b2db      	uxtb	r3, r3
}
 8006794:	0018      	movs	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	46c0      	nop			@ (mov r8, r8)
 800679c:	20000b20 	.word	0x20000b20
 80067a0:	20000b24 	.word	0x20000b24

080067a4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
		BYTE dat	/* Data to send */
)
{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af02      	add	r7, sp, #8
 80067aa:	0002      	movs	r2, r0
 80067ac:	1dfb      	adds	r3, r7, #7
 80067ae:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80067b0:	240f      	movs	r4, #15
 80067b2:	193a      	adds	r2, r7, r4
 80067b4:	1df9      	adds	r1, r7, #7
 80067b6:	4806      	ldr	r0, [pc, #24]	@ (80067d0 <xchg_spi+0x2c>)
 80067b8:	2332      	movs	r3, #50	@ 0x32
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	2301      	movs	r3, #1
 80067be:	f7fd ff67 	bl	8004690 <HAL_SPI_TransmitReceive>
	return rxDat;
 80067c2:	193b      	adds	r3, r7, r4
 80067c4:	781b      	ldrb	r3, [r3, #0]
}
 80067c6:	0018      	movs	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b005      	add	sp, #20
 80067cc:	bd90      	pop	{r4, r7, pc}
 80067ce:	46c0      	nop			@ (mov r8, r8)
 80067d0:	20000934 	.word	0x20000934

080067d4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
		BYTE *buff,		/* Pointer to data buffer */
		UINT btr		/* Number of bytes to receive (even number) */
)
{
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e00a      	b.n	80067fa <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	18d4      	adds	r4, r2, r3
 80067ea:	20ff      	movs	r0, #255	@ 0xff
 80067ec:	f7ff ffda 	bl	80067a4 <xchg_spi>
 80067f0:	0003      	movs	r3, r0
 80067f2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3301      	adds	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d3f0      	bcc.n	80067e4 <rcvr_spi_multi+0x10>
	}
}
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	46c0      	nop			@ (mov r8, r8)
 8006806:	46bd      	mov	sp, r7
 8006808:	b005      	add	sp, #20
 800680a:	bd90      	pop	{r4, r7, pc}

0800680c <xmit_spi_multi>:
static
void xmit_spi_multi (
		const BYTE *buff,	/* Pointer to the data */
		UINT btx			/* Number of bytes to send (even number) */
)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	b29a      	uxth	r2, r3
 800681a:	2301      	movs	r3, #1
 800681c:	425b      	negs	r3, r3
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4803      	ldr	r0, [pc, #12]	@ (8006830 <xmit_spi_multi+0x24>)
 8006822:	f7fd fdd5 	bl	80043d0 <HAL_SPI_Transmit>
}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	46bd      	mov	sp, r7
 800682a:	b002      	add	sp, #8
 800682c:	bd80      	pop	{r7, pc}
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	20000934 	.word	0x20000934

08006834 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
		UINT wt			/* Timeout [ms] */
)
{
 8006834:	b5b0      	push	{r4, r5, r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800683c:	f7fa ff8c 	bl	8001758 <HAL_GetTick>
 8006840:	0003      	movs	r3, r0
 8006842:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006848:	250f      	movs	r5, #15
 800684a:	197c      	adds	r4, r7, r5
 800684c:	20ff      	movs	r0, #255	@ 0xff
 800684e:	f7ff ffa9 	bl	80067a4 <xchg_spi>
 8006852:	0003      	movs	r3, r0
 8006854:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006856:	197b      	adds	r3, r7, r5
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2bff      	cmp	r3, #255	@ 0xff
 800685c:	d007      	beq.n	800686e <wait_ready+0x3a>
 800685e:	f7fa ff7b 	bl	8001758 <HAL_GetTick>
 8006862:	0002      	movs	r2, r0
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	429a      	cmp	r2, r3
 800686c:	d8ec      	bhi.n	8006848 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 800686e:	230f      	movs	r3, #15
 8006870:	18fb      	adds	r3, r7, r3
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	3bff      	subs	r3, #255	@ 0xff
 8006876:	425a      	negs	r2, r3
 8006878:	4153      	adcs	r3, r2
 800687a:	b2db      	uxtb	r3, r3
}
 800687c:	0018      	movs	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	b006      	add	sp, #24
 8006882:	bdb0      	pop	{r4, r5, r7, pc}

08006884 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006888:	2380      	movs	r3, #128	@ 0x80
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	4805      	ldr	r0, [pc, #20]	@ (80068a4 <despiselect+0x20>)
 800688e:	2201      	movs	r2, #1
 8006890:	0019      	movs	r1, r3
 8006892:	f7fb fe95 	bl	80025c0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006896:	20ff      	movs	r0, #255	@ 0xff
 8006898:	f7ff ff84 	bl	80067a4 <xchg_spi>

}
 800689c:	46c0      	nop			@ (mov r8, r8)
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			@ (mov r8, r8)
 80068a4:	50000400 	.word	0x50000400

080068a8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80068ac:	2380      	movs	r3, #128	@ 0x80
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	480b      	ldr	r0, [pc, #44]	@ (80068e0 <spiselect+0x38>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	0019      	movs	r1, r3
 80068b6:	f7fb fe83 	bl	80025c0 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80068ba:	20ff      	movs	r0, #255	@ 0xff
 80068bc:	f7ff ff72 	bl	80067a4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80068c0:	23fa      	movs	r3, #250	@ 0xfa
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7ff ffb5 	bl	8006834 <wait_ready>
 80068ca:	1e03      	subs	r3, r0, #0
 80068cc:	d001      	beq.n	80068d2 <spiselect+0x2a>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e002      	b.n	80068d8 <spiselect+0x30>

	despiselect();
 80068d2:	f7ff ffd7 	bl	8006884 <despiselect>
	return 0;	/* Timeout */
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	0018      	movs	r0, r3
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	50000400 	.word	0x50000400

080068e4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
		BYTE *buff,			/* Data buffer */
		UINT btr			/* Data block length (byte) */
)
{
 80068e4:	b5b0      	push	{r4, r5, r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80068ee:	20c8      	movs	r0, #200	@ 0xc8
 80068f0:	f7ff ff2e 	bl	8006750 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80068f4:	250f      	movs	r5, #15
 80068f6:	197c      	adds	r4, r7, r5
 80068f8:	20ff      	movs	r0, #255	@ 0xff
 80068fa:	f7ff ff53 	bl	80067a4 <xchg_spi>
 80068fe:	0003      	movs	r3, r0
 8006900:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006902:	197b      	adds	r3, r7, r5
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2bff      	cmp	r3, #255	@ 0xff
 8006908:	d103      	bne.n	8006912 <rcvr_datablock+0x2e>
 800690a:	f7ff ff35 	bl	8006778 <SPI_Timer_Status>
 800690e:	1e03      	subs	r3, r0, #0
 8006910:	d1f0      	bne.n	80068f4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006912:	230f      	movs	r3, #15
 8006914:	18fb      	adds	r3, r7, r3
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2bfe      	cmp	r3, #254	@ 0xfe
 800691a:	d001      	beq.n	8006920 <rcvr_datablock+0x3c>
 800691c:	2300      	movs	r3, #0
 800691e:	e00c      	b.n	800693a <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0011      	movs	r1, r2
 8006926:	0018      	movs	r0, r3
 8006928:	f7ff ff54 	bl	80067d4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800692c:	20ff      	movs	r0, #255	@ 0xff
 800692e:	f7ff ff39 	bl	80067a4 <xchg_spi>
 8006932:	20ff      	movs	r0, #255	@ 0xff
 8006934:	f7ff ff36 	bl	80067a4 <xchg_spi>

	return 1;						/* Function succeeded */
 8006938:	2301      	movs	r3, #1
}
 800693a:	0018      	movs	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	b004      	add	sp, #16
 8006940:	bdb0      	pop	{r4, r5, r7, pc}

08006942 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006942:	b5b0      	push	{r4, r5, r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	000a      	movs	r2, r1
 800694c:	1cfb      	adds	r3, r7, #3
 800694e:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006950:	23fa      	movs	r3, #250	@ 0xfa
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	0018      	movs	r0, r3
 8006956:	f7ff ff6d 	bl	8006834 <wait_ready>
 800695a:	1e03      	subs	r3, r0, #0
 800695c:	d101      	bne.n	8006962 <xmit_datablock+0x20>
 800695e:	2300      	movs	r3, #0
 8006960:	e025      	b.n	80069ae <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8006962:	1cfb      	adds	r3, r7, #3
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	0018      	movs	r0, r3
 8006968:	f7ff ff1c 	bl	80067a4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800696c:	1cfb      	adds	r3, r7, #3
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2bfd      	cmp	r3, #253	@ 0xfd
 8006972:	d01b      	beq.n	80069ac <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006974:	2380      	movs	r3, #128	@ 0x80
 8006976:	009a      	lsls	r2, r3, #2
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	0011      	movs	r1, r2
 800697c:	0018      	movs	r0, r3
 800697e:	f7ff ff45 	bl	800680c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006982:	20ff      	movs	r0, #255	@ 0xff
 8006984:	f7ff ff0e 	bl	80067a4 <xchg_spi>
 8006988:	20ff      	movs	r0, #255	@ 0xff
 800698a:	f7ff ff0b 	bl	80067a4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800698e:	250f      	movs	r5, #15
 8006990:	197c      	adds	r4, r7, r5
 8006992:	20ff      	movs	r0, #255	@ 0xff
 8006994:	f7ff ff06 	bl	80067a4 <xchg_spi>
 8006998:	0003      	movs	r3, r0
 800699a:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800699c:	197b      	adds	r3, r7, r5
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	221f      	movs	r2, #31
 80069a2:	4013      	ands	r3, r2
 80069a4:	2b05      	cmp	r3, #5
 80069a6:	d001      	beq.n	80069ac <xmit_datablock+0x6a>
 80069a8:	2300      	movs	r3, #0
 80069aa:	e000      	b.n	80069ae <xmit_datablock+0x6c>
	}
	return 1;
 80069ac:	2301      	movs	r3, #1
}
 80069ae:	0018      	movs	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b004      	add	sp, #16
 80069b4:	bdb0      	pop	{r4, r5, r7, pc}

080069b6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80069b6:	b5b0      	push	{r4, r5, r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	0002      	movs	r2, r0
 80069be:	6039      	str	r1, [r7, #0]
 80069c0:	1dfb      	adds	r3, r7, #7
 80069c2:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80069c4:	1dfb      	adds	r3, r7, #7
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b25b      	sxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da15      	bge.n	80069fa <send_cmd+0x44>
		cmd &= 0x7F;
 80069ce:	1dfb      	adds	r3, r7, #7
 80069d0:	1dfa      	adds	r2, r7, #7
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	217f      	movs	r1, #127	@ 0x7f
 80069d6:	400a      	ands	r2, r1
 80069d8:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 80069da:	250e      	movs	r5, #14
 80069dc:	197c      	adds	r4, r7, r5
 80069de:	2100      	movs	r1, #0
 80069e0:	2037      	movs	r0, #55	@ 0x37
 80069e2:	f7ff ffe8 	bl	80069b6 <send_cmd>
 80069e6:	0003      	movs	r3, r0
 80069e8:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 80069ea:	002a      	movs	r2, r5
 80069ec:	18bb      	adds	r3, r7, r2
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d902      	bls.n	80069fa <send_cmd+0x44>
 80069f4:	18bb      	adds	r3, r7, r2
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	e067      	b.n	8006aca <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80069fa:	1dfb      	adds	r3, r7, #7
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b0c      	cmp	r3, #12
 8006a00:	d007      	beq.n	8006a12 <send_cmd+0x5c>
		despiselect();
 8006a02:	f7ff ff3f 	bl	8006884 <despiselect>
		if (!spiselect()) return 0xFF;
 8006a06:	f7ff ff4f 	bl	80068a8 <spiselect>
 8006a0a:	1e03      	subs	r3, r0, #0
 8006a0c:	d101      	bne.n	8006a12 <send_cmd+0x5c>
 8006a0e:	23ff      	movs	r3, #255	@ 0xff
 8006a10:	e05b      	b.n	8006aca <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006a12:	1dfb      	adds	r3, r7, #7
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2240      	movs	r2, #64	@ 0x40
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f7ff fec1 	bl	80067a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	0e1b      	lsrs	r3, r3, #24
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f7ff febb 	bl	80067a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	0c1b      	lsrs	r3, r3, #16
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7ff feb5 	bl	80067a4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	0a1b      	lsrs	r3, r3, #8
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7ff feaf 	bl	80067a4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	0018      	movs	r0, r3
 8006a4c:	f7ff feaa 	bl	80067a4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006a50:	210f      	movs	r1, #15
 8006a52:	187b      	adds	r3, r7, r1
 8006a54:	2201      	movs	r2, #1
 8006a56:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006a58:	1dfb      	adds	r3, r7, #7
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d102      	bne.n	8006a66 <send_cmd+0xb0>
 8006a60:	187b      	adds	r3, r7, r1
 8006a62:	2295      	movs	r2, #149	@ 0x95
 8006a64:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006a66:	1dfb      	adds	r3, r7, #7
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b08      	cmp	r3, #8
 8006a6c:	d103      	bne.n	8006a76 <send_cmd+0xc0>
 8006a6e:	230f      	movs	r3, #15
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	2287      	movs	r2, #135	@ 0x87
 8006a74:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8006a76:	230f      	movs	r3, #15
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f7ff fe91 	bl	80067a4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006a82:	1dfb      	adds	r3, r7, #7
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	2b0c      	cmp	r3, #12
 8006a88:	d102      	bne.n	8006a90 <send_cmd+0xda>
 8006a8a:	20ff      	movs	r0, #255	@ 0xff
 8006a8c:	f7ff fe8a 	bl	80067a4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006a90:	230f      	movs	r3, #15
 8006a92:	18fb      	adds	r3, r7, r3
 8006a94:	220a      	movs	r2, #10
 8006a96:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8006a98:	250e      	movs	r5, #14
 8006a9a:	197c      	adds	r4, r7, r5
 8006a9c:	20ff      	movs	r0, #255	@ 0xff
 8006a9e:	f7ff fe81 	bl	80067a4 <xchg_spi>
 8006aa2:	0003      	movs	r3, r0
 8006aa4:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8006aa6:	197b      	adds	r3, r7, r5
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da09      	bge.n	8006ac4 <send_cmd+0x10e>
 8006ab0:	210f      	movs	r1, #15
 8006ab2:	187b      	adds	r3, r7, r1
 8006ab4:	187a      	adds	r2, r7, r1
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	3a01      	subs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	187b      	adds	r3, r7, r1
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e9      	bne.n	8006a98 <send_cmd+0xe2>

	return res;							/* Return received response */
 8006ac4:	230e      	movs	r3, #14
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	781b      	ldrb	r3, [r3, #0]
}
 8006aca:	0018      	movs	r0, r3
 8006acc:	46bd      	mov	sp, r7
 8006ace:	b004      	add	sp, #16
 8006ad0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006ad4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
		BYTE drv		/* Physical drive number (0) */
)
{
 8006ad4:	b5b0      	push	{r4, r5, r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	0002      	movs	r2, r0
 8006adc:	1dfb      	adds	r3, r7, #7
 8006ade:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006ae0:	1dfb      	adds	r3, r7, #7
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USER_SPI_initialize+0x18>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e100      	b.n	8006cee <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006aec:	4b82      	ldr	r3, [pc, #520]	@ (8006cf8 <USER_SPI_initialize+0x224>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	001a      	movs	r2, r3
 8006af4:	2302      	movs	r3, #2
 8006af6:	4013      	ands	r3, r2
 8006af8:	d003      	beq.n	8006b02 <USER_SPI_initialize+0x2e>
 8006afa:	4b7f      	ldr	r3, [pc, #508]	@ (8006cf8 <USER_SPI_initialize+0x224>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	e0f5      	b.n	8006cee <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8006b02:	4b7e      	ldr	r3, [pc, #504]	@ (8006cfc <USER_SPI_initialize+0x228>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2238      	movs	r2, #56	@ 0x38
 8006b0a:	4393      	bics	r3, r2
 8006b0c:	001a      	movs	r2, r3
 8006b0e:	4b7b      	ldr	r3, [pc, #492]	@ (8006cfc <USER_SPI_initialize+0x228>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2130      	movs	r1, #48	@ 0x30
 8006b14:	430a      	orrs	r2, r1
 8006b16:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006b18:	230f      	movs	r3, #15
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	220a      	movs	r2, #10
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e008      	b.n	8006b34 <USER_SPI_initialize+0x60>
 8006b22:	20ff      	movs	r0, #255	@ 0xff
 8006b24:	f7ff fe3e 	bl	80067a4 <xchg_spi>
 8006b28:	210f      	movs	r1, #15
 8006b2a:	187b      	adds	r3, r7, r1
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	187b      	adds	r3, r7, r1
 8006b30:	3a01      	subs	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	240f      	movs	r4, #15
 8006b36:	193b      	adds	r3, r7, r4
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f1      	bne.n	8006b22 <USER_SPI_initialize+0x4e>

	ty = 0;
 8006b3e:	230d      	movs	r3, #13
 8006b40:	18fb      	adds	r3, r7, r3
 8006b42:	2200      	movs	r2, #0
 8006b44:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006b46:	2100      	movs	r1, #0
 8006b48:	2000      	movs	r0, #0
 8006b4a:	f7ff ff34 	bl	80069b6 <send_cmd>
 8006b4e:	0003      	movs	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d000      	beq.n	8006b56 <USER_SPI_initialize+0x82>
 8006b54:	e0a6      	b.n	8006ca4 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006b56:	23fa      	movs	r3, #250	@ 0xfa
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	f7ff fdf8 	bl	8006750 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006b60:	23d5      	movs	r3, #213	@ 0xd5
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	0019      	movs	r1, r3
 8006b66:	2008      	movs	r0, #8
 8006b68:	f7ff ff25 	bl	80069b6 <send_cmd>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d162      	bne.n	8006c38 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006b72:	193b      	adds	r3, r7, r4
 8006b74:	2200      	movs	r2, #0
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	e00f      	b.n	8006b9a <USER_SPI_initialize+0xc6>
 8006b7a:	250f      	movs	r5, #15
 8006b7c:	197b      	adds	r3, r7, r5
 8006b7e:	781c      	ldrb	r4, [r3, #0]
 8006b80:	20ff      	movs	r0, #255	@ 0xff
 8006b82:	f7ff fe0f 	bl	80067a4 <xchg_spi>
 8006b86:	0003      	movs	r3, r0
 8006b88:	001a      	movs	r2, r3
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	551a      	strb	r2, [r3, r4]
 8006b90:	197b      	adds	r3, r7, r5
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	197b      	adds	r3, r7, r5
 8006b96:	3201      	adds	r2, #1
 8006b98:	701a      	strb	r2, [r3, #0]
 8006b9a:	230f      	movs	r3, #15
 8006b9c:	18fb      	adds	r3, r7, r3
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d9ea      	bls.n	8006b7a <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006ba4:	2208      	movs	r2, #8
 8006ba6:	18bb      	adds	r3, r7, r2
 8006ba8:	789b      	ldrb	r3, [r3, #2]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d000      	beq.n	8006bb0 <USER_SPI_initialize+0xdc>
 8006bae:	e079      	b.n	8006ca4 <USER_SPI_initialize+0x1d0>
 8006bb0:	18bb      	adds	r3, r7, r2
 8006bb2:	78db      	ldrb	r3, [r3, #3]
 8006bb4:	2baa      	cmp	r3, #170	@ 0xaa
 8006bb6:	d000      	beq.n	8006bba <USER_SPI_initialize+0xe6>
 8006bb8:	e074      	b.n	8006ca4 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	f7ff fddc 	bl	8006778 <SPI_Timer_Status>
 8006bc0:	1e03      	subs	r3, r0, #0
 8006bc2:	d007      	beq.n	8006bd4 <USER_SPI_initialize+0x100>
 8006bc4:	2380      	movs	r3, #128	@ 0x80
 8006bc6:	05db      	lsls	r3, r3, #23
 8006bc8:	0019      	movs	r1, r3
 8006bca:	20a9      	movs	r0, #169	@ 0xa9
 8006bcc:	f7ff fef3 	bl	80069b6 <send_cmd>
 8006bd0:	1e03      	subs	r3, r0, #0
 8006bd2:	d1f3      	bne.n	8006bbc <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006bd4:	f7ff fdd0 	bl	8006778 <SPI_Timer_Status>
 8006bd8:	1e03      	subs	r3, r0, #0
 8006bda:	d063      	beq.n	8006ca4 <USER_SPI_initialize+0x1d0>
 8006bdc:	2100      	movs	r1, #0
 8006bde:	203a      	movs	r0, #58	@ 0x3a
 8006be0:	f7ff fee9 	bl	80069b6 <send_cmd>
 8006be4:	1e03      	subs	r3, r0, #0
 8006be6:	d15d      	bne.n	8006ca4 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006be8:	230f      	movs	r3, #15
 8006bea:	18fb      	adds	r3, r7, r3
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	e00f      	b.n	8006c12 <USER_SPI_initialize+0x13e>
 8006bf2:	250f      	movs	r5, #15
 8006bf4:	197b      	adds	r3, r7, r5
 8006bf6:	781c      	ldrb	r4, [r3, #0]
 8006bf8:	20ff      	movs	r0, #255	@ 0xff
 8006bfa:	f7ff fdd3 	bl	80067a4 <xchg_spi>
 8006bfe:	0003      	movs	r3, r0
 8006c00:	001a      	movs	r2, r3
 8006c02:	2308      	movs	r3, #8
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	551a      	strb	r2, [r3, r4]
 8006c08:	197b      	adds	r3, r7, r5
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	197b      	adds	r3, r7, r5
 8006c0e:	3201      	adds	r2, #1
 8006c10:	701a      	strb	r2, [r3, #0]
 8006c12:	230f      	movs	r3, #15
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d9ea      	bls.n	8006bf2 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	18fb      	adds	r3, r7, r3
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	001a      	movs	r2, r3
 8006c24:	2340      	movs	r3, #64	@ 0x40
 8006c26:	4013      	ands	r3, r2
 8006c28:	d001      	beq.n	8006c2e <USER_SPI_initialize+0x15a>
 8006c2a:	220c      	movs	r2, #12
 8006c2c:	e000      	b.n	8006c30 <USER_SPI_initialize+0x15c>
 8006c2e:	2204      	movs	r2, #4
 8006c30:	230d      	movs	r3, #13
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e035      	b.n	8006ca4 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006c38:	2100      	movs	r1, #0
 8006c3a:	20a9      	movs	r0, #169	@ 0xa9
 8006c3c:	f7ff febb 	bl	80069b6 <send_cmd>
 8006c40:	0003      	movs	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d808      	bhi.n	8006c58 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006c46:	230d      	movs	r3, #13
 8006c48:	18fb      	adds	r3, r7, r3
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	701a      	strb	r2, [r3, #0]
 8006c4e:	230e      	movs	r3, #14
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	22a9      	movs	r2, #169	@ 0xa9
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	e007      	b.n	8006c68 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006c58:	230d      	movs	r3, #13
 8006c5a:	18fb      	adds	r3, r7, r3
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	230e      	movs	r3, #14
 8006c62:	18fb      	adds	r3, r7, r3
 8006c64:	2201      	movs	r2, #1
 8006c66:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006c68:	46c0      	nop			@ (mov r8, r8)
 8006c6a:	f7ff fd85 	bl	8006778 <SPI_Timer_Status>
 8006c6e:	1e03      	subs	r3, r0, #0
 8006c70:	d008      	beq.n	8006c84 <USER_SPI_initialize+0x1b0>
 8006c72:	230e      	movs	r3, #14
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2100      	movs	r1, #0
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f7ff fe9b 	bl	80069b6 <send_cmd>
 8006c80:	1e03      	subs	r3, r0, #0
 8006c82:	d1f2      	bne.n	8006c6a <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006c84:	f7ff fd78 	bl	8006778 <SPI_Timer_Status>
 8006c88:	1e03      	subs	r3, r0, #0
 8006c8a:	d007      	beq.n	8006c9c <USER_SPI_initialize+0x1c8>
 8006c8c:	2380      	movs	r3, #128	@ 0x80
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	0019      	movs	r1, r3
 8006c92:	2010      	movs	r0, #16
 8006c94:	f7ff fe8f 	bl	80069b6 <send_cmd>
 8006c98:	1e03      	subs	r3, r0, #0
 8006c9a:	d003      	beq.n	8006ca4 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8006c9c:	230d      	movs	r3, #13
 8006c9e:	18fb      	adds	r3, r7, r3
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8006ca4:	4b16      	ldr	r3, [pc, #88]	@ (8006d00 <USER_SPI_initialize+0x22c>)
 8006ca6:	240d      	movs	r4, #13
 8006ca8:	193a      	adds	r2, r7, r4
 8006caa:	7812      	ldrb	r2, [r2, #0]
 8006cac:	701a      	strb	r2, [r3, #0]
	despiselect();
 8006cae:	f7ff fde9 	bl	8006884 <despiselect>

	if (ty) {			/* OK */
 8006cb2:	193b      	adds	r3, r7, r4
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d013      	beq.n	8006ce2 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8006cba:	4b10      	ldr	r3, [pc, #64]	@ (8006cfc <USER_SPI_initialize+0x228>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2238      	movs	r2, #56	@ 0x38
 8006cc2:	4393      	bics	r3, r2
 8006cc4:	001a      	movs	r2, r3
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cfc <USER_SPI_initialize+0x228>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2110      	movs	r1, #16
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006cd0:	4b09      	ldr	r3, [pc, #36]	@ (8006cf8 <USER_SPI_initialize+0x224>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	4393      	bics	r3, r2
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <USER_SPI_initialize+0x224>)
 8006cde:	701a      	strb	r2, [r3, #0]
 8006ce0:	e002      	b.n	8006ce8 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006ce2:	4b05      	ldr	r3, [pc, #20]	@ (8006cf8 <USER_SPI_initialize+0x224>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006ce8:	4b03      	ldr	r3, [pc, #12]	@ (8006cf8 <USER_SPI_initialize+0x224>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
}
 8006cee:	0018      	movs	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b004      	add	sp, #16
 8006cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	200000e0 	.word	0x200000e0
 8006cfc:	20000934 	.word	0x20000934
 8006d00:	20000b1d 	.word	0x20000b1d

08006d04 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
		BYTE drv		/* Physical drive number (0) */
)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	0002      	movs	r2, r0
 8006d0c:	1dfb      	adds	r3, r7, #7
 8006d0e:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006d10:	1dfb      	adds	r3, r7, #7
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <USER_SPI_status+0x18>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e002      	b.n	8006d22 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8006d1c:	4b03      	ldr	r3, [pc, #12]	@ (8006d2c <USER_SPI_status+0x28>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	b2db      	uxtb	r3, r3
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b002      	add	sp, #8
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	200000e0 	.word	0x200000e0

08006d30 <USER_SPI_read>:
		BYTE drv,		/* Physical drive number (0) */
		BYTE *buff,		/* Pointer to the data buffer to store read data */
		DWORD sector,	/* Start sector number (LBA) */
		UINT count		/* Number of sectors to read (1..128) */
)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
 8006d3a:	603b      	str	r3, [r7, #0]
 8006d3c:	210f      	movs	r1, #15
 8006d3e:	187b      	adds	r3, r7, r1
 8006d40:	1c02      	adds	r2, r0, #0
 8006d42:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006d44:	187b      	adds	r3, r7, r1
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d102      	bne.n	8006d52 <USER_SPI_read+0x22>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <USER_SPI_read+0x26>
 8006d52:	2304      	movs	r3, #4
 8006d54:	e04f      	b.n	8006df6 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006d56:	4b2a      	ldr	r3, [pc, #168]	@ (8006e00 <USER_SPI_read+0xd0>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	001a      	movs	r2, r3
 8006d5e:	2301      	movs	r3, #1
 8006d60:	4013      	ands	r3, r2
 8006d62:	d001      	beq.n	8006d68 <USER_SPI_read+0x38>
 8006d64:	2303      	movs	r3, #3
 8006d66:	e046      	b.n	8006df6 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006d68:	4b26      	ldr	r3, [pc, #152]	@ (8006e04 <USER_SPI_read+0xd4>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	001a      	movs	r2, r3
 8006d6e:	2308      	movs	r3, #8
 8006d70:	4013      	ands	r3, r2
 8006d72:	d102      	bne.n	8006d7a <USER_SPI_read+0x4a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	025b      	lsls	r3, r3, #9
 8006d78:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d112      	bne.n	8006da6 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	0019      	movs	r1, r3
 8006d84:	2011      	movs	r0, #17
 8006d86:	f7ff fe16 	bl	80069b6 <send_cmd>
 8006d8a:	1e03      	subs	r3, r0, #0
 8006d8c:	d12d      	bne.n	8006dea <USER_SPI_read+0xba>
				&& rcvr_datablock(buff, 512)) {
 8006d8e:	2380      	movs	r3, #128	@ 0x80
 8006d90:	009a      	lsls	r2, r3, #2
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	0011      	movs	r1, r2
 8006d96:	0018      	movs	r0, r3
 8006d98:	f7ff fda4 	bl	80068e4 <rcvr_datablock>
 8006d9c:	1e03      	subs	r3, r0, #0
 8006d9e:	d024      	beq.n	8006dea <USER_SPI_read+0xba>
			count = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	603b      	str	r3, [r7, #0]
 8006da4:	e021      	b.n	8006dea <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	0019      	movs	r1, r3
 8006daa:	2012      	movs	r0, #18
 8006dac:	f7ff fe03 	bl	80069b6 <send_cmd>
 8006db0:	1e03      	subs	r3, r0, #0
 8006db2:	d11a      	bne.n	8006dea <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006db4:	2380      	movs	r3, #128	@ 0x80
 8006db6:	009a      	lsls	r2, r3, #2
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	0011      	movs	r1, r2
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f7ff fd91 	bl	80068e4 <rcvr_datablock>
 8006dc2:	1e03      	subs	r3, r0, #0
 8006dc4:	d00c      	beq.n	8006de0 <USER_SPI_read+0xb0>
				buff += 512;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2280      	movs	r2, #128	@ 0x80
 8006dca:	0092      	lsls	r2, r2, #2
 8006dcc:	4694      	mov	ip, r2
 8006dce:	4463      	add	r3, ip
 8006dd0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1ea      	bne.n	8006db4 <USER_SPI_read+0x84>
 8006dde:	e000      	b.n	8006de2 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8006de0:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006de2:	2100      	movs	r1, #0
 8006de4:	200c      	movs	r0, #12
 8006de6:	f7ff fde6 	bl	80069b6 <send_cmd>
		}
	}
	despiselect();
 8006dea:	f7ff fd4b 	bl	8006884 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	1e5a      	subs	r2, r3, #1
 8006df2:	4193      	sbcs	r3, r2
 8006df4:	b2db      	uxtb	r3, r3
}
 8006df6:	0018      	movs	r0, r3
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	b004      	add	sp, #16
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	46c0      	nop			@ (mov r8, r8)
 8006e00:	200000e0 	.word	0x200000e0
 8006e04:	20000b1d 	.word	0x20000b1d

08006e08 <USER_SPI_write>:
		BYTE drv,			/* Physical drive number (0) */
		const BYTE *buff,	/* Ponter to the data to write */
		DWORD sector,		/* Start sector number (LBA) */
		UINT count			/* Number of sectors to write (1..128) */
)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	607a      	str	r2, [r7, #4]
 8006e12:	603b      	str	r3, [r7, #0]
 8006e14:	210f      	movs	r1, #15
 8006e16:	187b      	adds	r3, r7, r1
 8006e18:	1c02      	adds	r2, r0, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006e1c:	187b      	adds	r3, r7, r1
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <USER_SPI_write+0x22>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <USER_SPI_write+0x26>
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	e063      	b.n	8006ef6 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006e2e:	4b34      	ldr	r3, [pc, #208]	@ (8006f00 <USER_SPI_write+0xf8>)
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	001a      	movs	r2, r3
 8006e36:	2301      	movs	r3, #1
 8006e38:	4013      	ands	r3, r2
 8006e3a:	d001      	beq.n	8006e40 <USER_SPI_write+0x38>
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e05a      	b.n	8006ef6 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006e40:	4b2f      	ldr	r3, [pc, #188]	@ (8006f00 <USER_SPI_write+0xf8>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	001a      	movs	r2, r3
 8006e48:	2304      	movs	r3, #4
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	d001      	beq.n	8006e52 <USER_SPI_write+0x4a>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e051      	b.n	8006ef6 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006e52:	4b2c      	ldr	r3, [pc, #176]	@ (8006f04 <USER_SPI_write+0xfc>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	001a      	movs	r2, r3
 8006e58:	2308      	movs	r3, #8
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	d102      	bne.n	8006e64 <USER_SPI_write+0x5c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	025b      	lsls	r3, r3, #9
 8006e62:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d110      	bne.n	8006e8c <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0019      	movs	r1, r3
 8006e6e:	2018      	movs	r0, #24
 8006e70:	f7ff fda1 	bl	80069b6 <send_cmd>
 8006e74:	1e03      	subs	r3, r0, #0
 8006e76:	d138      	bne.n	8006eea <USER_SPI_write+0xe2>
				&& xmit_datablock(buff, 0xFE)) {
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	21fe      	movs	r1, #254	@ 0xfe
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f7ff fd60 	bl	8006942 <xmit_datablock>
 8006e82:	1e03      	subs	r3, r0, #0
 8006e84:	d031      	beq.n	8006eea <USER_SPI_write+0xe2>
			count = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	603b      	str	r3, [r7, #0]
 8006e8a:	e02e      	b.n	8006eea <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006f04 <USER_SPI_write+0xfc>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	001a      	movs	r2, r3
 8006e92:	2306      	movs	r3, #6
 8006e94:	4013      	ands	r3, r2
 8006e96:	d004      	beq.n	8006ea2 <USER_SPI_write+0x9a>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	0019      	movs	r1, r3
 8006e9c:	2097      	movs	r0, #151	@ 0x97
 8006e9e:	f7ff fd8a 	bl	80069b6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	0019      	movs	r1, r3
 8006ea6:	2019      	movs	r0, #25
 8006ea8:	f7ff fd85 	bl	80069b6 <send_cmd>
 8006eac:	1e03      	subs	r3, r0, #0
 8006eae:	d11c      	bne.n	8006eea <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	21fc      	movs	r1, #252	@ 0xfc
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	f7ff fd44 	bl	8006942 <xmit_datablock>
 8006eba:	1e03      	subs	r3, r0, #0
 8006ebc:	d00c      	beq.n	8006ed8 <USER_SPI_write+0xd0>
				buff += 512;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2280      	movs	r2, #128	@ 0x80
 8006ec2:	0092      	lsls	r2, r2, #2
 8006ec4:	4694      	mov	ip, r2
 8006ec6:	4463      	add	r3, ip
 8006ec8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	603b      	str	r3, [r7, #0]
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ec      	bne.n	8006eb0 <USER_SPI_write+0xa8>
 8006ed6:	e000      	b.n	8006eda <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006ed8:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006eda:	21fd      	movs	r1, #253	@ 0xfd
 8006edc:	2000      	movs	r0, #0
 8006ede:	f7ff fd30 	bl	8006942 <xmit_datablock>
 8006ee2:	1e03      	subs	r3, r0, #0
 8006ee4:	d101      	bne.n	8006eea <USER_SPI_write+0xe2>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006eea:	f7ff fccb 	bl	8006884 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	1e5a      	subs	r2, r3, #1
 8006ef2:	4193      	sbcs	r3, r2
 8006ef4:	b2db      	uxtb	r3, r3
}
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b004      	add	sp, #16
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	46c0      	nop			@ (mov r8, r8)
 8006f00:	200000e0 	.word	0x200000e0
 8006f04:	20000b1d 	.word	0x20000b1d

08006f08 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
		BYTE drv,		/* Physical drive number (0) */
		BYTE cmd,		/* Control command code */
		void *buff		/* Pointer to the conrtol data */
)
{
 8006f08:	b590      	push	{r4, r7, lr}
 8006f0a:	b08d      	sub	sp, #52	@ 0x34
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	603a      	str	r2, [r7, #0]
 8006f10:	1dfb      	adds	r3, r7, #7
 8006f12:	1c02      	adds	r2, r0, #0
 8006f14:	701a      	strb	r2, [r3, #0]
 8006f16:	1dbb      	adds	r3, r7, #6
 8006f18:	1c0a      	adds	r2, r1, #0
 8006f1a:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006f1c:	1dfb      	adds	r3, r7, #7
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <USER_SPI_ioctl+0x20>
 8006f24:	2304      	movs	r3, #4
 8006f26:	e178      	b.n	800721a <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006f28:	4bbe      	ldr	r3, [pc, #760]	@ (8007224 <USER_SPI_ioctl+0x31c>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	001a      	movs	r2, r3
 8006f30:	2301      	movs	r3, #1
 8006f32:	4013      	ands	r3, r2
 8006f34:	d001      	beq.n	8006f3a <USER_SPI_ioctl+0x32>
 8006f36:	2303      	movs	r3, #3
 8006f38:	e16f      	b.n	800721a <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8006f3a:	232f      	movs	r3, #47	@ 0x2f
 8006f3c:	18fb      	adds	r3, r7, r3
 8006f3e:	2201      	movs	r2, #1
 8006f40:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 8006f42:	1dbb      	adds	r3, r7, #6
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d100      	bne.n	8006f4c <USER_SPI_ioctl+0x44>
 8006f4a:	e100      	b.n	800714e <USER_SPI_ioctl+0x246>
 8006f4c:	dd00      	ble.n	8006f50 <USER_SPI_ioctl+0x48>
 8006f4e:	e14d      	b.n	80071ec <USER_SPI_ioctl+0x2e4>
 8006f50:	2b03      	cmp	r3, #3
 8006f52:	d100      	bne.n	8006f56 <USER_SPI_ioctl+0x4e>
 8006f54:	e074      	b.n	8007040 <USER_SPI_ioctl+0x138>
 8006f56:	dd00      	ble.n	8006f5a <USER_SPI_ioctl+0x52>
 8006f58:	e148      	b.n	80071ec <USER_SPI_ioctl+0x2e4>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <USER_SPI_ioctl+0x5c>
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d00a      	beq.n	8006f78 <USER_SPI_ioctl+0x70>
 8006f62:	e143      	b.n	80071ec <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006f64:	f7ff fca0 	bl	80068a8 <spiselect>
 8006f68:	1e03      	subs	r3, r0, #0
 8006f6a:	d100      	bne.n	8006f6e <USER_SPI_ioctl+0x66>
 8006f6c:	e143      	b.n	80071f6 <USER_SPI_ioctl+0x2ee>
 8006f6e:	232f      	movs	r3, #47	@ 0x2f
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
		break;
 8006f76:	e13e      	b.n	80071f6 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006f78:	2100      	movs	r1, #0
 8006f7a:	2009      	movs	r0, #9
 8006f7c:	f7ff fd1b 	bl	80069b6 <send_cmd>
 8006f80:	1e03      	subs	r3, r0, #0
 8006f82:	d000      	beq.n	8006f86 <USER_SPI_ioctl+0x7e>
 8006f84:	e139      	b.n	80071fa <USER_SPI_ioctl+0x2f2>
 8006f86:	240c      	movs	r4, #12
 8006f88:	193b      	adds	r3, r7, r4
 8006f8a:	2110      	movs	r1, #16
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f7ff fca9 	bl	80068e4 <rcvr_datablock>
 8006f92:	1e03      	subs	r3, r0, #0
 8006f94:	d100      	bne.n	8006f98 <USER_SPI_ioctl+0x90>
 8006f96:	e130      	b.n	80071fa <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006f98:	0020      	movs	r0, r4
 8006f9a:	183b      	adds	r3, r7, r0
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	099b      	lsrs	r3, r3, #6
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d115      	bne.n	8006fd2 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006fa6:	183b      	adds	r3, r7, r0
 8006fa8:	7a5b      	ldrb	r3, [r3, #9]
 8006faa:	001a      	movs	r2, r3
 8006fac:	183b      	adds	r3, r7, r0
 8006fae:	7a1b      	ldrb	r3, [r3, #8]
 8006fb0:	021b      	lsls	r3, r3, #8
 8006fb2:	18d3      	adds	r3, r2, r3
 8006fb4:	0019      	movs	r1, r3
 8006fb6:	183b      	adds	r3, r7, r0
 8006fb8:	79db      	ldrb	r3, [r3, #7]
 8006fba:	041a      	lsls	r2, r3, #16
 8006fbc:	23fc      	movs	r3, #252	@ 0xfc
 8006fbe:	039b      	lsls	r3, r3, #14
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	18cb      	adds	r3, r1, r3
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	029a      	lsls	r2, r3, #10
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e031      	b.n	8007036 <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006fd2:	200c      	movs	r0, #12
 8006fd4:	183b      	adds	r3, r7, r0
 8006fd6:	795b      	ldrb	r3, [r3, #5]
 8006fd8:	220f      	movs	r2, #15
 8006fda:	4013      	ands	r3, r2
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	183b      	adds	r3, r7, r0
 8006fe0:	7a9b      	ldrb	r3, [r3, #10]
 8006fe2:	09db      	lsrs	r3, r3, #7
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	18d3      	adds	r3, r2, r3
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	183b      	adds	r3, r7, r0
 8006fec:	7a5b      	ldrb	r3, [r3, #9]
 8006fee:	005b      	lsls	r3, r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2106      	movs	r1, #6
 8006ff4:	400b      	ands	r3, r1
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	18d3      	adds	r3, r2, r3
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	242e      	movs	r4, #46	@ 0x2e
 8006ffe:	193b      	adds	r3, r7, r4
 8007000:	3202      	adds	r2, #2
 8007002:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007004:	183b      	adds	r3, r7, r0
 8007006:	7a1b      	ldrb	r3, [r3, #8]
 8007008:	099b      	lsrs	r3, r3, #6
 800700a:	b2db      	uxtb	r3, r3
 800700c:	001a      	movs	r2, r3
 800700e:	183b      	adds	r3, r7, r0
 8007010:	79db      	ldrb	r3, [r3, #7]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	18d2      	adds	r2, r2, r3
 8007016:	183b      	adds	r3, r7, r0
 8007018:	799b      	ldrb	r3, [r3, #6]
 800701a:	0299      	lsls	r1, r3, #10
 800701c:	23c0      	movs	r3, #192	@ 0xc0
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	400b      	ands	r3, r1
 8007022:	18d3      	adds	r3, r2, r3
 8007024:	3301      	adds	r3, #1
 8007026:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007028:	193b      	adds	r3, r7, r4
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	3b09      	subs	r3, #9
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	409a      	lsls	r2, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007036:	232f      	movs	r3, #47	@ 0x2f
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	2200      	movs	r2, #0
 800703c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800703e:	e0dc      	b.n	80071fa <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007040:	4b79      	ldr	r3, [pc, #484]	@ (8007228 <USER_SPI_ioctl+0x320>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	001a      	movs	r2, r3
 8007046:	2304      	movs	r3, #4
 8007048:	4013      	ands	r3, r2
 800704a:	d035      	beq.n	80070b8 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800704c:	2100      	movs	r1, #0
 800704e:	208d      	movs	r0, #141	@ 0x8d
 8007050:	f7ff fcb1 	bl	80069b6 <send_cmd>
 8007054:	1e03      	subs	r3, r0, #0
 8007056:	d000      	beq.n	800705a <USER_SPI_ioctl+0x152>
 8007058:	e0d1      	b.n	80071fe <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 800705a:	20ff      	movs	r0, #255	@ 0xff
 800705c:	f7ff fba2 	bl	80067a4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007060:	230c      	movs	r3, #12
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	2110      	movs	r1, #16
 8007066:	0018      	movs	r0, r3
 8007068:	f7ff fc3c 	bl	80068e4 <rcvr_datablock>
 800706c:	1e03      	subs	r3, r0, #0
 800706e:	d100      	bne.n	8007072 <USER_SPI_ioctl+0x16a>
 8007070:	e0c5      	b.n	80071fe <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007072:	232e      	movs	r3, #46	@ 0x2e
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	2230      	movs	r2, #48	@ 0x30
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	e008      	b.n	800708e <USER_SPI_ioctl+0x186>
 800707c:	20ff      	movs	r0, #255	@ 0xff
 800707e:	f7ff fb91 	bl	80067a4 <xchg_spi>
 8007082:	212e      	movs	r1, #46	@ 0x2e
 8007084:	187b      	adds	r3, r7, r1
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	187b      	adds	r3, r7, r1
 800708a:	3a01      	subs	r2, #1
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	232e      	movs	r3, #46	@ 0x2e
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1f1      	bne.n	800707c <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007098:	230c      	movs	r3, #12
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	7a9b      	ldrb	r3, [r3, #10]
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	001a      	movs	r2, r3
 80070a4:	2310      	movs	r3, #16
 80070a6:	4093      	lsls	r3, r2
 80070a8:	001a      	movs	r2, r3
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80070ae:	232f      	movs	r3, #47	@ 0x2f
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	2200      	movs	r2, #0
 80070b4:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80070b6:	e0a2      	b.n	80071fe <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80070b8:	2100      	movs	r1, #0
 80070ba:	2009      	movs	r0, #9
 80070bc:	f7ff fc7b 	bl	80069b6 <send_cmd>
 80070c0:	1e03      	subs	r3, r0, #0
 80070c2:	d000      	beq.n	80070c6 <USER_SPI_ioctl+0x1be>
 80070c4:	e09b      	b.n	80071fe <USER_SPI_ioctl+0x2f6>
 80070c6:	240c      	movs	r4, #12
 80070c8:	193b      	adds	r3, r7, r4
 80070ca:	2110      	movs	r1, #16
 80070cc:	0018      	movs	r0, r3
 80070ce:	f7ff fc09 	bl	80068e4 <rcvr_datablock>
 80070d2:	1e03      	subs	r3, r0, #0
 80070d4:	d100      	bne.n	80070d8 <USER_SPI_ioctl+0x1d0>
 80070d6:	e092      	b.n	80071fe <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80070d8:	4b53      	ldr	r3, [pc, #332]	@ (8007228 <USER_SPI_ioctl+0x320>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	001a      	movs	r2, r3
 80070de:	2302      	movs	r3, #2
 80070e0:	4013      	ands	r3, r2
 80070e2:	d016      	beq.n	8007112 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80070e4:	0021      	movs	r1, r4
 80070e6:	187b      	adds	r3, r7, r1
 80070e8:	7a9b      	ldrb	r3, [r3, #10]
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	227e      	movs	r2, #126	@ 0x7e
 80070ee:	4013      	ands	r3, r2
 80070f0:	187a      	adds	r2, r7, r1
 80070f2:	7ad2      	ldrb	r2, [r2, #11]
 80070f4:	09d2      	lsrs	r2, r2, #7
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	189b      	adds	r3, r3, r2
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	187b      	adds	r3, r7, r1
 80070fe:	7b5b      	ldrb	r3, [r3, #13]
 8007100:	099b      	lsrs	r3, r3, #6
 8007102:	b2db      	uxtb	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	409a      	lsls	r2, r3
 8007108:	0013      	movs	r3, r2
 800710a:	001a      	movs	r2, r3
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	601a      	str	r2, [r3, #0]
 8007110:	e018      	b.n	8007144 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007112:	210c      	movs	r1, #12
 8007114:	187b      	adds	r3, r7, r1
 8007116:	7a9b      	ldrb	r3, [r3, #10]
 8007118:	109b      	asrs	r3, r3, #2
 800711a:	b29b      	uxth	r3, r3
 800711c:	001a      	movs	r2, r3
 800711e:	231f      	movs	r3, #31
 8007120:	4013      	ands	r3, r2
 8007122:	3301      	adds	r3, #1
 8007124:	0008      	movs	r0, r1
 8007126:	187a      	adds	r2, r7, r1
 8007128:	7ad2      	ldrb	r2, [r2, #11]
 800712a:	00d2      	lsls	r2, r2, #3
 800712c:	2118      	movs	r1, #24
 800712e:	400a      	ands	r2, r1
 8007130:	1839      	adds	r1, r7, r0
 8007132:	7ac9      	ldrb	r1, [r1, #11]
 8007134:	0949      	lsrs	r1, r1, #5
 8007136:	b2c9      	uxtb	r1, r1
 8007138:	1852      	adds	r2, r2, r1
 800713a:	3201      	adds	r2, #1
 800713c:	4353      	muls	r3, r2
 800713e:	001a      	movs	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007144:	232f      	movs	r3, #47	@ 0x2f
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
		break;
 800714c:	e057      	b.n	80071fe <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800714e:	4b36      	ldr	r3, [pc, #216]	@ (8007228 <USER_SPI_ioctl+0x320>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	001a      	movs	r2, r3
 8007154:	2306      	movs	r3, #6
 8007156:	4013      	ands	r3, r2
 8007158:	d053      	beq.n	8007202 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800715a:	240c      	movs	r4, #12
 800715c:	193a      	adds	r2, r7, r4
 800715e:	1dfb      	adds	r3, r7, #7
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	210b      	movs	r1, #11
 8007164:	0018      	movs	r0, r3
 8007166:	f7ff fecf 	bl	8006f08 <USER_SPI_ioctl>
 800716a:	1e03      	subs	r3, r0, #0
 800716c:	d14b      	bne.n	8007206 <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800716e:	193b      	adds	r3, r7, r4
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	099b      	lsrs	r3, r3, #6
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <USER_SPI_ioctl+0x27e>
 800717a:	193b      	adds	r3, r7, r4
 800717c:	7a9b      	ldrb	r3, [r3, #10]
 800717e:	001a      	movs	r2, r3
 8007180:	2340      	movs	r3, #64	@ 0x40
 8007182:	4013      	ands	r3, r2
 8007184:	d041      	beq.n	800720a <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	623b      	str	r3, [r7, #32]
 800718a:	6a3b      	ldr	r3, [r7, #32]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007196:	4b24      	ldr	r3, [pc, #144]	@ (8007228 <USER_SPI_ioctl+0x320>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	001a      	movs	r2, r3
 800719c:	2308      	movs	r3, #8
 800719e:	4013      	ands	r3, r2
 80071a0:	d105      	bne.n	80071ae <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 80071a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a4:	025b      	lsls	r3, r3, #9
 80071a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071aa:	025b      	lsls	r3, r3, #9
 80071ac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80071ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b0:	0019      	movs	r1, r3
 80071b2:	2020      	movs	r0, #32
 80071b4:	f7ff fbff 	bl	80069b6 <send_cmd>
 80071b8:	1e03      	subs	r3, r0, #0
 80071ba:	d128      	bne.n	800720e <USER_SPI_ioctl+0x306>
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	0019      	movs	r1, r3
 80071c0:	2021      	movs	r0, #33	@ 0x21
 80071c2:	f7ff fbf8 	bl	80069b6 <send_cmd>
 80071c6:	1e03      	subs	r3, r0, #0
 80071c8:	d121      	bne.n	800720e <USER_SPI_ioctl+0x306>
 80071ca:	2100      	movs	r1, #0
 80071cc:	2026      	movs	r0, #38	@ 0x26
 80071ce:	f7ff fbf2 	bl	80069b6 <send_cmd>
 80071d2:	1e03      	subs	r3, r0, #0
 80071d4:	d11b      	bne.n	800720e <USER_SPI_ioctl+0x306>
 80071d6:	4b15      	ldr	r3, [pc, #84]	@ (800722c <USER_SPI_ioctl+0x324>)
 80071d8:	0018      	movs	r0, r3
 80071da:	f7ff fb2b 	bl	8006834 <wait_ready>
 80071de:	1e03      	subs	r3, r0, #0
 80071e0:	d015      	beq.n	800720e <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 80071e2:	232f      	movs	r3, #47	@ 0x2f
 80071e4:	18fb      	adds	r3, r7, r3
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80071ea:	e010      	b.n	800720e <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 80071ec:	232f      	movs	r3, #47	@ 0x2f
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	2204      	movs	r2, #4
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	e00c      	b.n	8007210 <USER_SPI_ioctl+0x308>
		break;
 80071f6:	46c0      	nop			@ (mov r8, r8)
 80071f8:	e00a      	b.n	8007210 <USER_SPI_ioctl+0x308>
		break;
 80071fa:	46c0      	nop			@ (mov r8, r8)
 80071fc:	e008      	b.n	8007210 <USER_SPI_ioctl+0x308>
		break;
 80071fe:	46c0      	nop			@ (mov r8, r8)
 8007200:	e006      	b.n	8007210 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007202:	46c0      	nop			@ (mov r8, r8)
 8007204:	e004      	b.n	8007210 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007206:	46c0      	nop			@ (mov r8, r8)
 8007208:	e002      	b.n	8007210 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800720a:	46c0      	nop			@ (mov r8, r8)
 800720c:	e000      	b.n	8007210 <USER_SPI_ioctl+0x308>
		break;
 800720e:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 8007210:	f7ff fb38 	bl	8006884 <despiselect>

	return res;
 8007214:	232f      	movs	r3, #47	@ 0x2f
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	781b      	ldrb	r3, [r3, #0]
}
 800721a:	0018      	movs	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	b00d      	add	sp, #52	@ 0x34
 8007220:	bd90      	pop	{r4, r7, pc}
 8007222:	46c0      	nop			@ (mov r8, r8)
 8007224:	200000e0 	.word	0x200000e0
 8007228:	20000b1d 	.word	0x20000b1d
 800722c:	00007530 	.word	0x00007530

08007230 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007230:	b5b0      	push	{r4, r5, r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	0002      	movs	r2, r0
 8007238:	1dfb      	adds	r3, r7, #7
 800723a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800723c:	1dfb      	adds	r3, r7, #7
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	4a0b      	ldr	r2, [pc, #44]	@ (8007270 <disk_status+0x40>)
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	18d3      	adds	r3, r2, r3
 8007246:	3304      	adds	r3, #4
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	1dfa      	adds	r2, r7, #7
 800724e:	7812      	ldrb	r2, [r2, #0]
 8007250:	4907      	ldr	r1, [pc, #28]	@ (8007270 <disk_status+0x40>)
 8007252:	188a      	adds	r2, r1, r2
 8007254:	7a12      	ldrb	r2, [r2, #8]
 8007256:	250f      	movs	r5, #15
 8007258:	197c      	adds	r4, r7, r5
 800725a:	0010      	movs	r0, r2
 800725c:	4798      	blx	r3
 800725e:	0003      	movs	r3, r0
 8007260:	7023      	strb	r3, [r4, #0]
  return stat;
 8007262:	197b      	adds	r3, r7, r5
 8007264:	781b      	ldrb	r3, [r3, #0]
}
 8007266:	0018      	movs	r0, r3
 8007268:	46bd      	mov	sp, r7
 800726a:	b004      	add	sp, #16
 800726c:	bdb0      	pop	{r4, r5, r7, pc}
 800726e:	46c0      	nop			@ (mov r8, r8)
 8007270:	20000b50 	.word	0x20000b50

08007274 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	0002      	movs	r2, r0
 800727c:	1dfb      	adds	r3, r7, #7
 800727e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 8007280:	200f      	movs	r0, #15
 8007282:	183b      	adds	r3, r7, r0
 8007284:	2200      	movs	r2, #0
 8007286:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 8007288:	1dfb      	adds	r3, r7, #7
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	4a10      	ldr	r2, [pc, #64]	@ (80072d0 <disk_initialize+0x5c>)
 800728e:	5cd3      	ldrb	r3, [r2, r3]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d116      	bne.n	80072c2 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8007294:	1dfb      	adds	r3, r7, #7
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	4a0d      	ldr	r2, [pc, #52]	@ (80072d0 <disk_initialize+0x5c>)
 800729a:	2101      	movs	r1, #1
 800729c:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800729e:	1dfb      	adds	r3, r7, #7
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	4a0b      	ldr	r2, [pc, #44]	@ (80072d0 <disk_initialize+0x5c>)
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	18d3      	adds	r3, r2, r3
 80072a8:	3304      	adds	r3, #4
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	1dfa      	adds	r2, r7, #7
 80072b0:	7812      	ldrb	r2, [r2, #0]
 80072b2:	4907      	ldr	r1, [pc, #28]	@ (80072d0 <disk_initialize+0x5c>)
 80072b4:	188a      	adds	r2, r1, r2
 80072b6:	7a12      	ldrb	r2, [r2, #8]
 80072b8:	183c      	adds	r4, r7, r0
 80072ba:	0010      	movs	r0, r2
 80072bc:	4798      	blx	r3
 80072be:	0003      	movs	r3, r0
 80072c0:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 80072c2:	230f      	movs	r3, #15
 80072c4:	18fb      	adds	r3, r7, r3
 80072c6:	781b      	ldrb	r3, [r3, #0]
}
 80072c8:	0018      	movs	r0, r3
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b005      	add	sp, #20
 80072ce:	bd90      	pop	{r4, r7, pc}
 80072d0:	20000b50 	.word	0x20000b50

080072d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80072d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	603b      	str	r3, [r7, #0]
 80072e0:	210f      	movs	r1, #15
 80072e2:	187b      	adds	r3, r7, r1
 80072e4:	1c02      	adds	r2, r0, #0
 80072e6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80072e8:	187b      	adds	r3, r7, r1
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007320 <disk_read+0x4c>)
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	18d3      	adds	r3, r2, r3
 80072f2:	3304      	adds	r3, #4
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689d      	ldr	r5, [r3, #8]
 80072f8:	187b      	adds	r3, r7, r1
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	4a08      	ldr	r2, [pc, #32]	@ (8007320 <disk_read+0x4c>)
 80072fe:	18d3      	adds	r3, r2, r3
 8007300:	7a18      	ldrb	r0, [r3, #8]
 8007302:	2617      	movs	r6, #23
 8007304:	19bc      	adds	r4, r7, r6
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	68b9      	ldr	r1, [r7, #8]
 800730c:	47a8      	blx	r5
 800730e:	0003      	movs	r3, r0
 8007310:	7023      	strb	r3, [r4, #0]
  return res;
 8007312:	19bb      	adds	r3, r7, r6
 8007314:	781b      	ldrb	r3, [r3, #0]
}
 8007316:	0018      	movs	r0, r3
 8007318:	46bd      	mov	sp, r7
 800731a:	b007      	add	sp, #28
 800731c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731e:	46c0      	nop			@ (mov r8, r8)
 8007320:	20000b50 	.word	0x20000b50

08007324 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	210f      	movs	r1, #15
 8007332:	187b      	adds	r3, r7, r1
 8007334:	1c02      	adds	r2, r0, #0
 8007336:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007338:	187b      	adds	r3, r7, r1
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	4a0c      	ldr	r2, [pc, #48]	@ (8007370 <disk_write+0x4c>)
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	18d3      	adds	r3, r2, r3
 8007342:	3304      	adds	r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68dd      	ldr	r5, [r3, #12]
 8007348:	187b      	adds	r3, r7, r1
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	4a08      	ldr	r2, [pc, #32]	@ (8007370 <disk_write+0x4c>)
 800734e:	18d3      	adds	r3, r2, r3
 8007350:	7a18      	ldrb	r0, [r3, #8]
 8007352:	2617      	movs	r6, #23
 8007354:	19bc      	adds	r4, r7, r6
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	47a8      	blx	r5
 800735e:	0003      	movs	r3, r0
 8007360:	7023      	strb	r3, [r4, #0]
  return res;
 8007362:	19bb      	adds	r3, r7, r6
 8007364:	781b      	ldrb	r3, [r3, #0]
}
 8007366:	0018      	movs	r0, r3
 8007368:	46bd      	mov	sp, r7
 800736a:	b007      	add	sp, #28
 800736c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736e:	46c0      	nop			@ (mov r8, r8)
 8007370:	20000b50 	.word	0x20000b50

08007374 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	603a      	str	r2, [r7, #0]
 800737c:	1dfb      	adds	r3, r7, #7
 800737e:	1c02      	adds	r2, r0, #0
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	1dbb      	adds	r3, r7, #6
 8007384:	1c0a      	adds	r2, r1, #0
 8007386:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007388:	1dfb      	adds	r3, r7, #7
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	4a0c      	ldr	r2, [pc, #48]	@ (80073c0 <disk_ioctl+0x4c>)
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	18d3      	adds	r3, r2, r3
 8007392:	3304      	adds	r3, #4
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	1dfa      	adds	r2, r7, #7
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	4908      	ldr	r1, [pc, #32]	@ (80073c0 <disk_ioctl+0x4c>)
 800739e:	188a      	adds	r2, r1, r2
 80073a0:	7a10      	ldrb	r0, [r2, #8]
 80073a2:	260f      	movs	r6, #15
 80073a4:	19bc      	adds	r4, r7, r6
 80073a6:	683d      	ldr	r5, [r7, #0]
 80073a8:	1dba      	adds	r2, r7, #6
 80073aa:	7811      	ldrb	r1, [r2, #0]
 80073ac:	002a      	movs	r2, r5
 80073ae:	4798      	blx	r3
 80073b0:	0003      	movs	r3, r0
 80073b2:	7023      	strb	r3, [r4, #0]
  return res;
 80073b4:	19bb      	adds	r3, r7, r6
 80073b6:	781b      	ldrb	r3, [r3, #0]
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b005      	add	sp, #20
 80073be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c0:	20000b50 	.word	0x20000b50

080073c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3301      	adds	r3, #1
 80073d0:	781a      	ldrb	r2, [r3, #0]
 80073d2:	210e      	movs	r1, #14
 80073d4:	187b      	adds	r3, r7, r1
 80073d6:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 80073d8:	187b      	adds	r3, r7, r1
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	b21a      	sxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	b21b      	sxth	r3, r3
 80073e6:	4313      	orrs	r3, r2
 80073e8:	b21a      	sxth	r2, r3
 80073ea:	187b      	adds	r3, r7, r1
 80073ec:	801a      	strh	r2, [r3, #0]
	return rv;
 80073ee:	187b      	adds	r3, r7, r1
 80073f0:	881b      	ldrh	r3, [r3, #0]
}
 80073f2:	0018      	movs	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b004      	add	sp, #16
 80073f8:	bd80      	pop	{r7, pc}

080073fa <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3303      	adds	r3, #3
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	3202      	adds	r2, #2
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	3201      	adds	r2, #1
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	7812      	ldrb	r2, [r2, #0]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]
	return rv;
 8007432:	68fb      	ldr	r3, [r7, #12]
}
 8007434:	0018      	movs	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	b004      	add	sp, #16
 800743a:	bd80      	pop	{r7, pc}

0800743c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	000a      	movs	r2, r1
 8007446:	1cbb      	adds	r3, r7, #2
 8007448:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	607a      	str	r2, [r7, #4]
 8007450:	1cba      	adds	r2, r7, #2
 8007452:	8812      	ldrh	r2, [r2, #0]
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	1cbb      	adds	r3, r7, #2
 800745a:	1cba      	adds	r2, r7, #2
 800745c:	8812      	ldrh	r2, [r2, #0]
 800745e:	0a12      	lsrs	r2, r2, #8
 8007460:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	1cba      	adds	r2, r7, #2
 800746a:	8812      	ldrh	r2, [r2, #0]
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	701a      	strb	r2, [r3, #0]
}
 8007470:	46c0      	nop			@ (mov r8, r8)
 8007472:	46bd      	mov	sp, r7
 8007474:	b002      	add	sp, #8
 8007476:	bd80      	pop	{r7, pc}

08007478 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	0a1b      	lsrs	r3, r3, #8
 8007492:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	683a      	ldr	r2, [r7, #0]
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	701a      	strb	r2, [r3, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	0a1b      	lsrs	r3, r3, #8
 80074b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	607a      	str	r2, [r7, #4]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]
}
 80074c4:	46c0      	nop			@ (mov r8, r8)
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b002      	add	sp, #8
 80074ca:	bd80      	pop	{r7, pc}

080074cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00d      	beq.n	8007502 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	1c53      	adds	r3, r2, #1
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	1c59      	adds	r1, r3, #1
 80074f0:	6179      	str	r1, [r7, #20]
 80074f2:	7812      	ldrb	r2, [r2, #0]
 80074f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3b01      	subs	r3, #1
 80074fa:	607b      	str	r3, [r7, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f1      	bne.n	80074e6 <mem_cpy+0x1a>
	}
}
 8007502:	46c0      	nop			@ (mov r8, r8)
 8007504:	46bd      	mov	sp, r7
 8007506:	b006      	add	sp, #24
 8007508:	bd80      	pop	{r7, pc}

0800750a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	617a      	str	r2, [r7, #20]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	607b      	str	r3, [r7, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1f3      	bne.n	800751a <mem_set+0x10>
}
 8007532:	46c0      	nop			@ (mov r8, r8)
 8007534:	46c0      	nop			@ (mov r8, r8)
 8007536:	46bd      	mov	sp, r7
 8007538:	b006      	add	sp, #24
 800753a:	bd80      	pop	{r7, pc}

0800753c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	61fb      	str	r3, [r7, #28]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	61fa      	str	r2, [r7, #28]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	0019      	movs	r1, r3
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	61ba      	str	r2, [r7, #24]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	1acb      	subs	r3, r1, r3
 8007568:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3b01      	subs	r3, #1
 800756e:	607b      	str	r3, [r7, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <mem_cmp+0x40>
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0eb      	beq.n	8007554 <mem_cmp+0x18>

	return r;
 800757c:	697b      	ldr	r3, [r7, #20]
}
 800757e:	0018      	movs	r0, r3
 8007580:	46bd      	mov	sp, r7
 8007582:	b008      	add	sp, #32
 8007584:	bd80      	pop	{r7, pc}

08007586 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007590:	e002      	b.n	8007598 <chk_chr+0x12>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3301      	adds	r3, #1
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <chk_chr+0x26>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	001a      	movs	r2, r3
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d1f2      	bne.n	8007592 <chk_chr+0xc>
	return *str;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	781b      	ldrb	r3, [r3, #0]
}
 80075b0:	0018      	movs	r0, r3
 80075b2:	46bd      	mov	sp, r7
 80075b4:	b002      	add	sp, #8
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <lock_fs+0x20>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	0018      	movs	r0, r3
 80075cc:	f002 faef 	bl	8009bae <ff_req_grant>
 80075d0:	1e03      	subs	r3, r0, #0
 80075d2:	d001      	beq.n	80075d8 <lock_fs+0x20>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <lock_fs+0x22>
 80075d8:	2300      	movs	r3, #0
}
 80075da:	0018      	movs	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	b002      	add	sp, #8
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b082      	sub	sp, #8
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	000a      	movs	r2, r1
 80075ec:	1cfb      	adds	r3, r7, #3
 80075ee:	701a      	strb	r2, [r3, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d010      	beq.n	8007618 <unlock_fs+0x36>
 80075f6:	1cfb      	adds	r3, r7, #3
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2b0c      	cmp	r3, #12
 80075fc:	d00c      	beq.n	8007618 <unlock_fs+0x36>
 80075fe:	1cfb      	adds	r3, r7, #3
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b0b      	cmp	r3, #11
 8007604:	d008      	beq.n	8007618 <unlock_fs+0x36>
 8007606:	1cfb      	adds	r3, r7, #3
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b0f      	cmp	r3, #15
 800760c:	d004      	beq.n	8007618 <unlock_fs+0x36>
		ff_rel_grant(fs->sobj);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	0018      	movs	r0, r3
 8007614:	f002 fae1 	bl	8009bda <ff_rel_grant>
	}
}
 8007618:	46c0      	nop			@ (mov r8, r8)
 800761a:	46bd      	mov	sp, r7
 800761c:	b002      	add	sp, #8
 800761e:	bd80      	pop	{r7, pc}

08007620 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800762a:	2300      	movs	r3, #0
 800762c:	60bb      	str	r3, [r7, #8]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	e027      	b.n	8007684 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8007634:	4b25      	ldr	r3, [pc, #148]	@ (80076cc <chk_lock+0xac>)
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	0112      	lsls	r2, r2, #4
 800763a:	58d3      	ldr	r3, [r2, r3]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d01c      	beq.n	800767a <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007640:	4b22      	ldr	r3, [pc, #136]	@ (80076cc <chk_lock+0xac>)
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	0112      	lsls	r2, r2, #4
 8007646:	58d2      	ldr	r2, [r2, r3]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d116      	bne.n	800767e <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8007650:	4a1e      	ldr	r2, [pc, #120]	@ (80076cc <chk_lock+0xac>)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	18d3      	adds	r3, r2, r3
 8007658:	3304      	adds	r3, #4
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007660:	429a      	cmp	r2, r3
 8007662:	d10c      	bne.n	800767e <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8007664:	4a19      	ldr	r2, [pc, #100]	@ (80076cc <chk_lock+0xac>)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	18d3      	adds	r3, r2, r3
 800766c:	3308      	adds	r3, #8
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007674:	429a      	cmp	r2, r3
 8007676:	d102      	bne.n	800767e <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8007678:	e007      	b.n	800768a <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 800767a:	2301      	movs	r3, #1
 800767c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d9d4      	bls.n	8007634 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b02      	cmp	r3, #2
 800768e:	d109      	bne.n	80076a4 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <chk_lock+0x7c>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d101      	bne.n	80076a0 <chk_lock+0x80>
 800769c:	2300      	movs	r3, #0
 800769e:	e011      	b.n	80076c4 <chk_lock+0xa4>
 80076a0:	2312      	movs	r3, #18
 80076a2:	e00f      	b.n	80076c4 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <chk_lock+0x9e>
 80076aa:	4a08      	ldr	r2, [pc, #32]	@ (80076cc <chk_lock+0xac>)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	18d3      	adds	r3, r2, r3
 80076b2:	330c      	adds	r3, #12
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	2380      	movs	r3, #128	@ 0x80
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d101      	bne.n	80076c2 <chk_lock+0xa2>
 80076be:	2310      	movs	r3, #16
 80076c0:	e000      	b.n	80076c4 <chk_lock+0xa4>
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	0018      	movs	r0, r3
 80076c6:	46bd      	mov	sp, r7
 80076c8:	b004      	add	sp, #16
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	20000b30 	.word	0x20000b30

080076d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076d6:	2300      	movs	r3, #0
 80076d8:	607b      	str	r3, [r7, #4]
 80076da:	e002      	b.n	80076e2 <enq_lock+0x12>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3301      	adds	r3, #1
 80076e0:	607b      	str	r3, [r7, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d805      	bhi.n	80076f4 <enq_lock+0x24>
 80076e8:	4b07      	ldr	r3, [pc, #28]	@ (8007708 <enq_lock+0x38>)
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	0112      	lsls	r2, r2, #4
 80076ee:	58d3      	ldr	r3, [r2, r3]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1f3      	bne.n	80076dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3b02      	subs	r3, #2
 80076f8:	1e5a      	subs	r2, r3, #1
 80076fa:	4193      	sbcs	r3, r2
 80076fc:	b2db      	uxtb	r3, r3
}
 80076fe:	0018      	movs	r0, r3
 8007700:	46bd      	mov	sp, r7
 8007702:	b002      	add	sp, #8
 8007704:	bd80      	pop	{r7, pc}
 8007706:	46c0      	nop			@ (mov r8, r8)
 8007708:	20000b30 	.word	0x20000b30

0800770c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	e01e      	b.n	800775a <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 800771c:	4b3f      	ldr	r3, [pc, #252]	@ (800781c <inc_lock+0x110>)
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	0112      	lsls	r2, r2, #4
 8007722:	58d2      	ldr	r2, [r2, r3]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d113      	bne.n	8007754 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 800772c:	4a3b      	ldr	r2, [pc, #236]	@ (800781c <inc_lock+0x110>)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	011b      	lsls	r3, r3, #4
 8007732:	18d3      	adds	r3, r2, r3
 8007734:	3304      	adds	r3, #4
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800773c:	429a      	cmp	r2, r3
 800773e:	d109      	bne.n	8007754 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8007740:	4a36      	ldr	r2, [pc, #216]	@ (800781c <inc_lock+0x110>)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	18d3      	adds	r3, r2, r3
 8007748:	3308      	adds	r3, #8
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007750:	429a      	cmp	r2, r3
 8007752:	d006      	beq.n	8007762 <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d9dd      	bls.n	800771c <inc_lock+0x10>
 8007760:	e000      	b.n	8007764 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8007762:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d130      	bne.n	80077cc <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e002      	b.n	8007776 <inc_lock+0x6a>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d805      	bhi.n	8007788 <inc_lock+0x7c>
 800777c:	4b27      	ldr	r3, [pc, #156]	@ (800781c <inc_lock+0x110>)
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	0112      	lsls	r2, r2, #4
 8007782:	58d3      	ldr	r3, [r2, r3]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1f3      	bne.n	8007770 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d101      	bne.n	8007792 <inc_lock+0x86>
 800778e:	2300      	movs	r3, #0
 8007790:	e03f      	b.n	8007812 <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6819      	ldr	r1, [r3, #0]
 8007796:	4b21      	ldr	r3, [pc, #132]	@ (800781c <inc_lock+0x110>)
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	0112      	lsls	r2, r2, #4
 800779c:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	491e      	ldr	r1, [pc, #120]	@ (800781c <inc_lock+0x110>)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	18cb      	adds	r3, r1, r3
 80077aa:	3304      	adds	r3, #4
 80077ac:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695a      	ldr	r2, [r3, #20]
 80077b2:	491a      	ldr	r1, [pc, #104]	@ (800781c <inc_lock+0x110>)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	18cb      	adds	r3, r1, r3
 80077ba:	3308      	adds	r3, #8
 80077bc:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80077be:	4a17      	ldr	r2, [pc, #92]	@ (800781c <inc_lock+0x110>)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	18d3      	adds	r3, r2, r3
 80077c6:	330c      	adds	r3, #12
 80077c8:	2200      	movs	r2, #0
 80077ca:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d009      	beq.n	80077e6 <inc_lock+0xda>
 80077d2:	4a12      	ldr	r2, [pc, #72]	@ (800781c <inc_lock+0x110>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	011b      	lsls	r3, r3, #4
 80077d8:	18d3      	adds	r3, r2, r3
 80077da:	330c      	adds	r3, #12
 80077dc:	881b      	ldrh	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <inc_lock+0xda>
 80077e2:	2300      	movs	r3, #0
 80077e4:	e015      	b.n	8007812 <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d108      	bne.n	80077fe <inc_lock+0xf2>
 80077ec:	4a0b      	ldr	r2, [pc, #44]	@ (800781c <inc_lock+0x110>)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	18d3      	adds	r3, r2, r3
 80077f4:	330c      	adds	r3, #12
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	e001      	b.n	8007802 <inc_lock+0xf6>
 80077fe:	2380      	movs	r3, #128	@ 0x80
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	4906      	ldr	r1, [pc, #24]	@ (800781c <inc_lock+0x110>)
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	0112      	lsls	r2, r2, #4
 8007808:	188a      	adds	r2, r1, r2
 800780a:	320c      	adds	r2, #12
 800780c:	8013      	strh	r3, [r2, #0]

	return i + 1;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3301      	adds	r3, #1
}
 8007812:	0018      	movs	r0, r3
 8007814:	46bd      	mov	sp, r7
 8007816:	b004      	add	sp, #16
 8007818:	bd80      	pop	{r7, pc}
 800781a:	46c0      	nop			@ (mov r8, r8)
 800781c:	20000b30 	.word	0x20000b30

08007820 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3b01      	subs	r3, #1
 800782c:	607b      	str	r3, [r7, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d832      	bhi.n	800789a <dec_lock+0x7a>
		n = Files[i].ctr;
 8007834:	200e      	movs	r0, #14
 8007836:	183b      	adds	r3, r7, r0
 8007838:	491d      	ldr	r1, [pc, #116]	@ (80078b0 <dec_lock+0x90>)
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	0112      	lsls	r2, r2, #4
 800783e:	188a      	adds	r2, r1, r2
 8007840:	320c      	adds	r2, #12
 8007842:	8812      	ldrh	r2, [r2, #0]
 8007844:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007846:	183b      	adds	r3, r7, r0
 8007848:	881a      	ldrh	r2, [r3, #0]
 800784a:	2380      	movs	r3, #128	@ 0x80
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	429a      	cmp	r2, r3
 8007850:	d102      	bne.n	8007858 <dec_lock+0x38>
 8007852:	183b      	adds	r3, r7, r0
 8007854:	2200      	movs	r2, #0
 8007856:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007858:	210e      	movs	r1, #14
 800785a:	187b      	adds	r3, r7, r1
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <dec_lock+0x4c>
 8007862:	187b      	adds	r3, r7, r1
 8007864:	881a      	ldrh	r2, [r3, #0]
 8007866:	187b      	adds	r3, r7, r1
 8007868:	3a01      	subs	r2, #1
 800786a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 800786c:	4a10      	ldr	r2, [pc, #64]	@ (80078b0 <dec_lock+0x90>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	330c      	adds	r3, #12
 8007876:	210e      	movs	r1, #14
 8007878:	187a      	adds	r2, r7, r1
 800787a:	8812      	ldrh	r2, [r2, #0]
 800787c:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800787e:	187b      	adds	r3, r7, r1
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d104      	bne.n	8007890 <dec_lock+0x70>
 8007886:	4b0a      	ldr	r3, [pc, #40]	@ (80078b0 <dec_lock+0x90>)
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	0112      	lsls	r2, r2, #4
 800788c:	2100      	movs	r1, #0
 800788e:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8007890:	230d      	movs	r3, #13
 8007892:	18fb      	adds	r3, r7, r3
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
 8007898:	e003      	b.n	80078a2 <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800789a:	230d      	movs	r3, #13
 800789c:	18fb      	adds	r3, r7, r3
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
	}
	return res;
 80078a2:	230d      	movs	r3, #13
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	781b      	ldrb	r3, [r3, #0]
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b004      	add	sp, #16
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20000b30 	.word	0x20000b30

080078b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80078bc:	2300      	movs	r3, #0
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e00e      	b.n	80078e0 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078c2:	4b0b      	ldr	r3, [pc, #44]	@ (80078f0 <clear_lock+0x3c>)
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	0112      	lsls	r2, r2, #4
 80078c8:	58d3      	ldr	r3, [r2, r3]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d104      	bne.n	80078da <clear_lock+0x26>
 80078d0:	4b07      	ldr	r3, [pc, #28]	@ (80078f0 <clear_lock+0x3c>)
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	0112      	lsls	r2, r2, #4
 80078d6:	2100      	movs	r1, #0
 80078d8:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d9ed      	bls.n	80078c2 <clear_lock+0xe>
	}
}
 80078e6:	46c0      	nop			@ (mov r8, r8)
 80078e8:	46c0      	nop			@ (mov r8, r8)
 80078ea:	46bd      	mov	sp, r7
 80078ec:	b004      	add	sp, #16
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000b30 	.word	0x20000b30

080078f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80078f4:	b590      	push	{r4, r7, lr}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80078fc:	240f      	movs	r4, #15
 80078fe:	193b      	adds	r3, r7, r4
 8007900:	2200      	movs	r2, #0
 8007902:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	78db      	ldrb	r3, [r3, #3]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d034      	beq.n	8007976 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007910:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7858      	ldrb	r0, [r3, #1]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3334      	adds	r3, #52	@ 0x34
 800791a:	0019      	movs	r1, r3
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	2301      	movs	r3, #1
 8007920:	f7ff fd00 	bl	8007324 <disk_write>
 8007924:	1e03      	subs	r3, r0, #0
 8007926:	d003      	beq.n	8007930 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8007928:	193b      	adds	r3, r7, r4
 800792a:	2201      	movs	r2, #1
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e022      	b.n	8007976 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	429a      	cmp	r2, r3
 8007944:	d217      	bcs.n	8007976 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	789b      	ldrb	r3, [r3, #2]
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	e010      	b.n	8007970 <sync_window+0x7c>
					wsect += fs->fsize;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	18d3      	adds	r3, r2, r3
 8007956:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7858      	ldrb	r0, [r3, #1]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3334      	adds	r3, #52	@ 0x34
 8007960:	0019      	movs	r1, r3
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	2301      	movs	r3, #1
 8007966:	f7ff fcdd 	bl	8007324 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	3b01      	subs	r3, #1
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d8eb      	bhi.n	800794e <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8007976:	230f      	movs	r3, #15
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	781b      	ldrb	r3, [r3, #0]
}
 800797c:	0018      	movs	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	b007      	add	sp, #28
 8007982:	bd90      	pop	{r4, r7, pc}

08007984 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007984:	b5b0      	push	{r4, r5, r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800798e:	250f      	movs	r5, #15
 8007990:	197b      	adds	r3, r7, r5
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d01f      	beq.n	80079e0 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80079a0:	197c      	adds	r4, r7, r5
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	0018      	movs	r0, r3
 80079a6:	f7ff ffa5 	bl	80078f4 <sync_window>
 80079aa:	0003      	movs	r3, r0
 80079ac:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80079ae:	002c      	movs	r4, r5
 80079b0:	193b      	adds	r3, r7, r4
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d113      	bne.n	80079e0 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7858      	ldrb	r0, [r3, #1]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3334      	adds	r3, #52	@ 0x34
 80079c0:	0019      	movs	r1, r3
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	2301      	movs	r3, #1
 80079c6:	f7ff fc85 	bl	80072d4 <disk_read>
 80079ca:	1e03      	subs	r3, r0, #0
 80079cc:	d005      	beq.n	80079da <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079ce:	2301      	movs	r3, #1
 80079d0:	425b      	negs	r3, r3
 80079d2:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079d4:	193b      	adds	r3, r7, r4
 80079d6:	2201      	movs	r2, #1
 80079d8:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80079e0:	230f      	movs	r3, #15
 80079e2:	18fb      	adds	r3, r7, r3
 80079e4:	781b      	ldrb	r3, [r3, #0]
}
 80079e6:	0018      	movs	r0, r3
 80079e8:	46bd      	mov	sp, r7
 80079ea:	b004      	add	sp, #16
 80079ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080079f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079f0:	b5b0      	push	{r4, r5, r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079f8:	250f      	movs	r5, #15
 80079fa:	197c      	adds	r4, r7, r5
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	0018      	movs	r0, r3
 8007a00:	f7ff ff78 	bl	80078f4 <sync_window>
 8007a04:	0003      	movs	r3, r0
 8007a06:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007a08:	197b      	adds	r3, r7, r5
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d15d      	bne.n	8007acc <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b03      	cmp	r3, #3
 8007a16:	d14c      	bne.n	8007ab2 <sync_fs+0xc2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	791b      	ldrb	r3, [r3, #4]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d148      	bne.n	8007ab2 <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3334      	adds	r3, #52	@ 0x34
 8007a24:	2280      	movs	r2, #128	@ 0x80
 8007a26:	0092      	lsls	r2, r2, #2
 8007a28:	2100      	movs	r1, #0
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7ff fd6d 	bl	800750a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3334      	adds	r3, #52	@ 0x34
 8007a34:	33ff      	adds	r3, #255	@ 0xff
 8007a36:	33ff      	adds	r3, #255	@ 0xff
 8007a38:	4a28      	ldr	r2, [pc, #160]	@ (8007adc <sync_fs+0xec>)
 8007a3a:	0011      	movs	r1, r2
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f7ff fcfd 	bl	800743c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3334      	adds	r3, #52	@ 0x34
 8007a46:	4a26      	ldr	r2, [pc, #152]	@ (8007ae0 <sync_fs+0xf0>)
 8007a48:	0011      	movs	r1, r2
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f7ff fd14 	bl	8007478 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3334      	adds	r3, #52	@ 0x34
 8007a54:	33e5      	adds	r3, #229	@ 0xe5
 8007a56:	33ff      	adds	r3, #255	@ 0xff
 8007a58:	4a22      	ldr	r2, [pc, #136]	@ (8007ae4 <sync_fs+0xf4>)
 8007a5a:	0011      	movs	r1, r2
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f7ff fd0b 	bl	8007478 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3334      	adds	r3, #52	@ 0x34
 8007a66:	33e9      	adds	r3, #233	@ 0xe9
 8007a68:	33ff      	adds	r3, #255	@ 0xff
 8007a6a:	001a      	movs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	0019      	movs	r1, r3
 8007a72:	0010      	movs	r0, r2
 8007a74:	f7ff fd00 	bl	8007478 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3334      	adds	r3, #52	@ 0x34
 8007a7c:	33ed      	adds	r3, #237	@ 0xed
 8007a7e:	33ff      	adds	r3, #255	@ 0xff
 8007a80:	001a      	movs	r2, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	0019      	movs	r1, r3
 8007a88:	0010      	movs	r0, r2
 8007a8a:	f7ff fcf5 	bl	8007478 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7858      	ldrb	r0, [r3, #1]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3334      	adds	r3, #52	@ 0x34
 8007aa0:	0019      	movs	r1, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f7ff fc3c 	bl	8007324 <disk_write>
			fs->fsi_flag = 0;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	785b      	ldrb	r3, [r3, #1]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	2100      	movs	r1, #0
 8007aba:	0018      	movs	r0, r3
 8007abc:	f7ff fc5a 	bl	8007374 <disk_ioctl>
 8007ac0:	1e03      	subs	r3, r0, #0
 8007ac2:	d003      	beq.n	8007acc <sync_fs+0xdc>
 8007ac4:	230f      	movs	r3, #15
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	2201      	movs	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8007acc:	230f      	movs	r3, #15
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	781b      	ldrb	r3, [r3, #0]
}
 8007ad2:	0018      	movs	r0, r3
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	b004      	add	sp, #16
 8007ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8007ada:	46c0      	nop			@ (mov r8, r8)
 8007adc:	0000aa55 	.word	0x0000aa55
 8007ae0:	41615252 	.word	0x41615252
 8007ae4:	61417272 	.word	0x61417272

08007ae8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	3b02      	subs	r3, #2
 8007af6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	3b02      	subs	r3, #2
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d301      	bcc.n	8007b08 <clust2sect+0x20>
 8007b04:	2300      	movs	r3, #0
 8007b06:	e007      	b.n	8007b18 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	895b      	ldrh	r3, [r3, #10]
 8007b0c:	001a      	movs	r2, r3
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	435a      	muls	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	18d3      	adds	r3, r2, r3
}
 8007b18:	0018      	movs	r0, r3
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	b002      	add	sp, #8
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d904      	bls.n	8007b40 <get_fat+0x20>
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d302      	bcc.n	8007b46 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b40:	2301      	movs	r3, #1
 8007b42:	617b      	str	r3, [r7, #20]
 8007b44:	e091      	b.n	8007c6a <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b46:	2301      	movs	r3, #1
 8007b48:	425b      	negs	r3, r3
 8007b4a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d063      	beq.n	8007c1c <get_fat+0xfc>
 8007b54:	dd00      	ble.n	8007b58 <get_fat+0x38>
 8007b56:	e07e      	b.n	8007c56 <get_fat+0x136>
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d002      	beq.n	8007b62 <get_fat+0x42>
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d042      	beq.n	8007be6 <get_fat+0xc6>
 8007b60:	e079      	b.n	8007c56 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	085b      	lsrs	r3, r3, #1
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	18d3      	adds	r3, r2, r3
 8007b6e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	0a5b      	lsrs	r3, r3, #9
 8007b78:	18d2      	adds	r2, r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	0011      	movs	r1, r2
 8007b7e:	0018      	movs	r0, r3
 8007b80:	f7ff ff00 	bl	8007984 <move_window>
 8007b84:	1e03      	subs	r3, r0, #0
 8007b86:	d169      	bne.n	8007c5c <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	60fa      	str	r2, [r7, #12]
 8007b8e:	05db      	lsls	r3, r3, #23
 8007b90:	0ddb      	lsrs	r3, r3, #23
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	2134      	movs	r1, #52	@ 0x34
 8007b96:	18d3      	adds	r3, r2, r3
 8007b98:	185b      	adds	r3, r3, r1
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	0a5b      	lsrs	r3, r3, #9
 8007ba6:	18d2      	adds	r2, r2, r3
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	0011      	movs	r1, r2
 8007bac:	0018      	movs	r0, r3
 8007bae:	f7ff fee9 	bl	8007984 <move_window>
 8007bb2:	1e03      	subs	r3, r0, #0
 8007bb4:	d154      	bne.n	8007c60 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	05db      	lsls	r3, r3, #23
 8007bba:	0ddb      	lsrs	r3, r3, #23
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	2134      	movs	r1, #52	@ 0x34
 8007bc0:	18d3      	adds	r3, r2, r3
 8007bc2:	185b      	adds	r3, r3, r1
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	021b      	lsls	r3, r3, #8
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	d002      	beq.n	8007bdc <get_fat+0xbc>
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	091b      	lsrs	r3, r3, #4
 8007bda:	e002      	b.n	8007be2 <get_fat+0xc2>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	051b      	lsls	r3, r3, #20
 8007be0:	0d1b      	lsrs	r3, r3, #20
 8007be2:	617b      	str	r3, [r7, #20]
			break;
 8007be4:	e041      	b.n	8007c6a <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	0a1b      	lsrs	r3, r3, #8
 8007bee:	18d2      	adds	r2, r2, r3
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	0011      	movs	r1, r2
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f7ff fec5 	bl	8007984 <move_window>
 8007bfa:	1e03      	subs	r3, r0, #0
 8007bfc:	d132      	bne.n	8007c64 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	3334      	adds	r3, #52	@ 0x34
 8007c02:	001a      	movs	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	0059      	lsls	r1, r3, #1
 8007c08:	23ff      	movs	r3, #255	@ 0xff
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	400b      	ands	r3, r1
 8007c0e:	18d3      	adds	r3, r2, r3
 8007c10:	0018      	movs	r0, r3
 8007c12:	f7ff fbd7 	bl	80073c4 <ld_word>
 8007c16:	0003      	movs	r3, r0
 8007c18:	617b      	str	r3, [r7, #20]
			break;
 8007c1a:	e026      	b.n	8007c6a <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	09db      	lsrs	r3, r3, #7
 8007c24:	18d2      	adds	r2, r2, r3
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	0011      	movs	r1, r2
 8007c2a:	0018      	movs	r0, r3
 8007c2c:	f7ff feaa 	bl	8007984 <move_window>
 8007c30:	1e03      	subs	r3, r0, #0
 8007c32:	d119      	bne.n	8007c68 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	3334      	adds	r3, #52	@ 0x34
 8007c38:	001a      	movs	r2, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	0099      	lsls	r1, r3, #2
 8007c3e:	23fe      	movs	r3, #254	@ 0xfe
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	400b      	ands	r3, r1
 8007c44:	18d3      	adds	r3, r2, r3
 8007c46:	0018      	movs	r0, r3
 8007c48:	f7ff fbd7 	bl	80073fa <ld_dword>
 8007c4c:	0003      	movs	r3, r0
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	091b      	lsrs	r3, r3, #4
 8007c52:	617b      	str	r3, [r7, #20]
			break;
 8007c54:	e009      	b.n	8007c6a <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c56:	2301      	movs	r3, #1
 8007c58:	617b      	str	r3, [r7, #20]
 8007c5a:	e006      	b.n	8007c6a <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c5c:	46c0      	nop			@ (mov r8, r8)
 8007c5e:	e004      	b.n	8007c6a <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c60:	46c0      	nop			@ (mov r8, r8)
 8007c62:	e002      	b.n	8007c6a <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c64:	46c0      	nop			@ (mov r8, r8)
 8007c66:	e000      	b.n	8007c6a <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c68:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8007c6a:	697b      	ldr	r3, [r7, #20]
}
 8007c6c:	0018      	movs	r0, r3
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	b006      	add	sp, #24
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007c74:	b5b0      	push	{r4, r5, r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007c80:	231f      	movs	r3, #31
 8007c82:	18fb      	adds	r3, r7, r3
 8007c84:	2202      	movs	r2, #2
 8007c86:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d800      	bhi.n	8007c90 <put_fat+0x1c>
 8007c8e:	e0eb      	b.n	8007e68 <put_fat+0x1f4>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d300      	bcc.n	8007c9c <put_fat+0x28>
 8007c9a:	e0e5      	b.n	8007e68 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d100      	bne.n	8007ca6 <put_fat+0x32>
 8007ca4:	e0a1      	b.n	8007dea <put_fat+0x176>
 8007ca6:	dd00      	ble.n	8007caa <put_fat+0x36>
 8007ca8:	e0de      	b.n	8007e68 <put_fat+0x1f4>
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d003      	beq.n	8007cb6 <put_fat+0x42>
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d100      	bne.n	8007cb4 <put_fat+0x40>
 8007cb2:	e075      	b.n	8007da0 <put_fat+0x12c>
 8007cb4:	e0d8      	b.n	8007e68 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	61bb      	str	r3, [r7, #24]
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	18d3      	adds	r3, r2, r3
 8007cc2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	0a5b      	lsrs	r3, r3, #9
 8007ccc:	18d2      	adds	r2, r2, r3
 8007cce:	251f      	movs	r5, #31
 8007cd0:	197c      	adds	r4, r7, r5
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	0011      	movs	r1, r2
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7ff fe54 	bl	8007984 <move_window>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007ce0:	197b      	adds	r3, r7, r5
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d000      	beq.n	8007cea <put_fat+0x76>
 8007ce8:	e0b7      	b.n	8007e5a <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3334      	adds	r3, #52	@ 0x34
 8007cee:	001a      	movs	r2, r3
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	1c59      	adds	r1, r3, #1
 8007cf4:	61b9      	str	r1, [r7, #24]
 8007cf6:	05db      	lsls	r3, r3, #23
 8007cf8:	0ddb      	lsrs	r3, r3, #23
 8007cfa:	18d3      	adds	r3, r2, r3
 8007cfc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2201      	movs	r2, #1
 8007d02:	4013      	ands	r3, r2
 8007d04:	d00d      	beq.n	8007d22 <put_fat+0xae>
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	b25b      	sxtb	r3, r3
 8007d0c:	220f      	movs	r2, #15
 8007d0e:	4013      	ands	r3, r2
 8007d10:	b25a      	sxtb	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	b25b      	sxtb	r3, r3
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	e001      	b.n	8007d26 <put_fat+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	0a5b      	lsrs	r3, r3, #9
 8007d38:	18d2      	adds	r2, r2, r3
 8007d3a:	251f      	movs	r5, #31
 8007d3c:	197c      	adds	r4, r7, r5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	0011      	movs	r1, r2
 8007d42:	0018      	movs	r0, r3
 8007d44:	f7ff fe1e 	bl	8007984 <move_window>
 8007d48:	0003      	movs	r3, r0
 8007d4a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007d4c:	197b      	adds	r3, r7, r5
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d000      	beq.n	8007d56 <put_fat+0xe2>
 8007d54:	e083      	b.n	8007e5e <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3334      	adds	r3, #52	@ 0x34
 8007d5a:	001a      	movs	r2, r3
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	05db      	lsls	r3, r3, #23
 8007d60:	0ddb      	lsrs	r3, r3, #23
 8007d62:	18d3      	adds	r3, r2, r3
 8007d64:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	d003      	beq.n	8007d76 <put_fat+0x102>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	091b      	lsrs	r3, r3, #4
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	e00e      	b.n	8007d94 <put_fat+0x120>
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b25b      	sxtb	r3, r3
 8007d7c:	220f      	movs	r2, #15
 8007d7e:	4393      	bics	r3, r2
 8007d80:	b25a      	sxtb	r2, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0a1b      	lsrs	r3, r3, #8
 8007d86:	b25b      	sxtb	r3, r3
 8007d88:	210f      	movs	r1, #15
 8007d8a:	400b      	ands	r3, r1
 8007d8c:	b25b      	sxtb	r3, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	70da      	strb	r2, [r3, #3]
			break;
 8007d9e:	e063      	b.n	8007e68 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	18d2      	adds	r2, r2, r3
 8007daa:	251f      	movs	r5, #31
 8007dac:	197c      	adds	r4, r7, r5
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	0011      	movs	r1, r2
 8007db2:	0018      	movs	r0, r3
 8007db4:	f7ff fde6 	bl	8007984 <move_window>
 8007db8:	0003      	movs	r3, r0
 8007dba:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007dbc:	197b      	adds	r3, r7, r5
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d14e      	bne.n	8007e62 <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3334      	adds	r3, #52	@ 0x34
 8007dc8:	001a      	movs	r2, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	0059      	lsls	r1, r3, #1
 8007dce:	23ff      	movs	r3, #255	@ 0xff
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	400b      	ands	r3, r1
 8007dd4:	18d3      	adds	r3, r2, r3
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	b292      	uxth	r2, r2
 8007dda:	0011      	movs	r1, r2
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7ff fb2d 	bl	800743c <st_word>
			fs->wflag = 1;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	70da      	strb	r2, [r3, #3]
			break;
 8007de8:	e03e      	b.n	8007e68 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	09db      	lsrs	r3, r3, #7
 8007df2:	18d2      	adds	r2, r2, r3
 8007df4:	251f      	movs	r5, #31
 8007df6:	197c      	adds	r4, r7, r5
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	0011      	movs	r1, r2
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7ff fdc1 	bl	8007984 <move_window>
 8007e02:	0003      	movs	r3, r0
 8007e04:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007e06:	197b      	adds	r3, r7, r5
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d12b      	bne.n	8007e66 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	091c      	lsrs	r4, r3, #4
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3334      	adds	r3, #52	@ 0x34
 8007e18:	001a      	movs	r2, r3
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	0099      	lsls	r1, r3, #2
 8007e1e:	23fe      	movs	r3, #254	@ 0xfe
 8007e20:	005b      	lsls	r3, r3, #1
 8007e22:	400b      	ands	r3, r1
 8007e24:	18d3      	adds	r3, r2, r3
 8007e26:	0018      	movs	r0, r3
 8007e28:	f7ff fae7 	bl	80073fa <ld_dword>
 8007e2c:	0003      	movs	r3, r0
 8007e2e:	0f1b      	lsrs	r3, r3, #28
 8007e30:	071b      	lsls	r3, r3, #28
 8007e32:	4323      	orrs	r3, r4
 8007e34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3334      	adds	r3, #52	@ 0x34
 8007e3a:	001a      	movs	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	0099      	lsls	r1, r3, #2
 8007e40:	23fe      	movs	r3, #254	@ 0xfe
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	400b      	ands	r3, r1
 8007e46:	18d3      	adds	r3, r2, r3
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	0011      	movs	r1, r2
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f7ff fb13 	bl	8007478 <st_dword>
			fs->wflag = 1;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2201      	movs	r2, #1
 8007e56:	70da      	strb	r2, [r3, #3]
			break;
 8007e58:	e006      	b.n	8007e68 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8007e5a:	46c0      	nop			@ (mov r8, r8)
 8007e5c:	e004      	b.n	8007e68 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	e002      	b.n	8007e68 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8007e62:	46c0      	nop			@ (mov r8, r8)
 8007e64:	e000      	b.n	8007e68 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8007e66:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8007e68:	231f      	movs	r3, #31
 8007e6a:	18fb      	adds	r3, r7, r3
 8007e6c:	781b      	ldrb	r3, [r3, #0]
}
 8007e6e:	0018      	movs	r0, r3
 8007e70:	46bd      	mov	sp, r7
 8007e72:	b008      	add	sp, #32
 8007e74:	bdb0      	pop	{r4, r5, r7, pc}

08007e76 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e76:	b5b0      	push	{r4, r5, r7, lr}
 8007e78:	b088      	sub	sp, #32
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007e82:	231f      	movs	r3, #31
 8007e84:	18fb      	adds	r3, r7, r3
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d904      	bls.n	8007ea0 <remove_chain+0x2a>
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d301      	bcc.n	8007ea4 <remove_chain+0x2e>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e057      	b.n	8007f54 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d011      	beq.n	8007ece <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007eaa:	251f      	movs	r5, #31
 8007eac:	197c      	adds	r4, r7, r5
 8007eae:	2301      	movs	r3, #1
 8007eb0:	425a      	negs	r2, r3
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	f7ff fedc 	bl	8007c74 <put_fat>
 8007ebc:	0003      	movs	r3, r0
 8007ebe:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8007ec0:	197b      	adds	r3, r7, r5
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d002      	beq.n	8007ece <remove_chain+0x58>
 8007ec8:	197b      	adds	r3, r7, r5
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	e042      	b.n	8007f54 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	0011      	movs	r1, r2
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f7ff fe23 	bl	8007b20 <get_fat>
 8007eda:	0003      	movs	r3, r0
 8007edc:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d035      	beq.n	8007f50 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <remove_chain+0x78>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e032      	b.n	8007f54 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <remove_chain+0x82>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e02d      	b.n	8007f54 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007ef8:	251f      	movs	r5, #31
 8007efa:	197c      	adds	r4, r7, r5
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	2200      	movs	r2, #0
 8007f02:	0018      	movs	r0, r3
 8007f04:	f7ff feb6 	bl	8007c74 <put_fat>
 8007f08:	0003      	movs	r3, r0
 8007f0a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8007f0c:	197b      	adds	r3, r7, r5
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <remove_chain+0xa4>
 8007f14:	197b      	adds	r3, r7, r5
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	e01c      	b.n	8007f54 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	695a      	ldr	r2, [r3, #20]
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	3b02      	subs	r3, #2
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d20b      	bcs.n	8007f40 <remove_chain+0xca>
			fs->free_clst++;
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	791b      	ldrb	r3, [r3, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d3bf      	bcc.n	8007ece <remove_chain+0x58>
 8007f4e:	e000      	b.n	8007f52 <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f50:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b008      	add	sp, #32
 8007f5a:	bdb0      	pop	{r4, r5, r7, pc}

08007f5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f5c:	b5b0      	push	{r4, r5, r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10d      	bne.n	8007f8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <create_chain+0x2c>
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d31d      	bcc.n	8007fc4 <create_chain+0x68>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	e01a      	b.n	8007fc4 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	0011      	movs	r1, r2
 8007f94:	0018      	movs	r0, r3
 8007f96:	f7ff fdc3 	bl	8007b20 <get_fat>
 8007f9a:	0003      	movs	r3, r0
 8007f9c:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d801      	bhi.n	8007fa8 <create_chain+0x4c>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e07b      	b.n	80080a0 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	3301      	adds	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <create_chain+0x56>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	e076      	b.n	80080a0 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	699b      	ldr	r3, [r3, #24]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d201      	bcs.n	8007fc0 <create_chain+0x64>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	e06f      	b.n	80080a0 <create_chain+0x144>
		scl = clst;
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d307      	bcc.n	8007fe8 <create_chain+0x8c>
				ncl = 2;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d901      	bls.n	8007fe8 <create_chain+0x8c>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e05b      	b.n	80080a0 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	0011      	movs	r1, r2
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f7ff fd96 	bl	8007b20 <get_fat>
 8007ff4:	0003      	movs	r3, r0
 8007ff6:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00d      	beq.n	800801a <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d002      	beq.n	800800a <create_chain+0xae>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3301      	adds	r3, #1
 8008008:	d101      	bne.n	800800e <create_chain+0xb2>
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	e048      	b.n	80080a0 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 800800e:	69fa      	ldr	r2, [r7, #28]
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	429a      	cmp	r2, r3
 8008014:	d1d8      	bne.n	8007fc8 <create_chain+0x6c>
 8008016:	2300      	movs	r3, #0
 8008018:	e042      	b.n	80080a0 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 800801a:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800801c:	2517      	movs	r5, #23
 800801e:	197c      	adds	r4, r7, r5
 8008020:	2301      	movs	r3, #1
 8008022:	425a      	negs	r2, r3
 8008024:	69f9      	ldr	r1, [r7, #28]
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	0018      	movs	r0, r3
 800802a:	f7ff fe23 	bl	8007c74 <put_fat>
 800802e:	0003      	movs	r3, r0
 8008030:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8008032:	197b      	adds	r3, r7, r5
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10b      	bne.n	8008052 <create_chain+0xf6>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d008      	beq.n	8008052 <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008040:	197c      	adds	r4, r7, r5
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	0018      	movs	r0, r3
 800804a:	f7ff fe13 	bl	8007c74 <put_fat>
 800804e:	0003      	movs	r3, r0
 8008050:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008052:	2317      	movs	r3, #23
 8008054:	18fb      	adds	r3, r7, r3
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d116      	bne.n	800808a <create_chain+0x12e>
		fs->last_clst = ncl;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	695a      	ldr	r2, [r3, #20]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	3b02      	subs	r3, #2
 800806c:	429a      	cmp	r2, r3
 800806e:	d804      	bhi.n	800807a <create_chain+0x11e>
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	1e5a      	subs	r2, r3, #1
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	791b      	ldrb	r3, [r3, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	4313      	orrs	r3, r2
 8008082:	b2da      	uxtb	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	711a      	strb	r2, [r3, #4]
 8008088:	e009      	b.n	800809e <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800808a:	2317      	movs	r3, #23
 800808c:	18fb      	adds	r3, r7, r3
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d102      	bne.n	800809a <create_chain+0x13e>
 8008094:	2301      	movs	r3, #1
 8008096:	425b      	negs	r3, r3
 8008098:	e000      	b.n	800809c <create_chain+0x140>
 800809a:	2301      	movs	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800809e:	69fb      	ldr	r3, [r7, #28]
}
 80080a0:	0018      	movs	r0, r3
 80080a2:	46bd      	mov	sp, r7
 80080a4:	b008      	add	sp, #32
 80080a6:	bdb0      	pop	{r4, r5, r7, pc}

080080a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080bc:	3304      	adds	r3, #4
 80080be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	0a5a      	lsrs	r2, r3, #9
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	895b      	ldrh	r3, [r3, #10]
 80080c8:	0019      	movs	r1, r3
 80080ca:	0010      	movs	r0, r2
 80080cc:	f7f8 f826 	bl	800011c <__udivsi3>
 80080d0:	0003      	movs	r3, r0
 80080d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	1d1a      	adds	r2, r3, #4
 80080d8:	613a      	str	r2, [r7, #16]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <clmt_clust+0x40>
 80080e4:	2300      	movs	r3, #0
 80080e6:	e010      	b.n	800810a <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d307      	bcc.n	8008100 <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	3304      	adds	r3, #4
 80080fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080fe:	e7e9      	b.n	80080d4 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 8008100:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	18d3      	adds	r3, r2, r3
}
 800810a:	0018      	movs	r0, r3
 800810c:	46bd      	mov	sp, r7
 800810e:	b006      	add	sp, #24
 8008110:	bd80      	pop	{r7, pc}

08008112 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b086      	sub	sp, #24
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	2380      	movs	r3, #128	@ 0x80
 8008126:	039b      	lsls	r3, r3, #14
 8008128:	429a      	cmp	r2, r3
 800812a:	d203      	bcs.n	8008134 <dir_sdi+0x22>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	221f      	movs	r2, #31
 8008130:	4013      	ands	r3, r2
 8008132:	d001      	beq.n	8008138 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008134:	2302      	movs	r3, #2
 8008136:	e066      	b.n	8008206 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d106      	bne.n	8008158 <dir_sdi+0x46>
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b02      	cmp	r3, #2
 8008150:	d902      	bls.n	8008158 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008156:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10c      	bne.n	8008178 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	8912      	ldrh	r2, [r2, #8]
 8008166:	4293      	cmp	r3, r2
 8008168:	d301      	bcc.n	800816e <dir_sdi+0x5c>
 800816a:	2302      	movs	r3, #2
 800816c:	e04b      	b.n	8008206 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	61da      	str	r2, [r3, #28]
 8008176:	e02c      	b.n	80081d2 <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	895b      	ldrh	r3, [r3, #10]
 800817c:	025b      	lsls	r3, r3, #9
 800817e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008180:	e01a      	b.n	80081b8 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	0011      	movs	r1, r2
 8008188:	0018      	movs	r0, r3
 800818a:	f7ff fcc9 	bl	8007b20 <get_fat>
 800818e:	0003      	movs	r3, r0
 8008190:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	3301      	adds	r3, #1
 8008196:	d101      	bne.n	800819c <dir_sdi+0x8a>
 8008198:	2301      	movs	r3, #1
 800819a:	e034      	b.n	8008206 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d904      	bls.n	80081ac <dir_sdi+0x9a>
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d301      	bcc.n	80081b0 <dir_sdi+0x9e>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e02a      	b.n	8008206 <dir_sdi+0xf4>
			ofs -= csz;
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d2e0      	bcs.n	8008182 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	0011      	movs	r1, r2
 80081c6:	0018      	movs	r0, r3
 80081c8:	f7ff fc8e 	bl	8007ae8 <clust2sect>
 80081cc:	0002      	movs	r2, r0
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	69db      	ldr	r3, [r3, #28]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <dir_sdi+0xd2>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e010      	b.n	8008206 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	69da      	ldr	r2, [r3, #28]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	0a5b      	lsrs	r3, r3, #9
 80081ec:	18d2      	adds	r2, r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	3334      	adds	r3, #52	@ 0x34
 80081f6:	001a      	movs	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	05db      	lsls	r3, r3, #23
 80081fc:	0ddb      	lsrs	r3, r3, #23
 80081fe:	18d2      	adds	r2, r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	0018      	movs	r0, r3
 8008208:	46bd      	mov	sp, r7
 800820a:	b006      	add	sp, #24
 800820c:	bd80      	pop	{r7, pc}

0800820e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b086      	sub	sp, #24
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	3320      	adds	r3, #32
 8008224:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <dir_next+0x2a>
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	2380      	movs	r3, #128	@ 0x80
 8008232:	039b      	lsls	r3, r3, #14
 8008234:	429a      	cmp	r2, r3
 8008236:	d301      	bcc.n	800823c <dir_next+0x2e>
 8008238:	2304      	movs	r3, #4
 800823a:	e0ad      	b.n	8008398 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	05db      	lsls	r3, r3, #23
 8008240:	0ddb      	lsrs	r3, r3, #23
 8008242:	d000      	beq.n	8008246 <dir_next+0x38>
 8008244:	e09b      	b.n	800837e <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10b      	bne.n	8008270 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	095b      	lsrs	r3, r3, #5
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	8912      	ldrh	r2, [r2, #8]
 8008260:	4293      	cmp	r3, r2
 8008262:	d200      	bcs.n	8008266 <dir_next+0x58>
 8008264:	e08b      	b.n	800837e <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	61da      	str	r2, [r3, #28]
 800826c:	2304      	movs	r3, #4
 800826e:	e093      	b.n	8008398 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	0a5b      	lsrs	r3, r3, #9
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	8952      	ldrh	r2, [r2, #10]
 8008278:	3a01      	subs	r2, #1
 800827a:	4013      	ands	r3, r2
 800827c:	d000      	beq.n	8008280 <dir_next+0x72>
 800827e:	e07e      	b.n	800837e <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	0019      	movs	r1, r3
 8008288:	0010      	movs	r0, r2
 800828a:	f7ff fc49 	bl	8007b20 <get_fat>
 800828e:	0003      	movs	r3, r0
 8008290:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d801      	bhi.n	800829c <dir_next+0x8e>
 8008298:	2302      	movs	r3, #2
 800829a:	e07d      	b.n	8008398 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	3301      	adds	r3, #1
 80082a0:	d101      	bne.n	80082a6 <dir_next+0x98>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e078      	b.n	8008398 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d35a      	bcc.n	8008366 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d104      	bne.n	80082c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	61da      	str	r2, [r3, #28]
 80082bc:	2304      	movs	r3, #4
 80082be:	e06b      	b.n	8008398 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	0019      	movs	r1, r3
 80082c8:	0010      	movs	r0, r2
 80082ca:	f7ff fe47 	bl	8007f5c <create_chain>
 80082ce:	0003      	movs	r3, r0
 80082d0:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <dir_next+0xce>
 80082d8:	2307      	movs	r3, #7
 80082da:	e05d      	b.n	8008398 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d101      	bne.n	80082e6 <dir_next+0xd8>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e058      	b.n	8008398 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	3301      	adds	r3, #1
 80082ea:	d101      	bne.n	80082f0 <dir_next+0xe2>
 80082ec:	2301      	movs	r3, #1
 80082ee:	e053      	b.n	8008398 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7ff fafe 	bl	80078f4 <sync_window>
 80082f8:	1e03      	subs	r3, r0, #0
 80082fa:	d001      	beq.n	8008300 <dir_next+0xf2>
 80082fc:	2301      	movs	r3, #1
 80082fe:	e04b      	b.n	8008398 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3334      	adds	r3, #52	@ 0x34
 8008304:	2280      	movs	r2, #128	@ 0x80
 8008306:	0092      	lsls	r2, r2, #2
 8008308:	2100      	movs	r1, #0
 800830a:	0018      	movs	r0, r3
 800830c:	f7ff f8fd 	bl	800750a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008310:	2300      	movs	r3, #0
 8008312:	613b      	str	r3, [r7, #16]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	0011      	movs	r1, r2
 800831a:	0018      	movs	r0, r3
 800831c:	f7ff fbe4 	bl	8007ae8 <clust2sect>
 8008320:	0002      	movs	r2, r0
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	631a      	str	r2, [r3, #48]	@ 0x30
 8008326:	e012      	b.n	800834e <dir_next+0x140>
						fs->wflag = 1;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	0018      	movs	r0, r3
 8008332:	f7ff fadf 	bl	80078f4 <sync_window>
 8008336:	1e03      	subs	r3, r0, #0
 8008338:	d001      	beq.n	800833e <dir_next+0x130>
 800833a:	2301      	movs	r3, #1
 800833c:	e02c      	b.n	8008398 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	3301      	adds	r3, #1
 8008342:	613b      	str	r3, [r7, #16]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	631a      	str	r2, [r3, #48]	@ 0x30
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	895b      	ldrh	r3, [r3, #10]
 8008352:	001a      	movs	r2, r3
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	4293      	cmp	r3, r2
 8008358:	d3e6      	bcc.n	8008328 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	1ad2      	subs	r2, r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	0011      	movs	r1, r2
 8008372:	0018      	movs	r0, r3
 8008374:	f7ff fbb8 	bl	8007ae8 <clust2sect>
 8008378:	0002      	movs	r2, r0
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3334      	adds	r3, #52	@ 0x34
 8008388:	001a      	movs	r2, r3
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	05db      	lsls	r3, r3, #23
 800838e:	0ddb      	lsrs	r3, r3, #23
 8008390:	18d2      	adds	r2, r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	0018      	movs	r0, r3
 800839a:	46bd      	mov	sp, r7
 800839c:	b006      	add	sp, #24
 800839e:	bd80      	pop	{r7, pc}

080083a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80083a0:	b5b0      	push	{r4, r5, r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80083b0:	2517      	movs	r5, #23
 80083b2:	197c      	adds	r4, r7, r5
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2100      	movs	r1, #0
 80083b8:	0018      	movs	r0, r3
 80083ba:	f7ff feaa 	bl	8008112 <dir_sdi>
 80083be:	0003      	movs	r3, r0
 80083c0:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80083c2:	197b      	adds	r3, r7, r5
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d133      	bne.n	8008432 <dir_alloc+0x92>
		n = 0;
 80083ca:	2300      	movs	r3, #0
 80083cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69da      	ldr	r2, [r3, #28]
 80083d2:	2517      	movs	r5, #23
 80083d4:	197c      	adds	r4, r7, r5
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	0011      	movs	r1, r2
 80083da:	0018      	movs	r0, r3
 80083dc:	f7ff fad2 	bl	8007984 <move_window>
 80083e0:	0003      	movs	r3, r0
 80083e2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80083e4:	197b      	adds	r3, r7, r5
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d121      	bne.n	8008430 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2be5      	cmp	r3, #229	@ 0xe5
 80083f4:	d004      	beq.n	8008400 <dir_alloc+0x60>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d107      	bne.n	8008410 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	3301      	adds	r3, #1
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d102      	bne.n	8008414 <dir_alloc+0x74>
 800840e:	e010      	b.n	8008432 <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008414:	2517      	movs	r5, #23
 8008416:	197c      	adds	r4, r7, r5
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2101      	movs	r1, #1
 800841c:	0018      	movs	r0, r3
 800841e:	f7ff fef6 	bl	800820e <dir_next>
 8008422:	0003      	movs	r3, r0
 8008424:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008426:	197b      	adds	r3, r7, r5
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0cf      	beq.n	80083ce <dir_alloc+0x2e>
 800842e:	e000      	b.n	8008432 <dir_alloc+0x92>
			if (res != FR_OK) break;
 8008430:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008432:	2217      	movs	r2, #23
 8008434:	18bb      	adds	r3, r7, r2
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b04      	cmp	r3, #4
 800843a:	d102      	bne.n	8008442 <dir_alloc+0xa2>
 800843c:	18bb      	adds	r3, r7, r2
 800843e:	2207      	movs	r2, #7
 8008440:	701a      	strb	r2, [r3, #0]
	return res;
 8008442:	2317      	movs	r3, #23
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	781b      	ldrb	r3, [r3, #0]
}
 8008448:	0018      	movs	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	b006      	add	sp, #24
 800844e:	bdb0      	pop	{r4, r5, r7, pc}

08008450 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	331a      	adds	r3, #26
 800845e:	0018      	movs	r0, r3
 8008460:	f7fe ffb0 	bl	80073c4 <ld_word>
 8008464:	0003      	movs	r3, r0
 8008466:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b03      	cmp	r3, #3
 800846e:	d109      	bne.n	8008484 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	3314      	adds	r3, #20
 8008474:	0018      	movs	r0, r3
 8008476:	f7fe ffa5 	bl	80073c4 <ld_word>
 800847a:	0003      	movs	r3, r0
 800847c:	041b      	lsls	r3, r3, #16
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008484:	68fb      	ldr	r3, [r7, #12]
}
 8008486:	0018      	movs	r0, r3
 8008488:	46bd      	mov	sp, r7
 800848a:	b004      	add	sp, #16
 800848c:	bd80      	pop	{r7, pc}

0800848e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	60f8      	str	r0, [r7, #12]
 8008496:	60b9      	str	r1, [r7, #8]
 8008498:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	331a      	adds	r3, #26
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	b292      	uxth	r2, r2
 80084a2:	0011      	movs	r1, r2
 80084a4:	0018      	movs	r0, r3
 80084a6:	f7fe ffc9 	bl	800743c <st_word>
	if (fs->fs_type == FS_FAT32) {
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b03      	cmp	r3, #3
 80084b0:	d109      	bne.n	80084c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	3314      	adds	r3, #20
 80084b6:	001a      	movs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	b29b      	uxth	r3, r3
 80084be:	0019      	movs	r1, r3
 80084c0:	0010      	movs	r0, r2
 80084c2:	f7fe ffbb 	bl	800743c <st_word>
	}
}
 80084c6:	46c0      	nop			@ (mov r8, r8)
 80084c8:	46bd      	mov	sp, r7
 80084ca:	b004      	add	sp, #16
 80084cc:	bd80      	pop	{r7, pc}

080084ce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80084ce:	b5b0      	push	{r4, r5, r7, lr}
 80084d0:	b086      	sub	sp, #24
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80084dc:	2517      	movs	r5, #23
 80084de:	197c      	adds	r4, r7, r5
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2100      	movs	r1, #0
 80084e4:	0018      	movs	r0, r3
 80084e6:	f7ff fe14 	bl	8008112 <dir_sdi>
 80084ea:	0003      	movs	r3, r0
 80084ec:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80084ee:	197b      	adds	r3, r7, r5
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <dir_find+0x2e>
 80084f6:	197b      	adds	r3, r7, r5
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	e04c      	b.n	8008596 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	2517      	movs	r5, #23
 8008502:	197c      	adds	r4, r7, r5
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	0011      	movs	r1, r2
 8008508:	0018      	movs	r0, r3
 800850a:	f7ff fa3b 	bl	8007984 <move_window>
 800850e:	0003      	movs	r3, r0
 8008510:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8008512:	0029      	movs	r1, r5
 8008514:	187b      	adds	r3, r7, r1
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d136      	bne.n	800858a <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	200f      	movs	r0, #15
 8008522:	183b      	adds	r3, r7, r0
 8008524:	7812      	ldrb	r2, [r2, #0]
 8008526:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008528:	183b      	adds	r3, r7, r0
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <dir_find+0x6a>
 8008530:	187b      	adds	r3, r7, r1
 8008532:	2204      	movs	r2, #4
 8008534:	701a      	strb	r2, [r3, #0]
 8008536:	e02b      	b.n	8008590 <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	330b      	adds	r3, #11
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	223f      	movs	r2, #63	@ 0x3f
 8008542:	4013      	ands	r3, r2
 8008544:	b2da      	uxtb	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	330b      	adds	r3, #11
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	001a      	movs	r2, r3
 8008554:	2308      	movs	r3, #8
 8008556:	4013      	ands	r3, r2
 8008558:	d109      	bne.n	800856e <dir_find+0xa0>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6a18      	ldr	r0, [r3, #32]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	3324      	adds	r3, #36	@ 0x24
 8008562:	220b      	movs	r2, #11
 8008564:	0019      	movs	r1, r3
 8008566:	f7fe ffe9 	bl	800753c <mem_cmp>
 800856a:	1e03      	subs	r3, r0, #0
 800856c:	d00f      	beq.n	800858e <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800856e:	2517      	movs	r5, #23
 8008570:	197c      	adds	r4, r7, r5
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2100      	movs	r1, #0
 8008576:	0018      	movs	r0, r3
 8008578:	f7ff fe49 	bl	800820e <dir_next>
 800857c:	0003      	movs	r3, r0
 800857e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8008580:	197b      	adds	r3, r7, r5
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0b9      	beq.n	80084fc <dir_find+0x2e>
 8008588:	e002      	b.n	8008590 <dir_find+0xc2>
		if (res != FR_OK) break;
 800858a:	46c0      	nop			@ (mov r8, r8)
 800858c:	e000      	b.n	8008590 <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800858e:	46c0      	nop			@ (mov r8, r8)

	return res;
 8008590:	2317      	movs	r3, #23
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	781b      	ldrb	r3, [r3, #0]
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b006      	add	sp, #24
 800859c:	bdb0      	pop	{r4, r5, r7, pc}

0800859e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800859e:	b5b0      	push	{r4, r5, r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80085ac:	250f      	movs	r5, #15
 80085ae:	197c      	adds	r4, r7, r5
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2101      	movs	r1, #1
 80085b4:	0018      	movs	r0, r3
 80085b6:	f7ff fef3 	bl	80083a0 <dir_alloc>
 80085ba:	0003      	movs	r3, r0
 80085bc:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80085be:	197b      	adds	r3, r7, r5
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d11f      	bne.n	8008606 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	69da      	ldr	r2, [r3, #28]
 80085ca:	197c      	adds	r4, r7, r5
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	0011      	movs	r1, r2
 80085d0:	0018      	movs	r0, r3
 80085d2:	f7ff f9d7 	bl	8007984 <move_window>
 80085d6:	0003      	movs	r3, r0
 80085d8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80085da:	197b      	adds	r3, r7, r5
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d111      	bne.n	8008606 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	2220      	movs	r2, #32
 80085e8:	2100      	movs	r1, #0
 80085ea:	0018      	movs	r0, r3
 80085ec:	f7fe ff8d 	bl	800750a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a18      	ldr	r0, [r3, #32]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3324      	adds	r3, #36	@ 0x24
 80085f8:	220b      	movs	r2, #11
 80085fa:	0019      	movs	r1, r3
 80085fc:	f7fe ff66 	bl	80074cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2201      	movs	r2, #1
 8008604:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008606:	230f      	movs	r3, #15
 8008608:	18fb      	adds	r3, r7, r3
 800860a:	781b      	ldrb	r3, [r3, #0]
}
 800860c:	0018      	movs	r0, r3
 800860e:	46bd      	mov	sp, r7
 8008610:	b004      	add	sp, #16
 8008612:	bdb0      	pop	{r4, r5, r7, pc}

08008614 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3324      	adds	r3, #36	@ 0x24
 8008628:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	220b      	movs	r2, #11
 800862e:	2120      	movs	r1, #32
 8008630:	0018      	movs	r0, r3
 8008632:	f7fe ff6a 	bl	800750a <mem_set>
	si = i = 0; ni = 8;
 8008636:	2300      	movs	r3, #0
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	61fb      	str	r3, [r7, #28]
 800863e:	2308      	movs	r3, #8
 8008640:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	1c5a      	adds	r2, r3, #1
 8008646:	61fa      	str	r2, [r7, #28]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	18d2      	adds	r2, r2, r3
 800864c:	211b      	movs	r1, #27
 800864e:	187b      	adds	r3, r7, r1
 8008650:	7812      	ldrb	r2, [r2, #0]
 8008652:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008654:	000a      	movs	r2, r1
 8008656:	18bb      	adds	r3, r7, r2
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b20      	cmp	r3, #32
 800865c:	d800      	bhi.n	8008660 <create_name+0x4c>
 800865e:	e062      	b.n	8008726 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008660:	18bb      	adds	r3, r7, r2
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b2f      	cmp	r3, #47	@ 0x2f
 8008666:	d007      	beq.n	8008678 <create_name+0x64>
 8008668:	18bb      	adds	r3, r7, r2
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b5c      	cmp	r3, #92	@ 0x5c
 800866e:	d110      	bne.n	8008692 <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008670:	e002      	b.n	8008678 <create_name+0x64>
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	18d3      	adds	r3, r2, r3
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b2f      	cmp	r3, #47	@ 0x2f
 8008682:	d0f6      	beq.n	8008672 <create_name+0x5e>
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	18d3      	adds	r3, r2, r3
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b5c      	cmp	r3, #92	@ 0x5c
 800868e:	d0f0      	beq.n	8008672 <create_name+0x5e>
			break;
 8008690:	e04a      	b.n	8008728 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008692:	231b      	movs	r3, #27
 8008694:	18fb      	adds	r3, r7, r3
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b2e      	cmp	r3, #46	@ 0x2e
 800869a:	d003      	beq.n	80086a4 <create_name+0x90>
 800869c:	693a      	ldr	r2, [r7, #16]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d30e      	bcc.n	80086c2 <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	2b0b      	cmp	r3, #11
 80086a8:	d004      	beq.n	80086b4 <create_name+0xa0>
 80086aa:	231b      	movs	r3, #27
 80086ac:	18fb      	adds	r3, r7, r3
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80086b2:	d001      	beq.n	80086b8 <create_name+0xa4>
 80086b4:	2306      	movs	r3, #6
 80086b6:	e054      	b.n	8008762 <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 80086b8:	2308      	movs	r3, #8
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	230b      	movs	r3, #11
 80086be:	617b      	str	r3, [r7, #20]
			continue;
 80086c0:	e030      	b.n	8008724 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 80086c2:	211b      	movs	r1, #27
 80086c4:	187b      	adds	r3, r7, r1
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	b25b      	sxtb	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da07      	bge.n	80086de <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	3b80      	subs	r3, #128	@ 0x80
 80086d4:	001a      	movs	r2, r3
 80086d6:	187b      	adds	r3, r7, r1
 80086d8:	4924      	ldr	r1, [pc, #144]	@ (800876c <create_name+0x158>)
 80086da:	5c8a      	ldrb	r2, [r1, r2]
 80086dc:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80086de:	231b      	movs	r3, #27
 80086e0:	18fb      	adds	r3, r7, r3
 80086e2:	781a      	ldrb	r2, [r3, #0]
 80086e4:	4b22      	ldr	r3, [pc, #136]	@ (8008770 <create_name+0x15c>)
 80086e6:	0011      	movs	r1, r2
 80086e8:	0018      	movs	r0, r3
 80086ea:	f7fe ff4c 	bl	8007586 <chk_chr>
 80086ee:	1e03      	subs	r3, r0, #0
 80086f0:	d001      	beq.n	80086f6 <create_name+0xe2>
 80086f2:	2306      	movs	r3, #6
 80086f4:	e035      	b.n	8008762 <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80086f6:	221b      	movs	r2, #27
 80086f8:	18bb      	adds	r3, r7, r2
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b60      	cmp	r3, #96	@ 0x60
 80086fe:	d908      	bls.n	8008712 <create_name+0xfe>
 8008700:	18bb      	adds	r3, r7, r2
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b7a      	cmp	r3, #122	@ 0x7a
 8008706:	d804      	bhi.n	8008712 <create_name+0xfe>
 8008708:	18bb      	adds	r3, r7, r2
 800870a:	18ba      	adds	r2, r7, r2
 800870c:	7812      	ldrb	r2, [r2, #0]
 800870e:	3a20      	subs	r2, #32
 8008710:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	1c5a      	adds	r2, r3, #1
 8008716:	613a      	str	r2, [r7, #16]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	18d3      	adds	r3, r2, r3
 800871c:	221b      	movs	r2, #27
 800871e:	18ba      	adds	r2, r7, r2
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008724:	e78d      	b.n	8008642 <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008726:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	18d2      	adds	r2, r2, r3
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <create_name+0x128>
 8008738:	2306      	movs	r3, #6
 800873a:	e012      	b.n	8008762 <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2be5      	cmp	r3, #229	@ 0xe5
 8008742:	d102      	bne.n	800874a <create_name+0x136>
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2205      	movs	r2, #5
 8008748:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800874a:	231b      	movs	r3, #27
 800874c:	18fb      	adds	r3, r7, r3
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	2b20      	cmp	r3, #32
 8008752:	d801      	bhi.n	8008758 <create_name+0x144>
 8008754:	2204      	movs	r2, #4
 8008756:	e000      	b.n	800875a <create_name+0x146>
 8008758:	2200      	movs	r2, #0
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	330b      	adds	r3, #11
 800875e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008760:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008762:	0018      	movs	r0, r3
 8008764:	46bd      	mov	sp, r7
 8008766:	b008      	add	sp, #32
 8008768:	bd80      	pop	{r7, pc}
 800876a:	46c0      	nop			@ (mov r8, r8)
 800876c:	0800d83c 	.word	0x0800d83c
 8008770:	0800d6e0 	.word	0x0800d6e0

08008774 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008774:	b5b0      	push	{r4, r5, r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008788:	e002      	b.n	8008790 <follow_path+0x1c>
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	3301      	adds	r3, #1
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b2f      	cmp	r3, #47	@ 0x2f
 8008796:	d0f8      	beq.n	800878a <follow_path+0x16>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b5c      	cmp	r3, #92	@ 0x5c
 800879e:	d0f4      	beq.n	800878a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2200      	movs	r2, #0
 80087a4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	2b1f      	cmp	r3, #31
 80087ac:	d80d      	bhi.n	80087ca <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	222f      	movs	r2, #47	@ 0x2f
 80087b2:	2180      	movs	r1, #128	@ 0x80
 80087b4:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 80087b6:	2317      	movs	r3, #23
 80087b8:	18fc      	adds	r4, r7, r3
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2100      	movs	r1, #0
 80087be:	0018      	movs	r0, r3
 80087c0:	f7ff fca7 	bl	8008112 <dir_sdi>
 80087c4:	0003      	movs	r3, r0
 80087c6:	7023      	strb	r3, [r4, #0]
 80087c8:	e052      	b.n	8008870 <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80087ca:	2517      	movs	r5, #23
 80087cc:	197c      	adds	r4, r7, r5
 80087ce:	003a      	movs	r2, r7
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	0011      	movs	r1, r2
 80087d4:	0018      	movs	r0, r3
 80087d6:	f7ff ff1d 	bl	8008614 <create_name>
 80087da:	0003      	movs	r3, r0
 80087dc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80087de:	197b      	adds	r3, r7, r5
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d13f      	bne.n	8008866 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 80087e6:	197c      	adds	r4, r7, r5
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7ff fe6f 	bl	80084ce <dir_find>
 80087f0:	0003      	movs	r3, r0
 80087f2:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80087f4:	200b      	movs	r0, #11
 80087f6:	183b      	adds	r3, r7, r0
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	212f      	movs	r1, #47	@ 0x2f
 80087fc:	5c52      	ldrb	r2, [r2, r1]
 80087fe:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 8008800:	197b      	adds	r3, r7, r5
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00c      	beq.n	8008822 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008808:	197b      	adds	r3, r7, r5
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b04      	cmp	r3, #4
 800880e:	d12c      	bne.n	800886a <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008810:	183b      	adds	r3, r7, r0
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2204      	movs	r2, #4
 8008816:	4013      	ands	r3, r2
 8008818:	d127      	bne.n	800886a <follow_path+0xf6>
 800881a:	197b      	adds	r3, r7, r5
 800881c:	2205      	movs	r2, #5
 800881e:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 8008820:	e023      	b.n	800886a <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008822:	230b      	movs	r3, #11
 8008824:	18fb      	adds	r3, r7, r3
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2204      	movs	r2, #4
 800882a:	4013      	ands	r3, r2
 800882c:	d11f      	bne.n	800886e <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	799b      	ldrb	r3, [r3, #6]
 8008832:	001a      	movs	r2, r3
 8008834:	2310      	movs	r3, #16
 8008836:	4013      	ands	r3, r2
 8008838:	d104      	bne.n	8008844 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800883a:	2317      	movs	r3, #23
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	2205      	movs	r2, #5
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	e015      	b.n	8008870 <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3334      	adds	r3, #52	@ 0x34
 8008848:	001a      	movs	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	05db      	lsls	r3, r3, #23
 8008850:	0ddb      	lsrs	r3, r3, #23
 8008852:	18d2      	adds	r2, r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	0011      	movs	r1, r2
 8008858:	0018      	movs	r0, r3
 800885a:	f7ff fdf9 	bl	8008450 <ld_clust>
 800885e:	0002      	movs	r2, r0
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008864:	e7b1      	b.n	80087ca <follow_path+0x56>
			if (res != FR_OK) break;
 8008866:	46c0      	nop			@ (mov r8, r8)
 8008868:	e002      	b.n	8008870 <follow_path+0xfc>
				break;
 800886a:	46c0      	nop			@ (mov r8, r8)
 800886c:	e000      	b.n	8008870 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800886e:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 8008870:	2317      	movs	r3, #23
 8008872:	18fb      	adds	r3, r7, r3
 8008874:	781b      	ldrb	r3, [r3, #0]
}
 8008876:	0018      	movs	r0, r3
 8008878:	46bd      	mov	sp, r7
 800887a:	b006      	add	sp, #24
 800887c:	bdb0      	pop	{r4, r5, r7, pc}

0800887e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b086      	sub	sp, #24
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008886:	2301      	movs	r3, #1
 8008888:	425b      	negs	r3, r3
 800888a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d031      	beq.n	80088f8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	e002      	b.n	80088a2 <get_ldnumber+0x24>
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	3301      	adds	r3, #1
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	d903      	bls.n	80088b2 <get_ldnumber+0x34>
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b3a      	cmp	r3, #58	@ 0x3a
 80088b0:	d1f4      	bne.n	800889c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	2b3a      	cmp	r3, #58	@ 0x3a
 80088b8:	d11c      	bne.n	80088f4 <get_ldnumber+0x76>
			tp = *path;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	1c5a      	adds	r2, r3, #1
 80088c4:	60fa      	str	r2, [r7, #12]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	3b30      	subs	r3, #48	@ 0x30
 80088ca:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2b09      	cmp	r3, #9
 80088d0:	d80e      	bhi.n	80088f0 <get_ldnumber+0x72>
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d10a      	bne.n	80088f0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d107      	bne.n	80088f0 <get_ldnumber+0x72>
					vol = (int)i;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	3301      	adds	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	e002      	b.n	80088fa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80088f4:	2300      	movs	r3, #0
 80088f6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80088f8:	693b      	ldr	r3, [r7, #16]
}
 80088fa:	0018      	movs	r0, r3
 80088fc:	46bd      	mov	sp, r7
 80088fe:	b006      	add	sp, #24
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	70da      	strb	r2, [r3, #3]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	4252      	negs	r2, r2
 800891a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800891c:	683a      	ldr	r2, [r7, #0]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	0011      	movs	r1, r2
 8008922:	0018      	movs	r0, r3
 8008924:	f7ff f82e 	bl	8007984 <move_window>
 8008928:	1e03      	subs	r3, r0, #0
 800892a:	d001      	beq.n	8008930 <check_fs+0x2c>
 800892c:	2304      	movs	r3, #4
 800892e:	e037      	b.n	80089a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3334      	adds	r3, #52	@ 0x34
 8008934:	33ff      	adds	r3, #255	@ 0xff
 8008936:	33ff      	adds	r3, #255	@ 0xff
 8008938:	0018      	movs	r0, r3
 800893a:	f7fe fd43 	bl	80073c4 <ld_word>
 800893e:	0003      	movs	r3, r0
 8008940:	001a      	movs	r2, r3
 8008942:	4b19      	ldr	r3, [pc, #100]	@ (80089a8 <check_fs+0xa4>)
 8008944:	429a      	cmp	r2, r3
 8008946:	d001      	beq.n	800894c <check_fs+0x48>
 8008948:	2303      	movs	r3, #3
 800894a:	e029      	b.n	80089a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2234      	movs	r2, #52	@ 0x34
 8008950:	5c9b      	ldrb	r3, [r3, r2]
 8008952:	2be9      	cmp	r3, #233	@ 0xe9
 8008954:	d009      	beq.n	800896a <check_fs+0x66>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2234      	movs	r2, #52	@ 0x34
 800895a:	5c9b      	ldrb	r3, [r3, r2]
 800895c:	2beb      	cmp	r3, #235	@ 0xeb
 800895e:	d11e      	bne.n	800899e <check_fs+0x9a>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2236      	movs	r2, #54	@ 0x36
 8008964:	5c9b      	ldrb	r3, [r3, r2]
 8008966:	2b90      	cmp	r3, #144	@ 0x90
 8008968:	d119      	bne.n	800899e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	3334      	adds	r3, #52	@ 0x34
 800896e:	3336      	adds	r3, #54	@ 0x36
 8008970:	0018      	movs	r0, r3
 8008972:	f7fe fd42 	bl	80073fa <ld_dword>
 8008976:	0003      	movs	r3, r0
 8008978:	021b      	lsls	r3, r3, #8
 800897a:	0a1b      	lsrs	r3, r3, #8
 800897c:	4a0b      	ldr	r2, [pc, #44]	@ (80089ac <check_fs+0xa8>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d101      	bne.n	8008986 <check_fs+0x82>
 8008982:	2300      	movs	r3, #0
 8008984:	e00c      	b.n	80089a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	3334      	adds	r3, #52	@ 0x34
 800898a:	3352      	adds	r3, #82	@ 0x52
 800898c:	0018      	movs	r0, r3
 800898e:	f7fe fd34 	bl	80073fa <ld_dword>
 8008992:	0003      	movs	r3, r0
 8008994:	4a06      	ldr	r2, [pc, #24]	@ (80089b0 <check_fs+0xac>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d101      	bne.n	800899e <check_fs+0x9a>
 800899a:	2300      	movs	r3, #0
 800899c:	e000      	b.n	80089a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800899e:	2302      	movs	r3, #2
}
 80089a0:	0018      	movs	r0, r3
 80089a2:	46bd      	mov	sp, r7
 80089a4:	b002      	add	sp, #8
 80089a6:	bd80      	pop	{r7, pc}
 80089a8:	0000aa55 	.word	0x0000aa55
 80089ac:	00544146 	.word	0x00544146
 80089b0:	33544146 	.word	0x33544146

080089b4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80089b4:	b5b0      	push	{r4, r5, r7, lr}
 80089b6:	b096      	sub	sp, #88	@ 0x58
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	1dfb      	adds	r3, r7, #7
 80089c0:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	0018      	movs	r0, r3
 80089cc:	f7ff ff57 	bl	800887e <get_ldnumber>
 80089d0:	0003      	movs	r3, r0
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80089d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da01      	bge.n	80089de <find_volume+0x2a>
 80089da:	230b      	movs	r3, #11
 80089dc:	e250      	b.n	8008e80 <find_volume+0x4cc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80089de:	4bb6      	ldr	r3, [pc, #728]	@ (8008cb8 <find_volume+0x304>)
 80089e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089e2:	0092      	lsls	r2, r2, #2
 80089e4:	58d3      	ldr	r3, [r2, r3]
 80089e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80089e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <find_volume+0x3e>
 80089ee:	230c      	movs	r3, #12
 80089f0:	e246      	b.n	8008e80 <find_volume+0x4cc>

	ENTER_FF(fs);						/* Lock the volume */
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	0018      	movs	r0, r3
 80089f6:	f7fe fddf 	bl	80075b8 <lock_fs>
 80089fa:	1e03      	subs	r3, r0, #0
 80089fc:	d101      	bne.n	8008a02 <find_volume+0x4e>
 80089fe:	230f      	movs	r3, #15
 8008a00:	e23e      	b.n	8008e80 <find_volume+0x4cc>
	*rfs = fs;							/* Return pointer to the file system object */
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008a08:	1dfb      	adds	r3, r7, #7
 8008a0a:	1dfa      	adds	r2, r7, #7
 8008a0c:	7812      	ldrb	r2, [r2, #0]
 8008a0e:	2101      	movs	r1, #1
 8008a10:	438a      	bics	r2, r1
 8008a12:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d01b      	beq.n	8008a54 <find_volume+0xa0>
		stat = disk_status(fs->drv);
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2537      	movs	r5, #55	@ 0x37
 8008a22:	197c      	adds	r4, r7, r5
 8008a24:	0018      	movs	r0, r3
 8008a26:	f7fe fc03 	bl	8007230 <disk_status>
 8008a2a:	0003      	movs	r3, r0
 8008a2c:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a2e:	0029      	movs	r1, r5
 8008a30:	187b      	adds	r3, r7, r1
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2201      	movs	r2, #1
 8008a36:	4013      	ands	r3, r2
 8008a38:	d10c      	bne.n	8008a54 <find_volume+0xa0>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008a3a:	1dfb      	adds	r3, r7, #7
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d006      	beq.n	8008a50 <find_volume+0x9c>
 8008a42:	187b      	adds	r3, r7, r1
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	2204      	movs	r2, #4
 8008a48:	4013      	ands	r3, r2
 8008a4a:	d001      	beq.n	8008a50 <find_volume+0x9c>
				return FR_WRITE_PROTECTED;
 8008a4c:	230a      	movs	r3, #10
 8008a4e:	e217      	b.n	8008e80 <find_volume+0x4cc>
			}
			return FR_OK;				/* The file system object is valid */
 8008a50:	2300      	movs	r3, #0
 8008a52:	e215      	b.n	8008e80 <find_volume+0x4cc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a60:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2537      	movs	r5, #55	@ 0x37
 8008a68:	197c      	adds	r4, r7, r5
 8008a6a:	0018      	movs	r0, r3
 8008a6c:	f7fe fc02 	bl	8007274 <disk_initialize>
 8008a70:	0003      	movs	r3, r0
 8008a72:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008a74:	197b      	adds	r3, r7, r5
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	d001      	beq.n	8008a82 <find_volume+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e1fe      	b.n	8008e80 <find_volume+0x4cc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008a82:	1dfb      	adds	r3, r7, #7
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <find_volume+0xe6>
 8008a8a:	2337      	movs	r3, #55	@ 0x37
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2204      	movs	r2, #4
 8008a92:	4013      	ands	r3, r2
 8008a94:	d001      	beq.n	8008a9a <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 8008a96:	230a      	movs	r3, #10
 8008a98:	e1f2      	b.n	8008e80 <find_volume+0x4cc>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008a9e:	2557      	movs	r5, #87	@ 0x57
 8008aa0:	197c      	adds	r4, r7, r5
 8008aa2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	0011      	movs	r1, r2
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f7ff ff2b 	bl	8008904 <check_fs>
 8008aae:	0003      	movs	r3, r0
 8008ab0:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ab2:	197b      	adds	r3, r7, r5
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d14b      	bne.n	8008b52 <find_volume+0x19e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008aba:	2300      	movs	r3, #0
 8008abc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008abe:	e01d      	b.n	8008afc <find_volume+0x148>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	3334      	adds	r3, #52	@ 0x34
 8008ac4:	001a      	movs	r2, r3
 8008ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ac8:	011b      	lsls	r3, r3, #4
 8008aca:	33bf      	adds	r3, #191	@ 0xbf
 8008acc:	33ff      	adds	r3, #255	@ 0xff
 8008ace:	18d3      	adds	r3, r2, r3
 8008ad0:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad4:	3304      	adds	r3, #4
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d006      	beq.n	8008aea <find_volume+0x136>
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	3308      	adds	r3, #8
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f7fe fc8a 	bl	80073fa <ld_dword>
 8008ae6:	0003      	movs	r3, r0
 8008ae8:	e000      	b.n	8008aec <find_volume+0x138>
 8008aea:	2300      	movs	r3, #0
 8008aec:	2214      	movs	r2, #20
 8008aee:	18ba      	adds	r2, r7, r2
 8008af0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008af2:	0089      	lsls	r1, r1, #2
 8008af4:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008af8:	3301      	adds	r3, #1
 8008afa:	643b      	str	r3, [r7, #64]	@ 0x40
 8008afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d9de      	bls.n	8008ac0 <find_volume+0x10c>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008b02:	2300      	movs	r3, #0
 8008b04:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <find_volume+0x15e>
 8008b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008b12:	2314      	movs	r3, #20
 8008b14:	18fb      	adds	r3, r7, r3
 8008b16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b18:	0092      	lsls	r2, r2, #2
 8008b1a:	58d3      	ldr	r3, [r2, r3]
 8008b1c:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d008      	beq.n	8008b36 <find_volume+0x182>
 8008b24:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	0011      	movs	r1, r2
 8008b2a:	0018      	movs	r0, r3
 8008b2c:	f7ff feea 	bl	8008904 <check_fs>
 8008b30:	0003      	movs	r3, r0
 8008b32:	001a      	movs	r2, r3
 8008b34:	e000      	b.n	8008b38 <find_volume+0x184>
 8008b36:	2203      	movs	r2, #3
 8008b38:	2157      	movs	r1, #87	@ 0x57
 8008b3a:	187b      	adds	r3, r7, r1
 8008b3c:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008b3e:	187b      	adds	r3, r7, r1
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d905      	bls.n	8008b52 <find_volume+0x19e>
 8008b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b48:	3301      	adds	r3, #1
 8008b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d9df      	bls.n	8008b12 <find_volume+0x15e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008b52:	2357      	movs	r3, #87	@ 0x57
 8008b54:	18fb      	adds	r3, r7, r3
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b04      	cmp	r3, #4
 8008b5a:	d101      	bne.n	8008b60 <find_volume+0x1ac>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e18f      	b.n	8008e80 <find_volume+0x4cc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008b60:	2357      	movs	r3, #87	@ 0x57
 8008b62:	18fb      	adds	r3, r7, r3
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d901      	bls.n	8008b6e <find_volume+0x1ba>
 8008b6a:	230d      	movs	r3, #13
 8008b6c:	e188      	b.n	8008e80 <find_volume+0x4cc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	3334      	adds	r3, #52	@ 0x34
 8008b72:	330b      	adds	r3, #11
 8008b74:	0018      	movs	r0, r3
 8008b76:	f7fe fc25 	bl	80073c4 <ld_word>
 8008b7a:	0003      	movs	r3, r0
 8008b7c:	001a      	movs	r2, r3
 8008b7e:	2380      	movs	r3, #128	@ 0x80
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d001      	beq.n	8008b8a <find_volume+0x1d6>
 8008b86:	230d      	movs	r3, #13
 8008b88:	e17a      	b.n	8008e80 <find_volume+0x4cc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8c:	3334      	adds	r3, #52	@ 0x34
 8008b8e:	3316      	adds	r3, #22
 8008b90:	0018      	movs	r0, r3
 8008b92:	f7fe fc17 	bl	80073c4 <ld_word>
 8008b96:	0003      	movs	r3, r0
 8008b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d107      	bne.n	8008bb0 <find_volume+0x1fc>
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba2:	3334      	adds	r3, #52	@ 0x34
 8008ba4:	3324      	adds	r3, #36	@ 0x24
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f7fe fc27 	bl	80073fa <ld_dword>
 8008bac:	0003      	movs	r3, r0
 8008bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bb4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	2244      	movs	r2, #68	@ 0x44
 8008bba:	5c9a      	ldrb	r2, [r3, r2]
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc2:	789b      	ldrb	r3, [r3, #2]
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d005      	beq.n	8008bd4 <find_volume+0x220>
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bca:	789b      	ldrb	r3, [r3, #2]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d001      	beq.n	8008bd4 <find_volume+0x220>
 8008bd0:	230d      	movs	r3, #13
 8008bd2:	e155      	b.n	8008e80 <find_volume+0x4cc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd6:	789b      	ldrb	r3, [r3, #2]
 8008bd8:	001a      	movs	r2, r3
 8008bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bdc:	4353      	muls	r3, r2
 8008bde:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	2241      	movs	r2, #65	@ 0x41
 8008be4:	5c9b      	ldrb	r3, [r3, r2]
 8008be6:	001a      	movs	r2, r3
 8008be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bea:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bee:	895b      	ldrh	r3, [r3, #10]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d007      	beq.n	8008c04 <find_volume+0x250>
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	895b      	ldrh	r3, [r3, #10]
 8008bf8:	001a      	movs	r2, r3
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	895b      	ldrh	r3, [r3, #10]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	4013      	ands	r3, r2
 8008c02:	d001      	beq.n	8008c08 <find_volume+0x254>
 8008c04:	230d      	movs	r3, #13
 8008c06:	e13b      	b.n	8008e80 <find_volume+0x4cc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c0a:	3334      	adds	r3, #52	@ 0x34
 8008c0c:	3311      	adds	r3, #17
 8008c0e:	0018      	movs	r0, r3
 8008c10:	f7fe fbd8 	bl	80073c4 <ld_word>
 8008c14:	0003      	movs	r3, r0
 8008c16:	001a      	movs	r2, r3
 8008c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1e:	891b      	ldrh	r3, [r3, #8]
 8008c20:	220f      	movs	r2, #15
 8008c22:	4013      	ands	r3, r2
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <find_volume+0x27a>
 8008c2a:	230d      	movs	r3, #13
 8008c2c:	e128      	b.n	8008e80 <find_volume+0x4cc>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c30:	3334      	adds	r3, #52	@ 0x34
 8008c32:	3313      	adds	r3, #19
 8008c34:	0018      	movs	r0, r3
 8008c36:	f7fe fbc5 	bl	80073c4 <ld_word>
 8008c3a:	0003      	movs	r3, r0
 8008c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d107      	bne.n	8008c54 <find_volume+0x2a0>
 8008c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c46:	3334      	adds	r3, #52	@ 0x34
 8008c48:	3320      	adds	r3, #32
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	f7fe fbd5 	bl	80073fa <ld_dword>
 8008c50:	0003      	movs	r3, r0
 8008c52:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c56:	3334      	adds	r3, #52	@ 0x34
 8008c58:	330e      	adds	r3, #14
 8008c5a:	252e      	movs	r5, #46	@ 0x2e
 8008c5c:	197c      	adds	r4, r7, r5
 8008c5e:	0018      	movs	r0, r3
 8008c60:	f7fe fbb0 	bl	80073c4 <ld_word>
 8008c64:	0003      	movs	r3, r0
 8008c66:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c68:	197b      	adds	r3, r7, r5
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <find_volume+0x2c0>
 8008c70:	230d      	movs	r3, #13
 8008c72:	e105      	b.n	8008e80 <find_volume+0x4cc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c74:	232e      	movs	r3, #46	@ 0x2e
 8008c76:	18fb      	adds	r3, r7, r3
 8008c78:	881a      	ldrh	r2, [r3, #0]
 8008c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c7c:	18d3      	adds	r3, r2, r3
 8008c7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c80:	8912      	ldrh	r2, [r2, #8]
 8008c82:	0912      	lsrs	r2, r2, #4
 8008c84:	b292      	uxth	r2, r2
 8008c86:	189b      	adds	r3, r3, r2
 8008c88:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d201      	bcs.n	8008c96 <find_volume+0x2e2>
 8008c92:	230d      	movs	r3, #13
 8008c94:	e0f4      	b.n	8008e80 <find_volume+0x4cc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9a:	1ad2      	subs	r2, r2, r3
 8008c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9e:	895b      	ldrh	r3, [r3, #10]
 8008ca0:	0019      	movs	r1, r3
 8008ca2:	0010      	movs	r0, r2
 8008ca4:	f7f7 fa3a 	bl	800011c <__udivsi3>
 8008ca8:	0003      	movs	r3, r0
 8008caa:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d104      	bne.n	8008cbc <find_volume+0x308>
 8008cb2:	230d      	movs	r3, #13
 8008cb4:	e0e4      	b.n	8008e80 <find_volume+0x4cc>
 8008cb6:	46c0      	nop			@ (mov r8, r8)
 8008cb8:	20000b28 	.word	0x20000b28
		fmt = FS_FAT32;
 8008cbc:	2157      	movs	r1, #87	@ 0x57
 8008cbe:	187b      	adds	r3, r7, r1
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	4a70      	ldr	r2, [pc, #448]	@ (8008e88 <find_volume+0x4d4>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d802      	bhi.n	8008cd2 <find_volume+0x31e>
 8008ccc:	187b      	adds	r3, r7, r1
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd4:	4a6d      	ldr	r2, [pc, #436]	@ (8008e8c <find_volume+0x4d8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d803      	bhi.n	8008ce2 <find_volume+0x32e>
 8008cda:	2357      	movs	r3, #87	@ 0x57
 8008cdc:	18fb      	adds	r3, r7, r3
 8008cde:	2201      	movs	r2, #1
 8008ce0:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	1c9a      	adds	r2, r3, #2
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cee:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008cf0:	232e      	movs	r3, #46	@ 0x2e
 8008cf2:	18fb      	adds	r3, r7, r3
 8008cf4:	881a      	ldrh	r2, [r3, #0]
 8008cf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cf8:	18d2      	adds	r2, r2, r3
 8008cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cfc:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008cfe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d02:	18d2      	adds	r2, r2, r3
 8008d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d06:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8008d08:	2357      	movs	r3, #87	@ 0x57
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d11d      	bne.n	8008d4e <find_volume+0x39a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d14:	3334      	adds	r3, #52	@ 0x34
 8008d16:	332a      	adds	r3, #42	@ 0x2a
 8008d18:	0018      	movs	r0, r3
 8008d1a:	f7fe fb53 	bl	80073c4 <ld_word>
 8008d1e:	1e03      	subs	r3, r0, #0
 8008d20:	d001      	beq.n	8008d26 <find_volume+0x372>
 8008d22:	230d      	movs	r3, #13
 8008d24:	e0ac      	b.n	8008e80 <find_volume+0x4cc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d28:	891b      	ldrh	r3, [r3, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d001      	beq.n	8008d32 <find_volume+0x37e>
 8008d2e:	230d      	movs	r3, #13
 8008d30:	e0a6      	b.n	8008e80 <find_volume+0x4cc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	3334      	adds	r3, #52	@ 0x34
 8008d36:	332c      	adds	r3, #44	@ 0x2c
 8008d38:	0018      	movs	r0, r3
 8008d3a:	f7fe fb5e 	bl	80073fa <ld_dword>
 8008d3e:	0002      	movs	r2, r0
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d4c:	e020      	b.n	8008d90 <find_volume+0x3dc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d50:	891b      	ldrh	r3, [r3, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d101      	bne.n	8008d5a <find_volume+0x3a6>
 8008d56:	230d      	movs	r3, #13
 8008d58:	e092      	b.n	8008e80 <find_volume+0x4cc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d60:	18d2      	adds	r2, r2, r3
 8008d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d64:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008d66:	2357      	movs	r3, #87	@ 0x57
 8008d68:	18fb      	adds	r3, r7, r3
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d103      	bne.n	8008d78 <find_volume+0x3c4>
 8008d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	e00a      	b.n	8008d8e <find_volume+0x3da>
 8008d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7a:	699a      	ldr	r2, [r3, #24]
 8008d7c:	0013      	movs	r3, r2
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	189b      	adds	r3, r3, r2
 8008d82:	085a      	lsrs	r2, r3, #1
 8008d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d86:	699b      	ldr	r3, [r3, #24]
 8008d88:	2101      	movs	r1, #1
 8008d8a:	400b      	ands	r3, r1
 8008d8c:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008d8e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d92:	69da      	ldr	r2, [r3, #28]
 8008d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d96:	493e      	ldr	r1, [pc, #248]	@ (8008e90 <find_volume+0x4dc>)
 8008d98:	468c      	mov	ip, r1
 8008d9a:	4463      	add	r3, ip
 8008d9c:	0a5b      	lsrs	r3, r3, #9
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d201      	bcs.n	8008da6 <find_volume+0x3f2>
 8008da2:	230d      	movs	r3, #13
 8008da4:	e06c      	b.n	8008e80 <find_volume+0x4cc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da8:	2201      	movs	r2, #1
 8008daa:	4252      	negs	r2, r2
 8008dac:	615a      	str	r2, [r3, #20]
 8008dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db8:	2280      	movs	r2, #128	@ 0x80
 8008dba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008dbc:	2357      	movs	r3, #87	@ 0x57
 8008dbe:	18fb      	adds	r3, r7, r3
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d148      	bne.n	8008e58 <find_volume+0x4a4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc8:	3334      	adds	r3, #52	@ 0x34
 8008dca:	3330      	adds	r3, #48	@ 0x30
 8008dcc:	0018      	movs	r0, r3
 8008dce:	f7fe faf9 	bl	80073c4 <ld_word>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d13f      	bne.n	8008e58 <find_volume+0x4a4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dde:	0011      	movs	r1, r2
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7fe fdcf 	bl	8007984 <move_window>
 8008de6:	1e03      	subs	r3, r0, #0
 8008de8:	d136      	bne.n	8008e58 <find_volume+0x4a4>
		{
			fs->fsi_flag = 0;
 8008dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dec:	2200      	movs	r2, #0
 8008dee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	3334      	adds	r3, #52	@ 0x34
 8008df4:	33ff      	adds	r3, #255	@ 0xff
 8008df6:	33ff      	adds	r3, #255	@ 0xff
 8008df8:	0018      	movs	r0, r3
 8008dfa:	f7fe fae3 	bl	80073c4 <ld_word>
 8008dfe:	0003      	movs	r3, r0
 8008e00:	001a      	movs	r2, r3
 8008e02:	4b24      	ldr	r3, [pc, #144]	@ (8008e94 <find_volume+0x4e0>)
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d127      	bne.n	8008e58 <find_volume+0x4a4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	3334      	adds	r3, #52	@ 0x34
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f7fe faf4 	bl	80073fa <ld_dword>
 8008e12:	0003      	movs	r3, r0
 8008e14:	4a20      	ldr	r2, [pc, #128]	@ (8008e98 <find_volume+0x4e4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d11e      	bne.n	8008e58 <find_volume+0x4a4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1c:	3334      	adds	r3, #52	@ 0x34
 8008e1e:	33e5      	adds	r3, #229	@ 0xe5
 8008e20:	33ff      	adds	r3, #255	@ 0xff
 8008e22:	0018      	movs	r0, r3
 8008e24:	f7fe fae9 	bl	80073fa <ld_dword>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008e9c <find_volume+0x4e8>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d113      	bne.n	8008e58 <find_volume+0x4a4>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e32:	3334      	adds	r3, #52	@ 0x34
 8008e34:	33e9      	adds	r3, #233	@ 0xe9
 8008e36:	33ff      	adds	r3, #255	@ 0xff
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f7fe fade 	bl	80073fa <ld_dword>
 8008e3e:	0002      	movs	r2, r0
 8008e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e42:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e46:	3334      	adds	r3, #52	@ 0x34
 8008e48:	33ed      	adds	r3, #237	@ 0xed
 8008e4a:	33ff      	adds	r3, #255	@ 0xff
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f7fe fad4 	bl	80073fa <ld_dword>
 8008e52:	0002      	movs	r2, r0
 8008e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e56:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5a:	2257      	movs	r2, #87	@ 0x57
 8008e5c:	18ba      	adds	r2, r7, r2
 8008e5e:	7812      	ldrb	r2, [r2, #0]
 8008e60:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008e62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea0 <find_volume+0x4ec>)
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	3301      	adds	r3, #1
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea0 <find_volume+0x4ec>)
 8008e6c:	801a      	strh	r2, [r3, #0]
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea0 <find_volume+0x4ec>)
 8008e70:	881a      	ldrh	r2, [r3, #0]
 8008e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e74:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f7fe fd1b 	bl	80078b4 <clear_lock>
#endif
	return FR_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	0018      	movs	r0, r3
 8008e82:	46bd      	mov	sp, r7
 8008e84:	b016      	add	sp, #88	@ 0x58
 8008e86:	bdb0      	pop	{r4, r5, r7, pc}
 8008e88:	0000fff5 	.word	0x0000fff5
 8008e8c:	00000ff5 	.word	0x00000ff5
 8008e90:	000001ff 	.word	0x000001ff
 8008e94:	0000aa55 	.word	0x0000aa55
 8008e98:	41615252 	.word	0x41615252
 8008e9c:	61417272 	.word	0x61417272
 8008ea0:	20000b2c 	.word	0x20000b2c

08008ea4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008eae:	240f      	movs	r4, #15
 8008eb0:	193b      	adds	r3, r7, r4
 8008eb2:	2209      	movs	r2, #9
 8008eb4:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d030      	beq.n	8008f1e <validate+0x7a>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d02c      	beq.n	8008f1e <validate+0x7a>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d027      	beq.n	8008f1e <validate+0x7a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	889a      	ldrh	r2, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	88db      	ldrh	r3, [r3, #6]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d120      	bne.n	8008f1e <validate+0x7a>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	0018      	movs	r0, r3
 8008ee2:	f7fe fb69 	bl	80075b8 <lock_fs>
 8008ee6:	1e03      	subs	r3, r0, #0
 8008ee8:	d015      	beq.n	8008f16 <validate+0x72>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	0018      	movs	r0, r3
 8008ef2:	f7fe f99d 	bl	8007230 <disk_status>
 8008ef6:	0003      	movs	r3, r0
 8008ef8:	001a      	movs	r2, r3
 8008efa:	2301      	movs	r3, #1
 8008efc:	4013      	ands	r3, r2
 8008efe:	d103      	bne.n	8008f08 <validate+0x64>
				res = FR_OK;
 8008f00:	193b      	adds	r3, r7, r4
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
 8008f06:	e00a      	b.n	8008f1e <validate+0x7a>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	0018      	movs	r0, r3
 8008f10:	f7fe fb67 	bl	80075e2 <unlock_fs>
 8008f14:	e003      	b.n	8008f1e <validate+0x7a>
			}
		} else {
			res = FR_TIMEOUT;
 8008f16:	230f      	movs	r3, #15
 8008f18:	18fb      	adds	r3, r7, r3
 8008f1a:	220f      	movs	r2, #15
 8008f1c:	701a      	strb	r2, [r3, #0]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008f1e:	230f      	movs	r3, #15
 8008f20:	18fb      	adds	r3, r7, r3
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <validate+0x8a>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	e000      	b.n	8008f30 <validate+0x8c>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	601a      	str	r2, [r3, #0]
	return res;
 8008f34:	230f      	movs	r3, #15
 8008f36:	18fb      	adds	r3, r7, r3
 8008f38:	781b      	ldrb	r3, [r3, #0]
}
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	b005      	add	sp, #20
 8008f40:	bd90      	pop	{r4, r7, pc}
	...

08008f44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008f44:	b5b0      	push	{r4, r5, r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	1dfb      	adds	r3, r7, #7
 8008f50:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008f56:	2310      	movs	r3, #16
 8008f58:	18fb      	adds	r3, r7, r3
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f7ff fc8f 	bl	800887e <get_ldnumber>
 8008f60:	0003      	movs	r3, r0
 8008f62:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	da01      	bge.n	8008f6e <f_mount+0x2a>
 8008f6a:	230b      	movs	r3, #11
 8008f6c:	e04c      	b.n	8009008 <f_mount+0xc4>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008f6e:	4b28      	ldr	r3, [pc, #160]	@ (8009010 <f_mount+0xcc>)
 8008f70:	69fa      	ldr	r2, [r7, #28]
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	58d3      	ldr	r3, [r2, r3]
 8008f76:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00f      	beq.n	8008f9e <f_mount+0x5a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7fe fc97 	bl	80078b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	0018      	movs	r0, r3
 8008f8c:	f000 fe02 	bl	8009b94 <ff_del_syncobj>
 8008f90:	1e03      	subs	r3, r0, #0
 8008f92:	d101      	bne.n	8008f98 <f_mount+0x54>
 8008f94:	2302      	movs	r3, #2
 8008f96:	e037      	b.n	8009008 <f_mount+0xc4>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00e      	beq.n	8008fc2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	330c      	adds	r3, #12
 8008fb2:	0019      	movs	r1, r3
 8008fb4:	0010      	movs	r0, r2
 8008fb6:	f000 fdd3 	bl	8009b60 <ff_cre_syncobj>
 8008fba:	1e03      	subs	r3, r0, #0
 8008fbc:	d101      	bne.n	8008fc2 <f_mount+0x7e>
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	e022      	b.n	8009008 <f_mount+0xc4>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008fc2:	68f9      	ldr	r1, [r7, #12]
 8008fc4:	4b12      	ldr	r3, [pc, #72]	@ (8009010 <f_mount+0xcc>)
 8008fc6:	69fa      	ldr	r2, [r7, #28]
 8008fc8:	0092      	lsls	r2, r2, #2
 8008fca:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <f_mount+0x96>
 8008fd2:	1dfb      	adds	r3, r7, #7
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d001      	beq.n	8008fde <f_mount+0x9a>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	e014      	b.n	8009008 <f_mount+0xc4>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008fde:	2517      	movs	r5, #23
 8008fe0:	197c      	adds	r4, r7, r5
 8008fe2:	230c      	movs	r3, #12
 8008fe4:	18f9      	adds	r1, r7, r3
 8008fe6:	2308      	movs	r3, #8
 8008fe8:	18fb      	adds	r3, r7, r3
 8008fea:	2200      	movs	r2, #0
 8008fec:	0018      	movs	r0, r3
 8008fee:	f7ff fce1 	bl	80089b4 <find_volume>
 8008ff2:	0003      	movs	r3, r0
 8008ff4:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	197b      	adds	r3, r7, r5
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	0019      	movs	r1, r3
 8008ffe:	0010      	movs	r0, r2
 8009000:	f7fe faef 	bl	80075e2 <unlock_fs>
 8009004:	197b      	adds	r3, r7, r5
 8009006:	781b      	ldrb	r3, [r3, #0]
}
 8009008:	0018      	movs	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	b008      	add	sp, #32
 800900e:	bdb0      	pop	{r4, r5, r7, pc}
 8009010:	20000b28 	.word	0x20000b28

08009014 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009016:	b099      	sub	sp, #100	@ 0x64
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	1dfb      	adds	r3, r7, #7
 8009020:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <f_open+0x18>
 8009028:	2309      	movs	r3, #9
 800902a:	e1ea      	b.n	8009402 <f_open+0x3ee>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800902c:	1dfb      	adds	r3, r7, #7
 800902e:	1dfa      	adds	r2, r7, #7
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	213f      	movs	r1, #63	@ 0x3f
 8009034:	400a      	ands	r2, r1
 8009036:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8009038:	255f      	movs	r5, #95	@ 0x5f
 800903a:	197c      	adds	r4, r7, r5
 800903c:	1dfb      	adds	r3, r7, #7
 800903e:	781a      	ldrb	r2, [r3, #0]
 8009040:	2310      	movs	r3, #16
 8009042:	18f9      	adds	r1, r7, r3
 8009044:	2308      	movs	r3, #8
 8009046:	18fb      	adds	r3, r7, r3
 8009048:	0018      	movs	r0, r3
 800904a:	f7ff fcb3 	bl	80089b4 <find_volume>
 800904e:	0003      	movs	r3, r0
 8009050:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009052:	197b      	adds	r3, r7, r5
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d000      	beq.n	800905c <f_open+0x48>
 800905a:	e1c0      	b.n	80093de <f_open+0x3ca>
		dj.obj.fs = fs;
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	2614      	movs	r6, #20
 8009060:	19bb      	adds	r3, r7, r6
 8009062:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	197c      	adds	r4, r7, r5
 8009068:	19bb      	adds	r3, r7, r6
 800906a:	0011      	movs	r1, r2
 800906c:	0018      	movs	r0, r3
 800906e:	f7ff fb81 	bl	8008774 <follow_path>
 8009072:	0003      	movs	r3, r0
 8009074:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009076:	0029      	movs	r1, r5
 8009078:	197b      	adds	r3, r7, r5
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d11b      	bne.n	80090b8 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009080:	19bb      	adds	r3, r7, r6
 8009082:	222f      	movs	r2, #47	@ 0x2f
 8009084:	5c9b      	ldrb	r3, [r3, r2]
 8009086:	b25b      	sxtb	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	da03      	bge.n	8009094 <f_open+0x80>
				res = FR_INVALID_NAME;
 800908c:	187b      	adds	r3, r7, r1
 800908e:	2206      	movs	r2, #6
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e011      	b.n	80090b8 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009094:	1dfb      	adds	r3, r7, #7
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2201      	movs	r2, #1
 800909a:	429a      	cmp	r2, r3
 800909c:	419b      	sbcs	r3, r3
 800909e:	425b      	negs	r3, r3
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	001a      	movs	r2, r3
 80090a4:	235f      	movs	r3, #95	@ 0x5f
 80090a6:	18fc      	adds	r4, r7, r3
 80090a8:	2314      	movs	r3, #20
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	0011      	movs	r1, r2
 80090ae:	0018      	movs	r0, r3
 80090b0:	f7fe fab6 	bl	8007620 <chk_lock>
 80090b4:	0003      	movs	r3, r0
 80090b6:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80090b8:	1dfb      	adds	r3, r7, #7
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	221c      	movs	r2, #28
 80090be:	4013      	ands	r3, r2
 80090c0:	d100      	bne.n	80090c4 <f_open+0xb0>
 80090c2:	e096      	b.n	80091f2 <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 80090c4:	225f      	movs	r2, #95	@ 0x5f
 80090c6:	18bb      	adds	r3, r7, r2
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01a      	beq.n	8009104 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80090ce:	18bb      	adds	r3, r7, r2
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d10f      	bne.n	80090f6 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80090d6:	f7fe fafb 	bl	80076d0 <enq_lock>
 80090da:	1e03      	subs	r3, r0, #0
 80090dc:	d007      	beq.n	80090ee <f_open+0xda>
 80090de:	2314      	movs	r3, #20
 80090e0:	18fb      	adds	r3, r7, r3
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7ff fa5b 	bl	800859e <dir_register>
 80090e8:	0003      	movs	r3, r0
 80090ea:	001a      	movs	r2, r3
 80090ec:	e000      	b.n	80090f0 <f_open+0xdc>
 80090ee:	2212      	movs	r2, #18
 80090f0:	235f      	movs	r3, #95	@ 0x5f
 80090f2:	18fb      	adds	r3, r7, r3
 80090f4:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80090f6:	1dfb      	adds	r3, r7, #7
 80090f8:	1dfa      	adds	r2, r7, #7
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	2108      	movs	r1, #8
 80090fe:	430a      	orrs	r2, r1
 8009100:	701a      	strb	r2, [r3, #0]
 8009102:	e014      	b.n	800912e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009104:	2314      	movs	r3, #20
 8009106:	18fb      	adds	r3, r7, r3
 8009108:	799b      	ldrb	r3, [r3, #6]
 800910a:	001a      	movs	r2, r3
 800910c:	2311      	movs	r3, #17
 800910e:	4013      	ands	r3, r2
 8009110:	d004      	beq.n	800911c <f_open+0x108>
					res = FR_DENIED;
 8009112:	235f      	movs	r3, #95	@ 0x5f
 8009114:	18fb      	adds	r3, r7, r3
 8009116:	2207      	movs	r2, #7
 8009118:	701a      	strb	r2, [r3, #0]
 800911a:	e008      	b.n	800912e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800911c:	1dfb      	adds	r3, r7, #7
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	2204      	movs	r2, #4
 8009122:	4013      	ands	r3, r2
 8009124:	d003      	beq.n	800912e <f_open+0x11a>
 8009126:	235f      	movs	r3, #95	@ 0x5f
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	2208      	movs	r2, #8
 800912c:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800912e:	245f      	movs	r4, #95	@ 0x5f
 8009130:	193b      	adds	r3, r7, r4
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d000      	beq.n	800913a <f_open+0x126>
 8009138:	e07b      	b.n	8009232 <f_open+0x21e>
 800913a:	1dfb      	adds	r3, r7, #7
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	2208      	movs	r2, #8
 8009140:	4013      	ands	r3, r2
 8009142:	d100      	bne.n	8009146 <f_open+0x132>
 8009144:	e075      	b.n	8009232 <f_open+0x21e>
				dw = GET_FATTIME();
 8009146:	f7fd fa97 	bl	8006678 <get_fattime>
 800914a:	0003      	movs	r3, r0
 800914c:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800914e:	2514      	movs	r5, #20
 8009150:	197b      	adds	r3, r7, r5
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	330e      	adds	r3, #14
 8009156:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009158:	0011      	movs	r1, r2
 800915a:	0018      	movs	r0, r3
 800915c:	f7fe f98c 	bl	8007478 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009160:	197b      	adds	r3, r7, r5
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	3316      	adds	r3, #22
 8009166:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009168:	0011      	movs	r1, r2
 800916a:	0018      	movs	r0, r3
 800916c:	f7fe f984 	bl	8007478 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009170:	197b      	adds	r3, r7, r5
 8009172:	6a1b      	ldr	r3, [r3, #32]
 8009174:	330b      	adds	r3, #11
 8009176:	2220      	movs	r2, #32
 8009178:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	197b      	adds	r3, r7, r5
 800917e:	6a1b      	ldr	r3, [r3, #32]
 8009180:	0019      	movs	r1, r3
 8009182:	0010      	movs	r0, r2
 8009184:	f7ff f964 	bl	8008450 <ld_clust>
 8009188:	0003      	movs	r3, r0
 800918a:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800918c:	6938      	ldr	r0, [r7, #16]
 800918e:	197b      	adds	r3, r7, r5
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	2200      	movs	r2, #0
 8009194:	0019      	movs	r1, r3
 8009196:	f7ff f97a 	bl	800848e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800919a:	197b      	adds	r3, r7, r5
 800919c:	6a1b      	ldr	r3, [r3, #32]
 800919e:	331c      	adds	r3, #28
 80091a0:	2100      	movs	r1, #0
 80091a2:	0018      	movs	r0, r3
 80091a4:	f7fe f968 	bl	8007478 <st_dword>
					fs->wflag = 1;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2201      	movs	r2, #1
 80091ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80091ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d03e      	beq.n	8009232 <f_open+0x21e>
						dw = fs->winsect;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80091ba:	0026      	movs	r6, r4
 80091bc:	193c      	adds	r4, r7, r4
 80091be:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80091c0:	197b      	adds	r3, r7, r5
 80091c2:	2200      	movs	r2, #0
 80091c4:	0018      	movs	r0, r3
 80091c6:	f7fe fe56 	bl	8007e76 <remove_chain>
 80091ca:	0003      	movs	r3, r0
 80091cc:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 80091ce:	19bb      	adds	r3, r7, r6
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d12d      	bne.n	8009232 <f_open+0x21e>
							res = move_window(fs, dw);
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	19bc      	adds	r4, r7, r6
 80091da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80091dc:	0011      	movs	r1, r2
 80091de:	0018      	movs	r0, r3
 80091e0:	f7fe fbd0 	bl	8007984 <move_window>
 80091e4:	0003      	movs	r3, r0
 80091e6:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091ec:	3a01      	subs	r2, #1
 80091ee:	611a      	str	r2, [r3, #16]
 80091f0:	e01f      	b.n	8009232 <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80091f2:	215f      	movs	r1, #95	@ 0x5f
 80091f4:	187b      	adds	r3, r7, r1
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d11a      	bne.n	8009232 <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80091fc:	2314      	movs	r3, #20
 80091fe:	18fb      	adds	r3, r7, r3
 8009200:	799b      	ldrb	r3, [r3, #6]
 8009202:	001a      	movs	r2, r3
 8009204:	2310      	movs	r3, #16
 8009206:	4013      	ands	r3, r2
 8009208:	d003      	beq.n	8009212 <f_open+0x1fe>
					res = FR_NO_FILE;
 800920a:	187b      	adds	r3, r7, r1
 800920c:	2204      	movs	r2, #4
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	e00f      	b.n	8009232 <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009212:	1dfb      	adds	r3, r7, #7
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2202      	movs	r2, #2
 8009218:	4013      	ands	r3, r2
 800921a:	d00a      	beq.n	8009232 <f_open+0x21e>
 800921c:	2314      	movs	r3, #20
 800921e:	18fb      	adds	r3, r7, r3
 8009220:	799b      	ldrb	r3, [r3, #6]
 8009222:	001a      	movs	r2, r3
 8009224:	2301      	movs	r3, #1
 8009226:	4013      	ands	r3, r2
 8009228:	d003      	beq.n	8009232 <f_open+0x21e>
						res = FR_DENIED;
 800922a:	235f      	movs	r3, #95	@ 0x5f
 800922c:	18fb      	adds	r3, r7, r3
 800922e:	2207      	movs	r2, #7
 8009230:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8009232:	235f      	movs	r3, #95	@ 0x5f
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d12b      	bne.n	8009294 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800923c:	1dfb      	adds	r3, r7, #7
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	2208      	movs	r2, #8
 8009242:	4013      	ands	r3, r2
 8009244:	d005      	beq.n	8009252 <f_open+0x23e>
				mode |= FA_MODIFIED;
 8009246:	1dfb      	adds	r3, r7, #7
 8009248:	1dfa      	adds	r2, r7, #7
 800924a:	7812      	ldrb	r2, [r2, #0]
 800924c:	2140      	movs	r1, #64	@ 0x40
 800924e:	430a      	orrs	r2, r1
 8009250:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800925a:	2114      	movs	r1, #20
 800925c:	187b      	adds	r3, r7, r1
 800925e:	6a1a      	ldr	r2, [r3, #32]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009264:	1dfb      	adds	r3, r7, #7
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2201      	movs	r2, #1
 800926a:	429a      	cmp	r2, r3
 800926c:	419b      	sbcs	r3, r3
 800926e:	425b      	negs	r3, r3
 8009270:	b2db      	uxtb	r3, r3
 8009272:	001a      	movs	r2, r3
 8009274:	187b      	adds	r3, r7, r1
 8009276:	0011      	movs	r1, r2
 8009278:	0018      	movs	r0, r3
 800927a:	f7fe fa47 	bl	800770c <inc_lock>
 800927e:	0002      	movs	r2, r0
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <f_open+0x280>
 800928c:	235f      	movs	r3, #95	@ 0x5f
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	2202      	movs	r2, #2
 8009292:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009294:	235f      	movs	r3, #95	@ 0x5f
 8009296:	18fb      	adds	r3, r7, r3
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d000      	beq.n	80092a0 <f_open+0x28c>
 800929e:	e09e      	b.n	80093de <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	2414      	movs	r4, #20
 80092a4:	193b      	adds	r3, r7, r4
 80092a6:	6a1b      	ldr	r3, [r3, #32]
 80092a8:	0019      	movs	r1, r3
 80092aa:	0010      	movs	r0, r2
 80092ac:	f7ff f8d0 	bl	8008450 <ld_clust>
 80092b0:	0002      	movs	r2, r0
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80092b6:	193b      	adds	r3, r7, r4
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	331c      	adds	r3, #28
 80092bc:	0018      	movs	r0, r3
 80092be:	f7fe f89c 	bl	80073fa <ld_dword>
 80092c2:	0002      	movs	r2, r0
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80092ce:	693a      	ldr	r2, [r7, #16]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	88da      	ldrh	r2, [r3, #6]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	1dfa      	adds	r2, r7, #7
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2200      	movs	r2, #0
 80092e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	3330      	adds	r3, #48	@ 0x30
 80092fa:	2280      	movs	r2, #128	@ 0x80
 80092fc:	0092      	lsls	r2, r2, #2
 80092fe:	2100      	movs	r1, #0
 8009300:	0018      	movs	r0, r3
 8009302:	f7fe f902 	bl	800750a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009306:	1dfb      	adds	r3, r7, #7
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2220      	movs	r2, #32
 800930c:	4013      	ands	r3, r2
 800930e:	d066      	beq.n	80093de <f_open+0x3ca>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d062      	beq.n	80093de <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	895b      	ldrh	r3, [r3, #10]
 8009324:	025b      	lsls	r3, r3, #9
 8009326:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	657b      	str	r3, [r7, #84]	@ 0x54
 8009334:	e019      	b.n	800936a <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800933a:	0011      	movs	r1, r2
 800933c:	0018      	movs	r0, r3
 800933e:	f7fe fbef 	bl	8007b20 <get_fat>
 8009342:	0003      	movs	r3, r0
 8009344:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009348:	2b01      	cmp	r3, #1
 800934a:	d803      	bhi.n	8009354 <f_open+0x340>
 800934c:	235f      	movs	r3, #95	@ 0x5f
 800934e:	18fb      	adds	r3, r7, r3
 8009350:	2202      	movs	r2, #2
 8009352:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009354:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009356:	3301      	adds	r3, #1
 8009358:	d103      	bne.n	8009362 <f_open+0x34e>
 800935a:	235f      	movs	r3, #95	@ 0x5f
 800935c:	18fb      	adds	r3, r7, r3
 800935e:	2201      	movs	r2, #1
 8009360:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009362:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	657b      	str	r3, [r7, #84]	@ 0x54
 800936a:	235f      	movs	r3, #95	@ 0x5f
 800936c:	18fb      	adds	r3, r7, r3
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <f_open+0x368>
 8009374:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009378:	429a      	cmp	r2, r3
 800937a:	d8dc      	bhi.n	8009336 <f_open+0x322>
				}
				fp->clust = clst;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009380:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009382:	245f      	movs	r4, #95	@ 0x5f
 8009384:	193b      	adds	r3, r7, r4
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d128      	bne.n	80093de <f_open+0x3ca>
 800938c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800938e:	05db      	lsls	r3, r3, #23
 8009390:	0ddb      	lsrs	r3, r3, #23
 8009392:	d024      	beq.n	80093de <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009398:	0011      	movs	r1, r2
 800939a:	0018      	movs	r0, r3
 800939c:	f7fe fba4 	bl	8007ae8 <clust2sect>
 80093a0:	0003      	movs	r3, r0
 80093a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80093a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d103      	bne.n	80093b2 <f_open+0x39e>
						res = FR_INT_ERR;
 80093aa:	193b      	adds	r3, r7, r4
 80093ac:	2202      	movs	r2, #2
 80093ae:	701a      	strb	r2, [r3, #0]
 80093b0:	e015      	b.n	80093de <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80093b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093b4:	0a5a      	lsrs	r2, r3, #9
 80093b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093b8:	18d2      	adds	r2, r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	7858      	ldrb	r0, [r3, #1]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3330      	adds	r3, #48	@ 0x30
 80093c6:	0019      	movs	r1, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a1a      	ldr	r2, [r3, #32]
 80093cc:	2301      	movs	r3, #1
 80093ce:	f7fd ff81 	bl	80072d4 <disk_read>
 80093d2:	1e03      	subs	r3, r0, #0
 80093d4:	d003      	beq.n	80093de <f_open+0x3ca>
 80093d6:	235f      	movs	r3, #95	@ 0x5f
 80093d8:	18fb      	adds	r3, r7, r3
 80093da:	2201      	movs	r2, #1
 80093dc:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80093de:	235f      	movs	r3, #95	@ 0x5f
 80093e0:	18fb      	adds	r3, r7, r3
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <f_open+0x3da>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	245f      	movs	r4, #95	@ 0x5f
 80093f2:	193b      	adds	r3, r7, r4
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	0019      	movs	r1, r3
 80093f8:	0010      	movs	r0, r2
 80093fa:	f7fe f8f2 	bl	80075e2 <unlock_fs>
 80093fe:	193b      	adds	r3, r7, r4
 8009400:	781b      	ldrb	r3, [r3, #0]
}
 8009402:	0018      	movs	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	b019      	add	sp, #100	@ 0x64
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800940a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800940a:	b5b0      	push	{r4, r5, r7, lr}
 800940c:	b08e      	sub	sp, #56	@ 0x38
 800940e:	af00      	add	r7, sp, #0
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	60b9      	str	r1, [r7, #8]
 8009414:	607a      	str	r2, [r7, #4]
 8009416:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2537      	movs	r5, #55	@ 0x37
 8009426:	197c      	adds	r4, r7, r5
 8009428:	2214      	movs	r2, #20
 800942a:	18ba      	adds	r2, r7, r2
 800942c:	0011      	movs	r1, r2
 800942e:	0018      	movs	r0, r3
 8009430:	f7ff fd38 	bl	8008ea4 <validate>
 8009434:	0003      	movs	r3, r0
 8009436:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009438:	197b      	adds	r3, r7, r5
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d107      	bne.n	8009450 <f_read+0x46>
 8009440:	197b      	adds	r3, r7, r5
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	7d52      	ldrb	r2, [r2, #21]
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	197b      	adds	r3, r7, r5
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <f_read+0x5c>
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	2437      	movs	r4, #55	@ 0x37
 8009454:	193b      	adds	r3, r7, r4
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	0019      	movs	r1, r3
 800945a:	0010      	movs	r0, r2
 800945c:	f7fe f8c1 	bl	80075e2 <unlock_fs>
 8009460:	193b      	adds	r3, r7, r4
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	e13d      	b.n	80096e2 <f_read+0x2d8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	7d1b      	ldrb	r3, [r3, #20]
 800946a:	001a      	movs	r2, r3
 800946c:	2301      	movs	r3, #1
 800946e:	4013      	ands	r3, r2
 8009470:	d106      	bne.n	8009480 <f_read+0x76>
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	2107      	movs	r1, #7
 8009476:	0018      	movs	r0, r3
 8009478:	f7fe f8b3 	bl	80075e2 <unlock_fs>
 800947c:	2307      	movs	r3, #7
 800947e:	e130      	b.n	80096e2 <f_read+0x2d8>
	remain = fp->obj.objsize - fp->fptr;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	429a      	cmp	r2, r3
 8009492:	d800      	bhi.n	8009496 <f_read+0x8c>
 8009494:	e11b      	b.n	80096ce <f_read+0x2c4>
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800949a:	e118      	b.n	80096ce <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	05db      	lsls	r3, r3, #23
 80094a2:	0ddb      	lsrs	r3, r3, #23
 80094a4:	d000      	beq.n	80094a8 <f_read+0x9e>
 80094a6:	e0e3      	b.n	8009670 <f_read+0x266>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	0a5b      	lsrs	r3, r3, #9
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	8952      	ldrh	r2, [r2, #10]
 80094b2:	3a01      	subs	r2, #1
 80094b4:	4013      	ands	r3, r2
 80094b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d13b      	bne.n	8009536 <f_read+0x12c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d103      	bne.n	80094ce <f_read+0xc4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80094cc:	e016      	b.n	80094fc <f_read+0xf2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <f_read+0xe0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	699a      	ldr	r2, [r3, #24]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	0011      	movs	r1, r2
 80094de:	0018      	movs	r0, r3
 80094e0:	f7fe fde2 	bl	80080a8 <clmt_clust>
 80094e4:	0003      	movs	r3, r0
 80094e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094e8:	e008      	b.n	80094fc <f_read+0xf2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	0019      	movs	r1, r3
 80094f2:	0010      	movs	r0, r2
 80094f4:	f7fe fb14 	bl	8007b20 <get_fat>
 80094f8:	0003      	movs	r3, r0
 80094fa:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d809      	bhi.n	8009516 <f_read+0x10c>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2202      	movs	r2, #2
 8009506:	755a      	strb	r2, [r3, #21]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2102      	movs	r1, #2
 800950c:	0018      	movs	r0, r3
 800950e:	f7fe f868 	bl	80075e2 <unlock_fs>
 8009512:	2302      	movs	r3, #2
 8009514:	e0e5      	b.n	80096e2 <f_read+0x2d8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	3301      	adds	r3, #1
 800951a:	d109      	bne.n	8009530 <f_read+0x126>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2201      	movs	r2, #1
 8009520:	755a      	strb	r2, [r3, #21]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2101      	movs	r1, #1
 8009526:	0018      	movs	r0, r3
 8009528:	f7fe f85b 	bl	80075e2 <unlock_fs>
 800952c:	2301      	movs	r3, #1
 800952e:	e0d8      	b.n	80096e2 <f_read+0x2d8>
				fp->clust = clst;				/* Update current cluster */
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009534:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	0019      	movs	r1, r3
 800953e:	0010      	movs	r0, r2
 8009540:	f7fe fad2 	bl	8007ae8 <clust2sect>
 8009544:	0003      	movs	r3, r0
 8009546:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <f_read+0x158>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2202      	movs	r2, #2
 8009552:	755a      	strb	r2, [r3, #21]
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2102      	movs	r1, #2
 8009558:	0018      	movs	r0, r3
 800955a:	f7fe f842 	bl	80075e2 <unlock_fs>
 800955e:	2302      	movs	r3, #2
 8009560:	e0bf      	b.n	80096e2 <f_read+0x2d8>
			sect += csect;
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	18d3      	adds	r3, r2, r3
 8009568:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	0a5b      	lsrs	r3, r3, #9
 800956e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009572:	2b00      	cmp	r3, #0
 8009574:	d03d      	beq.n	80095f2 <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009576:	69fa      	ldr	r2, [r7, #28]
 8009578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957a:	18d3      	adds	r3, r2, r3
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	8952      	ldrh	r2, [r2, #10]
 8009580:	4293      	cmp	r3, r2
 8009582:	d905      	bls.n	8009590 <f_read+0x186>
					cc = fs->csize - csect;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	895b      	ldrh	r3, [r3, #10]
 8009588:	001a      	movs	r2, r3
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	7858      	ldrb	r0, [r3, #1]
 8009594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800959a:	f7fd fe9b 	bl	80072d4 <disk_read>
 800959e:	1e03      	subs	r3, r0, #0
 80095a0:	d009      	beq.n	80095b6 <f_read+0x1ac>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2201      	movs	r2, #1
 80095a6:	755a      	strb	r2, [r3, #21]
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2101      	movs	r1, #1
 80095ac:	0018      	movs	r0, r3
 80095ae:	f7fe f818 	bl	80075e2 <unlock_fs>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e095      	b.n	80096e2 <f_read+0x2d8>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	7d1b      	ldrb	r3, [r3, #20]
 80095ba:	b25b      	sxtb	r3, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	da14      	bge.n	80095ea <f_read+0x1e0>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6a1a      	ldr	r2, [r3, #32]
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d90d      	bls.n	80095ea <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a1a      	ldr	r2, [r3, #32]
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	025b      	lsls	r3, r3, #9
 80095d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095da:	18d0      	adds	r0, r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3330      	adds	r3, #48	@ 0x30
 80095e0:	2280      	movs	r2, #128	@ 0x80
 80095e2:	0092      	lsls	r2, r2, #2
 80095e4:	0019      	movs	r1, r3
 80095e6:	f7fd ff71 	bl	80074cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	025b      	lsls	r3, r3, #9
 80095ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80095f0:	e059      	b.n	80096a6 <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	69ba      	ldr	r2, [r7, #24]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d036      	beq.n	800966a <f_read+0x260>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	7d1b      	ldrb	r3, [r3, #20]
 8009600:	b25b      	sxtb	r3, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	da1c      	bge.n	8009640 <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	7858      	ldrb	r0, [r3, #1]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3330      	adds	r3, #48	@ 0x30
 800960e:	0019      	movs	r1, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a1a      	ldr	r2, [r3, #32]
 8009614:	2301      	movs	r3, #1
 8009616:	f7fd fe85 	bl	8007324 <disk_write>
 800961a:	1e03      	subs	r3, r0, #0
 800961c:	d009      	beq.n	8009632 <f_read+0x228>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	755a      	strb	r2, [r3, #21]
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	2101      	movs	r1, #1
 8009628:	0018      	movs	r0, r3
 800962a:	f7fd ffda 	bl	80075e2 <unlock_fs>
 800962e:	2301      	movs	r3, #1
 8009630:	e057      	b.n	80096e2 <f_read+0x2d8>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	7d1b      	ldrb	r3, [r3, #20]
 8009636:	227f      	movs	r2, #127	@ 0x7f
 8009638:	4013      	ands	r3, r2
 800963a:	b2da      	uxtb	r2, r3
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	7858      	ldrb	r0, [r3, #1]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	3330      	adds	r3, #48	@ 0x30
 8009648:	0019      	movs	r1, r3
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	2301      	movs	r3, #1
 800964e:	f7fd fe41 	bl	80072d4 <disk_read>
 8009652:	1e03      	subs	r3, r0, #0
 8009654:	d009      	beq.n	800966a <f_read+0x260>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2201      	movs	r2, #1
 800965a:	755a      	strb	r2, [r3, #21]
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2101      	movs	r1, #1
 8009660:	0018      	movs	r0, r3
 8009662:	f7fd ffbe 	bl	80075e2 <unlock_fs>
 8009666:	2301      	movs	r3, #1
 8009668:	e03b      	b.n	80096e2 <f_read+0x2d8>
			}
#endif
			fp->sect = sect;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	69ba      	ldr	r2, [r7, #24]
 800966e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	05db      	lsls	r3, r3, #23
 8009676:	0ddb      	lsrs	r3, r3, #23
 8009678:	2280      	movs	r2, #128	@ 0x80
 800967a:	0092      	lsls	r2, r2, #2
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	429a      	cmp	r2, r3
 8009686:	d901      	bls.n	800968c <f_read+0x282>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3330      	adds	r3, #48	@ 0x30
 8009690:	001a      	movs	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	05db      	lsls	r3, r3, #23
 8009698:	0ddb      	lsrs	r3, r3, #23
 800969a:	18d1      	adds	r1, r2, r3
 800969c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	0018      	movs	r0, r3
 80096a2:	f7fd ff13 	bl	80074cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80096a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096aa:	18d3      	adds	r3, r2, r3
 80096ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	699a      	ldr	r2, [r3, #24]
 80096b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b4:	18d2      	adds	r2, r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	619a      	str	r2, [r3, #24]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c0:	18d2      	adds	r2, r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	601a      	str	r2, [r3, #0]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d000      	beq.n	80096d6 <f_read+0x2cc>
 80096d4:	e6e2      	b.n	800949c <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2100      	movs	r1, #0
 80096da:	0018      	movs	r0, r3
 80096dc:	f7fd ff81 	bl	80075e2 <unlock_fs>
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	0018      	movs	r0, r3
 80096e4:	46bd      	mov	sp, r7
 80096e6:	b00e      	add	sp, #56	@ 0x38
 80096e8:	bdb0      	pop	{r4, r5, r7, pc}

080096ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80096ea:	b5b0      	push	{r4, r5, r7, lr}
 80096ec:	b086      	sub	sp, #24
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2517      	movs	r5, #23
 80096f6:	197c      	adds	r4, r7, r5
 80096f8:	2208      	movs	r2, #8
 80096fa:	18ba      	adds	r2, r7, r2
 80096fc:	0011      	movs	r1, r2
 80096fe:	0018      	movs	r0, r3
 8009700:	f7ff fbd0 	bl	8008ea4 <validate>
 8009704:	0003      	movs	r3, r0
 8009706:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009708:	197b      	adds	r3, r7, r5
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d173      	bne.n	80097f8 <f_sync+0x10e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	7d1b      	ldrb	r3, [r3, #20]
 8009714:	001a      	movs	r2, r3
 8009716:	2340      	movs	r3, #64	@ 0x40
 8009718:	4013      	ands	r3, r2
 800971a:	d06d      	beq.n	80097f8 <f_sync+0x10e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	7d1b      	ldrb	r3, [r3, #20]
 8009720:	b25b      	sxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	da19      	bge.n	800975a <f_sync+0x70>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	7858      	ldrb	r0, [r3, #1]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3330      	adds	r3, #48	@ 0x30
 800972e:	0019      	movs	r1, r3
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a1a      	ldr	r2, [r3, #32]
 8009734:	2301      	movs	r3, #1
 8009736:	f7fd fdf5 	bl	8007324 <disk_write>
 800973a:	1e03      	subs	r3, r0, #0
 800973c:	d006      	beq.n	800974c <f_sync+0x62>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2101      	movs	r1, #1
 8009742:	0018      	movs	r0, r3
 8009744:	f7fd ff4d 	bl	80075e2 <unlock_fs>
 8009748:	2301      	movs	r3, #1
 800974a:	e05f      	b.n	800980c <f_sync+0x122>
				fp->flag &= (BYTE)~FA_DIRTY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	7d1b      	ldrb	r3, [r3, #20]
 8009750:	227f      	movs	r2, #127	@ 0x7f
 8009752:	4013      	ands	r3, r2
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800975a:	f7fc ff8d 	bl	8006678 <get_fattime>
 800975e:	0003      	movs	r3, r0
 8009760:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009768:	2517      	movs	r5, #23
 800976a:	197c      	adds	r4, r7, r5
 800976c:	0019      	movs	r1, r3
 800976e:	0010      	movs	r0, r2
 8009770:	f7fe f908 	bl	8007984 <move_window>
 8009774:	0003      	movs	r3, r0
 8009776:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8009778:	002c      	movs	r4, r5
 800977a:	193b      	adds	r3, r7, r4
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d13a      	bne.n	80097f8 <f_sync+0x10e>
					dir = fp->dir_ptr;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009786:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	330b      	adds	r3, #11
 800978c:	781a      	ldrb	r2, [r3, #0]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	330b      	adds	r3, #11
 8009792:	2120      	movs	r1, #32
 8009794:	430a      	orrs	r2, r1
 8009796:	b2d2      	uxtb	r2, r2
 8009798:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6818      	ldr	r0, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689a      	ldr	r2, [r3, #8]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	0019      	movs	r1, r3
 80097a6:	f7fe fe72 	bl	800848e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	331c      	adds	r3, #28
 80097ae:	001a      	movs	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	0019      	movs	r1, r3
 80097b6:	0010      	movs	r0, r2
 80097b8:	f7fd fe5e 	bl	8007478 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3316      	adds	r3, #22
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	0011      	movs	r1, r2
 80097c4:	0018      	movs	r0, r3
 80097c6:	f7fd fe57 	bl	8007478 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	3312      	adds	r3, #18
 80097ce:	2100      	movs	r1, #0
 80097d0:	0018      	movs	r0, r3
 80097d2:	f7fd fe33 	bl	800743c <st_word>
					fs->wflag = 1;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2201      	movs	r2, #1
 80097da:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	193c      	adds	r4, r7, r4
 80097e0:	0018      	movs	r0, r3
 80097e2:	f7fe f905 	bl	80079f0 <sync_fs>
 80097e6:	0003      	movs	r3, r0
 80097e8:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7d1b      	ldrb	r3, [r3, #20]
 80097ee:	2240      	movs	r2, #64	@ 0x40
 80097f0:	4393      	bics	r3, r2
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	2417      	movs	r4, #23
 80097fc:	193b      	adds	r3, r7, r4
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	0019      	movs	r1, r3
 8009802:	0010      	movs	r0, r2
 8009804:	f7fd feed 	bl	80075e2 <unlock_fs>
 8009808:	193b      	adds	r3, r7, r4
 800980a:	781b      	ldrb	r3, [r3, #0]
}
 800980c:	0018      	movs	r0, r3
 800980e:	46bd      	mov	sp, r7
 8009810:	b006      	add	sp, #24
 8009812:	bdb0      	pop	{r4, r5, r7, pc}

08009814 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009814:	b5b0      	push	{r4, r5, r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800981c:	250f      	movs	r5, #15
 800981e:	197c      	adds	r4, r7, r5
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	0018      	movs	r0, r3
 8009824:	f7ff ff61 	bl	80096ea <f_sync>
 8009828:	0003      	movs	r3, r0
 800982a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800982c:	197b      	adds	r3, r7, r5
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d121      	bne.n	8009878 <f_close+0x64>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	197c      	adds	r4, r7, r5
 8009838:	2208      	movs	r2, #8
 800983a:	18ba      	adds	r2, r7, r2
 800983c:	0011      	movs	r1, r2
 800983e:	0018      	movs	r0, r3
 8009840:	f7ff fb30 	bl	8008ea4 <validate>
 8009844:	0003      	movs	r3, r0
 8009846:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8009848:	197b      	adds	r3, r7, r5
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d113      	bne.n	8009878 <f_close+0x64>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	197c      	adds	r4, r7, r5
 8009856:	0018      	movs	r0, r3
 8009858:	f7fd ffe2 	bl	8007820 <dec_lock>
 800985c:	0003      	movs	r3, r0
 800985e:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8009860:	197b      	adds	r3, r7, r5
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d102      	bne.n	800986e <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2100      	movs	r1, #0
 8009872:	0018      	movs	r0, r3
 8009874:	f7fd feb5 	bl	80075e2 <unlock_fs>
#endif
		}
	}
	return res;
 8009878:	230f      	movs	r3, #15
 800987a:	18fb      	adds	r3, r7, r3
 800987c:	781b      	ldrb	r3, [r3, #0]
}
 800987e:	0018      	movs	r0, r3
 8009880:	46bd      	mov	sp, r7
 8009882:	b004      	add	sp, #16
 8009884:	bdb0      	pop	{r4, r5, r7, pc}

08009886 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009886:	b5b0      	push	{r4, r5, r7, lr}
 8009888:	b092      	sub	sp, #72	@ 0x48
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009892:	2547      	movs	r5, #71	@ 0x47
 8009894:	197c      	adds	r4, r7, r5
 8009896:	2328      	movs	r3, #40	@ 0x28
 8009898:	18f9      	adds	r1, r7, r3
 800989a:	230c      	movs	r3, #12
 800989c:	18fb      	adds	r3, r7, r3
 800989e:	2200      	movs	r2, #0
 80098a0:	0018      	movs	r0, r3
 80098a2:	f7ff f887 	bl	80089b4 <find_volume>
 80098a6:	0003      	movs	r3, r0
 80098a8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80098aa:	197b      	adds	r3, r7, r5
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d000      	beq.n	80098b4 <f_getfree+0x2e>
 80098b2:	e09e      	b.n	80099f2 <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 80098b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80098ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098bc:	695a      	ldr	r2, [r3, #20]
 80098be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	3b02      	subs	r3, #2
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d804      	bhi.n	80098d2 <f_getfree+0x4c>
			*nclst = fs->free_clst;
 80098c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ca:	695a      	ldr	r2, [r3, #20]
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	e08f      	b.n	80099f2 <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d12d      	bne.n	800993a <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 80098de:	2302      	movs	r3, #2
 80098e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098e4:	2314      	movs	r3, #20
 80098e6:	18fb      	adds	r3, r7, r3
 80098e8:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 80098ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80098ec:	2314      	movs	r3, #20
 80098ee:	18fb      	adds	r3, r7, r3
 80098f0:	0011      	movs	r1, r2
 80098f2:	0018      	movs	r0, r3
 80098f4:	f7fe f914 	bl	8007b20 <get_fat>
 80098f8:	0003      	movs	r3, r0
 80098fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80098fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fe:	3301      	adds	r3, #1
 8009900:	d104      	bne.n	800990c <f_getfree+0x86>
 8009902:	2347      	movs	r3, #71	@ 0x47
 8009904:	18fb      	adds	r3, r7, r3
 8009906:	2201      	movs	r2, #1
 8009908:	701a      	strb	r2, [r3, #0]
 800990a:	e065      	b.n	80099d8 <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800990c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800990e:	2b01      	cmp	r3, #1
 8009910:	d104      	bne.n	800991c <f_getfree+0x96>
 8009912:	2347      	movs	r3, #71	@ 0x47
 8009914:	18fb      	adds	r3, r7, r3
 8009916:	2202      	movs	r2, #2
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	e05d      	b.n	80099d8 <f_getfree+0x152>
					if (stat == 0) nfree++;
 800991c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <f_getfree+0xa2>
 8009922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009924:	3301      	adds	r3, #1
 8009926:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8009928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800992a:	3301      	adds	r3, #1
 800992c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800992e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009934:	429a      	cmp	r2, r3
 8009936:	d3d8      	bcc.n	80098ea <f_getfree+0x64>
 8009938:	e04e      	b.n	80099d8 <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	699b      	ldr	r3, [r3, #24]
 800993e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009944:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	637b      	str	r3, [r7, #52]	@ 0x34
 800994a:	2300      	movs	r3, #0
 800994c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800994e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009950:	2b00      	cmp	r3, #0
 8009952:	d114      	bne.n	800997e <f_getfree+0xf8>
							res = move_window(fs, sect++);
 8009954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009958:	1c5a      	adds	r2, r3, #1
 800995a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800995c:	2547      	movs	r5, #71	@ 0x47
 800995e:	197c      	adds	r4, r7, r5
 8009960:	0019      	movs	r1, r3
 8009962:	f7fe f80f 	bl	8007984 <move_window>
 8009966:	0003      	movs	r3, r0
 8009968:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 800996a:	197b      	adds	r3, r7, r5
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d131      	bne.n	80099d6 <f_getfree+0x150>
							p = fs->win;
 8009972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009974:	3334      	adds	r3, #52	@ 0x34
 8009976:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8009978:	2380      	movs	r3, #128	@ 0x80
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d10f      	bne.n	80099a6 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 8009986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009988:	0018      	movs	r0, r3
 800998a:	f7fd fd1b 	bl	80073c4 <ld_word>
 800998e:	1e03      	subs	r3, r0, #0
 8009990:	d102      	bne.n	8009998 <f_getfree+0x112>
 8009992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009994:	3301      	adds	r3, #1
 8009996:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999a:	3302      	adds	r3, #2
 800999c:	633b      	str	r3, [r7, #48]	@ 0x30
 800999e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a0:	3b02      	subs	r3, #2
 80099a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099a4:	e010      	b.n	80099c8 <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80099a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a8:	0018      	movs	r0, r3
 80099aa:	f7fd fd26 	bl	80073fa <ld_dword>
 80099ae:	0003      	movs	r3, r0
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	091b      	lsrs	r3, r3, #4
 80099b4:	d102      	bne.n	80099bc <f_getfree+0x136>
 80099b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099b8:	3301      	adds	r3, #1
 80099ba:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80099bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099be:	3304      	adds	r3, #4
 80099c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80099c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c4:	3b04      	subs	r3, #4
 80099c6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80099c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099ca:	3b01      	subs	r3, #1
 80099cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1bc      	bne.n	800994e <f_getfree+0xc8>
 80099d4:	e000      	b.n	80099d8 <f_getfree+0x152>
							if (res != FR_OK) break;
 80099d6:	46c0      	nop			@ (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099dc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099e2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	791a      	ldrb	r2, [r3, #4]
 80099e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ea:	2101      	movs	r1, #1
 80099ec:	430a      	orrs	r2, r1
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80099f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099f4:	2447      	movs	r4, #71	@ 0x47
 80099f6:	193b      	adds	r3, r7, r4
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	0019      	movs	r1, r3
 80099fc:	0010      	movs	r0, r2
 80099fe:	f7fd fdf0 	bl	80075e2 <unlock_fs>
 8009a02:	193b      	adds	r3, r7, r4
 8009a04:	781b      	ldrb	r3, [r3, #0]
}
 8009a06:	0018      	movs	r0, r3
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	b012      	add	sp, #72	@ 0x48
 8009a0c:	bdb0      	pop	{r4, r5, r7, pc}

08009a0e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009a0e:	b590      	push	{r4, r7, lr}
 8009a10:	b089      	sub	sp, #36	@ 0x24
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009a22:	e022      	b.n	8009a6a <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009a24:	2310      	movs	r3, #16
 8009a26:	18fb      	adds	r3, r7, r3
 8009a28:	2414      	movs	r4, #20
 8009a2a:	1939      	adds	r1, r7, r4
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f7ff fceb 	bl	800940a <f_read>
		if (rc != 1) break;
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d11d      	bne.n	8009a76 <f_gets+0x68>
		c = s[0];
 8009a3a:	2117      	movs	r1, #23
 8009a3c:	187b      	adds	r3, r7, r1
 8009a3e:	193a      	adds	r2, r7, r4
 8009a40:	7812      	ldrb	r2, [r2, #0]
 8009a42:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009a44:	187b      	adds	r3, r7, r1
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	2b0d      	cmp	r3, #13
 8009a4a:	d00d      	beq.n	8009a68 <f_gets+0x5a>
		*p++ = c;
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	61ba      	str	r2, [r7, #24]
 8009a52:	187a      	adds	r2, r7, r1
 8009a54:	7812      	ldrb	r2, [r2, #0]
 8009a56:	701a      	strb	r2, [r3, #0]
		n++;
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009a5e:	187b      	adds	r3, r7, r1
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b0a      	cmp	r3, #10
 8009a64:	d009      	beq.n	8009a7a <f_gets+0x6c>
 8009a66:	e000      	b.n	8009a6a <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009a68:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	69fa      	ldr	r2, [r7, #28]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	dbd7      	blt.n	8009a24 <f_gets+0x16>
 8009a74:	e002      	b.n	8009a7c <f_gets+0x6e>
		if (rc != 1) break;
 8009a76:	46c0      	nop			@ (mov r8, r8)
 8009a78:	e000      	b.n	8009a7c <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8009a7a:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <f_gets+0x7e>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	e000      	b.n	8009a8e <f_gets+0x80>
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	0018      	movs	r0, r3
 8009a90:	46bd      	mov	sp, r7
 8009a92:	b009      	add	sp, #36	@ 0x24
 8009a94:	bd90      	pop	{r4, r7, pc}
	...

08009a98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a98:	b590      	push	{r4, r7, lr}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	1dfb      	adds	r3, r7, #7
 8009aa4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8009aa6:	2417      	movs	r4, #23
 8009aa8:	193b      	adds	r3, r7, r4
 8009aaa:	2201      	movs	r2, #1
 8009aac:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8009aae:	2016      	movs	r0, #22
 8009ab0:	183b      	adds	r3, r7, r0
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8009ab6:	4b21      	ldr	r3, [pc, #132]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009ab8:	7a5b      	ldrb	r3, [r3, #9]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d136      	bne.n	8009b2e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009ac2:	7a5b      	ldrb	r3, [r3, #9]
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	001a      	movs	r2, r3
 8009ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009aca:	2100      	movs	r1, #0
 8009acc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009ace:	4b1b      	ldr	r3, [pc, #108]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009ad0:	7a5b      	ldrb	r3, [r3, #9]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	4a19      	ldr	r2, [pc, #100]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	18d3      	adds	r3, r2, r3
 8009ada:	3304      	adds	r3, #4
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8009ae0:	4b16      	ldr	r3, [pc, #88]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009ae2:	7a5b      	ldrb	r3, [r3, #9]
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	001a      	movs	r2, r3
 8009ae8:	4b14      	ldr	r3, [pc, #80]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009aea:	189b      	adds	r3, r3, r2
 8009aec:	1dfa      	adds	r2, r7, #7
 8009aee:	7812      	ldrb	r2, [r2, #0]
 8009af0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009af2:	4b12      	ldr	r3, [pc, #72]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009af4:	7a5b      	ldrb	r3, [r3, #9]
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	b2d1      	uxtb	r1, r2
 8009afc:	4a0f      	ldr	r2, [pc, #60]	@ (8009b3c <FATFS_LinkDriverEx+0xa4>)
 8009afe:	7251      	strb	r1, [r2, #9]
 8009b00:	183a      	adds	r2, r7, r0
 8009b02:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8009b04:	183b      	adds	r3, r7, r0
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	3330      	adds	r3, #48	@ 0x30
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	3301      	adds	r3, #1
 8009b14:	223a      	movs	r2, #58	@ 0x3a
 8009b16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	3302      	adds	r3, #2
 8009b1c:	222f      	movs	r2, #47	@ 0x2f
 8009b1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	3303      	adds	r3, #3
 8009b24:	2200      	movs	r2, #0
 8009b26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b28:	193b      	adds	r3, r7, r4
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009b2e:	2317      	movs	r3, #23
 8009b30:	18fb      	adds	r3, r7, r3
 8009b32:	781b      	ldrb	r3, [r3, #0]
}
 8009b34:	0018      	movs	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b007      	add	sp, #28
 8009b3a:	bd90      	pop	{r4, r7, pc}
 8009b3c:	20000b50 	.word	0x20000b50

08009b40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	0018      	movs	r0, r3
 8009b52:	f7ff ffa1 	bl	8009a98 <FATFS_LinkDriverEx>
 8009b56:	0003      	movs	r3, r0
}
 8009b58:	0018      	movs	r0, r3
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b002      	add	sp, #8
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	0002      	movs	r2, r0
 8009b68:	6039      	str	r1, [r7, #0]
 8009b6a:	1dfb      	adds	r3, r7, #7
 8009b6c:	701a      	strb	r2, [r3, #0]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2101      	movs	r1, #1
 8009b72:	2001      	movs	r0, #1
 8009b74:	f000 f9c2 	bl	8009efc <osSemaphoreNew>
 8009b78:	0002      	movs	r2, r0
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	1e5a      	subs	r2, r3, #1
 8009b84:	4193      	sbcs	r3, r2
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	60fb      	str	r3, [r7, #12]

    return ret;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
}
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	b004      	add	sp, #16
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	f000 fad0 	bl	800a144 <osSemaphoreDelete>
#endif
    return 1;
 8009ba4:	2301      	movs	r3, #1
}
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	b002      	add	sp, #8
 8009bac:	bd80      	pop	{r7, pc}

08009bae <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8009bba:	23fa      	movs	r3, #250	@ 0xfa
 8009bbc:	009a      	lsls	r2, r3, #2
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	0011      	movs	r1, r2
 8009bc2:	0018      	movs	r0, r3
 8009bc4:	f000 fa2e 	bl	800a024 <osSemaphoreAcquire>
 8009bc8:	1e03      	subs	r3, r0, #0
 8009bca:	d101      	bne.n	8009bd0 <ff_req_grant+0x22>
#endif

#endif
  {
    ret = 1;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
}
 8009bd2:	0018      	movs	r0, r3
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	b004      	add	sp, #16
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b082      	sub	sp, #8
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	0018      	movs	r0, r3
 8009be6:	f000 fa6d 	bl	800a0c4 <osSemaphoreRelease>
#endif
}
 8009bea:	46c0      	nop			@ (mov r8, r8)
 8009bec:	46bd      	mov	sp, r7
 8009bee:	b002      	add	sp, #8
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <__NVIC_SetPriority>:
{
 8009bf4:	b590      	push	{r4, r7, lr}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	0002      	movs	r2, r0
 8009bfc:	6039      	str	r1, [r7, #0]
 8009bfe:	1dfb      	adds	r3, r7, #7
 8009c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009c02:	1dfb      	adds	r3, r7, #7
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c08:	d828      	bhi.n	8009c5c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8009cc8 <__NVIC_SetPriority+0xd4>)
 8009c0c:	1dfb      	adds	r3, r7, #7
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	b25b      	sxtb	r3, r3
 8009c12:	089b      	lsrs	r3, r3, #2
 8009c14:	33c0      	adds	r3, #192	@ 0xc0
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	589b      	ldr	r3, [r3, r2]
 8009c1a:	1dfa      	adds	r2, r7, #7
 8009c1c:	7812      	ldrb	r2, [r2, #0]
 8009c1e:	0011      	movs	r1, r2
 8009c20:	2203      	movs	r2, #3
 8009c22:	400a      	ands	r2, r1
 8009c24:	00d2      	lsls	r2, r2, #3
 8009c26:	21ff      	movs	r1, #255	@ 0xff
 8009c28:	4091      	lsls	r1, r2
 8009c2a:	000a      	movs	r2, r1
 8009c2c:	43d2      	mvns	r2, r2
 8009c2e:	401a      	ands	r2, r3
 8009c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	019b      	lsls	r3, r3, #6
 8009c36:	22ff      	movs	r2, #255	@ 0xff
 8009c38:	401a      	ands	r2, r3
 8009c3a:	1dfb      	adds	r3, r7, #7
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	0018      	movs	r0, r3
 8009c40:	2303      	movs	r3, #3
 8009c42:	4003      	ands	r3, r0
 8009c44:	00db      	lsls	r3, r3, #3
 8009c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009c48:	481f      	ldr	r0, [pc, #124]	@ (8009cc8 <__NVIC_SetPriority+0xd4>)
 8009c4a:	1dfb      	adds	r3, r7, #7
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	b25b      	sxtb	r3, r3
 8009c50:	089b      	lsrs	r3, r3, #2
 8009c52:	430a      	orrs	r2, r1
 8009c54:	33c0      	adds	r3, #192	@ 0xc0
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	501a      	str	r2, [r3, r0]
}
 8009c5a:	e031      	b.n	8009cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8009ccc <__NVIC_SetPriority+0xd8>)
 8009c5e:	1dfb      	adds	r3, r7, #7
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	0019      	movs	r1, r3
 8009c64:	230f      	movs	r3, #15
 8009c66:	400b      	ands	r3, r1
 8009c68:	3b08      	subs	r3, #8
 8009c6a:	089b      	lsrs	r3, r3, #2
 8009c6c:	3306      	adds	r3, #6
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	18d3      	adds	r3, r2, r3
 8009c72:	3304      	adds	r3, #4
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	1dfa      	adds	r2, r7, #7
 8009c78:	7812      	ldrb	r2, [r2, #0]
 8009c7a:	0011      	movs	r1, r2
 8009c7c:	2203      	movs	r2, #3
 8009c7e:	400a      	ands	r2, r1
 8009c80:	00d2      	lsls	r2, r2, #3
 8009c82:	21ff      	movs	r1, #255	@ 0xff
 8009c84:	4091      	lsls	r1, r2
 8009c86:	000a      	movs	r2, r1
 8009c88:	43d2      	mvns	r2, r2
 8009c8a:	401a      	ands	r2, r3
 8009c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	019b      	lsls	r3, r3, #6
 8009c92:	22ff      	movs	r2, #255	@ 0xff
 8009c94:	401a      	ands	r2, r3
 8009c96:	1dfb      	adds	r3, r7, #7
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	0018      	movs	r0, r3
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	4003      	ands	r3, r0
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009ca4:	4809      	ldr	r0, [pc, #36]	@ (8009ccc <__NVIC_SetPriority+0xd8>)
 8009ca6:	1dfb      	adds	r3, r7, #7
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	001c      	movs	r4, r3
 8009cac:	230f      	movs	r3, #15
 8009cae:	4023      	ands	r3, r4
 8009cb0:	3b08      	subs	r3, #8
 8009cb2:	089b      	lsrs	r3, r3, #2
 8009cb4:	430a      	orrs	r2, r1
 8009cb6:	3306      	adds	r3, #6
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	18c3      	adds	r3, r0, r3
 8009cbc:	3304      	adds	r3, #4
 8009cbe:	601a      	str	r2, [r3, #0]
}
 8009cc0:	46c0      	nop			@ (mov r8, r8)
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	b003      	add	sp, #12
 8009cc6:	bd90      	pop	{r4, r7, pc}
 8009cc8:	e000e100 	.word	0xe000e100
 8009ccc:	e000ed00 	.word	0xe000ed00

08009cd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009cd4:	4b05      	ldr	r3, [pc, #20]	@ (8009cec <SysTick_Handler+0x1c>)
 8009cd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009cd8:	f001 ffae 	bl	800bc38 <xTaskGetSchedulerState>
 8009cdc:	0003      	movs	r3, r0
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d001      	beq.n	8009ce6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009ce2:	f002 fd79 	bl	800c7d8 <xPortSysTickHandler>
  }
}
 8009ce6:	46c0      	nop			@ (mov r8, r8)
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	e000e010 	.word	0xe000e010

08009cf0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009cf4:	2305      	movs	r3, #5
 8009cf6:	425b      	negs	r3, r3
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	f7ff ff7a 	bl	8009bf4 <__NVIC_SetPriority>
#endif
}
 8009d00:	46c0      	nop			@ (mov r8, r8)
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
	...

08009d08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d0e:	f3ef 8305 	mrs	r3, IPSR
 8009d12:	603b      	str	r3, [r7, #0]
  return(result);
 8009d14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d1a:	2306      	movs	r3, #6
 8009d1c:	425b      	negs	r3, r3
 8009d1e:	607b      	str	r3, [r7, #4]
 8009d20:	e00c      	b.n	8009d3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d22:	4b09      	ldr	r3, [pc, #36]	@ (8009d48 <osKernelInitialize+0x40>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d105      	bne.n	8009d36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d2a:	4b07      	ldr	r3, [pc, #28]	@ (8009d48 <osKernelInitialize+0x40>)
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	607b      	str	r3, [r7, #4]
 8009d34:	e002      	b.n	8009d3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009d36:	2301      	movs	r3, #1
 8009d38:	425b      	negs	r3, r3
 8009d3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d3c:	687b      	ldr	r3, [r7, #4]
}
 8009d3e:	0018      	movs	r0, r3
 8009d40:	46bd      	mov	sp, r7
 8009d42:	b002      	add	sp, #8
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	46c0      	nop			@ (mov r8, r8)
 8009d48:	20000b5c 	.word	0x20000b5c

08009d4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d52:	f3ef 8305 	mrs	r3, IPSR
 8009d56:	603b      	str	r3, [r7, #0]
  return(result);
 8009d58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009d5e:	2306      	movs	r3, #6
 8009d60:	425b      	negs	r3, r3
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	e010      	b.n	8009d88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d66:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <osKernelStart+0x48>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d109      	bne.n	8009d82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d6e:	f7ff ffbf 	bl	8009cf0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d72:	4b08      	ldr	r3, [pc, #32]	@ (8009d94 <osKernelStart+0x48>)
 8009d74:	2202      	movs	r2, #2
 8009d76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d78:	f001 fb6a 	bl	800b450 <vTaskStartScheduler>
      stat = osOK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	607b      	str	r3, [r7, #4]
 8009d80:	e002      	b.n	8009d88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d82:	2301      	movs	r3, #1
 8009d84:	425b      	negs	r3, r3
 8009d86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d88:	687b      	ldr	r3, [r7, #4]
}
 8009d8a:	0018      	movs	r0, r3
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	b002      	add	sp, #8
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	46c0      	nop			@ (mov r8, r8)
 8009d94:	20000b5c 	.word	0x20000b5c

08009d98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d98:	b5b0      	push	{r4, r5, r7, lr}
 8009d9a:	b08e      	sub	sp, #56	@ 0x38
 8009d9c:	af04      	add	r7, sp, #16
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009da4:	2300      	movs	r3, #0
 8009da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009da8:	f3ef 8305 	mrs	r3, IPSR
 8009dac:	617b      	str	r3, [r7, #20]
  return(result);
 8009dae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d000      	beq.n	8009db6 <osThreadNew+0x1e>
 8009db4:	e081      	b.n	8009eba <osThreadNew+0x122>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d100      	bne.n	8009dbe <osThreadNew+0x26>
 8009dbc:	e07d      	b.n	8009eba <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8009dbe:	2380      	movs	r3, #128	@ 0x80
 8009dc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009dc2:	2318      	movs	r3, #24
 8009dc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	425b      	negs	r3, r3
 8009dce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d044      	beq.n	8009e60 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <osThreadNew+0x4c>
        name = attr->name;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d007      	beq.n	8009e08 <osThreadNew+0x70>
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	2b38      	cmp	r3, #56	@ 0x38
 8009dfc:	d804      	bhi.n	8009e08 <osThreadNew+0x70>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	4013      	ands	r3, r2
 8009e06:	d001      	beq.n	8009e0c <osThreadNew+0x74>
        return (NULL);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	e057      	b.n	8009ebc <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d003      	beq.n	8009e1c <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	089b      	lsrs	r3, r3, #2
 8009e1a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00e      	beq.n	8009e42 <osThreadNew+0xaa>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2ba7      	cmp	r3, #167	@ 0xa7
 8009e2a:	d90a      	bls.n	8009e42 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d006      	beq.n	8009e42 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <osThreadNew+0xaa>
        mem = 1;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	61bb      	str	r3, [r7, #24]
 8009e40:	e010      	b.n	8009e64 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10c      	bne.n	8009e64 <osThreadNew+0xcc>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d108      	bne.n	8009e64 <osThreadNew+0xcc>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d104      	bne.n	8009e64 <osThreadNew+0xcc>
          mem = 0;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	61bb      	str	r3, [r7, #24]
 8009e5e:	e001      	b.n	8009e64 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d112      	bne.n	8009e90 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e72:	68bd      	ldr	r5, [r7, #8]
 8009e74:	6a3c      	ldr	r4, [r7, #32]
 8009e76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	9302      	str	r3, [sp, #8]
 8009e7c:	9201      	str	r2, [sp, #4]
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	002b      	movs	r3, r5
 8009e84:	0022      	movs	r2, r4
 8009e86:	f001 f920 	bl	800b0ca <xTaskCreateStatic>
 8009e8a:	0003      	movs	r3, r0
 8009e8c:	613b      	str	r3, [r7, #16]
 8009e8e:	e014      	b.n	8009eba <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d111      	bne.n	8009eba <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	68bc      	ldr	r4, [r7, #8]
 8009e9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	18fb      	adds	r3, r7, r3
 8009ea4:	9301      	str	r3, [sp, #4]
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	0023      	movs	r3, r4
 8009eac:	f001 f954 	bl	800b158 <xTaskCreate>
 8009eb0:	0003      	movs	r3, r0
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d001      	beq.n	8009eba <osThreadNew+0x122>
            hTask = NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009eba:	693b      	ldr	r3, [r7, #16]
}
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	b00a      	add	sp, #40	@ 0x28
 8009ec2:	bdb0      	pop	{r4, r5, r7, pc}

08009ec4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ecc:	f3ef 8305 	mrs	r3, IPSR
 8009ed0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ed2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d003      	beq.n	8009ee0 <osDelay+0x1c>
    stat = osErrorISR;
 8009ed8:	2306      	movs	r3, #6
 8009eda:	425b      	negs	r3, r3
 8009edc:	60fb      	str	r3, [r7, #12]
 8009ede:	e008      	b.n	8009ef2 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d003      	beq.n	8009ef2 <osDelay+0x2e>
      vTaskDelay(ticks);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	0018      	movs	r0, r3
 8009eee:	f001 fa89 	bl	800b404 <vTaskDelay>
    }
  }

  return (stat);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
}
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	b004      	add	sp, #16
 8009efa:	bd80      	pop	{r7, pc}

08009efc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08a      	sub	sp, #40	@ 0x28
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f0c:	f3ef 8305 	mrs	r3, IPSR
 8009f10:	613b      	str	r3, [r7, #16]
  return(result);
 8009f12:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d000      	beq.n	8009f1a <osSemaphoreNew+0x1e>
 8009f18:	e07f      	b.n	800a01a <osSemaphoreNew+0x11e>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d100      	bne.n	8009f22 <osSemaphoreNew+0x26>
 8009f20:	e07b      	b.n	800a01a <osSemaphoreNew+0x11e>
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d900      	bls.n	8009f2c <osSemaphoreNew+0x30>
 8009f2a:	e076      	b.n	800a01a <osSemaphoreNew+0x11e>
    mem = -1;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	425b      	negs	r3, r3
 8009f30:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d015      	beq.n	8009f64 <osSemaphoreNew+0x68>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d006      	beq.n	8009f4e <osSemaphoreNew+0x52>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	2b4f      	cmp	r3, #79	@ 0x4f
 8009f46:	d902      	bls.n	8009f4e <osSemaphoreNew+0x52>
        mem = 1;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	61bb      	str	r3, [r7, #24]
 8009f4c:	e00c      	b.n	8009f68 <osSemaphoreNew+0x6c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d108      	bne.n	8009f68 <osSemaphoreNew+0x6c>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d104      	bne.n	8009f68 <osSemaphoreNew+0x6c>
          mem = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61bb      	str	r3, [r7, #24]
 8009f62:	e001      	b.n	8009f68 <osSemaphoreNew+0x6c>
        }
      }
    }
    else {
      mem = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009f68:	69bb      	ldr	r3, [r7, #24]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	d055      	beq.n	800a01a <osSemaphoreNew+0x11e>
      if (max_count == 1U) {
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d12b      	bne.n	8009fcc <osSemaphoreNew+0xd0>
        if (mem == 1) {
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d10b      	bne.n	8009f92 <osSemaphoreNew+0x96>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	2203      	movs	r2, #3
 8009f80:	9200      	str	r2, [sp, #0]
 8009f82:	2200      	movs	r2, #0
 8009f84:	2100      	movs	r1, #0
 8009f86:	2001      	movs	r0, #1
 8009f88:	f000 fa30 	bl	800a3ec <xQueueGenericCreateStatic>
 8009f8c:	0003      	movs	r3, r0
 8009f8e:	61fb      	str	r3, [r7, #28]
 8009f90:	e006      	b.n	8009fa0 <osSemaphoreNew+0xa4>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009f92:	2203      	movs	r2, #3
 8009f94:	2100      	movs	r1, #0
 8009f96:	2001      	movs	r0, #1
 8009f98:	f000 fa79 	bl	800a48e <xQueueGenericCreate>
 8009f9c:	0003      	movs	r3, r0
 8009f9e:	61fb      	str	r3, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d027      	beq.n	8009ff6 <osSemaphoreNew+0xfa>
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d024      	beq.n	8009ff6 <osSemaphoreNew+0xfa>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009fac:	69f8      	ldr	r0, [r7, #28]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	f000 fb12 	bl	800a5dc <xQueueGenericSend>
 8009fb8:	0003      	movs	r3, r0
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d01b      	beq.n	8009ff6 <osSemaphoreNew+0xfa>
            vSemaphoreDelete (hSemaphore);
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	0018      	movs	r0, r3
 8009fc2:	f000 fead 	bl	800ad20 <vQueueDelete>
            hSemaphore = NULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61fb      	str	r3, [r7, #28]
 8009fca:	e014      	b.n	8009ff6 <osSemaphoreNew+0xfa>
          }
        }
      }
      else {
        if (mem == 1) {
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d109      	bne.n	8009fe6 <osSemaphoreNew+0xea>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	0018      	movs	r0, r3
 8009fdc:	f000 fab1 	bl	800a542 <xQueueCreateCountingSemaphoreStatic>
 8009fe0:	0003      	movs	r3, r0
 8009fe2:	61fb      	str	r3, [r7, #28]
 8009fe4:	e007      	b.n	8009ff6 <osSemaphoreNew+0xfa>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009fe6:	68ba      	ldr	r2, [r7, #8]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	0011      	movs	r1, r2
 8009fec:	0018      	movs	r0, r3
 8009fee:	f000 fad0 	bl	800a592 <xQueueCreateCountingSemaphore>
 8009ff2:	0003      	movs	r3, r0
 8009ff4:	61fb      	str	r3, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00e      	beq.n	800a01a <osSemaphoreNew+0x11e>
        if (attr != NULL) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <osSemaphoreNew+0x10e>
          name = attr->name;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	617b      	str	r3, [r7, #20]
 800a008:	e001      	b.n	800a00e <osSemaphoreNew+0x112>
        } else {
          name = NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	0011      	movs	r1, r2
 800a014:	0018      	movs	r0, r3
 800a016:	f000 ffd3 	bl	800afc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a01a:	69fb      	ldr	r3, [r7, #28]
}
 800a01c:	0018      	movs	r0, r3
 800a01e:	46bd      	mov	sp, r7
 800a020:	b008      	add	sp, #32
 800a022:	bd80      	pop	{r7, pc}

0800a024 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d103      	bne.n	800a044 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a03c:	2304      	movs	r3, #4
 800a03e:	425b      	negs	r3, r3
 800a040:	617b      	str	r3, [r7, #20]
 800a042:	e037      	b.n	800a0b4 <osSemaphoreAcquire+0x90>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a044:	f3ef 8305 	mrs	r3, IPSR
 800a048:	60fb      	str	r3, [r7, #12]
  return(result);
 800a04a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d01e      	beq.n	800a08e <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a056:	2304      	movs	r3, #4
 800a058:	425b      	negs	r3, r3
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	e02a      	b.n	800a0b4 <osSemaphoreAcquire+0x90>
    }
    else {
      yield = pdFALSE;
 800a05e:	2300      	movs	r3, #0
 800a060:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a062:	2308      	movs	r3, #8
 800a064:	18fa      	adds	r2, r7, r3
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2100      	movs	r1, #0
 800a06a:	0018      	movs	r0, r3
 800a06c:	f000 fdf3 	bl	800ac56 <xQueueReceiveFromISR>
 800a070:	0003      	movs	r3, r0
 800a072:	2b01      	cmp	r3, #1
 800a074:	d003      	beq.n	800a07e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a076:	2303      	movs	r3, #3
 800a078:	425b      	negs	r3, r3
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	e01a      	b.n	800a0b4 <osSemaphoreAcquire+0x90>
      } else {
        portYIELD_FROM_ISR (yield);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d017      	beq.n	800a0b4 <osSemaphoreAcquire+0x90>
 800a084:	4b0e      	ldr	r3, [pc, #56]	@ (800a0c0 <osSemaphoreAcquire+0x9c>)
 800a086:	2280      	movs	r2, #128	@ 0x80
 800a088:	0552      	lsls	r2, r2, #21
 800a08a:	601a      	str	r2, [r3, #0]
 800a08c:	e012      	b.n	800a0b4 <osSemaphoreAcquire+0x90>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a08e:	683a      	ldr	r2, [r7, #0]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	0011      	movs	r1, r2
 800a094:	0018      	movs	r0, r3
 800a096:	f000 fd00 	bl	800aa9a <xQueueSemaphoreTake>
 800a09a:	0003      	movs	r3, r0
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d009      	beq.n	800a0b4 <osSemaphoreAcquire+0x90>
      if (timeout != 0U) {
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d003      	beq.n	800a0ae <osSemaphoreAcquire+0x8a>
        stat = osErrorTimeout;
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	425b      	negs	r3, r3
 800a0aa:	617b      	str	r3, [r7, #20]
 800a0ac:	e002      	b.n	800a0b4 <osSemaphoreAcquire+0x90>
      } else {
        stat = osErrorResource;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	425b      	negs	r3, r3
 800a0b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a0b4:	697b      	ldr	r3, [r7, #20]
}
 800a0b6:	0018      	movs	r0, r3
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	b006      	add	sp, #24
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	46c0      	nop			@ (mov r8, r8)
 800a0c0:	e000ed04 	.word	0xe000ed04

0800a0c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d103      	bne.n	800a0e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a0da:	2304      	movs	r3, #4
 800a0dc:	425b      	negs	r3, r3
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	e029      	b.n	800a136 <osSemaphoreRelease+0x72>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0e2:	f3ef 8305 	mrs	r3, IPSR
 800a0e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d017      	beq.n	800a11e <osSemaphoreRelease+0x5a>
    yield = pdFALSE;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a0f2:	2308      	movs	r3, #8
 800a0f4:	18fa      	adds	r2, r7, r3
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	0011      	movs	r1, r2
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	f000 fbad 	bl	800a85a <xQueueGiveFromISR>
 800a100:	0003      	movs	r3, r0
 800a102:	2b01      	cmp	r3, #1
 800a104:	d003      	beq.n	800a10e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
 800a106:	2303      	movs	r3, #3
 800a108:	425b      	negs	r3, r3
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e013      	b.n	800a136 <osSemaphoreRelease+0x72>
    } else {
      portYIELD_FROM_ISR (yield);
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d010      	beq.n	800a136 <osSemaphoreRelease+0x72>
 800a114:	4b0a      	ldr	r3, [pc, #40]	@ (800a140 <osSemaphoreRelease+0x7c>)
 800a116:	2280      	movs	r2, #128	@ 0x80
 800a118:	0552      	lsls	r2, r2, #21
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	e00b      	b.n	800a136 <osSemaphoreRelease+0x72>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a11e:	6938      	ldr	r0, [r7, #16]
 800a120:	2300      	movs	r3, #0
 800a122:	2200      	movs	r2, #0
 800a124:	2100      	movs	r1, #0
 800a126:	f000 fa59 	bl	800a5dc <xQueueGenericSend>
 800a12a:	0003      	movs	r3, r0
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d002      	beq.n	800a136 <osSemaphoreRelease+0x72>
      stat = osErrorResource;
 800a130:	2303      	movs	r3, #3
 800a132:	425b      	negs	r3, r3
 800a134:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a136:	697b      	ldr	r3, [r7, #20]
}
 800a138:	0018      	movs	r0, r3
 800a13a:	46bd      	mov	sp, r7
 800a13c:	b006      	add	sp, #24
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	e000ed04 	.word	0xe000ed04

0800a144 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800a144:	b580      	push	{r7, lr}
 800a146:	b086      	sub	sp, #24
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a150:	f3ef 8305 	mrs	r3, IPSR
 800a154:	60fb      	str	r3, [r7, #12]
  return(result);
 800a156:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800a15c:	2306      	movs	r3, #6
 800a15e:	425b      	negs	r3, r3
 800a160:	617b      	str	r3, [r7, #20]
 800a162:	e010      	b.n	800a186 <osSemaphoreDelete+0x42>
  }
  else if (hSemaphore == NULL) {
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d103      	bne.n	800a172 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800a16a:	2304      	movs	r3, #4
 800a16c:	425b      	negs	r3, r3
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	e009      	b.n	800a186 <osSemaphoreDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	0018      	movs	r0, r3
 800a176:	f000 ff4b 	bl	800b010 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	0018      	movs	r0, r3
 800a182:	f000 fdcd 	bl	800ad20 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800a186:	697b      	ldr	r3, [r7, #20]
}
 800a188:	0018      	movs	r0, r3
 800a18a:	46bd      	mov	sp, r7
 800a18c:	b006      	add	sp, #24
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4a06      	ldr	r2, [pc, #24]	@ (800a1b8 <vApplicationGetIdleTaskMemory+0x28>)
 800a1a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	4a05      	ldr	r2, [pc, #20]	@ (800a1bc <vApplicationGetIdleTaskMemory+0x2c>)
 800a1a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2280      	movs	r2, #128	@ 0x80
 800a1ac:	601a      	str	r2, [r3, #0]
}
 800a1ae:	46c0      	nop			@ (mov r8, r8)
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b004      	add	sp, #16
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	46c0      	nop			@ (mov r8, r8)
 800a1b8:	20000b60 	.word	0x20000b60
 800a1bc:	20000c08 	.word	0x20000c08

0800a1c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4a06      	ldr	r2, [pc, #24]	@ (800a1e8 <vApplicationGetTimerTaskMemory+0x28>)
 800a1d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	4a05      	ldr	r2, [pc, #20]	@ (800a1ec <vApplicationGetTimerTaskMemory+0x2c>)
 800a1d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2280      	movs	r2, #128	@ 0x80
 800a1dc:	0052      	lsls	r2, r2, #1
 800a1de:	601a      	str	r2, [r3, #0]
}
 800a1e0:	46c0      	nop			@ (mov r8, r8)
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	b004      	add	sp, #16
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	20000e08 	.word	0x20000e08
 800a1ec:	20000eb0 	.word	0x20000eb0

0800a1f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	001a      	movs	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	4252      	negs	r2, r2
 800a208:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3308      	adds	r3, #8
 800a20e:	001a      	movs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3308      	adds	r3, #8
 800a218:	001a      	movs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a224:	46c0      	nop			@ (mov r8, r8)
 800a226:	46bd      	mov	sp, r7
 800a228:	b002      	add	sp, #8
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a23a:	46c0      	nop			@ (mov r8, r8)
 800a23c:	46bd      	mov	sp, r7
 800a23e:	b002      	add	sp, #8
 800a240:	bd80      	pop	{r7, pc}

0800a242 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	683a      	ldr	r2, [r7, #0]
 800a266:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
}
 800a27e:	46c0      	nop			@ (mov r8, r8)
 800a280:	46bd      	mov	sp, r7
 800a282:	b004      	add	sp, #16
 800a284:	bd80      	pop	{r7, pc}

0800a286 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
 800a28e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	3301      	adds	r3, #1
 800a29a:	d103      	bne.n	800a2a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	e00c      	b.n	800a2be <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	60fb      	str	r3, [r7, #12]
 800a2aa:	e002      	b.n	800a2b2 <vListInsert+0x2c>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d2f6      	bcs.n	800a2ac <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	601a      	str	r2, [r3, #0]
}
 800a2ea:	46c0      	nop			@ (mov r8, r8)
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	b004      	add	sp, #16
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6892      	ldr	r2, [r2, #8]
 800a308:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	689b      	ldr	r3, [r3, #8]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	6852      	ldr	r2, [r2, #4]
 800a312:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d103      	bne.n	800a326 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	689a      	ldr	r2, [r3, #8]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	1e5a      	subs	r2, r3, #1
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
}
 800a33a:	0018      	movs	r0, r3
 800a33c:	46bd      	mov	sp, r7
 800a33e:	b004      	add	sp, #16
 800a340:	bd80      	pop	{r7, pc}

0800a342 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d102      	bne.n	800a35c <xQueueGenericReset+0x1a>
 800a356:	b672      	cpsid	i
 800a358:	46c0      	nop			@ (mov r8, r8)
 800a35a:	e7fd      	b.n	800a358 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800a35c:	f002 f9e0 	bl	800c720 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a36c:	434b      	muls	r3, r1
 800a36e:	18d2      	adds	r2, r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38a:	1e59      	subs	r1, r3, #1
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a390:	434b      	muls	r3, r1
 800a392:	18d2      	adds	r2, r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2244      	movs	r2, #68	@ 0x44
 800a39c:	21ff      	movs	r1, #255	@ 0xff
 800a39e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2245      	movs	r2, #69	@ 0x45
 800a3a4:	21ff      	movs	r1, #255	@ 0xff
 800a3a6:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10d      	bne.n	800a3ca <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d013      	beq.n	800a3de <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3310      	adds	r3, #16
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f001 faa0 	bl	800b900 <xTaskRemoveFromEventList>
 800a3c0:	1e03      	subs	r3, r0, #0
 800a3c2:	d00c      	beq.n	800a3de <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3c4:	f002 f99c 	bl	800c700 <vPortYield>
 800a3c8:	e009      	b.n	800a3de <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	3310      	adds	r3, #16
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	f7ff ff0e 	bl	800a1f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3324      	adds	r3, #36	@ 0x24
 800a3d8:	0018      	movs	r0, r3
 800a3da:	f7ff ff09 	bl	800a1f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3de:	f002 f9b1 	bl	800c744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3e2:	2301      	movs	r3, #1
}
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	b004      	add	sp, #16
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3ec:	b590      	push	{r4, r7, lr}
 800a3ee:	b089      	sub	sp, #36	@ 0x24
 800a3f0:	af02      	add	r7, sp, #8
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <xQueueGenericCreateStatic+0x1a>
 800a400:	b672      	cpsid	i
 800a402:	46c0      	nop			@ (mov r8, r8)
 800a404:	e7fd      	b.n	800a402 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d102      	bne.n	800a412 <xQueueGenericCreateStatic+0x26>
 800a40c:	b672      	cpsid	i
 800a40e:	46c0      	nop			@ (mov r8, r8)
 800a410:	e7fd      	b.n	800a40e <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <xQueueGenericCreateStatic+0x32>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <xQueueGenericCreateStatic+0x36>
 800a41e:	2301      	movs	r3, #1
 800a420:	e000      	b.n	800a424 <xQueueGenericCreateStatic+0x38>
 800a422:	2300      	movs	r3, #0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <xQueueGenericCreateStatic+0x42>
 800a428:	b672      	cpsid	i
 800a42a:	46c0      	nop			@ (mov r8, r8)
 800a42c:	e7fd      	b.n	800a42a <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d102      	bne.n	800a43a <xQueueGenericCreateStatic+0x4e>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <xQueueGenericCreateStatic+0x52>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <xQueueGenericCreateStatic+0x54>
 800a43e:	2300      	movs	r3, #0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <xQueueGenericCreateStatic+0x5e>
 800a444:	b672      	cpsid	i
 800a446:	46c0      	nop			@ (mov r8, r8)
 800a448:	e7fd      	b.n	800a446 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a44a:	2350      	movs	r3, #80	@ 0x50
 800a44c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b50      	cmp	r3, #80	@ 0x50
 800a452:	d002      	beq.n	800a45a <xQueueGenericCreateStatic+0x6e>
 800a454:	b672      	cpsid	i
 800a456:	46c0      	nop			@ (mov r8, r8)
 800a458:	e7fd      	b.n	800a456 <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a45a:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00e      	beq.n	800a484 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	2246      	movs	r2, #70	@ 0x46
 800a46a:	2101      	movs	r1, #1
 800a46c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a46e:	2328      	movs	r3, #40	@ 0x28
 800a470:	18fb      	adds	r3, r7, r3
 800a472:	781c      	ldrb	r4, [r3, #0]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	9300      	str	r3, [sp, #0]
 800a47e:	0023      	movs	r3, r4
 800a480:	f000 f838 	bl	800a4f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a484:	697b      	ldr	r3, [r7, #20]
	}
 800a486:	0018      	movs	r0, r3
 800a488:	46bd      	mov	sp, r7
 800a48a:	b007      	add	sp, #28
 800a48c:	bd90      	pop	{r4, r7, pc}

0800a48e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a48e:	b590      	push	{r4, r7, lr}
 800a490:	b08b      	sub	sp, #44	@ 0x2c
 800a492:	af02      	add	r7, sp, #8
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	1dfb      	adds	r3, r7, #7
 800a49a:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d102      	bne.n	800a4a8 <xQueueGenericCreate+0x1a>
 800a4a2:	b672      	cpsid	i
 800a4a4:	46c0      	nop			@ (mov r8, r8)
 800a4a6:	e7fd      	b.n	800a4a4 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	4353      	muls	r3, r2
 800a4ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	3350      	adds	r3, #80	@ 0x50
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	f002 f9cb 	bl	800c850 <pvPortMalloc>
 800a4ba:	0003      	movs	r3, r0
 800a4bc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d012      	beq.n	800a4ea <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	3350      	adds	r3, #80	@ 0x50
 800a4cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2246      	movs	r2, #70	@ 0x46
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4d6:	1dfb      	adds	r3, r7, #7
 800a4d8:	781c      	ldrb	r4, [r3, #0]
 800a4da:	697a      	ldr	r2, [r7, #20]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	0023      	movs	r3, r4
 800a4e6:	f000 f805 	bl	800a4f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ea:	69bb      	ldr	r3, [r7, #24]
	}
 800a4ec:	0018      	movs	r0, r3
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	b009      	add	sp, #36	@ 0x24
 800a4f2:	bd90      	pop	{r4, r7, pc}

0800a4f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	001a      	movs	r2, r3
 800a502:	1cfb      	adds	r3, r7, #3
 800a504:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d103      	bne.n	800a514 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	e002      	b.n	800a51a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a51a:	69bb      	ldr	r3, [r7, #24]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a520:	69bb      	ldr	r3, [r7, #24]
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	2101      	movs	r1, #1
 800a52a:	0018      	movs	r0, r3
 800a52c:	f7ff ff09 	bl	800a342 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	1cfa      	adds	r2, r7, #3
 800a534:	214c      	movs	r1, #76	@ 0x4c
 800a536:	7812      	ldrb	r2, [r2, #0]
 800a538:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a53a:	46c0      	nop			@ (mov r8, r8)
 800a53c:	46bd      	mov	sp, r7
 800a53e:	b004      	add	sp, #16
 800a540:	bd80      	pop	{r7, pc}

0800a542 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a542:	b580      	push	{r7, lr}
 800a544:	b088      	sub	sp, #32
 800a546:	af02      	add	r7, sp, #8
 800a548:	60f8      	str	r0, [r7, #12]
 800a54a:	60b9      	str	r1, [r7, #8]
 800a54c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d102      	bne.n	800a55a <xQueueCreateCountingSemaphoreStatic+0x18>
 800a554:	b672      	cpsid	i
 800a556:	46c0      	nop			@ (mov r8, r8)
 800a558:	e7fd      	b.n	800a556 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d902      	bls.n	800a568 <xQueueCreateCountingSemaphoreStatic+0x26>
 800a562:	b672      	cpsid	i
 800a564:	46c0      	nop			@ (mov r8, r8)
 800a566:	e7fd      	b.n	800a564 <xQueueCreateCountingSemaphoreStatic+0x22>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	2202      	movs	r2, #2
 800a56e:	9200      	str	r2, [sp, #0]
 800a570:	2200      	movs	r2, #0
 800a572:	2100      	movs	r1, #0
 800a574:	f7ff ff3a 	bl	800a3ec <xQueueGenericCreateStatic>
 800a578:	0003      	movs	r3, r0
 800a57a:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d002      	beq.n	800a588 <xQueueCreateCountingSemaphoreStatic+0x46>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a588:	697b      	ldr	r3, [r7, #20]
	}
 800a58a:	0018      	movs	r0, r3
 800a58c:	46bd      	mov	sp, r7
 800a58e:	b006      	add	sp, #24
 800a590:	bd80      	pop	{r7, pc}

0800a592 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d102      	bne.n	800a5a8 <xQueueCreateCountingSemaphore+0x16>
 800a5a2:	b672      	cpsid	i
 800a5a4:	46c0      	nop			@ (mov r8, r8)
 800a5a6:	e7fd      	b.n	800a5a4 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d902      	bls.n	800a5b6 <xQueueCreateCountingSemaphore+0x24>
 800a5b0:	b672      	cpsid	i
 800a5b2:	46c0      	nop			@ (mov r8, r8)
 800a5b4:	e7fd      	b.n	800a5b2 <xQueueCreateCountingSemaphore+0x20>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2202      	movs	r2, #2
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	0018      	movs	r0, r3
 800a5be:	f7ff ff66 	bl	800a48e <xQueueGenericCreate>
 800a5c2:	0003      	movs	r3, r0
 800a5c4:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d002      	beq.n	800a5d2 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	683a      	ldr	r2, [r7, #0]
 800a5d0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
	}
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	b004      	add	sp, #16
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b08a      	sub	sp, #40	@ 0x28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <xQueueGenericSend+0x22>
 800a5f8:	b672      	cpsid	i
 800a5fa:	46c0      	nop			@ (mov r8, r8)
 800a5fc:	e7fd      	b.n	800a5fa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d103      	bne.n	800a60c <xQueueGenericSend+0x30>
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d101      	bne.n	800a610 <xQueueGenericSend+0x34>
 800a60c:	2301      	movs	r3, #1
 800a60e:	e000      	b.n	800a612 <xQueueGenericSend+0x36>
 800a610:	2300      	movs	r3, #0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <xQueueGenericSend+0x40>
 800a616:	b672      	cpsid	i
 800a618:	46c0      	nop			@ (mov r8, r8)
 800a61a:	e7fd      	b.n	800a618 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d103      	bne.n	800a62a <xQueueGenericSend+0x4e>
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a626:	2b01      	cmp	r3, #1
 800a628:	d101      	bne.n	800a62e <xQueueGenericSend+0x52>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e000      	b.n	800a630 <xQueueGenericSend+0x54>
 800a62e:	2300      	movs	r3, #0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <xQueueGenericSend+0x5e>
 800a634:	b672      	cpsid	i
 800a636:	46c0      	nop			@ (mov r8, r8)
 800a638:	e7fd      	b.n	800a636 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a63a:	f001 fafd 	bl	800bc38 <xTaskGetSchedulerState>
 800a63e:	1e03      	subs	r3, r0, #0
 800a640:	d102      	bne.n	800a648 <xQueueGenericSend+0x6c>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <xQueueGenericSend+0x70>
 800a648:	2301      	movs	r3, #1
 800a64a:	e000      	b.n	800a64e <xQueueGenericSend+0x72>
 800a64c:	2300      	movs	r3, #0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <xQueueGenericSend+0x7c>
 800a652:	b672      	cpsid	i
 800a654:	46c0      	nop			@ (mov r8, r8)
 800a656:	e7fd      	b.n	800a654 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a658:	f002 f862 	bl	800c720 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a65c:	6a3b      	ldr	r3, [r7, #32]
 800a65e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a664:	429a      	cmp	r2, r3
 800a666:	d302      	bcc.n	800a66e <xQueueGenericSend+0x92>
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d11e      	bne.n	800a6ac <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	68b9      	ldr	r1, [r7, #8]
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	0018      	movs	r0, r3
 800a676:	f000 fb86 	bl	800ad86 <prvCopyDataToQueue>
 800a67a:	0003      	movs	r3, r0
 800a67c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a67e:	6a3b      	ldr	r3, [r7, #32]
 800a680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	3324      	adds	r3, #36	@ 0x24
 800a68a:	0018      	movs	r0, r3
 800a68c:	f001 f938 	bl	800b900 <xTaskRemoveFromEventList>
 800a690:	1e03      	subs	r3, r0, #0
 800a692:	d007      	beq.n	800a6a4 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a694:	f002 f834 	bl	800c700 <vPortYield>
 800a698:	e004      	b.n	800a6a4 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6a0:	f002 f82e 	bl	800c700 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6a4:	f002 f84e 	bl	800c744 <vPortExitCritical>
				return pdPASS;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e05b      	b.n	800a764 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d103      	bne.n	800a6ba <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6b2:	f002 f847 	bl	800c744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	e054      	b.n	800a764 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d106      	bne.n	800a6ce <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6c0:	2314      	movs	r3, #20
 800a6c2:	18fb      	adds	r3, r7, r3
 800a6c4:	0018      	movs	r0, r3
 800a6c6:	f001 f979 	bl	800b9bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6ce:	f002 f839 	bl	800c744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6d2:	f000 ff1d 	bl	800b510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6d6:	f002 f823 	bl	800c720 <vPortEnterCritical>
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	2244      	movs	r2, #68	@ 0x44
 800a6de:	5c9b      	ldrb	r3, [r3, r2]
 800a6e0:	b25b      	sxtb	r3, r3
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	d103      	bne.n	800a6ee <xQueueGenericSend+0x112>
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	2244      	movs	r2, #68	@ 0x44
 800a6ea:	2100      	movs	r1, #0
 800a6ec:	5499      	strb	r1, [r3, r2]
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	2245      	movs	r2, #69	@ 0x45
 800a6f2:	5c9b      	ldrb	r3, [r3, r2]
 800a6f4:	b25b      	sxtb	r3, r3
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	d103      	bne.n	800a702 <xQueueGenericSend+0x126>
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	2245      	movs	r2, #69	@ 0x45
 800a6fe:	2100      	movs	r1, #0
 800a700:	5499      	strb	r1, [r3, r2]
 800a702:	f002 f81f 	bl	800c744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a706:	1d3a      	adds	r2, r7, #4
 800a708:	2314      	movs	r3, #20
 800a70a:	18fb      	adds	r3, r7, r3
 800a70c:	0011      	movs	r1, r2
 800a70e:	0018      	movs	r0, r3
 800a710:	f001 f968 	bl	800b9e4 <xTaskCheckForTimeOut>
 800a714:	1e03      	subs	r3, r0, #0
 800a716:	d11e      	bne.n	800a756 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	0018      	movs	r0, r3
 800a71c:	f000 fc38 	bl	800af90 <prvIsQueueFull>
 800a720:	1e03      	subs	r3, r0, #0
 800a722:	d011      	beq.n	800a748 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	3310      	adds	r3, #16
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	0011      	movs	r1, r2
 800a72c:	0018      	movs	r0, r3
 800a72e:	f001 f89f 	bl	800b870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	0018      	movs	r0, r3
 800a736:	f000 fbb7 	bl	800aea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a73a:	f000 fef5 	bl	800b528 <xTaskResumeAll>
 800a73e:	1e03      	subs	r3, r0, #0
 800a740:	d18a      	bne.n	800a658 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 800a742:	f001 ffdd 	bl	800c700 <vPortYield>
 800a746:	e787      	b.n	800a658 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	0018      	movs	r0, r3
 800a74c:	f000 fbac 	bl	800aea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a750:	f000 feea 	bl	800b528 <xTaskResumeAll>
 800a754:	e780      	b.n	800a658 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	0018      	movs	r0, r3
 800a75a:	f000 fba5 	bl	800aea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a75e:	f000 fee3 	bl	800b528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a762:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a764:	0018      	movs	r0, r3
 800a766:	46bd      	mov	sp, r7
 800a768:	b00a      	add	sp, #40	@ 0x28
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a76c:	b590      	push	{r4, r7, lr}
 800a76e:	b08b      	sub	sp, #44	@ 0x2c
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a77e:	6a3b      	ldr	r3, [r7, #32]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d102      	bne.n	800a78a <xQueueGenericSendFromISR+0x1e>
 800a784:	b672      	cpsid	i
 800a786:	46c0      	nop			@ (mov r8, r8)
 800a788:	e7fd      	b.n	800a786 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d103      	bne.n	800a798 <xQueueGenericSendFromISR+0x2c>
 800a790:	6a3b      	ldr	r3, [r7, #32]
 800a792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <xQueueGenericSendFromISR+0x30>
 800a798:	2301      	movs	r3, #1
 800a79a:	e000      	b.n	800a79e <xQueueGenericSendFromISR+0x32>
 800a79c:	2300      	movs	r3, #0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d102      	bne.n	800a7a8 <xQueueGenericSendFromISR+0x3c>
 800a7a2:	b672      	cpsid	i
 800a7a4:	46c0      	nop			@ (mov r8, r8)
 800a7a6:	e7fd      	b.n	800a7a4 <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d103      	bne.n	800a7b6 <xQueueGenericSendFromISR+0x4a>
 800a7ae:	6a3b      	ldr	r3, [r7, #32]
 800a7b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d101      	bne.n	800a7ba <xQueueGenericSendFromISR+0x4e>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e000      	b.n	800a7bc <xQueueGenericSendFromISR+0x50>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d102      	bne.n	800a7c6 <xQueueGenericSendFromISR+0x5a>
 800a7c0:	b672      	cpsid	i
 800a7c2:	46c0      	nop			@ (mov r8, r8)
 800a7c4:	e7fd      	b.n	800a7c2 <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7c6:	f001 ffd5 	bl	800c774 <ulSetInterruptMaskFromISR>
 800a7ca:	0003      	movs	r3, r0
 800a7cc:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7ce:	6a3b      	ldr	r3, [r7, #32]
 800a7d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d302      	bcc.n	800a7e0 <xQueueGenericSendFromISR+0x74>
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d131      	bne.n	800a844 <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7e0:	241b      	movs	r4, #27
 800a7e2:	193b      	adds	r3, r7, r4
 800a7e4:	6a3a      	ldr	r2, [r7, #32]
 800a7e6:	2145      	movs	r1, #69	@ 0x45
 800a7e8:	5c52      	ldrb	r2, [r2, r1]
 800a7ea:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7ec:	6a3b      	ldr	r3, [r7, #32]
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f0:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	6a3b      	ldr	r3, [r7, #32]
 800a7f8:	0018      	movs	r0, r3
 800a7fa:	f000 fac4 	bl	800ad86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a7fe:	193b      	adds	r3, r7, r4
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	b25b      	sxtb	r3, r3
 800a804:	3301      	adds	r3, #1
 800a806:	d111      	bne.n	800a82c <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a808:	6a3b      	ldr	r3, [r7, #32]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d016      	beq.n	800a83e <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	3324      	adds	r3, #36	@ 0x24
 800a814:	0018      	movs	r0, r3
 800a816:	f001 f873 	bl	800b900 <xTaskRemoveFromEventList>
 800a81a:	1e03      	subs	r3, r0, #0
 800a81c:	d00f      	beq.n	800a83e <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00c      	beq.n	800a83e <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	601a      	str	r2, [r3, #0]
 800a82a:	e008      	b.n	800a83e <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a82c:	231b      	movs	r3, #27
 800a82e:	18fb      	adds	r3, r7, r3
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	3301      	adds	r3, #1
 800a834:	b2db      	uxtb	r3, r3
 800a836:	b259      	sxtb	r1, r3
 800a838:	6a3b      	ldr	r3, [r7, #32]
 800a83a:	2245      	movs	r2, #69	@ 0x45
 800a83c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a83e:	2301      	movs	r3, #1
 800a840:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 800a842:	e001      	b.n	800a848 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a844:	2300      	movs	r3, #0
 800a846:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	0018      	movs	r0, r3
 800a84c:	f001 ff98 	bl	800c780 <vClearInterruptMaskFromISR>

	return xReturn;
 800a850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a852:	0018      	movs	r0, r3
 800a854:	46bd      	mov	sp, r7
 800a856:	b00b      	add	sp, #44	@ 0x2c
 800a858:	bd90      	pop	{r4, r7, pc}

0800a85a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b088      	sub	sp, #32
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d102      	bne.n	800a874 <xQueueGiveFromISR+0x1a>
 800a86e:	b672      	cpsid	i
 800a870:	46c0      	nop			@ (mov r8, r8)
 800a872:	e7fd      	b.n	800a870 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <xQueueGiveFromISR+0x28>
 800a87c:	b672      	cpsid	i
 800a87e:	46c0      	nop			@ (mov r8, r8)
 800a880:	e7fd      	b.n	800a87e <xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d103      	bne.n	800a892 <xQueueGiveFromISR+0x38>
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <xQueueGiveFromISR+0x3c>
 800a892:	2301      	movs	r3, #1
 800a894:	e000      	b.n	800a898 <xQueueGiveFromISR+0x3e>
 800a896:	2300      	movs	r3, #0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d102      	bne.n	800a8a2 <xQueueGiveFromISR+0x48>
 800a89c:	b672      	cpsid	i
 800a89e:	46c0      	nop			@ (mov r8, r8)
 800a8a0:	e7fd      	b.n	800a89e <xQueueGiveFromISR+0x44>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8a2:	f001 ff67 	bl	800c774 <ulSetInterruptMaskFromISR>
 800a8a6:	0003      	movs	r3, r0
 800a8a8:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ae:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d22c      	bcs.n	800a914 <xQueueGiveFromISR+0xba>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a8ba:	200f      	movs	r0, #15
 800a8bc:	183b      	adds	r3, r7, r0
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	2145      	movs	r1, #69	@ 0x45
 800a8c2:	5c52      	ldrb	r2, [r2, r1]
 800a8c4:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8ce:	183b      	adds	r3, r7, r0
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	b25b      	sxtb	r3, r3
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	d111      	bne.n	800a8fc <xQueueGiveFromISR+0xa2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d016      	beq.n	800a90e <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	3324      	adds	r3, #36	@ 0x24
 800a8e4:	0018      	movs	r0, r3
 800a8e6:	f001 f80b 	bl	800b900 <xTaskRemoveFromEventList>
 800a8ea:	1e03      	subs	r3, r0, #0
 800a8ec:	d00f      	beq.n	800a90e <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00c      	beq.n	800a90e <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	601a      	str	r2, [r3, #0]
 800a8fa:	e008      	b.n	800a90e <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8fc:	230f      	movs	r3, #15
 800a8fe:	18fb      	adds	r3, r7, r3
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	3301      	adds	r3, #1
 800a904:	b2db      	uxtb	r3, r3
 800a906:	b259      	sxtb	r1, r3
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	2245      	movs	r2, #69	@ 0x45
 800a90c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a90e:	2301      	movs	r3, #1
 800a910:	61fb      	str	r3, [r7, #28]
 800a912:	e001      	b.n	800a918 <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	0018      	movs	r0, r3
 800a91c:	f001 ff30 	bl	800c780 <vClearInterruptMaskFromISR>

	return xReturn;
 800a920:	69fb      	ldr	r3, [r7, #28]
}
 800a922:	0018      	movs	r0, r3
 800a924:	46bd      	mov	sp, r7
 800a926:	b008      	add	sp, #32
 800a928:	bd80      	pop	{r7, pc}

0800a92a <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b08a      	sub	sp, #40	@ 0x28
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a936:	2300      	movs	r3, #0
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a93e:	6a3b      	ldr	r3, [r7, #32]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d102      	bne.n	800a94a <xQueueReceive+0x20>
 800a944:	b672      	cpsid	i
 800a946:	46c0      	nop			@ (mov r8, r8)
 800a948:	e7fd      	b.n	800a946 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <xQueueReceive+0x2e>
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a954:	2b00      	cmp	r3, #0
 800a956:	d101      	bne.n	800a95c <xQueueReceive+0x32>
 800a958:	2301      	movs	r3, #1
 800a95a:	e000      	b.n	800a95e <xQueueReceive+0x34>
 800a95c:	2300      	movs	r3, #0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d102      	bne.n	800a968 <xQueueReceive+0x3e>
 800a962:	b672      	cpsid	i
 800a964:	46c0      	nop			@ (mov r8, r8)
 800a966:	e7fd      	b.n	800a964 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a968:	f001 f966 	bl	800bc38 <xTaskGetSchedulerState>
 800a96c:	1e03      	subs	r3, r0, #0
 800a96e:	d102      	bne.n	800a976 <xQueueReceive+0x4c>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <xQueueReceive+0x50>
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <xQueueReceive+0x52>
 800a97a:	2300      	movs	r3, #0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d102      	bne.n	800a986 <xQueueReceive+0x5c>
 800a980:	b672      	cpsid	i
 800a982:	46c0      	nop			@ (mov r8, r8)
 800a984:	e7fd      	b.n	800a982 <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a986:	f001 fecb 	bl	800c720 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01a      	beq.n	800a9cc <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a996:	68ba      	ldr	r2, [r7, #8]
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	0011      	movs	r1, r2
 800a99c:	0018      	movs	r0, r3
 800a99e:	f000 fa5d 	bl	800ae5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9a2:	69fb      	ldr	r3, [r7, #28]
 800a9a4:	1e5a      	subs	r2, r3, #1
 800a9a6:	6a3b      	ldr	r3, [r7, #32]
 800a9a8:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9aa:	6a3b      	ldr	r3, [r7, #32]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d008      	beq.n	800a9c4 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9b2:	6a3b      	ldr	r3, [r7, #32]
 800a9b4:	3310      	adds	r3, #16
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	f000 ffa2 	bl	800b900 <xTaskRemoveFromEventList>
 800a9bc:	1e03      	subs	r3, r0, #0
 800a9be:	d001      	beq.n	800a9c4 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9c0:	f001 fe9e 	bl	800c700 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9c4:	f001 febe 	bl	800c744 <vPortExitCritical>
				return pdPASS;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e062      	b.n	800aa92 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d103      	bne.n	800a9da <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9d2:	f001 feb7 	bl	800c744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	e05b      	b.n	800aa92 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d106      	bne.n	800a9ee <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9e0:	2314      	movs	r3, #20
 800a9e2:	18fb      	adds	r3, r7, r3
 800a9e4:	0018      	movs	r0, r3
 800a9e6:	f000 ffe9 	bl	800b9bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9ee:	f001 fea9 	bl	800c744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9f2:	f000 fd8d 	bl	800b510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9f6:	f001 fe93 	bl	800c720 <vPortEnterCritical>
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	2244      	movs	r2, #68	@ 0x44
 800a9fe:	5c9b      	ldrb	r3, [r3, r2]
 800aa00:	b25b      	sxtb	r3, r3
 800aa02:	3301      	adds	r3, #1
 800aa04:	d103      	bne.n	800aa0e <xQueueReceive+0xe4>
 800aa06:	6a3b      	ldr	r3, [r7, #32]
 800aa08:	2244      	movs	r2, #68	@ 0x44
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	5499      	strb	r1, [r3, r2]
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	2245      	movs	r2, #69	@ 0x45
 800aa12:	5c9b      	ldrb	r3, [r3, r2]
 800aa14:	b25b      	sxtb	r3, r3
 800aa16:	3301      	adds	r3, #1
 800aa18:	d103      	bne.n	800aa22 <xQueueReceive+0xf8>
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	2245      	movs	r2, #69	@ 0x45
 800aa1e:	2100      	movs	r1, #0
 800aa20:	5499      	strb	r1, [r3, r2]
 800aa22:	f001 fe8f 	bl	800c744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa26:	1d3a      	adds	r2, r7, #4
 800aa28:	2314      	movs	r3, #20
 800aa2a:	18fb      	adds	r3, r7, r3
 800aa2c:	0011      	movs	r1, r2
 800aa2e:	0018      	movs	r0, r3
 800aa30:	f000 ffd8 	bl	800b9e4 <xTaskCheckForTimeOut>
 800aa34:	1e03      	subs	r3, r0, #0
 800aa36:	d11e      	bne.n	800aa76 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa38:	6a3b      	ldr	r3, [r7, #32]
 800aa3a:	0018      	movs	r0, r3
 800aa3c:	f000 fa92 	bl	800af64 <prvIsQueueEmpty>
 800aa40:	1e03      	subs	r3, r0, #0
 800aa42:	d011      	beq.n	800aa68 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	3324      	adds	r3, #36	@ 0x24
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	0011      	movs	r1, r2
 800aa4c:	0018      	movs	r0, r3
 800aa4e:	f000 ff0f 	bl	800b870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	0018      	movs	r0, r3
 800aa56:	f000 fa27 	bl	800aea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa5a:	f000 fd65 	bl	800b528 <xTaskResumeAll>
 800aa5e:	1e03      	subs	r3, r0, #0
 800aa60:	d191      	bne.n	800a986 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800aa62:	f001 fe4d 	bl	800c700 <vPortYield>
 800aa66:	e78e      	b.n	800a986 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	0018      	movs	r0, r3
 800aa6c:	f000 fa1c 	bl	800aea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa70:	f000 fd5a 	bl	800b528 <xTaskResumeAll>
 800aa74:	e787      	b.n	800a986 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa76:	6a3b      	ldr	r3, [r7, #32]
 800aa78:	0018      	movs	r0, r3
 800aa7a:	f000 fa15 	bl	800aea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa7e:	f000 fd53 	bl	800b528 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa82:	6a3b      	ldr	r3, [r7, #32]
 800aa84:	0018      	movs	r0, r3
 800aa86:	f000 fa6d 	bl	800af64 <prvIsQueueEmpty>
 800aa8a:	1e03      	subs	r3, r0, #0
 800aa8c:	d100      	bne.n	800aa90 <xQueueReceive+0x166>
 800aa8e:	e77a      	b.n	800a986 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa92:	0018      	movs	r0, r3
 800aa94:	46bd      	mov	sp, r7
 800aa96:	b00a      	add	sp, #40	@ 0x28
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b08a      	sub	sp, #40	@ 0x28
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aaac:	2300      	movs	r3, #0
 800aaae:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <xQueueSemaphoreTake+0x22>
 800aab6:	b672      	cpsid	i
 800aab8:	46c0      	nop			@ (mov r8, r8)
 800aaba:	e7fd      	b.n	800aab8 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d002      	beq.n	800aaca <xQueueSemaphoreTake+0x30>
 800aac4:	b672      	cpsid	i
 800aac6:	46c0      	nop			@ (mov r8, r8)
 800aac8:	e7fd      	b.n	800aac6 <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aaca:	f001 f8b5 	bl	800bc38 <xTaskGetSchedulerState>
 800aace:	1e03      	subs	r3, r0, #0
 800aad0:	d102      	bne.n	800aad8 <xQueueSemaphoreTake+0x3e>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <xQueueSemaphoreTake+0x42>
 800aad8:	2301      	movs	r3, #1
 800aada:	e000      	b.n	800aade <xQueueSemaphoreTake+0x44>
 800aadc:	2300      	movs	r3, #0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d102      	bne.n	800aae8 <xQueueSemaphoreTake+0x4e>
 800aae2:	b672      	cpsid	i
 800aae4:	46c0      	nop			@ (mov r8, r8)
 800aae6:	e7fd      	b.n	800aae4 <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aae8:	f001 fe1a 	bl	800c720 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d01d      	beq.n	800ab34 <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	1e5a      	subs	r2, r3, #1
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d104      	bne.n	800ab12 <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ab08:	f001 f9ea 	bl	800bee0 <pvTaskIncrementMutexHeldCount>
 800ab0c:	0002      	movs	r2, r0
 800ab0e:	69fb      	ldr	r3, [r7, #28]
 800ab10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab12:	69fb      	ldr	r3, [r7, #28]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d008      	beq.n	800ab2c <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	3310      	adds	r3, #16
 800ab1e:	0018      	movs	r0, r3
 800ab20:	f000 feee 	bl	800b900 <xTaskRemoveFromEventList>
 800ab24:	1e03      	subs	r3, r0, #0
 800ab26:	d001      	beq.n	800ab2c <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab28:	f001 fdea 	bl	800c700 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab2c:	f001 fe0a 	bl	800c744 <vPortExitCritical>
				return pdPASS;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e08c      	b.n	800ac4e <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d109      	bne.n	800ab4e <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab3a:	6a3b      	ldr	r3, [r7, #32]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <xQueueSemaphoreTake+0xac>
 800ab40:	b672      	cpsid	i
 800ab42:	46c0      	nop			@ (mov r8, r8)
 800ab44:	e7fd      	b.n	800ab42 <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab46:	f001 fdfd 	bl	800c744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e07f      	b.n	800ac4e <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d106      	bne.n	800ab62 <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab54:	230c      	movs	r3, #12
 800ab56:	18fb      	adds	r3, r7, r3
 800ab58:	0018      	movs	r0, r3
 800ab5a:	f000 ff2f 	bl	800b9bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab62:	f001 fdef 	bl	800c744 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab66:	f000 fcd3 	bl	800b510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab6a:	f001 fdd9 	bl	800c720 <vPortEnterCritical>
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	2244      	movs	r2, #68	@ 0x44
 800ab72:	5c9b      	ldrb	r3, [r3, r2]
 800ab74:	b25b      	sxtb	r3, r3
 800ab76:	3301      	adds	r3, #1
 800ab78:	d103      	bne.n	800ab82 <xQueueSemaphoreTake+0xe8>
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	2244      	movs	r2, #68	@ 0x44
 800ab7e:	2100      	movs	r1, #0
 800ab80:	5499      	strb	r1, [r3, r2]
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	2245      	movs	r2, #69	@ 0x45
 800ab86:	5c9b      	ldrb	r3, [r3, r2]
 800ab88:	b25b      	sxtb	r3, r3
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	d103      	bne.n	800ab96 <xQueueSemaphoreTake+0xfc>
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	2245      	movs	r2, #69	@ 0x45
 800ab92:	2100      	movs	r1, #0
 800ab94:	5499      	strb	r1, [r3, r2]
 800ab96:	f001 fdd5 	bl	800c744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab9a:	003a      	movs	r2, r7
 800ab9c:	230c      	movs	r3, #12
 800ab9e:	18fb      	adds	r3, r7, r3
 800aba0:	0011      	movs	r1, r2
 800aba2:	0018      	movs	r0, r3
 800aba4:	f000 ff1e 	bl	800b9e4 <xTaskCheckForTimeOut>
 800aba8:	1e03      	subs	r3, r0, #0
 800abaa:	d12e      	bne.n	800ac0a <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	0018      	movs	r0, r3
 800abb0:	f000 f9d8 	bl	800af64 <prvIsQueueEmpty>
 800abb4:	1e03      	subs	r3, r0, #0
 800abb6:	d021      	beq.n	800abfc <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 800abc0:	f001 fdae 	bl	800c720 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	0018      	movs	r0, r3
 800abca:	f001 f851 	bl	800bc70 <xTaskPriorityInherit>
 800abce:	0003      	movs	r3, r0
 800abd0:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800abd2:	f001 fdb7 	bl	800c744 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	3324      	adds	r3, #36	@ 0x24
 800abda:	683a      	ldr	r2, [r7, #0]
 800abdc:	0011      	movs	r1, r2
 800abde:	0018      	movs	r0, r3
 800abe0:	f000 fe46 	bl	800b870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	0018      	movs	r0, r3
 800abe8:	f000 f95e 	bl	800aea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abec:	f000 fc9c 	bl	800b528 <xTaskResumeAll>
 800abf0:	1e03      	subs	r3, r0, #0
 800abf2:	d000      	beq.n	800abf6 <xQueueSemaphoreTake+0x15c>
 800abf4:	e778      	b.n	800aae8 <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 800abf6:	f001 fd83 	bl	800c700 <vPortYield>
 800abfa:	e775      	b.n	800aae8 <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	0018      	movs	r0, r3
 800ac00:	f000 f952 	bl	800aea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac04:	f000 fc90 	bl	800b528 <xTaskResumeAll>
 800ac08:	e76e      	b.n	800aae8 <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	0018      	movs	r0, r3
 800ac0e:	f000 f94b 	bl	800aea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac12:	f000 fc89 	bl	800b528 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac16:	69fb      	ldr	r3, [r7, #28]
 800ac18:	0018      	movs	r0, r3
 800ac1a:	f000 f9a3 	bl	800af64 <prvIsQueueEmpty>
 800ac1e:	1e03      	subs	r3, r0, #0
 800ac20:	d100      	bne.n	800ac24 <xQueueSemaphoreTake+0x18a>
 800ac22:	e761      	b.n	800aae8 <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d010      	beq.n	800ac4c <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 800ac2a:	f001 fd79 	bl	800c720 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	0018      	movs	r0, r3
 800ac32:	f000 f892 	bl	800ad5a <prvGetDisinheritPriorityAfterTimeout>
 800ac36:	0003      	movs	r3, r0
 800ac38:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	0011      	movs	r1, r2
 800ac42:	0018      	movs	r0, r3
 800ac44:	f001 f8da 	bl	800bdfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac48:	f001 fd7c 	bl	800c744 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac4e:	0018      	movs	r0, r3
 800ac50:	46bd      	mov	sp, r7
 800ac52:	b00a      	add	sp, #40	@ 0x28
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac56:	b590      	push	{r4, r7, lr}
 800ac58:	b08b      	sub	sp, #44	@ 0x2c
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	60f8      	str	r0, [r7, #12]
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d102      	bne.n	800ac72 <xQueueReceiveFromISR+0x1c>
 800ac6c:	b672      	cpsid	i
 800ac6e:	46c0      	nop			@ (mov r8, r8)
 800ac70:	e7fd      	b.n	800ac6e <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d103      	bne.n	800ac80 <xQueueReceiveFromISR+0x2a>
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <xQueueReceiveFromISR+0x2e>
 800ac80:	2301      	movs	r3, #1
 800ac82:	e000      	b.n	800ac86 <xQueueReceiveFromISR+0x30>
 800ac84:	2300      	movs	r3, #0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d102      	bne.n	800ac90 <xQueueReceiveFromISR+0x3a>
 800ac8a:	b672      	cpsid	i
 800ac8c:	46c0      	nop			@ (mov r8, r8)
 800ac8e:	e7fd      	b.n	800ac8c <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac90:	f001 fd70 	bl	800c774 <ulSetInterruptMaskFromISR>
 800ac94:	0003      	movs	r3, r0
 800ac96:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac98:	6a3b      	ldr	r3, [r7, #32]
 800ac9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac9c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d032      	beq.n	800ad0a <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aca4:	2417      	movs	r4, #23
 800aca6:	193b      	adds	r3, r7, r4
 800aca8:	6a3a      	ldr	r2, [r7, #32]
 800acaa:	2144      	movs	r1, #68	@ 0x44
 800acac:	5c52      	ldrb	r2, [r2, r1]
 800acae:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	0011      	movs	r1, r2
 800acb6:	0018      	movs	r0, r3
 800acb8:	f000 f8d0 	bl	800ae5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	1e5a      	subs	r2, r3, #1
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800acc4:	193b      	adds	r3, r7, r4
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	b25b      	sxtb	r3, r3
 800acca:	3301      	adds	r3, #1
 800accc:	d111      	bne.n	800acf2 <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acce:	6a3b      	ldr	r3, [r7, #32]
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d016      	beq.n	800ad04 <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	3310      	adds	r3, #16
 800acda:	0018      	movs	r0, r3
 800acdc:	f000 fe10 	bl	800b900 <xTaskRemoveFromEventList>
 800ace0:	1e03      	subs	r3, r0, #0
 800ace2:	d00f      	beq.n	800ad04 <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00c      	beq.n	800ad04 <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e008      	b.n	800ad04 <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800acf2:	2317      	movs	r3, #23
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	b259      	sxtb	r1, r3
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	2244      	movs	r2, #68	@ 0x44
 800ad02:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800ad04:	2301      	movs	r3, #1
 800ad06:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad08:	e001      	b.n	800ad0e <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	0018      	movs	r0, r3
 800ad12:	f001 fd35 	bl	800c780 <vClearInterruptMaskFromISR>

	return xReturn;
 800ad16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad18:	0018      	movs	r0, r3
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	b00b      	add	sp, #44	@ 0x2c
 800ad1e:	bd90      	pop	{r4, r7, pc}

0800ad20 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <vQueueDelete+0x18>
 800ad32:	b672      	cpsid	i
 800ad34:	46c0      	nop			@ (mov r8, r8)
 800ad36:	e7fd      	b.n	800ad34 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	0018      	movs	r0, r3
 800ad3c:	f000 f968 	bl	800b010 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2246      	movs	r2, #70	@ 0x46
 800ad44:	5c9b      	ldrb	r3, [r3, r2]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d103      	bne.n	800ad52 <vQueueDelete+0x32>
		{
			vPortFree( pxQueue );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	0018      	movs	r0, r3
 800ad4e:	f001 fe2f 	bl	800c9b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ad52:	46c0      	nop			@ (mov r8, r8)
 800ad54:	46bd      	mov	sp, r7
 800ad56:	b004      	add	sp, #16
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d006      	beq.n	800ad78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2238      	movs	r2, #56	@ 0x38
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	60fb      	str	r3, [r7, #12]
 800ad76:	e001      	b.n	800ad7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
	}
 800ad7e:	0018      	movs	r0, r3
 800ad80:	46bd      	mov	sp, r7
 800ad82:	b004      	add	sp, #16
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b086      	sub	sp, #24
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d10e      	bne.n	800adc2 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d14e      	bne.n	800ae4a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	0018      	movs	r0, r3
 800adb2:	f000 ffc5 	bl	800bd40 <xTaskPriorityDisinherit>
 800adb6:	0003      	movs	r3, r0
 800adb8:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	609a      	str	r2, [r3, #8]
 800adc0:	e043      	b.n	800ae4a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d119      	bne.n	800adfc <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6858      	ldr	r0, [r3, #4]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	0019      	movs	r1, r3
 800add4:	f001 ffa8 	bl	800cd28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade0:	18d2      	adds	r2, r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d32b      	bcc.n	800ae4a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	605a      	str	r2, [r3, #4]
 800adfa:	e026      	b.n	800ae4a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	68d8      	ldr	r0, [r3, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	0019      	movs	r1, r3
 800ae08:	f001 ff8e 	bl	800cd28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	68da      	ldr	r2, [r3, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae14:	425b      	negs	r3, r3
 800ae16:	18d2      	adds	r2, r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	68da      	ldr	r2, [r3, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d207      	bcs.n	800ae38 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689a      	ldr	r2, [r3, #8]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae30:	425b      	negs	r3, r3
 800ae32:	18d2      	adds	r2, r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d105      	bne.n	800ae4a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ae52:	697b      	ldr	r3, [r7, #20]
}
 800ae54:	0018      	movs	r0, r3
 800ae56:	46bd      	mov	sp, r7
 800ae58:	b006      	add	sp, #24
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d018      	beq.n	800aea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68da      	ldr	r2, [r3, #12]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae76:	18d2      	adds	r2, r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68da      	ldr	r2, [r3, #12]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d303      	bcc.n	800ae90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68d9      	ldr	r1, [r3, #12]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	f001 ff44 	bl	800cd28 <memcpy>
	}
}
 800aea0:	46c0      	nop			@ (mov r8, r8)
 800aea2:	46bd      	mov	sp, r7
 800aea4:	b002      	add	sp, #8
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aeb0:	f001 fc36 	bl	800c720 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aeb4:	230f      	movs	r3, #15
 800aeb6:	18fb      	adds	r3, r7, r3
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	2145      	movs	r1, #69	@ 0x45
 800aebc:	5c52      	ldrb	r2, [r2, r1]
 800aebe:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aec0:	e013      	b.n	800aeea <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d016      	beq.n	800aef8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3324      	adds	r3, #36	@ 0x24
 800aece:	0018      	movs	r0, r3
 800aed0:	f000 fd16 	bl	800b900 <xTaskRemoveFromEventList>
 800aed4:	1e03      	subs	r3, r0, #0
 800aed6:	d001      	beq.n	800aedc <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aed8:	f000 fdd6 	bl	800ba88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aedc:	210f      	movs	r1, #15
 800aede:	187b      	adds	r3, r7, r1
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	187b      	adds	r3, r7, r1
 800aee8:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeea:	230f      	movs	r3, #15
 800aeec:	18fb      	adds	r3, r7, r3
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	b25b      	sxtb	r3, r3
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	dce5      	bgt.n	800aec2 <prvUnlockQueue+0x1a>
 800aef6:	e000      	b.n	800aefa <prvUnlockQueue+0x52>
					break;
 800aef8:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2245      	movs	r2, #69	@ 0x45
 800aefe:	21ff      	movs	r1, #255	@ 0xff
 800af00:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800af02:	f001 fc1f 	bl	800c744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af06:	f001 fc0b 	bl	800c720 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af0a:	230e      	movs	r3, #14
 800af0c:	18fb      	adds	r3, r7, r3
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	2144      	movs	r1, #68	@ 0x44
 800af12:	5c52      	ldrb	r2, [r2, r1]
 800af14:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af16:	e013      	b.n	800af40 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d016      	beq.n	800af4e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	3310      	adds	r3, #16
 800af24:	0018      	movs	r0, r3
 800af26:	f000 fceb 	bl	800b900 <xTaskRemoveFromEventList>
 800af2a:	1e03      	subs	r3, r0, #0
 800af2c:	d001      	beq.n	800af32 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800af2e:	f000 fdab 	bl	800ba88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af32:	210e      	movs	r1, #14
 800af34:	187b      	adds	r3, r7, r1
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	3b01      	subs	r3, #1
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	187b      	adds	r3, r7, r1
 800af3e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af40:	230e      	movs	r3, #14
 800af42:	18fb      	adds	r3, r7, r3
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	b25b      	sxtb	r3, r3
 800af48:	2b00      	cmp	r3, #0
 800af4a:	dce5      	bgt.n	800af18 <prvUnlockQueue+0x70>
 800af4c:	e000      	b.n	800af50 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800af4e:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2244      	movs	r2, #68	@ 0x44
 800af54:	21ff      	movs	r1, #255	@ 0xff
 800af56:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800af58:	f001 fbf4 	bl	800c744 <vPortExitCritical>
}
 800af5c:	46c0      	nop			@ (mov r8, r8)
 800af5e:	46bd      	mov	sp, r7
 800af60:	b004      	add	sp, #16
 800af62:	bd80      	pop	{r7, pc}

0800af64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af6c:	f001 fbd8 	bl	800c720 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af74:	2b00      	cmp	r3, #0
 800af76:	d102      	bne.n	800af7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af78:	2301      	movs	r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]
 800af7c:	e001      	b.n	800af82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af82:	f001 fbdf 	bl	800c744 <vPortExitCritical>

	return xReturn;
 800af86:	68fb      	ldr	r3, [r7, #12]
}
 800af88:	0018      	movs	r0, r3
 800af8a:	46bd      	mov	sp, r7
 800af8c:	b004      	add	sp, #16
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af98:	f001 fbc2 	bl	800c720 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d102      	bne.n	800afae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afa8:	2301      	movs	r3, #1
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	e001      	b.n	800afb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afb2:	f001 fbc7 	bl	800c744 <vPortExitCritical>

	return xReturn;
 800afb6:	68fb      	ldr	r3, [r7, #12]
}
 800afb8:	0018      	movs	r0, r3
 800afba:	46bd      	mov	sp, r7
 800afbc:	b004      	add	sp, #16
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afca:	2300      	movs	r3, #0
 800afcc:	60fb      	str	r3, [r7, #12]
 800afce:	e015      	b.n	800affc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afd0:	4b0e      	ldr	r3, [pc, #56]	@ (800b00c <vQueueAddToRegistry+0x4c>)
 800afd2:	68fa      	ldr	r2, [r7, #12]
 800afd4:	00d2      	lsls	r2, r2, #3
 800afd6:	58d3      	ldr	r3, [r2, r3]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10c      	bne.n	800aff6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afdc:	4b0b      	ldr	r3, [pc, #44]	@ (800b00c <vQueueAddToRegistry+0x4c>)
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	00d2      	lsls	r2, r2, #3
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afe6:	4a09      	ldr	r2, [pc, #36]	@ (800b00c <vQueueAddToRegistry+0x4c>)
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	18d3      	adds	r3, r2, r3
 800afee:	3304      	adds	r3, #4
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aff4:	e006      	b.n	800b004 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	3301      	adds	r3, #1
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2b07      	cmp	r3, #7
 800b000:	d9e6      	bls.n	800afd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b002:	46c0      	nop			@ (mov r8, r8)
 800b004:	46c0      	nop			@ (mov r8, r8)
 800b006:	46bd      	mov	sp, r7
 800b008:	b004      	add	sp, #16
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	200012b0 	.word	0x200012b0

0800b010 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b018:	2300      	movs	r3, #0
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	e018      	b.n	800b050 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b01e:	4a10      	ldr	r2, [pc, #64]	@ (800b060 <vQueueUnregisterQueue+0x50>)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	00db      	lsls	r3, r3, #3
 800b024:	18d3      	adds	r3, r2, r3
 800b026:	3304      	adds	r3, #4
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	687a      	ldr	r2, [r7, #4]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d10c      	bne.n	800b04a <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b030:	4b0b      	ldr	r3, [pc, #44]	@ (800b060 <vQueueUnregisterQueue+0x50>)
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	00d2      	lsls	r2, r2, #3
 800b036:	2100      	movs	r1, #0
 800b038:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b03a:	4a09      	ldr	r2, [pc, #36]	@ (800b060 <vQueueUnregisterQueue+0x50>)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	00db      	lsls	r3, r3, #3
 800b040:	18d3      	adds	r3, r2, r3
 800b042:	3304      	adds	r3, #4
 800b044:	2200      	movs	r2, #0
 800b046:	601a      	str	r2, [r3, #0]
				break;
 800b048:	e006      	b.n	800b058 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3301      	adds	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2b07      	cmp	r3, #7
 800b054:	d9e3      	bls.n	800b01e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b056:	46c0      	nop			@ (mov r8, r8)
 800b058:	46c0      	nop			@ (mov r8, r8)
 800b05a:	46bd      	mov	sp, r7
 800b05c:	b004      	add	sp, #16
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	200012b0 	.word	0x200012b0

0800b064 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b086      	sub	sp, #24
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b074:	f001 fb54 	bl	800c720 <vPortEnterCritical>
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2244      	movs	r2, #68	@ 0x44
 800b07c:	5c9b      	ldrb	r3, [r3, r2]
 800b07e:	b25b      	sxtb	r3, r3
 800b080:	3301      	adds	r3, #1
 800b082:	d103      	bne.n	800b08c <vQueueWaitForMessageRestricted+0x28>
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	2244      	movs	r2, #68	@ 0x44
 800b088:	2100      	movs	r1, #0
 800b08a:	5499      	strb	r1, [r3, r2]
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	2245      	movs	r2, #69	@ 0x45
 800b090:	5c9b      	ldrb	r3, [r3, r2]
 800b092:	b25b      	sxtb	r3, r3
 800b094:	3301      	adds	r3, #1
 800b096:	d103      	bne.n	800b0a0 <vQueueWaitForMessageRestricted+0x3c>
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	2245      	movs	r2, #69	@ 0x45
 800b09c:	2100      	movs	r1, #0
 800b09e:	5499      	strb	r1, [r3, r2]
 800b0a0:	f001 fb50 	bl	800c744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d106      	bne.n	800b0ba <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	3324      	adds	r3, #36	@ 0x24
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	f000 fbfb 	bl	800b8b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f7ff fef3 	bl	800aea8 <prvUnlockQueue>
	}
 800b0c2:	46c0      	nop			@ (mov r8, r8)
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	b006      	add	sp, #24
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0ca:	b590      	push	{r4, r7, lr}
 800b0cc:	b08d      	sub	sp, #52	@ 0x34
 800b0ce:	af04      	add	r7, sp, #16
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	607a      	str	r2, [r7, #4]
 800b0d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d102      	bne.n	800b0e4 <xTaskCreateStatic+0x1a>
 800b0de:	b672      	cpsid	i
 800b0e0:	46c0      	nop			@ (mov r8, r8)
 800b0e2:	e7fd      	b.n	800b0e0 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d102      	bne.n	800b0f0 <xTaskCreateStatic+0x26>
 800b0ea:	b672      	cpsid	i
 800b0ec:	46c0      	nop			@ (mov r8, r8)
 800b0ee:	e7fd      	b.n	800b0ec <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0f0:	23a8      	movs	r3, #168	@ 0xa8
 800b0f2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2ba8      	cmp	r3, #168	@ 0xa8
 800b0f8:	d002      	beq.n	800b100 <xTaskCreateStatic+0x36>
 800b0fa:	b672      	cpsid	i
 800b0fc:	46c0      	nop			@ (mov r8, r8)
 800b0fe:	e7fd      	b.n	800b0fc <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b100:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b104:	2b00      	cmp	r3, #0
 800b106:	d020      	beq.n	800b14a <xTaskCreateStatic+0x80>
 800b108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d01d      	beq.n	800b14a <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b110:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b116:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	22a5      	movs	r2, #165	@ 0xa5
 800b11c:	2102      	movs	r1, #2
 800b11e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b120:	683c      	ldr	r4, [r7, #0]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	68b9      	ldr	r1, [r7, #8]
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	2300      	movs	r3, #0
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	9302      	str	r3, [sp, #8]
 800b130:	2318      	movs	r3, #24
 800b132:	18fb      	adds	r3, r7, r3
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	0023      	movs	r3, r4
 800b13c:	f000 f858 	bl	800b1f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	0018      	movs	r0, r3
 800b144:	f000 f8f6 	bl	800b334 <prvAddNewTaskToReadyList>
 800b148:	e001      	b.n	800b14e <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b14e:	69bb      	ldr	r3, [r7, #24]
	}
 800b150:	0018      	movs	r0, r3
 800b152:	46bd      	mov	sp, r7
 800b154:	b009      	add	sp, #36	@ 0x24
 800b156:	bd90      	pop	{r4, r7, pc}

0800b158 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b158:	b590      	push	{r4, r7, lr}
 800b15a:	b08d      	sub	sp, #52	@ 0x34
 800b15c:	af04      	add	r7, sp, #16
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	603b      	str	r3, [r7, #0]
 800b164:	1dbb      	adds	r3, r7, #6
 800b166:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b168:	1dbb      	adds	r3, r7, #6
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	0018      	movs	r0, r3
 800b170:	f001 fb6e 	bl	800c850 <pvPortMalloc>
 800b174:	0003      	movs	r3, r0
 800b176:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d010      	beq.n	800b1a0 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b17e:	20a8      	movs	r0, #168	@ 0xa8
 800b180:	f001 fb66 	bl	800c850 <pvPortMalloc>
 800b184:	0003      	movs	r3, r0
 800b186:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d003      	beq.n	800b196 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	697a      	ldr	r2, [r7, #20]
 800b192:	631a      	str	r2, [r3, #48]	@ 0x30
 800b194:	e006      	b.n	800b1a4 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	0018      	movs	r0, r3
 800b19a:	f001 fc09 	bl	800c9b0 <vPortFree>
 800b19e:	e001      	b.n	800b1a4 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d01a      	beq.n	800b1e0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	22a5      	movs	r2, #165	@ 0xa5
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b1b2:	1dbb      	adds	r3, r7, #6
 800b1b4:	881a      	ldrh	r2, [r3, #0]
 800b1b6:	683c      	ldr	r4, [r7, #0]
 800b1b8:	68b9      	ldr	r1, [r7, #8]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	9303      	str	r3, [sp, #12]
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	9302      	str	r3, [sp, #8]
 800b1c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	0023      	movs	r3, r4
 800b1ce:	f000 f80f 	bl	800b1f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1d2:	69fb      	ldr	r3, [r7, #28]
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	f000 f8ad 	bl	800b334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	61bb      	str	r3, [r7, #24]
 800b1de:	e002      	b.n	800b1e6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	425b      	negs	r3, r3
 800b1e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1e6:	69bb      	ldr	r3, [r7, #24]
	}
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	b009      	add	sp, #36	@ 0x24
 800b1ee:	bd90      	pop	{r4, r7, pc}

0800b1f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b200:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	001a      	movs	r2, r3
 800b208:	21a5      	movs	r1, #165	@ 0xa5
 800b20a:	f001 fcf9 	bl	800cc00 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4943      	ldr	r1, [pc, #268]	@ (800b324 <prvInitialiseNewTask+0x134>)
 800b216:	468c      	mov	ip, r1
 800b218:	4463      	add	r3, ip
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	18d3      	adds	r3, r2, r3
 800b21e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	2207      	movs	r2, #7
 800b224:	4393      	bics	r3, r2
 800b226:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2207      	movs	r2, #7
 800b22c:	4013      	ands	r3, r2
 800b22e:	d002      	beq.n	800b236 <prvInitialiseNewTask+0x46>
 800b230:	b672      	cpsid	i
 800b232:	46c0      	nop			@ (mov r8, r8)
 800b234:	e7fd      	b.n	800b232 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d020      	beq.n	800b27e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	e013      	b.n	800b26a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	18d3      	adds	r3, r2, r3
 800b248:	7818      	ldrb	r0, [r3, #0]
 800b24a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b24c:	2134      	movs	r1, #52	@ 0x34
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	18d3      	adds	r3, r2, r3
 800b252:	185b      	adds	r3, r3, r1
 800b254:	1c02      	adds	r2, r0, #0
 800b256:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	18d3      	adds	r3, r2, r3
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d006      	beq.n	800b272 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	3301      	adds	r3, #1
 800b268:	617b      	str	r3, [r7, #20]
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b0f      	cmp	r3, #15
 800b26e:	d9e8      	bls.n	800b242 <prvInitialiseNewTask+0x52>
 800b270:	e000      	b.n	800b274 <prvInitialiseNewTask+0x84>
			{
				break;
 800b272:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b276:	2243      	movs	r2, #67	@ 0x43
 800b278:	2100      	movs	r1, #0
 800b27a:	5499      	strb	r1, [r3, r2]
 800b27c:	e003      	b.n	800b286 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	2234      	movs	r2, #52	@ 0x34
 800b282:	2100      	movs	r1, #0
 800b284:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	2b37      	cmp	r3, #55	@ 0x37
 800b28a:	d901      	bls.n	800b290 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b28c:	2337      	movs	r3, #55	@ 0x37
 800b28e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b292:	6a3a      	ldr	r2, [r7, #32]
 800b294:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b298:	6a3a      	ldr	r2, [r7, #32]
 800b29a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29e:	2200      	movs	r2, #0
 800b2a0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a4:	3304      	adds	r3, #4
 800b2a6:	0018      	movs	r0, r3
 800b2a8:	f7fe ffc0 	bl	800a22c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ae:	3318      	adds	r3, #24
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f7fe ffbb 	bl	800a22c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	2238      	movs	r2, #56	@ 0x38
 800b2c0:	1ad2      	subs	r2, r2, r3
 800b2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ce:	22a0      	movs	r2, #160	@ 0xa0
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d6:	22a4      	movs	r2, #164	@ 0xa4
 800b2d8:	2100      	movs	r1, #0
 800b2da:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2de:	3354      	adds	r3, #84	@ 0x54
 800b2e0:	224c      	movs	r2, #76	@ 0x4c
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f001 fc8b 	bl	800cc00 <memset>
 800b2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ec:	4a0e      	ldr	r2, [pc, #56]	@ (800b328 <prvInitialiseNewTask+0x138>)
 800b2ee:	659a      	str	r2, [r3, #88]	@ 0x58
 800b2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f2:	4a0e      	ldr	r2, [pc, #56]	@ (800b32c <prvInitialiseNewTask+0x13c>)
 800b2f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f8:	4a0d      	ldr	r2, [pc, #52]	@ (800b330 <prvInitialiseNewTask+0x140>)
 800b2fa:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	68f9      	ldr	r1, [r7, #12]
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	0018      	movs	r0, r3
 800b304:	f001 f970 	bl	800c5e8 <pxPortInitialiseStack>
 800b308:	0002      	movs	r2, r0
 800b30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b31a:	46c0      	nop			@ (mov r8, r8)
 800b31c:	46bd      	mov	sp, r7
 800b31e:	b006      	add	sp, #24
 800b320:	bd80      	pop	{r7, pc}
 800b322:	46c0      	nop			@ (mov r8, r8)
 800b324:	3fffffff 	.word	0x3fffffff
 800b328:	2000253c 	.word	0x2000253c
 800b32c:	200025a4 	.word	0x200025a4
 800b330:	2000260c 	.word	0x2000260c

0800b334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b33c:	f001 f9f0 	bl	800c720 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b340:	4b2a      	ldr	r3, [pc, #168]	@ (800b3ec <prvAddNewTaskToReadyList+0xb8>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	4b29      	ldr	r3, [pc, #164]	@ (800b3ec <prvAddNewTaskToReadyList+0xb8>)
 800b348:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800b34a:	4b29      	ldr	r3, [pc, #164]	@ (800b3f0 <prvAddNewTaskToReadyList+0xbc>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d109      	bne.n	800b366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b352:	4b27      	ldr	r3, [pc, #156]	@ (800b3f0 <prvAddNewTaskToReadyList+0xbc>)
 800b354:	687a      	ldr	r2, [r7, #4]
 800b356:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b358:	4b24      	ldr	r3, [pc, #144]	@ (800b3ec <prvAddNewTaskToReadyList+0xb8>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d110      	bne.n	800b382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b360:	f000 fbac 	bl	800babc <prvInitialiseTaskLists>
 800b364:	e00d      	b.n	800b382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b366:	4b23      	ldr	r3, [pc, #140]	@ (800b3f4 <prvAddNewTaskToReadyList+0xc0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d109      	bne.n	800b382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b36e:	4b20      	ldr	r3, [pc, #128]	@ (800b3f0 <prvAddNewTaskToReadyList+0xbc>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b378:	429a      	cmp	r2, r3
 800b37a:	d802      	bhi.n	800b382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b37c:	4b1c      	ldr	r3, [pc, #112]	@ (800b3f0 <prvAddNewTaskToReadyList+0xbc>)
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b382:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f8 <prvAddNewTaskToReadyList+0xc4>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	4b1b      	ldr	r3, [pc, #108]	@ (800b3f8 <prvAddNewTaskToReadyList+0xc4>)
 800b38a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b38c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3f8 <prvAddNewTaskToReadyList+0xc4>)
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b398:	4b18      	ldr	r3, [pc, #96]	@ (800b3fc <prvAddNewTaskToReadyList+0xc8>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d903      	bls.n	800b3a8 <prvAddNewTaskToReadyList+0x74>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3a4:	4b15      	ldr	r3, [pc, #84]	@ (800b3fc <prvAddNewTaskToReadyList+0xc8>)
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ac:	0013      	movs	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	189b      	adds	r3, r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4a12      	ldr	r2, [pc, #72]	@ (800b400 <prvAddNewTaskToReadyList+0xcc>)
 800b3b6:	189a      	adds	r2, r3, r2
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	0019      	movs	r1, r3
 800b3be:	0010      	movs	r0, r2
 800b3c0:	f7fe ff3f 	bl	800a242 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3c4:	f001 f9be 	bl	800c744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b3c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b3f4 <prvAddNewTaskToReadyList+0xc0>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d008      	beq.n	800b3e2 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b3d0:	4b07      	ldr	r3, [pc, #28]	@ (800b3f0 <prvAddNewTaskToReadyList+0xbc>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d201      	bcs.n	800b3e2 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b3de:	f001 f98f 	bl	800c700 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3e2:	46c0      	nop			@ (mov r8, r8)
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	b002      	add	sp, #8
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	46c0      	nop			@ (mov r8, r8)
 800b3ec:	200017c4 	.word	0x200017c4
 800b3f0:	200012f0 	.word	0x200012f0
 800b3f4:	200017d0 	.word	0x200017d0
 800b3f8:	200017e0 	.word	0x200017e0
 800b3fc:	200017cc 	.word	0x200017cc
 800b400:	200012f4 	.word	0x200012f4

0800b404 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b40c:	2300      	movs	r3, #0
 800b40e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d011      	beq.n	800b43a <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b416:	4b0d      	ldr	r3, [pc, #52]	@ (800b44c <vTaskDelay+0x48>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d002      	beq.n	800b424 <vTaskDelay+0x20>
 800b41e:	b672      	cpsid	i
 800b420:	46c0      	nop			@ (mov r8, r8)
 800b422:	e7fd      	b.n	800b420 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800b424:	f000 f874 	bl	800b510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2100      	movs	r1, #0
 800b42c:	0018      	movs	r0, r3
 800b42e:	f000 fd69 	bl	800bf04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b432:	f000 f879 	bl	800b528 <xTaskResumeAll>
 800b436:	0003      	movs	r3, r0
 800b438:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 800b440:	f001 f95e 	bl	800c700 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b444:	46c0      	nop			@ (mov r8, r8)
 800b446:	46bd      	mov	sp, r7
 800b448:	b004      	add	sp, #16
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	200017ec 	.word	0x200017ec

0800b450 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b450:	b590      	push	{r4, r7, lr}
 800b452:	b089      	sub	sp, #36	@ 0x24
 800b454:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b456:	2300      	movs	r3, #0
 800b458:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b45a:	2300      	movs	r3, #0
 800b45c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b45e:	003a      	movs	r2, r7
 800b460:	1d39      	adds	r1, r7, #4
 800b462:	2308      	movs	r3, #8
 800b464:	18fb      	adds	r3, r7, r3
 800b466:	0018      	movs	r0, r3
 800b468:	f7fe fe92 	bl	800a190 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b46c:	683c      	ldr	r4, [r7, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	491f      	ldr	r1, [pc, #124]	@ (800b4f0 <vTaskStartScheduler+0xa0>)
 800b474:	481f      	ldr	r0, [pc, #124]	@ (800b4f4 <vTaskStartScheduler+0xa4>)
 800b476:	9202      	str	r2, [sp, #8]
 800b478:	9301      	str	r3, [sp, #4]
 800b47a:	2300      	movs	r3, #0
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	2300      	movs	r3, #0
 800b480:	0022      	movs	r2, r4
 800b482:	f7ff fe22 	bl	800b0ca <xTaskCreateStatic>
 800b486:	0002      	movs	r2, r0
 800b488:	4b1b      	ldr	r3, [pc, #108]	@ (800b4f8 <vTaskStartScheduler+0xa8>)
 800b48a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b48c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4f8 <vTaskStartScheduler+0xa8>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b494:	2301      	movs	r3, #1
 800b496:	60fb      	str	r3, [r7, #12]
 800b498:	e001      	b.n	800b49e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d103      	bne.n	800b4ac <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800b4a4:	f000 fd82 	bl	800bfac <xTimerCreateTimerTask>
 800b4a8:	0003      	movs	r3, r0
 800b4aa:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d113      	bne.n	800b4da <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800b4b2:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4b4:	4b11      	ldr	r3, [pc, #68]	@ (800b4fc <vTaskStartScheduler+0xac>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3354      	adds	r3, #84	@ 0x54
 800b4ba:	001a      	movs	r2, r3
 800b4bc:	4b10      	ldr	r3, [pc, #64]	@ (800b500 <vTaskStartScheduler+0xb0>)
 800b4be:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b4c0:	4b10      	ldr	r3, [pc, #64]	@ (800b504 <vTaskStartScheduler+0xb4>)
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	4252      	negs	r2, r2
 800b4c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b508 <vTaskStartScheduler+0xb8>)
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b50c <vTaskStartScheduler+0xbc>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4d4:	f001 f8f0 	bl	800c6b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4d8:	e005      	b.n	800b4e6 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	d102      	bne.n	800b4e6 <vTaskStartScheduler+0x96>
 800b4e0:	b672      	cpsid	i
 800b4e2:	46c0      	nop			@ (mov r8, r8)
 800b4e4:	e7fd      	b.n	800b4e2 <vTaskStartScheduler+0x92>
}
 800b4e6:	46c0      	nop			@ (mov r8, r8)
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	b005      	add	sp, #20
 800b4ec:	bd90      	pop	{r4, r7, pc}
 800b4ee:	46c0      	nop			@ (mov r8, r8)
 800b4f0:	0800d724 	.word	0x0800d724
 800b4f4:	0800ba9d 	.word	0x0800ba9d
 800b4f8:	200017e8 	.word	0x200017e8
 800b4fc:	200012f0 	.word	0x200012f0
 800b500:	200000e8 	.word	0x200000e8
 800b504:	200017e4 	.word	0x200017e4
 800b508:	200017d0 	.word	0x200017d0
 800b50c:	200017c8 	.word	0x200017c8

0800b510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b514:	4b03      	ldr	r3, [pc, #12]	@ (800b524 <vTaskSuspendAll+0x14>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	4b02      	ldr	r3, [pc, #8]	@ (800b524 <vTaskSuspendAll+0x14>)
 800b51c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b51e:	46c0      	nop			@ (mov r8, r8)
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	200017ec 	.word	0x200017ec

0800b528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b52e:	2300      	movs	r3, #0
 800b530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b532:	2300      	movs	r3, #0
 800b534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b536:	4b3a      	ldr	r3, [pc, #232]	@ (800b620 <xTaskResumeAll+0xf8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d102      	bne.n	800b544 <xTaskResumeAll+0x1c>
 800b53e:	b672      	cpsid	i
 800b540:	46c0      	nop			@ (mov r8, r8)
 800b542:	e7fd      	b.n	800b540 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b544:	f001 f8ec 	bl	800c720 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b548:	4b35      	ldr	r3, [pc, #212]	@ (800b620 <xTaskResumeAll+0xf8>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	1e5a      	subs	r2, r3, #1
 800b54e:	4b34      	ldr	r3, [pc, #208]	@ (800b620 <xTaskResumeAll+0xf8>)
 800b550:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b552:	4b33      	ldr	r3, [pc, #204]	@ (800b620 <xTaskResumeAll+0xf8>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d15b      	bne.n	800b612 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b55a:	4b32      	ldr	r3, [pc, #200]	@ (800b624 <xTaskResumeAll+0xfc>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d057      	beq.n	800b612 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b562:	e02f      	b.n	800b5c4 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b564:	4b30      	ldr	r3, [pc, #192]	@ (800b628 <xTaskResumeAll+0x100>)
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3318      	adds	r3, #24
 800b570:	0018      	movs	r0, r3
 800b572:	f7fe febe 	bl	800a2f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	3304      	adds	r3, #4
 800b57a:	0018      	movs	r0, r3
 800b57c:	f7fe feb9 	bl	800a2f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b584:	4b29      	ldr	r3, [pc, #164]	@ (800b62c <xTaskResumeAll+0x104>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d903      	bls.n	800b594 <xTaskResumeAll+0x6c>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b590:	4b26      	ldr	r3, [pc, #152]	@ (800b62c <xTaskResumeAll+0x104>)
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b598:	0013      	movs	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	189b      	adds	r3, r3, r2
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	4a23      	ldr	r2, [pc, #140]	@ (800b630 <xTaskResumeAll+0x108>)
 800b5a2:	189a      	adds	r2, r3, r2
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	0019      	movs	r1, r3
 800b5aa:	0010      	movs	r0, r2
 800b5ac:	f7fe fe49 	bl	800a242 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5b4:	4b1f      	ldr	r3, [pc, #124]	@ (800b634 <xTaskResumeAll+0x10c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d302      	bcc.n	800b5c4 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800b5be:	4b1e      	ldr	r3, [pc, #120]	@ (800b638 <xTaskResumeAll+0x110>)
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5c4:	4b18      	ldr	r3, [pc, #96]	@ (800b628 <xTaskResumeAll+0x100>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1cb      	bne.n	800b564 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5d2:	f000 fb13 	bl	800bbfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5d6:	4b19      	ldr	r3, [pc, #100]	@ (800b63c <xTaskResumeAll+0x114>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d00f      	beq.n	800b602 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5e2:	f000 f83b 	bl	800b65c <xTaskIncrementTick>
 800b5e6:	1e03      	subs	r3, r0, #0
 800b5e8:	d002      	beq.n	800b5f0 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 800b5ea:	4b13      	ldr	r3, [pc, #76]	@ (800b638 <xTaskResumeAll+0x110>)
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1f2      	bne.n	800b5e2 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b63c <xTaskResumeAll+0x114>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b602:	4b0d      	ldr	r3, [pc, #52]	@ (800b638 <xTaskResumeAll+0x110>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d003      	beq.n	800b612 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b60a:	2301      	movs	r3, #1
 800b60c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b60e:	f001 f877 	bl	800c700 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b612:	f001 f897 	bl	800c744 <vPortExitCritical>

	return xAlreadyYielded;
 800b616:	68bb      	ldr	r3, [r7, #8]
}
 800b618:	0018      	movs	r0, r3
 800b61a:	46bd      	mov	sp, r7
 800b61c:	b004      	add	sp, #16
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	200017ec 	.word	0x200017ec
 800b624:	200017c4 	.word	0x200017c4
 800b628:	20001784 	.word	0x20001784
 800b62c:	200017cc 	.word	0x200017cc
 800b630:	200012f4 	.word	0x200012f4
 800b634:	200012f0 	.word	0x200012f0
 800b638:	200017d8 	.word	0x200017d8
 800b63c:	200017d4 	.word	0x200017d4

0800b640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b646:	4b04      	ldr	r3, [pc, #16]	@ (800b658 <xTaskGetTickCount+0x18>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b64c:	687b      	ldr	r3, [r7, #4]
}
 800b64e:	0018      	movs	r0, r3
 800b650:	46bd      	mov	sp, r7
 800b652:	b002      	add	sp, #8
 800b654:	bd80      	pop	{r7, pc}
 800b656:	46c0      	nop			@ (mov r8, r8)
 800b658:	200017c8 	.word	0x200017c8

0800b65c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b662:	2300      	movs	r3, #0
 800b664:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b666:	4b4a      	ldr	r3, [pc, #296]	@ (800b790 <xTaskIncrementTick+0x134>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d000      	beq.n	800b670 <xTaskIncrementTick+0x14>
 800b66e:	e085      	b.n	800b77c <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b670:	4b48      	ldr	r3, [pc, #288]	@ (800b794 <xTaskIncrementTick+0x138>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b678:	4b46      	ldr	r3, [pc, #280]	@ (800b794 <xTaskIncrementTick+0x138>)
 800b67a:	693a      	ldr	r2, [r7, #16]
 800b67c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d118      	bne.n	800b6b6 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b684:	4b44      	ldr	r3, [pc, #272]	@ (800b798 <xTaskIncrementTick+0x13c>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d002      	beq.n	800b694 <xTaskIncrementTick+0x38>
 800b68e:	b672      	cpsid	i
 800b690:	46c0      	nop			@ (mov r8, r8)
 800b692:	e7fd      	b.n	800b690 <xTaskIncrementTick+0x34>
 800b694:	4b40      	ldr	r3, [pc, #256]	@ (800b798 <xTaskIncrementTick+0x13c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	4b40      	ldr	r3, [pc, #256]	@ (800b79c <xTaskIncrementTick+0x140>)
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	4b3e      	ldr	r3, [pc, #248]	@ (800b798 <xTaskIncrementTick+0x13c>)
 800b6a0:	601a      	str	r2, [r3, #0]
 800b6a2:	4b3e      	ldr	r3, [pc, #248]	@ (800b79c <xTaskIncrementTick+0x140>)
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	601a      	str	r2, [r3, #0]
 800b6a8:	4b3d      	ldr	r3, [pc, #244]	@ (800b7a0 <xTaskIncrementTick+0x144>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	1c5a      	adds	r2, r3, #1
 800b6ae:	4b3c      	ldr	r3, [pc, #240]	@ (800b7a0 <xTaskIncrementTick+0x144>)
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	f000 faa3 	bl	800bbfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6b6:	4b3b      	ldr	r3, [pc, #236]	@ (800b7a4 <xTaskIncrementTick+0x148>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d349      	bcc.n	800b754 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6c0:	4b35      	ldr	r3, [pc, #212]	@ (800b798 <xTaskIncrementTick+0x13c>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d104      	bne.n	800b6d4 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ca:	4b36      	ldr	r3, [pc, #216]	@ (800b7a4 <xTaskIncrementTick+0x148>)
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	4252      	negs	r2, r2
 800b6d0:	601a      	str	r2, [r3, #0]
					break;
 800b6d2:	e03f      	b.n	800b754 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6d4:	4b30      	ldr	r3, [pc, #192]	@ (800b798 <xTaskIncrementTick+0x13c>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d203      	bcs.n	800b6f4 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6ec:	4b2d      	ldr	r3, [pc, #180]	@ (800b7a4 <xTaskIncrementTick+0x148>)
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6f2:	e02f      	b.n	800b754 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	0018      	movs	r0, r3
 800b6fa:	f7fe fdfa 	bl	800a2f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b702:	2b00      	cmp	r3, #0
 800b704:	d004      	beq.n	800b710 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	3318      	adds	r3, #24
 800b70a:	0018      	movs	r0, r3
 800b70c:	f7fe fdf1 	bl	800a2f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b714:	4b24      	ldr	r3, [pc, #144]	@ (800b7a8 <xTaskIncrementTick+0x14c>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	429a      	cmp	r2, r3
 800b71a:	d903      	bls.n	800b724 <xTaskIncrementTick+0xc8>
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b720:	4b21      	ldr	r3, [pc, #132]	@ (800b7a8 <xTaskIncrementTick+0x14c>)
 800b722:	601a      	str	r2, [r3, #0]
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b728:	0013      	movs	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	189b      	adds	r3, r3, r2
 800b72e:	009b      	lsls	r3, r3, #2
 800b730:	4a1e      	ldr	r2, [pc, #120]	@ (800b7ac <xTaskIncrementTick+0x150>)
 800b732:	189a      	adds	r2, r3, r2
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	3304      	adds	r3, #4
 800b738:	0019      	movs	r1, r3
 800b73a:	0010      	movs	r0, r2
 800b73c:	f7fe fd81 	bl	800a242 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b744:	4b1a      	ldr	r3, [pc, #104]	@ (800b7b0 <xTaskIncrementTick+0x154>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d3b8      	bcc.n	800b6c0 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800b74e:	2301      	movs	r3, #1
 800b750:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b752:	e7b5      	b.n	800b6c0 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b754:	4b16      	ldr	r3, [pc, #88]	@ (800b7b0 <xTaskIncrementTick+0x154>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b75a:	4914      	ldr	r1, [pc, #80]	@ (800b7ac <xTaskIncrementTick+0x150>)
 800b75c:	0013      	movs	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	189b      	adds	r3, r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	585b      	ldr	r3, [r3, r1]
 800b766:	2b01      	cmp	r3, #1
 800b768:	d901      	bls.n	800b76e <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 800b76a:	2301      	movs	r3, #1
 800b76c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b76e:	4b11      	ldr	r3, [pc, #68]	@ (800b7b4 <xTaskIncrementTick+0x158>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d007      	beq.n	800b786 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800b776:	2301      	movs	r3, #1
 800b778:	617b      	str	r3, [r7, #20]
 800b77a:	e004      	b.n	800b786 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b77c:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b8 <xTaskIncrementTick+0x15c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	4b0d      	ldr	r3, [pc, #52]	@ (800b7b8 <xTaskIncrementTick+0x15c>)
 800b784:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b786:	697b      	ldr	r3, [r7, #20]
}
 800b788:	0018      	movs	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	b006      	add	sp, #24
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	200017ec 	.word	0x200017ec
 800b794:	200017c8 	.word	0x200017c8
 800b798:	2000177c 	.word	0x2000177c
 800b79c:	20001780 	.word	0x20001780
 800b7a0:	200017dc 	.word	0x200017dc
 800b7a4:	200017e4 	.word	0x200017e4
 800b7a8:	200017cc 	.word	0x200017cc
 800b7ac:	200012f4 	.word	0x200012f4
 800b7b0:	200012f0 	.word	0x200012f0
 800b7b4:	200017d8 	.word	0x200017d8
 800b7b8:	200017d4 	.word	0x200017d4

0800b7bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7c2:	4b25      	ldr	r3, [pc, #148]	@ (800b858 <vTaskSwitchContext+0x9c>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d003      	beq.n	800b7d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7ca:	4b24      	ldr	r3, [pc, #144]	@ (800b85c <vTaskSwitchContext+0xa0>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7d0:	e03e      	b.n	800b850 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b7d2:	4b22      	ldr	r3, [pc, #136]	@ (800b85c <vTaskSwitchContext+0xa0>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d8:	4b21      	ldr	r3, [pc, #132]	@ (800b860 <vTaskSwitchContext+0xa4>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	607b      	str	r3, [r7, #4]
 800b7de:	e008      	b.n	800b7f2 <vTaskSwitchContext+0x36>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <vTaskSwitchContext+0x30>
 800b7e6:	b672      	cpsid	i
 800b7e8:	46c0      	nop			@ (mov r8, r8)
 800b7ea:	e7fd      	b.n	800b7e8 <vTaskSwitchContext+0x2c>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	607b      	str	r3, [r7, #4]
 800b7f2:	491c      	ldr	r1, [pc, #112]	@ (800b864 <vTaskSwitchContext+0xa8>)
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	0013      	movs	r3, r2
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	189b      	adds	r3, r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	585b      	ldr	r3, [r3, r1]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d0ed      	beq.n	800b7e0 <vTaskSwitchContext+0x24>
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	0013      	movs	r3, r2
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	189b      	adds	r3, r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4a15      	ldr	r2, [pc, #84]	@ (800b864 <vTaskSwitchContext+0xa8>)
 800b810:	189b      	adds	r3, r3, r2
 800b812:	603b      	str	r3, [r7, #0]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	605a      	str	r2, [r3, #4]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685a      	ldr	r2, [r3, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	3308      	adds	r3, #8
 800b826:	429a      	cmp	r2, r3
 800b828:	d104      	bne.n	800b834 <vTaskSwitchContext+0x78>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	605a      	str	r2, [r3, #4]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	68da      	ldr	r2, [r3, #12]
 800b83a:	4b0b      	ldr	r3, [pc, #44]	@ (800b868 <vTaskSwitchContext+0xac>)
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	4b08      	ldr	r3, [pc, #32]	@ (800b860 <vTaskSwitchContext+0xa4>)
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b844:	4b08      	ldr	r3, [pc, #32]	@ (800b868 <vTaskSwitchContext+0xac>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	3354      	adds	r3, #84	@ 0x54
 800b84a:	001a      	movs	r2, r3
 800b84c:	4b07      	ldr	r3, [pc, #28]	@ (800b86c <vTaskSwitchContext+0xb0>)
 800b84e:	601a      	str	r2, [r3, #0]
}
 800b850:	46c0      	nop			@ (mov r8, r8)
 800b852:	46bd      	mov	sp, r7
 800b854:	b002      	add	sp, #8
 800b856:	bd80      	pop	{r7, pc}
 800b858:	200017ec 	.word	0x200017ec
 800b85c:	200017d8 	.word	0x200017d8
 800b860:	200017cc 	.word	0x200017cc
 800b864:	200012f4 	.word	0x200012f4
 800b868:	200012f0 	.word	0x200012f0
 800b86c:	200000e8 	.word	0x200000e8

0800b870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d102      	bne.n	800b886 <vTaskPlaceOnEventList+0x16>
 800b880:	b672      	cpsid	i
 800b882:	46c0      	nop			@ (mov r8, r8)
 800b884:	e7fd      	b.n	800b882 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b886:	4b09      	ldr	r3, [pc, #36]	@ (800b8ac <vTaskPlaceOnEventList+0x3c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3318      	adds	r3, #24
 800b88c:	001a      	movs	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	0011      	movs	r1, r2
 800b892:	0018      	movs	r0, r3
 800b894:	f7fe fcf7 	bl	800a286 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2101      	movs	r1, #1
 800b89c:	0018      	movs	r0, r3
 800b89e:	f000 fb31 	bl	800bf04 <prvAddCurrentTaskToDelayedList>
}
 800b8a2:	46c0      	nop			@ (mov r8, r8)
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	b002      	add	sp, #8
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	46c0      	nop			@ (mov r8, r8)
 800b8ac:	200012f0 	.word	0x200012f0

0800b8b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d102      	bne.n	800b8c8 <vTaskPlaceOnEventListRestricted+0x18>
 800b8c2:	b672      	cpsid	i
 800b8c4:	46c0      	nop			@ (mov r8, r8)
 800b8c6:	e7fd      	b.n	800b8c4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b8fc <vTaskPlaceOnEventListRestricted+0x4c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3318      	adds	r3, #24
 800b8ce:	001a      	movs	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	0011      	movs	r1, r2
 800b8d4:	0018      	movs	r0, r3
 800b8d6:	f7fe fcb4 	bl	800a242 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	425b      	negs	r3, r3
 800b8e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	0011      	movs	r1, r2
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	f000 fb09 	bl	800bf04 <prvAddCurrentTaskToDelayedList>
	}
 800b8f2:	46c0      	nop			@ (mov r8, r8)
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	b004      	add	sp, #16
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	46c0      	nop			@ (mov r8, r8)
 800b8fc:	200012f0 	.word	0x200012f0

0800b900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d102      	bne.n	800b91c <xTaskRemoveFromEventList+0x1c>
 800b916:	b672      	cpsid	i
 800b918:	46c0      	nop			@ (mov r8, r8)
 800b91a:	e7fd      	b.n	800b918 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	3318      	adds	r3, #24
 800b920:	0018      	movs	r0, r3
 800b922:	f7fe fce6 	bl	800a2f2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b926:	4b1f      	ldr	r3, [pc, #124]	@ (800b9a4 <xTaskRemoveFromEventList+0xa4>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d11d      	bne.n	800b96a <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	3304      	adds	r3, #4
 800b932:	0018      	movs	r0, r3
 800b934:	f7fe fcdd 	bl	800a2f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b93c:	4b1a      	ldr	r3, [pc, #104]	@ (800b9a8 <xTaskRemoveFromEventList+0xa8>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	429a      	cmp	r2, r3
 800b942:	d903      	bls.n	800b94c <xTaskRemoveFromEventList+0x4c>
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b948:	4b17      	ldr	r3, [pc, #92]	@ (800b9a8 <xTaskRemoveFromEventList+0xa8>)
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b950:	0013      	movs	r3, r2
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	189b      	adds	r3, r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	4a14      	ldr	r2, [pc, #80]	@ (800b9ac <xTaskRemoveFromEventList+0xac>)
 800b95a:	189a      	adds	r2, r3, r2
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	3304      	adds	r3, #4
 800b960:	0019      	movs	r1, r3
 800b962:	0010      	movs	r0, r2
 800b964:	f7fe fc6d 	bl	800a242 <vListInsertEnd>
 800b968:	e007      	b.n	800b97a <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	3318      	adds	r3, #24
 800b96e:	001a      	movs	r2, r3
 800b970:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b0 <xTaskRemoveFromEventList+0xb0>)
 800b972:	0011      	movs	r1, r2
 800b974:	0018      	movs	r0, r3
 800b976:	f7fe fc64 	bl	800a242 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b97e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b4 <xTaskRemoveFromEventList+0xb4>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b984:	429a      	cmp	r2, r3
 800b986:	d905      	bls.n	800b994 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b988:	2301      	movs	r3, #1
 800b98a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b98c:	4b0a      	ldr	r3, [pc, #40]	@ (800b9b8 <xTaskRemoveFromEventList+0xb8>)
 800b98e:	2201      	movs	r2, #1
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	e001      	b.n	800b998 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 800b994:	2300      	movs	r3, #0
 800b996:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800b998:	68fb      	ldr	r3, [r7, #12]
}
 800b99a:	0018      	movs	r0, r3
 800b99c:	46bd      	mov	sp, r7
 800b99e:	b004      	add	sp, #16
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	46c0      	nop			@ (mov r8, r8)
 800b9a4:	200017ec 	.word	0x200017ec
 800b9a8:	200017cc 	.word	0x200017cc
 800b9ac:	200012f4 	.word	0x200012f4
 800b9b0:	20001784 	.word	0x20001784
 800b9b4:	200012f0 	.word	0x200012f0
 800b9b8:	200017d8 	.word	0x200017d8

0800b9bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9c4:	4b05      	ldr	r3, [pc, #20]	@ (800b9dc <vTaskInternalSetTimeOutState+0x20>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9cc:	4b04      	ldr	r3, [pc, #16]	@ (800b9e0 <vTaskInternalSetTimeOutState+0x24>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	605a      	str	r2, [r3, #4]
}
 800b9d4:	46c0      	nop			@ (mov r8, r8)
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	b002      	add	sp, #8
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	200017dc 	.word	0x200017dc
 800b9e0:	200017c8 	.word	0x200017c8

0800b9e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d102      	bne.n	800b9fa <xTaskCheckForTimeOut+0x16>
 800b9f4:	b672      	cpsid	i
 800b9f6:	46c0      	nop			@ (mov r8, r8)
 800b9f8:	e7fd      	b.n	800b9f6 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d102      	bne.n	800ba06 <xTaskCheckForTimeOut+0x22>
 800ba00:	b672      	cpsid	i
 800ba02:	46c0      	nop			@ (mov r8, r8)
 800ba04:	e7fd      	b.n	800ba02 <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 800ba06:	f000 fe8b 	bl	800c720 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba0a:	4b1d      	ldr	r3, [pc, #116]	@ (800ba80 <xTaskCheckForTimeOut+0x9c>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	693a      	ldr	r2, [r7, #16]
 800ba16:	1ad3      	subs	r3, r2, r3
 800ba18:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	d102      	bne.n	800ba28 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba22:	2300      	movs	r3, #0
 800ba24:	617b      	str	r3, [r7, #20]
 800ba26:	e024      	b.n	800ba72 <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	4b15      	ldr	r3, [pc, #84]	@ (800ba84 <xTaskCheckForTimeOut+0xa0>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d007      	beq.n	800ba44 <xTaskCheckForTimeOut+0x60>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d302      	bcc.n	800ba44 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	e016      	b.n	800ba72 <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d20c      	bcs.n	800ba68 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	681a      	ldr	r2, [r3, #0]
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	1ad2      	subs	r2, r2, r3
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	0018      	movs	r0, r3
 800ba5e:	f7ff ffad 	bl	800b9bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba62:	2300      	movs	r3, #0
 800ba64:	617b      	str	r3, [r7, #20]
 800ba66:	e004      	b.n	800ba72 <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800ba72:	f000 fe67 	bl	800c744 <vPortExitCritical>

	return xReturn;
 800ba76:	697b      	ldr	r3, [r7, #20]
}
 800ba78:	0018      	movs	r0, r3
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	b006      	add	sp, #24
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	200017c8 	.word	0x200017c8
 800ba84:	200017dc 	.word	0x200017dc

0800ba88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba8c:	4b02      	ldr	r3, [pc, #8]	@ (800ba98 <vTaskMissedYield+0x10>)
 800ba8e:	2201      	movs	r2, #1
 800ba90:	601a      	str	r2, [r3, #0]
}
 800ba92:	46c0      	nop			@ (mov r8, r8)
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	200017d8 	.word	0x200017d8

0800ba9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800baa4:	f000 f84e 	bl	800bb44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800baa8:	4b03      	ldr	r3, [pc, #12]	@ (800bab8 <prvIdleTask+0x1c>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d9f9      	bls.n	800baa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bab0:	f000 fe26 	bl	800c700 <vPortYield>
		prvCheckTasksWaitingTermination();
 800bab4:	e7f6      	b.n	800baa4 <prvIdleTask+0x8>
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	200012f4 	.word	0x200012f4

0800babc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bac2:	2300      	movs	r3, #0
 800bac4:	607b      	str	r3, [r7, #4]
 800bac6:	e00c      	b.n	800bae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	0013      	movs	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	189b      	adds	r3, r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	4a14      	ldr	r2, [pc, #80]	@ (800bb24 <prvInitialiseTaskLists+0x68>)
 800bad4:	189b      	adds	r3, r3, r2
 800bad6:	0018      	movs	r0, r3
 800bad8:	f7fe fb8a 	bl	800a1f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	3301      	adds	r3, #1
 800bae0:	607b      	str	r3, [r7, #4]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b37      	cmp	r3, #55	@ 0x37
 800bae6:	d9ef      	bls.n	800bac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bae8:	4b0f      	ldr	r3, [pc, #60]	@ (800bb28 <prvInitialiseTaskLists+0x6c>)
 800baea:	0018      	movs	r0, r3
 800baec:	f7fe fb80 	bl	800a1f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800baf0:	4b0e      	ldr	r3, [pc, #56]	@ (800bb2c <prvInitialiseTaskLists+0x70>)
 800baf2:	0018      	movs	r0, r3
 800baf4:	f7fe fb7c 	bl	800a1f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800baf8:	4b0d      	ldr	r3, [pc, #52]	@ (800bb30 <prvInitialiseTaskLists+0x74>)
 800bafa:	0018      	movs	r0, r3
 800bafc:	f7fe fb78 	bl	800a1f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb00:	4b0c      	ldr	r3, [pc, #48]	@ (800bb34 <prvInitialiseTaskLists+0x78>)
 800bb02:	0018      	movs	r0, r3
 800bb04:	f7fe fb74 	bl	800a1f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb08:	4b0b      	ldr	r3, [pc, #44]	@ (800bb38 <prvInitialiseTaskLists+0x7c>)
 800bb0a:	0018      	movs	r0, r3
 800bb0c:	f7fe fb70 	bl	800a1f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb10:	4b0a      	ldr	r3, [pc, #40]	@ (800bb3c <prvInitialiseTaskLists+0x80>)
 800bb12:	4a05      	ldr	r2, [pc, #20]	@ (800bb28 <prvInitialiseTaskLists+0x6c>)
 800bb14:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb16:	4b0a      	ldr	r3, [pc, #40]	@ (800bb40 <prvInitialiseTaskLists+0x84>)
 800bb18:	4a04      	ldr	r2, [pc, #16]	@ (800bb2c <prvInitialiseTaskLists+0x70>)
 800bb1a:	601a      	str	r2, [r3, #0]
}
 800bb1c:	46c0      	nop			@ (mov r8, r8)
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	b002      	add	sp, #8
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	200012f4 	.word	0x200012f4
 800bb28:	20001754 	.word	0x20001754
 800bb2c:	20001768 	.word	0x20001768
 800bb30:	20001784 	.word	0x20001784
 800bb34:	20001798 	.word	0x20001798
 800bb38:	200017b0 	.word	0x200017b0
 800bb3c:	2000177c 	.word	0x2000177c
 800bb40:	20001780 	.word	0x20001780

0800bb44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb4a:	e01a      	b.n	800bb82 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800bb4c:	f000 fde8 	bl	800c720 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb50:	4b10      	ldr	r3, [pc, #64]	@ (800bb94 <prvCheckTasksWaitingTermination+0x50>)
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	0018      	movs	r0, r3
 800bb5e:	f7fe fbc8 	bl	800a2f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb62:	4b0d      	ldr	r3, [pc, #52]	@ (800bb98 <prvCheckTasksWaitingTermination+0x54>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	1e5a      	subs	r2, r3, #1
 800bb68:	4b0b      	ldr	r3, [pc, #44]	@ (800bb98 <prvCheckTasksWaitingTermination+0x54>)
 800bb6a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb6c:	4b0b      	ldr	r3, [pc, #44]	@ (800bb9c <prvCheckTasksWaitingTermination+0x58>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	1e5a      	subs	r2, r3, #1
 800bb72:	4b0a      	ldr	r3, [pc, #40]	@ (800bb9c <prvCheckTasksWaitingTermination+0x58>)
 800bb74:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800bb76:	f000 fde5 	bl	800c744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	f000 f80f 	bl	800bba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb82:	4b06      	ldr	r3, [pc, #24]	@ (800bb9c <prvCheckTasksWaitingTermination+0x58>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1e0      	bne.n	800bb4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb8a:	46c0      	nop			@ (mov r8, r8)
 800bb8c:	46c0      	nop			@ (mov r8, r8)
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	b002      	add	sp, #8
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	20001798 	.word	0x20001798
 800bb98:	200017c4 	.word	0x200017c4
 800bb9c:	200017ac 	.word	0x200017ac

0800bba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3354      	adds	r3, #84	@ 0x54
 800bbac:	0018      	movs	r0, r3
 800bbae:	f001 f82f 	bl	800cc10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	22a5      	movs	r2, #165	@ 0xa5
 800bbb6:	5c9b      	ldrb	r3, [r3, r2]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d109      	bne.n	800bbd0 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f000 fef5 	bl	800c9b0 <vPortFree>
				vPortFree( pxTCB );
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	0018      	movs	r0, r3
 800bbca:	f000 fef1 	bl	800c9b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbce:	e011      	b.n	800bbf4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	22a5      	movs	r2, #165	@ 0xa5
 800bbd4:	5c9b      	ldrb	r3, [r3, r2]
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d104      	bne.n	800bbe4 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f000 fee7 	bl	800c9b0 <vPortFree>
	}
 800bbe2:	e007      	b.n	800bbf4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	22a5      	movs	r2, #165	@ 0xa5
 800bbe8:	5c9b      	ldrb	r3, [r3, r2]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d002      	beq.n	800bbf4 <prvDeleteTCB+0x54>
 800bbee:	b672      	cpsid	i
 800bbf0:	46c0      	nop			@ (mov r8, r8)
 800bbf2:	e7fd      	b.n	800bbf0 <prvDeleteTCB+0x50>
	}
 800bbf4:	46c0      	nop			@ (mov r8, r8)
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	b002      	add	sp, #8
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc02:	4b0b      	ldr	r3, [pc, #44]	@ (800bc30 <prvResetNextTaskUnblockTime+0x34>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d104      	bne.n	800bc16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc0c:	4b09      	ldr	r3, [pc, #36]	@ (800bc34 <prvResetNextTaskUnblockTime+0x38>)
 800bc0e:	2201      	movs	r2, #1
 800bc10:	4252      	negs	r2, r2
 800bc12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc14:	e008      	b.n	800bc28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc16:	4b06      	ldr	r3, [pc, #24]	@ (800bc30 <prvResetNextTaskUnblockTime+0x34>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685a      	ldr	r2, [r3, #4]
 800bc24:	4b03      	ldr	r3, [pc, #12]	@ (800bc34 <prvResetNextTaskUnblockTime+0x38>)
 800bc26:	601a      	str	r2, [r3, #0]
}
 800bc28:	46c0      	nop			@ (mov r8, r8)
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	b002      	add	sp, #8
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	2000177c 	.word	0x2000177c
 800bc34:	200017e4 	.word	0x200017e4

0800bc38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc3e:	4b0a      	ldr	r3, [pc, #40]	@ (800bc68 <xTaskGetSchedulerState+0x30>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d102      	bne.n	800bc4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc46:	2301      	movs	r3, #1
 800bc48:	607b      	str	r3, [r7, #4]
 800bc4a:	e008      	b.n	800bc5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc4c:	4b07      	ldr	r3, [pc, #28]	@ (800bc6c <xTaskGetSchedulerState+0x34>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc54:	2302      	movs	r3, #2
 800bc56:	607b      	str	r3, [r7, #4]
 800bc58:	e001      	b.n	800bc5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc5e:	687b      	ldr	r3, [r7, #4]
	}
 800bc60:	0018      	movs	r0, r3
 800bc62:	46bd      	mov	sp, r7
 800bc64:	b002      	add	sp, #8
 800bc66:	bd80      	pop	{r7, pc}
 800bc68:	200017d0 	.word	0x200017d0
 800bc6c:	200017ec 	.word	0x200017ec

0800bc70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d051      	beq.n	800bd2a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc8a:	4b2a      	ldr	r3, [pc, #168]	@ (800bd34 <xTaskPriorityInherit+0xc4>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d241      	bcs.n	800bd18 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	699b      	ldr	r3, [r3, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	db06      	blt.n	800bcaa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc9c:	4b25      	ldr	r3, [pc, #148]	@ (800bd34 <xTaskPriorityInherit+0xc4>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca2:	2238      	movs	r2, #56	@ 0x38
 800bca4:	1ad2      	subs	r2, r2, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	6959      	ldr	r1, [r3, #20]
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcb2:	0013      	movs	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	189b      	adds	r3, r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4a1f      	ldr	r2, [pc, #124]	@ (800bd38 <xTaskPriorityInherit+0xc8>)
 800bcbc:	189b      	adds	r3, r3, r2
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	d122      	bne.n	800bd08 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	3304      	adds	r3, #4
 800bcc6:	0018      	movs	r0, r3
 800bcc8:	f7fe fb13 	bl	800a2f2 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bccc:	4b19      	ldr	r3, [pc, #100]	@ (800bd34 <xTaskPriorityInherit+0xc4>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcda:	4b18      	ldr	r3, [pc, #96]	@ (800bd3c <xTaskPriorityInherit+0xcc>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d903      	bls.n	800bcea <xTaskPriorityInherit+0x7a>
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce6:	4b15      	ldr	r3, [pc, #84]	@ (800bd3c <xTaskPriorityInherit+0xcc>)
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcee:	0013      	movs	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	189b      	adds	r3, r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4a10      	ldr	r2, [pc, #64]	@ (800bd38 <xTaskPriorityInherit+0xc8>)
 800bcf8:	189a      	adds	r2, r3, r2
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	0019      	movs	r1, r3
 800bd00:	0010      	movs	r0, r2
 800bd02:	f7fe fa9e 	bl	800a242 <vListInsertEnd>
 800bd06:	e004      	b.n	800bd12 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd08:	4b0a      	ldr	r3, [pc, #40]	@ (800bd34 <xTaskPriorityInherit+0xc4>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd12:	2301      	movs	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	e008      	b.n	800bd2a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd1c:	4b05      	ldr	r3, [pc, #20]	@ (800bd34 <xTaskPriorityInherit+0xc4>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d201      	bcs.n	800bd2a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd26:	2301      	movs	r3, #1
 800bd28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
	}
 800bd2c:	0018      	movs	r0, r3
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	b004      	add	sp, #16
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	200012f0 	.word	0x200012f0
 800bd38:	200012f4 	.word	0x200012f4
 800bd3c:	200017cc 	.word	0x200017cc

0800bd40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d046      	beq.n	800bde4 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd56:	4b26      	ldr	r3, [pc, #152]	@ (800bdf0 <xTaskPriorityDisinherit+0xb0>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	d002      	beq.n	800bd66 <xTaskPriorityDisinherit+0x26>
 800bd60:	b672      	cpsid	i
 800bd62:	46c0      	nop			@ (mov r8, r8)
 800bd64:	e7fd      	b.n	800bd62 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d102      	bne.n	800bd74 <xTaskPriorityDisinherit+0x34>
 800bd6e:	b672      	cpsid	i
 800bd70:	46c0      	nop			@ (mov r8, r8)
 800bd72:	e7fd      	b.n	800bd70 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd78:	1e5a      	subs	r2, r3, #1
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d02c      	beq.n	800bde4 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d128      	bne.n	800bde4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	3304      	adds	r3, #4
 800bd96:	0018      	movs	r0, r3
 800bd98:	f7fe faab 	bl	800a2f2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda8:	2238      	movs	r2, #56	@ 0x38
 800bdaa:	1ad2      	subs	r2, r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bdf4 <xTaskPriorityDisinherit+0xb4>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d903      	bls.n	800bdc4 <xTaskPriorityDisinherit+0x84>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdc0:	4b0c      	ldr	r3, [pc, #48]	@ (800bdf4 <xTaskPriorityDisinherit+0xb4>)
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdc8:	0013      	movs	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	189b      	adds	r3, r3, r2
 800bdce:	009b      	lsls	r3, r3, #2
 800bdd0:	4a09      	ldr	r2, [pc, #36]	@ (800bdf8 <xTaskPriorityDisinherit+0xb8>)
 800bdd2:	189a      	adds	r2, r3, r2
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	0019      	movs	r1, r3
 800bdda:	0010      	movs	r0, r2
 800bddc:	f7fe fa31 	bl	800a242 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bde0:	2301      	movs	r3, #1
 800bde2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bde4:	68fb      	ldr	r3, [r7, #12]
	}
 800bde6:	0018      	movs	r0, r3
 800bde8:	46bd      	mov	sp, r7
 800bdea:	b004      	add	sp, #16
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	46c0      	nop			@ (mov r8, r8)
 800bdf0:	200012f0 	.word	0x200012f0
 800bdf4:	200017cc 	.word	0x200017cc
 800bdf8:	200012f4 	.word	0x200012f4

0800bdfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b086      	sub	sp, #24
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be0a:	2301      	movs	r3, #1
 800be0c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d05a      	beq.n	800beca <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d102      	bne.n	800be22 <vTaskPriorityDisinheritAfterTimeout+0x26>
 800be1c:	b672      	cpsid	i
 800be1e:	46c0      	nop			@ (mov r8, r8)
 800be20:	e7fd      	b.n	800be1e <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d902      	bls.n	800be32 <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	617b      	str	r3, [r7, #20]
 800be30:	e002      	b.n	800be38 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be36:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3c:	697a      	ldr	r2, [r7, #20]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d043      	beq.n	800beca <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d13e      	bne.n	800beca <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be4c:	4b21      	ldr	r3, [pc, #132]	@ (800bed4 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	429a      	cmp	r2, r3
 800be54:	d102      	bne.n	800be5c <vTaskPriorityDisinheritAfterTimeout+0x60>
 800be56:	b672      	cpsid	i
 800be58:	46c0      	nop			@ (mov r8, r8)
 800be5a:	e7fd      	b.n	800be58 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be60:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	db04      	blt.n	800be7a <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2238      	movs	r2, #56	@ 0x38
 800be74:	1ad2      	subs	r2, r2, r3
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	6959      	ldr	r1, [r3, #20]
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	0013      	movs	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	189b      	adds	r3, r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4a13      	ldr	r2, [pc, #76]	@ (800bed8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800be8a:	189b      	adds	r3, r3, r2
 800be8c:	4299      	cmp	r1, r3
 800be8e:	d11c      	bne.n	800beca <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	3304      	adds	r3, #4
 800be94:	0018      	movs	r0, r3
 800be96:	f7fe fa2c 	bl	800a2f2 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be9e:	4b0f      	ldr	r3, [pc, #60]	@ (800bedc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d903      	bls.n	800beae <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beaa:	4b0c      	ldr	r3, [pc, #48]	@ (800bedc <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beb2:	0013      	movs	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	189b      	adds	r3, r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	4a07      	ldr	r2, [pc, #28]	@ (800bed8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800bebc:	189a      	adds	r2, r3, r2
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	3304      	adds	r3, #4
 800bec2:	0019      	movs	r1, r3
 800bec4:	0010      	movs	r0, r2
 800bec6:	f7fe f9bc 	bl	800a242 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800beca:	46c0      	nop			@ (mov r8, r8)
 800becc:	46bd      	mov	sp, r7
 800bece:	b006      	add	sp, #24
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	46c0      	nop			@ (mov r8, r8)
 800bed4:	200012f0 	.word	0x200012f0
 800bed8:	200012f4 	.word	0x200012f4
 800bedc:	200017cc 	.word	0x200017cc

0800bee0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bee4:	4b06      	ldr	r3, [pc, #24]	@ (800bf00 <pvTaskIncrementMutexHeldCount+0x20>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d004      	beq.n	800bef6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800beec:	4b04      	ldr	r3, [pc, #16]	@ (800bf00 <pvTaskIncrementMutexHeldCount+0x20>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bef2:	3201      	adds	r2, #1
 800bef4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bef6:	4b02      	ldr	r3, [pc, #8]	@ (800bf00 <pvTaskIncrementMutexHeldCount+0x20>)
 800bef8:	681b      	ldr	r3, [r3, #0]
	}
 800befa:	0018      	movs	r0, r3
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	200012f0 	.word	0x200012f0

0800bf04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf0e:	4b21      	ldr	r3, [pc, #132]	@ (800bf94 <prvAddCurrentTaskToDelayedList+0x90>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf14:	4b20      	ldr	r3, [pc, #128]	@ (800bf98 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	f7fe f9e9 	bl	800a2f2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3301      	adds	r3, #1
 800bf24:	d10b      	bne.n	800bf3e <prvAddCurrentTaskToDelayedList+0x3a>
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d008      	beq.n	800bf3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf2c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf98 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	1d1a      	adds	r2, r3, #4
 800bf32:	4b1a      	ldr	r3, [pc, #104]	@ (800bf9c <prvAddCurrentTaskToDelayedList+0x98>)
 800bf34:	0011      	movs	r1, r2
 800bf36:	0018      	movs	r0, r3
 800bf38:	f7fe f983 	bl	800a242 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf3c:	e026      	b.n	800bf8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	18d3      	adds	r3, r2, r3
 800bf44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf46:	4b14      	ldr	r3, [pc, #80]	@ (800bf98 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	68ba      	ldr	r2, [r7, #8]
 800bf4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf4e:	68ba      	ldr	r2, [r7, #8]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d209      	bcs.n	800bf6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf56:	4b12      	ldr	r3, [pc, #72]	@ (800bfa0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	4b0f      	ldr	r3, [pc, #60]	@ (800bf98 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3304      	adds	r3, #4
 800bf60:	0019      	movs	r1, r3
 800bf62:	0010      	movs	r0, r2
 800bf64:	f7fe f98f 	bl	800a286 <vListInsert>
}
 800bf68:	e010      	b.n	800bf8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf6a:	4b0e      	ldr	r3, [pc, #56]	@ (800bfa4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf98 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	3304      	adds	r3, #4
 800bf74:	0019      	movs	r1, r3
 800bf76:	0010      	movs	r0, r2
 800bf78:	f7fe f985 	bl	800a286 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d202      	bcs.n	800bf8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bf86:	4b08      	ldr	r3, [pc, #32]	@ (800bfa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	601a      	str	r2, [r3, #0]
}
 800bf8c:	46c0      	nop			@ (mov r8, r8)
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	b004      	add	sp, #16
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	200017c8 	.word	0x200017c8
 800bf98:	200012f0 	.word	0x200012f0
 800bf9c:	200017b0 	.word	0x200017b0
 800bfa0:	20001780 	.word	0x20001780
 800bfa4:	2000177c 	.word	0x2000177c
 800bfa8:	200017e4 	.word	0x200017e4

0800bfac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bfac:	b590      	push	{r4, r7, lr}
 800bfae:	b089      	sub	sp, #36	@ 0x24
 800bfb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bfb6:	f000 fad5 	bl	800c564 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bfba:	4b18      	ldr	r3, [pc, #96]	@ (800c01c <xTimerCreateTimerTask+0x70>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d020      	beq.n	800c004 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bfca:	003a      	movs	r2, r7
 800bfcc:	1d39      	adds	r1, r7, #4
 800bfce:	2308      	movs	r3, #8
 800bfd0:	18fb      	adds	r3, r7, r3
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	f7fe f8f4 	bl	800a1c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bfd8:	683c      	ldr	r4, [r7, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	4910      	ldr	r1, [pc, #64]	@ (800c020 <xTimerCreateTimerTask+0x74>)
 800bfe0:	4810      	ldr	r0, [pc, #64]	@ (800c024 <xTimerCreateTimerTask+0x78>)
 800bfe2:	9202      	str	r2, [sp, #8]
 800bfe4:	9301      	str	r3, [sp, #4]
 800bfe6:	2302      	movs	r3, #2
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	2300      	movs	r3, #0
 800bfec:	0022      	movs	r2, r4
 800bfee:	f7ff f86c 	bl	800b0ca <xTaskCreateStatic>
 800bff2:	0002      	movs	r2, r0
 800bff4:	4b0c      	ldr	r3, [pc, #48]	@ (800c028 <xTimerCreateTimerTask+0x7c>)
 800bff6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bff8:	4b0b      	ldr	r3, [pc, #44]	@ (800c028 <xTimerCreateTimerTask+0x7c>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d001      	beq.n	800c004 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800c000:	2301      	movs	r3, #1
 800c002:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d102      	bne.n	800c010 <xTimerCreateTimerTask+0x64>
 800c00a:	b672      	cpsid	i
 800c00c:	46c0      	nop			@ (mov r8, r8)
 800c00e:	e7fd      	b.n	800c00c <xTimerCreateTimerTask+0x60>
	return xReturn;
 800c010:	68fb      	ldr	r3, [r7, #12]
}
 800c012:	0018      	movs	r0, r3
 800c014:	46bd      	mov	sp, r7
 800c016:	b005      	add	sp, #20
 800c018:	bd90      	pop	{r4, r7, pc}
 800c01a:	46c0      	nop			@ (mov r8, r8)
 800c01c:	20001820 	.word	0x20001820
 800c020:	0800d72c 	.word	0x0800d72c
 800c024:	0800c151 	.word	0x0800c151
 800c028:	20001824 	.word	0x20001824

0800c02c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c02c:	b590      	push	{r4, r7, lr}
 800c02e:	b08b      	sub	sp, #44	@ 0x2c
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
 800c038:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d102      	bne.n	800c04a <xTimerGenericCommand+0x1e>
 800c044:	b672      	cpsid	i
 800c046:	46c0      	nop			@ (mov r8, r8)
 800c048:	e7fd      	b.n	800c046 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c04a:	4b1d      	ldr	r3, [pc, #116]	@ (800c0c0 <xTimerGenericCommand+0x94>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d030      	beq.n	800c0b4 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c052:	2414      	movs	r4, #20
 800c054:	193b      	adds	r3, r7, r4
 800c056:	68ba      	ldr	r2, [r7, #8]
 800c058:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c05a:	193b      	adds	r3, r7, r4
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c060:	193b      	adds	r3, r7, r4
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	2b05      	cmp	r3, #5
 800c06a:	dc19      	bgt.n	800c0a0 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c06c:	f7ff fde4 	bl	800bc38 <xTaskGetSchedulerState>
 800c070:	0003      	movs	r3, r0
 800c072:	2b02      	cmp	r3, #2
 800c074:	d109      	bne.n	800c08a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c076:	4b12      	ldr	r3, [pc, #72]	@ (800c0c0 <xTimerGenericCommand+0x94>)
 800c078:	6818      	ldr	r0, [r3, #0]
 800c07a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c07c:	1939      	adds	r1, r7, r4
 800c07e:	2300      	movs	r3, #0
 800c080:	f7fe faac 	bl	800a5dc <xQueueGenericSend>
 800c084:	0003      	movs	r3, r0
 800c086:	627b      	str	r3, [r7, #36]	@ 0x24
 800c088:	e014      	b.n	800c0b4 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c08a:	4b0d      	ldr	r3, [pc, #52]	@ (800c0c0 <xTimerGenericCommand+0x94>)
 800c08c:	6818      	ldr	r0, [r3, #0]
 800c08e:	2314      	movs	r3, #20
 800c090:	18f9      	adds	r1, r7, r3
 800c092:	2300      	movs	r3, #0
 800c094:	2200      	movs	r2, #0
 800c096:	f7fe faa1 	bl	800a5dc <xQueueGenericSend>
 800c09a:	0003      	movs	r3, r0
 800c09c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c09e:	e009      	b.n	800c0b4 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c0a0:	4b07      	ldr	r3, [pc, #28]	@ (800c0c0 <xTimerGenericCommand+0x94>)
 800c0a2:	6818      	ldr	r0, [r3, #0]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	2314      	movs	r3, #20
 800c0a8:	18f9      	adds	r1, r7, r3
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f7fe fb5e 	bl	800a76c <xQueueGenericSendFromISR>
 800c0b0:	0003      	movs	r3, r0
 800c0b2:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c0b6:	0018      	movs	r0, r3
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	b00b      	add	sp, #44	@ 0x2c
 800c0bc:	bd90      	pop	{r4, r7, pc}
 800c0be:	46c0      	nop			@ (mov r8, r8)
 800c0c0:	20001820 	.word	0x20001820

0800c0c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af02      	add	r7, sp, #8
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ce:	4b1f      	ldr	r3, [pc, #124]	@ (800c14c <prvProcessExpiredTimer+0x88>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	68db      	ldr	r3, [r3, #12]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	0018      	movs	r0, r3
 800c0de:	f7fe f908 	bl	800a2f2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2228      	movs	r2, #40	@ 0x28
 800c0e6:	5c9b      	ldrb	r3, [r3, r2]
 800c0e8:	001a      	movs	r2, r3
 800c0ea:	2304      	movs	r3, #4
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	d01a      	beq.n	800c126 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	699a      	ldr	r2, [r3, #24]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	18d1      	adds	r1, r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 f8c7 	bl	800c290 <prvInsertTimerInActiveList>
 800c102:	1e03      	subs	r3, r0, #0
 800c104:	d018      	beq.n	800c138 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	68f8      	ldr	r0, [r7, #12]
 800c10a:	2300      	movs	r3, #0
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	2300      	movs	r3, #0
 800c110:	2100      	movs	r1, #0
 800c112:	f7ff ff8b 	bl	800c02c <xTimerGenericCommand>
 800c116:	0003      	movs	r3, r0
 800c118:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d10b      	bne.n	800c138 <prvProcessExpiredTimer+0x74>
 800c120:	b672      	cpsid	i
 800c122:	46c0      	nop			@ (mov r8, r8)
 800c124:	e7fd      	b.n	800c122 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2228      	movs	r2, #40	@ 0x28
 800c12a:	5c9b      	ldrb	r3, [r3, r2]
 800c12c:	2201      	movs	r2, #1
 800c12e:	4393      	bics	r3, r2
 800c130:	b2d9      	uxtb	r1, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2228      	movs	r2, #40	@ 0x28
 800c136:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6a1b      	ldr	r3, [r3, #32]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	0010      	movs	r0, r2
 800c140:	4798      	blx	r3
}
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	46bd      	mov	sp, r7
 800c146:	b004      	add	sp, #16
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	46c0      	nop			@ (mov r8, r8)
 800c14c:	20001818 	.word	0x20001818

0800c150 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c158:	2308      	movs	r3, #8
 800c15a:	18fb      	adds	r3, r7, r3
 800c15c:	0018      	movs	r0, r3
 800c15e:	f000 f855 	bl	800c20c <prvGetNextExpireTime>
 800c162:	0003      	movs	r3, r0
 800c164:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	0011      	movs	r1, r2
 800c16c:	0018      	movs	r0, r3
 800c16e:	f000 f805 	bl	800c17c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c172:	f000 f8cf 	bl	800c314 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c176:	46c0      	nop			@ (mov r8, r8)
 800c178:	e7ee      	b.n	800c158 <prvTimerTask+0x8>
	...

0800c17c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c186:	f7ff f9c3 	bl	800b510 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c18a:	2308      	movs	r3, #8
 800c18c:	18fb      	adds	r3, r7, r3
 800c18e:	0018      	movs	r0, r3
 800c190:	f000 f85e 	bl	800c250 <prvSampleTimeNow>
 800c194:	0003      	movs	r3, r0
 800c196:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d12b      	bne.n	800c1f6 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10c      	bne.n	800c1be <prvProcessTimerOrBlockTask+0x42>
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d808      	bhi.n	800c1be <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800c1ac:	f7ff f9bc 	bl	800b528 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	0011      	movs	r1, r2
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	f7ff ff84 	bl	800c0c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c1bc:	e01d      	b.n	800c1fa <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d008      	beq.n	800c1d6 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c1c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c204 <prvProcessTimerOrBlockTask+0x88>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <prvProcessTimerOrBlockTask+0x56>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e000      	b.n	800c1d4 <prvProcessTimerOrBlockTask+0x58>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	@ (800c208 <prvProcessTimerOrBlockTask+0x8c>)
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	683a      	ldr	r2, [r7, #0]
 800c1e2:	0019      	movs	r1, r3
 800c1e4:	f7fe ff3e 	bl	800b064 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c1e8:	f7ff f99e 	bl	800b528 <xTaskResumeAll>
 800c1ec:	1e03      	subs	r3, r0, #0
 800c1ee:	d104      	bne.n	800c1fa <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800c1f0:	f000 fa86 	bl	800c700 <vPortYield>
}
 800c1f4:	e001      	b.n	800c1fa <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800c1f6:	f7ff f997 	bl	800b528 <xTaskResumeAll>
}
 800c1fa:	46c0      	nop			@ (mov r8, r8)
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	b004      	add	sp, #16
 800c200:	bd80      	pop	{r7, pc}
 800c202:	46c0      	nop			@ (mov r8, r8)
 800c204:	2000181c 	.word	0x2000181c
 800c208:	20001820 	.word	0x20001820

0800c20c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c214:	4b0d      	ldr	r3, [pc, #52]	@ (800c24c <prvGetNextExpireTime+0x40>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <prvGetNextExpireTime+0x16>
 800c21e:	2201      	movs	r2, #1
 800c220:	e000      	b.n	800c224 <prvGetNextExpireTime+0x18>
 800c222:	2200      	movs	r2, #0
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d105      	bne.n	800c23c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c230:	4b06      	ldr	r3, [pc, #24]	@ (800c24c <prvGetNextExpireTime+0x40>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	e001      	b.n	800c240 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c23c:	2300      	movs	r3, #0
 800c23e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c240:	68fb      	ldr	r3, [r7, #12]
}
 800c242:	0018      	movs	r0, r3
 800c244:	46bd      	mov	sp, r7
 800c246:	b004      	add	sp, #16
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	46c0      	nop			@ (mov r8, r8)
 800c24c:	20001818 	.word	0x20001818

0800c250 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c258:	f7ff f9f2 	bl	800b640 <xTaskGetTickCount>
 800c25c:	0003      	movs	r3, r0
 800c25e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800c260:	4b0a      	ldr	r3, [pc, #40]	@ (800c28c <prvSampleTimeNow+0x3c>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	429a      	cmp	r2, r3
 800c268:	d205      	bcs.n	800c276 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800c26a:	f000 f91d 	bl	800c4a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2201      	movs	r2, #1
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	e002      	b.n	800c27c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c27c:	4b03      	ldr	r3, [pc, #12]	@ (800c28c <prvSampleTimeNow+0x3c>)
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800c282:	68fb      	ldr	r3, [r7, #12]
}
 800c284:	0018      	movs	r0, r3
 800c286:	46bd      	mov	sp, r7
 800c288:	b004      	add	sp, #16
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	20001828 	.word	0x20001828

0800c290 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
 800c29c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c2ae:	68ba      	ldr	r2, [r7, #8]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d812      	bhi.n	800c2dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	1ad2      	subs	r2, r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d302      	bcc.n	800c2ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	617b      	str	r3, [r7, #20]
 800c2c8:	e01b      	b.n	800c302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c2ca:	4b10      	ldr	r3, [pc, #64]	@ (800c30c <prvInsertTimerInActiveList+0x7c>)
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	0019      	movs	r1, r3
 800c2d4:	0010      	movs	r0, r2
 800c2d6:	f7fd ffd6 	bl	800a286 <vListInsert>
 800c2da:	e012      	b.n	800c302 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d206      	bcs.n	800c2f2 <prvInsertTimerInActiveList+0x62>
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d302      	bcc.n	800c2f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	617b      	str	r3, [r7, #20]
 800c2f0:	e007      	b.n	800c302 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2f2:	4b07      	ldr	r3, [pc, #28]	@ (800c310 <prvInsertTimerInActiveList+0x80>)
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3304      	adds	r3, #4
 800c2fa:	0019      	movs	r1, r3
 800c2fc:	0010      	movs	r0, r2
 800c2fe:	f7fd ffc2 	bl	800a286 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c302:	697b      	ldr	r3, [r7, #20]
}
 800c304:	0018      	movs	r0, r3
 800c306:	46bd      	mov	sp, r7
 800c308:	b006      	add	sp, #24
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	2000181c 	.word	0x2000181c
 800c310:	20001818 	.word	0x20001818

0800c314 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c314:	b590      	push	{r4, r7, lr}
 800c316:	b08d      	sub	sp, #52	@ 0x34
 800c318:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c31a:	e0b1      	b.n	800c480 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c31c:	2208      	movs	r2, #8
 800c31e:	18bb      	adds	r3, r7, r2
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	da10      	bge.n	800c348 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c326:	18bb      	adds	r3, r7, r2
 800c328:	3304      	adds	r3, #4
 800c32a:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d102      	bne.n	800c338 <prvProcessReceivedCommands+0x24>
 800c332:	b672      	cpsid	i
 800c334:	46c0      	nop			@ (mov r8, r8)
 800c336:	e7fd      	b.n	800c334 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33e:	6858      	ldr	r0, [r3, #4]
 800c340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c342:	689b      	ldr	r3, [r3, #8]
 800c344:	0019      	movs	r1, r3
 800c346:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c348:	2208      	movs	r2, #8
 800c34a:	18bb      	adds	r3, r7, r2
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	da00      	bge.n	800c354 <prvProcessReceivedCommands+0x40>
 800c352:	e095      	b.n	800c480 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c354:	18bb      	adds	r3, r7, r2
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d004      	beq.n	800c36c <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c362:	6a3b      	ldr	r3, [r7, #32]
 800c364:	3304      	adds	r3, #4
 800c366:	0018      	movs	r0, r3
 800c368:	f7fd ffc3 	bl	800a2f2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c36c:	1d3b      	adds	r3, r7, #4
 800c36e:	0018      	movs	r0, r3
 800c370:	f7ff ff6e 	bl	800c250 <prvSampleTimeNow>
 800c374:	0003      	movs	r3, r0
 800c376:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800c378:	2308      	movs	r3, #8
 800c37a:	18fb      	adds	r3, r7, r3
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2b09      	cmp	r3, #9
 800c380:	d900      	bls.n	800c384 <prvProcessReceivedCommands+0x70>
 800c382:	e07a      	b.n	800c47a <prvProcessReceivedCommands+0x166>
 800c384:	009a      	lsls	r2, r3, #2
 800c386:	4b46      	ldr	r3, [pc, #280]	@ (800c4a0 <prvProcessReceivedCommands+0x18c>)
 800c388:	18d3      	adds	r3, r2, r3
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	2228      	movs	r2, #40	@ 0x28
 800c392:	5c9b      	ldrb	r3, [r3, r2]
 800c394:	2201      	movs	r2, #1
 800c396:	4313      	orrs	r3, r2
 800c398:	b2d9      	uxtb	r1, r3
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	2228      	movs	r2, #40	@ 0x28
 800c39e:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c3a0:	2408      	movs	r4, #8
 800c3a2:	193b      	adds	r3, r7, r4
 800c3a4:	685a      	ldr	r2, [r3, #4]
 800c3a6:	6a3b      	ldr	r3, [r7, #32]
 800c3a8:	699b      	ldr	r3, [r3, #24]
 800c3aa:	18d1      	adds	r1, r2, r3
 800c3ac:	193b      	adds	r3, r7, r4
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	69fa      	ldr	r2, [r7, #28]
 800c3b2:	6a38      	ldr	r0, [r7, #32]
 800c3b4:	f7ff ff6c 	bl	800c290 <prvInsertTimerInActiveList>
 800c3b8:	1e03      	subs	r3, r0, #0
 800c3ba:	d060      	beq.n	800c47e <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	6a1b      	ldr	r3, [r3, #32]
 800c3c0:	6a3a      	ldr	r2, [r7, #32]
 800c3c2:	0010      	movs	r0, r2
 800c3c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3c6:	6a3b      	ldr	r3, [r7, #32]
 800c3c8:	2228      	movs	r2, #40	@ 0x28
 800c3ca:	5c9b      	ldrb	r3, [r3, r2]
 800c3cc:	001a      	movs	r2, r3
 800c3ce:	2304      	movs	r3, #4
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	d054      	beq.n	800c47e <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c3d4:	193b      	adds	r3, r7, r4
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	699b      	ldr	r3, [r3, #24]
 800c3dc:	18d2      	adds	r2, r2, r3
 800c3de:	6a38      	ldr	r0, [r7, #32]
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	2100      	movs	r1, #0
 800c3e8:	f7ff fe20 	bl	800c02c <xTimerGenericCommand>
 800c3ec:	0003      	movs	r3, r0
 800c3ee:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d143      	bne.n	800c47e <prvProcessReceivedCommands+0x16a>
 800c3f6:	b672      	cpsid	i
 800c3f8:	46c0      	nop			@ (mov r8, r8)
 800c3fa:	e7fd      	b.n	800c3f8 <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	2228      	movs	r2, #40	@ 0x28
 800c400:	5c9b      	ldrb	r3, [r3, r2]
 800c402:	2201      	movs	r2, #1
 800c404:	4393      	bics	r3, r2
 800c406:	b2d9      	uxtb	r1, r3
 800c408:	6a3b      	ldr	r3, [r7, #32]
 800c40a:	2228      	movs	r2, #40	@ 0x28
 800c40c:	5499      	strb	r1, [r3, r2]
					break;
 800c40e:	e037      	b.n	800c480 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c410:	6a3b      	ldr	r3, [r7, #32]
 800c412:	2228      	movs	r2, #40	@ 0x28
 800c414:	5c9b      	ldrb	r3, [r3, r2]
 800c416:	2201      	movs	r2, #1
 800c418:	4313      	orrs	r3, r2
 800c41a:	b2d9      	uxtb	r1, r3
 800c41c:	6a3b      	ldr	r3, [r7, #32]
 800c41e:	2228      	movs	r2, #40	@ 0x28
 800c420:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c422:	2308      	movs	r3, #8
 800c424:	18fb      	adds	r3, r7, r3
 800c426:	685a      	ldr	r2, [r3, #4]
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d102      	bne.n	800c43a <prvProcessReceivedCommands+0x126>
 800c434:	b672      	cpsid	i
 800c436:	46c0      	nop			@ (mov r8, r8)
 800c438:	e7fd      	b.n	800c436 <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	699a      	ldr	r2, [r3, #24]
 800c43e:	69fb      	ldr	r3, [r7, #28]
 800c440:	18d1      	adds	r1, r2, r3
 800c442:	69fb      	ldr	r3, [r7, #28]
 800c444:	69fa      	ldr	r2, [r7, #28]
 800c446:	6a38      	ldr	r0, [r7, #32]
 800c448:	f7ff ff22 	bl	800c290 <prvInsertTimerInActiveList>
					break;
 800c44c:	e018      	b.n	800c480 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	2228      	movs	r2, #40	@ 0x28
 800c452:	5c9b      	ldrb	r3, [r3, r2]
 800c454:	001a      	movs	r2, r3
 800c456:	2302      	movs	r3, #2
 800c458:	4013      	ands	r3, r2
 800c45a:	d104      	bne.n	800c466 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800c45c:	6a3b      	ldr	r3, [r7, #32]
 800c45e:	0018      	movs	r0, r3
 800c460:	f000 faa6 	bl	800c9b0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c464:	e00c      	b.n	800c480 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	2228      	movs	r2, #40	@ 0x28
 800c46a:	5c9b      	ldrb	r3, [r3, r2]
 800c46c:	2201      	movs	r2, #1
 800c46e:	4393      	bics	r3, r2
 800c470:	b2d9      	uxtb	r1, r3
 800c472:	6a3b      	ldr	r3, [r7, #32]
 800c474:	2228      	movs	r2, #40	@ 0x28
 800c476:	5499      	strb	r1, [r3, r2]
					break;
 800c478:	e002      	b.n	800c480 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 800c47a:	46c0      	nop			@ (mov r8, r8)
 800c47c:	e000      	b.n	800c480 <prvProcessReceivedCommands+0x16c>
					break;
 800c47e:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c480:	4b08      	ldr	r3, [pc, #32]	@ (800c4a4 <prvProcessReceivedCommands+0x190>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2208      	movs	r2, #8
 800c486:	18b9      	adds	r1, r7, r2
 800c488:	2200      	movs	r2, #0
 800c48a:	0018      	movs	r0, r3
 800c48c:	f7fe fa4d 	bl	800a92a <xQueueReceive>
 800c490:	1e03      	subs	r3, r0, #0
 800c492:	d000      	beq.n	800c496 <prvProcessReceivedCommands+0x182>
 800c494:	e742      	b.n	800c31c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c496:	46c0      	nop			@ (mov r8, r8)
 800c498:	46c0      	nop			@ (mov r8, r8)
 800c49a:	46bd      	mov	sp, r7
 800c49c:	b00b      	add	sp, #44	@ 0x2c
 800c49e:	bd90      	pop	{r4, r7, pc}
 800c4a0:	0800d8bc 	.word	0x0800d8bc
 800c4a4:	20001820 	.word	0x20001820

0800c4a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4ae:	e042      	b.n	800c536 <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4b0:	4b2a      	ldr	r3, [pc, #168]	@ (800c55c <prvSwitchTimerLists+0xb4>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ba:	4b28      	ldr	r3, [pc, #160]	@ (800c55c <prvSwitchTimerLists+0xb4>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	0018      	movs	r0, r3
 800c4ca:	f7fd ff12 	bl	800a2f2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	0010      	movs	r0, r2
 800c4d6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2228      	movs	r2, #40	@ 0x28
 800c4dc:	5c9b      	ldrb	r3, [r3, r2]
 800c4de:	001a      	movs	r2, r3
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	4013      	ands	r3, r2
 800c4e4:	d027      	beq.n	800c536 <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	693a      	ldr	r2, [r7, #16]
 800c4ec:	18d3      	adds	r3, r2, r3
 800c4ee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d90e      	bls.n	800c516 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c504:	4b15      	ldr	r3, [pc, #84]	@ (800c55c <prvSwitchTimerLists+0xb4>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	3304      	adds	r3, #4
 800c50c:	0019      	movs	r1, r3
 800c50e:	0010      	movs	r0, r2
 800c510:	f7fd feb9 	bl	800a286 <vListInsert>
 800c514:	e00f      	b.n	800c536 <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c516:	693a      	ldr	r2, [r7, #16]
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	2300      	movs	r3, #0
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	2300      	movs	r3, #0
 800c520:	2100      	movs	r1, #0
 800c522:	f7ff fd83 	bl	800c02c <xTimerGenericCommand>
 800c526:	0003      	movs	r3, r0
 800c528:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d102      	bne.n	800c536 <prvSwitchTimerLists+0x8e>
 800c530:	b672      	cpsid	i
 800c532:	46c0      	nop			@ (mov r8, r8)
 800c534:	e7fd      	b.n	800c532 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c536:	4b09      	ldr	r3, [pc, #36]	@ (800c55c <prvSwitchTimerLists+0xb4>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1b7      	bne.n	800c4b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c540:	4b06      	ldr	r3, [pc, #24]	@ (800c55c <prvSwitchTimerLists+0xb4>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c546:	4b06      	ldr	r3, [pc, #24]	@ (800c560 <prvSwitchTimerLists+0xb8>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	4b04      	ldr	r3, [pc, #16]	@ (800c55c <prvSwitchTimerLists+0xb4>)
 800c54c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800c54e:	4b04      	ldr	r3, [pc, #16]	@ (800c560 <prvSwitchTimerLists+0xb8>)
 800c550:	697a      	ldr	r2, [r7, #20]
 800c552:	601a      	str	r2, [r3, #0]
}
 800c554:	46c0      	nop			@ (mov r8, r8)
 800c556:	46bd      	mov	sp, r7
 800c558:	b006      	add	sp, #24
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	20001818 	.word	0x20001818
 800c560:	2000181c 	.word	0x2000181c

0800c564 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c56a:	f000 f8d9 	bl	800c720 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c56e:	4b16      	ldr	r3, [pc, #88]	@ (800c5c8 <prvCheckForValidListAndQueue+0x64>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d123      	bne.n	800c5be <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800c576:	4b15      	ldr	r3, [pc, #84]	@ (800c5cc <prvCheckForValidListAndQueue+0x68>)
 800c578:	0018      	movs	r0, r3
 800c57a:	f7fd fe39 	bl	800a1f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c57e:	4b14      	ldr	r3, [pc, #80]	@ (800c5d0 <prvCheckForValidListAndQueue+0x6c>)
 800c580:	0018      	movs	r0, r3
 800c582:	f7fd fe35 	bl	800a1f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c586:	4b13      	ldr	r3, [pc, #76]	@ (800c5d4 <prvCheckForValidListAndQueue+0x70>)
 800c588:	4a10      	ldr	r2, [pc, #64]	@ (800c5cc <prvCheckForValidListAndQueue+0x68>)
 800c58a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c58c:	4b12      	ldr	r3, [pc, #72]	@ (800c5d8 <prvCheckForValidListAndQueue+0x74>)
 800c58e:	4a10      	ldr	r2, [pc, #64]	@ (800c5d0 <prvCheckForValidListAndQueue+0x6c>)
 800c590:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c592:	4b12      	ldr	r3, [pc, #72]	@ (800c5dc <prvCheckForValidListAndQueue+0x78>)
 800c594:	4a12      	ldr	r2, [pc, #72]	@ (800c5e0 <prvCheckForValidListAndQueue+0x7c>)
 800c596:	2100      	movs	r1, #0
 800c598:	9100      	str	r1, [sp, #0]
 800c59a:	2110      	movs	r1, #16
 800c59c:	200a      	movs	r0, #10
 800c59e:	f7fd ff25 	bl	800a3ec <xQueueGenericCreateStatic>
 800c5a2:	0002      	movs	r2, r0
 800c5a4:	4b08      	ldr	r3, [pc, #32]	@ (800c5c8 <prvCheckForValidListAndQueue+0x64>)
 800c5a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c5a8:	4b07      	ldr	r3, [pc, #28]	@ (800c5c8 <prvCheckForValidListAndQueue+0x64>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d006      	beq.n	800c5be <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c5b0:	4b05      	ldr	r3, [pc, #20]	@ (800c5c8 <prvCheckForValidListAndQueue+0x64>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a0b      	ldr	r2, [pc, #44]	@ (800c5e4 <prvCheckForValidListAndQueue+0x80>)
 800c5b6:	0011      	movs	r1, r2
 800c5b8:	0018      	movs	r0, r3
 800c5ba:	f7fe fd01 	bl	800afc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c5be:	f000 f8c1 	bl	800c744 <vPortExitCritical>
}
 800c5c2:	46c0      	nop			@ (mov r8, r8)
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	20001820 	.word	0x20001820
 800c5cc:	200017f0 	.word	0x200017f0
 800c5d0:	20001804 	.word	0x20001804
 800c5d4:	20001818 	.word	0x20001818
 800c5d8:	2000181c 	.word	0x2000181c
 800c5dc:	200018cc 	.word	0x200018cc
 800c5e0:	2000182c 	.word	0x2000182c
 800c5e4:	0800d734 	.word	0x0800d734

0800c5e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	60f8      	str	r0, [r7, #12]
 800c5f0:	60b9      	str	r1, [r7, #8]
 800c5f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	3b04      	subs	r3, #4
 800c5f8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	2280      	movs	r2, #128	@ 0x80
 800c5fe:	0452      	lsls	r2, r2, #17
 800c600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	3b04      	subs	r3, #4
 800c606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	3b04      	subs	r3, #4
 800c612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c614:	4a08      	ldr	r2, [pc, #32]	@ (800c638 <pxPortInitialiseStack+0x50>)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	3b14      	subs	r3, #20
 800c61e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3b20      	subs	r3, #32
 800c62a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c62c:	68fb      	ldr	r3, [r7, #12]
}
 800c62e:	0018      	movs	r0, r3
 800c630:	46bd      	mov	sp, r7
 800c632:	b004      	add	sp, #16
 800c634:	bd80      	pop	{r7, pc}
 800c636:	46c0      	nop			@ (mov r8, r8)
 800c638:	0800c63d 	.word	0x0800c63d

0800c63c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800c642:	2300      	movs	r3, #0
 800c644:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c646:	4b08      	ldr	r3, [pc, #32]	@ (800c668 <prvTaskExitError+0x2c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	3301      	adds	r3, #1
 800c64c:	d002      	beq.n	800c654 <prvTaskExitError+0x18>
 800c64e:	b672      	cpsid	i
 800c650:	46c0      	nop			@ (mov r8, r8)
 800c652:	e7fd      	b.n	800c650 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800c654:	b672      	cpsid	i
	while( ulDummy == 0 )
 800c656:	46c0      	nop			@ (mov r8, r8)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d0fc      	beq.n	800c658 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c65e:	46c0      	nop			@ (mov r8, r8)
 800c660:	46c0      	nop			@ (mov r8, r8)
 800c662:	46bd      	mov	sp, r7
 800c664:	b002      	add	sp, #8
 800c666:	bd80      	pop	{r7, pc}
 800c668:	200000e4 	.word	0x200000e4

0800c66c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800c670:	46c0      	nop			@ (mov r8, r8)
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
	...

0800c680 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800c680:	4a0b      	ldr	r2, [pc, #44]	@ (800c6b0 <pxCurrentTCBConst2>)
 800c682:	6813      	ldr	r3, [r2, #0]
 800c684:	6818      	ldr	r0, [r3, #0]
 800c686:	3020      	adds	r0, #32
 800c688:	f380 8809 	msr	PSP, r0
 800c68c:	2002      	movs	r0, #2
 800c68e:	f380 8814 	msr	CONTROL, r0
 800c692:	f3bf 8f6f 	isb	sy
 800c696:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800c698:	46ae      	mov	lr, r5
 800c69a:	bc08      	pop	{r3}
 800c69c:	bc04      	pop	{r2}
 800c69e:	b662      	cpsie	i
 800c6a0:	4718      	bx	r3
 800c6a2:	46c0      	nop			@ (mov r8, r8)
 800c6a4:	46c0      	nop			@ (mov r8, r8)
 800c6a6:	46c0      	nop			@ (mov r8, r8)
 800c6a8:	46c0      	nop			@ (mov r8, r8)
 800c6aa:	46c0      	nop			@ (mov r8, r8)
 800c6ac:	46c0      	nop			@ (mov r8, r8)
 800c6ae:	46c0      	nop			@ (mov r8, r8)

0800c6b0 <pxCurrentTCBConst2>:
 800c6b0:	200012f0 	.word	0x200012f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800c6b4:	46c0      	nop			@ (mov r8, r8)
 800c6b6:	46c0      	nop			@ (mov r8, r8)

0800c6b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6bc:	4b0e      	ldr	r3, [pc, #56]	@ (800c6f8 <xPortStartScheduler+0x40>)
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	4b0d      	ldr	r3, [pc, #52]	@ (800c6f8 <xPortStartScheduler+0x40>)
 800c6c2:	21ff      	movs	r1, #255	@ 0xff
 800c6c4:	0409      	lsls	r1, r1, #16
 800c6c6:	430a      	orrs	r2, r1
 800c6c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c6f8 <xPortStartScheduler+0x40>)
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f8 <xPortStartScheduler+0x40>)
 800c6d0:	21ff      	movs	r1, #255	@ 0xff
 800c6d2:	0609      	lsls	r1, r1, #24
 800c6d4:	430a      	orrs	r2, r1
 800c6d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6d8:	f000 f898 	bl	800c80c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6dc:	4b07      	ldr	r3, [pc, #28]	@ (800c6fc <xPortStartScheduler+0x44>)
 800c6de:	2200      	movs	r2, #0
 800c6e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800c6e2:	f7ff ffcd 	bl	800c680 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6e6:	f7ff f869 	bl	800b7bc <vTaskSwitchContext>
	prvTaskExitError();
 800c6ea:	f7ff ffa7 	bl	800c63c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	0018      	movs	r0, r3
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	46c0      	nop			@ (mov r8, r8)
 800c6f8:	e000ed20 	.word	0xe000ed20
 800c6fc:	200000e4 	.word	0x200000e4

0800c700 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c704:	4b05      	ldr	r3, [pc, #20]	@ (800c71c <vPortYield+0x1c>)
 800c706:	2280      	movs	r2, #128	@ 0x80
 800c708:	0552      	lsls	r2, r2, #21
 800c70a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800c70c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c710:	f3bf 8f6f 	isb	sy
}
 800c714:	46c0      	nop			@ (mov r8, r8)
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	46c0      	nop			@ (mov r8, r8)
 800c71c:	e000ed04 	.word	0xe000ed04

0800c720 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800c724:	b672      	cpsid	i
	uxCriticalNesting++;
 800c726:	4b06      	ldr	r3, [pc, #24]	@ (800c740 <vPortEnterCritical+0x20>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	4b04      	ldr	r3, [pc, #16]	@ (800c740 <vPortEnterCritical+0x20>)
 800c72e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800c730:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800c734:	f3bf 8f6f 	isb	sy
}
 800c738:	46c0      	nop			@ (mov r8, r8)
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	46c0      	nop			@ (mov r8, r8)
 800c740:	200000e4 	.word	0x200000e4

0800c744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c744:	b580      	push	{r7, lr}
 800c746:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c748:	4b09      	ldr	r3, [pc, #36]	@ (800c770 <vPortExitCritical+0x2c>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d102      	bne.n	800c756 <vPortExitCritical+0x12>
 800c750:	b672      	cpsid	i
 800c752:	46c0      	nop			@ (mov r8, r8)
 800c754:	e7fd      	b.n	800c752 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800c756:	4b06      	ldr	r3, [pc, #24]	@ (800c770 <vPortExitCritical+0x2c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	1e5a      	subs	r2, r3, #1
 800c75c:	4b04      	ldr	r3, [pc, #16]	@ (800c770 <vPortExitCritical+0x2c>)
 800c75e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800c760:	4b03      	ldr	r3, [pc, #12]	@ (800c770 <vPortExitCritical+0x2c>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d100      	bne.n	800c76a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 800c768:	b662      	cpsie	i
	}
}
 800c76a:	46c0      	nop			@ (mov r8, r8)
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	200000e4 	.word	0x200000e4

0800c774 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800c774:	f3ef 8010 	mrs	r0, PRIMASK
 800c778:	b672      	cpsid	i
 800c77a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c77c:	46c0      	nop			@ (mov r8, r8)
 800c77e:	0018      	movs	r0, r3

0800c780 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800c780:	f380 8810 	msr	PRIMASK, r0
 800c784:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800c786:	46c0      	nop			@ (mov r8, r8)
	...

0800c790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c790:	f3ef 8009 	mrs	r0, PSP
 800c794:	4b0e      	ldr	r3, [pc, #56]	@ (800c7d0 <pxCurrentTCBConst>)
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	3820      	subs	r0, #32
 800c79a:	6010      	str	r0, [r2, #0]
 800c79c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c79e:	4644      	mov	r4, r8
 800c7a0:	464d      	mov	r5, r9
 800c7a2:	4656      	mov	r6, sl
 800c7a4:	465f      	mov	r7, fp
 800c7a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800c7a8:	b508      	push	{r3, lr}
 800c7aa:	b672      	cpsid	i
 800c7ac:	f7ff f806 	bl	800b7bc <vTaskSwitchContext>
 800c7b0:	b662      	cpsie	i
 800c7b2:	bc0c      	pop	{r2, r3}
 800c7b4:	6811      	ldr	r1, [r2, #0]
 800c7b6:	6808      	ldr	r0, [r1, #0]
 800c7b8:	3010      	adds	r0, #16
 800c7ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c7bc:	46a0      	mov	r8, r4
 800c7be:	46a9      	mov	r9, r5
 800c7c0:	46b2      	mov	sl, r6
 800c7c2:	46bb      	mov	fp, r7
 800c7c4:	f380 8809 	msr	PSP, r0
 800c7c8:	3820      	subs	r0, #32
 800c7ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800c7cc:	4718      	bx	r3
 800c7ce:	46c0      	nop			@ (mov r8, r8)

0800c7d0 <pxCurrentTCBConst>:
 800c7d0:	200012f0 	.word	0x200012f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800c7d4:	46c0      	nop			@ (mov r8, r8)
 800c7d6:	46c0      	nop			@ (mov r8, r8)

0800c7d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7de:	f7ff ffc9 	bl	800c774 <ulSetInterruptMaskFromISR>
 800c7e2:	0003      	movs	r3, r0
 800c7e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7e6:	f7fe ff39 	bl	800b65c <xTaskIncrementTick>
 800c7ea:	1e03      	subs	r3, r0, #0
 800c7ec:	d003      	beq.n	800c7f6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7ee:	4b06      	ldr	r3, [pc, #24]	@ (800c808 <xPortSysTickHandler+0x30>)
 800c7f0:	2280      	movs	r2, #128	@ 0x80
 800c7f2:	0552      	lsls	r2, r2, #21
 800c7f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	f7ff ffc1 	bl	800c780 <vClearInterruptMaskFromISR>
}
 800c7fe:	46c0      	nop			@ (mov r8, r8)
 800c800:	46bd      	mov	sp, r7
 800c802:	b002      	add	sp, #8
 800c804:	bd80      	pop	{r7, pc}
 800c806:	46c0      	nop			@ (mov r8, r8)
 800c808:	e000ed04 	.word	0xe000ed04

0800c80c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c810:	4b0b      	ldr	r3, [pc, #44]	@ (800c840 <vPortSetupTimerInterrupt+0x34>)
 800c812:	2200      	movs	r2, #0
 800c814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c816:	4b0b      	ldr	r3, [pc, #44]	@ (800c844 <vPortSetupTimerInterrupt+0x38>)
 800c818:	2200      	movs	r2, #0
 800c81a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c81c:	4b0a      	ldr	r3, [pc, #40]	@ (800c848 <vPortSetupTimerInterrupt+0x3c>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	22fa      	movs	r2, #250	@ 0xfa
 800c822:	0091      	lsls	r1, r2, #2
 800c824:	0018      	movs	r0, r3
 800c826:	f7f3 fc79 	bl	800011c <__udivsi3>
 800c82a:	0003      	movs	r3, r0
 800c82c:	001a      	movs	r2, r3
 800c82e:	4b07      	ldr	r3, [pc, #28]	@ (800c84c <vPortSetupTimerInterrupt+0x40>)
 800c830:	3a01      	subs	r2, #1
 800c832:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800c834:	4b02      	ldr	r3, [pc, #8]	@ (800c840 <vPortSetupTimerInterrupt+0x34>)
 800c836:	2207      	movs	r2, #7
 800c838:	601a      	str	r2, [r3, #0]
}
 800c83a:	46c0      	nop			@ (mov r8, r8)
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	e000e010 	.word	0xe000e010
 800c844:	e000e018 	.word	0xe000e018
 800c848:	200000c0 	.word	0x200000c0
 800c84c:	e000e014 	.word	0xe000e014

0800c850 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b086      	sub	sp, #24
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c858:	2300      	movs	r3, #0
 800c85a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800c85c:	f7fe fe58 	bl	800b510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c860:	4b4d      	ldr	r3, [pc, #308]	@ (800c998 <pvPortMalloc+0x148>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d101      	bne.n	800c86c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c868:	f000 f8f2 	bl	800ca50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c86c:	4b4b      	ldr	r3, [pc, #300]	@ (800c99c <pvPortMalloc+0x14c>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	4013      	ands	r3, r2
 800c874:	d000      	beq.n	800c878 <pvPortMalloc+0x28>
 800c876:	e080      	b.n	800c97a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d013      	beq.n	800c8a6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800c87e:	2208      	movs	r2, #8
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	189b      	adds	r3, r3, r2
 800c884:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2207      	movs	r2, #7
 800c88a:	4013      	ands	r3, r2
 800c88c:	d00b      	beq.n	800c8a6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2207      	movs	r2, #7
 800c892:	4393      	bics	r3, r2
 800c894:	3308      	adds	r3, #8
 800c896:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2207      	movs	r2, #7
 800c89c:	4013      	ands	r3, r2
 800c89e:	d002      	beq.n	800c8a6 <pvPortMalloc+0x56>
 800c8a0:	b672      	cpsid	i
 800c8a2:	46c0      	nop			@ (mov r8, r8)
 800c8a4:	e7fd      	b.n	800c8a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d066      	beq.n	800c97a <pvPortMalloc+0x12a>
 800c8ac:	4b3c      	ldr	r3, [pc, #240]	@ (800c9a0 <pvPortMalloc+0x150>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d861      	bhi.n	800c97a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8b6:	4b3b      	ldr	r3, [pc, #236]	@ (800c9a4 <pvPortMalloc+0x154>)
 800c8b8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800c8ba:	4b3a      	ldr	r3, [pc, #232]	@ (800c9a4 <pvPortMalloc+0x154>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8c0:	e004      	b.n	800c8cc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	687a      	ldr	r2, [r7, #4]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d903      	bls.n	800c8de <pvPortMalloc+0x8e>
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1f1      	bne.n	800c8c2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8de:	4b2e      	ldr	r3, [pc, #184]	@ (800c998 <pvPortMalloc+0x148>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	697a      	ldr	r2, [r7, #20]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d048      	beq.n	800c97a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2208      	movs	r2, #8
 800c8ee:	189b      	adds	r3, r3, r2
 800c8f0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	685a      	ldr	r2, [r3, #4]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	1ad2      	subs	r2, r2, r3
 800c902:	2308      	movs	r3, #8
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	429a      	cmp	r2, r3
 800c908:	d917      	bls.n	800c93a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	18d3      	adds	r3, r2, r3
 800c910:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	2207      	movs	r2, #7
 800c916:	4013      	ands	r3, r2
 800c918:	d002      	beq.n	800c920 <pvPortMalloc+0xd0>
 800c91a:	b672      	cpsid	i
 800c91c:	46c0      	nop			@ (mov r8, r8)
 800c91e:	e7fd      	b.n	800c91c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	1ad2      	subs	r2, r2, r3
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c932:	68bb      	ldr	r3, [r7, #8]
 800c934:	0018      	movs	r0, r3
 800c936:	f000 f8eb 	bl	800cb10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c93a:	4b19      	ldr	r3, [pc, #100]	@ (800c9a0 <pvPortMalloc+0x150>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	1ad2      	subs	r2, r2, r3
 800c944:	4b16      	ldr	r3, [pc, #88]	@ (800c9a0 <pvPortMalloc+0x150>)
 800c946:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c948:	4b15      	ldr	r3, [pc, #84]	@ (800c9a0 <pvPortMalloc+0x150>)
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	4b16      	ldr	r3, [pc, #88]	@ (800c9a8 <pvPortMalloc+0x158>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	429a      	cmp	r2, r3
 800c952:	d203      	bcs.n	800c95c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c954:	4b12      	ldr	r3, [pc, #72]	@ (800c9a0 <pvPortMalloc+0x150>)
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	4b13      	ldr	r3, [pc, #76]	@ (800c9a8 <pvPortMalloc+0x158>)
 800c95a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	4b0e      	ldr	r3, [pc, #56]	@ (800c99c <pvPortMalloc+0x14c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	431a      	orrs	r2, r3
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2200      	movs	r2, #0
 800c96e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c970:	4b0e      	ldr	r3, [pc, #56]	@ (800c9ac <pvPortMalloc+0x15c>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	4b0d      	ldr	r3, [pc, #52]	@ (800c9ac <pvPortMalloc+0x15c>)
 800c978:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c97a:	f7fe fdd5 	bl	800b528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2207      	movs	r2, #7
 800c982:	4013      	ands	r3, r2
 800c984:	d002      	beq.n	800c98c <pvPortMalloc+0x13c>
 800c986:	b672      	cpsid	i
 800c988:	46c0      	nop			@ (mov r8, r8)
 800c98a:	e7fd      	b.n	800c988 <pvPortMalloc+0x138>
	return pvReturn;
 800c98c:	68fb      	ldr	r3, [r7, #12]
}
 800c98e:	0018      	movs	r0, r3
 800c990:	46bd      	mov	sp, r7
 800c992:	b006      	add	sp, #24
 800c994:	bd80      	pop	{r7, pc}
 800c996:	46c0      	nop			@ (mov r8, r8)
 800c998:	20002524 	.word	0x20002524
 800c99c:	20002538 	.word	0x20002538
 800c9a0:	20002528 	.word	0x20002528
 800c9a4:	2000251c 	.word	0x2000251c
 800c9a8:	2000252c 	.word	0x2000252c
 800c9ac:	20002530 	.word	0x20002530

0800c9b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d03c      	beq.n	800ca3c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9c2:	2308      	movs	r3, #8
 800c9c4:	425b      	negs	r3, r3
 800c9c6:	68fa      	ldr	r2, [r7, #12]
 800c9c8:	18d3      	adds	r3, r2, r3
 800c9ca:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	685a      	ldr	r2, [r3, #4]
 800c9d4:	4b1b      	ldr	r3, [pc, #108]	@ (800ca44 <vPortFree+0x94>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4013      	ands	r3, r2
 800c9da:	d102      	bne.n	800c9e2 <vPortFree+0x32>
 800c9dc:	b672      	cpsid	i
 800c9de:	46c0      	nop			@ (mov r8, r8)
 800c9e0:	e7fd      	b.n	800c9de <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <vPortFree+0x40>
 800c9ea:	b672      	cpsid	i
 800c9ec:	46c0      	nop			@ (mov r8, r8)
 800c9ee:	e7fd      	b.n	800c9ec <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	4b13      	ldr	r3, [pc, #76]	@ (800ca44 <vPortFree+0x94>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	d01f      	beq.n	800ca3c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d11b      	bne.n	800ca3c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	4b0e      	ldr	r3, [pc, #56]	@ (800ca44 <vPortFree+0x94>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	43db      	mvns	r3, r3
 800ca0e:	401a      	ands	r2, r3
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca14:	f7fe fd7c 	bl	800b510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	685a      	ldr	r2, [r3, #4]
 800ca1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca48 <vPortFree+0x98>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	18d2      	adds	r2, r2, r3
 800ca22:	4b09      	ldr	r3, [pc, #36]	@ (800ca48 <vPortFree+0x98>)
 800ca24:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	0018      	movs	r0, r3
 800ca2a:	f000 f871 	bl	800cb10 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca2e:	4b07      	ldr	r3, [pc, #28]	@ (800ca4c <vPortFree+0x9c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	4b05      	ldr	r3, [pc, #20]	@ (800ca4c <vPortFree+0x9c>)
 800ca36:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800ca38:	f7fe fd76 	bl	800b528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca3c:	46c0      	nop			@ (mov r8, r8)
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	b004      	add	sp, #16
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20002538 	.word	0x20002538
 800ca48:	20002528 	.word	0x20002528
 800ca4c:	20002534 	.word	0x20002534

0800ca50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca56:	23c0      	movs	r3, #192	@ 0xc0
 800ca58:	011b      	lsls	r3, r3, #4
 800ca5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca5c:	4b26      	ldr	r3, [pc, #152]	@ (800caf8 <prvHeapInit+0xa8>)
 800ca5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2207      	movs	r2, #7
 800ca64:	4013      	ands	r3, r2
 800ca66:	d00c      	beq.n	800ca82 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	3307      	adds	r3, #7
 800ca6c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2207      	movs	r2, #7
 800ca72:	4393      	bics	r3, r2
 800ca74:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	1ad2      	subs	r2, r2, r3
 800ca7c:	4b1e      	ldr	r3, [pc, #120]	@ (800caf8 <prvHeapInit+0xa8>)
 800ca7e:	18d3      	adds	r3, r2, r3
 800ca80:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca86:	4b1d      	ldr	r3, [pc, #116]	@ (800cafc <prvHeapInit+0xac>)
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca8c:	4b1b      	ldr	r3, [pc, #108]	@ (800cafc <prvHeapInit+0xac>)
 800ca8e:	2200      	movs	r2, #0
 800ca90:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	18d3      	adds	r3, r2, r3
 800ca98:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca9a:	2208      	movs	r2, #8
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	1a9b      	subs	r3, r3, r2
 800caa0:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2207      	movs	r2, #7
 800caa6:	4393      	bics	r3, r2
 800caa8:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	4b14      	ldr	r3, [pc, #80]	@ (800cb00 <prvHeapInit+0xb0>)
 800caae:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800cab0:	4b13      	ldr	r3, [pc, #76]	@ (800cb00 <prvHeapInit+0xb0>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	2200      	movs	r2, #0
 800cab6:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cab8:	4b11      	ldr	r3, [pc, #68]	@ (800cb00 <prvHeapInit+0xb0>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2200      	movs	r2, #0
 800cabe:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	1ad2      	subs	r2, r2, r3
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cace:	4b0c      	ldr	r3, [pc, #48]	@ (800cb00 <prvHeapInit+0xb0>)
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	685a      	ldr	r2, [r3, #4]
 800cada:	4b0a      	ldr	r3, [pc, #40]	@ (800cb04 <prvHeapInit+0xb4>)
 800cadc:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685a      	ldr	r2, [r3, #4]
 800cae2:	4b09      	ldr	r3, [pc, #36]	@ (800cb08 <prvHeapInit+0xb8>)
 800cae4:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cae6:	4b09      	ldr	r3, [pc, #36]	@ (800cb0c <prvHeapInit+0xbc>)
 800cae8:	2280      	movs	r2, #128	@ 0x80
 800caea:	0612      	lsls	r2, r2, #24
 800caec:	601a      	str	r2, [r3, #0]
}
 800caee:	46c0      	nop			@ (mov r8, r8)
 800caf0:	46bd      	mov	sp, r7
 800caf2:	b004      	add	sp, #16
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	46c0      	nop			@ (mov r8, r8)
 800caf8:	2000191c 	.word	0x2000191c
 800cafc:	2000251c 	.word	0x2000251c
 800cb00:	20002524 	.word	0x20002524
 800cb04:	2000252c 	.word	0x2000252c
 800cb08:	20002528 	.word	0x20002528
 800cb0c:	20002538 	.word	0x20002538

0800cb10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b084      	sub	sp, #16
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb18:	4b27      	ldr	r3, [pc, #156]	@ (800cbb8 <prvInsertBlockIntoFreeList+0xa8>)
 800cb1a:	60fb      	str	r3, [r7, #12]
 800cb1c:	e002      	b.n	800cb24 <prvInsertBlockIntoFreeList+0x14>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d8f7      	bhi.n	800cb1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	18d3      	adds	r3, r2, r3
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d108      	bne.n	800cb52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	18d2      	adds	r2, r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	18d2      	adds	r2, r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d118      	bne.n	800cb98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	4b14      	ldr	r3, [pc, #80]	@ (800cbbc <prvInsertBlockIntoFreeList+0xac>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d00d      	beq.n	800cb8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	18d2      	adds	r2, r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	e008      	b.n	800cba0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cbbc <prvInsertBlockIntoFreeList+0xac>)
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	601a      	str	r2, [r3, #0]
 800cb96:	e003      	b.n	800cba0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	429a      	cmp	r2, r3
 800cba6:	d002      	beq.n	800cbae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbae:	46c0      	nop			@ (mov r8, r8)
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	b004      	add	sp, #16
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	46c0      	nop			@ (mov r8, r8)
 800cbb8:	2000251c 	.word	0x2000251c
 800cbbc:	20002524 	.word	0x20002524

0800cbc0 <siprintf>:
 800cbc0:	b40e      	push	{r1, r2, r3}
 800cbc2:	b500      	push	{lr}
 800cbc4:	490b      	ldr	r1, [pc, #44]	@ (800cbf4 <siprintf+0x34>)
 800cbc6:	b09c      	sub	sp, #112	@ 0x70
 800cbc8:	ab1d      	add	r3, sp, #116	@ 0x74
 800cbca:	9002      	str	r0, [sp, #8]
 800cbcc:	9006      	str	r0, [sp, #24]
 800cbce:	9107      	str	r1, [sp, #28]
 800cbd0:	9104      	str	r1, [sp, #16]
 800cbd2:	4809      	ldr	r0, [pc, #36]	@ (800cbf8 <siprintf+0x38>)
 800cbd4:	4909      	ldr	r1, [pc, #36]	@ (800cbfc <siprintf+0x3c>)
 800cbd6:	cb04      	ldmia	r3!, {r2}
 800cbd8:	9105      	str	r1, [sp, #20]
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	a902      	add	r1, sp, #8
 800cbde:	9301      	str	r3, [sp, #4]
 800cbe0:	f000 f956 	bl	800ce90 <_svfiprintf_r>
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	9b02      	ldr	r3, [sp, #8]
 800cbe8:	701a      	strb	r2, [r3, #0]
 800cbea:	b01c      	add	sp, #112	@ 0x70
 800cbec:	bc08      	pop	{r3}
 800cbee:	b003      	add	sp, #12
 800cbf0:	4718      	bx	r3
 800cbf2:	46c0      	nop			@ (mov r8, r8)
 800cbf4:	7fffffff 	.word	0x7fffffff
 800cbf8:	200000e8 	.word	0x200000e8
 800cbfc:	ffff0208 	.word	0xffff0208

0800cc00 <memset>:
 800cc00:	0003      	movs	r3, r0
 800cc02:	1882      	adds	r2, r0, r2
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d100      	bne.n	800cc0a <memset+0xa>
 800cc08:	4770      	bx	lr
 800cc0a:	7019      	strb	r1, [r3, #0]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	e7f9      	b.n	800cc04 <memset+0x4>

0800cc10 <_reclaim_reent>:
 800cc10:	4b2e      	ldr	r3, [pc, #184]	@ (800cccc <_reclaim_reent+0xbc>)
 800cc12:	b570      	push	{r4, r5, r6, lr}
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	0004      	movs	r4, r0
 800cc18:	4283      	cmp	r3, r0
 800cc1a:	d04f      	beq.n	800ccbc <_reclaim_reent+0xac>
 800cc1c:	69c3      	ldr	r3, [r0, #28]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d017      	beq.n	800cc52 <_reclaim_reent+0x42>
 800cc22:	68db      	ldr	r3, [r3, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d00d      	beq.n	800cc44 <_reclaim_reent+0x34>
 800cc28:	2500      	movs	r5, #0
 800cc2a:	69e3      	ldr	r3, [r4, #28]
 800cc2c:	68db      	ldr	r3, [r3, #12]
 800cc2e:	5959      	ldr	r1, [r3, r5]
 800cc30:	2900      	cmp	r1, #0
 800cc32:	d144      	bne.n	800ccbe <_reclaim_reent+0xae>
 800cc34:	3504      	adds	r5, #4
 800cc36:	2d80      	cmp	r5, #128	@ 0x80
 800cc38:	d1f7      	bne.n	800cc2a <_reclaim_reent+0x1a>
 800cc3a:	69e3      	ldr	r3, [r4, #28]
 800cc3c:	0020      	movs	r0, r4
 800cc3e:	68d9      	ldr	r1, [r3, #12]
 800cc40:	f000 f87c 	bl	800cd3c <_free_r>
 800cc44:	69e3      	ldr	r3, [r4, #28]
 800cc46:	6819      	ldr	r1, [r3, #0]
 800cc48:	2900      	cmp	r1, #0
 800cc4a:	d002      	beq.n	800cc52 <_reclaim_reent+0x42>
 800cc4c:	0020      	movs	r0, r4
 800cc4e:	f000 f875 	bl	800cd3c <_free_r>
 800cc52:	6961      	ldr	r1, [r4, #20]
 800cc54:	2900      	cmp	r1, #0
 800cc56:	d002      	beq.n	800cc5e <_reclaim_reent+0x4e>
 800cc58:	0020      	movs	r0, r4
 800cc5a:	f000 f86f 	bl	800cd3c <_free_r>
 800cc5e:	69e1      	ldr	r1, [r4, #28]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	d002      	beq.n	800cc6a <_reclaim_reent+0x5a>
 800cc64:	0020      	movs	r0, r4
 800cc66:	f000 f869 	bl	800cd3c <_free_r>
 800cc6a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cc6c:	2900      	cmp	r1, #0
 800cc6e:	d002      	beq.n	800cc76 <_reclaim_reent+0x66>
 800cc70:	0020      	movs	r0, r4
 800cc72:	f000 f863 	bl	800cd3c <_free_r>
 800cc76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc78:	2900      	cmp	r1, #0
 800cc7a:	d002      	beq.n	800cc82 <_reclaim_reent+0x72>
 800cc7c:	0020      	movs	r0, r4
 800cc7e:	f000 f85d 	bl	800cd3c <_free_r>
 800cc82:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cc84:	2900      	cmp	r1, #0
 800cc86:	d002      	beq.n	800cc8e <_reclaim_reent+0x7e>
 800cc88:	0020      	movs	r0, r4
 800cc8a:	f000 f857 	bl	800cd3c <_free_r>
 800cc8e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cc90:	2900      	cmp	r1, #0
 800cc92:	d002      	beq.n	800cc9a <_reclaim_reent+0x8a>
 800cc94:	0020      	movs	r0, r4
 800cc96:	f000 f851 	bl	800cd3c <_free_r>
 800cc9a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cc9c:	2900      	cmp	r1, #0
 800cc9e:	d002      	beq.n	800cca6 <_reclaim_reent+0x96>
 800cca0:	0020      	movs	r0, r4
 800cca2:	f000 f84b 	bl	800cd3c <_free_r>
 800cca6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cca8:	2900      	cmp	r1, #0
 800ccaa:	d002      	beq.n	800ccb2 <_reclaim_reent+0xa2>
 800ccac:	0020      	movs	r0, r4
 800ccae:	f000 f845 	bl	800cd3c <_free_r>
 800ccb2:	6a23      	ldr	r3, [r4, #32]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d001      	beq.n	800ccbc <_reclaim_reent+0xac>
 800ccb8:	0020      	movs	r0, r4
 800ccba:	4798      	blx	r3
 800ccbc:	bd70      	pop	{r4, r5, r6, pc}
 800ccbe:	680e      	ldr	r6, [r1, #0]
 800ccc0:	0020      	movs	r0, r4
 800ccc2:	f000 f83b 	bl	800cd3c <_free_r>
 800ccc6:	0031      	movs	r1, r6
 800ccc8:	e7b2      	b.n	800cc30 <_reclaim_reent+0x20>
 800ccca:	46c0      	nop			@ (mov r8, r8)
 800cccc:	200000e8 	.word	0x200000e8

0800ccd0 <__errno>:
 800ccd0:	4b01      	ldr	r3, [pc, #4]	@ (800ccd8 <__errno+0x8>)
 800ccd2:	6818      	ldr	r0, [r3, #0]
 800ccd4:	4770      	bx	lr
 800ccd6:	46c0      	nop			@ (mov r8, r8)
 800ccd8:	200000e8 	.word	0x200000e8

0800ccdc <__libc_init_array>:
 800ccdc:	b570      	push	{r4, r5, r6, lr}
 800ccde:	2600      	movs	r6, #0
 800cce0:	4c0c      	ldr	r4, [pc, #48]	@ (800cd14 <__libc_init_array+0x38>)
 800cce2:	4d0d      	ldr	r5, [pc, #52]	@ (800cd18 <__libc_init_array+0x3c>)
 800cce4:	1b64      	subs	r4, r4, r5
 800cce6:	10a4      	asrs	r4, r4, #2
 800cce8:	42a6      	cmp	r6, r4
 800ccea:	d109      	bne.n	800cd00 <__libc_init_array+0x24>
 800ccec:	2600      	movs	r6, #0
 800ccee:	f000 fc65 	bl	800d5bc <_init>
 800ccf2:	4c0a      	ldr	r4, [pc, #40]	@ (800cd1c <__libc_init_array+0x40>)
 800ccf4:	4d0a      	ldr	r5, [pc, #40]	@ (800cd20 <__libc_init_array+0x44>)
 800ccf6:	1b64      	subs	r4, r4, r5
 800ccf8:	10a4      	asrs	r4, r4, #2
 800ccfa:	42a6      	cmp	r6, r4
 800ccfc:	d105      	bne.n	800cd0a <__libc_init_array+0x2e>
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	00b3      	lsls	r3, r6, #2
 800cd02:	58eb      	ldr	r3, [r5, r3]
 800cd04:	4798      	blx	r3
 800cd06:	3601      	adds	r6, #1
 800cd08:	e7ee      	b.n	800cce8 <__libc_init_array+0xc>
 800cd0a:	00b3      	lsls	r3, r6, #2
 800cd0c:	58eb      	ldr	r3, [r5, r3]
 800cd0e:	4798      	blx	r3
 800cd10:	3601      	adds	r6, #1
 800cd12:	e7f2      	b.n	800ccfa <__libc_init_array+0x1e>
 800cd14:	0800d918 	.word	0x0800d918
 800cd18:	0800d918 	.word	0x0800d918
 800cd1c:	0800d91c 	.word	0x0800d91c
 800cd20:	0800d918 	.word	0x0800d918

0800cd24 <__retarget_lock_acquire_recursive>:
 800cd24:	4770      	bx	lr

0800cd26 <__retarget_lock_release_recursive>:
 800cd26:	4770      	bx	lr

0800cd28 <memcpy>:
 800cd28:	2300      	movs	r3, #0
 800cd2a:	b510      	push	{r4, lr}
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d100      	bne.n	800cd32 <memcpy+0xa>
 800cd30:	bd10      	pop	{r4, pc}
 800cd32:	5ccc      	ldrb	r4, [r1, r3]
 800cd34:	54c4      	strb	r4, [r0, r3]
 800cd36:	3301      	adds	r3, #1
 800cd38:	e7f8      	b.n	800cd2c <memcpy+0x4>
	...

0800cd3c <_free_r>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	0005      	movs	r5, r0
 800cd40:	1e0c      	subs	r4, r1, #0
 800cd42:	d010      	beq.n	800cd66 <_free_r+0x2a>
 800cd44:	3c04      	subs	r4, #4
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	da00      	bge.n	800cd4e <_free_r+0x12>
 800cd4c:	18e4      	adds	r4, r4, r3
 800cd4e:	0028      	movs	r0, r5
 800cd50:	f000 fbbc 	bl	800d4cc <__malloc_lock>
 800cd54:	4a1d      	ldr	r2, [pc, #116]	@ (800cdcc <_free_r+0x90>)
 800cd56:	6813      	ldr	r3, [r2, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d105      	bne.n	800cd68 <_free_r+0x2c>
 800cd5c:	6063      	str	r3, [r4, #4]
 800cd5e:	6014      	str	r4, [r2, #0]
 800cd60:	0028      	movs	r0, r5
 800cd62:	f000 fbbb 	bl	800d4dc <__malloc_unlock>
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	42a3      	cmp	r3, r4
 800cd6a:	d908      	bls.n	800cd7e <_free_r+0x42>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	1821      	adds	r1, r4, r0
 800cd70:	428b      	cmp	r3, r1
 800cd72:	d1f3      	bne.n	800cd5c <_free_r+0x20>
 800cd74:	6819      	ldr	r1, [r3, #0]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	1809      	adds	r1, r1, r0
 800cd7a:	6021      	str	r1, [r4, #0]
 800cd7c:	e7ee      	b.n	800cd5c <_free_r+0x20>
 800cd7e:	001a      	movs	r2, r3
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d001      	beq.n	800cd8a <_free_r+0x4e>
 800cd86:	42a3      	cmp	r3, r4
 800cd88:	d9f9      	bls.n	800cd7e <_free_r+0x42>
 800cd8a:	6811      	ldr	r1, [r2, #0]
 800cd8c:	1850      	adds	r0, r2, r1
 800cd8e:	42a0      	cmp	r0, r4
 800cd90:	d10b      	bne.n	800cdaa <_free_r+0x6e>
 800cd92:	6820      	ldr	r0, [r4, #0]
 800cd94:	1809      	adds	r1, r1, r0
 800cd96:	1850      	adds	r0, r2, r1
 800cd98:	6011      	str	r1, [r2, #0]
 800cd9a:	4283      	cmp	r3, r0
 800cd9c:	d1e0      	bne.n	800cd60 <_free_r+0x24>
 800cd9e:	6818      	ldr	r0, [r3, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	1841      	adds	r1, r0, r1
 800cda4:	6011      	str	r1, [r2, #0]
 800cda6:	6053      	str	r3, [r2, #4]
 800cda8:	e7da      	b.n	800cd60 <_free_r+0x24>
 800cdaa:	42a0      	cmp	r0, r4
 800cdac:	d902      	bls.n	800cdb4 <_free_r+0x78>
 800cdae:	230c      	movs	r3, #12
 800cdb0:	602b      	str	r3, [r5, #0]
 800cdb2:	e7d5      	b.n	800cd60 <_free_r+0x24>
 800cdb4:	6820      	ldr	r0, [r4, #0]
 800cdb6:	1821      	adds	r1, r4, r0
 800cdb8:	428b      	cmp	r3, r1
 800cdba:	d103      	bne.n	800cdc4 <_free_r+0x88>
 800cdbc:	6819      	ldr	r1, [r3, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	1809      	adds	r1, r1, r0
 800cdc2:	6021      	str	r1, [r4, #0]
 800cdc4:	6063      	str	r3, [r4, #4]
 800cdc6:	6054      	str	r4, [r2, #4]
 800cdc8:	e7ca      	b.n	800cd60 <_free_r+0x24>
 800cdca:	46c0      	nop			@ (mov r8, r8)
 800cdcc:	20002680 	.word	0x20002680

0800cdd0 <__ssputs_r>:
 800cdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd2:	688e      	ldr	r6, [r1, #8]
 800cdd4:	b085      	sub	sp, #20
 800cdd6:	001f      	movs	r7, r3
 800cdd8:	000c      	movs	r4, r1
 800cdda:	680b      	ldr	r3, [r1, #0]
 800cddc:	9002      	str	r0, [sp, #8]
 800cdde:	9203      	str	r2, [sp, #12]
 800cde0:	42be      	cmp	r6, r7
 800cde2:	d830      	bhi.n	800ce46 <__ssputs_r+0x76>
 800cde4:	210c      	movs	r1, #12
 800cde6:	5e62      	ldrsh	r2, [r4, r1]
 800cde8:	2190      	movs	r1, #144	@ 0x90
 800cdea:	00c9      	lsls	r1, r1, #3
 800cdec:	420a      	tst	r2, r1
 800cdee:	d028      	beq.n	800ce42 <__ssputs_r+0x72>
 800cdf0:	2003      	movs	r0, #3
 800cdf2:	6921      	ldr	r1, [r4, #16]
 800cdf4:	1a5b      	subs	r3, r3, r1
 800cdf6:	9301      	str	r3, [sp, #4]
 800cdf8:	6963      	ldr	r3, [r4, #20]
 800cdfa:	4343      	muls	r3, r0
 800cdfc:	9801      	ldr	r0, [sp, #4]
 800cdfe:	0fdd      	lsrs	r5, r3, #31
 800ce00:	18ed      	adds	r5, r5, r3
 800ce02:	1c7b      	adds	r3, r7, #1
 800ce04:	181b      	adds	r3, r3, r0
 800ce06:	106d      	asrs	r5, r5, #1
 800ce08:	42ab      	cmp	r3, r5
 800ce0a:	d900      	bls.n	800ce0e <__ssputs_r+0x3e>
 800ce0c:	001d      	movs	r5, r3
 800ce0e:	0552      	lsls	r2, r2, #21
 800ce10:	d528      	bpl.n	800ce64 <__ssputs_r+0x94>
 800ce12:	0029      	movs	r1, r5
 800ce14:	9802      	ldr	r0, [sp, #8]
 800ce16:	f000 f95b 	bl	800d0d0 <_malloc_r>
 800ce1a:	1e06      	subs	r6, r0, #0
 800ce1c:	d02c      	beq.n	800ce78 <__ssputs_r+0xa8>
 800ce1e:	9a01      	ldr	r2, [sp, #4]
 800ce20:	6921      	ldr	r1, [r4, #16]
 800ce22:	f7ff ff81 	bl	800cd28 <memcpy>
 800ce26:	89a2      	ldrh	r2, [r4, #12]
 800ce28:	4b18      	ldr	r3, [pc, #96]	@ (800ce8c <__ssputs_r+0xbc>)
 800ce2a:	401a      	ands	r2, r3
 800ce2c:	2380      	movs	r3, #128	@ 0x80
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	81a3      	strh	r3, [r4, #12]
 800ce32:	9b01      	ldr	r3, [sp, #4]
 800ce34:	6126      	str	r6, [r4, #16]
 800ce36:	18f6      	adds	r6, r6, r3
 800ce38:	6026      	str	r6, [r4, #0]
 800ce3a:	003e      	movs	r6, r7
 800ce3c:	6165      	str	r5, [r4, #20]
 800ce3e:	1aed      	subs	r5, r5, r3
 800ce40:	60a5      	str	r5, [r4, #8]
 800ce42:	42be      	cmp	r6, r7
 800ce44:	d900      	bls.n	800ce48 <__ssputs_r+0x78>
 800ce46:	003e      	movs	r6, r7
 800ce48:	0032      	movs	r2, r6
 800ce4a:	9903      	ldr	r1, [sp, #12]
 800ce4c:	6820      	ldr	r0, [r4, #0]
 800ce4e:	f000 fb7c 	bl	800d54a <memmove>
 800ce52:	2000      	movs	r0, #0
 800ce54:	68a3      	ldr	r3, [r4, #8]
 800ce56:	1b9b      	subs	r3, r3, r6
 800ce58:	60a3      	str	r3, [r4, #8]
 800ce5a:	6823      	ldr	r3, [r4, #0]
 800ce5c:	199b      	adds	r3, r3, r6
 800ce5e:	6023      	str	r3, [r4, #0]
 800ce60:	b005      	add	sp, #20
 800ce62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce64:	002a      	movs	r2, r5
 800ce66:	9802      	ldr	r0, [sp, #8]
 800ce68:	f000 fb40 	bl	800d4ec <_realloc_r>
 800ce6c:	1e06      	subs	r6, r0, #0
 800ce6e:	d1e0      	bne.n	800ce32 <__ssputs_r+0x62>
 800ce70:	6921      	ldr	r1, [r4, #16]
 800ce72:	9802      	ldr	r0, [sp, #8]
 800ce74:	f7ff ff62 	bl	800cd3c <_free_r>
 800ce78:	230c      	movs	r3, #12
 800ce7a:	2001      	movs	r0, #1
 800ce7c:	9a02      	ldr	r2, [sp, #8]
 800ce7e:	4240      	negs	r0, r0
 800ce80:	6013      	str	r3, [r2, #0]
 800ce82:	89a2      	ldrh	r2, [r4, #12]
 800ce84:	3334      	adds	r3, #52	@ 0x34
 800ce86:	4313      	orrs	r3, r2
 800ce88:	81a3      	strh	r3, [r4, #12]
 800ce8a:	e7e9      	b.n	800ce60 <__ssputs_r+0x90>
 800ce8c:	fffffb7f 	.word	0xfffffb7f

0800ce90 <_svfiprintf_r>:
 800ce90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce92:	b0a1      	sub	sp, #132	@ 0x84
 800ce94:	9003      	str	r0, [sp, #12]
 800ce96:	001d      	movs	r5, r3
 800ce98:	898b      	ldrh	r3, [r1, #12]
 800ce9a:	000f      	movs	r7, r1
 800ce9c:	0016      	movs	r6, r2
 800ce9e:	061b      	lsls	r3, r3, #24
 800cea0:	d511      	bpl.n	800cec6 <_svfiprintf_r+0x36>
 800cea2:	690b      	ldr	r3, [r1, #16]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10e      	bne.n	800cec6 <_svfiprintf_r+0x36>
 800cea8:	2140      	movs	r1, #64	@ 0x40
 800ceaa:	f000 f911 	bl	800d0d0 <_malloc_r>
 800ceae:	6038      	str	r0, [r7, #0]
 800ceb0:	6138      	str	r0, [r7, #16]
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	d105      	bne.n	800cec2 <_svfiprintf_r+0x32>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	9a03      	ldr	r2, [sp, #12]
 800ceba:	6013      	str	r3, [r2, #0]
 800cebc:	2001      	movs	r0, #1
 800cebe:	4240      	negs	r0, r0
 800cec0:	e0cf      	b.n	800d062 <_svfiprintf_r+0x1d2>
 800cec2:	2340      	movs	r3, #64	@ 0x40
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	2300      	movs	r3, #0
 800cec8:	ac08      	add	r4, sp, #32
 800ceca:	6163      	str	r3, [r4, #20]
 800cecc:	3320      	adds	r3, #32
 800cece:	7663      	strb	r3, [r4, #25]
 800ced0:	3310      	adds	r3, #16
 800ced2:	76a3      	strb	r3, [r4, #26]
 800ced4:	9507      	str	r5, [sp, #28]
 800ced6:	0035      	movs	r5, r6
 800ced8:	782b      	ldrb	r3, [r5, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d001      	beq.n	800cee2 <_svfiprintf_r+0x52>
 800cede:	2b25      	cmp	r3, #37	@ 0x25
 800cee0:	d148      	bne.n	800cf74 <_svfiprintf_r+0xe4>
 800cee2:	1bab      	subs	r3, r5, r6
 800cee4:	9305      	str	r3, [sp, #20]
 800cee6:	42b5      	cmp	r5, r6
 800cee8:	d00b      	beq.n	800cf02 <_svfiprintf_r+0x72>
 800ceea:	0032      	movs	r2, r6
 800ceec:	0039      	movs	r1, r7
 800ceee:	9803      	ldr	r0, [sp, #12]
 800cef0:	f7ff ff6e 	bl	800cdd0 <__ssputs_r>
 800cef4:	3001      	adds	r0, #1
 800cef6:	d100      	bne.n	800cefa <_svfiprintf_r+0x6a>
 800cef8:	e0ae      	b.n	800d058 <_svfiprintf_r+0x1c8>
 800cefa:	6963      	ldr	r3, [r4, #20]
 800cefc:	9a05      	ldr	r2, [sp, #20]
 800cefe:	189b      	adds	r3, r3, r2
 800cf00:	6163      	str	r3, [r4, #20]
 800cf02:	782b      	ldrb	r3, [r5, #0]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d100      	bne.n	800cf0a <_svfiprintf_r+0x7a>
 800cf08:	e0a6      	b.n	800d058 <_svfiprintf_r+0x1c8>
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4252      	negs	r2, r2
 800cf10:	6062      	str	r2, [r4, #4]
 800cf12:	a904      	add	r1, sp, #16
 800cf14:	3254      	adds	r2, #84	@ 0x54
 800cf16:	1852      	adds	r2, r2, r1
 800cf18:	1c6e      	adds	r6, r5, #1
 800cf1a:	6023      	str	r3, [r4, #0]
 800cf1c:	60e3      	str	r3, [r4, #12]
 800cf1e:	60a3      	str	r3, [r4, #8]
 800cf20:	7013      	strb	r3, [r2, #0]
 800cf22:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cf24:	4b54      	ldr	r3, [pc, #336]	@ (800d078 <_svfiprintf_r+0x1e8>)
 800cf26:	2205      	movs	r2, #5
 800cf28:	0018      	movs	r0, r3
 800cf2a:	7831      	ldrb	r1, [r6, #0]
 800cf2c:	9305      	str	r3, [sp, #20]
 800cf2e:	f000 fb31 	bl	800d594 <memchr>
 800cf32:	1c75      	adds	r5, r6, #1
 800cf34:	2800      	cmp	r0, #0
 800cf36:	d11f      	bne.n	800cf78 <_svfiprintf_r+0xe8>
 800cf38:	6822      	ldr	r2, [r4, #0]
 800cf3a:	06d3      	lsls	r3, r2, #27
 800cf3c:	d504      	bpl.n	800cf48 <_svfiprintf_r+0xb8>
 800cf3e:	2353      	movs	r3, #83	@ 0x53
 800cf40:	a904      	add	r1, sp, #16
 800cf42:	185b      	adds	r3, r3, r1
 800cf44:	2120      	movs	r1, #32
 800cf46:	7019      	strb	r1, [r3, #0]
 800cf48:	0713      	lsls	r3, r2, #28
 800cf4a:	d504      	bpl.n	800cf56 <_svfiprintf_r+0xc6>
 800cf4c:	2353      	movs	r3, #83	@ 0x53
 800cf4e:	a904      	add	r1, sp, #16
 800cf50:	185b      	adds	r3, r3, r1
 800cf52:	212b      	movs	r1, #43	@ 0x2b
 800cf54:	7019      	strb	r1, [r3, #0]
 800cf56:	7833      	ldrb	r3, [r6, #0]
 800cf58:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf5a:	d016      	beq.n	800cf8a <_svfiprintf_r+0xfa>
 800cf5c:	0035      	movs	r5, r6
 800cf5e:	2100      	movs	r1, #0
 800cf60:	200a      	movs	r0, #10
 800cf62:	68e3      	ldr	r3, [r4, #12]
 800cf64:	782a      	ldrb	r2, [r5, #0]
 800cf66:	1c6e      	adds	r6, r5, #1
 800cf68:	3a30      	subs	r2, #48	@ 0x30
 800cf6a:	2a09      	cmp	r2, #9
 800cf6c:	d950      	bls.n	800d010 <_svfiprintf_r+0x180>
 800cf6e:	2900      	cmp	r1, #0
 800cf70:	d111      	bne.n	800cf96 <_svfiprintf_r+0x106>
 800cf72:	e017      	b.n	800cfa4 <_svfiprintf_r+0x114>
 800cf74:	3501      	adds	r5, #1
 800cf76:	e7af      	b.n	800ced8 <_svfiprintf_r+0x48>
 800cf78:	9b05      	ldr	r3, [sp, #20]
 800cf7a:	6822      	ldr	r2, [r4, #0]
 800cf7c:	1ac0      	subs	r0, r0, r3
 800cf7e:	2301      	movs	r3, #1
 800cf80:	4083      	lsls	r3, r0
 800cf82:	4313      	orrs	r3, r2
 800cf84:	002e      	movs	r6, r5
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	e7cc      	b.n	800cf24 <_svfiprintf_r+0x94>
 800cf8a:	9b07      	ldr	r3, [sp, #28]
 800cf8c:	1d19      	adds	r1, r3, #4
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	9107      	str	r1, [sp, #28]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	db01      	blt.n	800cf9a <_svfiprintf_r+0x10a>
 800cf96:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf98:	e004      	b.n	800cfa4 <_svfiprintf_r+0x114>
 800cf9a:	425b      	negs	r3, r3
 800cf9c:	60e3      	str	r3, [r4, #12]
 800cf9e:	2302      	movs	r3, #2
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	6023      	str	r3, [r4, #0]
 800cfa4:	782b      	ldrb	r3, [r5, #0]
 800cfa6:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfa8:	d10c      	bne.n	800cfc4 <_svfiprintf_r+0x134>
 800cfaa:	786b      	ldrb	r3, [r5, #1]
 800cfac:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfae:	d134      	bne.n	800d01a <_svfiprintf_r+0x18a>
 800cfb0:	9b07      	ldr	r3, [sp, #28]
 800cfb2:	3502      	adds	r5, #2
 800cfb4:	1d1a      	adds	r2, r3, #4
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	9207      	str	r2, [sp, #28]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	da01      	bge.n	800cfc2 <_svfiprintf_r+0x132>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	425b      	negs	r3, r3
 800cfc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cfc4:	4e2d      	ldr	r6, [pc, #180]	@ (800d07c <_svfiprintf_r+0x1ec>)
 800cfc6:	2203      	movs	r2, #3
 800cfc8:	0030      	movs	r0, r6
 800cfca:	7829      	ldrb	r1, [r5, #0]
 800cfcc:	f000 fae2 	bl	800d594 <memchr>
 800cfd0:	2800      	cmp	r0, #0
 800cfd2:	d006      	beq.n	800cfe2 <_svfiprintf_r+0x152>
 800cfd4:	2340      	movs	r3, #64	@ 0x40
 800cfd6:	1b80      	subs	r0, r0, r6
 800cfd8:	4083      	lsls	r3, r0
 800cfda:	6822      	ldr	r2, [r4, #0]
 800cfdc:	3501      	adds	r5, #1
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	7829      	ldrb	r1, [r5, #0]
 800cfe4:	2206      	movs	r2, #6
 800cfe6:	4826      	ldr	r0, [pc, #152]	@ (800d080 <_svfiprintf_r+0x1f0>)
 800cfe8:	1c6e      	adds	r6, r5, #1
 800cfea:	7621      	strb	r1, [r4, #24]
 800cfec:	f000 fad2 	bl	800d594 <memchr>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d038      	beq.n	800d066 <_svfiprintf_r+0x1d6>
 800cff4:	4b23      	ldr	r3, [pc, #140]	@ (800d084 <_svfiprintf_r+0x1f4>)
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d122      	bne.n	800d040 <_svfiprintf_r+0x1b0>
 800cffa:	2207      	movs	r2, #7
 800cffc:	9b07      	ldr	r3, [sp, #28]
 800cffe:	3307      	adds	r3, #7
 800d000:	4393      	bics	r3, r2
 800d002:	3308      	adds	r3, #8
 800d004:	9307      	str	r3, [sp, #28]
 800d006:	6963      	ldr	r3, [r4, #20]
 800d008:	9a04      	ldr	r2, [sp, #16]
 800d00a:	189b      	adds	r3, r3, r2
 800d00c:	6163      	str	r3, [r4, #20]
 800d00e:	e762      	b.n	800ced6 <_svfiprintf_r+0x46>
 800d010:	4343      	muls	r3, r0
 800d012:	0035      	movs	r5, r6
 800d014:	2101      	movs	r1, #1
 800d016:	189b      	adds	r3, r3, r2
 800d018:	e7a4      	b.n	800cf64 <_svfiprintf_r+0xd4>
 800d01a:	2300      	movs	r3, #0
 800d01c:	200a      	movs	r0, #10
 800d01e:	0019      	movs	r1, r3
 800d020:	3501      	adds	r5, #1
 800d022:	6063      	str	r3, [r4, #4]
 800d024:	782a      	ldrb	r2, [r5, #0]
 800d026:	1c6e      	adds	r6, r5, #1
 800d028:	3a30      	subs	r2, #48	@ 0x30
 800d02a:	2a09      	cmp	r2, #9
 800d02c:	d903      	bls.n	800d036 <_svfiprintf_r+0x1a6>
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0c8      	beq.n	800cfc4 <_svfiprintf_r+0x134>
 800d032:	9109      	str	r1, [sp, #36]	@ 0x24
 800d034:	e7c6      	b.n	800cfc4 <_svfiprintf_r+0x134>
 800d036:	4341      	muls	r1, r0
 800d038:	0035      	movs	r5, r6
 800d03a:	2301      	movs	r3, #1
 800d03c:	1889      	adds	r1, r1, r2
 800d03e:	e7f1      	b.n	800d024 <_svfiprintf_r+0x194>
 800d040:	aa07      	add	r2, sp, #28
 800d042:	9200      	str	r2, [sp, #0]
 800d044:	0021      	movs	r1, r4
 800d046:	003a      	movs	r2, r7
 800d048:	4b0f      	ldr	r3, [pc, #60]	@ (800d088 <_svfiprintf_r+0x1f8>)
 800d04a:	9803      	ldr	r0, [sp, #12]
 800d04c:	e000      	b.n	800d050 <_svfiprintf_r+0x1c0>
 800d04e:	bf00      	nop
 800d050:	9004      	str	r0, [sp, #16]
 800d052:	9b04      	ldr	r3, [sp, #16]
 800d054:	3301      	adds	r3, #1
 800d056:	d1d6      	bne.n	800d006 <_svfiprintf_r+0x176>
 800d058:	89bb      	ldrh	r3, [r7, #12]
 800d05a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d05c:	065b      	lsls	r3, r3, #25
 800d05e:	d500      	bpl.n	800d062 <_svfiprintf_r+0x1d2>
 800d060:	e72c      	b.n	800cebc <_svfiprintf_r+0x2c>
 800d062:	b021      	add	sp, #132	@ 0x84
 800d064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d066:	aa07      	add	r2, sp, #28
 800d068:	9200      	str	r2, [sp, #0]
 800d06a:	0021      	movs	r1, r4
 800d06c:	003a      	movs	r2, r7
 800d06e:	4b06      	ldr	r3, [pc, #24]	@ (800d088 <_svfiprintf_r+0x1f8>)
 800d070:	9803      	ldr	r0, [sp, #12]
 800d072:	f000 f91d 	bl	800d2b0 <_printf_i>
 800d076:	e7eb      	b.n	800d050 <_svfiprintf_r+0x1c0>
 800d078:	0800d8e4 	.word	0x0800d8e4
 800d07c:	0800d8ea 	.word	0x0800d8ea
 800d080:	0800d8ee 	.word	0x0800d8ee
 800d084:	00000000 	.word	0x00000000
 800d088:	0800cdd1 	.word	0x0800cdd1

0800d08c <sbrk_aligned>:
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	4e0f      	ldr	r6, [pc, #60]	@ (800d0cc <sbrk_aligned+0x40>)
 800d090:	000d      	movs	r5, r1
 800d092:	6831      	ldr	r1, [r6, #0]
 800d094:	0004      	movs	r4, r0
 800d096:	2900      	cmp	r1, #0
 800d098:	d102      	bne.n	800d0a0 <sbrk_aligned+0x14>
 800d09a:	f000 fa69 	bl	800d570 <_sbrk_r>
 800d09e:	6030      	str	r0, [r6, #0]
 800d0a0:	0029      	movs	r1, r5
 800d0a2:	0020      	movs	r0, r4
 800d0a4:	f000 fa64 	bl	800d570 <_sbrk_r>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d103      	bne.n	800d0b4 <sbrk_aligned+0x28>
 800d0ac:	2501      	movs	r5, #1
 800d0ae:	426d      	negs	r5, r5
 800d0b0:	0028      	movs	r0, r5
 800d0b2:	bd70      	pop	{r4, r5, r6, pc}
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	1cc5      	adds	r5, r0, #3
 800d0b8:	439d      	bics	r5, r3
 800d0ba:	42a8      	cmp	r0, r5
 800d0bc:	d0f8      	beq.n	800d0b0 <sbrk_aligned+0x24>
 800d0be:	1a29      	subs	r1, r5, r0
 800d0c0:	0020      	movs	r0, r4
 800d0c2:	f000 fa55 	bl	800d570 <_sbrk_r>
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	d1f2      	bne.n	800d0b0 <sbrk_aligned+0x24>
 800d0ca:	e7ef      	b.n	800d0ac <sbrk_aligned+0x20>
 800d0cc:	2000267c 	.word	0x2000267c

0800d0d0 <_malloc_r>:
 800d0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0d2:	2203      	movs	r2, #3
 800d0d4:	1ccb      	adds	r3, r1, #3
 800d0d6:	4393      	bics	r3, r2
 800d0d8:	3308      	adds	r3, #8
 800d0da:	0005      	movs	r5, r0
 800d0dc:	001f      	movs	r7, r3
 800d0de:	2b0c      	cmp	r3, #12
 800d0e0:	d234      	bcs.n	800d14c <_malloc_r+0x7c>
 800d0e2:	270c      	movs	r7, #12
 800d0e4:	42b9      	cmp	r1, r7
 800d0e6:	d833      	bhi.n	800d150 <_malloc_r+0x80>
 800d0e8:	0028      	movs	r0, r5
 800d0ea:	f000 f9ef 	bl	800d4cc <__malloc_lock>
 800d0ee:	4e37      	ldr	r6, [pc, #220]	@ (800d1cc <_malloc_r+0xfc>)
 800d0f0:	6833      	ldr	r3, [r6, #0]
 800d0f2:	001c      	movs	r4, r3
 800d0f4:	2c00      	cmp	r4, #0
 800d0f6:	d12f      	bne.n	800d158 <_malloc_r+0x88>
 800d0f8:	0039      	movs	r1, r7
 800d0fa:	0028      	movs	r0, r5
 800d0fc:	f7ff ffc6 	bl	800d08c <sbrk_aligned>
 800d100:	0004      	movs	r4, r0
 800d102:	1c43      	adds	r3, r0, #1
 800d104:	d15f      	bne.n	800d1c6 <_malloc_r+0xf6>
 800d106:	6834      	ldr	r4, [r6, #0]
 800d108:	9400      	str	r4, [sp, #0]
 800d10a:	9b00      	ldr	r3, [sp, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d14a      	bne.n	800d1a6 <_malloc_r+0xd6>
 800d110:	2c00      	cmp	r4, #0
 800d112:	d052      	beq.n	800d1ba <_malloc_r+0xea>
 800d114:	6823      	ldr	r3, [r4, #0]
 800d116:	0028      	movs	r0, r5
 800d118:	18e3      	adds	r3, r4, r3
 800d11a:	9900      	ldr	r1, [sp, #0]
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	f000 fa27 	bl	800d570 <_sbrk_r>
 800d122:	9b01      	ldr	r3, [sp, #4]
 800d124:	4283      	cmp	r3, r0
 800d126:	d148      	bne.n	800d1ba <_malloc_r+0xea>
 800d128:	6823      	ldr	r3, [r4, #0]
 800d12a:	0028      	movs	r0, r5
 800d12c:	1aff      	subs	r7, r7, r3
 800d12e:	0039      	movs	r1, r7
 800d130:	f7ff ffac 	bl	800d08c <sbrk_aligned>
 800d134:	3001      	adds	r0, #1
 800d136:	d040      	beq.n	800d1ba <_malloc_r+0xea>
 800d138:	6823      	ldr	r3, [r4, #0]
 800d13a:	19db      	adds	r3, r3, r7
 800d13c:	6023      	str	r3, [r4, #0]
 800d13e:	6833      	ldr	r3, [r6, #0]
 800d140:	685a      	ldr	r2, [r3, #4]
 800d142:	2a00      	cmp	r2, #0
 800d144:	d133      	bne.n	800d1ae <_malloc_r+0xde>
 800d146:	9b00      	ldr	r3, [sp, #0]
 800d148:	6033      	str	r3, [r6, #0]
 800d14a:	e019      	b.n	800d180 <_malloc_r+0xb0>
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	dac9      	bge.n	800d0e4 <_malloc_r+0x14>
 800d150:	230c      	movs	r3, #12
 800d152:	602b      	str	r3, [r5, #0]
 800d154:	2000      	movs	r0, #0
 800d156:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d158:	6821      	ldr	r1, [r4, #0]
 800d15a:	1bc9      	subs	r1, r1, r7
 800d15c:	d420      	bmi.n	800d1a0 <_malloc_r+0xd0>
 800d15e:	290b      	cmp	r1, #11
 800d160:	d90a      	bls.n	800d178 <_malloc_r+0xa8>
 800d162:	19e2      	adds	r2, r4, r7
 800d164:	6027      	str	r7, [r4, #0]
 800d166:	42a3      	cmp	r3, r4
 800d168:	d104      	bne.n	800d174 <_malloc_r+0xa4>
 800d16a:	6032      	str	r2, [r6, #0]
 800d16c:	6863      	ldr	r3, [r4, #4]
 800d16e:	6011      	str	r1, [r2, #0]
 800d170:	6053      	str	r3, [r2, #4]
 800d172:	e005      	b.n	800d180 <_malloc_r+0xb0>
 800d174:	605a      	str	r2, [r3, #4]
 800d176:	e7f9      	b.n	800d16c <_malloc_r+0x9c>
 800d178:	6862      	ldr	r2, [r4, #4]
 800d17a:	42a3      	cmp	r3, r4
 800d17c:	d10e      	bne.n	800d19c <_malloc_r+0xcc>
 800d17e:	6032      	str	r2, [r6, #0]
 800d180:	0028      	movs	r0, r5
 800d182:	f000 f9ab 	bl	800d4dc <__malloc_unlock>
 800d186:	0020      	movs	r0, r4
 800d188:	2207      	movs	r2, #7
 800d18a:	300b      	adds	r0, #11
 800d18c:	1d23      	adds	r3, r4, #4
 800d18e:	4390      	bics	r0, r2
 800d190:	1ac2      	subs	r2, r0, r3
 800d192:	4298      	cmp	r0, r3
 800d194:	d0df      	beq.n	800d156 <_malloc_r+0x86>
 800d196:	1a1b      	subs	r3, r3, r0
 800d198:	50a3      	str	r3, [r4, r2]
 800d19a:	e7dc      	b.n	800d156 <_malloc_r+0x86>
 800d19c:	605a      	str	r2, [r3, #4]
 800d19e:	e7ef      	b.n	800d180 <_malloc_r+0xb0>
 800d1a0:	0023      	movs	r3, r4
 800d1a2:	6864      	ldr	r4, [r4, #4]
 800d1a4:	e7a6      	b.n	800d0f4 <_malloc_r+0x24>
 800d1a6:	9c00      	ldr	r4, [sp, #0]
 800d1a8:	6863      	ldr	r3, [r4, #4]
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	e7ad      	b.n	800d10a <_malloc_r+0x3a>
 800d1ae:	001a      	movs	r2, r3
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	42a3      	cmp	r3, r4
 800d1b4:	d1fb      	bne.n	800d1ae <_malloc_r+0xde>
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	e7da      	b.n	800d170 <_malloc_r+0xa0>
 800d1ba:	230c      	movs	r3, #12
 800d1bc:	0028      	movs	r0, r5
 800d1be:	602b      	str	r3, [r5, #0]
 800d1c0:	f000 f98c 	bl	800d4dc <__malloc_unlock>
 800d1c4:	e7c6      	b.n	800d154 <_malloc_r+0x84>
 800d1c6:	6007      	str	r7, [r0, #0]
 800d1c8:	e7da      	b.n	800d180 <_malloc_r+0xb0>
 800d1ca:	46c0      	nop			@ (mov r8, r8)
 800d1cc:	20002680 	.word	0x20002680

0800d1d0 <_printf_common>:
 800d1d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1d2:	0016      	movs	r6, r2
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	688a      	ldr	r2, [r1, #8]
 800d1d8:	690b      	ldr	r3, [r1, #16]
 800d1da:	000c      	movs	r4, r1
 800d1dc:	9000      	str	r0, [sp, #0]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	da00      	bge.n	800d1e4 <_printf_common+0x14>
 800d1e2:	0013      	movs	r3, r2
 800d1e4:	0022      	movs	r2, r4
 800d1e6:	6033      	str	r3, [r6, #0]
 800d1e8:	3243      	adds	r2, #67	@ 0x43
 800d1ea:	7812      	ldrb	r2, [r2, #0]
 800d1ec:	2a00      	cmp	r2, #0
 800d1ee:	d001      	beq.n	800d1f4 <_printf_common+0x24>
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	6033      	str	r3, [r6, #0]
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	069b      	lsls	r3, r3, #26
 800d1f8:	d502      	bpl.n	800d200 <_printf_common+0x30>
 800d1fa:	6833      	ldr	r3, [r6, #0]
 800d1fc:	3302      	adds	r3, #2
 800d1fe:	6033      	str	r3, [r6, #0]
 800d200:	6822      	ldr	r2, [r4, #0]
 800d202:	2306      	movs	r3, #6
 800d204:	0015      	movs	r5, r2
 800d206:	401d      	ands	r5, r3
 800d208:	421a      	tst	r2, r3
 800d20a:	d027      	beq.n	800d25c <_printf_common+0x8c>
 800d20c:	0023      	movs	r3, r4
 800d20e:	3343      	adds	r3, #67	@ 0x43
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	1e5a      	subs	r2, r3, #1
 800d214:	4193      	sbcs	r3, r2
 800d216:	6822      	ldr	r2, [r4, #0]
 800d218:	0692      	lsls	r2, r2, #26
 800d21a:	d430      	bmi.n	800d27e <_printf_common+0xae>
 800d21c:	0022      	movs	r2, r4
 800d21e:	9901      	ldr	r1, [sp, #4]
 800d220:	9800      	ldr	r0, [sp, #0]
 800d222:	9d08      	ldr	r5, [sp, #32]
 800d224:	3243      	adds	r2, #67	@ 0x43
 800d226:	47a8      	blx	r5
 800d228:	3001      	adds	r0, #1
 800d22a:	d025      	beq.n	800d278 <_printf_common+0xa8>
 800d22c:	2206      	movs	r2, #6
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	2500      	movs	r5, #0
 800d232:	4013      	ands	r3, r2
 800d234:	2b04      	cmp	r3, #4
 800d236:	d105      	bne.n	800d244 <_printf_common+0x74>
 800d238:	6833      	ldr	r3, [r6, #0]
 800d23a:	68e5      	ldr	r5, [r4, #12]
 800d23c:	1aed      	subs	r5, r5, r3
 800d23e:	43eb      	mvns	r3, r5
 800d240:	17db      	asrs	r3, r3, #31
 800d242:	401d      	ands	r5, r3
 800d244:	68a3      	ldr	r3, [r4, #8]
 800d246:	6922      	ldr	r2, [r4, #16]
 800d248:	4293      	cmp	r3, r2
 800d24a:	dd01      	ble.n	800d250 <_printf_common+0x80>
 800d24c:	1a9b      	subs	r3, r3, r2
 800d24e:	18ed      	adds	r5, r5, r3
 800d250:	2600      	movs	r6, #0
 800d252:	42b5      	cmp	r5, r6
 800d254:	d120      	bne.n	800d298 <_printf_common+0xc8>
 800d256:	2000      	movs	r0, #0
 800d258:	e010      	b.n	800d27c <_printf_common+0xac>
 800d25a:	3501      	adds	r5, #1
 800d25c:	68e3      	ldr	r3, [r4, #12]
 800d25e:	6832      	ldr	r2, [r6, #0]
 800d260:	1a9b      	subs	r3, r3, r2
 800d262:	42ab      	cmp	r3, r5
 800d264:	ddd2      	ble.n	800d20c <_printf_common+0x3c>
 800d266:	0022      	movs	r2, r4
 800d268:	2301      	movs	r3, #1
 800d26a:	9901      	ldr	r1, [sp, #4]
 800d26c:	9800      	ldr	r0, [sp, #0]
 800d26e:	9f08      	ldr	r7, [sp, #32]
 800d270:	3219      	adds	r2, #25
 800d272:	47b8      	blx	r7
 800d274:	3001      	adds	r0, #1
 800d276:	d1f0      	bne.n	800d25a <_printf_common+0x8a>
 800d278:	2001      	movs	r0, #1
 800d27a:	4240      	negs	r0, r0
 800d27c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d27e:	2030      	movs	r0, #48	@ 0x30
 800d280:	18e1      	adds	r1, r4, r3
 800d282:	3143      	adds	r1, #67	@ 0x43
 800d284:	7008      	strb	r0, [r1, #0]
 800d286:	0021      	movs	r1, r4
 800d288:	1c5a      	adds	r2, r3, #1
 800d28a:	3145      	adds	r1, #69	@ 0x45
 800d28c:	7809      	ldrb	r1, [r1, #0]
 800d28e:	18a2      	adds	r2, r4, r2
 800d290:	3243      	adds	r2, #67	@ 0x43
 800d292:	3302      	adds	r3, #2
 800d294:	7011      	strb	r1, [r2, #0]
 800d296:	e7c1      	b.n	800d21c <_printf_common+0x4c>
 800d298:	0022      	movs	r2, r4
 800d29a:	2301      	movs	r3, #1
 800d29c:	9901      	ldr	r1, [sp, #4]
 800d29e:	9800      	ldr	r0, [sp, #0]
 800d2a0:	9f08      	ldr	r7, [sp, #32]
 800d2a2:	321a      	adds	r2, #26
 800d2a4:	47b8      	blx	r7
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	d0e6      	beq.n	800d278 <_printf_common+0xa8>
 800d2aa:	3601      	adds	r6, #1
 800d2ac:	e7d1      	b.n	800d252 <_printf_common+0x82>
	...

0800d2b0 <_printf_i>:
 800d2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2b2:	b08b      	sub	sp, #44	@ 0x2c
 800d2b4:	9206      	str	r2, [sp, #24]
 800d2b6:	000a      	movs	r2, r1
 800d2b8:	3243      	adds	r2, #67	@ 0x43
 800d2ba:	9307      	str	r3, [sp, #28]
 800d2bc:	9005      	str	r0, [sp, #20]
 800d2be:	9203      	str	r2, [sp, #12]
 800d2c0:	7e0a      	ldrb	r2, [r1, #24]
 800d2c2:	000c      	movs	r4, r1
 800d2c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2c6:	2a78      	cmp	r2, #120	@ 0x78
 800d2c8:	d809      	bhi.n	800d2de <_printf_i+0x2e>
 800d2ca:	2a62      	cmp	r2, #98	@ 0x62
 800d2cc:	d80b      	bhi.n	800d2e6 <_printf_i+0x36>
 800d2ce:	2a00      	cmp	r2, #0
 800d2d0:	d100      	bne.n	800d2d4 <_printf_i+0x24>
 800d2d2:	e0bc      	b.n	800d44e <_printf_i+0x19e>
 800d2d4:	497b      	ldr	r1, [pc, #492]	@ (800d4c4 <_printf_i+0x214>)
 800d2d6:	9104      	str	r1, [sp, #16]
 800d2d8:	2a58      	cmp	r2, #88	@ 0x58
 800d2da:	d100      	bne.n	800d2de <_printf_i+0x2e>
 800d2dc:	e090      	b.n	800d400 <_printf_i+0x150>
 800d2de:	0025      	movs	r5, r4
 800d2e0:	3542      	adds	r5, #66	@ 0x42
 800d2e2:	702a      	strb	r2, [r5, #0]
 800d2e4:	e022      	b.n	800d32c <_printf_i+0x7c>
 800d2e6:	0010      	movs	r0, r2
 800d2e8:	3863      	subs	r0, #99	@ 0x63
 800d2ea:	2815      	cmp	r0, #21
 800d2ec:	d8f7      	bhi.n	800d2de <_printf_i+0x2e>
 800d2ee:	f7f2 ff0b 	bl	8000108 <__gnu_thumb1_case_shi>
 800d2f2:	0016      	.short	0x0016
 800d2f4:	fff6001f 	.word	0xfff6001f
 800d2f8:	fff6fff6 	.word	0xfff6fff6
 800d2fc:	001ffff6 	.word	0x001ffff6
 800d300:	fff6fff6 	.word	0xfff6fff6
 800d304:	fff6fff6 	.word	0xfff6fff6
 800d308:	003600a1 	.word	0x003600a1
 800d30c:	fff60080 	.word	0xfff60080
 800d310:	00b2fff6 	.word	0x00b2fff6
 800d314:	0036fff6 	.word	0x0036fff6
 800d318:	fff6fff6 	.word	0xfff6fff6
 800d31c:	0084      	.short	0x0084
 800d31e:	0025      	movs	r5, r4
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	3542      	adds	r5, #66	@ 0x42
 800d324:	1d11      	adds	r1, r2, #4
 800d326:	6019      	str	r1, [r3, #0]
 800d328:	6813      	ldr	r3, [r2, #0]
 800d32a:	702b      	strb	r3, [r5, #0]
 800d32c:	2301      	movs	r3, #1
 800d32e:	e0a0      	b.n	800d472 <_printf_i+0x1c2>
 800d330:	6818      	ldr	r0, [r3, #0]
 800d332:	6809      	ldr	r1, [r1, #0]
 800d334:	1d02      	adds	r2, r0, #4
 800d336:	060d      	lsls	r5, r1, #24
 800d338:	d50b      	bpl.n	800d352 <_printf_i+0xa2>
 800d33a:	6806      	ldr	r6, [r0, #0]
 800d33c:	601a      	str	r2, [r3, #0]
 800d33e:	2e00      	cmp	r6, #0
 800d340:	da03      	bge.n	800d34a <_printf_i+0x9a>
 800d342:	232d      	movs	r3, #45	@ 0x2d
 800d344:	9a03      	ldr	r2, [sp, #12]
 800d346:	4276      	negs	r6, r6
 800d348:	7013      	strb	r3, [r2, #0]
 800d34a:	4b5e      	ldr	r3, [pc, #376]	@ (800d4c4 <_printf_i+0x214>)
 800d34c:	270a      	movs	r7, #10
 800d34e:	9304      	str	r3, [sp, #16]
 800d350:	e018      	b.n	800d384 <_printf_i+0xd4>
 800d352:	6806      	ldr	r6, [r0, #0]
 800d354:	601a      	str	r2, [r3, #0]
 800d356:	0649      	lsls	r1, r1, #25
 800d358:	d5f1      	bpl.n	800d33e <_printf_i+0x8e>
 800d35a:	b236      	sxth	r6, r6
 800d35c:	e7ef      	b.n	800d33e <_printf_i+0x8e>
 800d35e:	6808      	ldr	r0, [r1, #0]
 800d360:	6819      	ldr	r1, [r3, #0]
 800d362:	c940      	ldmia	r1!, {r6}
 800d364:	0605      	lsls	r5, r0, #24
 800d366:	d402      	bmi.n	800d36e <_printf_i+0xbe>
 800d368:	0640      	lsls	r0, r0, #25
 800d36a:	d500      	bpl.n	800d36e <_printf_i+0xbe>
 800d36c:	b2b6      	uxth	r6, r6
 800d36e:	6019      	str	r1, [r3, #0]
 800d370:	4b54      	ldr	r3, [pc, #336]	@ (800d4c4 <_printf_i+0x214>)
 800d372:	270a      	movs	r7, #10
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	2a6f      	cmp	r2, #111	@ 0x6f
 800d378:	d100      	bne.n	800d37c <_printf_i+0xcc>
 800d37a:	3f02      	subs	r7, #2
 800d37c:	0023      	movs	r3, r4
 800d37e:	2200      	movs	r2, #0
 800d380:	3343      	adds	r3, #67	@ 0x43
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	6863      	ldr	r3, [r4, #4]
 800d386:	60a3      	str	r3, [r4, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	db03      	blt.n	800d394 <_printf_i+0xe4>
 800d38c:	2104      	movs	r1, #4
 800d38e:	6822      	ldr	r2, [r4, #0]
 800d390:	438a      	bics	r2, r1
 800d392:	6022      	str	r2, [r4, #0]
 800d394:	2e00      	cmp	r6, #0
 800d396:	d102      	bne.n	800d39e <_printf_i+0xee>
 800d398:	9d03      	ldr	r5, [sp, #12]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00c      	beq.n	800d3b8 <_printf_i+0x108>
 800d39e:	9d03      	ldr	r5, [sp, #12]
 800d3a0:	0030      	movs	r0, r6
 800d3a2:	0039      	movs	r1, r7
 800d3a4:	f7f2 ff40 	bl	8000228 <__aeabi_uidivmod>
 800d3a8:	9b04      	ldr	r3, [sp, #16]
 800d3aa:	3d01      	subs	r5, #1
 800d3ac:	5c5b      	ldrb	r3, [r3, r1]
 800d3ae:	702b      	strb	r3, [r5, #0]
 800d3b0:	0033      	movs	r3, r6
 800d3b2:	0006      	movs	r6, r0
 800d3b4:	429f      	cmp	r7, r3
 800d3b6:	d9f3      	bls.n	800d3a0 <_printf_i+0xf0>
 800d3b8:	2f08      	cmp	r7, #8
 800d3ba:	d109      	bne.n	800d3d0 <_printf_i+0x120>
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	07db      	lsls	r3, r3, #31
 800d3c0:	d506      	bpl.n	800d3d0 <_printf_i+0x120>
 800d3c2:	6862      	ldr	r2, [r4, #4]
 800d3c4:	6923      	ldr	r3, [r4, #16]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	dc02      	bgt.n	800d3d0 <_printf_i+0x120>
 800d3ca:	2330      	movs	r3, #48	@ 0x30
 800d3cc:	3d01      	subs	r5, #1
 800d3ce:	702b      	strb	r3, [r5, #0]
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	1b5b      	subs	r3, r3, r5
 800d3d4:	6123      	str	r3, [r4, #16]
 800d3d6:	9b07      	ldr	r3, [sp, #28]
 800d3d8:	0021      	movs	r1, r4
 800d3da:	9300      	str	r3, [sp, #0]
 800d3dc:	9805      	ldr	r0, [sp, #20]
 800d3de:	9b06      	ldr	r3, [sp, #24]
 800d3e0:	aa09      	add	r2, sp, #36	@ 0x24
 800d3e2:	f7ff fef5 	bl	800d1d0 <_printf_common>
 800d3e6:	3001      	adds	r0, #1
 800d3e8:	d148      	bne.n	800d47c <_printf_i+0x1cc>
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	4240      	negs	r0, r0
 800d3ee:	b00b      	add	sp, #44	@ 0x2c
 800d3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	6809      	ldr	r1, [r1, #0]
 800d3f6:	430a      	orrs	r2, r1
 800d3f8:	6022      	str	r2, [r4, #0]
 800d3fa:	2278      	movs	r2, #120	@ 0x78
 800d3fc:	4932      	ldr	r1, [pc, #200]	@ (800d4c8 <_printf_i+0x218>)
 800d3fe:	9104      	str	r1, [sp, #16]
 800d400:	0021      	movs	r1, r4
 800d402:	3145      	adds	r1, #69	@ 0x45
 800d404:	700a      	strb	r2, [r1, #0]
 800d406:	6819      	ldr	r1, [r3, #0]
 800d408:	6822      	ldr	r2, [r4, #0]
 800d40a:	c940      	ldmia	r1!, {r6}
 800d40c:	0610      	lsls	r0, r2, #24
 800d40e:	d402      	bmi.n	800d416 <_printf_i+0x166>
 800d410:	0650      	lsls	r0, r2, #25
 800d412:	d500      	bpl.n	800d416 <_printf_i+0x166>
 800d414:	b2b6      	uxth	r6, r6
 800d416:	6019      	str	r1, [r3, #0]
 800d418:	07d3      	lsls	r3, r2, #31
 800d41a:	d502      	bpl.n	800d422 <_printf_i+0x172>
 800d41c:	2320      	movs	r3, #32
 800d41e:	4313      	orrs	r3, r2
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	2e00      	cmp	r6, #0
 800d424:	d001      	beq.n	800d42a <_printf_i+0x17a>
 800d426:	2710      	movs	r7, #16
 800d428:	e7a8      	b.n	800d37c <_printf_i+0xcc>
 800d42a:	2220      	movs	r2, #32
 800d42c:	6823      	ldr	r3, [r4, #0]
 800d42e:	4393      	bics	r3, r2
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	e7f8      	b.n	800d426 <_printf_i+0x176>
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	680d      	ldr	r5, [r1, #0]
 800d438:	1d10      	adds	r0, r2, #4
 800d43a:	6949      	ldr	r1, [r1, #20]
 800d43c:	6018      	str	r0, [r3, #0]
 800d43e:	6813      	ldr	r3, [r2, #0]
 800d440:	062e      	lsls	r6, r5, #24
 800d442:	d501      	bpl.n	800d448 <_printf_i+0x198>
 800d444:	6019      	str	r1, [r3, #0]
 800d446:	e002      	b.n	800d44e <_printf_i+0x19e>
 800d448:	066d      	lsls	r5, r5, #25
 800d44a:	d5fb      	bpl.n	800d444 <_printf_i+0x194>
 800d44c:	8019      	strh	r1, [r3, #0]
 800d44e:	2300      	movs	r3, #0
 800d450:	9d03      	ldr	r5, [sp, #12]
 800d452:	6123      	str	r3, [r4, #16]
 800d454:	e7bf      	b.n	800d3d6 <_printf_i+0x126>
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	1d11      	adds	r1, r2, #4
 800d45a:	6019      	str	r1, [r3, #0]
 800d45c:	6815      	ldr	r5, [r2, #0]
 800d45e:	2100      	movs	r1, #0
 800d460:	0028      	movs	r0, r5
 800d462:	6862      	ldr	r2, [r4, #4]
 800d464:	f000 f896 	bl	800d594 <memchr>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d001      	beq.n	800d470 <_printf_i+0x1c0>
 800d46c:	1b40      	subs	r0, r0, r5
 800d46e:	6060      	str	r0, [r4, #4]
 800d470:	6863      	ldr	r3, [r4, #4]
 800d472:	6123      	str	r3, [r4, #16]
 800d474:	2300      	movs	r3, #0
 800d476:	9a03      	ldr	r2, [sp, #12]
 800d478:	7013      	strb	r3, [r2, #0]
 800d47a:	e7ac      	b.n	800d3d6 <_printf_i+0x126>
 800d47c:	002a      	movs	r2, r5
 800d47e:	6923      	ldr	r3, [r4, #16]
 800d480:	9906      	ldr	r1, [sp, #24]
 800d482:	9805      	ldr	r0, [sp, #20]
 800d484:	9d07      	ldr	r5, [sp, #28]
 800d486:	47a8      	blx	r5
 800d488:	3001      	adds	r0, #1
 800d48a:	d0ae      	beq.n	800d3ea <_printf_i+0x13a>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	079b      	lsls	r3, r3, #30
 800d490:	d415      	bmi.n	800d4be <_printf_i+0x20e>
 800d492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d494:	68e0      	ldr	r0, [r4, #12]
 800d496:	4298      	cmp	r0, r3
 800d498:	daa9      	bge.n	800d3ee <_printf_i+0x13e>
 800d49a:	0018      	movs	r0, r3
 800d49c:	e7a7      	b.n	800d3ee <_printf_i+0x13e>
 800d49e:	0022      	movs	r2, r4
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	9906      	ldr	r1, [sp, #24]
 800d4a4:	9805      	ldr	r0, [sp, #20]
 800d4a6:	9e07      	ldr	r6, [sp, #28]
 800d4a8:	3219      	adds	r2, #25
 800d4aa:	47b0      	blx	r6
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	d09c      	beq.n	800d3ea <_printf_i+0x13a>
 800d4b0:	3501      	adds	r5, #1
 800d4b2:	68e3      	ldr	r3, [r4, #12]
 800d4b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4b6:	1a9b      	subs	r3, r3, r2
 800d4b8:	42ab      	cmp	r3, r5
 800d4ba:	dcf0      	bgt.n	800d49e <_printf_i+0x1ee>
 800d4bc:	e7e9      	b.n	800d492 <_printf_i+0x1e2>
 800d4be:	2500      	movs	r5, #0
 800d4c0:	e7f7      	b.n	800d4b2 <_printf_i+0x202>
 800d4c2:	46c0      	nop			@ (mov r8, r8)
 800d4c4:	0800d8f5 	.word	0x0800d8f5
 800d4c8:	0800d906 	.word	0x0800d906

0800d4cc <__malloc_lock>:
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	4802      	ldr	r0, [pc, #8]	@ (800d4d8 <__malloc_lock+0xc>)
 800d4d0:	f7ff fc28 	bl	800cd24 <__retarget_lock_acquire_recursive>
 800d4d4:	bd10      	pop	{r4, pc}
 800d4d6:	46c0      	nop			@ (mov r8, r8)
 800d4d8:	20002678 	.word	0x20002678

0800d4dc <__malloc_unlock>:
 800d4dc:	b510      	push	{r4, lr}
 800d4de:	4802      	ldr	r0, [pc, #8]	@ (800d4e8 <__malloc_unlock+0xc>)
 800d4e0:	f7ff fc21 	bl	800cd26 <__retarget_lock_release_recursive>
 800d4e4:	bd10      	pop	{r4, pc}
 800d4e6:	46c0      	nop			@ (mov r8, r8)
 800d4e8:	20002678 	.word	0x20002678

0800d4ec <_realloc_r>:
 800d4ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4ee:	0006      	movs	r6, r0
 800d4f0:	000c      	movs	r4, r1
 800d4f2:	0015      	movs	r5, r2
 800d4f4:	2900      	cmp	r1, #0
 800d4f6:	d105      	bne.n	800d504 <_realloc_r+0x18>
 800d4f8:	0011      	movs	r1, r2
 800d4fa:	f7ff fde9 	bl	800d0d0 <_malloc_r>
 800d4fe:	0004      	movs	r4, r0
 800d500:	0020      	movs	r0, r4
 800d502:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d504:	2a00      	cmp	r2, #0
 800d506:	d103      	bne.n	800d510 <_realloc_r+0x24>
 800d508:	f7ff fc18 	bl	800cd3c <_free_r>
 800d50c:	2400      	movs	r4, #0
 800d50e:	e7f7      	b.n	800d500 <_realloc_r+0x14>
 800d510:	f000 f84b 	bl	800d5aa <_malloc_usable_size_r>
 800d514:	0007      	movs	r7, r0
 800d516:	4285      	cmp	r5, r0
 800d518:	d802      	bhi.n	800d520 <_realloc_r+0x34>
 800d51a:	0843      	lsrs	r3, r0, #1
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	d3ef      	bcc.n	800d500 <_realloc_r+0x14>
 800d520:	0029      	movs	r1, r5
 800d522:	0030      	movs	r0, r6
 800d524:	f7ff fdd4 	bl	800d0d0 <_malloc_r>
 800d528:	9001      	str	r0, [sp, #4]
 800d52a:	2800      	cmp	r0, #0
 800d52c:	d0ee      	beq.n	800d50c <_realloc_r+0x20>
 800d52e:	002a      	movs	r2, r5
 800d530:	42bd      	cmp	r5, r7
 800d532:	d900      	bls.n	800d536 <_realloc_r+0x4a>
 800d534:	003a      	movs	r2, r7
 800d536:	0021      	movs	r1, r4
 800d538:	9801      	ldr	r0, [sp, #4]
 800d53a:	f7ff fbf5 	bl	800cd28 <memcpy>
 800d53e:	0021      	movs	r1, r4
 800d540:	0030      	movs	r0, r6
 800d542:	f7ff fbfb 	bl	800cd3c <_free_r>
 800d546:	9c01      	ldr	r4, [sp, #4]
 800d548:	e7da      	b.n	800d500 <_realloc_r+0x14>

0800d54a <memmove>:
 800d54a:	b510      	push	{r4, lr}
 800d54c:	4288      	cmp	r0, r1
 800d54e:	d806      	bhi.n	800d55e <memmove+0x14>
 800d550:	2300      	movs	r3, #0
 800d552:	429a      	cmp	r2, r3
 800d554:	d008      	beq.n	800d568 <memmove+0x1e>
 800d556:	5ccc      	ldrb	r4, [r1, r3]
 800d558:	54c4      	strb	r4, [r0, r3]
 800d55a:	3301      	adds	r3, #1
 800d55c:	e7f9      	b.n	800d552 <memmove+0x8>
 800d55e:	188b      	adds	r3, r1, r2
 800d560:	4298      	cmp	r0, r3
 800d562:	d2f5      	bcs.n	800d550 <memmove+0x6>
 800d564:	3a01      	subs	r2, #1
 800d566:	d200      	bcs.n	800d56a <memmove+0x20>
 800d568:	bd10      	pop	{r4, pc}
 800d56a:	5c8b      	ldrb	r3, [r1, r2]
 800d56c:	5483      	strb	r3, [r0, r2]
 800d56e:	e7f9      	b.n	800d564 <memmove+0x1a>

0800d570 <_sbrk_r>:
 800d570:	2300      	movs	r3, #0
 800d572:	b570      	push	{r4, r5, r6, lr}
 800d574:	4d06      	ldr	r5, [pc, #24]	@ (800d590 <_sbrk_r+0x20>)
 800d576:	0004      	movs	r4, r0
 800d578:	0008      	movs	r0, r1
 800d57a:	602b      	str	r3, [r5, #0]
 800d57c:	f7f3 fe88 	bl	8001290 <_sbrk>
 800d580:	1c43      	adds	r3, r0, #1
 800d582:	d103      	bne.n	800d58c <_sbrk_r+0x1c>
 800d584:	682b      	ldr	r3, [r5, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d000      	beq.n	800d58c <_sbrk_r+0x1c>
 800d58a:	6023      	str	r3, [r4, #0]
 800d58c:	bd70      	pop	{r4, r5, r6, pc}
 800d58e:	46c0      	nop			@ (mov r8, r8)
 800d590:	20002674 	.word	0x20002674

0800d594 <memchr>:
 800d594:	b2c9      	uxtb	r1, r1
 800d596:	1882      	adds	r2, r0, r2
 800d598:	4290      	cmp	r0, r2
 800d59a:	d101      	bne.n	800d5a0 <memchr+0xc>
 800d59c:	2000      	movs	r0, #0
 800d59e:	4770      	bx	lr
 800d5a0:	7803      	ldrb	r3, [r0, #0]
 800d5a2:	428b      	cmp	r3, r1
 800d5a4:	d0fb      	beq.n	800d59e <memchr+0xa>
 800d5a6:	3001      	adds	r0, #1
 800d5a8:	e7f6      	b.n	800d598 <memchr+0x4>

0800d5aa <_malloc_usable_size_r>:
 800d5aa:	1f0b      	subs	r3, r1, #4
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	1f18      	subs	r0, r3, #4
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	da01      	bge.n	800d5b8 <_malloc_usable_size_r+0xe>
 800d5b4:	580b      	ldr	r3, [r1, r0]
 800d5b6:	18c0      	adds	r0, r0, r3
 800d5b8:	4770      	bx	lr
	...

0800d5bc <_init>:
 800d5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5be:	46c0      	nop			@ (mov r8, r8)
 800d5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5c2:	bc08      	pop	{r3}
 800d5c4:	469e      	mov	lr, r3
 800d5c6:	4770      	bx	lr

0800d5c8 <_fini>:
 800d5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ca:	46c0      	nop			@ (mov r8, r8)
 800d5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ce:	bc08      	pop	{r3}
 800d5d0:	469e      	mov	lr, r3
 800d5d2:	4770      	bx	lr
