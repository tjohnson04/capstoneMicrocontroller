
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f14  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002fcc  08002fcc  00003fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800300c  0800300c  00005024  2**0
                  CONTENTS
  4 .ARM          00000000  0800300c  0800300c  00005024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800300c  0800300c  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800300c  0800300c  0000400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003010  08003010  00004010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003014  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000024  08003038  00005024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08003038  000050c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f1a  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002091  00000000  00000000  0000cf66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0000eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000630  00000000  00000000  0000f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c34  00000000  00000000  0000fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be2d  00000000  00000000  00025abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000809b5  00000000  00000000  000318e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b229e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b3c  00000000  00000000  000b22e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000b3e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000024 	.word	0x20000024
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002fb4 	.word	0x08002fb4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000028 	.word	0x20000028
 80000fc:	08002fb4 	.word	0x08002fb4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b089      	sub	sp, #36	@ 0x24
 800021c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021e:	240c      	movs	r4, #12
 8000220:	193b      	adds	r3, r7, r4
 8000222:	0018      	movs	r0, r3
 8000224:	2314      	movs	r3, #20
 8000226:	001a      	movs	r2, r3
 8000228:	2100      	movs	r1, #0
 800022a:	f002 fe97 	bl	8002f5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022e:	4b1a      	ldr	r3, [pc, #104]	@ (8000298 <MX_GPIO_Init+0x80>)
 8000230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000232:	4b19      	ldr	r3, [pc, #100]	@ (8000298 <MX_GPIO_Init+0x80>)
 8000234:	2101      	movs	r1, #1
 8000236:	430a      	orrs	r2, r1
 8000238:	635a      	str	r2, [r3, #52]	@ 0x34
 800023a:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <MX_GPIO_Init+0x80>)
 800023c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800023e:	2201      	movs	r2, #1
 8000240:	4013      	ands	r3, r2
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000246:	4b14      	ldr	r3, [pc, #80]	@ (8000298 <MX_GPIO_Init+0x80>)
 8000248:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800024a:	4b13      	ldr	r3, [pc, #76]	@ (8000298 <MX_GPIO_Init+0x80>)
 800024c:	2102      	movs	r1, #2
 800024e:	430a      	orrs	r2, r1
 8000250:	635a      	str	r2, [r3, #52]	@ 0x34
 8000252:	4b11      	ldr	r3, [pc, #68]	@ (8000298 <MX_GPIO_Init+0x80>)
 8000254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000256:	2202      	movs	r2, #2
 8000258:	4013      	ands	r3, r2
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800025e:	4b0f      	ldr	r3, [pc, #60]	@ (800029c <MX_GPIO_Init+0x84>)
 8000260:	2200      	movs	r2, #0
 8000262:	2102      	movs	r1, #2
 8000264:	0018      	movs	r0, r3
 8000266:	f000 fcb9 	bl	8000bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800026a:	0021      	movs	r1, r4
 800026c:	187b      	adds	r3, r7, r1
 800026e:	2202      	movs	r2, #2
 8000270:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000272:	187b      	adds	r3, r7, r1
 8000274:	2201      	movs	r2, #1
 8000276:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000278:	187b      	adds	r3, r7, r1
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2200      	movs	r2, #0
 8000282:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000284:	187b      	adds	r3, r7, r1
 8000286:	4a05      	ldr	r2, [pc, #20]	@ (800029c <MX_GPIO_Init+0x84>)
 8000288:	0019      	movs	r1, r3
 800028a:	0010      	movs	r0, r2
 800028c:	f000 fb42 	bl	8000914 <HAL_GPIO_Init>

}
 8000290:	46c0      	nop			@ (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b009      	add	sp, #36	@ 0x24
 8000296:	bd90      	pop	{r4, r7, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	50000400 	.word	0x50000400

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 f968 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f80d 	bl	80002c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f7ff ffb4 	bl	8000218 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002b0:	f000 f858 	bl	8000364 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80002b4:	f002 f802 	bl	80022bc <MX_FATFS_Init>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d002      	beq.n	80002c2 <main+0x22>
    Error_Handler();
 80002bc:	f000 f84b 	bl	8000356 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002c0:	46c0      	nop			@ (mov r8, r8)
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	e7fd      	b.n	80002c2 <main+0x22>

080002c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c6:	b590      	push	{r4, r7, lr}
 80002c8:	b093      	sub	sp, #76	@ 0x4c
 80002ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002cc:	2414      	movs	r4, #20
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2334      	movs	r3, #52	@ 0x34
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f002 fe40 	bl	8002f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	0018      	movs	r0, r3
 80002e0:	2310      	movs	r3, #16
 80002e2:	001a      	movs	r2, r3
 80002e4:	2100      	movs	r1, #0
 80002e6:	f002 fe39 	bl	8002f5c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002ea:	2380      	movs	r3, #128	@ 0x80
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 fc92 	bl	8000c18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2202      	movs	r2, #2
 80002f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2280      	movs	r2, #128	@ 0x80
 80002fe:	0052      	lsls	r2, r2, #1
 8000300:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000302:	193b      	adds	r3, r7, r4
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2240      	movs	r2, #64	@ 0x40
 800030c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2200      	movs	r2, #0
 8000312:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	193b      	adds	r3, r7, r4
 8000316:	0018      	movs	r0, r3
 8000318:	f000 fcbe 	bl	8000c98 <HAL_RCC_OscConfig>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000320:	f000 f819 	bl	8000356 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2207      	movs	r2, #7
 8000328:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2100      	movs	r1, #0
 8000340:	0018      	movs	r0, r3
 8000342:	f000 ffb9 	bl	80012b8 <HAL_RCC_ClockConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x88>
  {
    Error_Handler();
 800034a:	f000 f804 	bl	8000356 <Error_Handler>
  }
}
 800034e:	46c0      	nop			@ (mov r8, r8)
 8000350:	46bd      	mov	sp, r7
 8000352:	b013      	add	sp, #76	@ 0x4c
 8000354:	bd90      	pop	{r4, r7, pc}

08000356 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800035a:	b672      	cpsid	i
}
 800035c:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	e7fd      	b.n	800035e <Error_Handler+0x8>
	...

08000364 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	@ (80003d8 <MX_SPI1_Init+0x74>)
 800036a:	4a1c      	ldr	r2, [pc, #112]	@ (80003dc <MX_SPI1_Init+0x78>)
 800036c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800036e:	4b1a      	ldr	r3, [pc, #104]	@ (80003d8 <MX_SPI1_Init+0x74>)
 8000370:	2282      	movs	r2, #130	@ 0x82
 8000372:	0052      	lsls	r2, r2, #1
 8000374:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000376:	4b18      	ldr	r3, [pc, #96]	@ (80003d8 <MX_SPI1_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800037c:	4b16      	ldr	r3, [pc, #88]	@ (80003d8 <MX_SPI1_Init+0x74>)
 800037e:	22e0      	movs	r2, #224	@ 0xe0
 8000380:	00d2      	lsls	r2, r2, #3
 8000382:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000384:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MX_SPI1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800038a:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <MX_SPI1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000390:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <MX_SPI1_Init+0x74>)
 8000392:	2280      	movs	r2, #128	@ 0x80
 8000394:	0092      	lsls	r2, r2, #2
 8000396:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_SPI1_Init+0x74>)
 800039a:	2228      	movs	r2, #40	@ 0x28
 800039c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_SPI1_Init+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <MX_SPI1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <MX_SPI1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <MX_SPI1_Init+0x74>)
 80003b2:	2207      	movs	r2, #7
 80003b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <MX_SPI1_Init+0x74>)
 80003be:	2208      	movs	r2, #8
 80003c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c2:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <MX_SPI1_Init+0x74>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f901 	bl	80015cc <HAL_SPI_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003ce:	f7ff ffc2 	bl	8000356 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000040 	.word	0x20000040
 80003dc:	40013000 	.word	0x40013000

080003e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b08b      	sub	sp, #44	@ 0x2c
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e8:	2414      	movs	r4, #20
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	0018      	movs	r0, r3
 80003ee:	2314      	movs	r3, #20
 80003f0:	001a      	movs	r2, r3
 80003f2:	2100      	movs	r1, #0
 80003f4:	f002 fdb2 	bl	8002f5c <memset>
  if(spiHandle->Instance==SPI1)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a1f      	ldr	r2, [pc, #124]	@ (800047c <HAL_SPI_MspInit+0x9c>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d138      	bne.n	8000474 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000402:	4b1f      	ldr	r3, [pc, #124]	@ (8000480 <HAL_SPI_MspInit+0xa0>)
 8000404:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000406:	4b1e      	ldr	r3, [pc, #120]	@ (8000480 <HAL_SPI_MspInit+0xa0>)
 8000408:	2180      	movs	r1, #128	@ 0x80
 800040a:	0149      	lsls	r1, r1, #5
 800040c:	430a      	orrs	r2, r1
 800040e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <HAL_SPI_MspInit+0xa0>)
 8000412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000414:	2380      	movs	r3, #128	@ 0x80
 8000416:	015b      	lsls	r3, r3, #5
 8000418:	4013      	ands	r3, r2
 800041a:	613b      	str	r3, [r7, #16]
 800041c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <HAL_SPI_MspInit+0xa0>)
 8000420:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000422:	4b17      	ldr	r3, [pc, #92]	@ (8000480 <HAL_SPI_MspInit+0xa0>)
 8000424:	2101      	movs	r1, #1
 8000426:	430a      	orrs	r2, r1
 8000428:	635a      	str	r2, [r3, #52]	@ 0x34
 800042a:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <HAL_SPI_MspInit+0xa0>)
 800042c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800042e:	2201      	movs	r2, #1
 8000430:	4013      	ands	r3, r2
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000436:	0021      	movs	r1, r4
 8000438:	187b      	adds	r3, r7, r1
 800043a:	22e0      	movs	r2, #224	@ 0xe0
 800043c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2202      	movs	r2, #2
 8000442:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	187a      	adds	r2, r7, r1
 8000458:	23a0      	movs	r3, #160	@ 0xa0
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	0011      	movs	r1, r2
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fa58 	bl	8000914 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2019      	movs	r0, #25
 800046a:	f000 f9b7 	bl	80007dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800046e:	2019      	movs	r0, #25
 8000470:	f000 f9c9 	bl	8000806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000474:	46c0      	nop			@ (mov r8, r8)
 8000476:	46bd      	mov	sp, r7
 8000478:	b00b      	add	sp, #44	@ 0x2c
 800047a:	bd90      	pop	{r4, r7, pc}
 800047c:	40013000 	.word	0x40013000
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	@ (80004c8 <HAL_MspInit+0x44>)
 800048c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800048e:	4b0e      	ldr	r3, [pc, #56]	@ (80004c8 <HAL_MspInit+0x44>)
 8000490:	2101      	movs	r1, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	641a      	str	r2, [r3, #64]	@ 0x40
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <HAL_MspInit+0x44>)
 8000498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800049a:	2201      	movs	r2, #1
 800049c:	4013      	ands	r3, r2
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004a6:	4b08      	ldr	r3, [pc, #32]	@ (80004c8 <HAL_MspInit+0x44>)
 80004a8:	2180      	movs	r1, #128	@ 0x80
 80004aa:	0549      	lsls	r1, r1, #21
 80004ac:	430a      	orrs	r2, r1
 80004ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80004b0:	4b05      	ldr	r3, [pc, #20]	@ (80004c8 <HAL_MspInit+0x44>)
 80004b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80004b4:	2380      	movs	r3, #128	@ 0x80
 80004b6:	055b      	lsls	r3, r3, #21
 80004b8:	4013      	ands	r3, r2
 80004ba:	603b      	str	r3, [r7, #0]
 80004bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	46bd      	mov	sp, r7
 80004c2:	b002      	add	sp, #8
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			@ (mov r8, r8)
 80004c8:	40021000 	.word	0x40021000

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	e7fd      	b.n	80004d0 <NMI_Handler+0x4>

080004d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	46c0      	nop			@ (mov r8, r8)
 80004da:	e7fd      	b.n	80004d8 <HardFault_Handler+0x4>

080004dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004e0:	46c0      	nop			@ (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f4:	f000 f8aa 	bl	800064c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f8:	46c0      	nop			@ (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000504:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <SPI1_IRQHandler+0x14>)
 8000506:	0018      	movs	r0, r3
 8000508:	f001 fc5a 	bl	8001dc0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	20000040 	.word	0x20000040

08000518 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	46c0      	nop			@ (mov r8, r8)
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	@ (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f7ff fff6 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	@ (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	@ (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	@ (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f002 fd0b 	bl	8002f6c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000556:	f7ff fea3 	bl	80002a0 <main>

0800055a <LoopForever>:

LoopForever:
  b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000568:	08003014 	.word	0x08003014
  ldr r2, =_sbss
 800056c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000570:	200000c4 	.word	0x200000c4

08000574 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_IRQHandler>
	...

08000578 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800057e:	1dfb      	adds	r3, r7, #7
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <HAL_Init+0x3c>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <HAL_Init+0x3c>)
 800058a:	2180      	movs	r1, #128	@ 0x80
 800058c:	0049      	lsls	r1, r1, #1
 800058e:	430a      	orrs	r2, r1
 8000590:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000592:	2003      	movs	r0, #3
 8000594:	f000 f810 	bl	80005b8 <HAL_InitTick>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d003      	beq.n	80005a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
 80005a2:	e001      	b.n	80005a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f7ff ff6e 	bl	8000484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005a8:	1dfb      	adds	r3, r7, #7
 80005aa:	781b      	ldrb	r3, [r3, #0]
}
 80005ac:	0018      	movs	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b002      	add	sp, #8
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40022000 	.word	0x40022000

080005b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005c0:	230f      	movs	r3, #15
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80005c8:	4b1d      	ldr	r3, [pc, #116]	@ (8000640 <HAL_InitTick+0x88>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d02b      	beq.n	8000628 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80005d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <HAL_InitTick+0x8c>)
 80005d2:	681c      	ldr	r4, [r3, #0]
 80005d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000640 <HAL_InitTick+0x88>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	0019      	movs	r1, r3
 80005da:	23fa      	movs	r3, #250	@ 0xfa
 80005dc:	0098      	lsls	r0, r3, #2
 80005de:	f7ff fd8f 	bl	8000100 <__udivsi3>
 80005e2:	0003      	movs	r3, r0
 80005e4:	0019      	movs	r1, r3
 80005e6:	0020      	movs	r0, r4
 80005e8:	f7ff fd8a 	bl	8000100 <__udivsi3>
 80005ec:	0003      	movs	r3, r0
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 f919 	bl	8000826 <HAL_SYSTICK_Config>
 80005f4:	1e03      	subs	r3, r0, #0
 80005f6:	d112      	bne.n	800061e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2b03      	cmp	r3, #3
 80005fc:	d80a      	bhi.n	8000614 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	2301      	movs	r3, #1
 8000602:	425b      	negs	r3, r3
 8000604:	2200      	movs	r2, #0
 8000606:	0018      	movs	r0, r3
 8000608:	f000 f8e8 	bl	80007dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800060c:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <HAL_InitTick+0x90>)
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	e00d      	b.n	8000630 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000614:	230f      	movs	r3, #15
 8000616:	18fb      	adds	r3, r7, r3
 8000618:	2201      	movs	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	e008      	b.n	8000630 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800061e:	230f      	movs	r3, #15
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e003      	b.n	8000630 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000628:	230f      	movs	r3, #15
 800062a:	18fb      	adds	r3, r7, r3
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000630:	230f      	movs	r3, #15
 8000632:	18fb      	adds	r3, r7, r3
 8000634:	781b      	ldrb	r3, [r3, #0]
}
 8000636:	0018      	movs	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	b005      	add	sp, #20
 800063c:	bd90      	pop	{r4, r7, pc}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	20000008 	.word	0x20000008
 8000644:	20000000 	.word	0x20000000
 8000648:	20000004 	.word	0x20000004

0800064c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <HAL_IncTick+0x1c>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	001a      	movs	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <HAL_IncTick+0x20>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	18d2      	adds	r2, r2, r3
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <HAL_IncTick+0x20>)
 800065e:	601a      	str	r2, [r3, #0]
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	20000008 	.word	0x20000008
 800066c:	200000a4 	.word	0x200000a4

08000670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  return uwTick;
 8000674:	4b02      	ldr	r3, [pc, #8]	@ (8000680 <HAL_GetTick+0x10>)
 8000676:	681b      	ldr	r3, [r3, #0]
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	200000a4 	.word	0x200000a4

08000684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	0002      	movs	r2, r0
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b7f      	cmp	r3, #127	@ 0x7f
 8000696:	d809      	bhi.n	80006ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000698:	1dfb      	adds	r3, r7, #7
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	001a      	movs	r2, r3
 800069e:	231f      	movs	r3, #31
 80006a0:	401a      	ands	r2, r3
 80006a2:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <__NVIC_EnableIRQ+0x30>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	4091      	lsls	r1, r2
 80006a8:	000a      	movs	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80006ac:	46c0      	nop			@ (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	0002      	movs	r2, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80006cc:	d828      	bhi.n	8000720 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ce:	4a2f      	ldr	r2, [pc, #188]	@ (800078c <__NVIC_SetPriority+0xd4>)
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	33c0      	adds	r3, #192	@ 0xc0
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	589b      	ldr	r3, [r3, r2]
 80006de:	1dfa      	adds	r2, r7, #7
 80006e0:	7812      	ldrb	r2, [r2, #0]
 80006e2:	0011      	movs	r1, r2
 80006e4:	2203      	movs	r2, #3
 80006e6:	400a      	ands	r2, r1
 80006e8:	00d2      	lsls	r2, r2, #3
 80006ea:	21ff      	movs	r1, #255	@ 0xff
 80006ec:	4091      	lsls	r1, r2
 80006ee:	000a      	movs	r2, r1
 80006f0:	43d2      	mvns	r2, r2
 80006f2:	401a      	ands	r2, r3
 80006f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	019b      	lsls	r3, r3, #6
 80006fa:	22ff      	movs	r2, #255	@ 0xff
 80006fc:	401a      	ands	r2, r3
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	0018      	movs	r0, r3
 8000704:	2303      	movs	r3, #3
 8000706:	4003      	ands	r3, r0
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800070c:	481f      	ldr	r0, [pc, #124]	@ (800078c <__NVIC_SetPriority+0xd4>)
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b25b      	sxtb	r3, r3
 8000714:	089b      	lsrs	r3, r3, #2
 8000716:	430a      	orrs	r2, r1
 8000718:	33c0      	adds	r3, #192	@ 0xc0
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800071e:	e031      	b.n	8000784 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000720:	4a1b      	ldr	r2, [pc, #108]	@ (8000790 <__NVIC_SetPriority+0xd8>)
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	0019      	movs	r1, r3
 8000728:	230f      	movs	r3, #15
 800072a:	400b      	ands	r3, r1
 800072c:	3b08      	subs	r3, #8
 800072e:	089b      	lsrs	r3, r3, #2
 8000730:	3306      	adds	r3, #6
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	18d3      	adds	r3, r2, r3
 8000736:	3304      	adds	r3, #4
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	1dfa      	adds	r2, r7, #7
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	0011      	movs	r1, r2
 8000740:	2203      	movs	r2, #3
 8000742:	400a      	ands	r2, r1
 8000744:	00d2      	lsls	r2, r2, #3
 8000746:	21ff      	movs	r1, #255	@ 0xff
 8000748:	4091      	lsls	r1, r2
 800074a:	000a      	movs	r2, r1
 800074c:	43d2      	mvns	r2, r2
 800074e:	401a      	ands	r2, r3
 8000750:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	019b      	lsls	r3, r3, #6
 8000756:	22ff      	movs	r2, #255	@ 0xff
 8000758:	401a      	ands	r2, r3
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	0018      	movs	r0, r3
 8000760:	2303      	movs	r3, #3
 8000762:	4003      	ands	r3, r0
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000768:	4809      	ldr	r0, [pc, #36]	@ (8000790 <__NVIC_SetPriority+0xd8>)
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	001c      	movs	r4, r3
 8000770:	230f      	movs	r3, #15
 8000772:	4023      	ands	r3, r4
 8000774:	3b08      	subs	r3, #8
 8000776:	089b      	lsrs	r3, r3, #2
 8000778:	430a      	orrs	r2, r1
 800077a:	3306      	adds	r3, #6
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	18c3      	adds	r3, r0, r3
 8000780:	3304      	adds	r3, #4
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	46c0      	nop			@ (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	b003      	add	sp, #12
 800078a:	bd90      	pop	{r4, r7, pc}
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	1e5a      	subs	r2, r3, #1
 80007a0:	2380      	movs	r3, #128	@ 0x80
 80007a2:	045b      	lsls	r3, r3, #17
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d301      	bcc.n	80007ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a8:	2301      	movs	r3, #1
 80007aa:	e010      	b.n	80007ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <SysTick_Config+0x44>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	3a01      	subs	r2, #1
 80007b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b4:	2301      	movs	r3, #1
 80007b6:	425b      	negs	r3, r3
 80007b8:	2103      	movs	r1, #3
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff ff7c 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <SysTick_Config+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <SysTick_Config+0x44>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
 80007e6:	210f      	movs	r1, #15
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	1c02      	adds	r2, r0, #0
 80007ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80007ee:	68ba      	ldr	r2, [r7, #8]
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff ff5d 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b004      	add	sp, #16
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	0002      	movs	r2, r0
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b25b      	sxtb	r3, r3
 8000818:	0018      	movs	r0, r3
 800081a:	f7ff ff33 	bl	8000684 <__NVIC_EnableIRQ>
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	0018      	movs	r0, r3
 8000832:	f7ff ffaf 	bl	8000794 <SysTick_Config>
 8000836:	0003      	movs	r3, r0
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b002      	add	sp, #8
 800083e:	bd80      	pop	{r7, pc}

08000840 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000848:	210f      	movs	r1, #15
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2225      	movs	r2, #37	@ 0x25
 8000854:	5c9b      	ldrb	r3, [r3, r2]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b02      	cmp	r3, #2
 800085a:	d006      	beq.n	800086a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2204      	movs	r2, #4
 8000860:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
 8000868:	e049      	b.n	80008fe <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	210e      	movs	r1, #14
 8000876:	438a      	bics	r2, r1
 8000878:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	438a      	bics	r2, r1
 8000888:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000894:	491d      	ldr	r1, [pc, #116]	@ (800090c <HAL_DMA_Abort_IT+0xcc>)
 8000896:	400a      	ands	r2, r1
 8000898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <HAL_DMA_Abort_IT+0xd0>)
 800089c:	6859      	ldr	r1, [r3, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a2:	221c      	movs	r2, #28
 80008a4:	4013      	ands	r3, r2
 80008a6:	2201      	movs	r2, #1
 80008a8:	409a      	lsls	r2, r3
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <HAL_DMA_Abort_IT+0xd0>)
 80008ac:	430a      	orrs	r2, r1
 80008ae:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80008b8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00c      	beq.n	80008dc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80008cc:	490f      	ldr	r1, [pc, #60]	@ (800090c <HAL_DMA_Abort_IT+0xcc>)
 80008ce:	400a      	ands	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80008da:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2225      	movs	r2, #37	@ 0x25
 80008e0:	2101      	movs	r1, #1
 80008e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2224      	movs	r2, #36	@ 0x24
 80008e8:	2100      	movs	r1, #0
 80008ea:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d004      	beq.n	80008fe <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	0010      	movs	r0, r2
 80008fc:	4798      	blx	r3
    }
  }
  return status;
 80008fe:	230f      	movs	r3, #15
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b004      	add	sp, #16
 800090a:	bd80      	pop	{r7, pc}
 800090c:	fffffeff 	.word	0xfffffeff
 8000910:	40020000 	.word	0x40020000

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000922:	e147      	b.n	8000bb4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	4091      	lsls	r1, r2
 800092e:	000a      	movs	r2, r1
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d100      	bne.n	800093c <HAL_GPIO_Init+0x28>
 800093a:	e138      	b.n	8000bae <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	2203      	movs	r2, #3
 8000942:	4013      	ands	r3, r2
 8000944:	2b01      	cmp	r3, #1
 8000946:	d005      	beq.n	8000954 <HAL_GPIO_Init+0x40>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	2203      	movs	r2, #3
 800094e:	4013      	ands	r3, r2
 8000950:	2b02      	cmp	r3, #2
 8000952:	d130      	bne.n	80009b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	409a      	lsls	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	43da      	mvns	r2, r3
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	409a      	lsls	r2, r3
 8000976:	0013      	movs	r3, r2
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800098a:	2201      	movs	r2, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	409a      	lsls	r2, r3
 8000990:	0013      	movs	r3, r2
 8000992:	43da      	mvns	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	2201      	movs	r2, #1
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	2203      	movs	r2, #3
 80009bc:	4013      	ands	r3, r2
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d017      	beq.n	80009f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	409a      	lsls	r2, r3
 80009d0:	0013      	movs	r3, r2
 80009d2:	43da      	mvns	r2, r3
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	409a      	lsls	r2, r3
 80009e4:	0013      	movs	r3, r2
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	2203      	movs	r2, #3
 80009f8:	4013      	ands	r3, r2
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d123      	bne.n	8000a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	08da      	lsrs	r2, r3, #3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3208      	adds	r2, #8
 8000a06:	0092      	lsls	r2, r2, #2
 8000a08:	58d3      	ldr	r3, [r2, r3]
 8000a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	2207      	movs	r2, #7
 8000a10:	4013      	ands	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	220f      	movs	r2, #15
 8000a16:	409a      	lsls	r2, r3
 8000a18:	0013      	movs	r3, r2
 8000a1a:	43da      	mvns	r2, r3
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	691a      	ldr	r2, [r3, #16]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	2107      	movs	r1, #7
 8000a2a:	400b      	ands	r3, r1
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	08da      	lsrs	r2, r3, #3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3208      	adds	r2, #8
 8000a40:	0092      	lsls	r2, r2, #2
 8000a42:	6939      	ldr	r1, [r7, #16]
 8000a44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2203      	movs	r2, #3
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	43da      	mvns	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	2203      	movs	r2, #3
 8000a64:	401a      	ands	r2, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	409a      	lsls	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	23c0      	movs	r3, #192	@ 0xc0
 8000a80:	029b      	lsls	r3, r3, #10
 8000a82:	4013      	ands	r3, r2
 8000a84:	d100      	bne.n	8000a88 <HAL_GPIO_Init+0x174>
 8000a86:	e092      	b.n	8000bae <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000a88:	4a50      	ldr	r2, [pc, #320]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	089b      	lsrs	r3, r3, #2
 8000a8e:	3318      	adds	r3, #24
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	589b      	ldr	r3, [r3, r2]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	2203      	movs	r2, #3
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	0013      	movs	r3, r2
 8000aa4:	43da      	mvns	r2, r3
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	23a0      	movs	r3, #160	@ 0xa0
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d013      	beq.n	8000ade <HAL_GPIO_Init+0x1ca>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a45      	ldr	r2, [pc, #276]	@ (8000bd0 <HAL_GPIO_Init+0x2bc>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00d      	beq.n	8000ada <HAL_GPIO_Init+0x1c6>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a44      	ldr	r2, [pc, #272]	@ (8000bd4 <HAL_GPIO_Init+0x2c0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d007      	beq.n	8000ad6 <HAL_GPIO_Init+0x1c2>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a43      	ldr	r2, [pc, #268]	@ (8000bd8 <HAL_GPIO_Init+0x2c4>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_GPIO_Init+0x1be>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x1cc>
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	e004      	b.n	8000ae0 <HAL_GPIO_Init+0x1cc>
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e002      	b.n	8000ae0 <HAL_GPIO_Init+0x1cc>
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <HAL_GPIO_Init+0x1cc>
 8000ade:	2300      	movs	r3, #0
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	2103      	movs	r1, #3
 8000ae4:	400a      	ands	r2, r1
 8000ae6:	00d2      	lsls	r2, r2, #3
 8000ae8:	4093      	lsls	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000af0:	4936      	ldr	r1, [pc, #216]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3318      	adds	r3, #24
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000afe:	4b33      	ldr	r3, [pc, #204]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43da      	mvns	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	2380      	movs	r3, #128	@ 0x80
 8000b14:	035b      	lsls	r3, r3, #13
 8000b16:	4013      	ands	r3, r2
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b22:	4b2a      	ldr	r3, [pc, #168]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b28:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	43da      	mvns	r2, r3
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	039b      	lsls	r3, r3, #14
 8000b40:	4013      	ands	r3, r2
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b52:	4a1e      	ldr	r2, [pc, #120]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000b54:	2384      	movs	r3, #132	@ 0x84
 8000b56:	58d3      	ldr	r3, [r2, r3]
 8000b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	43da      	mvns	r2, r3
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685a      	ldr	r2, [r3, #4]
 8000b68:	2380      	movs	r3, #128	@ 0x80
 8000b6a:	029b      	lsls	r3, r3, #10
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	d003      	beq.n	8000b78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000b70:	693a      	ldr	r2, [r7, #16]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b78:	4914      	ldr	r1, [pc, #80]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000b7a:	2284      	movs	r2, #132	@ 0x84
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000b80:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000b82:	2380      	movs	r3, #128	@ 0x80
 8000b84:	58d3      	ldr	r3, [r2, r3]
 8000b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	2380      	movs	r3, #128	@ 0x80
 8000b98:	025b      	lsls	r3, r3, #9
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d003      	beq.n	8000ba6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ba6:	4909      	ldr	r1, [pc, #36]	@ (8000bcc <HAL_GPIO_Init+0x2b8>)
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	40da      	lsrs	r2, r3
 8000bbc:	1e13      	subs	r3, r2, #0
 8000bbe:	d000      	beq.n	8000bc2 <HAL_GPIO_Init+0x2ae>
 8000bc0:	e6b0      	b.n	8000924 <HAL_GPIO_Init+0x10>
  }
}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b006      	add	sp, #24
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021800 	.word	0x40021800
 8000bd0:	50000400 	.word	0x50000400
 8000bd4:	50000800 	.word	0x50000800
 8000bd8:	50000c00 	.word	0x50000c00

08000bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	0008      	movs	r0, r1
 8000be6:	0011      	movs	r1, r2
 8000be8:	1cbb      	adds	r3, r7, #2
 8000bea:	1c02      	adds	r2, r0, #0
 8000bec:	801a      	strh	r2, [r3, #0]
 8000bee:	1c7b      	adds	r3, r7, #1
 8000bf0:	1c0a      	adds	r2, r1, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf4:	1c7b      	adds	r3, r7, #1
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d004      	beq.n	8000c06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bfc:	1cbb      	adds	r3, r7, #2
 8000bfe:	881a      	ldrh	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c04:	e003      	b.n	8000c0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c06:	1cbb      	adds	r3, r7, #2
 8000c08:	881a      	ldrh	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b002      	add	sp, #8
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c20:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	@ (8000c8c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000c26:	4013      	ands	r3, r2
 8000c28:	0019      	movs	r1, r3
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d11f      	bne.n	8000c7c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000c3c:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	0013      	movs	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	189b      	adds	r3, r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4912      	ldr	r1, [pc, #72]	@ (8000c94 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff fa58 	bl	8000100 <__udivsi3>
 8000c50:	0003      	movs	r3, r0
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c56:	e008      	b.n	8000c6a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3b01      	subs	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	e001      	b.n	8000c6a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e009      	b.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000c6c:	695a      	ldr	r2, [r3, #20]
 8000c6e:	2380      	movs	r3, #128	@ 0x80
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	401a      	ands	r2, r3
 8000c74:	2380      	movs	r3, #128	@ 0x80
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d0ed      	beq.n	8000c58 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b004      	add	sp, #16
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	fffff9ff 	.word	0xfffff9ff
 8000c90:	20000000 	.word	0x20000000
 8000c94:	000f4240 	.word	0x000f4240

08000c98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e2f3      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d100      	bne.n	8000cb6 <HAL_RCC_OscConfig+0x1e>
 8000cb4:	e07c      	b.n	8000db0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cb6:	4bc3      	ldr	r3, [pc, #780]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2238      	movs	r2, #56	@ 0x38
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cc0:	4bc0      	ldr	r3, [pc, #768]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b10      	cmp	r3, #16
 8000cce:	d102      	bne.n	8000cd6 <HAL_RCC_OscConfig+0x3e>
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d002      	beq.n	8000cdc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	d10b      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cdc:	4bb9      	ldr	r3, [pc, #740]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	029b      	lsls	r3, r3, #10
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d062      	beq.n	8000dae <HAL_RCC_OscConfig+0x116>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d15e      	bne.n	8000dae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e2ce      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	2380      	movs	r3, #128	@ 0x80
 8000cfa:	025b      	lsls	r3, r3, #9
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d107      	bne.n	8000d10 <HAL_RCC_OscConfig+0x78>
 8000d00:	4bb0      	ldr	r3, [pc, #704]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4baf      	ldr	r3, [pc, #700]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d06:	2180      	movs	r1, #128	@ 0x80
 8000d08:	0249      	lsls	r1, r1, #9
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e020      	b.n	8000d52 <HAL_RCC_OscConfig+0xba>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	23a0      	movs	r3, #160	@ 0xa0
 8000d16:	02db      	lsls	r3, r3, #11
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d10e      	bne.n	8000d3a <HAL_RCC_OscConfig+0xa2>
 8000d1c:	4ba9      	ldr	r3, [pc, #676]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4ba8      	ldr	r3, [pc, #672]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d22:	2180      	movs	r1, #128	@ 0x80
 8000d24:	02c9      	lsls	r1, r1, #11
 8000d26:	430a      	orrs	r2, r1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	4ba6      	ldr	r3, [pc, #664]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	4ba5      	ldr	r3, [pc, #660]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	0249      	lsls	r1, r1, #9
 8000d34:	430a      	orrs	r2, r1
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	e00b      	b.n	8000d52 <HAL_RCC_OscConfig+0xba>
 8000d3a:	4ba2      	ldr	r3, [pc, #648]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4ba1      	ldr	r3, [pc, #644]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d40:	49a1      	ldr	r1, [pc, #644]	@ (8000fc8 <HAL_RCC_OscConfig+0x330>)
 8000d42:	400a      	ands	r2, r1
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	4b9f      	ldr	r3, [pc, #636]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b9e      	ldr	r3, [pc, #632]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d4c:	499f      	ldr	r1, [pc, #636]	@ (8000fcc <HAL_RCC_OscConfig+0x334>)
 8000d4e:	400a      	ands	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d014      	beq.n	8000d84 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d5a:	f7ff fc89 	bl	8000670 <HAL_GetTick>
 8000d5e:	0003      	movs	r3, r0
 8000d60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d64:	f7ff fc84 	bl	8000670 <HAL_GetTick>
 8000d68:	0002      	movs	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	@ 0x64
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e28d      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d76:	4b93      	ldr	r3, [pc, #588]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	2380      	movs	r3, #128	@ 0x80
 8000d7c:	029b      	lsls	r3, r3, #10
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d0f0      	beq.n	8000d64 <HAL_RCC_OscConfig+0xcc>
 8000d82:	e015      	b.n	8000db0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d84:	f7ff fc74 	bl	8000670 <HAL_GetTick>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d8c:	e008      	b.n	8000da0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d8e:	f7ff fc6f 	bl	8000670 <HAL_GetTick>
 8000d92:	0002      	movs	r2, r0
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	2b64      	cmp	r3, #100	@ 0x64
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e278      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000da0:	4b88      	ldr	r3, [pc, #544]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	029b      	lsls	r3, r3, #10
 8000da8:	4013      	ands	r3, r2
 8000daa:	d1f0      	bne.n	8000d8e <HAL_RCC_OscConfig+0xf6>
 8000dac:	e000      	b.n	8000db0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2202      	movs	r2, #2
 8000db6:	4013      	ands	r3, r2
 8000db8:	d100      	bne.n	8000dbc <HAL_RCC_OscConfig+0x124>
 8000dba:	e099      	b.n	8000ef0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dbc:	4b81      	ldr	r3, [pc, #516]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	2238      	movs	r2, #56	@ 0x38
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	2203      	movs	r2, #3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2b10      	cmp	r3, #16
 8000dd4:	d102      	bne.n	8000ddc <HAL_RCC_OscConfig+0x144>
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d002      	beq.n	8000de2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d135      	bne.n	8000e4e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000de2:	4b78      	ldr	r3, [pc, #480]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	d005      	beq.n	8000dfa <HAL_RCC_OscConfig+0x162>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e24b      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dfa:	4b72      	ldr	r3, [pc, #456]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a74      	ldr	r2, [pc, #464]	@ (8000fd0 <HAL_RCC_OscConfig+0x338>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	0019      	movs	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	021a      	lsls	r2, r3, #8
 8000e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d112      	bne.n	8000e3c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e16:	4b6b      	ldr	r3, [pc, #428]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8000fd4 <HAL_RCC_OscConfig+0x33c>)
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	0019      	movs	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	4b67      	ldr	r3, [pc, #412]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e26:	430a      	orrs	r2, r1
 8000e28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000e2a:	4b66      	ldr	r3, [pc, #408]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0adb      	lsrs	r3, r3, #11
 8000e30:	2207      	movs	r2, #7
 8000e32:	4013      	ands	r3, r2
 8000e34:	4a68      	ldr	r2, [pc, #416]	@ (8000fd8 <HAL_RCC_OscConfig+0x340>)
 8000e36:	40da      	lsrs	r2, r3
 8000e38:	4b68      	ldr	r3, [pc, #416]	@ (8000fdc <HAL_RCC_OscConfig+0x344>)
 8000e3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e3c:	4b68      	ldr	r3, [pc, #416]	@ (8000fe0 <HAL_RCC_OscConfig+0x348>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff fbb9 	bl	80005b8 <HAL_InitTick>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d051      	beq.n	8000eee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e221      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d030      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000e56:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a5e      	ldr	r2, [pc, #376]	@ (8000fd4 <HAL_RCC_OscConfig+0x33c>)
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	0019      	movs	r1, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	4b57      	ldr	r3, [pc, #348]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000e6a:	4b56      	ldr	r3, [pc, #344]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b55      	ldr	r3, [pc, #340]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e70:	2180      	movs	r1, #128	@ 0x80
 8000e72:	0049      	lsls	r1, r1, #1
 8000e74:	430a      	orrs	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e78:	f7ff fbfa 	bl	8000670 <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e82:	f7ff fbf5 	bl	8000670 <HAL_GetTick>
 8000e86:	0002      	movs	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e1fe      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e94:	4b4b      	ldr	r3, [pc, #300]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2380      	movs	r3, #128	@ 0x80
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea0:	4b48      	ldr	r3, [pc, #288]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd0 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	021a      	lsls	r2, r3, #8
 8000eb0:	4b44      	ldr	r3, [pc, #272]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	e01b      	b.n	8000ef0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000eb8:	4b42      	ldr	r3, [pc, #264]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b41      	ldr	r3, [pc, #260]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000ebe:	4949      	ldr	r1, [pc, #292]	@ (8000fe4 <HAL_RCC_OscConfig+0x34c>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fbd4 	bl	8000670 <HAL_GetTick>
 8000ec8:	0003      	movs	r3, r0
 8000eca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ece:	f7ff fbcf 	bl	8000670 <HAL_GetTick>
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e1d8      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ee0:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2380      	movs	r3, #128	@ 0x80
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d1f0      	bne.n	8000ece <HAL_RCC_OscConfig+0x236>
 8000eec:	e000      	b.n	8000ef0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2208      	movs	r2, #8
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d047      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000efa:	4b32      	ldr	r3, [pc, #200]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2238      	movs	r2, #56	@ 0x38
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b18      	cmp	r3, #24
 8000f04:	d10a      	bne.n	8000f1c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8000f06:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d03c      	beq.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d138      	bne.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e1ba      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d019      	beq.n	8000f58 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000f24:	4b27      	ldr	r3, [pc, #156]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f26:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f28:	4b26      	ldr	r3, [pc, #152]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fb9e 	bl	8000670 <HAL_GetTick>
 8000f34:	0003      	movs	r3, r0
 8000f36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fb99 	bl	8000670 <HAL_GetTick>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e1a2      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f50:	2202      	movs	r2, #2
 8000f52:	4013      	ands	r3, r2
 8000f54:	d0f1      	beq.n	8000f3a <HAL_RCC_OscConfig+0x2a2>
 8000f56:	e018      	b.n	8000f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8000f58:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000f5c:	4b19      	ldr	r3, [pc, #100]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	438a      	bics	r2, r1
 8000f62:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f64:	f7ff fb84 	bl	8000670 <HAL_GetTick>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fb7f 	bl	8000670 <HAL_GetTick>
 8000f72:	0002      	movs	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e188      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f80:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f84:	2202      	movs	r2, #2
 8000f86:	4013      	ands	r3, r2
 8000f88:	d1f1      	bne.n	8000f6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4013      	ands	r3, r2
 8000f92:	d100      	bne.n	8000f96 <HAL_RCC_OscConfig+0x2fe>
 8000f94:	e0c6      	b.n	8001124 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f96:	231f      	movs	r3, #31
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	2238      	movs	r2, #56	@ 0x38
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	2b20      	cmp	r3, #32
 8000fa8:	d11e      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <HAL_RCC_OscConfig+0x32c>)
 8000fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d100      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x31e>
 8000fb4:	e0b6      	b.n	8001124 <HAL_RCC_OscConfig+0x48c>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d000      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x328>
 8000fbe:	e0b1      	b.n	8001124 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e166      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	fffeffff 	.word	0xfffeffff
 8000fcc:	fffbffff 	.word	0xfffbffff
 8000fd0:	ffff80ff 	.word	0xffff80ff
 8000fd4:	ffffc7ff 	.word	0xffffc7ff
 8000fd8:	00f42400 	.word	0x00f42400
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000004 	.word	0x20000004
 8000fe4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000fe8:	4bac      	ldr	r3, [pc, #688]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8000fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fec:	2380      	movs	r3, #128	@ 0x80
 8000fee:	055b      	lsls	r3, r3, #21
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d101      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x360>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <HAL_RCC_OscConfig+0x362>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d011      	beq.n	8001022 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4ba7      	ldr	r3, [pc, #668]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001002:	4ba6      	ldr	r3, [pc, #664]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	430a      	orrs	r2, r1
 800100a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800100c:	4ba3      	ldr	r3, [pc, #652]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800100e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800101a:	231f      	movs	r3, #31
 800101c:	18fb      	adds	r3, r7, r3
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001022:	4b9f      	ldr	r3, [pc, #636]	@ (80012a0 <HAL_RCC_OscConfig+0x608>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4013      	ands	r3, r2
 800102c:	d11a      	bne.n	8001064 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800102e:	4b9c      	ldr	r3, [pc, #624]	@ (80012a0 <HAL_RCC_OscConfig+0x608>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b9b      	ldr	r3, [pc, #620]	@ (80012a0 <HAL_RCC_OscConfig+0x608>)
 8001034:	2180      	movs	r1, #128	@ 0x80
 8001036:	0049      	lsls	r1, r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800103c:	f7ff fb18 	bl	8000670 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001046:	f7ff fb13 	bl	8000670 <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e11c      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001058:	4b91      	ldr	r3, [pc, #580]	@ (80012a0 <HAL_RCC_OscConfig+0x608>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4013      	ands	r3, r2
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d106      	bne.n	800107a <HAL_RCC_OscConfig+0x3e2>
 800106c:	4b8b      	ldr	r3, [pc, #556]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800106e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001070:	4b8a      	ldr	r3, [pc, #552]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001072:	2101      	movs	r1, #1
 8001074:	430a      	orrs	r2, r1
 8001076:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001078:	e01c      	b.n	80010b4 <HAL_RCC_OscConfig+0x41c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b05      	cmp	r3, #5
 8001080:	d10c      	bne.n	800109c <HAL_RCC_OscConfig+0x404>
 8001082:	4b86      	ldr	r3, [pc, #536]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001084:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001086:	4b85      	ldr	r3, [pc, #532]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001088:	2104      	movs	r1, #4
 800108a:	430a      	orrs	r2, r1
 800108c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800108e:	4b83      	ldr	r3, [pc, #524]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001090:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001092:	4b82      	ldr	r3, [pc, #520]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001094:	2101      	movs	r1, #1
 8001096:	430a      	orrs	r2, r1
 8001098:	65da      	str	r2, [r3, #92]	@ 0x5c
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0x41c>
 800109c:	4b7f      	ldr	r3, [pc, #508]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800109e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010a0:	4b7e      	ldr	r3, [pc, #504]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	438a      	bics	r2, r1
 80010a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010a8:	4b7c      	ldr	r3, [pc, #496]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80010aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010ac:	4b7b      	ldr	r3, [pc, #492]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80010ae:	2104      	movs	r1, #4
 80010b0:	438a      	bics	r2, r1
 80010b2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d014      	beq.n	80010e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010bc:	f7ff fad8 	bl	8000670 <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010c4:	e009      	b.n	80010da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c6:	f7ff fad3 	bl	8000670 <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	4a74      	ldr	r2, [pc, #464]	@ (80012a4 <HAL_RCC_OscConfig+0x60c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e0db      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010da:	4b70      	ldr	r3, [pc, #448]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80010dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010de:	2202      	movs	r2, #2
 80010e0:	4013      	ands	r3, r2
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x42e>
 80010e4:	e013      	b.n	800110e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e6:	f7ff fac3 	bl	8000670 <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ee:	e009      	b.n	8001104 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010f0:	f7ff fabe 	bl	8000670 <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	4a6a      	ldr	r2, [pc, #424]	@ (80012a4 <HAL_RCC_OscConfig+0x60c>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e0c6      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001104:	4b65      	ldr	r3, [pc, #404]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001108:	2202      	movs	r2, #2
 800110a:	4013      	ands	r3, r2
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800110e:	231f      	movs	r3, #31
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001118:	4b60      	ldr	r3, [pc, #384]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800111a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800111c:	4b5f      	ldr	r3, [pc, #380]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800111e:	4962      	ldr	r1, [pc, #392]	@ (80012a8 <HAL_RCC_OscConfig+0x610>)
 8001120:	400a      	ands	r2, r1
 8001122:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x496>
 800112c:	e0b0      	b.n	8001290 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112e:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2238      	movs	r2, #56	@ 0x38
 8001134:	4013      	ands	r3, r2
 8001136:	2b10      	cmp	r3, #16
 8001138:	d100      	bne.n	800113c <HAL_RCC_OscConfig+0x4a4>
 800113a:	e078      	b.n	800122e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d153      	bne.n	80011ec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001144:	4b55      	ldr	r3, [pc, #340]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b54      	ldr	r3, [pc, #336]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800114a:	4958      	ldr	r1, [pc, #352]	@ (80012ac <HAL_RCC_OscConfig+0x614>)
 800114c:	400a      	ands	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001150:	f7ff fa8e 	bl	8000670 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff fa89 	bl	8000670 <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e092      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800116c:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	049b      	lsls	r3, r3, #18
 8001174:	4013      	ands	r3, r2
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001178:	4b48      	ldr	r3, [pc, #288]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	4a4c      	ldr	r2, [pc, #304]	@ (80012b0 <HAL_RCC_OscConfig+0x618>)
 800117e:	4013      	ands	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a1a      	ldr	r2, [r3, #32]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	431a      	orrs	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	431a      	orrs	r2, r3
 80011a0:	4b3e      	ldr	r3, [pc, #248]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a6:	4b3d      	ldr	r3, [pc, #244]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4b3c      	ldr	r3, [pc, #240]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0449      	lsls	r1, r1, #17
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80011b4:	4b39      	ldr	r3, [pc, #228]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	4b38      	ldr	r3, [pc, #224]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80011ba:	2180      	movs	r1, #128	@ 0x80
 80011bc:	0549      	lsls	r1, r1, #21
 80011be:	430a      	orrs	r2, r1
 80011c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c2:	f7ff fa55 	bl	8000670 <HAL_GetTick>
 80011c6:	0003      	movs	r3, r0
 80011c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff fa50 	bl	8000670 <HAL_GetTick>
 80011d0:	0002      	movs	r2, r0
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e059      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	2380      	movs	r3, #128	@ 0x80
 80011e4:	049b      	lsls	r3, r3, #18
 80011e6:	4013      	ands	r3, r2
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0x534>
 80011ea:	e051      	b.n	8001290 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ec:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b2a      	ldr	r3, [pc, #168]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 80011f2:	492e      	ldr	r1, [pc, #184]	@ (80012ac <HAL_RCC_OscConfig+0x614>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fa3a 	bl	8000670 <HAL_GetTick>
 80011fc:	0003      	movs	r3, r0
 80011fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff fa35 	bl	8000670 <HAL_GetTick>
 8001206:	0002      	movs	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e03e      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001214:	4b21      	ldr	r3, [pc, #132]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	049b      	lsls	r3, r3, #18
 800121c:	4013      	ands	r3, r2
 800121e:	d1f0      	bne.n	8001202 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 8001226:	4923      	ldr	r1, [pc, #140]	@ (80012b4 <HAL_RCC_OscConfig+0x61c>)
 8001228:	400a      	ands	r2, r1
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	e030      	b.n	8001290 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e02b      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800123a:	4b18      	ldr	r3, [pc, #96]	@ (800129c <HAL_RCC_OscConfig+0x604>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2203      	movs	r2, #3
 8001244:	401a      	ands	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a1b      	ldr	r3, [r3, #32]
 800124a:	429a      	cmp	r2, r3
 800124c:	d11e      	bne.n	800128c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2270      	movs	r2, #112	@ 0x70
 8001252:	401a      	ands	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001258:	429a      	cmp	r2, r3
 800125a:	d117      	bne.n	800128c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	23fe      	movs	r3, #254	@ 0xfe
 8001260:	01db      	lsls	r3, r3, #7
 8001262:	401a      	ands	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800126a:	429a      	cmp	r2, r3
 800126c:	d10e      	bne.n	800128c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	23f8      	movs	r3, #248	@ 0xf8
 8001272:	039b      	lsls	r3, r3, #14
 8001274:	401a      	ands	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800127a:	429a      	cmp	r2, r3
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	0f5b      	lsrs	r3, r3, #29
 8001282:	075a      	lsls	r2, r3, #29
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b008      	add	sp, #32
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	40021000 	.word	0x40021000
 80012a0:	40007000 	.word	0x40007000
 80012a4:	00001388 	.word	0x00001388
 80012a8:	efffffff 	.word	0xefffffff
 80012ac:	feffffff 	.word	0xfeffffff
 80012b0:	1fc1808c 	.word	0x1fc1808c
 80012b4:	effefffc 	.word	0xeffefffc

080012b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0e9      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012cc:	4b76      	ldr	r3, [pc, #472]	@ (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2207      	movs	r2, #7
 80012d2:	4013      	ands	r3, r2
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d91e      	bls.n	8001318 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012da:	4b73      	ldr	r3, [pc, #460]	@ (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2207      	movs	r2, #7
 80012e0:	4393      	bics	r3, r2
 80012e2:	0019      	movs	r1, r3
 80012e4:	4b70      	ldr	r3, [pc, #448]	@ (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012ec:	f7ff f9c0 	bl	8000670 <HAL_GetTick>
 80012f0:	0003      	movs	r3, r0
 80012f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f4:	e009      	b.n	800130a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f6:	f7ff f9bb 	bl	8000670 <HAL_GetTick>
 80012fa:	0002      	movs	r2, r0
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	4a6a      	ldr	r2, [pc, #424]	@ (80014ac <HAL_RCC_ClockConfig+0x1f4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e0ca      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800130a:	4b67      	ldr	r3, [pc, #412]	@ (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2207      	movs	r2, #7
 8001310:	4013      	ands	r3, r2
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d1ee      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2202      	movs	r2, #2
 800131e:	4013      	ands	r3, r2
 8001320:	d015      	beq.n	800134e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2204      	movs	r2, #4
 8001328:	4013      	ands	r3, r2
 800132a:	d006      	beq.n	800133a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800132c:	4b60      	ldr	r3, [pc, #384]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	4b5f      	ldr	r3, [pc, #380]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 8001332:	21e0      	movs	r1, #224	@ 0xe0
 8001334:	01c9      	lsls	r1, r1, #7
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800133a:	4b5d      	ldr	r3, [pc, #372]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	4a5d      	ldr	r2, [pc, #372]	@ (80014b4 <HAL_RCC_ClockConfig+0x1fc>)
 8001340:	4013      	ands	r3, r2
 8001342:	0019      	movs	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	4b59      	ldr	r3, [pc, #356]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2201      	movs	r2, #1
 8001354:	4013      	ands	r3, r2
 8001356:	d057      	beq.n	8001408 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d107      	bne.n	8001370 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001360:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4013      	ands	r3, r2
 800136a:	d12b      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e097      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d107      	bne.n	8001388 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001378:	4b4d      	ldr	r3, [pc, #308]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	049b      	lsls	r3, r3, #18
 8001380:	4013      	ands	r3, r2
 8001382:	d11f      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e08b      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001390:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4013      	ands	r3, r2
 800139a:	d113      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e07f      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013a8:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	d108      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e074      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 80013b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ba:	2202      	movs	r2, #2
 80013bc:	4013      	ands	r3, r2
 80013be:	d101      	bne.n	80013c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e06d      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013c4:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2207      	movs	r2, #7
 80013ca:	4393      	bics	r3, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013d8:	f7ff f94a 	bl	8000670 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e0:	e009      	b.n	80013f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e2:	f7ff f945 	bl	8000670 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	4a2f      	ldr	r2, [pc, #188]	@ (80014ac <HAL_RCC_ClockConfig+0x1f4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e054      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2238      	movs	r2, #56	@ 0x38
 80013fc:	401a      	ands	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	429a      	cmp	r2, r3
 8001406:	d1ec      	bne.n	80013e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001408:	4b27      	ldr	r3, [pc, #156]	@ (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2207      	movs	r2, #7
 800140e:	4013      	ands	r3, r2
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d21e      	bcs.n	8001454 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001416:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2207      	movs	r2, #7
 800141c:	4393      	bics	r3, r2
 800141e:	0019      	movs	r1, r3
 8001420:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001428:	f7ff f922 	bl	8000670 <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001430:	e009      	b.n	8001446 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001432:	f7ff f91d 	bl	8000670 <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	4a1b      	ldr	r2, [pc, #108]	@ (80014ac <HAL_RCC_ClockConfig+0x1f4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e02c      	b.n	80014a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_RCC_ClockConfig+0x1f0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2207      	movs	r2, #7
 800144c:	4013      	ands	r3, r2
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d1ee      	bne.n	8001432 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2204      	movs	r2, #4
 800145a:	4013      	ands	r3, r2
 800145c:	d009      	beq.n	8001472 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	4a15      	ldr	r2, [pc, #84]	@ (80014b8 <HAL_RCC_ClockConfig+0x200>)
 8001464:	4013      	ands	r3, r2
 8001466:	0019      	movs	r1, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 800146e:	430a      	orrs	r2, r1
 8001470:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001472:	f000 f829 	bl	80014c8 <HAL_RCC_GetSysClockFreq>
 8001476:	0001      	movs	r1, r0
 8001478:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_RCC_ClockConfig+0x1f8>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	0a1b      	lsrs	r3, r3, #8
 800147e:	220f      	movs	r2, #15
 8001480:	401a      	ands	r2, r3
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_RCC_ClockConfig+0x204>)
 8001484:	0092      	lsls	r2, r2, #2
 8001486:	58d3      	ldr	r3, [r2, r3]
 8001488:	221f      	movs	r2, #31
 800148a:	4013      	ands	r3, r2
 800148c:	000a      	movs	r2, r1
 800148e:	40da      	lsrs	r2, r3
 8001490:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_RCC_ClockConfig+0x208>)
 8001492:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <HAL_RCC_ClockConfig+0x20c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff f88d 	bl	80005b8 <HAL_InitTick>
 800149e:	0003      	movs	r3, r0
}
 80014a0:	0018      	movs	r0, r3
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b004      	add	sp, #16
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40022000 	.word	0x40022000
 80014ac:	00001388 	.word	0x00001388
 80014b0:	40021000 	.word	0x40021000
 80014b4:	fffff0ff 	.word	0xfffff0ff
 80014b8:	ffff8fff 	.word	0xffff8fff
 80014bc:	08002fcc 	.word	0x08002fcc
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004

080014c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ce:	4b3c      	ldr	r3, [pc, #240]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2238      	movs	r2, #56	@ 0x38
 80014d4:	4013      	ands	r3, r2
 80014d6:	d10f      	bne.n	80014f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80014d8:	4b39      	ldr	r3, [pc, #228]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0adb      	lsrs	r3, r3, #11
 80014de:	2207      	movs	r2, #7
 80014e0:	4013      	ands	r3, r2
 80014e2:	2201      	movs	r2, #1
 80014e4:	409a      	lsls	r2, r3
 80014e6:	0013      	movs	r3, r2
 80014e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80014ea:	6839      	ldr	r1, [r7, #0]
 80014ec:	4835      	ldr	r0, [pc, #212]	@ (80015c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80014ee:	f7fe fe07 	bl	8000100 <__udivsi3>
 80014f2:	0003      	movs	r3, r0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	e05d      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f8:	4b31      	ldr	r3, [pc, #196]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2238      	movs	r2, #56	@ 0x38
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d102      	bne.n	800150a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001504:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	e054      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150a:	4b2d      	ldr	r3, [pc, #180]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2238      	movs	r2, #56	@ 0x38
 8001510:	4013      	ands	r3, r2
 8001512:	2b10      	cmp	r3, #16
 8001514:	d138      	bne.n	8001588 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001516:	4b2a      	ldr	r3, [pc, #168]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2203      	movs	r2, #3
 800151c:	4013      	ands	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001520:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	091b      	lsrs	r3, r3, #4
 8001526:	2207      	movs	r2, #7
 8001528:	4013      	ands	r3, r2
 800152a:	3301      	adds	r3, #1
 800152c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d10d      	bne.n	8001550 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	4824      	ldr	r0, [pc, #144]	@ (80015c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001538:	f7fe fde2 	bl	8000100 <__udivsi3>
 800153c:	0003      	movs	r3, r0
 800153e:	0019      	movs	r1, r3
 8001540:	4b1f      	ldr	r3, [pc, #124]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	227f      	movs	r2, #127	@ 0x7f
 8001548:	4013      	ands	r3, r2
 800154a:	434b      	muls	r3, r1
 800154c:	617b      	str	r3, [r7, #20]
        break;
 800154e:	e00d      	b.n	800156c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	481c      	ldr	r0, [pc, #112]	@ (80015c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001554:	f7fe fdd4 	bl	8000100 <__udivsi3>
 8001558:	0003      	movs	r3, r0
 800155a:	0019      	movs	r1, r3
 800155c:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	227f      	movs	r2, #127	@ 0x7f
 8001564:	4013      	ands	r3, r2
 8001566:	434b      	muls	r3, r1
 8001568:	617b      	str	r3, [r7, #20]
        break;
 800156a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0f5b      	lsrs	r3, r3, #29
 8001572:	2207      	movs	r2, #7
 8001574:	4013      	ands	r3, r2
 8001576:	3301      	adds	r3, #1
 8001578:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	6978      	ldr	r0, [r7, #20]
 800157e:	f7fe fdbf 	bl	8000100 <__udivsi3>
 8001582:	0003      	movs	r3, r0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	e015      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001588:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2238      	movs	r2, #56	@ 0x38
 800158e:	4013      	ands	r3, r2
 8001590:	2b20      	cmp	r3, #32
 8001592:	d103      	bne.n	800159c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800159c:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2238      	movs	r2, #56	@ 0x38
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b18      	cmp	r3, #24
 80015a6:	d103      	bne.n	80015b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80015a8:	23fa      	movs	r3, #250	@ 0xfa
 80015aa:	01db      	lsls	r3, r3, #7
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	e001      	b.n	80015b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80015b4:	693b      	ldr	r3, [r7, #16]
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b006      	add	sp, #24
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	40021000 	.word	0x40021000
 80015c4:	00f42400 	.word	0x00f42400
 80015c8:	007a1200 	.word	0x007a1200

080015cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e0a8      	b.n	8001730 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	2382      	movs	r3, #130	@ 0x82
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d009      	beq.n	8001606 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	61da      	str	r2, [r3, #28]
 80015f8:	e005      	b.n	8001606 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	225d      	movs	r2, #93	@ 0x5d
 8001610:	5c9b      	ldrb	r3, [r3, r2]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d107      	bne.n	8001628 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	225c      	movs	r2, #92	@ 0x5c
 800161c:	2100      	movs	r1, #0
 800161e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	0018      	movs	r0, r3
 8001624:	f7fe fedc 	bl	80003e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	225d      	movs	r2, #93	@ 0x5d
 800162c:	2102      	movs	r1, #2
 800162e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2140      	movs	r1, #64	@ 0x40
 800163c:	438a      	bics	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	23e0      	movs	r3, #224	@ 0xe0
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	429a      	cmp	r2, r3
 800164a:	d902      	bls.n	8001652 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	e002      	b.n	8001658 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	23f0      	movs	r3, #240	@ 0xf0
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	429a      	cmp	r2, r3
 8001662:	d008      	beq.n	8001676 <HAL_SPI_Init+0xaa>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	23e0      	movs	r3, #224	@ 0xe0
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	429a      	cmp	r2, r3
 800166e:	d002      	beq.n	8001676 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	2382      	movs	r3, #130	@ 0x82
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	401a      	ands	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6899      	ldr	r1, [r3, #8]
 8001684:	2384      	movs	r3, #132	@ 0x84
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	400b      	ands	r3, r1
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2102      	movs	r1, #2
 8001692:	400b      	ands	r3, r1
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	2101      	movs	r1, #1
 800169c:	400b      	ands	r3, r1
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6999      	ldr	r1, [r3, #24]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	400b      	ands	r3, r1
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	2138      	movs	r1, #56	@ 0x38
 80016b2:	400b      	ands	r3, r1
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	2180      	movs	r1, #128	@ 0x80
 80016bc:	400b      	ands	r3, r1
 80016be:	431a      	orrs	r2, r3
 80016c0:	0011      	movs	r1, r2
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	401a      	ands	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	0c1b      	lsrs	r3, r3, #16
 80016da:	2204      	movs	r2, #4
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	2110      	movs	r1, #16
 80016e4:	400b      	ands	r3, r1
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016ec:	2108      	movs	r1, #8
 80016ee:	400b      	ands	r3, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68d9      	ldr	r1, [r3, #12]
 80016f6:	23f0      	movs	r3, #240	@ 0xf0
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	400b      	ands	r3, r1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	0011      	movs	r1, r2
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	015b      	lsls	r3, r3, #5
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	69da      	ldr	r2, [r3, #28]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4907      	ldr	r1, [pc, #28]	@ (8001738 <HAL_SPI_Init+0x16c>)
 800171c:	400a      	ands	r2, r1
 800171e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	225d      	movs	r2, #93	@ 0x5d
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b004      	add	sp, #16
 8001736:	bd80      	pop	{r7, pc}
 8001738:	fffff7ff 	.word	0xfffff7ff

0800173c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	1dbb      	adds	r3, r7, #6
 800174a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800174c:	231f      	movs	r3, #31
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	225c      	movs	r2, #92	@ 0x5c
 8001758:	5c9b      	ldrb	r3, [r3, r2]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_SPI_Transmit+0x26>
 800175e:	2302      	movs	r3, #2
 8001760:	e147      	b.n	80019f2 <HAL_SPI_Transmit+0x2b6>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	225c      	movs	r2, #92	@ 0x5c
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800176a:	f7fe ff81 	bl	8000670 <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001772:	2316      	movs	r3, #22
 8001774:	18fb      	adds	r3, r7, r3
 8001776:	1dba      	adds	r2, r7, #6
 8001778:	8812      	ldrh	r2, [r2, #0]
 800177a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	225d      	movs	r2, #93	@ 0x5d
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d004      	beq.n	8001792 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001788:	231f      	movs	r3, #31
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2202      	movs	r2, #2
 800178e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001790:	e128      	b.n	80019e4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_SPI_Transmit+0x64>
 8001798:	1dbb      	adds	r3, r7, #6
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d104      	bne.n	80017aa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80017a0:	231f      	movs	r3, #31
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80017a8:	e11c      	b.n	80019e4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	225d      	movs	r2, #93	@ 0x5d
 80017ae:	2103      	movs	r1, #3
 80017b0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1dba      	adds	r2, r7, #6
 80017c2:	8812      	ldrh	r2, [r2, #0]
 80017c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1dba      	adds	r2, r7, #6
 80017ca:	8812      	ldrh	r2, [r2, #0]
 80017cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2244      	movs	r2, #68	@ 0x44
 80017d8:	2100      	movs	r1, #0
 80017da:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2246      	movs	r2, #70	@ 0x46
 80017e0:	2100      	movs	r1, #0
 80017e2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	2380      	movs	r3, #128	@ 0x80
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d110      	bne.n	800181e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2140      	movs	r1, #64	@ 0x40
 8001808:	438a      	bics	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2180      	movs	r1, #128	@ 0x80
 8001818:	01c9      	lsls	r1, r1, #7
 800181a:	430a      	orrs	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2240      	movs	r2, #64	@ 0x40
 8001826:	4013      	ands	r3, r2
 8001828:	2b40      	cmp	r3, #64	@ 0x40
 800182a:	d007      	beq.n	800183c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2140      	movs	r1, #64	@ 0x40
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	23e0      	movs	r3, #224	@ 0xe0
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	429a      	cmp	r2, r3
 8001846:	d952      	bls.n	80018ee <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_SPI_Transmit+0x11e>
 8001850:	2316      	movs	r3, #22
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d143      	bne.n	80018e2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186a:	1c9a      	adds	r2, r3, #2
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800187e:	e030      	b.n	80018e2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	2b02      	cmp	r3, #2
 800188c:	d112      	bne.n	80018b4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001892:	881a      	ldrh	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800189e:	1c9a      	adds	r2, r3, #2
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80018b2:	e016      	b.n	80018e2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018b4:	f7fe fedc 	bl	8000670 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d802      	bhi.n	80018ca <HAL_SPI_Transmit+0x18e>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	d102      	bne.n	80018d0 <HAL_SPI_Transmit+0x194>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d108      	bne.n	80018e2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80018d0:	231f      	movs	r3, #31
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	2203      	movs	r2, #3
 80018d6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	225d      	movs	r2, #93	@ 0x5d
 80018dc:	2101      	movs	r1, #1
 80018de:	5499      	strb	r1, [r3, r2]
          goto error;
 80018e0:	e080      	b.n	80019e4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1c9      	bne.n	8001880 <HAL_SPI_Transmit+0x144>
 80018ec:	e053      	b.n	8001996 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d004      	beq.n	8001900 <HAL_SPI_Transmit+0x1c4>
 80018f6:	2316      	movs	r3, #22
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d145      	bne.n	800198c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	330c      	adds	r3, #12
 800190a:	7812      	ldrb	r2, [r2, #0]
 800190c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800191c:	b29b      	uxth	r3, r3
 800191e:	3b01      	subs	r3, #1
 8001920:	b29a      	uxth	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001926:	e031      	b.n	800198c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	2b02      	cmp	r3, #2
 8001934:	d113      	bne.n	800195e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	330c      	adds	r3, #12
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800195c:	e016      	b.n	800198c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800195e:	f7fe fe87 	bl	8000670 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d802      	bhi.n	8001974 <HAL_SPI_Transmit+0x238>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	d102      	bne.n	800197a <HAL_SPI_Transmit+0x23e>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d108      	bne.n	800198c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800197a:	231f      	movs	r3, #31
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	2203      	movs	r2, #3
 8001980:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	225d      	movs	r2, #93	@ 0x5d
 8001986:	2101      	movs	r1, #1
 8001988:	5499      	strb	r1, [r3, r2]
          goto error;
 800198a:	e02b      	b.n	80019e4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001990:	b29b      	uxth	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1c8      	bne.n	8001928 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	6839      	ldr	r1, [r7, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	0018      	movs	r0, r3
 800199e:	f000 fc47 	bl	8002230 <SPI_EndRxTxTransaction>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d002      	beq.n	80019ac <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2220      	movs	r2, #32
 80019aa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10a      	bne.n	80019ca <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80019d2:	231f      	movs	r3, #31
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e003      	b.n	80019e4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	225d      	movs	r2, #93	@ 0x5d
 80019e0:	2101      	movs	r1, #1
 80019e2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	225c      	movs	r2, #92	@ 0x5c
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80019ec:	231f      	movs	r3, #31
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b008      	add	sp, #32
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	001a      	movs	r2, r3
 8001a0a:	1cbb      	adds	r3, r7, #2
 8001a0c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001a12:	2323      	movs	r3, #35	@ 0x23
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	225c      	movs	r2, #92	@ 0x5c
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_SPI_TransmitReceive+0x2c>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e1c4      	b.n	8001db2 <HAL_SPI_TransmitReceive+0x3b6>
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	225c      	movs	r2, #92	@ 0x5c
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001a30:	f7fe fe1e 	bl	8000670 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001a38:	201b      	movs	r0, #27
 8001a3a:	183b      	adds	r3, r7, r0
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	215d      	movs	r1, #93	@ 0x5d
 8001a40:	5c52      	ldrb	r2, [r2, r1]
 8001a42:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001a4a:	2312      	movs	r3, #18
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	1cba      	adds	r2, r7, #2
 8001a50:	8812      	ldrh	r2, [r2, #0]
 8001a52:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a54:	183b      	adds	r3, r7, r0
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d011      	beq.n	8001a80 <HAL_SPI_TransmitReceive+0x84>
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	2382      	movs	r3, #130	@ 0x82
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d107      	bne.n	8001a76 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d103      	bne.n	8001a76 <HAL_SPI_TransmitReceive+0x7a>
 8001a6e:	183b      	adds	r3, r7, r0
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d004      	beq.n	8001a80 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001a76:	2323      	movs	r3, #35	@ 0x23
 8001a78:	18fb      	adds	r3, r7, r3
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a7e:	e191      	b.n	8001da4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_SPI_TransmitReceive+0x98>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_SPI_TransmitReceive+0x98>
 8001a8c:	1cbb      	adds	r3, r7, #2
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d104      	bne.n	8001a9e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001a94:	2323      	movs	r3, #35	@ 0x23
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	2201      	movs	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001a9c:	e182      	b.n	8001da4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	225d      	movs	r2, #93	@ 0x5d
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d003      	beq.n	8001ab2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	225d      	movs	r2, #93	@ 0x5d
 8001aae:	2105      	movs	r1, #5
 8001ab0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1cba      	adds	r2, r7, #2
 8001ac2:	2146      	movs	r1, #70	@ 0x46
 8001ac4:	8812      	ldrh	r2, [r2, #0]
 8001ac6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1cba      	adds	r2, r7, #2
 8001acc:	2144      	movs	r1, #68	@ 0x44
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1cba      	adds	r2, r7, #2
 8001adc:	8812      	ldrh	r2, [r2, #0]
 8001ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1cba      	adds	r2, r7, #2
 8001ae4:	8812      	ldrh	r2, [r2, #0]
 8001ae6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	23e0      	movs	r3, #224	@ 0xe0
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d908      	bls.n	8001b12 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	49ac      	ldr	r1, [pc, #688]	@ (8001dbc <HAL_SPI_TransmitReceive+0x3c0>)
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	e008      	b.n	8001b24 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	0149      	lsls	r1, r1, #5
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2240      	movs	r2, #64	@ 0x40
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	2b40      	cmp	r3, #64	@ 0x40
 8001b30:	d007      	beq.n	8001b42 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2140      	movs	r1, #64	@ 0x40
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	23e0      	movs	r3, #224	@ 0xe0
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d800      	bhi.n	8001b50 <HAL_SPI_TransmitReceive+0x154>
 8001b4e:	e083      	b.n	8001c58 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_SPI_TransmitReceive+0x168>
 8001b58:	2312      	movs	r3, #18
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d000      	beq.n	8001b64 <HAL_SPI_TransmitReceive+0x168>
 8001b62:	e06d      	b.n	8001c40 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b68:	881a      	ldrh	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b74:	1c9a      	adds	r2, r3, #2
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b88:	e05a      	b.n	8001c40 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d11b      	bne.n	8001bd0 <HAL_SPI_TransmitReceive+0x1d4>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d016      	beq.n	8001bd0 <HAL_SPI_TransmitReceive+0x1d4>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d113      	bne.n	8001bd0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bac:	881a      	ldrh	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb8:	1c9a      	adds	r2, r3, #2
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d11c      	bne.n	8001c18 <HAL_SPI_TransmitReceive+0x21c>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2246      	movs	r2, #70	@ 0x46
 8001be2:	5a9b      	ldrh	r3, [r3, r2]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d016      	beq.n	8001c18 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68da      	ldr	r2, [r3, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	1c9a      	adds	r2, r3, #2
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2246      	movs	r2, #70	@ 0x46
 8001c06:	5a9b      	ldrh	r3, [r3, r2]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b299      	uxth	r1, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2246      	movs	r2, #70	@ 0x46
 8001c12:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c14:	2301      	movs	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001c18:	f7fe fd2a 	bl	8000670 <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d80b      	bhi.n	8001c40 <HAL_SPI_TransmitReceive+0x244>
 8001c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	d008      	beq.n	8001c40 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8001c2e:	2323      	movs	r3, #35	@ 0x23
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2203      	movs	r2, #3
 8001c34:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	225d      	movs	r2, #93	@ 0x5d
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	5499      	strb	r1, [r3, r2]
        goto error;
 8001c3e:	e0b1      	b.n	8001da4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d19f      	bne.n	8001b8a <HAL_SPI_TransmitReceive+0x18e>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2246      	movs	r2, #70	@ 0x46
 8001c4e:	5a9b      	ldrh	r3, [r3, r2]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d199      	bne.n	8001b8a <HAL_SPI_TransmitReceive+0x18e>
 8001c56:	e089      	b.n	8001d6c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_SPI_TransmitReceive+0x270>
 8001c60:	2312      	movs	r3, #18
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d000      	beq.n	8001c6c <HAL_SPI_TransmitReceive+0x270>
 8001c6a:	e074      	b.n	8001d56 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	330c      	adds	r3, #12
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c92:	e060      	b.n	8001d56 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d11c      	bne.n	8001cdc <HAL_SPI_TransmitReceive+0x2e0>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d017      	beq.n	8001cdc <HAL_SPI_TransmitReceive+0x2e0>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d114      	bne.n	8001cdc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	330c      	adds	r3, #12
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d11e      	bne.n	8001d28 <HAL_SPI_TransmitReceive+0x32c>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2246      	movs	r2, #70	@ 0x46
 8001cee:	5a9b      	ldrh	r3, [r3, r2]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d018      	beq.n	8001d28 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	001a      	movs	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	7812      	ldrb	r2, [r2, #0]
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2246      	movs	r2, #70	@ 0x46
 8001d16:	5a9b      	ldrh	r3, [r3, r2]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b299      	uxth	r1, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2246      	movs	r2, #70	@ 0x46
 8001d22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d24:	2301      	movs	r3, #1
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001d28:	f7fe fca2 	bl	8000670 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d802      	bhi.n	8001d3e <HAL_SPI_TransmitReceive+0x342>
 8001d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	d102      	bne.n	8001d44 <HAL_SPI_TransmitReceive+0x348>
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d108      	bne.n	8001d56 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8001d44:	2323      	movs	r3, #35	@ 0x23
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	2203      	movs	r2, #3
 8001d4a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	225d      	movs	r2, #93	@ 0x5d
 8001d50:	2101      	movs	r1, #1
 8001d52:	5499      	strb	r1, [r3, r2]
        goto error;
 8001d54:	e026      	b.n	8001da4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d199      	bne.n	8001c94 <HAL_SPI_TransmitReceive+0x298>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2246      	movs	r2, #70	@ 0x46
 8001d64:	5a9b      	ldrh	r3, [r3, r2]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d193      	bne.n	8001c94 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d6c:	69fa      	ldr	r2, [r7, #28]
 8001d6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 fa5c 	bl	8002230 <SPI_EndRxTxTransaction>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d006      	beq.n	8001d8a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8001d7c:	2323      	movs	r3, #35	@ 0x23
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2201      	movs	r2, #1
 8001d82:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2220      	movs	r2, #32
 8001d88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d004      	beq.n	8001d9c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8001d92:	2323      	movs	r3, #35	@ 0x23
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2201      	movs	r2, #1
 8001d98:	701a      	strb	r2, [r3, #0]
 8001d9a:	e003      	b.n	8001da4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	225d      	movs	r2, #93	@ 0x5d
 8001da0:	2101      	movs	r1, #1
 8001da2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	225c      	movs	r2, #92	@ 0x5c
 8001da8:	2100      	movs	r1, #0
 8001daa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001dac:	2323      	movs	r3, #35	@ 0x23
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	781b      	ldrb	r3, [r3, #0]
}
 8001db2:	0018      	movs	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	b00a      	add	sp, #40	@ 0x28
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			@ (mov r8, r8)
 8001dbc:	ffffefff 	.word	0xffffefff

08001dc0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2240      	movs	r2, #64	@ 0x40
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d10d      	bne.n	8001dfc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2201      	movs	r2, #1
 8001de4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001de6:	d009      	beq.n	8001dfc <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2240      	movs	r2, #64	@ 0x40
 8001dec:	4013      	ands	r3, r2
 8001dee:	d005      	beq.n	8001dfc <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	0010      	movs	r0, r2
 8001df8:	4798      	blx	r3
    return;
 8001dfa:	e0c5      	b.n	8001f88 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d009      	beq.n	8001e18 <HAL_SPI_IRQHandler+0x58>
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d005      	beq.n	8001e18 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	0010      	movs	r0, r2
 8001e14:	4798      	blx	r3
    return;
 8001e16:	e0b7      	b.n	8001f88 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d109      	bne.n	8001e34 <HAL_SPI_IRQHandler+0x74>
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	2240      	movs	r2, #64	@ 0x40
 8001e24:	4013      	ands	r3, r2
 8001e26:	d105      	bne.n	8001e34 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d100      	bne.n	8001e34 <HAL_SPI_IRQHandler+0x74>
 8001e32:	e0a9      	b.n	8001f88 <HAL_SPI_IRQHandler+0x1c8>
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2220      	movs	r2, #32
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d100      	bne.n	8001e3e <HAL_SPI_IRQHandler+0x7e>
 8001e3c:	e0a4      	b.n	8001f88 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2240      	movs	r2, #64	@ 0x40
 8001e42:	4013      	ands	r3, r2
 8001e44:	d023      	beq.n	8001e8e <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	225d      	movs	r2, #93	@ 0x5d
 8001e4a:	5c9b      	ldrb	r3, [r3, r2]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d011      	beq.n	8001e76 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e56:	2204      	movs	r2, #4
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	e00b      	b.n	8001e8e <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
        return;
 8001e8c:	e07c      	b.n	8001f88 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2220      	movs	r2, #32
 8001e92:	4013      	ands	r3, r2
 8001e94:	d014      	beq.n	8001ec0 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2140      	movs	r1, #64	@ 0x40
 8001eba:	438a      	bics	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	2380      	movs	r3, #128	@ 0x80
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ece:	2208      	movs	r2, #8
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d04c      	beq.n	8001f86 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	21e0      	movs	r1, #224	@ 0xe0
 8001ef8:	438a      	bics	r2, r1
 8001efa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	225d      	movs	r2, #93	@ 0x5d
 8001f00:	2101      	movs	r1, #1
 8001f02:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d103      	bne.n	8001f14 <HAL_SPI_IRQHandler+0x154>
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d032      	beq.n	8001f7a <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2103      	movs	r1, #3
 8001f20:	438a      	bics	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f30:	4a17      	ldr	r2, [pc, #92]	@ (8001f90 <HAL_SPI_IRQHandler+0x1d0>)
 8001f32:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7fe fc81 	bl	8000840 <HAL_DMA_Abort_IT>
 8001f3e:	1e03      	subs	r3, r0, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f46:	2240      	movs	r2, #64	@ 0x40
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_SPI_IRQHandler+0x1d0>)
 8001f5c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7fe fc6c 	bl	8000840 <HAL_DMA_Abort_IT>
 8001f68:	1e03      	subs	r3, r0, #0
 8001f6a:	d00b      	beq.n	8001f84 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f70:	2240      	movs	r2, #64	@ 0x40
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8001f78:	e004      	b.n	8001f84 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f809 	bl	8001f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001f82:	e000      	b.n	8001f86 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8001f84:	46c0      	nop			@ (mov r8, r8)
    return;
 8001f86:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b008      	add	sp, #32
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	08001fa5 	.word	0x08001fa5

08001f94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b002      	add	sp, #8
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2246      	movs	r2, #70	@ 0x46
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7ff ffe6 	bl	8001f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b004      	add	sp, #16
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	1dfb      	adds	r3, r7, #7
 8001fde:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fe0:	f7fe fb46 	bl	8000670 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	18d3      	adds	r3, r2, r3
 8001fee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001ff0:	f7fe fb3e 	bl	8000670 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80020e4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	015b      	lsls	r3, r3, #5
 8001ffe:	0d1b      	lsrs	r3, r3, #20
 8002000:	69fa      	ldr	r2, [r7, #28]
 8002002:	4353      	muls	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002006:	e058      	b.n	80020ba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	3301      	adds	r3, #1
 800200c:	d055      	beq.n	80020ba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800200e:	f7fe fb2f 	bl	8000670 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	429a      	cmp	r2, r3
 800201c:	d902      	bls.n	8002024 <SPI_WaitFlagStateUntilTimeout+0x54>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d142      	bne.n	80020aa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	21e0      	movs	r1, #224	@ 0xe0
 8002030:	438a      	bics	r2, r1
 8002032:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	2382      	movs	r3, #130	@ 0x82
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	429a      	cmp	r2, r3
 800203e:	d113      	bne.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	429a      	cmp	r2, r3
 800204a:	d005      	beq.n	8002058 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	429a      	cmp	r2, r3
 8002056:	d107      	bne.n	8002068 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2140      	movs	r1, #64	@ 0x40
 8002064:	438a      	bics	r2, r1
 8002066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	019b      	lsls	r3, r3, #6
 8002070:	429a      	cmp	r2, r3
 8002072:	d110      	bne.n	8002096 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	491a      	ldr	r1, [pc, #104]	@ (80020e8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2180      	movs	r1, #128	@ 0x80
 8002090:	0189      	lsls	r1, r1, #6
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	225d      	movs	r2, #93	@ 0x5d
 800209a:	2101      	movs	r1, #1
 800209c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	225c      	movs	r2, #92	@ 0x5c
 80020a2:	2100      	movs	r1, #0
 80020a4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e017      	b.n	80020da <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4013      	ands	r3, r2
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	425a      	negs	r2, r3
 80020ca:	4153      	adcs	r3, r2
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	001a      	movs	r2, r3
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d197      	bne.n	8002008 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b008      	add	sp, #32
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	20000000 	.word	0x20000000
 80020e8:	ffffdfff 	.word	0xffffdfff

080020ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020fa:	2317      	movs	r3, #23
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002102:	f7fe fab5 	bl	8000670 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	18d3      	adds	r3, r2, r3
 8002110:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002112:	f7fe faad 	bl	8000670 <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	330c      	adds	r3, #12
 8002120:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002122:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	0013      	movs	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	189b      	adds	r3, r3, r2
 800212c:	00da      	lsls	r2, r3, #3
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	0d1b      	lsrs	r3, r3, #20
 8002132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002134:	4353      	muls	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002138:	e068      	b.n	800220c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	23c0      	movs	r3, #192	@ 0xc0
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	429a      	cmp	r2, r3
 8002142:	d10a      	bne.n	800215a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d107      	bne.n	800215a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	2117      	movs	r1, #23
 8002152:	187b      	adds	r3, r7, r1
 8002154:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002156:	187b      	adds	r3, r7, r1
 8002158:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	d055      	beq.n	800220c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002160:	f7fe fa86 	bl	8000670 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800216c:	429a      	cmp	r2, r3
 800216e:	d902      	bls.n	8002176 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d142      	bne.n	80021fc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	21e0      	movs	r1, #224	@ 0xe0
 8002182:	438a      	bics	r2, r1
 8002184:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	2382      	movs	r3, #130	@ 0x82
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	429a      	cmp	r2, r3
 8002190:	d113      	bne.n	80021ba <SPI_WaitFifoStateUntilTimeout+0xce>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	2380      	movs	r3, #128	@ 0x80
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	429a      	cmp	r2, r3
 800219c:	d005      	beq.n	80021aa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	2380      	movs	r3, #128	@ 0x80
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d107      	bne.n	80021ba <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2140      	movs	r1, #64	@ 0x40
 80021b6:	438a      	bics	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021be:	2380      	movs	r3, #128	@ 0x80
 80021c0:	019b      	lsls	r3, r3, #6
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d110      	bne.n	80021e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4916      	ldr	r1, [pc, #88]	@ (800222c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2180      	movs	r1, #128	@ 0x80
 80021e2:	0189      	lsls	r1, r1, #6
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	225d      	movs	r2, #93	@ 0x5d
 80021ec:	2101      	movs	r1, #1
 80021ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	225c      	movs	r2, #92	@ 0x5c
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e010      	b.n	800221e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3b01      	subs	r3, #1
 800220a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d18e      	bne.n	800213a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b00a      	add	sp, #40	@ 0x28
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	20000000 	.word	0x20000000
 800222c:	ffffdfff 	.word	0xffffdfff

08002230 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	23c0      	movs	r3, #192	@ 0xc0
 8002240:	0159      	lsls	r1, r3, #5
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	0013      	movs	r3, r2
 800224a:	2200      	movs	r2, #0
 800224c:	f7ff ff4e 	bl	80020ec <SPI_WaitFifoStateUntilTimeout>
 8002250:	1e03      	subs	r3, r0, #0
 8002252:	d007      	beq.n	8002264 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002258:	2220      	movs	r2, #32
 800225a:	431a      	orrs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e027      	b.n	80022b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	0013      	movs	r3, r2
 800226e:	2200      	movs	r2, #0
 8002270:	2180      	movs	r1, #128	@ 0x80
 8002272:	f7ff fead 	bl	8001fd0 <SPI_WaitFlagStateUntilTimeout>
 8002276:	1e03      	subs	r3, r0, #0
 8002278:	d007      	beq.n	800228a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227e:	2220      	movs	r2, #32
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e014      	b.n	80022b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	23c0      	movs	r3, #192	@ 0xc0
 800228e:	00d9      	lsls	r1, r3, #3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	0013      	movs	r3, r2
 8002298:	2200      	movs	r2, #0
 800229a:	f7ff ff27 	bl	80020ec <SPI_WaitFifoStateUntilTimeout>
 800229e:	1e03      	subs	r3, r0, #0
 80022a0:	d007      	beq.n	80022b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a6:	2220      	movs	r2, #32
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e000      	b.n	80022b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b004      	add	sp, #16
 80022ba:	bd80      	pop	{r7, pc}

080022bc <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80022c0:	4a08      	ldr	r2, [pc, #32]	@ (80022e4 <MX_FATFS_Init+0x28>)
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <MX_FATFS_Init+0x2c>)
 80022c4:	0011      	movs	r1, r2
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 fe38 	bl	8002f3c <FATFS_LinkDriver>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d002      	beq.n	80022d6 <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	425b      	negs	r3, r3
 80022d4:	e003      	b.n	80022de <MX_FATFS_Init+0x22>
  }
  else
  {
    Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 80022d6:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <MX_FATFS_Init+0x30>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80022dc:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200000a8 	.word	0x200000a8
 80022e8:	2000000c 	.word	0x2000000c
 80022ec:	200000ac 	.word	0x200000ac

080022f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	0002      	movs	r2, r0
 80022f8:	1dfb      	adds	r3, r7, #7
 80022fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80022fc:	1dfb      	adds	r3, r7, #7
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 fa19 	bl	8002738 <USER_SPI_initialize>
 8002306:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b002      	add	sp, #8
 800230e:	bd80      	pop	{r7, pc}

08002310 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	0002      	movs	r2, r0
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	0018      	movs	r0, r3
 8002322:	f000 fb21 	bl	8002968 <USER_SPI_status>
 8002326:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	b002      	add	sp, #8
 800232e:	bd80      	pop	{r7, pc}

08002330 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	250f      	movs	r5, #15
 800233e:	197b      	adds	r3, r7, r5
 8002340:	1c02      	adds	r2, r0, #0
 8002342:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8002344:	683c      	ldr	r4, [r7, #0]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	197b      	adds	r3, r7, r5
 800234c:	7818      	ldrb	r0, [r3, #0]
 800234e:	0023      	movs	r3, r4
 8002350:	f000 fb20 	bl	8002994 <USER_SPI_read>
 8002354:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8002356:	0018      	movs	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	b004      	add	sp, #16
 800235c:	bdb0      	pop	{r4, r5, r7, pc}

0800235e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800235e:	b5b0      	push	{r4, r5, r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	250f      	movs	r5, #15
 800236c:	197b      	adds	r3, r7, r5
 800236e:	1c02      	adds	r2, r0, #0
 8002370:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8002372:	683c      	ldr	r4, [r7, #0]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	197b      	adds	r3, r7, r5
 800237a:	7818      	ldrb	r0, [r3, #0]
 800237c:	0023      	movs	r3, r4
 800237e:	f000 fb75 	bl	8002a6c <USER_SPI_write>
 8002382:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b004      	add	sp, #16
 800238a:	bdb0      	pop	{r4, r5, r7, pc}

0800238c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	603a      	str	r2, [r7, #0]
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	1c02      	adds	r2, r0, #0
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	1dbb      	adds	r3, r7, #6
 800239c:	1c0a      	adds	r2, r1, #0
 800239e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	1dbb      	adds	r3, r7, #6
 80023a4:	7819      	ldrb	r1, [r3, #0]
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 fbde 	bl	8002b6c <USER_SPI_ioctl>
 80023b0:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80023c4:	f7fe f954 	bl	8000670 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <SPI_Timer_On+0x20>)
 80023cc:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80023ce:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <SPI_Timer_On+0x24>)
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	601a      	str	r2, [r3, #0]
}
 80023d4:	46c0      	nop			@ (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	200000b0 	.word	0x200000b0
 80023e0:	200000b4 	.word	0x200000b4

080023e4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80023e8:	f7fe f942 	bl	8000670 <HAL_GetTick>
 80023ec:	0002      	movs	r2, r0
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <SPI_Timer_Status+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1ad2      	subs	r2, r2, r3
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <SPI_Timer_Status+0x28>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	419b      	sbcs	r3, r3
 80023fc:	425b      	negs	r3, r3
 80023fe:	b2db      	uxtb	r3, r3
}
 8002400:	0018      	movs	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	200000b0 	.word	0x200000b0
 800240c:	200000b4 	.word	0x200000b4

08002410 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b087      	sub	sp, #28
 8002414:	af02      	add	r7, sp, #8
 8002416:	0002      	movs	r2, r0
 8002418:	1dfb      	adds	r3, r7, #7
 800241a:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800241c:	240f      	movs	r4, #15
 800241e:	193a      	adds	r2, r7, r4
 8002420:	1df9      	adds	r1, r7, #7
 8002422:	4806      	ldr	r0, [pc, #24]	@ (800243c <xchg_spi+0x2c>)
 8002424:	2332      	movs	r3, #50	@ 0x32
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	f7ff fae7 	bl	80019fc <HAL_SPI_TransmitReceive>
    return rxDat;
 800242e:	193b      	adds	r3, r7, r4
 8002430:	781b      	ldrb	r3, [r3, #0]
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b005      	add	sp, #20
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	46c0      	nop			@ (mov r8, r8)
 800243c:	20000040 	.word	0x20000040

08002440 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	e00a      	b.n	8002466 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	18d4      	adds	r4, r2, r3
 8002456:	20ff      	movs	r0, #255	@ 0xff
 8002458:	f7ff ffda 	bl	8002410 <xchg_spi>
 800245c:	0003      	movs	r3, r0
 800245e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3301      	adds	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3f0      	bcc.n	8002450 <rcvr_spi_multi+0x10>
	}
}
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	46c0      	nop			@ (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b005      	add	sp, #20
 8002476:	bd90      	pop	{r4, r7, pc}

08002478 <xmit_spi_multi>:
static
void xmit_spi_multi (
	uint8_t *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b29a      	uxth	r2, r3
 8002486:	2301      	movs	r3, #1
 8002488:	425b      	negs	r3, r3
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4803      	ldr	r0, [pc, #12]	@ (800249c <xmit_spi_multi+0x24>)
 800248e:	f7ff f955 	bl	800173c <HAL_SPI_Transmit>
}
 8002492:	46c0      	nop			@ (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b002      	add	sp, #8
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	20000040 	.word	0x20000040

080024a0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80024a8:	f7fe f8e2 	bl	8000670 <HAL_GetTick>
 80024ac:	0003      	movs	r3, r0
 80024ae:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80024b4:	250f      	movs	r5, #15
 80024b6:	197c      	adds	r4, r7, r5
 80024b8:	20ff      	movs	r0, #255	@ 0xff
 80024ba:	f7ff ffa9 	bl	8002410 <xchg_spi>
 80024be:	0003      	movs	r3, r0
 80024c0:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80024c2:	197b      	adds	r3, r7, r5
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2bff      	cmp	r3, #255	@ 0xff
 80024c8:	d007      	beq.n	80024da <wait_ready+0x3a>
 80024ca:	f7fe f8d1 	bl	8000670 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d8ec      	bhi.n	80024b4 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 80024da:	230f      	movs	r3, #15
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3bff      	subs	r3, #255	@ 0xff
 80024e2:	425a      	negs	r2, r3
 80024e4:	4153      	adcs	r3, r2
 80024e6:	b2db      	uxtb	r3, r3
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b006      	add	sp, #24
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}

080024f0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <despiselect+0x1c>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	2102      	movs	r1, #2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7fe fb6e 	bl	8000bdc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8002500:	20ff      	movs	r0, #255	@ 0xff
 8002502:	f7ff ff85 	bl	8002410 <xchg_spi>

}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	50000400 	.word	0x50000400

08002510 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <spiselect+0x34>)
 8002516:	2200      	movs	r2, #0
 8002518:	2102      	movs	r1, #2
 800251a:	0018      	movs	r0, r3
 800251c:	f7fe fb5e 	bl	8000bdc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8002520:	20ff      	movs	r0, #255	@ 0xff
 8002522:	f7ff ff75 	bl	8002410 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8002526:	23fa      	movs	r3, #250	@ 0xfa
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff ffb8 	bl	80024a0 <wait_ready>
 8002530:	1e03      	subs	r3, r0, #0
 8002532:	d001      	beq.n	8002538 <spiselect+0x28>
 8002534:	2301      	movs	r3, #1
 8002536:	e002      	b.n	800253e <spiselect+0x2e>

	despiselect();
 8002538:	f7ff ffda 	bl	80024f0 <despiselect>
	return 0;	/* Timeout */
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	50000400 	.word	0x50000400

08002548 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8002552:	20c8      	movs	r0, #200	@ 0xc8
 8002554:	f7ff ff32 	bl	80023bc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8002558:	250f      	movs	r5, #15
 800255a:	197c      	adds	r4, r7, r5
 800255c:	20ff      	movs	r0, #255	@ 0xff
 800255e:	f7ff ff57 	bl	8002410 <xchg_spi>
 8002562:	0003      	movs	r3, r0
 8002564:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8002566:	197b      	adds	r3, r7, r5
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2bff      	cmp	r3, #255	@ 0xff
 800256c:	d103      	bne.n	8002576 <rcvr_datablock+0x2e>
 800256e:	f7ff ff39 	bl	80023e4 <SPI_Timer_Status>
 8002572:	1e03      	subs	r3, r0, #0
 8002574:	d1f0      	bne.n	8002558 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8002576:	230f      	movs	r3, #15
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2bfe      	cmp	r3, #254	@ 0xfe
 800257e:	d001      	beq.n	8002584 <rcvr_datablock+0x3c>
 8002580:	2300      	movs	r3, #0
 8002582:	e00c      	b.n	800259e <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	0011      	movs	r1, r2
 800258a:	0018      	movs	r0, r3
 800258c:	f7ff ff58 	bl	8002440 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8002590:	20ff      	movs	r0, #255	@ 0xff
 8002592:	f7ff ff3d 	bl	8002410 <xchg_spi>
 8002596:	20ff      	movs	r0, #255	@ 0xff
 8002598:	f7ff ff3a 	bl	8002410 <xchg_spi>

	return 1;						/* Function succeeded */
 800259c:	2301      	movs	r3, #1
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b004      	add	sp, #16
 80025a4:	bdb0      	pop	{r4, r5, r7, pc}

080025a6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80025a6:	b5b0      	push	{r4, r5, r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	000a      	movs	r2, r1
 80025b0:	1cfb      	adds	r3, r7, #3
 80025b2:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80025b4:	23fa      	movs	r3, #250	@ 0xfa
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7ff ff71 	bl	80024a0 <wait_ready>
 80025be:	1e03      	subs	r3, r0, #0
 80025c0:	d101      	bne.n	80025c6 <xmit_datablock+0x20>
 80025c2:	2300      	movs	r3, #0
 80025c4:	e025      	b.n	8002612 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 80025c6:	1cfb      	adds	r3, r7, #3
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7ff ff20 	bl	8002410 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80025d0:	1cfb      	adds	r3, r7, #3
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2bfd      	cmp	r3, #253	@ 0xfd
 80025d6:	d01b      	beq.n	8002610 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7ff ff49 	bl	8002478 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80025e6:	20ff      	movs	r0, #255	@ 0xff
 80025e8:	f7ff ff12 	bl	8002410 <xchg_spi>
 80025ec:	20ff      	movs	r0, #255	@ 0xff
 80025ee:	f7ff ff0f 	bl	8002410 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80025f2:	250f      	movs	r5, #15
 80025f4:	197c      	adds	r4, r7, r5
 80025f6:	20ff      	movs	r0, #255	@ 0xff
 80025f8:	f7ff ff0a 	bl	8002410 <xchg_spi>
 80025fc:	0003      	movs	r3, r0
 80025fe:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8002600:	197b      	adds	r3, r7, r5
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	221f      	movs	r2, #31
 8002606:	4013      	ands	r3, r2
 8002608:	2b05      	cmp	r3, #5
 800260a:	d001      	beq.n	8002610 <xmit_datablock+0x6a>
 800260c:	2300      	movs	r3, #0
 800260e:	e000      	b.n	8002612 <xmit_datablock+0x6c>
	}
	return 1;
 8002610:	2301      	movs	r3, #1
}
 8002612:	0018      	movs	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	b004      	add	sp, #16
 8002618:	bdb0      	pop	{r4, r5, r7, pc}

0800261a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800261a:	b5b0      	push	{r4, r5, r7, lr}
 800261c:	b084      	sub	sp, #16
 800261e:	af00      	add	r7, sp, #0
 8002620:	0002      	movs	r2, r0
 8002622:	6039      	str	r1, [r7, #0]
 8002624:	1dfb      	adds	r3, r7, #7
 8002626:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8002628:	1dfb      	adds	r3, r7, #7
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b25b      	sxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	da15      	bge.n	800265e <send_cmd+0x44>
		cmd &= 0x7F;
 8002632:	1dfb      	adds	r3, r7, #7
 8002634:	1dfa      	adds	r2, r7, #7
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	217f      	movs	r1, #127	@ 0x7f
 800263a:	400a      	ands	r2, r1
 800263c:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 800263e:	250e      	movs	r5, #14
 8002640:	197c      	adds	r4, r7, r5
 8002642:	2100      	movs	r1, #0
 8002644:	2037      	movs	r0, #55	@ 0x37
 8002646:	f7ff ffe8 	bl	800261a <send_cmd>
 800264a:	0003      	movs	r3, r0
 800264c:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 800264e:	002a      	movs	r2, r5
 8002650:	18bb      	adds	r3, r7, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d902      	bls.n	800265e <send_cmd+0x44>
 8002658:	18bb      	adds	r3, r7, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	e067      	b.n	800272e <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b0c      	cmp	r3, #12
 8002664:	d007      	beq.n	8002676 <send_cmd+0x5c>
		despiselect();
 8002666:	f7ff ff43 	bl	80024f0 <despiselect>
		if (!spiselect()) return 0xFF;
 800266a:	f7ff ff51 	bl	8002510 <spiselect>
 800266e:	1e03      	subs	r3, r0, #0
 8002670:	d101      	bne.n	8002676 <send_cmd+0x5c>
 8002672:	23ff      	movs	r3, #255	@ 0xff
 8002674:	e05b      	b.n	800272e <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2240      	movs	r2, #64	@ 0x40
 800267c:	4313      	orrs	r3, r2
 800267e:	b2db      	uxtb	r3, r3
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff fec5 	bl	8002410 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	0e1b      	lsrs	r3, r3, #24
 800268a:	b2db      	uxtb	r3, r3
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff febf 	bl	8002410 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	b2db      	uxtb	r3, r3
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff feb9 	bl	8002410 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7ff feb3 	bl	8002410 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	0018      	movs	r0, r3
 80026b0:	f7ff feae 	bl	8002410 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80026b4:	210f      	movs	r1, #15
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2201      	movs	r2, #1
 80026ba:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80026bc:	1dfb      	adds	r3, r7, #7
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <send_cmd+0xb0>
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2295      	movs	r2, #149	@ 0x95
 80026c8:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80026ca:	1dfb      	adds	r3, r7, #7
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d103      	bne.n	80026da <send_cmd+0xc0>
 80026d2:	230f      	movs	r3, #15
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2287      	movs	r2, #135	@ 0x87
 80026d8:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 80026da:	230f      	movs	r3, #15
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff fe95 	bl	8002410 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80026e6:	1dfb      	adds	r3, r7, #7
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b0c      	cmp	r3, #12
 80026ec:	d102      	bne.n	80026f4 <send_cmd+0xda>
 80026ee:	20ff      	movs	r0, #255	@ 0xff
 80026f0:	f7ff fe8e 	bl	8002410 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80026f4:	230f      	movs	r3, #15
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	220a      	movs	r2, #10
 80026fa:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 80026fc:	250e      	movs	r5, #14
 80026fe:	197c      	adds	r4, r7, r5
 8002700:	20ff      	movs	r0, #255	@ 0xff
 8002702:	f7ff fe85 	bl	8002410 <xchg_spi>
 8002706:	0003      	movs	r3, r0
 8002708:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 800270a:	197b      	adds	r3, r7, r5
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	b25b      	sxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	da09      	bge.n	8002728 <send_cmd+0x10e>
 8002714:	210f      	movs	r1, #15
 8002716:	187b      	adds	r3, r7, r1
 8002718:	187a      	adds	r2, r7, r1
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	3a01      	subs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	187b      	adds	r3, r7, r1
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e9      	bne.n	80026fc <send_cmd+0xe2>

	return res;							/* Return received response */
 8002728:	230e      	movs	r3, #14
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	781b      	ldrb	r3, [r3, #0]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b004      	add	sp, #16
 8002734:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002738 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	0002      	movs	r2, r0
 8002740:	1dfb      	adds	r3, r7, #7
 8002742:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8002744:	1dfb      	adds	r3, r7, #7
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <USER_SPI_initialize+0x18>
 800274c:	2301      	movs	r3, #1
 800274e:	e100      	b.n	8002952 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8002750:	4b82      	ldr	r3, [pc, #520]	@ (800295c <USER_SPI_initialize+0x224>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	001a      	movs	r2, r3
 8002758:	2302      	movs	r3, #2
 800275a:	4013      	ands	r3, r2
 800275c:	d003      	beq.n	8002766 <USER_SPI_initialize+0x2e>
 800275e:	4b7f      	ldr	r3, [pc, #508]	@ (800295c <USER_SPI_initialize+0x224>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	e0f5      	b.n	8002952 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8002766:	4b7e      	ldr	r3, [pc, #504]	@ (8002960 <USER_SPI_initialize+0x228>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2238      	movs	r2, #56	@ 0x38
 800276e:	4393      	bics	r3, r2
 8002770:	001a      	movs	r2, r3
 8002772:	4b7b      	ldr	r3, [pc, #492]	@ (8002960 <USER_SPI_initialize+0x228>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2128      	movs	r1, #40	@ 0x28
 8002778:	430a      	orrs	r2, r1
 800277a:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800277c:	230f      	movs	r3, #15
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	220a      	movs	r2, #10
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e008      	b.n	8002798 <USER_SPI_initialize+0x60>
 8002786:	20ff      	movs	r0, #255	@ 0xff
 8002788:	f7ff fe42 	bl	8002410 <xchg_spi>
 800278c:	210f      	movs	r1, #15
 800278e:	187b      	adds	r3, r7, r1
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	187b      	adds	r3, r7, r1
 8002794:	3a01      	subs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	240f      	movs	r4, #15
 800279a:	193b      	adds	r3, r7, r4
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f1      	bne.n	8002786 <USER_SPI_initialize+0x4e>

	ty = 0;
 80027a2:	230d      	movs	r3, #13
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2200      	movs	r2, #0
 80027a8:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80027aa:	2100      	movs	r1, #0
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7ff ff34 	bl	800261a <send_cmd>
 80027b2:	0003      	movs	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d000      	beq.n	80027ba <USER_SPI_initialize+0x82>
 80027b8:	e0a6      	b.n	8002908 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80027ba:	23fa      	movs	r3, #250	@ 0xfa
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	0018      	movs	r0, r3
 80027c0:	f7ff fdfc 	bl	80023bc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80027c4:	23d5      	movs	r3, #213	@ 0xd5
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	0019      	movs	r1, r3
 80027ca:	2008      	movs	r0, #8
 80027cc:	f7ff ff25 	bl	800261a <send_cmd>
 80027d0:	0003      	movs	r3, r0
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d162      	bne.n	800289c <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e00f      	b.n	80027fe <USER_SPI_initialize+0xc6>
 80027de:	250f      	movs	r5, #15
 80027e0:	197b      	adds	r3, r7, r5
 80027e2:	781c      	ldrb	r4, [r3, #0]
 80027e4:	20ff      	movs	r0, #255	@ 0xff
 80027e6:	f7ff fe13 	bl	8002410 <xchg_spi>
 80027ea:	0003      	movs	r3, r0
 80027ec:	001a      	movs	r2, r3
 80027ee:	2308      	movs	r3, #8
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	551a      	strb	r2, [r3, r4]
 80027f4:	197b      	adds	r3, r7, r5
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	197b      	adds	r3, r7, r5
 80027fa:	3201      	adds	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	230f      	movs	r3, #15
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b03      	cmp	r3, #3
 8002806:	d9ea      	bls.n	80027de <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8002808:	2208      	movs	r2, #8
 800280a:	18bb      	adds	r3, r7, r2
 800280c:	789b      	ldrb	r3, [r3, #2]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d000      	beq.n	8002814 <USER_SPI_initialize+0xdc>
 8002812:	e079      	b.n	8002908 <USER_SPI_initialize+0x1d0>
 8002814:	18bb      	adds	r3, r7, r2
 8002816:	78db      	ldrb	r3, [r3, #3]
 8002818:	2baa      	cmp	r3, #170	@ 0xaa
 800281a:	d000      	beq.n	800281e <USER_SPI_initialize+0xe6>
 800281c:	e074      	b.n	8002908 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	f7ff fde0 	bl	80023e4 <SPI_Timer_Status>
 8002824:	1e03      	subs	r3, r0, #0
 8002826:	d007      	beq.n	8002838 <USER_SPI_initialize+0x100>
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	05db      	lsls	r3, r3, #23
 800282c:	0019      	movs	r1, r3
 800282e:	20a9      	movs	r0, #169	@ 0xa9
 8002830:	f7ff fef3 	bl	800261a <send_cmd>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d1f3      	bne.n	8002820 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8002838:	f7ff fdd4 	bl	80023e4 <SPI_Timer_Status>
 800283c:	1e03      	subs	r3, r0, #0
 800283e:	d063      	beq.n	8002908 <USER_SPI_initialize+0x1d0>
 8002840:	2100      	movs	r1, #0
 8002842:	203a      	movs	r0, #58	@ 0x3a
 8002844:	f7ff fee9 	bl	800261a <send_cmd>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d15d      	bne.n	8002908 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800284c:	230f      	movs	r3, #15
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	e00f      	b.n	8002876 <USER_SPI_initialize+0x13e>
 8002856:	250f      	movs	r5, #15
 8002858:	197b      	adds	r3, r7, r5
 800285a:	781c      	ldrb	r4, [r3, #0]
 800285c:	20ff      	movs	r0, #255	@ 0xff
 800285e:	f7ff fdd7 	bl	8002410 <xchg_spi>
 8002862:	0003      	movs	r3, r0
 8002864:	001a      	movs	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	18fb      	adds	r3, r7, r3
 800286a:	551a      	strb	r2, [r3, r4]
 800286c:	197b      	adds	r3, r7, r5
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	197b      	adds	r3, r7, r5
 8002872:	3201      	adds	r2, #1
 8002874:	701a      	strb	r2, [r3, #0]
 8002876:	230f      	movs	r3, #15
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b03      	cmp	r3, #3
 800287e:	d9ea      	bls.n	8002856 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8002880:	2308      	movs	r3, #8
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	001a      	movs	r2, r3
 8002888:	2340      	movs	r3, #64	@ 0x40
 800288a:	4013      	ands	r3, r2
 800288c:	d001      	beq.n	8002892 <USER_SPI_initialize+0x15a>
 800288e:	220c      	movs	r2, #12
 8002890:	e000      	b.n	8002894 <USER_SPI_initialize+0x15c>
 8002892:	2204      	movs	r2, #4
 8002894:	230d      	movs	r3, #13
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e035      	b.n	8002908 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800289c:	2100      	movs	r1, #0
 800289e:	20a9      	movs	r0, #169	@ 0xa9
 80028a0:	f7ff febb 	bl	800261a <send_cmd>
 80028a4:	0003      	movs	r3, r0
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d808      	bhi.n	80028bc <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80028aa:	230d      	movs	r3, #13
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2202      	movs	r2, #2
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	230e      	movs	r3, #14
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	22a9      	movs	r2, #169	@ 0xa9
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e007      	b.n	80028cc <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80028bc:	230d      	movs	r3, #13
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	230e      	movs	r3, #14
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80028cc:	46c0      	nop			@ (mov r8, r8)
 80028ce:	f7ff fd89 	bl	80023e4 <SPI_Timer_Status>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d008      	beq.n	80028e8 <USER_SPI_initialize+0x1b0>
 80028d6:	230e      	movs	r3, #14
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2100      	movs	r1, #0
 80028de:	0018      	movs	r0, r3
 80028e0:	f7ff fe9b 	bl	800261a <send_cmd>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d1f2      	bne.n	80028ce <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80028e8:	f7ff fd7c 	bl	80023e4 <SPI_Timer_Status>
 80028ec:	1e03      	subs	r3, r0, #0
 80028ee:	d007      	beq.n	8002900 <USER_SPI_initialize+0x1c8>
 80028f0:	2380      	movs	r3, #128	@ 0x80
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	0019      	movs	r1, r3
 80028f6:	2010      	movs	r0, #16
 80028f8:	f7ff fe8f 	bl	800261a <send_cmd>
 80028fc:	1e03      	subs	r3, r0, #0
 80028fe:	d003      	beq.n	8002908 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8002900:	230d      	movs	r3, #13
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8002908:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <USER_SPI_initialize+0x22c>)
 800290a:	240d      	movs	r4, #13
 800290c:	193a      	adds	r2, r7, r4
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	701a      	strb	r2, [r3, #0]
	despiselect();
 8002912:	f7ff fded 	bl	80024f0 <despiselect>

	if (ty) {			/* OK */
 8002916:	193b      	adds	r3, r7, r4
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d013      	beq.n	8002946 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 800291e:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <USER_SPI_initialize+0x228>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2238      	movs	r2, #56	@ 0x38
 8002926:	4393      	bics	r3, r2
 8002928:	001a      	movs	r2, r3
 800292a:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <USER_SPI_initialize+0x228>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2108      	movs	r1, #8
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8002934:	4b09      	ldr	r3, [pc, #36]	@ (800295c <USER_SPI_initialize+0x224>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2201      	movs	r2, #1
 800293c:	4393      	bics	r3, r2
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <USER_SPI_initialize+0x224>)
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e002      	b.n	800294c <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8002946:	4b05      	ldr	r3, [pc, #20]	@ (800295c <USER_SPI_initialize+0x224>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800294c:	4b03      	ldr	r3, [pc, #12]	@ (800295c <USER_SPI_initialize+0x224>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
}
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	b004      	add	sp, #16
 8002958:	bdb0      	pop	{r4, r5, r7, pc}
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	20000020 	.word	0x20000020
 8002960:	20000040 	.word	0x20000040
 8002964:	200000ad 	.word	0x200000ad

08002968 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	0002      	movs	r2, r0
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8002974:	1dfb      	adds	r3, r7, #7
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <USER_SPI_status+0x18>
 800297c:	2301      	movs	r3, #1
 800297e:	e002      	b.n	8002986 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <USER_SPI_status+0x28>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
}
 8002986:	0018      	movs	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	20000020 	.word	0x20000020

08002994 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	210f      	movs	r1, #15
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	1c02      	adds	r2, r0, #0
 80029a6:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80029a8:	187b      	adds	r3, r7, r1
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <USER_SPI_read+0x22>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <USER_SPI_read+0x26>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e04f      	b.n	8002a5a <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80029ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <USER_SPI_read+0xd0>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	001a      	movs	r2, r3
 80029c2:	2301      	movs	r3, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	d001      	beq.n	80029cc <USER_SPI_read+0x38>
 80029c8:	2303      	movs	r3, #3
 80029ca:	e046      	b.n	8002a5a <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80029cc:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <USER_SPI_read+0xd4>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	001a      	movs	r2, r3
 80029d2:	2308      	movs	r3, #8
 80029d4:	4013      	ands	r3, r2
 80029d6:	d102      	bne.n	80029de <USER_SPI_read+0x4a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	025b      	lsls	r3, r3, #9
 80029dc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d112      	bne.n	8002a0a <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	0019      	movs	r1, r3
 80029e8:	2011      	movs	r0, #17
 80029ea:	f7ff fe16 	bl	800261a <send_cmd>
 80029ee:	1e03      	subs	r3, r0, #0
 80029f0:	d12d      	bne.n	8002a4e <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 80029f2:	2380      	movs	r3, #128	@ 0x80
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	0011      	movs	r1, r2
 80029fa:	0018      	movs	r0, r3
 80029fc:	f7ff fda4 	bl	8002548 <rcvr_datablock>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d024      	beq.n	8002a4e <USER_SPI_read+0xba>
			count = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	e021      	b.n	8002a4e <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	2012      	movs	r0, #18
 8002a10:	f7ff fe03 	bl	800261a <send_cmd>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d11a      	bne.n	8002a4e <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	009a      	lsls	r2, r3, #2
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0011      	movs	r1, r2
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7ff fd91 	bl	8002548 <rcvr_datablock>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d00c      	beq.n	8002a44 <USER_SPI_read+0xb0>
				buff += 512;
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2280      	movs	r2, #128	@ 0x80
 8002a2e:	0092      	lsls	r2, r2, #2
 8002a30:	4694      	mov	ip, r2
 8002a32:	4463      	add	r3, ip
 8002a34:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	603b      	str	r3, [r7, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1ea      	bne.n	8002a18 <USER_SPI_read+0x84>
 8002a42:	e000      	b.n	8002a46 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8002a44:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8002a46:	2100      	movs	r1, #0
 8002a48:	200c      	movs	r0, #12
 8002a4a:	f7ff fde6 	bl	800261a <send_cmd>
		}
	}
	despiselect();
 8002a4e:	f7ff fd4f 	bl	80024f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	1e5a      	subs	r2, r3, #1
 8002a56:	4193      	sbcs	r3, r2
 8002a58:	b2db      	uxtb	r3, r3
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	20000020 	.word	0x20000020
 8002a68:	200000ad 	.word	0x200000ad

08002a6c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	603b      	str	r3, [r7, #0]
 8002a78:	210f      	movs	r1, #15
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	1c02      	adds	r2, r0, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d102      	bne.n	8002a8e <USER_SPI_write+0x22>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <USER_SPI_write+0x26>
 8002a8e:	2304      	movs	r3, #4
 8002a90:	e063      	b.n	8002b5a <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8002a92:	4b34      	ldr	r3, [pc, #208]	@ (8002b64 <USER_SPI_write+0xf8>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	001a      	movs	r2, r3
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d001      	beq.n	8002aa4 <USER_SPI_write+0x38>
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e05a      	b.n	8002b5a <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8002b64 <USER_SPI_write+0xf8>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	001a      	movs	r2, r3
 8002aac:	2304      	movs	r3, #4
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d001      	beq.n	8002ab6 <USER_SPI_write+0x4a>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e051      	b.n	8002b5a <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <USER_SPI_write+0xfc>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	001a      	movs	r2, r3
 8002abc:	2308      	movs	r3, #8
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d102      	bne.n	8002ac8 <USER_SPI_write+0x5c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	025b      	lsls	r3, r3, #9
 8002ac6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d110      	bne.n	8002af0 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	2018      	movs	r0, #24
 8002ad4:	f7ff fda1 	bl	800261a <send_cmd>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d138      	bne.n	8002b4e <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	21fe      	movs	r1, #254	@ 0xfe
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7ff fd60 	bl	80025a6 <xmit_datablock>
 8002ae6:	1e03      	subs	r3, r0, #0
 8002ae8:	d031      	beq.n	8002b4e <USER_SPI_write+0xe2>
			count = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	603b      	str	r3, [r7, #0]
 8002aee:	e02e      	b.n	8002b4e <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <USER_SPI_write+0xfc>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	001a      	movs	r2, r3
 8002af6:	2306      	movs	r3, #6
 8002af8:	4013      	ands	r3, r2
 8002afa:	d004      	beq.n	8002b06 <USER_SPI_write+0x9a>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	0019      	movs	r1, r3
 8002b00:	2097      	movs	r0, #151	@ 0x97
 8002b02:	f7ff fd8a 	bl	800261a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0019      	movs	r1, r3
 8002b0a:	2019      	movs	r0, #25
 8002b0c:	f7ff fd85 	bl	800261a <send_cmd>
 8002b10:	1e03      	subs	r3, r0, #0
 8002b12:	d11c      	bne.n	8002b4e <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	21fc      	movs	r1, #252	@ 0xfc
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff fd44 	bl	80025a6 <xmit_datablock>
 8002b1e:	1e03      	subs	r3, r0, #0
 8002b20:	d00c      	beq.n	8002b3c <USER_SPI_write+0xd0>
				buff += 512;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2280      	movs	r2, #128	@ 0x80
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	4694      	mov	ip, r2
 8002b2a:	4463      	add	r3, ip
 8002b2c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ec      	bne.n	8002b14 <USER_SPI_write+0xa8>
 8002b3a:	e000      	b.n	8002b3e <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8002b3c:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8002b3e:	21fd      	movs	r1, #253	@ 0xfd
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff fd30 	bl	80025a6 <xmit_datablock>
 8002b46:	1e03      	subs	r3, r0, #0
 8002b48:	d101      	bne.n	8002b4e <USER_SPI_write+0xe2>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8002b4e:	f7ff fccf 	bl	80024f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	4193      	sbcs	r3, r2
 8002b58:	b2db      	uxtb	r3, r3
}
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	b004      	add	sp, #16
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	20000020 	.word	0x20000020
 8002b68:	200000ad 	.word	0x200000ad

08002b6c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b08d      	sub	sp, #52	@ 0x34
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	603a      	str	r2, [r7, #0]
 8002b74:	1dfb      	adds	r3, r7, #7
 8002b76:	1c02      	adds	r2, r0, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	1dbb      	adds	r3, r7, #6
 8002b7c:	1c0a      	adds	r2, r1, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <USER_SPI_ioctl+0x20>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e178      	b.n	8002e7e <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8002b8c:	4bbe      	ldr	r3, [pc, #760]	@ (8002e88 <USER_SPI_ioctl+0x31c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	001a      	movs	r2, r3
 8002b94:	2301      	movs	r3, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	d001      	beq.n	8002b9e <USER_SPI_ioctl+0x32>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e16f      	b.n	8002e7e <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8002b9e:	232f      	movs	r3, #47	@ 0x2f
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 8002ba6:	1dbb      	adds	r3, r7, #6
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d100      	bne.n	8002bb0 <USER_SPI_ioctl+0x44>
 8002bae:	e100      	b.n	8002db2 <USER_SPI_ioctl+0x246>
 8002bb0:	dd00      	ble.n	8002bb4 <USER_SPI_ioctl+0x48>
 8002bb2:	e14d      	b.n	8002e50 <USER_SPI_ioctl+0x2e4>
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d100      	bne.n	8002bba <USER_SPI_ioctl+0x4e>
 8002bb8:	e074      	b.n	8002ca4 <USER_SPI_ioctl+0x138>
 8002bba:	dd00      	ble.n	8002bbe <USER_SPI_ioctl+0x52>
 8002bbc:	e148      	b.n	8002e50 <USER_SPI_ioctl+0x2e4>
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <USER_SPI_ioctl+0x5c>
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d00a      	beq.n	8002bdc <USER_SPI_ioctl+0x70>
 8002bc6:	e143      	b.n	8002e50 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8002bc8:	f7ff fca2 	bl	8002510 <spiselect>
 8002bcc:	1e03      	subs	r3, r0, #0
 8002bce:	d100      	bne.n	8002bd2 <USER_SPI_ioctl+0x66>
 8002bd0:	e143      	b.n	8002e5a <USER_SPI_ioctl+0x2ee>
 8002bd2:	232f      	movs	r3, #47	@ 0x2f
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
		break;
 8002bda:	e13e      	b.n	8002e5a <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2009      	movs	r0, #9
 8002be0:	f7ff fd1b 	bl	800261a <send_cmd>
 8002be4:	1e03      	subs	r3, r0, #0
 8002be6:	d000      	beq.n	8002bea <USER_SPI_ioctl+0x7e>
 8002be8:	e139      	b.n	8002e5e <USER_SPI_ioctl+0x2f2>
 8002bea:	240c      	movs	r4, #12
 8002bec:	193b      	adds	r3, r7, r4
 8002bee:	2110      	movs	r1, #16
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff fca9 	bl	8002548 <rcvr_datablock>
 8002bf6:	1e03      	subs	r3, r0, #0
 8002bf8:	d100      	bne.n	8002bfc <USER_SPI_ioctl+0x90>
 8002bfa:	e130      	b.n	8002e5e <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8002bfc:	0020      	movs	r0, r4
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d115      	bne.n	8002c36 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	7a5b      	ldrb	r3, [r3, #9]
 8002c0e:	001a      	movs	r2, r3
 8002c10:	183b      	adds	r3, r7, r0
 8002c12:	7a1b      	ldrb	r3, [r3, #8]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	18d3      	adds	r3, r2, r3
 8002c18:	0019      	movs	r1, r3
 8002c1a:	183b      	adds	r3, r7, r0
 8002c1c:	79db      	ldrb	r3, [r3, #7]
 8002c1e:	041a      	lsls	r2, r3, #16
 8002c20:	23fc      	movs	r3, #252	@ 0xfc
 8002c22:	039b      	lsls	r3, r3, #14
 8002c24:	4013      	ands	r3, r2
 8002c26:	18cb      	adds	r3, r1, r3
 8002c28:	3301      	adds	r3, #1
 8002c2a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	029a      	lsls	r2, r3, #10
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e031      	b.n	8002c9a <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002c36:	200c      	movs	r0, #12
 8002c38:	183b      	adds	r3, r7, r0
 8002c3a:	795b      	ldrb	r3, [r3, #5]
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	4013      	ands	r3, r2
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	7a9b      	ldrb	r3, [r3, #10]
 8002c46:	09db      	lsrs	r3, r3, #7
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	18d3      	adds	r3, r2, r3
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	183b      	adds	r3, r7, r0
 8002c50:	7a5b      	ldrb	r3, [r3, #9]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2106      	movs	r1, #6
 8002c58:	400b      	ands	r3, r1
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	18d3      	adds	r3, r2, r3
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	242e      	movs	r4, #46	@ 0x2e
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	3202      	adds	r2, #2
 8002c66:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8002c68:	183b      	adds	r3, r7, r0
 8002c6a:	7a1b      	ldrb	r3, [r3, #8]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	001a      	movs	r2, r3
 8002c72:	183b      	adds	r3, r7, r0
 8002c74:	79db      	ldrb	r3, [r3, #7]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	18d2      	adds	r2, r2, r3
 8002c7a:	183b      	adds	r3, r7, r0
 8002c7c:	799b      	ldrb	r3, [r3, #6]
 8002c7e:	0299      	lsls	r1, r3, #10
 8002c80:	23c0      	movs	r3, #192	@ 0xc0
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	400b      	ands	r3, r1
 8002c86:	18d3      	adds	r3, r2, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	3b09      	subs	r3, #9
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	409a      	lsls	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002c9a:	232f      	movs	r3, #47	@ 0x2f
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002ca2:	e0dc      	b.n	8002e5e <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8002ca4:	4b79      	ldr	r3, [pc, #484]	@ (8002e8c <USER_SPI_ioctl+0x320>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	001a      	movs	r2, r3
 8002caa:	2304      	movs	r3, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d035      	beq.n	8002d1c <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	208d      	movs	r0, #141	@ 0x8d
 8002cb4:	f7ff fcb1 	bl	800261a <send_cmd>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d000      	beq.n	8002cbe <USER_SPI_ioctl+0x152>
 8002cbc:	e0d1      	b.n	8002e62 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 8002cbe:	20ff      	movs	r0, #255	@ 0xff
 8002cc0:	f7ff fba6 	bl	8002410 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2110      	movs	r1, #16
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f7ff fc3c 	bl	8002548 <rcvr_datablock>
 8002cd0:	1e03      	subs	r3, r0, #0
 8002cd2:	d100      	bne.n	8002cd6 <USER_SPI_ioctl+0x16a>
 8002cd4:	e0c5      	b.n	8002e62 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8002cd6:	232e      	movs	r3, #46	@ 0x2e
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	2230      	movs	r2, #48	@ 0x30
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e008      	b.n	8002cf2 <USER_SPI_ioctl+0x186>
 8002ce0:	20ff      	movs	r0, #255	@ 0xff
 8002ce2:	f7ff fb95 	bl	8002410 <xchg_spi>
 8002ce6:	212e      	movs	r1, #46	@ 0x2e
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	3a01      	subs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	232e      	movs	r3, #46	@ 0x2e
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f1      	bne.n	8002ce0 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8002cfc:	230c      	movs	r3, #12
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	7a9b      	ldrb	r3, [r3, #10]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	001a      	movs	r2, r3
 8002d08:	2310      	movs	r3, #16
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002d12:	232f      	movs	r3, #47	@ 0x2f
 8002d14:	18fb      	adds	r3, r7, r3
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002d1a:	e0a2      	b.n	8002e62 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	2009      	movs	r0, #9
 8002d20:	f7ff fc7b 	bl	800261a <send_cmd>
 8002d24:	1e03      	subs	r3, r0, #0
 8002d26:	d000      	beq.n	8002d2a <USER_SPI_ioctl+0x1be>
 8002d28:	e09b      	b.n	8002e62 <USER_SPI_ioctl+0x2f6>
 8002d2a:	240c      	movs	r4, #12
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	2110      	movs	r1, #16
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff fc09 	bl	8002548 <rcvr_datablock>
 8002d36:	1e03      	subs	r3, r0, #0
 8002d38:	d100      	bne.n	8002d3c <USER_SPI_ioctl+0x1d0>
 8002d3a:	e092      	b.n	8002e62 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8002d3c:	4b53      	ldr	r3, [pc, #332]	@ (8002e8c <USER_SPI_ioctl+0x320>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	001a      	movs	r2, r3
 8002d42:	2302      	movs	r3, #2
 8002d44:	4013      	ands	r3, r2
 8002d46:	d016      	beq.n	8002d76 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8002d48:	0021      	movs	r1, r4
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	7a9b      	ldrb	r3, [r3, #10]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	227e      	movs	r2, #126	@ 0x7e
 8002d52:	4013      	ands	r3, r2
 8002d54:	187a      	adds	r2, r7, r1
 8002d56:	7ad2      	ldrb	r2, [r2, #11]
 8002d58:	09d2      	lsrs	r2, r2, #7
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	7b5b      	ldrb	r3, [r3, #13]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	0013      	movs	r3, r2
 8002d6e:	001a      	movs	r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e018      	b.n	8002da8 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8002d76:	210c      	movs	r1, #12
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	7a9b      	ldrb	r3, [r3, #10]
 8002d7c:	109b      	asrs	r3, r3, #2
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	001a      	movs	r2, r3
 8002d82:	231f      	movs	r3, #31
 8002d84:	4013      	ands	r3, r2
 8002d86:	3301      	adds	r3, #1
 8002d88:	0008      	movs	r0, r1
 8002d8a:	187a      	adds	r2, r7, r1
 8002d8c:	7ad2      	ldrb	r2, [r2, #11]
 8002d8e:	00d2      	lsls	r2, r2, #3
 8002d90:	2118      	movs	r1, #24
 8002d92:	400a      	ands	r2, r1
 8002d94:	1839      	adds	r1, r7, r0
 8002d96:	7ac9      	ldrb	r1, [r1, #11]
 8002d98:	0949      	lsrs	r1, r1, #5
 8002d9a:	b2c9      	uxtb	r1, r1
 8002d9c:	1852      	adds	r2, r2, r1
 8002d9e:	3201      	adds	r2, #1
 8002da0:	4353      	muls	r3, r2
 8002da2:	001a      	movs	r2, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8002da8:	232f      	movs	r3, #47	@ 0x2f
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
		break;
 8002db0:	e057      	b.n	8002e62 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002db2:	4b36      	ldr	r3, [pc, #216]	@ (8002e8c <USER_SPI_ioctl+0x320>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	001a      	movs	r2, r3
 8002db8:	2306      	movs	r3, #6
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d053      	beq.n	8002e66 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002dbe:	240c      	movs	r4, #12
 8002dc0:	193a      	adds	r2, r7, r4
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	210b      	movs	r1, #11
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff fecf 	bl	8002b6c <USER_SPI_ioctl>
 8002dce:	1e03      	subs	r3, r0, #0
 8002dd0:	d14b      	bne.n	8002e6a <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002dd2:	193b      	adds	r3, r7, r4
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d105      	bne.n	8002dea <USER_SPI_ioctl+0x27e>
 8002dde:	193b      	adds	r3, r7, r4
 8002de0:	7a9b      	ldrb	r3, [r3, #10]
 8002de2:	001a      	movs	r2, r3
 8002de4:	2340      	movs	r3, #64	@ 0x40
 8002de6:	4013      	ands	r3, r2
 8002de8:	d041      	beq.n	8002e6e <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	623b      	str	r3, [r7, #32]
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8002dfa:	4b24      	ldr	r3, [pc, #144]	@ (8002e8c <USER_SPI_ioctl+0x320>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	001a      	movs	r2, r3
 8002e00:	2308      	movs	r3, #8
 8002e02:	4013      	ands	r3, r2
 8002e04:	d105      	bne.n	8002e12 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 8002e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e08:	025b      	lsls	r3, r3, #9
 8002e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	025b      	lsls	r3, r3, #9
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8002e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e14:	0019      	movs	r1, r3
 8002e16:	2020      	movs	r0, #32
 8002e18:	f7ff fbff 	bl	800261a <send_cmd>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d128      	bne.n	8002e72 <USER_SPI_ioctl+0x306>
 8002e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e22:	0019      	movs	r1, r3
 8002e24:	2021      	movs	r0, #33	@ 0x21
 8002e26:	f7ff fbf8 	bl	800261a <send_cmd>
 8002e2a:	1e03      	subs	r3, r0, #0
 8002e2c:	d121      	bne.n	8002e72 <USER_SPI_ioctl+0x306>
 8002e2e:	2100      	movs	r1, #0
 8002e30:	2026      	movs	r0, #38	@ 0x26
 8002e32:	f7ff fbf2 	bl	800261a <send_cmd>
 8002e36:	1e03      	subs	r3, r0, #0
 8002e38:	d11b      	bne.n	8002e72 <USER_SPI_ioctl+0x306>
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <USER_SPI_ioctl+0x324>)
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f7ff fb2f 	bl	80024a0 <wait_ready>
 8002e42:	1e03      	subs	r3, r0, #0
 8002e44:	d015      	beq.n	8002e72 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8002e46:	232f      	movs	r3, #47	@ 0x2f
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002e4e:	e010      	b.n	8002e72 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8002e50:	232f      	movs	r3, #47	@ 0x2f
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	2204      	movs	r2, #4
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	e00c      	b.n	8002e74 <USER_SPI_ioctl+0x308>
		break;
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	e00a      	b.n	8002e74 <USER_SPI_ioctl+0x308>
		break;
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	e008      	b.n	8002e74 <USER_SPI_ioctl+0x308>
		break;
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	e006      	b.n	8002e74 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8002e66:	46c0      	nop			@ (mov r8, r8)
 8002e68:	e004      	b.n	8002e74 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	e002      	b.n	8002e74 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	e000      	b.n	8002e74 <USER_SPI_ioctl+0x308>
		break;
 8002e72:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 8002e74:	f7ff fb3c 	bl	80024f0 <despiselect>

	return res;
 8002e78:	232f      	movs	r3, #47	@ 0x2f
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	781b      	ldrb	r3, [r3, #0]
}
 8002e7e:	0018      	movs	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b00d      	add	sp, #52	@ 0x34
 8002e84:	bd90      	pop	{r4, r7, pc}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	20000020 	.word	0x20000020
 8002e8c:	200000ad 	.word	0x200000ad
 8002e90:	00007530 	.word	0x00007530

08002e94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	1dfb      	adds	r3, r7, #7
 8002ea0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8002ea2:	2417      	movs	r4, #23
 8002ea4:	193b      	adds	r3, r7, r4
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8002eaa:	2016      	movs	r0, #22
 8002eac:	183b      	adds	r3, r7, r0
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8002eb2:	4b21      	ldr	r3, [pc, #132]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002eb4:	7a5b      	ldrb	r3, [r3, #9]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d136      	bne.n	8002f2a <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002ebe:	7a5b      	ldrb	r3, [r3, #9]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8002eca:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002ecc:	7a5b      	ldrb	r3, [r3, #9]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4a19      	ldr	r2, [pc, #100]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8002edc:	4b16      	ldr	r3, [pc, #88]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002ede:	7a5b      	ldrb	r3, [r3, #9]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	001a      	movs	r2, r3
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002ee6:	189b      	adds	r3, r3, r2
 8002ee8:	1dfa      	adds	r2, r7, #7
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8002eee:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002ef0:	7a5b      	ldrb	r3, [r3, #9]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	b2d1      	uxtb	r1, r2
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f38 <FATFS_LinkDriverEx+0xa4>)
 8002efa:	7251      	strb	r1, [r2, #9]
 8002efc:	183a      	adds	r2, r7, r0
 8002efe:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8002f00:	183b      	adds	r3, r7, r0
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	3330      	adds	r3, #48	@ 0x30
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	223a      	movs	r2, #58	@ 0x3a
 8002f12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3302      	adds	r3, #2
 8002f18:	222f      	movs	r2, #47	@ 0x2f
 8002f1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	3303      	adds	r3, #3
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8002f24:	193b      	adds	r3, r7, r4
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8002f2a:	2317      	movs	r3, #23
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b007      	add	sp, #28
 8002f36:	bd90      	pop	{r4, r7, pc}
 8002f38:	200000b8 	.word	0x200000b8

08002f3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8002f46:	6839      	ldr	r1, [r7, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff ffa1 	bl	8002e94 <FATFS_LinkDriverEx>
 8002f52:	0003      	movs	r3, r0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <memset>:
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	1882      	adds	r2, r0, r2
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d100      	bne.n	8002f66 <memset+0xa>
 8002f64:	4770      	bx	lr
 8002f66:	7019      	strb	r1, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	e7f9      	b.n	8002f60 <memset+0x4>

08002f6c <__libc_init_array>:
 8002f6c:	b570      	push	{r4, r5, r6, lr}
 8002f6e:	2600      	movs	r6, #0
 8002f70:	4c0c      	ldr	r4, [pc, #48]	@ (8002fa4 <__libc_init_array+0x38>)
 8002f72:	4d0d      	ldr	r5, [pc, #52]	@ (8002fa8 <__libc_init_array+0x3c>)
 8002f74:	1b64      	subs	r4, r4, r5
 8002f76:	10a4      	asrs	r4, r4, #2
 8002f78:	42a6      	cmp	r6, r4
 8002f7a:	d109      	bne.n	8002f90 <__libc_init_array+0x24>
 8002f7c:	2600      	movs	r6, #0
 8002f7e:	f000 f819 	bl	8002fb4 <_init>
 8002f82:	4c0a      	ldr	r4, [pc, #40]	@ (8002fac <__libc_init_array+0x40>)
 8002f84:	4d0a      	ldr	r5, [pc, #40]	@ (8002fb0 <__libc_init_array+0x44>)
 8002f86:	1b64      	subs	r4, r4, r5
 8002f88:	10a4      	asrs	r4, r4, #2
 8002f8a:	42a6      	cmp	r6, r4
 8002f8c:	d105      	bne.n	8002f9a <__libc_init_array+0x2e>
 8002f8e:	bd70      	pop	{r4, r5, r6, pc}
 8002f90:	00b3      	lsls	r3, r6, #2
 8002f92:	58eb      	ldr	r3, [r5, r3]
 8002f94:	4798      	blx	r3
 8002f96:	3601      	adds	r6, #1
 8002f98:	e7ee      	b.n	8002f78 <__libc_init_array+0xc>
 8002f9a:	00b3      	lsls	r3, r6, #2
 8002f9c:	58eb      	ldr	r3, [r5, r3]
 8002f9e:	4798      	blx	r3
 8002fa0:	3601      	adds	r6, #1
 8002fa2:	e7f2      	b.n	8002f8a <__libc_init_array+0x1e>
 8002fa4:	0800300c 	.word	0x0800300c
 8002fa8:	0800300c 	.word	0x0800300c
 8002fac:	08003010 	.word	0x08003010
 8002fb0:	0800300c 	.word	0x0800300c

08002fb4 <_init>:
 8002fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fba:	bc08      	pop	{r3}
 8002fbc:	469e      	mov	lr, r3
 8002fbe:	4770      	bx	lr

08002fc0 <_fini>:
 8002fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc6:	bc08      	pop	{r3}
 8002fc8:	469e      	mov	lr, r3
 8002fca:	4770      	bx	lr
