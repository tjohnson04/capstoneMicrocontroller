
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  080077c8  080077c8  000087c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b00  08007b00  00009074  2**0
                  CONTENTS
  4 .ARM          00000000  08007b00  08007b00  00009074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b00  08007b00  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b00  08007b00  00008b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b04  08007b04  00008b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08007b08  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000074  08007b7c  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08007b7c  0000941c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e40  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030af  00000000  00000000  0001aedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  0001df90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aec  00000000  00000000  0001edc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017cc8  00000000  00000000  0001f8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b62  00000000  00000000  0003757c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008861b  00000000  00000000  0004d0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d56f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  000d573c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000d8d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000074 	.word	0x20000074
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080077b0 	.word	0x080077b0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000078 	.word	0x20000078
 80000fc:	080077b0 	.word	0x080077b0

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000410:	b590      	push	{r4, r7, lr}
 8000412:	b089      	sub	sp, #36	@ 0x24
 8000414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	240c      	movs	r4, #12
 8000418:	193b      	adds	r3, r7, r4
 800041a:	0018      	movs	r0, r3
 800041c:	2314      	movs	r3, #20
 800041e:	001a      	movs	r2, r3
 8000420:	2100      	movs	r1, #0
 8000422:	f006 fd47 	bl	8006eb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <MX_GPIO_Init+0x80>)
 8000428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800042a:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <MX_GPIO_Init+0x80>)
 800042c:	2101      	movs	r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	635a      	str	r2, [r3, #52]	@ 0x34
 8000432:	4b17      	ldr	r3, [pc, #92]	@ (8000490 <MX_GPIO_Init+0x80>)
 8000434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000436:	2201      	movs	r2, #1
 8000438:	4013      	ands	r3, r2
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <MX_GPIO_Init+0x80>)
 8000440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000442:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <MX_GPIO_Init+0x80>)
 8000444:	2102      	movs	r1, #2
 8000446:	430a      	orrs	r2, r1
 8000448:	635a      	str	r2, [r3, #52]	@ 0x34
 800044a:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <MX_GPIO_Init+0x80>)
 800044c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800044e:	2202      	movs	r2, #2
 8000450:	4013      	ands	r3, r2
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <MX_GPIO_Init+0x84>)
 8000458:	2200      	movs	r2, #0
 800045a:	2102      	movs	r1, #2
 800045c:	0018      	movs	r0, r3
 800045e:	f000 feeb 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2202      	movs	r2, #2
 8000468:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2201      	movs	r2, #1
 800046e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800047c:	187b      	adds	r3, r7, r1
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <MX_GPIO_Init+0x84>)
 8000480:	0019      	movs	r1, r3
 8000482:	0010      	movs	r0, r2
 8000484:	f000 fd74 	bl	8000f70 <HAL_GPIO_Init>

}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	b009      	add	sp, #36	@ 0x24
 800048e:	bd90      	pop	{r4, r7, pc}
 8000490:	40021000 	.word	0x40021000
 8000494:	50000400 	.word	0x50000400

08000498 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000498:	b40f      	push	{r0, r1, r2, r3}
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80004a0:	2314      	movs	r3, #20
 80004a2:	18fb      	adds	r3, r7, r3
 80004a4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	693a      	ldr	r2, [r7, #16]
 80004aa:	2180      	movs	r1, #128	@ 0x80
 80004ac:	0049      	lsls	r1, r1, #1
 80004ae:	480c      	ldr	r0, [pc, #48]	@ (80004e0 <myprintf+0x48>)
 80004b0:	f006 fcf4 	bl	8006e9c <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80004b4:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <myprintf+0x48>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f7ff fe22 	bl	8000100 <strlen>
 80004bc:	0003      	movs	r3, r0
 80004be:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	b29a      	uxth	r2, r3
 80004c4:	2301      	movs	r3, #1
 80004c6:	425b      	negs	r3, r3
 80004c8:	4905      	ldr	r1, [pc, #20]	@ (80004e0 <myprintf+0x48>)
 80004ca:	4806      	ldr	r0, [pc, #24]	@ (80004e4 <myprintf+0x4c>)
 80004cc:	f002 fbda 	bl	8002c84 <HAL_UART_Transmit>

}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bc80      	pop	{r7}
 80004d8:	bc08      	pop	{r3}
 80004da:	b004      	add	sp, #16
 80004dc:	4718      	bx	r3
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	20000090 	.word	0x20000090
 80004e4:	200001f8 	.word	0x200001f8

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	4c78      	ldr	r4, [pc, #480]	@ (80006cc <main+0x1e4>)
 80004ec:	44a5      	add	sp, r4
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fb4c 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f90e 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f7ff ff8a 	bl	8000410 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004fc:	f000 f958 	bl	80007b0 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000500:	f003 f956 	bl	80037b0 <MX_FATFS_Init>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <main+0x24>
    Error_Handler();
 8000508:	f000 f94c 	bl	80007a4 <Error_Handler>
  }
  MX_USART2_UART_Init();
 800050c:	f000 fa66 	bl	80009dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000510:	4b6f      	ldr	r3, [pc, #444]	@ (80006d0 <main+0x1e8>)
 8000512:	0018      	movs	r0, r3
 8000514:	f7ff ffc0 	bl	8000498 <myprintf>
  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000518:	23fa      	movs	r3, #250	@ 0xfa
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fbbb 	bl	8000c98 <HAL_Delay>
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000522:	4d6c      	ldr	r5, [pc, #432]	@ (80006d4 <main+0x1ec>)
 8000524:	197c      	adds	r4, r7, r5
 8000526:	496c      	ldr	r1, [pc, #432]	@ (80006d8 <main+0x1f0>)
 8000528:	2398      	movs	r3, #152	@ 0x98
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	2201      	movs	r2, #1
 8000530:	0018      	movs	r0, r3
 8000532:	f005 fd69 	bl	8006008 <f_mount>
 8000536:	0003      	movs	r3, r0
 8000538:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 800053a:	197b      	adds	r3, r7, r5
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d008      	beq.n	8000554 <main+0x6c>
		myprintf("f_mount error (%i)\r\n", fres);
 8000542:	197b      	adds	r3, r7, r5
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	4b65      	ldr	r3, [pc, #404]	@ (80006dc <main+0x1f4>)
 8000548:	0011      	movs	r1, r2
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff ffa4 	bl	8000498 <myprintf>
		while(1);
 8000550:	46c0      	nop			@ (mov r8, r8)
 8000552:	e7fd      	b.n	8000550 <main+0x68>
	//Let's get some statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000554:	4d5f      	ldr	r5, [pc, #380]	@ (80006d4 <main+0x1ec>)
 8000556:	197c      	adds	r4, r7, r5
 8000558:	2328      	movs	r3, #40	@ 0x28
 800055a:	18fa      	adds	r2, r7, r3
 800055c:	232c      	movs	r3, #44	@ 0x2c
 800055e:	18f9      	adds	r1, r7, r3
 8000560:	4b5d      	ldr	r3, [pc, #372]	@ (80006d8 <main+0x1f0>)
 8000562:	0018      	movs	r0, r3
 8000564:	f006 fb08 	bl	8006b78 <f_getfree>
 8000568:	0003      	movs	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 800056c:	197b      	adds	r3, r7, r5
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d008      	beq.n	8000586 <main+0x9e>
	myprintf("f_getfree error (%i)\r\n", fres);
 8000574:	197b      	adds	r3, r7, r5
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	4b59      	ldr	r3, [pc, #356]	@ (80006e0 <main+0x1f8>)
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff ff8b 	bl	8000498 <myprintf>
	while(1);
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	e7fd      	b.n	8000582 <main+0x9a>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	3b02      	subs	r3, #2
 800058c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800058e:	8952      	ldrh	r2, [r2, #10]
 8000590:	4353      	muls	r3, r2
 8000592:	2193      	movs	r1, #147	@ 0x93
 8000594:	00c9      	lsls	r1, r1, #3
 8000596:	187a      	adds	r2, r7, r1
 8000598:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 800059a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800059c:	895b      	ldrh	r3, [r3, #10]
 800059e:	001a      	movs	r2, r3
 80005a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005a2:	4353      	muls	r3, r2
 80005a4:	4a4f      	ldr	r2, [pc, #316]	@ (80006e4 <main+0x1fc>)
 80005a6:	18b8      	adds	r0, r7, r2
 80005a8:	6003      	str	r3, [r0, #0]

	myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	0859      	lsrs	r1, r3, #1
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	085a      	lsrs	r2, r3, #1
 80005b6:	4b4c      	ldr	r3, [pc, #304]	@ (80006e8 <main+0x200>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f7ff ff6d 	bl	8000498 <myprintf>

	//Now let's try to open file "test.txt"
	fres = f_open(&fil, "test.txt", FA_READ);
 80005be:	4d45      	ldr	r5, [pc, #276]	@ (80006d4 <main+0x1ec>)
 80005c0:	197c      	adds	r4, r7, r5
 80005c2:	494a      	ldr	r1, [pc, #296]	@ (80006ec <main+0x204>)
 80005c4:	2330      	movs	r3, #48	@ 0x30
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	2201      	movs	r2, #1
 80005ca:	0018      	movs	r0, r3
 80005cc:	f005 fd68 	bl	80060a0 <f_open>
 80005d0:	0003      	movs	r3, r0
 80005d2:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 80005d4:	197b      	adds	r3, r7, r5
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d005      	beq.n	80005e8 <main+0x100>
	myprintf("f_open error (%i)\r\n");
 80005dc:	4b44      	ldr	r3, [pc, #272]	@ (80006f0 <main+0x208>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f7ff ff5a 	bl	8000498 <myprintf>
	while(1);
 80005e4:	46c0      	nop			@ (mov r8, r8)
 80005e6:	e7fd      	b.n	80005e4 <main+0xfc>
	}
	myprintf("I was able to open 'test.txt' for reading!\r\n");
 80005e8:	4b42      	ldr	r3, [pc, #264]	@ (80006f4 <main+0x20c>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f7ff ff54 	bl	8000498 <myprintf>
	//Read 30 bytes from "test.txt" on the SD card
	BYTE readBuf[30];

	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80005f0:	2330      	movs	r3, #48	@ 0x30
 80005f2:	18fa      	adds	r2, r7, r3
 80005f4:	2408      	movs	r4, #8
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	211e      	movs	r1, #30
 80005fa:	0018      	movs	r0, r3
 80005fc:	f006 fb79 	bl	8006cf2 <f_gets>
 8000600:	0003      	movs	r3, r0
 8000602:	2292      	movs	r2, #146	@ 0x92
 8000604:	00d2      	lsls	r2, r2, #3
 8000606:	18b9      	adds	r1, r7, r2
 8000608:	600b      	str	r3, [r1, #0]
	if(rres != 0) {
 800060a:	18bb      	adds	r3, r7, r2
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d006      	beq.n	8000620 <main+0x138>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000612:	193a      	adds	r2, r7, r4
 8000614:	4b38      	ldr	r3, [pc, #224]	@ (80006f8 <main+0x210>)
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff ff3d 	bl	8000498 <myprintf>
 800061e:	e007      	b.n	8000630 <main+0x148>
	} else {
	myprintf("f_gets error (%i)\r\n", fres);
 8000620:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <main+0x1ec>)
 8000622:	18fb      	adds	r3, r7, r3
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	4b35      	ldr	r3, [pc, #212]	@ (80006fc <main+0x214>)
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ff34 	bl	8000498 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 8000630:	2530      	movs	r5, #48	@ 0x30
 8000632:	197b      	adds	r3, r7, r5
 8000634:	0018      	movs	r0, r3
 8000636:	f006 fa6b 	bl	8006b10 <f_close>

	//Now let's try and write a file "write.txt"
	fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800063a:	4e26      	ldr	r6, [pc, #152]	@ (80006d4 <main+0x1ec>)
 800063c:	19bc      	adds	r4, r7, r6
 800063e:	4930      	ldr	r1, [pc, #192]	@ (8000700 <main+0x218>)
 8000640:	197b      	adds	r3, r7, r5
 8000642:	221a      	movs	r2, #26
 8000644:	0018      	movs	r0, r3
 8000646:	f005 fd2b 	bl	80060a0 <f_open>
 800064a:	0003      	movs	r3, r0
 800064c:	7023      	strb	r3, [r4, #0]
	if(fres == FR_OK) {
 800064e:	19bb      	adds	r3, r7, r6
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d104      	bne.n	8000660 <main+0x178>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000656:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <main+0x21c>)
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff ff1d 	bl	8000498 <myprintf>
 800065e:	e007      	b.n	8000670 <main+0x188>
	} else {
	myprintf("f_open error (%i)\r\n", fres);
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <main+0x1ec>)
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	781a      	ldrb	r2, [r3, #0]
 8000666:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <main+0x208>)
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff ff14 	bl	8000498 <myprintf>
	}

	//Copy in a string
	memcpy((char*)readBuf, "a new file is made!", 19);
 8000670:	4925      	ldr	r1, [pc, #148]	@ (8000708 <main+0x220>)
 8000672:	2508      	movs	r5, #8
 8000674:	197b      	adds	r3, r7, r5
 8000676:	2213      	movs	r2, #19
 8000678:	0018      	movs	r0, r3
 800067a:	f006 fc4f 	bl	8006f1c <memcpy>
	UINT bytesWrote;
	fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800067e:	4e15      	ldr	r6, [pc, #84]	@ (80006d4 <main+0x1ec>)
 8000680:	19bc      	adds	r4, r7, r6
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	1979      	adds	r1, r7, r5
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	18b8      	adds	r0, r7, r2
 800068a:	2213      	movs	r2, #19
 800068c:	f006 f83d 	bl	800670a <f_write>
 8000690:	0003      	movs	r3, r0
 8000692:	7023      	strb	r3, [r4, #0]
	if(fres == FR_OK) {
 8000694:	19bb      	adds	r3, r7, r6
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d106      	bne.n	80006aa <main+0x1c2>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <main+0x224>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f7ff fef8 	bl	8000498 <myprintf>
 80006a8:	e003      	b.n	80006b2 <main+0x1ca>
	} else {
	myprintf("f_write error (%i)\r\n");
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <main+0x228>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff fef3 	bl	8000498 <myprintf>
	}

	//Be a tidy kiwi - don't forget to close your file!
	f_close(&fil);
 80006b2:	2330      	movs	r3, #48	@ 0x30
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	0018      	movs	r0, r3
 80006b8:	f006 fa2a 	bl	8006b10 <f_close>

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <main+0x1f0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	0019      	movs	r1, r3
 80006c2:	2000      	movs	r0, #0
 80006c4:	f005 fca0 	bl	8006008 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	e7fd      	b.n	80006c8 <main+0x1e0>
 80006cc:	fffffb5c 	.word	0xfffffb5c
 80006d0:	080077c8 	.word	0x080077c8
 80006d4:	0000049f 	.word	0x0000049f
 80006d8:	080077e8 	.word	0x080077e8
 80006dc:	080077ec 	.word	0x080077ec
 80006e0:	08007804 	.word	0x08007804
 80006e4:	00000494 	.word	0x00000494
 80006e8:	0800781c 	.word	0x0800781c
 80006ec:	08007864 	.word	0x08007864
 80006f0:	08007870 	.word	0x08007870
 80006f4:	08007884 	.word	0x08007884
 80006f8:	080078b4 	.word	0x080078b4
 80006fc:	080078e0 	.word	0x080078e0
 8000700:	080078f4 	.word	0x080078f4
 8000704:	08007900 	.word	0x08007900
 8000708:	08007930 	.word	0x08007930
 800070c:	08007944 	.word	0x08007944
 8000710:	08007968 	.word	0x08007968

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b093      	sub	sp, #76	@ 0x4c
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	2414      	movs	r4, #20
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2334      	movs	r3, #52	@ 0x34
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f006 fbc5 	bl	8006eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	0018      	movs	r0, r3
 800072e:	2310      	movs	r3, #16
 8000730:	001a      	movs	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	f006 fbbe 	bl	8006eb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000738:	2380      	movs	r3, #128	@ 0x80
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	0018      	movs	r0, r3
 800073e:	f000 fd99 	bl	8001274 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2202      	movs	r2, #2
 8000746:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2240      	movs	r2, #64	@ 0x40
 800075a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fdd1 	bl	800130c <HAL_RCC_OscConfig>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800076e:	f000 f819 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2207      	movs	r2, #7
 8000776:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	2100      	movs	r1, #0
 800078e:	0018      	movs	r0, r3
 8000790:	f001 f8cc 	bl	800192c <HAL_RCC_ClockConfig>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000798:	f000 f804 	bl	80007a4 <Error_Handler>
  }
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b013      	add	sp, #76	@ 0x4c
 80007a2:	bd90      	pop	{r4, r7, pc}

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000828 <MX_SPI1_Init+0x78>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007bc:	2282      	movs	r2, #130	@ 0x82
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b18      	ldr	r3, [pc, #96]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007ca:	22e0      	movs	r2, #224	@ 0xe0
 80007cc:	00d2      	lsls	r2, r2, #3
 80007ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d6:	4b13      	ldr	r3, [pc, #76]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007dc:	4b11      	ldr	r3, [pc, #68]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007de:	2280      	movs	r2, #128	@ 0x80
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007e6:	2228      	movs	r2, #40	@ 0x28
 80007e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007fc:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <MX_SPI1_Init+0x74>)
 80007fe:	2207      	movs	r2, #7
 8000800:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000802:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_SPI1_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000808:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <MX_SPI1_Init+0x74>)
 800080a:	2208      	movs	r2, #8
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800080e:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <MX_SPI1_Init+0x74>)
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fb69 	bl	8001ee8 <HAL_SPI_Init>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f7ff ffc3 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000190 	.word	0x20000190
 8000828:	40013000 	.word	0x40013000

0800082c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b08b      	sub	sp, #44	@ 0x2c
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	2414      	movs	r4, #20
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	2314      	movs	r3, #20
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f006 fb38 	bl	8006eb4 <memset>
  if(spiHandle->Instance==SPI1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1f      	ldr	r2, [pc, #124]	@ (80008c8 <HAL_SPI_MspInit+0x9c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d138      	bne.n	80008c0 <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800084e:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <HAL_SPI_MspInit+0xa0>)
 8000850:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000852:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <HAL_SPI_MspInit+0xa0>)
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	0149      	lsls	r1, r1, #5
 8000858:	430a      	orrs	r2, r1
 800085a:	641a      	str	r2, [r3, #64]	@ 0x40
 800085c:	4b1b      	ldr	r3, [pc, #108]	@ (80008cc <HAL_SPI_MspInit+0xa0>)
 800085e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	015b      	lsls	r3, r3, #5
 8000864:	4013      	ands	r3, r2
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <HAL_SPI_MspInit+0xa0>)
 800086c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086e:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <HAL_SPI_MspInit+0xa0>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <HAL_SPI_MspInit+0xa0>)
 8000878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	22e0      	movs	r2, #224	@ 0xe0
 8000888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2202      	movs	r2, #2
 800088e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	187a      	adds	r2, r7, r1
 80008a4:	23a0      	movs	r3, #160	@ 0xa0
 80008a6:	05db      	lsls	r3, r3, #23
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fb60 	bl	8000f70 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2019      	movs	r0, #25
 80008b6:	f000 fabf 	bl	8000e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008ba:	2019      	movs	r0, #25
 80008bc:	f000 fad1 	bl	8000e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b00b      	add	sp, #44	@ 0x2c
 80008c6:	bd90      	pop	{r4, r7, pc}
 80008c8:	40013000 	.word	0x40013000
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <HAL_MspInit+0x44>)
 80008d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <HAL_MspInit+0x44>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80008e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <HAL_MspInit+0x44>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <HAL_MspInit+0x44>)
 80008f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <HAL_MspInit+0x44>)
 80008f4:	2180      	movs	r1, #128	@ 0x80
 80008f6:	0549      	lsls	r1, r1, #21
 80008f8:	430a      	orrs	r2, r1
 80008fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_MspInit+0x44>)
 80008fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000900:	2380      	movs	r3, #128	@ 0x80
 8000902:	055b      	lsls	r3, r3, #21
 8000904:	4013      	ands	r3, r2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b002      	add	sp, #8
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	40021000 	.word	0x40021000

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	e7fd      	b.n	800091c <NMI_Handler+0x4>

08000920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000924:	46c0      	nop			@ (mov r8, r8)
 8000926:	e7fd      	b.n	8000924 <HardFault_Handler+0x4>

08000928 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800092c:	46c0      	nop			@ (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000940:	f000 f98e 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000950:	4b03      	ldr	r3, [pc, #12]	@ (8000960 <SPI1_IRQHandler+0x14>)
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fec2 	bl	80026dc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	20000190 	.word	0x20000190

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	@ (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f006 fa96 	bl	8006ec4 <__errno>
 8000998:	0003      	movs	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	2301      	movs	r3, #1
 80009a0:	425b      	negs	r3, r3
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	18d2      	adds	r2, r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <_sbrk+0x64>)
 80009b4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b006      	add	sp, #24
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20009000 	.word	0x20009000
 80009c4:	00000400 	.word	0x00000400
 80009c8:	200001f4 	.word	0x200001f4
 80009cc:	20000420 	.word	0x20000420

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b23      	ldr	r3, [pc, #140]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 80009e2:	4a24      	ldr	r2, [pc, #144]	@ (8000a74 <MX_USART2_UART_Init+0x98>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b22      	ldr	r3, [pc, #136]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 80009e8:	22e1      	movs	r2, #225	@ 0xe1
 80009ea:	0252      	lsls	r2, r2, #9
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1b      	ldr	r3, [pc, #108]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 f8d6 	bl	8002bd8 <HAL_UART_Init>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f7ff feb8 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f002 fdd9 	bl	80035f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f7ff feaf 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a48:	2100      	movs	r1, #0
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fe10 	bl	8003670 <HAL_UARTEx_SetRxFifoThreshold>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f7ff fea6 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <MX_USART2_UART_Init+0x94>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 fd8e 	bl	800357c <HAL_UARTEx_DisableFifoMode>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f7ff fe9e 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	200001f8 	.word	0x200001f8
 8000a74:	40004400 	.word	0x40004400

08000a78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b091      	sub	sp, #68	@ 0x44
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	232c      	movs	r3, #44	@ 0x2c
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f006 fa12 	bl	8006eb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	2410      	movs	r4, #16
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	0018      	movs	r0, r3
 8000a96:	231c      	movs	r3, #28
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f006 fa0a 	bl	8006eb4 <memset>
  if(uartHandle->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <HAL_UART_MspInit+0xb8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d13e      	bne.n	8000b28 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2202      	movs	r2, #2
 8000aae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f001 f8e1 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ac2:	f7ff fe6f 	bl	80007a4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aca:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000acc:	2180      	movs	r1, #128	@ 0x80
 8000ace:	0289      	lsls	r1, r1, #10
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ad4:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad8:	2380      	movs	r3, #128	@ 0x80
 8000ada:	029b      	lsls	r3, r3, #10
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <HAL_UART_MspInit+0xbc>)
 8000af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000afa:	212c      	movs	r1, #44	@ 0x2c
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2202      	movs	r2, #2
 8000b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2201      	movs	r2, #1
 8000b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	23a0      	movs	r3, #160	@ 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fa24 	bl	8000f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b011      	add	sp, #68	@ 0x44
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40021000 	.word	0x40021000

08000b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b38:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b3c:	f7ff ff48 	bl	80009d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopForever+0xe>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopForever+0x16>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b66:	f006 f9b3 	bl	8006ed0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b6a:	f7ff fcbd 	bl	80004e8 <main>

08000b6e <LoopForever>:

LoopForever:
  b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   r0, =_estack
 8000b70:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b7c:	08007b08 	.word	0x08007b08
  ldr r2, =_sbss
 8000b80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b84:	2000041c 	.word	0x2000041c

08000b88 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <HAL_Init+0x3c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <HAL_Init+0x3c>)
 8000b9e:	2180      	movs	r1, #128	@ 0x80
 8000ba0:	0049      	lsls	r1, r1, #1
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	f000 f810 	bl	8000bcc <HAL_InitTick>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d003      	beq.n	8000bb8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	e001      	b.n	8000bbc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000bb8:	f7ff fe8a 	bl	80008d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b002      	add	sp, #8
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <HAL_InitTick+0x88>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d02b      	beq.n	8000c3c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000be4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_InitTick+0x8c>)
 8000be6:	681c      	ldr	r4, [r3, #0]
 8000be8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <HAL_InitTick+0x88>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	0019      	movs	r1, r3
 8000bee:	23fa      	movs	r3, #250	@ 0xfa
 8000bf0:	0098      	lsls	r0, r3, #2
 8000bf2:	f7ff fa97 	bl	8000124 <__udivsi3>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	f7ff fa92 	bl	8000124 <__udivsi3>
 8000c00:	0003      	movs	r3, r0
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 f93d 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c08:	1e03      	subs	r3, r0, #0
 8000c0a:	d112      	bne.n	8000c32 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d80a      	bhi.n	8000c28 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
 8000c18:	2200      	movs	r2, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 f90c 	bl	8000e38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_InitTick+0x90>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	e00d      	b.n	8000c44 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e008      	b.n	8000c44 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c32:	230f      	movs	r3, #15
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
 8000c3a:	e003      	b.n	8000c44 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3c:	230f      	movs	r3, #15
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c44:	230f      	movs	r3, #15
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	781b      	ldrb	r3, [r3, #0]
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b005      	add	sp, #20
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_IncTick+0x1c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	001a      	movs	r2, r3
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	18d2      	adds	r2, r2, r3
 8000c70:	4b03      	ldr	r3, [pc, #12]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c72:	601a      	str	r2, [r3, #0]
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	2000028c 	.word	0x2000028c

08000c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b02      	ldr	r3, [pc, #8]	@ (8000c94 <HAL_GetTick+0x10>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	2000028c 	.word	0x2000028c

08000c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff fff0 	bl	8000c84 <HAL_GetTick>
 8000ca4:	0003      	movs	r3, r0
 8000ca6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	d005      	beq.n	8000cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_Delay+0x44>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	189b      	adds	r3, r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	f7ff ffe0 	bl	8000c84 <HAL_GetTick>
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8f7      	bhi.n	8000cc0 <HAL_Delay+0x28>
  {
  }
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cf2:	d809      	bhi.n	8000d08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	231f      	movs	r3, #31
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <__NVIC_EnableIRQ+0x30>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	4091      	lsls	r1, r2
 8000d04:	000a      	movs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d28:	d828      	bhi.n	8000d7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d2c:	1dfb      	adds	r3, r7, #7
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	33c0      	adds	r3, #192	@ 0xc0
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	589b      	ldr	r3, [r3, r2]
 8000d3a:	1dfa      	adds	r2, r7, #7
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2203      	movs	r2, #3
 8000d42:	400a      	ands	r2, r1
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	21ff      	movs	r1, #255	@ 0xff
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	43d2      	mvns	r2, r2
 8000d4e:	401a      	ands	r2, r3
 8000d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	019b      	lsls	r3, r3, #6
 8000d56:	22ff      	movs	r2, #255	@ 0xff
 8000d58:	401a      	ands	r2, r3
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2303      	movs	r3, #3
 8000d62:	4003      	ands	r3, r0
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	481f      	ldr	r0, [pc, #124]	@ (8000de8 <__NVIC_SetPriority+0xd4>)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	430a      	orrs	r2, r1
 8000d74:	33c0      	adds	r3, #192	@ 0xc0
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d7a:	e031      	b.n	8000de0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <__NVIC_SetPriority+0xd8>)
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	0019      	movs	r1, r3
 8000d84:	230f      	movs	r3, #15
 8000d86:	400b      	ands	r3, r1
 8000d88:	3b08      	subs	r3, #8
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	3306      	adds	r3, #6
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	18d3      	adds	r3, r2, r3
 8000d92:	3304      	adds	r3, #4
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	1dfa      	adds	r2, r7, #7
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	400a      	ands	r2, r1
 8000da0:	00d2      	lsls	r2, r2, #3
 8000da2:	21ff      	movs	r1, #255	@ 0xff
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	43d2      	mvns	r2, r2
 8000daa:	401a      	ands	r2, r3
 8000dac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	22ff      	movs	r2, #255	@ 0xff
 8000db4:	401a      	ands	r2, r3
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	4003      	ands	r3, r0
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc4:	4809      	ldr	r0, [pc, #36]	@ (8000dec <__NVIC_SetPriority+0xd8>)
 8000dc6:	1dfb      	adds	r3, r7, #7
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	001c      	movs	r4, r3
 8000dcc:	230f      	movs	r3, #15
 8000dce:	4023      	ands	r3, r4
 8000dd0:	3b08      	subs	r3, #8
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	3306      	adds	r3, #6
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	18c3      	adds	r3, r0, r3
 8000ddc:	3304      	adds	r3, #4
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b003      	add	sp, #12
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	1e5a      	subs	r2, r3, #1
 8000dfc:	2380      	movs	r3, #128	@ 0x80
 8000dfe:	045b      	lsls	r3, r3, #17
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d301      	bcc.n	8000e08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e04:	2301      	movs	r3, #1
 8000e06:	e010      	b.n	8000e2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e08:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <SysTick_Config+0x44>)
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e10:	2301      	movs	r3, #1
 8000e12:	425b      	negs	r3, r3
 8000e14:	2103      	movs	r1, #3
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff7c 	bl	8000d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <SysTick_Config+0x44>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <SysTick_Config+0x44>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	210f      	movs	r1, #15
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	1c02      	adds	r2, r0, #0
 8000e48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b25b      	sxtb	r3, r3
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff ff5d 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	0002      	movs	r2, r0
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ff33 	bl	8000ce0 <__NVIC_EnableIRQ>
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b002      	add	sp, #8
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ffaf 	bl	8000df0 <SysTick_Config>
 8000e92:	0003      	movs	r3, r0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea4:	210f      	movs	r1, #15
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2225      	movs	r2, #37	@ 0x25
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d006      	beq.n	8000ec6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e049      	b.n	8000f5a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	210e      	movs	r1, #14
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	438a      	bics	r2, r1
 8000ee4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef0:	491d      	ldr	r1, [pc, #116]	@ (8000f68 <HAL_DMA_Abort_IT+0xcc>)
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <HAL_DMA_Abort_IT+0xd0>)
 8000ef8:	6859      	ldr	r1, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	221c      	movs	r2, #28
 8000f00:	4013      	ands	r3, r2
 8000f02:	2201      	movs	r2, #1
 8000f04:	409a      	lsls	r2, r3
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_DMA_Abort_IT+0xd0>)
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00c      	beq.n	8000f38 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f28:	490f      	ldr	r1, [pc, #60]	@ (8000f68 <HAL_DMA_Abort_IT+0xcc>)
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2225      	movs	r2, #37	@ 0x25
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2224      	movs	r2, #36	@ 0x24
 8000f44:	2100      	movs	r1, #0
 8000f46:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d004      	beq.n	8000f5a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	0010      	movs	r0, r2
 8000f58:	4798      	blx	r3
    }
  }
  return status;
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b004      	add	sp, #16
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	fffffeff 	.word	0xfffffeff
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7e:	e147      	b.n	8001210 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	4091      	lsls	r1, r2
 8000f8a:	000a      	movs	r2, r1
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d100      	bne.n	8000f98 <HAL_GPIO_Init+0x28>
 8000f96:	e138      	b.n	800120a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d005      	beq.n	8000fb0 <HAL_GPIO_Init+0x40>
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d130      	bne.n	8001012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	2203      	movs	r2, #3
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	0013      	movs	r3, r2
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	0013      	movs	r3, r2
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
 8000fec:	0013      	movs	r3, r2
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2203      	movs	r2, #3
 8001018:	4013      	ands	r3, r2
 800101a:	2b03      	cmp	r3, #3
 800101c:	d017      	beq.n	800104e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2203      	movs	r2, #3
 8001054:	4013      	ands	r3, r2
 8001056:	2b02      	cmp	r3, #2
 8001058:	d123      	bne.n	80010a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	58d3      	ldr	r3, [r2, r3]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2207      	movs	r2, #7
 800106c:	4013      	ands	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	409a      	lsls	r2, r3
 8001074:	0013      	movs	r3, r2
 8001076:	43da      	mvns	r2, r3
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4013      	ands	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2107      	movs	r1, #7
 8001086:	400b      	ands	r3, r1
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	6939      	ldr	r1, [r7, #16]
 80010a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2203      	movs	r2, #3
 80010c0:	401a      	ands	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	23c0      	movs	r3, #192	@ 0xc0
 80010dc:	029b      	lsls	r3, r3, #10
 80010de:	4013      	ands	r3, r2
 80010e0:	d100      	bne.n	80010e4 <HAL_GPIO_Init+0x174>
 80010e2:	e092      	b.n	800120a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80010e4:	4a50      	ldr	r2, [pc, #320]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3318      	adds	r3, #24
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	589b      	ldr	r3, [r3, r2]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2203      	movs	r2, #3
 80010f6:	4013      	ands	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	220f      	movs	r2, #15
 80010fc:	409a      	lsls	r2, r3
 80010fe:	0013      	movs	r3, r2
 8001100:	43da      	mvns	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	23a0      	movs	r3, #160	@ 0xa0
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	429a      	cmp	r2, r3
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x1ca>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a45      	ldr	r2, [pc, #276]	@ (800122c <HAL_GPIO_Init+0x2bc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x1c6>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a44      	ldr	r2, [pc, #272]	@ (8001230 <HAL_GPIO_Init+0x2c0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x1c2>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a43      	ldr	r2, [pc, #268]	@ (8001234 <HAL_GPIO_Init+0x2c4>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x1be>
 800112a:	2303      	movs	r3, #3
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x1cc>
 800112e:	2305      	movs	r3, #5
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x1cc>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x1cc>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x1cc>
 800113a:	2300      	movs	r3, #0
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	2103      	movs	r1, #3
 8001140:	400a      	ands	r2, r1
 8001142:	00d2      	lsls	r2, r2, #3
 8001144:	4093      	lsls	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800114c:	4936      	ldr	r1, [pc, #216]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3318      	adds	r3, #24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800115a:	4b33      	ldr	r3, [pc, #204]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43da      	mvns	r2, r3
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	2380      	movs	r3, #128	@ 0x80
 8001170:	035b      	lsls	r3, r3, #13
 8001172:	4013      	ands	r3, r2
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800117e:	4b2a      	ldr	r3, [pc, #168]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001184:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43da      	mvns	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	039b      	lsls	r3, r3, #14
 800119c:	4013      	ands	r3, r2
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 80011b0:	2384      	movs	r3, #132	@ 0x84
 80011b2:	58d3      	ldr	r3, [r2, r3]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	43da      	mvns	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4013      	ands	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	2380      	movs	r3, #128	@ 0x80
 80011c6:	029b      	lsls	r3, r3, #10
 80011c8:	4013      	ands	r3, r2
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011d4:	4914      	ldr	r1, [pc, #80]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 80011d6:	2284      	movs	r2, #132	@ 0x84
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 80011de:	2380      	movs	r3, #128	@ 0x80
 80011e0:	58d3      	ldr	r3, [r2, r3]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	2380      	movs	r3, #128	@ 0x80
 80011f4:	025b      	lsls	r3, r3, #9
 80011f6:	4013      	ands	r3, r2
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001202:	4909      	ldr	r1, [pc, #36]	@ (8001228 <HAL_GPIO_Init+0x2b8>)
 8001204:	2280      	movs	r2, #128	@ 0x80
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	40da      	lsrs	r2, r3
 8001218:	1e13      	subs	r3, r2, #0
 800121a:	d000      	beq.n	800121e <HAL_GPIO_Init+0x2ae>
 800121c:	e6b0      	b.n	8000f80 <HAL_GPIO_Init+0x10>
  }
}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	46c0      	nop			@ (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	b006      	add	sp, #24
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021800 	.word	0x40021800
 800122c:	50000400 	.word	0x50000400
 8001230:	50000800 	.word	0x50000800
 8001234:	50000c00 	.word	0x50000c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	0008      	movs	r0, r1
 8001242:	0011      	movs	r1, r2
 8001244:	1cbb      	adds	r3, r7, #2
 8001246:	1c02      	adds	r2, r0, #0
 8001248:	801a      	strh	r2, [r3, #0]
 800124a:	1c7b      	adds	r3, r7, #1
 800124c:	1c0a      	adds	r2, r1, #0
 800124e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001250:	1c7b      	adds	r3, r7, #1
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d004      	beq.n	8001262 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001258:	1cbb      	adds	r3, r7, #2
 800125a:	881a      	ldrh	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001262:	1cbb      	adds	r3, r7, #2
 8001264:	881a      	ldrh	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800127c:	4b19      	ldr	r3, [pc, #100]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a19      	ldr	r2, [pc, #100]	@ (80012e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001282:	4013      	ands	r3, r2
 8001284:	0019      	movs	r1, r3
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	429a      	cmp	r2, r3
 8001296:	d11f      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	0013      	movs	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	189b      	adds	r3, r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4912      	ldr	r1, [pc, #72]	@ (80012f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f7fe ff3c 	bl	8000124 <__udivsi3>
 80012ac:	0003      	movs	r3, r0
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012b2:	e008      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e001      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e009      	b.n	80012da <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012c6:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	401a      	ands	r2, r3
 80012d0:	2380      	movs	r3, #128	@ 0x80
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d0ed      	beq.n	80012b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	0018      	movs	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	b004      	add	sp, #16
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	40007000 	.word	0x40007000
 80012e8:	fffff9ff 	.word	0xfffff9ff
 80012ec:	20000000 	.word	0x20000000
 80012f0:	000f4240 	.word	0x000f4240

080012f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	23e0      	movs	r3, #224	@ 0xe0
 80012fe:	01db      	lsls	r3, r3, #7
 8001300:	4013      	ands	r3, r2
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e2f3      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2201      	movs	r2, #1
 8001324:	4013      	ands	r3, r2
 8001326:	d100      	bne.n	800132a <HAL_RCC_OscConfig+0x1e>
 8001328:	e07c      	b.n	8001424 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132a:	4bc3      	ldr	r3, [pc, #780]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2238      	movs	r2, #56	@ 0x38
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001334:	4bc0      	ldr	r3, [pc, #768]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	2203      	movs	r2, #3
 800133a:	4013      	ands	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b10      	cmp	r3, #16
 8001342:	d102      	bne.n	800134a <HAL_RCC_OscConfig+0x3e>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d002      	beq.n	8001350 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b08      	cmp	r3, #8
 800134e:	d10b      	bne.n	8001368 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001350:	4bb9      	ldr	r3, [pc, #740]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	029b      	lsls	r3, r3, #10
 8001358:	4013      	ands	r3, r2
 800135a:	d062      	beq.n	8001422 <HAL_RCC_OscConfig+0x116>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d15e      	bne.n	8001422 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e2ce      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	429a      	cmp	r2, r3
 8001372:	d107      	bne.n	8001384 <HAL_RCC_OscConfig+0x78>
 8001374:	4bb0      	ldr	r3, [pc, #704]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4baf      	ldr	r3, [pc, #700]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800137a:	2180      	movs	r1, #128	@ 0x80
 800137c:	0249      	lsls	r1, r1, #9
 800137e:	430a      	orrs	r2, r1
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e020      	b.n	80013c6 <HAL_RCC_OscConfig+0xba>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	23a0      	movs	r3, #160	@ 0xa0
 800138a:	02db      	lsls	r3, r3, #11
 800138c:	429a      	cmp	r2, r3
 800138e:	d10e      	bne.n	80013ae <HAL_RCC_OscConfig+0xa2>
 8001390:	4ba9      	ldr	r3, [pc, #676]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4ba8      	ldr	r3, [pc, #672]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001396:	2180      	movs	r1, #128	@ 0x80
 8001398:	02c9      	lsls	r1, r1, #11
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	4ba6      	ldr	r3, [pc, #664]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4ba5      	ldr	r3, [pc, #660]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	2180      	movs	r1, #128	@ 0x80
 80013a6:	0249      	lsls	r1, r1, #9
 80013a8:	430a      	orrs	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e00b      	b.n	80013c6 <HAL_RCC_OscConfig+0xba>
 80013ae:	4ba2      	ldr	r3, [pc, #648]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	4ba1      	ldr	r3, [pc, #644]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80013b4:	49a1      	ldr	r1, [pc, #644]	@ (800163c <HAL_RCC_OscConfig+0x330>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	4b9f      	ldr	r3, [pc, #636]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b9e      	ldr	r3, [pc, #632]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80013c0:	499f      	ldr	r1, [pc, #636]	@ (8001640 <HAL_RCC_OscConfig+0x334>)
 80013c2:	400a      	ands	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d014      	beq.n	80013f8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fc59 	bl	8000c84 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc54 	bl	8000c84 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e28d      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ea:	4b93      	ldr	r3, [pc, #588]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	029b      	lsls	r3, r3, #10
 80013f2:	4013      	ands	r3, r2
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xcc>
 80013f6:	e015      	b.n	8001424 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc44 	bl	8000c84 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001402:	f7ff fc3f 	bl	8000c84 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b64      	cmp	r3, #100	@ 0x64
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e278      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001414:	4b88      	ldr	r3, [pc, #544]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	2380      	movs	r3, #128	@ 0x80
 800141a:	029b      	lsls	r3, r3, #10
 800141c:	4013      	ands	r3, r2
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0xf6>
 8001420:	e000      	b.n	8001424 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001422:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2202      	movs	r2, #2
 800142a:	4013      	ands	r3, r2
 800142c:	d100      	bne.n	8001430 <HAL_RCC_OscConfig+0x124>
 800142e:	e099      	b.n	8001564 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001430:	4b81      	ldr	r3, [pc, #516]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2238      	movs	r2, #56	@ 0x38
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143a:	4b7f      	ldr	r3, [pc, #508]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2203      	movs	r2, #3
 8001440:	4013      	ands	r3, r2
 8001442:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b10      	cmp	r3, #16
 8001448:	d102      	bne.n	8001450 <HAL_RCC_OscConfig+0x144>
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d002      	beq.n	8001456 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d135      	bne.n	80014c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001456:	4b78      	ldr	r3, [pc, #480]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	2380      	movs	r3, #128	@ 0x80
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4013      	ands	r3, r2
 8001460:	d005      	beq.n	800146e <HAL_RCC_OscConfig+0x162>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e24b      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146e:	4b72      	ldr	r3, [pc, #456]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4a74      	ldr	r2, [pc, #464]	@ (8001644 <HAL_RCC_OscConfig+0x338>)
 8001474:	4013      	ands	r3, r2
 8001476:	0019      	movs	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	021a      	lsls	r2, r3, #8
 800147e:	4b6e      	ldr	r3, [pc, #440]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001480:	430a      	orrs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d112      	bne.n	80014b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800148a:	4b6b      	ldr	r3, [pc, #428]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a6e      	ldr	r2, [pc, #440]	@ (8001648 <HAL_RCC_OscConfig+0x33c>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	4b67      	ldr	r3, [pc, #412]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800149e:	4b66      	ldr	r3, [pc, #408]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	0adb      	lsrs	r3, r3, #11
 80014a4:	2207      	movs	r2, #7
 80014a6:	4013      	ands	r3, r2
 80014a8:	4a68      	ldr	r2, [pc, #416]	@ (800164c <HAL_RCC_OscConfig+0x340>)
 80014aa:	40da      	lsrs	r2, r3
 80014ac:	4b68      	ldr	r3, [pc, #416]	@ (8001650 <HAL_RCC_OscConfig+0x344>)
 80014ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014b0:	4b68      	ldr	r3, [pc, #416]	@ (8001654 <HAL_RCC_OscConfig+0x348>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff fb89 	bl	8000bcc <HAL_InitTick>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d051      	beq.n	8001562 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e221      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d030      	beq.n	800152c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001648 <HAL_RCC_OscConfig+0x33c>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	4b57      	ldr	r3, [pc, #348]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014de:	4b56      	ldr	r3, [pc, #344]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	4b55      	ldr	r3, [pc, #340]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80014e4:	2180      	movs	r1, #128	@ 0x80
 80014e6:	0049      	lsls	r1, r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbca 	bl	8000c84 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fbc5 	bl	8000c84 <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1fe      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001508:	4b4b      	ldr	r3, [pc, #300]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2380      	movs	r3, #128	@ 0x80
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	4013      	ands	r3, r2
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b48      	ldr	r3, [pc, #288]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4a4a      	ldr	r2, [pc, #296]	@ (8001644 <HAL_RCC_OscConfig+0x338>)
 800151a:	4013      	ands	r3, r2
 800151c:	0019      	movs	r1, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	021a      	lsls	r2, r3, #8
 8001524:	4b44      	ldr	r3, [pc, #272]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	e01b      	b.n	8001564 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800152c:	4b42      	ldr	r3, [pc, #264]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001532:	4949      	ldr	r1, [pc, #292]	@ (8001658 <HAL_RCC_OscConfig+0x34c>)
 8001534:	400a      	ands	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fba4 	bl	8000c84 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001542:	f7ff fb9f 	bl	8000c84 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e1d8      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	4013      	ands	r3, r2
 800155e:	d1f0      	bne.n	8001542 <HAL_RCC_OscConfig+0x236>
 8001560:	e000      	b.n	8001564 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001562:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2208      	movs	r2, #8
 800156a:	4013      	ands	r3, r2
 800156c:	d047      	beq.n	80015fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800156e:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2238      	movs	r2, #56	@ 0x38
 8001574:	4013      	ands	r3, r2
 8001576:	2b18      	cmp	r3, #24
 8001578:	d10a      	bne.n	8001590 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800157a:	4b2f      	ldr	r3, [pc, #188]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d03c      	beq.n	80015fe <HAL_RCC_OscConfig+0x2f2>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d138      	bne.n	80015fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e1ba      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d019      	beq.n	80015cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001598:	4b27      	ldr	r3, [pc, #156]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800159a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800159c:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 800159e:	2101      	movs	r1, #1
 80015a0:	430a      	orrs	r2, r1
 80015a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fb6e 	bl	8000c84 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ae:	f7ff fb69 	bl	8000c84 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1a2      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c4:	2202      	movs	r2, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	d0f1      	beq.n	80015ae <HAL_RCC_OscConfig+0x2a2>
 80015ca:	e018      	b.n	80015fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	438a      	bics	r2, r1
 80015d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb54 	bl	8000c84 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fb4f 	bl	8000c84 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e188      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f1      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2204      	movs	r2, #4
 8001604:	4013      	ands	r3, r2
 8001606:	d100      	bne.n	800160a <HAL_RCC_OscConfig+0x2fe>
 8001608:	e0c6      	b.n	8001798 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160a:	231f      	movs	r3, #31
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2238      	movs	r2, #56	@ 0x38
 8001618:	4013      	ands	r3, r2
 800161a:	2b20      	cmp	r3, #32
 800161c:	d11e      	bne.n	800165c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_RCC_OscConfig+0x32c>)
 8001620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001622:	2202      	movs	r2, #2
 8001624:	4013      	ands	r3, r2
 8001626:	d100      	bne.n	800162a <HAL_RCC_OscConfig+0x31e>
 8001628:	e0b6      	b.n	8001798 <HAL_RCC_OscConfig+0x48c>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d000      	beq.n	8001634 <HAL_RCC_OscConfig+0x328>
 8001632:	e0b1      	b.n	8001798 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e166      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
 8001638:	40021000 	.word	0x40021000
 800163c:	fffeffff 	.word	0xfffeffff
 8001640:	fffbffff 	.word	0xfffbffff
 8001644:	ffff80ff 	.word	0xffff80ff
 8001648:	ffffc7ff 	.word	0xffffc7ff
 800164c:	00f42400 	.word	0x00f42400
 8001650:	20000000 	.word	0x20000000
 8001654:	20000004 	.word	0x20000004
 8001658:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800165c:	4bac      	ldr	r3, [pc, #688]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800165e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	055b      	lsls	r3, r3, #21
 8001664:	4013      	ands	r3, r2
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x360>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x362>
 800166c:	2300      	movs	r3, #0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d011      	beq.n	8001696 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4ba7      	ldr	r3, [pc, #668]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001676:	4ba6      	ldr	r3, [pc, #664]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001678:	2180      	movs	r1, #128	@ 0x80
 800167a:	0549      	lsls	r1, r1, #21
 800167c:	430a      	orrs	r2, r1
 800167e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001680:	4ba3      	ldr	r3, [pc, #652]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	055b      	lsls	r3, r3, #21
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800168e:	231f      	movs	r3, #31
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001696:	4b9f      	ldr	r3, [pc, #636]	@ (8001914 <HAL_RCC_OscConfig+0x608>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4013      	ands	r3, r2
 80016a0:	d11a      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001914 <HAL_RCC_OscConfig+0x608>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b9b      	ldr	r3, [pc, #620]	@ (8001914 <HAL_RCC_OscConfig+0x608>)
 80016a8:	2180      	movs	r1, #128	@ 0x80
 80016aa:	0049      	lsls	r1, r1, #1
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fae8 	bl	8000c84 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7ff fae3 	bl	8000c84 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e11c      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016cc:	4b91      	ldr	r3, [pc, #580]	@ (8001914 <HAL_RCC_OscConfig+0x608>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4013      	ands	r3, r2
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d106      	bne.n	80016ee <HAL_RCC_OscConfig+0x3e2>
 80016e0:	4b8b      	ldr	r3, [pc, #556]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80016e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016e4:	4b8a      	ldr	r3, [pc, #552]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	430a      	orrs	r2, r1
 80016ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016ec:	e01c      	b.n	8001728 <HAL_RCC_OscConfig+0x41c>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b05      	cmp	r3, #5
 80016f4:	d10c      	bne.n	8001710 <HAL_RCC_OscConfig+0x404>
 80016f6:	4b86      	ldr	r3, [pc, #536]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80016f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016fa:	4b85      	ldr	r3, [pc, #532]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80016fc:	2104      	movs	r1, #4
 80016fe:	430a      	orrs	r2, r1
 8001700:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001702:	4b83      	ldr	r3, [pc, #524]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001704:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001706:	4b82      	ldr	r3, [pc, #520]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0x41c>
 8001710:	4b7f      	ldr	r3, [pc, #508]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001712:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001714:	4b7e      	ldr	r3, [pc, #504]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001716:	2101      	movs	r1, #1
 8001718:	438a      	bics	r2, r1
 800171a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800171c:	4b7c      	ldr	r3, [pc, #496]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800171e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001720:	4b7b      	ldr	r3, [pc, #492]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001722:	2104      	movs	r1, #4
 8001724:	438a      	bics	r2, r1
 8001726:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d014      	beq.n	800175a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff faa8 	bl	8000c84 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001738:	e009      	b.n	800174e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173a:	f7ff faa3 	bl	8000c84 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	4a74      	ldr	r2, [pc, #464]	@ (8001918 <HAL_RCC_OscConfig+0x60c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e0db      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174e:	4b70      	ldr	r3, [pc, #448]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x42e>
 8001758:	e013      	b.n	8001782 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fa93 	bl	8000c84 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001762:	e009      	b.n	8001778 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7ff fa8e 	bl	8000c84 <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	4a6a      	ldr	r2, [pc, #424]	@ (8001918 <HAL_RCC_OscConfig+0x60c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0c6      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001778:	4b65      	ldr	r3, [pc, #404]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001782:	231f      	movs	r3, #31
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800178c:	4b60      	ldr	r3, [pc, #384]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800178e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001790:	4b5f      	ldr	r3, [pc, #380]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001792:	4962      	ldr	r1, [pc, #392]	@ (800191c <HAL_RCC_OscConfig+0x610>)
 8001794:	400a      	ands	r2, r1
 8001796:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d100      	bne.n	80017a2 <HAL_RCC_OscConfig+0x496>
 80017a0:	e0b0      	b.n	8001904 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2238      	movs	r2, #56	@ 0x38
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d100      	bne.n	80017b0 <HAL_RCC_OscConfig+0x4a4>
 80017ae:	e078      	b.n	80018a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d153      	bne.n	8001860 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b55      	ldr	r3, [pc, #340]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b54      	ldr	r3, [pc, #336]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80017be:	4958      	ldr	r1, [pc, #352]	@ (8001920 <HAL_RCC_OscConfig+0x614>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa5e 	bl	8000c84 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fa59 	bl	8000c84 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e092      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	049b      	lsls	r3, r3, #18
 80017e8:	4013      	ands	r3, r2
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ec:	4b48      	ldr	r3, [pc, #288]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4a4c      	ldr	r2, [pc, #304]	@ (8001924 <HAL_RCC_OscConfig+0x618>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1a      	ldr	r2, [r3, #32]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	431a      	orrs	r2, r3
 8001814:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001816:	430a      	orrs	r2, r1
 8001818:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181a:	4b3d      	ldr	r3, [pc, #244]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b3c      	ldr	r3, [pc, #240]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001820:	2180      	movs	r1, #128	@ 0x80
 8001822:	0449      	lsls	r1, r1, #17
 8001824:	430a      	orrs	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001828:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800182e:	2180      	movs	r1, #128	@ 0x80
 8001830:	0549      	lsls	r1, r1, #21
 8001832:	430a      	orrs	r2, r1
 8001834:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fa25 	bl	8000c84 <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff fa20 	bl	8000c84 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e059      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	4b2f      	ldr	r3, [pc, #188]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	049b      	lsls	r3, r3, #18
 800185a:	4013      	ands	r3, r2
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x534>
 800185e:	e051      	b.n	8001904 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001866:	492e      	ldr	r1, [pc, #184]	@ (8001920 <HAL_RCC_OscConfig+0x614>)
 8001868:	400a      	ands	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fa0a 	bl	8000c84 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001876:	f7ff fa05 	bl	8000c84 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e03e      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	@ 0x80
 800188e:	049b      	lsls	r3, r3, #18
 8001890:	4013      	ands	r3, r2
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001894:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 800189a:	4923      	ldr	r1, [pc, #140]	@ (8001928 <HAL_RCC_OscConfig+0x61c>)
 800189c:	400a      	ands	r2, r1
 800189e:	60da      	str	r2, [r3, #12]
 80018a0:	e030      	b.n	8001904 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e02b      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_RCC_OscConfig+0x604>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2203      	movs	r2, #3
 80018b8:	401a      	ands	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11e      	bne.n	8001900 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2270      	movs	r2, #112	@ 0x70
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d117      	bne.n	8001900 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	23fe      	movs	r3, #254	@ 0xfe
 80018d4:	01db      	lsls	r3, r3, #7
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d10e      	bne.n	8001900 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	23f8      	movs	r3, #248	@ 0xf8
 80018e6:	039b      	lsls	r3, r3, #14
 80018e8:	401a      	ands	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d106      	bne.n	8001900 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	0f5b      	lsrs	r3, r3, #29
 80018f6:	075a      	lsls	r2, r3, #29
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b008      	add	sp, #32
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
 8001918:	00001388 	.word	0x00001388
 800191c:	efffffff 	.word	0xefffffff
 8001920:	feffffff 	.word	0xfeffffff
 8001924:	1fc1808c 	.word	0x1fc1808c
 8001928:	effefffc 	.word	0xeffefffc

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0e9      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b76      	ldr	r3, [pc, #472]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2207      	movs	r2, #7
 8001946:	4013      	ands	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d91e      	bls.n	800198c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b73      	ldr	r3, [pc, #460]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2207      	movs	r2, #7
 8001954:	4393      	bics	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	4b70      	ldr	r3, [pc, #448]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001960:	f7ff f990 	bl	8000c84 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001968:	e009      	b.n	800197e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7ff f98b 	bl	8000c84 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a6a      	ldr	r2, [pc, #424]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0ca      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800197e:	4b67      	ldr	r3, [pc, #412]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d015      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d006      	beq.n	80019ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019a0:	4b60      	ldr	r3, [pc, #384]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019a6:	21e0      	movs	r1, #224	@ 0xe0
 80019a8:	01c9      	lsls	r1, r1, #7
 80019aa:	430a      	orrs	r2, r1
 80019ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	4a5d      	ldr	r2, [pc, #372]	@ (8001b28 <HAL_RCC_ClockConfig+0x1fc>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b59      	ldr	r3, [pc, #356]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d057      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d4:	4b53      	ldr	r3, [pc, #332]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	@ 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	d12b      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e097      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	049b      	lsls	r3, r3, #18
 80019f4:	4013      	ands	r3, r2
 80019f6:	d11f      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e08b      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a04:	4b47      	ldr	r3, [pc, #284]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d113      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e07f      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1c:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d108      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e074      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e06d      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a38:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	4393      	bics	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4b37      	ldr	r3, [pc, #220]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f91a 	bl	8000c84 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a56:	f7ff f915 	bl	8000c84 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a2f      	ldr	r2, [pc, #188]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e054      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2238      	movs	r2, #56	@ 0x38
 8001a70:	401a      	ands	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1ec      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2207      	movs	r2, #7
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d21e      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2207      	movs	r2, #7
 8001a90:	4393      	bics	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f8f2 	bl	8000c84 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7ff f8ed 	bl	8000c84 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e02c      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aba:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2207      	movs	r2, #7
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2204      	movs	r2, #4
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4a15      	ldr	r2, [pc, #84]	@ (8001b2c <HAL_RCC_ClockConfig+0x200>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ae6:	f000 f829 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001aea:	0001      	movs	r1, r0
 8001aec:	4b0d      	ldr	r3, [pc, #52]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	220f      	movs	r2, #15
 8001af4:	401a      	ands	r2, r3
 8001af6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b30 <HAL_RCC_ClockConfig+0x204>)
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	58d3      	ldr	r3, [r2, r3]
 8001afc:	221f      	movs	r2, #31
 8001afe:	4013      	ands	r3, r2
 8001b00:	000a      	movs	r2, r1
 8001b02:	40da      	lsrs	r2, r3
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <HAL_RCC_ClockConfig+0x208>)
 8001b06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff f85d 	bl	8000bcc <HAL_InitTick>
 8001b12:	0003      	movs	r3, r0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	00001388 	.word	0x00001388
 8001b24:	40021000 	.word	0x40021000
 8001b28:	fffff0ff 	.word	0xfffff0ff
 8001b2c:	ffff8fff 	.word	0xffff8fff
 8001b30:	080079c4 	.word	0x080079c4
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b42:	4b3c      	ldr	r3, [pc, #240]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2238      	movs	r2, #56	@ 0x38
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d10f      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b4c:	4b39      	ldr	r3, [pc, #228]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0adb      	lsrs	r3, r3, #11
 8001b52:	2207      	movs	r2, #7
 8001b54:	4013      	ands	r3, r2
 8001b56:	2201      	movs	r2, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	4835      	ldr	r0, [pc, #212]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b62:	f7fe fadf 	bl	8000124 <__udivsi3>
 8001b66:	0003      	movs	r3, r0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	e05d      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6c:	4b31      	ldr	r3, [pc, #196]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2238      	movs	r2, #56	@ 0x38
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b78:	4b30      	ldr	r3, [pc, #192]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	e054      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2238      	movs	r2, #56	@ 0x38
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d138      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b94:	4b27      	ldr	r3, [pc, #156]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	4824      	ldr	r0, [pc, #144]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001bac:	f7fe faba 	bl	8000124 <__udivsi3>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	227f      	movs	r2, #127	@ 0x7f
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	434b      	muls	r3, r1
 8001bc0:	617b      	str	r3, [r7, #20]
        break;
 8001bc2:	e00d      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	481c      	ldr	r0, [pc, #112]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bc8:	f7fe faac 	bl	8000124 <__udivsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	0019      	movs	r1, r3
 8001bd0:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	227f      	movs	r2, #127	@ 0x7f
 8001bd8:	4013      	ands	r3, r2
 8001bda:	434b      	muls	r3, r1
 8001bdc:	617b      	str	r3, [r7, #20]
        break;
 8001bde:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0f5b      	lsrs	r3, r3, #29
 8001be6:	2207      	movs	r2, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	6978      	ldr	r0, [r7, #20]
 8001bf2:	f7fe fa97 	bl	8000124 <__udivsi3>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e015      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2238      	movs	r2, #56	@ 0x38
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d103      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2238      	movs	r2, #56	@ 0x38
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b18      	cmp	r3, #24
 8001c1a:	d103      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c1c:	23fa      	movs	r3, #250	@ 0xfa
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e001      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c28:	693b      	ldr	r3, [r7, #16]
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b006      	add	sp, #24
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	40021000 	.word	0x40021000
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200

08001c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b02      	ldr	r3, [pc, #8]	@ (8001c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b5b0      	push	{r4, r5, r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c58:	f7ff fff2 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c5c:	0004      	movs	r4, r0
 8001c5e:	f7ff fb49 	bl	80012f4 <LL_RCC_GetAPB1Prescaler>
 8001c62:	0003      	movs	r3, r0
 8001c64:	0b1a      	lsrs	r2, r3, #12
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	58d3      	ldr	r3, [r2, r3]
 8001c6c:	221f      	movs	r2, #31
 8001c6e:	4013      	ands	r3, r2
 8001c70:	40dc      	lsrs	r4, r3
 8001c72:	0023      	movs	r3, r4
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	08007a04 	.word	0x08007a04

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c88:	2313      	movs	r3, #19
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c90:	2312      	movs	r3, #18
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	029b      	lsls	r3, r3, #10
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d100      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ca4:	e0a3      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca6:	2011      	movs	r0, #17
 8001ca8:	183b      	adds	r3, r7, r0
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b86      	ldr	r3, [pc, #536]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	055b      	lsls	r3, r3, #21
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d110      	bne.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b83      	ldr	r3, [pc, #524]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cbe:	4b82      	ldr	r3, [pc, #520]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cc0:	2180      	movs	r1, #128	@ 0x80
 8001cc2:	0549      	lsls	r1, r1, #21
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	055b      	lsls	r3, r3, #21
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd6:	183b      	adds	r3, r7, r0
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b7a      	ldr	r3, [pc, #488]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ce2:	2180      	movs	r1, #128	@ 0x80
 8001ce4:	0049      	lsls	r1, r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cea:	f7fe ffcb 	bl	8000c84 <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7fe ffc6 	bl	8000c84 <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d904      	bls.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d02:	2313      	movs	r3, #19
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2203      	movs	r2, #3
 8001d08:	701a      	strb	r2, [r3, #0]
        break;
 8001d0a:	e005      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d0ed      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d18:	2313      	movs	r3, #19
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d154      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d22:	4b69      	ldr	r3, [pc, #420]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d26:	23c0      	movs	r3, #192	@ 0xc0
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d019      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d014      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d3e:	4b62      	ldr	r3, [pc, #392]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d42:	4a63      	ldr	r2, [pc, #396]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d48:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d4e:	2180      	movs	r1, #128	@ 0x80
 8001d50:	0249      	lsls	r1, r1, #9
 8001d52:	430a      	orrs	r2, r1
 8001d54:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d56:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d58:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d5c:	495d      	ldr	r1, [pc, #372]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001d5e:	400a      	ands	r2, r1
 8001d60:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d62:	4b59      	ldr	r3, [pc, #356]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d016      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7fe ff88 	bl	8000c84 <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d78:	e00c      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7fe ff83 	bl	8000c84 <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	4a54      	ldr	r2, [pc, #336]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d904      	bls.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d8a:	2313      	movs	r3, #19
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2203      	movs	r2, #3
 8001d90:	701a      	strb	r2, [r3, #0]
            break;
 8001d92:	e004      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d94:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d0ed      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d9e:	2313      	movs	r3, #19
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da8:	4b47      	ldr	r3, [pc, #284]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dac:	4a48      	ldr	r2, [pc, #288]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	4b44      	ldr	r3, [pc, #272]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dbc:	e00c      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2213      	movs	r2, #19
 8001dc4:	18ba      	adds	r2, r7, r2
 8001dc6:	7812      	ldrb	r2, [r2, #0]
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e005      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dcc:	2312      	movs	r3, #18
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2213      	movs	r2, #19
 8001dd2:	18ba      	adds	r2, r7, r2
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dd8:	2311      	movs	r3, #17
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d105      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de2:	4b39      	ldr	r3, [pc, #228]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001de4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001de6:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001de8:	493c      	ldr	r1, [pc, #240]	@ (8001edc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df8:	4b33      	ldr	r3, [pc, #204]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4393      	bics	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4b30      	ldr	r3, [pc, #192]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2202      	movs	r2, #2
 8001e12:	4013      	ands	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e16:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b28      	ldr	r3, [pc, #160]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	4013      	ands	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e34:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e38:	4a29      	ldr	r2, [pc, #164]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	4b21      	ldr	r3, [pc, #132]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	01db      	lsls	r3, r3, #7
 8001e50:	4013      	ands	r3, r2
 8001e52:	d015      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	0899      	lsrs	r1, r3, #2
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	4b19      	ldr	r3, [pc, #100]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	2380      	movs	r3, #128	@ 0x80
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d106      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e78:	2180      	movs	r1, #128	@ 0x80
 8001e7a:	0249      	lsls	r1, r1, #9
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d016      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e90:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691a      	ldr	r2, [r3, #16]
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d106      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001eac:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eb2:	2180      	movs	r1, #128	@ 0x80
 8001eb4:	0249      	lsls	r1, r1, #9
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001eba:	2312      	movs	r3, #18
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	781b      	ldrb	r3, [r3, #0]
}
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	b006      	add	sp, #24
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	fffffcff 	.word	0xfffffcff
 8001ed4:	fffeffff 	.word	0xfffeffff
 8001ed8:	00001388 	.word	0x00001388
 8001edc:	efffffff 	.word	0xefffffff
 8001ee0:	ffffcfff 	.word	0xffffcfff
 8001ee4:	ffff3fff 	.word	0xffff3fff

08001ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0a8      	b.n	800204c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	2382      	movs	r3, #130	@ 0x82
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d009      	beq.n	8001f22 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	61da      	str	r2, [r3, #28]
 8001f14:	e005      	b.n	8001f22 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	225d      	movs	r2, #93	@ 0x5d
 8001f2c:	5c9b      	ldrb	r3, [r3, r2]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	225c      	movs	r2, #92	@ 0x5c
 8001f38:	2100      	movs	r1, #0
 8001f3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7fe fc74 	bl	800082c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	225d      	movs	r2, #93	@ 0x5d
 8001f48:	2102      	movs	r1, #2
 8001f4a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	438a      	bics	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	23e0      	movs	r3, #224	@ 0xe0
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d902      	bls.n	8001f6e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e002      	b.n	8001f74 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	015b      	lsls	r3, r3, #5
 8001f72:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	23f0      	movs	r3, #240	@ 0xf0
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d008      	beq.n	8001f92 <HAL_SPI_Init+0xaa>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	23e0      	movs	r3, #224	@ 0xe0
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d002      	beq.n	8001f92 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	2382      	movs	r3, #130	@ 0x82
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6899      	ldr	r1, [r3, #8]
 8001fa0:	2384      	movs	r3, #132	@ 0x84
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	400b      	ands	r3, r1
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	2102      	movs	r1, #2
 8001fae:	400b      	ands	r3, r1
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	400b      	ands	r3, r1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6999      	ldr	r1, [r3, #24]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2138      	movs	r1, #56	@ 0x38
 8001fce:	400b      	ands	r3, r1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	400b      	ands	r3, r1
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	0011      	movs	r1, r2
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	2110      	movs	r1, #16
 8002000:	400b      	ands	r3, r1
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002008:	2108      	movs	r1, #8
 800200a:	400b      	ands	r3, r1
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68d9      	ldr	r1, [r3, #12]
 8002012:	23f0      	movs	r3, #240	@ 0xf0
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	400b      	ands	r3, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	0011      	movs	r1, r2
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	2380      	movs	r3, #128	@ 0x80
 8002020:	015b      	lsls	r3, r3, #5
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4907      	ldr	r1, [pc, #28]	@ (8002054 <HAL_SPI_Init+0x16c>)
 8002038:	400a      	ands	r2, r1
 800203a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	225d      	movs	r2, #93	@ 0x5d
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}
 8002054:	fffff7ff 	.word	0xfffff7ff

08002058 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	1dbb      	adds	r3, r7, #6
 8002066:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002068:	231f      	movs	r3, #31
 800206a:	18fb      	adds	r3, r7, r3
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	225c      	movs	r2, #92	@ 0x5c
 8002074:	5c9b      	ldrb	r3, [r3, r2]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d101      	bne.n	800207e <HAL_SPI_Transmit+0x26>
 800207a:	2302      	movs	r3, #2
 800207c:	e147      	b.n	800230e <HAL_SPI_Transmit+0x2b6>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	225c      	movs	r2, #92	@ 0x5c
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002086:	f7fe fdfd 	bl	8000c84 <HAL_GetTick>
 800208a:	0003      	movs	r3, r0
 800208c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800208e:	2316      	movs	r3, #22
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	1dba      	adds	r2, r7, #6
 8002094:	8812      	ldrh	r2, [r2, #0]
 8002096:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	225d      	movs	r2, #93	@ 0x5d
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d004      	beq.n	80020ae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80020a4:	231f      	movs	r3, #31
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2202      	movs	r2, #2
 80020aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80020ac:	e128      	b.n	8002300 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_SPI_Transmit+0x64>
 80020b4:	1dbb      	adds	r3, r7, #6
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d104      	bne.n	80020c6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80020bc:	231f      	movs	r3, #31
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80020c4:	e11c      	b.n	8002300 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	225d      	movs	r2, #93	@ 0x5d
 80020ca:	2103      	movs	r1, #3
 80020cc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1dba      	adds	r2, r7, #6
 80020de:	8812      	ldrh	r2, [r2, #0]
 80020e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1dba      	adds	r2, r7, #6
 80020e6:	8812      	ldrh	r2, [r2, #0]
 80020e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2244      	movs	r2, #68	@ 0x44
 80020f4:	2100      	movs	r1, #0
 80020f6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2246      	movs	r2, #70	@ 0x46
 80020fc:	2100      	movs	r1, #0
 80020fe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	429a      	cmp	r2, r3
 8002116:	d110      	bne.n	800213a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2140      	movs	r1, #64	@ 0x40
 8002124:	438a      	bics	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2180      	movs	r1, #128	@ 0x80
 8002134:	01c9      	lsls	r1, r1, #7
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2240      	movs	r2, #64	@ 0x40
 8002142:	4013      	ands	r3, r2
 8002144:	2b40      	cmp	r3, #64	@ 0x40
 8002146:	d007      	beq.n	8002158 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2140      	movs	r1, #64	@ 0x40
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	23e0      	movs	r3, #224	@ 0xe0
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	429a      	cmp	r2, r3
 8002162:	d952      	bls.n	800220a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <HAL_SPI_Transmit+0x11e>
 800216c:	2316      	movs	r3, #22
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d143      	bne.n	80021fe <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002186:	1c9a      	adds	r2, r3, #2
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800219a:	e030      	b.n	80021fe <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d112      	bne.n	80021d0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ba:	1c9a      	adds	r2, r3, #2
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80021ce:	e016      	b.n	80021fe <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021d0:	f7fe fd58 	bl	8000c84 <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d802      	bhi.n	80021e6 <HAL_SPI_Transmit+0x18e>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	d102      	bne.n	80021ec <HAL_SPI_Transmit+0x194>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d108      	bne.n	80021fe <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80021ec:	231f      	movs	r3, #31
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2203      	movs	r2, #3
 80021f2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	225d      	movs	r2, #93	@ 0x5d
 80021f8:	2101      	movs	r1, #1
 80021fa:	5499      	strb	r1, [r3, r2]
          goto error;
 80021fc:	e080      	b.n	8002300 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1c9      	bne.n	800219c <HAL_SPI_Transmit+0x144>
 8002208:	e053      	b.n	80022b2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_SPI_Transmit+0x1c4>
 8002212:	2316      	movs	r3, #22
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d145      	bne.n	80022a8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	330c      	adds	r3, #12
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002242:	e031      	b.n	80022a8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	2b02      	cmp	r3, #2
 8002250:	d113      	bne.n	800227a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	330c      	adds	r3, #12
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002278:	e016      	b.n	80022a8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800227a:	f7fe fd03 	bl	8000c84 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d802      	bhi.n	8002290 <HAL_SPI_Transmit+0x238>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	d102      	bne.n	8002296 <HAL_SPI_Transmit+0x23e>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2203      	movs	r2, #3
 800229c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	225d      	movs	r2, #93	@ 0x5d
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
          goto error;
 80022a6:	e02b      	b.n	8002300 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1c8      	bne.n	8002244 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	6839      	ldr	r1, [r7, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f000 fc47 	bl	8002b4c <SPI_EndRxTxTransaction>
 80022be:	1e03      	subs	r3, r0, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2220      	movs	r2, #32
 80022c6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80022d0:	2300      	movs	r3, #0
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80022ee:	231f      	movs	r3, #31
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
 80022f6:	e003      	b.n	8002300 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	225d      	movs	r2, #93	@ 0x5d
 80022fc:	2101      	movs	r1, #1
 80022fe:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	225c      	movs	r2, #92	@ 0x5c
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002308:	231f      	movs	r3, #31
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	781b      	ldrb	r3, [r3, #0]
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b008      	add	sp, #32
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	001a      	movs	r2, r3
 8002326:	1cbb      	adds	r3, r7, #2
 8002328:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800232a:	2301      	movs	r3, #1
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800232e:	2323      	movs	r3, #35	@ 0x23
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	225c      	movs	r2, #92	@ 0x5c
 800233a:	5c9b      	ldrb	r3, [r3, r2]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_SPI_TransmitReceive+0x2c>
 8002340:	2302      	movs	r3, #2
 8002342:	e1c4      	b.n	80026ce <HAL_SPI_TransmitReceive+0x3b6>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	225c      	movs	r2, #92	@ 0x5c
 8002348:	2101      	movs	r1, #1
 800234a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800234c:	f7fe fc9a 	bl	8000c84 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002354:	201b      	movs	r0, #27
 8002356:	183b      	adds	r3, r7, r0
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	215d      	movs	r1, #93	@ 0x5d
 800235c:	5c52      	ldrb	r2, [r2, r1]
 800235e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002366:	2312      	movs	r3, #18
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	1cba      	adds	r2, r7, #2
 800236c:	8812      	ldrh	r2, [r2, #0]
 800236e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002370:	183b      	adds	r3, r7, r0
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d011      	beq.n	800239c <HAL_SPI_TransmitReceive+0x84>
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	2382      	movs	r3, #130	@ 0x82
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	429a      	cmp	r2, r3
 8002380:	d107      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d103      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x7a>
 800238a:	183b      	adds	r3, r7, r0
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d004      	beq.n	800239c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002392:	2323      	movs	r3, #35	@ 0x23
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2202      	movs	r2, #2
 8002398:	701a      	strb	r2, [r3, #0]
    goto error;
 800239a:	e191      	b.n	80026c0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d006      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x98>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x98>
 80023a8:	1cbb      	adds	r3, r7, #2
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d104      	bne.n	80023ba <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80023b0:	2323      	movs	r3, #35	@ 0x23
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2201      	movs	r2, #1
 80023b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80023b8:	e182      	b.n	80026c0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	225d      	movs	r2, #93	@ 0x5d
 80023be:	5c9b      	ldrb	r3, [r3, r2]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d003      	beq.n	80023ce <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	225d      	movs	r2, #93	@ 0x5d
 80023ca:	2105      	movs	r1, #5
 80023cc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1cba      	adds	r2, r7, #2
 80023de:	2146      	movs	r1, #70	@ 0x46
 80023e0:	8812      	ldrh	r2, [r2, #0]
 80023e2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1cba      	adds	r2, r7, #2
 80023e8:	2144      	movs	r1, #68	@ 0x44
 80023ea:	8812      	ldrh	r2, [r2, #0]
 80023ec:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1cba      	adds	r2, r7, #2
 80023f8:	8812      	ldrh	r2, [r2, #0]
 80023fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1cba      	adds	r2, r7, #2
 8002400:	8812      	ldrh	r2, [r2, #0]
 8002402:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	23e0      	movs	r3, #224	@ 0xe0
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	429a      	cmp	r2, r3
 800241a:	d908      	bls.n	800242e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	49ac      	ldr	r1, [pc, #688]	@ (80026d8 <HAL_SPI_TransmitReceive+0x3c0>)
 8002428:	400a      	ands	r2, r1
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	e008      	b.n	8002440 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2180      	movs	r1, #128	@ 0x80
 800243a:	0149      	lsls	r1, r1, #5
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2240      	movs	r2, #64	@ 0x40
 8002448:	4013      	ands	r3, r2
 800244a:	2b40      	cmp	r3, #64	@ 0x40
 800244c:	d007      	beq.n	800245e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2140      	movs	r1, #64	@ 0x40
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	23e0      	movs	r3, #224	@ 0xe0
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	429a      	cmp	r2, r3
 8002468:	d800      	bhi.n	800246c <HAL_SPI_TransmitReceive+0x154>
 800246a:	e083      	b.n	8002574 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_SPI_TransmitReceive+0x168>
 8002474:	2312      	movs	r3, #18
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d000      	beq.n	8002480 <HAL_SPI_TransmitReceive+0x168>
 800247e:	e06d      	b.n	800255c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002484:	881a      	ldrh	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002490:	1c9a      	adds	r2, r3, #2
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a4:	e05a      	b.n	800255c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d11b      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x1d4>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d016      	beq.n	80024ec <HAL_SPI_TransmitReceive+0x1d4>
 80024be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d113      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c8:	881a      	ldrh	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d4:	1c9a      	adds	r2, r3, #2
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d11c      	bne.n	8002534 <HAL_SPI_TransmitReceive+0x21c>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2246      	movs	r2, #70	@ 0x46
 80024fe:	5a9b      	ldrh	r3, [r3, r2]
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d016      	beq.n	8002534 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002510:	b292      	uxth	r2, r2
 8002512:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002518:	1c9a      	adds	r2, r3, #2
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2246      	movs	r2, #70	@ 0x46
 8002522:	5a9b      	ldrh	r3, [r3, r2]
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b299      	uxth	r1, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2246      	movs	r2, #70	@ 0x46
 800252e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002530:	2301      	movs	r3, #1
 8002532:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002534:	f7fe fba6 	bl	8000c84 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002540:	429a      	cmp	r2, r3
 8002542:	d80b      	bhi.n	800255c <HAL_SPI_TransmitReceive+0x244>
 8002544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002546:	3301      	adds	r3, #1
 8002548:	d008      	beq.n	800255c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800254a:	2323      	movs	r3, #35	@ 0x23
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	2203      	movs	r2, #3
 8002550:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	225d      	movs	r2, #93	@ 0x5d
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]
        goto error;
 800255a:	e0b1      	b.n	80026c0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002560:	b29b      	uxth	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d19f      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x18e>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2246      	movs	r2, #70	@ 0x46
 800256a:	5a9b      	ldrh	r3, [r3, r2]
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d199      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x18e>
 8002572:	e089      	b.n	8002688 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_SPI_TransmitReceive+0x270>
 800257c:	2312      	movs	r3, #18
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d000      	beq.n	8002588 <HAL_SPI_TransmitReceive+0x270>
 8002586:	e074      	b.n	8002672 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ae:	e060      	b.n	8002672 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2202      	movs	r2, #2
 80025b8:	4013      	ands	r3, r2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d11c      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x2e0>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d017      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x2e0>
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d114      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	2b01      	cmp	r3, #1
 8002604:	d11e      	bne.n	8002644 <HAL_SPI_TransmitReceive+0x32c>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2246      	movs	r2, #70	@ 0x46
 800260a:	5a9b      	ldrh	r3, [r3, r2]
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d018      	beq.n	8002644 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	330c      	adds	r3, #12
 8002618:	001a      	movs	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2246      	movs	r2, #70	@ 0x46
 8002632:	5a9b      	ldrh	r3, [r3, r2]
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b299      	uxth	r1, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2246      	movs	r2, #70	@ 0x46
 800263e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002640:	2301      	movs	r3, #1
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002644:	f7fe fb1e 	bl	8000c84 <HAL_GetTick>
 8002648:	0002      	movs	r2, r0
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002650:	429a      	cmp	r2, r3
 8002652:	d802      	bhi.n	800265a <HAL_SPI_TransmitReceive+0x342>
 8002654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002656:	3301      	adds	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x348>
 800265a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265c:	2b00      	cmp	r3, #0
 800265e:	d108      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002660:	2323      	movs	r3, #35	@ 0x23
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2203      	movs	r2, #3
 8002666:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	225d      	movs	r2, #93	@ 0x5d
 800266c:	2101      	movs	r1, #1
 800266e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002670:	e026      	b.n	80026c0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d199      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x298>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2246      	movs	r2, #70	@ 0x46
 8002680:	5a9b      	ldrh	r3, [r3, r2]
 8002682:	b29b      	uxth	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d193      	bne.n	80025b0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	0018      	movs	r0, r3
 8002690:	f000 fa5c 	bl	8002b4c <SPI_EndRxTxTransaction>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d006      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002698:	2323      	movs	r3, #35	@ 0x23
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80026ae:	2323      	movs	r3, #35	@ 0x23
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e003      	b.n	80026c0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	225d      	movs	r2, #93	@ 0x5d
 80026bc:	2101      	movs	r1, #1
 80026be:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	225c      	movs	r2, #92	@ 0x5c
 80026c4:	2100      	movs	r1, #0
 80026c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026c8:	2323      	movs	r3, #35	@ 0x23
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b00a      	add	sp, #40	@ 0x28
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	ffffefff 	.word	0xffffefff

080026dc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b088      	sub	sp, #32
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2240      	movs	r2, #64	@ 0x40
 80026f8:	4013      	ands	r3, r2
 80026fa:	d10d      	bne.n	8002718 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2201      	movs	r2, #1
 8002700:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002702:	d009      	beq.n	8002718 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2240      	movs	r2, #64	@ 0x40
 8002708:	4013      	ands	r3, r2
 800270a:	d005      	beq.n	8002718 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	0010      	movs	r0, r2
 8002714:	4798      	blx	r3
    return;
 8002716:	e0c5      	b.n	80028a4 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2202      	movs	r2, #2
 800271c:	4013      	ands	r3, r2
 800271e:	d009      	beq.n	8002734 <HAL_SPI_IRQHandler+0x58>
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2280      	movs	r2, #128	@ 0x80
 8002724:	4013      	ands	r3, r2
 8002726:	d005      	beq.n	8002734 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	0010      	movs	r0, r2
 8002730:	4798      	blx	r3
    return;
 8002732:	e0b7      	b.n	80028a4 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2220      	movs	r2, #32
 8002738:	4013      	ands	r3, r2
 800273a:	d109      	bne.n	8002750 <HAL_SPI_IRQHandler+0x74>
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2240      	movs	r2, #64	@ 0x40
 8002740:	4013      	ands	r3, r2
 8002742:	d105      	bne.n	8002750 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4013      	ands	r3, r2
 800274c:	d100      	bne.n	8002750 <HAL_SPI_IRQHandler+0x74>
 800274e:	e0a9      	b.n	80028a4 <HAL_SPI_IRQHandler+0x1c8>
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2220      	movs	r2, #32
 8002754:	4013      	ands	r3, r2
 8002756:	d100      	bne.n	800275a <HAL_SPI_IRQHandler+0x7e>
 8002758:	e0a4      	b.n	80028a4 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	2240      	movs	r2, #64	@ 0x40
 800275e:	4013      	ands	r3, r2
 8002760:	d023      	beq.n	80027aa <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	225d      	movs	r2, #93	@ 0x5d
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b03      	cmp	r3, #3
 800276c:	d011      	beq.n	8002792 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002772:	2204      	movs	r2, #4
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	e00b      	b.n	80027aa <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	693b      	ldr	r3, [r7, #16]
        return;
 80027a8:	e07c      	b.n	80028a4 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2220      	movs	r2, #32
 80027ae:	4013      	ands	r3, r2
 80027b0:	d014      	beq.n	80027dc <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027b6:	2201      	movs	r2, #1
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2140      	movs	r1, #64	@ 0x40
 80027d6:	438a      	bics	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4013      	ands	r3, r2
 80027e4:	d00c      	beq.n	8002800 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ea:	2208      	movs	r2, #8
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	60bb      	str	r3, [r7, #8]
 80027fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002804:	2b00      	cmp	r3, #0
 8002806:	d04c      	beq.n	80028a2 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	21e0      	movs	r1, #224	@ 0xe0
 8002814:	438a      	bics	r2, r1
 8002816:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	225d      	movs	r2, #93	@ 0x5d
 800281c:	2101      	movs	r1, #1
 800281e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2202      	movs	r2, #2
 8002824:	4013      	ands	r3, r2
 8002826:	d103      	bne.n	8002830 <HAL_SPI_IRQHandler+0x154>
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2201      	movs	r2, #1
 800282c:	4013      	ands	r3, r2
 800282e:	d032      	beq.n	8002896 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2103      	movs	r1, #3
 800283c:	438a      	bics	r2, r1
 800283e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	2b00      	cmp	r3, #0
 8002846:	d010      	beq.n	800286a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284c:	4a17      	ldr	r2, [pc, #92]	@ (80028ac <HAL_SPI_IRQHandler+0x1d0>)
 800284e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	0018      	movs	r0, r3
 8002856:	f7fe fb21 	bl	8000e9c <HAL_DMA_Abort_IT>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d005      	beq.n	800286a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002862:	2240      	movs	r2, #64	@ 0x40
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002876:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <HAL_SPI_IRQHandler+0x1d0>)
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287e:	0018      	movs	r0, r3
 8002880:	f7fe fb0c 	bl	8000e9c <HAL_DMA_Abort_IT>
 8002884:	1e03      	subs	r3, r0, #0
 8002886:	d00b      	beq.n	80028a0 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288c:	2240      	movs	r2, #64	@ 0x40
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8002894:	e004      	b.n	80028a0 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f809 	bl	80028b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800289e:	e000      	b.n	80028a2 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80028a0:	46c0      	nop			@ (mov r8, r8)
    return;
 80028a2:	46c0      	nop			@ (mov r8, r8)
  }
}
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b008      	add	sp, #32
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			@ (mov r8, r8)
 80028ac:	080028c1 	.word	0x080028c1

080028b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}

080028c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2246      	movs	r2, #70	@ 0x46
 80028d2:	2100      	movs	r1, #0
 80028d4:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	0018      	movs	r0, r3
 80028e0:	f7ff ffe6 	bl	80028b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80028e4:	46c0      	nop			@ (mov r8, r8)
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b004      	add	sp, #16
 80028ea:	bd80      	pop	{r7, pc}

080028ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	1dfb      	adds	r3, r7, #7
 80028fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028fc:	f7fe f9c2 	bl	8000c84 <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	18d3      	adds	r3, r2, r3
 800290a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800290c:	f7fe f9ba 	bl	8000c84 <HAL_GetTick>
 8002910:	0003      	movs	r3, r0
 8002912:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002914:	4b3a      	ldr	r3, [pc, #232]	@ (8002a00 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	015b      	lsls	r3, r3, #5
 800291a:	0d1b      	lsrs	r3, r3, #20
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	4353      	muls	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002922:	e058      	b.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	3301      	adds	r3, #1
 8002928:	d055      	beq.n	80029d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800292a:	f7fe f9ab 	bl	8000c84 <HAL_GetTick>
 800292e:	0002      	movs	r2, r0
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	429a      	cmp	r2, r3
 8002938:	d902      	bls.n	8002940 <SPI_WaitFlagStateUntilTimeout+0x54>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d142      	bne.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	21e0      	movs	r1, #224	@ 0xe0
 800294c:	438a      	bics	r2, r1
 800294e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	2382      	movs	r3, #130	@ 0x82
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	429a      	cmp	r2, r3
 800295a:	d113      	bne.n	8002984 <SPI_WaitFlagStateUntilTimeout+0x98>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	429a      	cmp	r2, r3
 8002966:	d005      	beq.n	8002974 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2140      	movs	r1, #64	@ 0x40
 8002980:	438a      	bics	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	019b      	lsls	r3, r3, #6
 800298c:	429a      	cmp	r2, r3
 800298e:	d110      	bne.n	80029b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	491a      	ldr	r1, [pc, #104]	@ (8002a04 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800299c:	400a      	ands	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2180      	movs	r1, #128	@ 0x80
 80029ac:	0189      	lsls	r1, r1, #6
 80029ae:	430a      	orrs	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	225d      	movs	r2, #93	@ 0x5d
 80029b6:	2101      	movs	r1, #1
 80029b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	225c      	movs	r2, #92	@ 0x5c
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e017      	b.n	80029f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3b01      	subs	r3, #1
 80029d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	4013      	ands	r3, r2
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	425a      	negs	r2, r3
 80029e6:	4153      	adcs	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	001a      	movs	r2, r3
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d197      	bne.n	8002924 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b008      	add	sp, #32
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			@ (mov r8, r8)
 8002a00:	20000000 	.word	0x20000000
 8002a04:	ffffdfff 	.word	0xffffdfff

08002a08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002a16:	2317      	movs	r3, #23
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a1e:	f7fe f931 	bl	8000c84 <HAL_GetTick>
 8002a22:	0002      	movs	r2, r0
 8002a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	18d3      	adds	r3, r2, r3
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002a2e:	f7fe f929 	bl	8000c84 <HAL_GetTick>
 8002a32:	0003      	movs	r3, r0
 8002a34:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	330c      	adds	r3, #12
 8002a3c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a3e:	4b41      	ldr	r3, [pc, #260]	@ (8002b44 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	0013      	movs	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	189b      	adds	r3, r3, r2
 8002a48:	00da      	lsls	r2, r3, #3
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	0d1b      	lsrs	r3, r3, #20
 8002a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a50:	4353      	muls	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a54:	e068      	b.n	8002b28 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	23c0      	movs	r3, #192	@ 0xc0
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d10a      	bne.n	8002a76 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d107      	bne.n	8002a76 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	2117      	movs	r1, #23
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	d055      	beq.n	8002b28 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a7c:	f7fe f902 	bl	8000c84 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d902      	bls.n	8002a92 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d142      	bne.n	8002b18 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	21e0      	movs	r1, #224	@ 0xe0
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	2382      	movs	r3, #130	@ 0x82
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d113      	bne.n	8002ad6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	021b      	lsls	r3, r3, #8
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d005      	beq.n	8002ac6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d107      	bne.n	8002ad6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2140      	movs	r1, #64	@ 0x40
 8002ad2:	438a      	bics	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	019b      	lsls	r3, r3, #6
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d110      	bne.n	8002b04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4916      	ldr	r1, [pc, #88]	@ (8002b48 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002aee:	400a      	ands	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2180      	movs	r1, #128	@ 0x80
 8002afe:	0189      	lsls	r1, r1, #6
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	225d      	movs	r2, #93	@ 0x5d
 8002b08:	2101      	movs	r1, #1
 8002b0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	225c      	movs	r2, #92	@ 0x5c
 8002b10:	2100      	movs	r1, #0
 8002b12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e010      	b.n	8002b3a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d18e      	bne.n	8002a56 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b00a      	add	sp, #40	@ 0x28
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	20000000 	.word	0x20000000
 8002b48:	ffffdfff 	.word	0xffffdfff

08002b4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	23c0      	movs	r3, #192	@ 0xc0
 8002b5c:	0159      	lsls	r1, r3, #5
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	0013      	movs	r3, r2
 8002b66:	2200      	movs	r2, #0
 8002b68:	f7ff ff4e 	bl	8002a08 <SPI_WaitFifoStateUntilTimeout>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d007      	beq.n	8002b80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b74:	2220      	movs	r2, #32
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e027      	b.n	8002bd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	0013      	movs	r3, r2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2180      	movs	r1, #128	@ 0x80
 8002b8e:	f7ff fead 	bl	80028ec <SPI_WaitFlagStateUntilTimeout>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d007      	beq.n	8002ba6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e014      	b.n	8002bd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	23c0      	movs	r3, #192	@ 0xc0
 8002baa:	00d9      	lsls	r1, r3, #3
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f7ff ff27 	bl	8002a08 <SPI_WaitFifoStateUntilTimeout>
 8002bba:	1e03      	subs	r3, r0, #0
 8002bbc:	d007      	beq.n	8002bce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e000      	b.n	8002bd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b004      	add	sp, #16
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e046      	b.n	8002c78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2288      	movs	r2, #136	@ 0x88
 8002bee:	589b      	ldr	r3, [r3, r2]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d107      	bne.n	8002c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2284      	movs	r2, #132	@ 0x84
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7fd ff3a 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2288      	movs	r2, #136	@ 0x88
 8002c08:	2124      	movs	r1, #36	@ 0x24
 8002c0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2101      	movs	r1, #1
 8002c18:	438a      	bics	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 fa74 	bl	8003114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 f8cc 	bl	8002dcc <UART_SetConfig>
 8002c34:	0003      	movs	r3, r0
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e01c      	b.n	8002c78 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	490d      	ldr	r1, [pc, #52]	@ (8002c80 <HAL_UART_Init+0xa8>)
 8002c4a:	400a      	ands	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	212a      	movs	r1, #42	@ 0x2a
 8002c5a:	438a      	bics	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	0018      	movs	r0, r3
 8002c72:	f000 fb03 	bl	800327c <UART_CheckIdleState>
 8002c76:	0003      	movs	r3, r0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b002      	add	sp, #8
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	ffffb7ff 	.word	0xffffb7ff

08002c84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	@ 0x28
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	1dbb      	adds	r3, r7, #6
 8002c92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2288      	movs	r2, #136	@ 0x88
 8002c98:	589b      	ldr	r3, [r3, r2]
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d000      	beq.n	8002ca0 <HAL_UART_Transmit+0x1c>
 8002c9e:	e090      	b.n	8002dc2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_UART_Transmit+0x2a>
 8002ca6:	1dbb      	adds	r3, r7, #6
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e088      	b.n	8002dc4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	015b      	lsls	r3, r3, #5
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d109      	bne.n	8002cd2 <HAL_UART_Transmit+0x4e>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d105      	bne.n	8002cd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d001      	beq.n	8002cd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e078      	b.n	8002dc4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2290      	movs	r2, #144	@ 0x90
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2288      	movs	r2, #136	@ 0x88
 8002cde:	2121      	movs	r1, #33	@ 0x21
 8002ce0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ce2:	f7fd ffcf 	bl	8000c84 <HAL_GetTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1dba      	adds	r2, r7, #6
 8002cee:	2154      	movs	r1, #84	@ 0x54
 8002cf0:	8812      	ldrh	r2, [r2, #0]
 8002cf2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1dba      	adds	r2, r7, #6
 8002cf8:	2156      	movs	r1, #86	@ 0x56
 8002cfa:	8812      	ldrh	r2, [r2, #0]
 8002cfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	2380      	movs	r3, #128	@ 0x80
 8002d04:	015b      	lsls	r3, r3, #5
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d108      	bne.n	8002d1c <HAL_UART_Transmit+0x98>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d104      	bne.n	8002d1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e003      	b.n	8002d24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d24:	e030      	b.n	8002d88 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	0013      	movs	r3, r2
 8002d30:	2200      	movs	r2, #0
 8002d32:	2180      	movs	r1, #128	@ 0x80
 8002d34:	f000 fb4c 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d005      	beq.n	8002d48 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2288      	movs	r2, #136	@ 0x88
 8002d40:	2120      	movs	r1, #32
 8002d42:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e03d      	b.n	8002dc4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10b      	bne.n	8002d66 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	001a      	movs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	05d2      	lsls	r2, r2, #23
 8002d5a:	0dd2      	lsrs	r2, r2, #23
 8002d5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	3302      	adds	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e007      	b.n	8002d76 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	3301      	adds	r3, #1
 8002d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2256      	movs	r2, #86	@ 0x56
 8002d7a:	5a9b      	ldrh	r3, [r3, r2]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b299      	uxth	r1, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2256      	movs	r2, #86	@ 0x56
 8002d86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2256      	movs	r2, #86	@ 0x56
 8002d8c:	5a9b      	ldrh	r3, [r3, r2]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1c8      	bne.n	8002d26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	0013      	movs	r3, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2140      	movs	r1, #64	@ 0x40
 8002da2:	f000 fb15 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2288      	movs	r2, #136	@ 0x88
 8002dae:	2120      	movs	r1, #32
 8002db0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e006      	b.n	8002dc4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2288      	movs	r2, #136	@ 0x88
 8002dba:	2120      	movs	r1, #32
 8002dbc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e000      	b.n	8002dc4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
  }
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b008      	add	sp, #32
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dd4:	231a      	movs	r3, #26
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4abc      	ldr	r2, [pc, #752]	@ (80030ec <UART_SetConfig+0x320>)
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	0019      	movs	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4ab7      	ldr	r2, [pc, #732]	@ (80030f0 <UART_SetConfig+0x324>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4aae      	ldr	r2, [pc, #696]	@ (80030f4 <UART_SetConfig+0x328>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4e:	220f      	movs	r2, #15
 8002e50:	4393      	bics	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4aa4      	ldr	r2, [pc, #656]	@ (80030f8 <UART_SetConfig+0x32c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d127      	bne.n	8002eba <UART_SetConfig+0xee>
 8002e6a:	4ba4      	ldr	r3, [pc, #656]	@ (80030fc <UART_SetConfig+0x330>)
 8002e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6e:	2203      	movs	r2, #3
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d017      	beq.n	8002ea6 <UART_SetConfig+0xda>
 8002e76:	d81b      	bhi.n	8002eb0 <UART_SetConfig+0xe4>
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d00a      	beq.n	8002e92 <UART_SetConfig+0xc6>
 8002e7c:	d818      	bhi.n	8002eb0 <UART_SetConfig+0xe4>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <UART_SetConfig+0xbc>
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d00a      	beq.n	8002e9c <UART_SetConfig+0xd0>
 8002e86:	e013      	b.n	8002eb0 <UART_SetConfig+0xe4>
 8002e88:	231b      	movs	r3, #27
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e058      	b.n	8002f44 <UART_SetConfig+0x178>
 8002e92:	231b      	movs	r3, #27
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e053      	b.n	8002f44 <UART_SetConfig+0x178>
 8002e9c:	231b      	movs	r3, #27
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	e04e      	b.n	8002f44 <UART_SetConfig+0x178>
 8002ea6:	231b      	movs	r3, #27
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2208      	movs	r2, #8
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e049      	b.n	8002f44 <UART_SetConfig+0x178>
 8002eb0:	231b      	movs	r3, #27
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e044      	b.n	8002f44 <UART_SetConfig+0x178>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a90      	ldr	r2, [pc, #576]	@ (8003100 <UART_SetConfig+0x334>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d127      	bne.n	8002f14 <UART_SetConfig+0x148>
 8002ec4:	4b8d      	ldr	r3, [pc, #564]	@ (80030fc <UART_SetConfig+0x330>)
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	220c      	movs	r2, #12
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d017      	beq.n	8002f00 <UART_SetConfig+0x134>
 8002ed0:	d81b      	bhi.n	8002f0a <UART_SetConfig+0x13e>
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d00a      	beq.n	8002eec <UART_SetConfig+0x120>
 8002ed6:	d818      	bhi.n	8002f0a <UART_SetConfig+0x13e>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <UART_SetConfig+0x116>
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d00a      	beq.n	8002ef6 <UART_SetConfig+0x12a>
 8002ee0:	e013      	b.n	8002f0a <UART_SetConfig+0x13e>
 8002ee2:	231b      	movs	r3, #27
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e02b      	b.n	8002f44 <UART_SetConfig+0x178>
 8002eec:	231b      	movs	r3, #27
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e026      	b.n	8002f44 <UART_SetConfig+0x178>
 8002ef6:	231b      	movs	r3, #27
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2204      	movs	r2, #4
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e021      	b.n	8002f44 <UART_SetConfig+0x178>
 8002f00:	231b      	movs	r3, #27
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2208      	movs	r2, #8
 8002f06:	701a      	strb	r2, [r3, #0]
 8002f08:	e01c      	b.n	8002f44 <UART_SetConfig+0x178>
 8002f0a:	231b      	movs	r3, #27
 8002f0c:	18fb      	adds	r3, r7, r3
 8002f0e:	2210      	movs	r2, #16
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e017      	b.n	8002f44 <UART_SetConfig+0x178>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7a      	ldr	r2, [pc, #488]	@ (8003104 <UART_SetConfig+0x338>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d104      	bne.n	8002f28 <UART_SetConfig+0x15c>
 8002f1e:	231b      	movs	r3, #27
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	e00d      	b.n	8002f44 <UART_SetConfig+0x178>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a76      	ldr	r2, [pc, #472]	@ (8003108 <UART_SetConfig+0x33c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d104      	bne.n	8002f3c <UART_SetConfig+0x170>
 8002f32:	231b      	movs	r3, #27
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	2200      	movs	r2, #0
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e003      	b.n	8002f44 <UART_SetConfig+0x178>
 8002f3c:	231b      	movs	r3, #27
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	2210      	movs	r2, #16
 8002f42:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	2380      	movs	r3, #128	@ 0x80
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d000      	beq.n	8002f52 <UART_SetConfig+0x186>
 8002f50:	e065      	b.n	800301e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002f52:	231b      	movs	r3, #27
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d015      	beq.n	8002f88 <UART_SetConfig+0x1bc>
 8002f5c:	dc18      	bgt.n	8002f90 <UART_SetConfig+0x1c4>
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d00d      	beq.n	8002f7e <UART_SetConfig+0x1b2>
 8002f62:	dc15      	bgt.n	8002f90 <UART_SetConfig+0x1c4>
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <UART_SetConfig+0x1a2>
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d005      	beq.n	8002f78 <UART_SetConfig+0x1ac>
 8002f6c:	e010      	b.n	8002f90 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f6e:	f7fe fe71 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002f72:	0003      	movs	r3, r0
 8002f74:	617b      	str	r3, [r7, #20]
        break;
 8002f76:	e012      	b.n	8002f9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f78:	4b64      	ldr	r3, [pc, #400]	@ (800310c <UART_SetConfig+0x340>)
 8002f7a:	617b      	str	r3, [r7, #20]
        break;
 8002f7c:	e00f      	b.n	8002f9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f7e:	f7fe fddd 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8002f82:	0003      	movs	r3, r0
 8002f84:	617b      	str	r3, [r7, #20]
        break;
 8002f86:	e00a      	b.n	8002f9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	617b      	str	r3, [r7, #20]
        break;
 8002f8e:	e006      	b.n	8002f9e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f94:	231a      	movs	r3, #26
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
        break;
 8002f9c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d100      	bne.n	8002fa6 <UART_SetConfig+0x1da>
 8002fa4:	e08d      	b.n	80030c2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002faa:	4b59      	ldr	r3, [pc, #356]	@ (8003110 <UART_SetConfig+0x344>)
 8002fac:	0052      	lsls	r2, r2, #1
 8002fae:	5ad3      	ldrh	r3, [r2, r3]
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7fd f8b6 	bl	8000124 <__udivsi3>
 8002fb8:	0003      	movs	r3, r0
 8002fba:	005a      	lsls	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	085b      	lsrs	r3, r3, #1
 8002fc2:	18d2      	adds	r2, r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0019      	movs	r1, r3
 8002fca:	0010      	movs	r0, r2
 8002fcc:	f7fd f8aa 	bl	8000124 <__udivsi3>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	d91c      	bls.n	8003014 <UART_SetConfig+0x248>
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	025b      	lsls	r3, r3, #9
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d217      	bcs.n	8003014 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	200e      	movs	r0, #14
 8002fea:	183b      	adds	r3, r7, r0
 8002fec:	210f      	movs	r1, #15
 8002fee:	438a      	bics	r2, r1
 8002ff0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	b299      	uxth	r1, r3
 8002ffe:	183b      	adds	r3, r7, r0
 8003000:	183a      	adds	r2, r7, r0
 8003002:	8812      	ldrh	r2, [r2, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	183a      	adds	r2, r7, r0
 800300e:	8812      	ldrh	r2, [r2, #0]
 8003010:	60da      	str	r2, [r3, #12]
 8003012:	e056      	b.n	80030c2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003014:	231a      	movs	r3, #26
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e051      	b.n	80030c2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800301e:	231b      	movs	r3, #27
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d015      	beq.n	8003054 <UART_SetConfig+0x288>
 8003028:	dc18      	bgt.n	800305c <UART_SetConfig+0x290>
 800302a:	2b04      	cmp	r3, #4
 800302c:	d00d      	beq.n	800304a <UART_SetConfig+0x27e>
 800302e:	dc15      	bgt.n	800305c <UART_SetConfig+0x290>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <UART_SetConfig+0x26e>
 8003034:	2b02      	cmp	r3, #2
 8003036:	d005      	beq.n	8003044 <UART_SetConfig+0x278>
 8003038:	e010      	b.n	800305c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800303a:	f7fe fe0b 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 800303e:	0003      	movs	r3, r0
 8003040:	617b      	str	r3, [r7, #20]
        break;
 8003042:	e012      	b.n	800306a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003044:	4b31      	ldr	r3, [pc, #196]	@ (800310c <UART_SetConfig+0x340>)
 8003046:	617b      	str	r3, [r7, #20]
        break;
 8003048:	e00f      	b.n	800306a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800304a:	f7fe fd77 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 800304e:	0003      	movs	r3, r0
 8003050:	617b      	str	r3, [r7, #20]
        break;
 8003052:	e00a      	b.n	800306a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	021b      	lsls	r3, r3, #8
 8003058:	617b      	str	r3, [r7, #20]
        break;
 800305a:	e006      	b.n	800306a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003060:	231a      	movs	r3, #26
 8003062:	18fb      	adds	r3, r7, r3
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
        break;
 8003068:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d028      	beq.n	80030c2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003074:	4b26      	ldr	r3, [pc, #152]	@ (8003110 <UART_SetConfig+0x344>)
 8003076:	0052      	lsls	r2, r2, #1
 8003078:	5ad3      	ldrh	r3, [r2, r3]
 800307a:	0019      	movs	r1, r3
 800307c:	6978      	ldr	r0, [r7, #20]
 800307e:	f7fd f851 	bl	8000124 <__udivsi3>
 8003082:	0003      	movs	r3, r0
 8003084:	001a      	movs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	18d2      	adds	r2, r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	0019      	movs	r1, r3
 8003094:	0010      	movs	r0, r2
 8003096:	f7fd f845 	bl	8000124 <__udivsi3>
 800309a:	0003      	movs	r3, r0
 800309c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d90a      	bls.n	80030ba <UART_SetConfig+0x2ee>
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	025b      	lsls	r3, r3, #9
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d205      	bcs.n	80030ba <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60da      	str	r2, [r3, #12]
 80030b8:	e003      	b.n	80030c2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80030ba:	231a      	movs	r3, #26
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	226a      	movs	r2, #106	@ 0x6a
 80030c6:	2101      	movs	r1, #1
 80030c8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2268      	movs	r2, #104	@ 0x68
 80030ce:	2101      	movs	r1, #1
 80030d0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80030de:	231a      	movs	r3, #26
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	781b      	ldrb	r3, [r3, #0]
}
 80030e4:	0018      	movs	r0, r3
 80030e6:	46bd      	mov	sp, r7
 80030e8:	b008      	add	sp, #32
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	cfff69f3 	.word	0xcfff69f3
 80030f0:	ffffcfff 	.word	0xffffcfff
 80030f4:	11fff4ff 	.word	0x11fff4ff
 80030f8:	40013800 	.word	0x40013800
 80030fc:	40021000 	.word	0x40021000
 8003100:	40004400 	.word	0x40004400
 8003104:	40004800 	.word	0x40004800
 8003108:	40004c00 	.word	0x40004c00
 800310c:	00f42400 	.word	0x00f42400
 8003110:	08007a24 	.word	0x08007a24

08003114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	2208      	movs	r2, #8
 8003122:	4013      	ands	r3, r2
 8003124:	d00b      	beq.n	800313e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a4a      	ldr	r2, [pc, #296]	@ (8003258 <UART_AdvFeatureConfig+0x144>)
 800312e:	4013      	ands	r3, r2
 8003130:	0019      	movs	r1, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003142:	2201      	movs	r2, #1
 8003144:	4013      	ands	r3, r2
 8003146:	d00b      	beq.n	8003160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4a43      	ldr	r2, [pc, #268]	@ (800325c <UART_AdvFeatureConfig+0x148>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d00b      	beq.n	8003182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	4a3b      	ldr	r2, [pc, #236]	@ (8003260 <UART_AdvFeatureConfig+0x14c>)
 8003172:	4013      	ands	r3, r2
 8003174:	0019      	movs	r1, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	2204      	movs	r2, #4
 8003188:	4013      	ands	r3, r2
 800318a:	d00b      	beq.n	80031a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a34      	ldr	r2, [pc, #208]	@ (8003264 <UART_AdvFeatureConfig+0x150>)
 8003194:	4013      	ands	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a8:	2210      	movs	r2, #16
 80031aa:	4013      	ands	r3, r2
 80031ac:	d00b      	beq.n	80031c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003268 <UART_AdvFeatureConfig+0x154>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	0019      	movs	r1, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	2220      	movs	r2, #32
 80031cc:	4013      	ands	r3, r2
 80031ce:	d00b      	beq.n	80031e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4a25      	ldr	r2, [pc, #148]	@ (800326c <UART_AdvFeatureConfig+0x158>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	2240      	movs	r2, #64	@ 0x40
 80031ee:	4013      	ands	r3, r2
 80031f0:	d01d      	beq.n	800322e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003270 <UART_AdvFeatureConfig+0x15c>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	0019      	movs	r1, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800320e:	2380      	movs	r3, #128	@ 0x80
 8003210:	035b      	lsls	r3, r3, #13
 8003212:	429a      	cmp	r2, r3
 8003214:	d10b      	bne.n	800322e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a15      	ldr	r2, [pc, #84]	@ (8003274 <UART_AdvFeatureConfig+0x160>)
 800321e:	4013      	ands	r3, r2
 8003220:	0019      	movs	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003232:	2280      	movs	r2, #128	@ 0x80
 8003234:	4013      	ands	r3, r2
 8003236:	d00b      	beq.n	8003250 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a0e      	ldr	r2, [pc, #56]	@ (8003278 <UART_AdvFeatureConfig+0x164>)
 8003240:	4013      	ands	r3, r2
 8003242:	0019      	movs	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}
 8003258:	ffff7fff 	.word	0xffff7fff
 800325c:	fffdffff 	.word	0xfffdffff
 8003260:	fffeffff 	.word	0xfffeffff
 8003264:	fffbffff 	.word	0xfffbffff
 8003268:	ffffefff 	.word	0xffffefff
 800326c:	ffffdfff 	.word	0xffffdfff
 8003270:	ffefffff 	.word	0xffefffff
 8003274:	ff9fffff 	.word	0xff9fffff
 8003278:	fff7ffff 	.word	0xfff7ffff

0800327c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b092      	sub	sp, #72	@ 0x48
 8003280:	af02      	add	r7, sp, #8
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2290      	movs	r2, #144	@ 0x90
 8003288:	2100      	movs	r1, #0
 800328a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800328c:	f7fd fcfa 	bl	8000c84 <HAL_GetTick>
 8003290:	0003      	movs	r3, r0
 8003292:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2208      	movs	r2, #8
 800329c:	4013      	ands	r3, r2
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d12d      	bne.n	80032fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032a4:	2280      	movs	r2, #128	@ 0x80
 80032a6:	0391      	lsls	r1, r2, #14
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4a47      	ldr	r2, [pc, #284]	@ (80033c8 <UART_CheckIdleState+0x14c>)
 80032ac:	9200      	str	r2, [sp, #0]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f000 f88e 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d022      	beq.n	80032fe <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032b8:	f3ef 8310 	mrs	r3, PRIMASK
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032c2:	2301      	movs	r3, #1
 80032c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c8:	f383 8810 	msr	PRIMASK, r3
}
 80032cc:	46c0      	nop			@ (mov r8, r8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2180      	movs	r1, #128	@ 0x80
 80032da:	438a      	bics	r2, r1
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2288      	movs	r2, #136	@ 0x88
 80032ee:	2120      	movs	r1, #32
 80032f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2284      	movs	r2, #132	@ 0x84
 80032f6:	2100      	movs	r1, #0
 80032f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e060      	b.n	80033c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2204      	movs	r2, #4
 8003306:	4013      	ands	r3, r2
 8003308:	2b04      	cmp	r3, #4
 800330a:	d146      	bne.n	800339a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330e:	2280      	movs	r2, #128	@ 0x80
 8003310:	03d1      	lsls	r1, r2, #15
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	4a2c      	ldr	r2, [pc, #176]	@ (80033c8 <UART_CheckIdleState+0x14c>)
 8003316:	9200      	str	r2, [sp, #0]
 8003318:	2200      	movs	r2, #0
 800331a:	f000 f859 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 800331e:	1e03      	subs	r3, r0, #0
 8003320:	d03b      	beq.n	800339a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003322:	f3ef 8310 	mrs	r3, PRIMASK
 8003326:	60fb      	str	r3, [r7, #12]
  return(result);
 8003328:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800332a:	637b      	str	r3, [r7, #52]	@ 0x34
 800332c:	2301      	movs	r3, #1
 800332e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f383 8810 	msr	PRIMASK, r3
}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4922      	ldr	r1, [pc, #136]	@ (80033cc <UART_CheckIdleState+0x150>)
 8003344:	400a      	ands	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f383 8810 	msr	PRIMASK, r3
}
 8003352:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003354:	f3ef 8310 	mrs	r3, PRIMASK
 8003358:	61bb      	str	r3, [r7, #24]
  return(result);
 800335a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	633b      	str	r3, [r7, #48]	@ 0x30
 800335e:	2301      	movs	r3, #1
 8003360:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			@ (mov r8, r8)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	438a      	bics	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	228c      	movs	r2, #140	@ 0x8c
 800338a:	2120      	movs	r1, #32
 800338c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2284      	movs	r2, #132	@ 0x84
 8003392:	2100      	movs	r1, #0
 8003394:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e012      	b.n	80033c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2288      	movs	r2, #136	@ 0x88
 800339e:	2120      	movs	r1, #32
 80033a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	228c      	movs	r2, #140	@ 0x8c
 80033a6:	2120      	movs	r1, #32
 80033a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2284      	movs	r2, #132	@ 0x84
 80033ba:	2100      	movs	r1, #0
 80033bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	0018      	movs	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b010      	add	sp, #64	@ 0x40
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	01ffffff 	.word	0x01ffffff
 80033cc:	fffffedf 	.word	0xfffffedf

080033d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	1dfb      	adds	r3, r7, #7
 80033de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e0:	e051      	b.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	3301      	adds	r3, #1
 80033e6:	d04e      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e8:	f7fd fc4c 	bl	8000c84 <HAL_GetTick>
 80033ec:	0002      	movs	r2, r0
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d302      	bcc.n	80033fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e051      	b.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2204      	movs	r2, #4
 800340a:	4013      	ands	r3, r2
 800340c:	d03b      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb6>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2b80      	cmp	r3, #128	@ 0x80
 8003412:	d038      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b40      	cmp	r3, #64	@ 0x40
 8003418:	d035      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	2208      	movs	r2, #8
 8003422:	4013      	ands	r3, r2
 8003424:	2b08      	cmp	r3, #8
 8003426:	d111      	bne.n	800344c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2208      	movs	r2, #8
 800342e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	0018      	movs	r0, r3
 8003434:	f000 f83c 	bl	80034b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2290      	movs	r2, #144	@ 0x90
 800343c:	2108      	movs	r1, #8
 800343e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2284      	movs	r2, #132	@ 0x84
 8003444:	2100      	movs	r1, #0
 8003446:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e02c      	b.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69da      	ldr	r2, [r3, #28]
 8003452:	2380      	movs	r3, #128	@ 0x80
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	401a      	ands	r2, r3
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	429a      	cmp	r2, r3
 800345e:	d112      	bne.n	8003486 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2280      	movs	r2, #128	@ 0x80
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	0018      	movs	r0, r3
 800346e:	f000 f81f 	bl	80034b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2290      	movs	r2, #144	@ 0x90
 8003476:	2120      	movs	r1, #32
 8003478:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2284      	movs	r2, #132	@ 0x84
 800347e:	2100      	movs	r1, #0
 8003480:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e00f      	b.n	80034a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	4013      	ands	r3, r2
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	425a      	negs	r2, r3
 8003496:	4153      	adcs	r3, r2
 8003498:	b2db      	uxtb	r3, r3
 800349a:	001a      	movs	r2, r3
 800349c:	1dfb      	adds	r3, r7, #7
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d09e      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	0018      	movs	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b004      	add	sp, #16
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b08e      	sub	sp, #56	@ 0x38
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b8:	f3ef 8310 	mrs	r3, PRIMASK
 80034bc:	617b      	str	r3, [r7, #20]
  return(result);
 80034be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80034c2:	2301      	movs	r3, #1
 80034c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			@ (mov r8, r8)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4926      	ldr	r1, [pc, #152]	@ (8003574 <UART_EndRxTransfer+0xc4>)
 80034da:	400a      	ands	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f383 8810 	msr	PRIMASK, r3
}
 80034e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ea:	f3ef 8310 	mrs	r3, PRIMASK
 80034ee:	623b      	str	r3, [r7, #32]
  return(result);
 80034f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80034f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80034f4:	2301      	movs	r3, #1
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	491b      	ldr	r1, [pc, #108]	@ (8003578 <UART_EndRxTransfer+0xc8>)
 800350c:	400a      	ands	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003516:	f383 8810 	msr	PRIMASK, r3
}
 800351a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003520:	2b01      	cmp	r3, #1
 8003522:	d118      	bne.n	8003556 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003524:	f3ef 8310 	mrs	r3, PRIMASK
 8003528:	60bb      	str	r3, [r7, #8]
  return(result);
 800352a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800352e:	2301      	movs	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f383 8810 	msr	PRIMASK, r3
}
 8003538:	46c0      	nop			@ (mov r8, r8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2110      	movs	r1, #16
 8003546:	438a      	bics	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f383 8810 	msr	PRIMASK, r3
}
 8003554:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	228c      	movs	r2, #140	@ 0x8c
 800355a:	2120      	movs	r1, #32
 800355c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b00e      	add	sp, #56	@ 0x38
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	fffffedf 	.word	0xfffffedf
 8003578:	effffffe 	.word	0xeffffffe

0800357c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2284      	movs	r2, #132	@ 0x84
 8003588:	5c9b      	ldrb	r3, [r3, r2]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_UARTEx_DisableFifoMode+0x16>
 800358e:	2302      	movs	r3, #2
 8003590:	e027      	b.n	80035e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2284      	movs	r2, #132	@ 0x84
 8003596:	2101      	movs	r1, #1
 8003598:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2288      	movs	r2, #136	@ 0x88
 800359e:	2124      	movs	r1, #36	@ 0x24
 80035a0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	438a      	bics	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4a0b      	ldr	r2, [pc, #44]	@ (80035ec <HAL_UARTEx_DisableFifoMode+0x70>)
 80035be:	4013      	ands	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2288      	movs	r2, #136	@ 0x88
 80035d4:	2120      	movs	r1, #32
 80035d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2284      	movs	r2, #132	@ 0x84
 80035dc:	2100      	movs	r1, #0
 80035de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b004      	add	sp, #16
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	dfffffff 	.word	0xdfffffff

080035f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2284      	movs	r2, #132	@ 0x84
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003604:	2302      	movs	r3, #2
 8003606:	e02e      	b.n	8003666 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2284      	movs	r2, #132	@ 0x84
 800360c:	2101      	movs	r1, #1
 800360e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2288      	movs	r2, #136	@ 0x88
 8003614:	2124      	movs	r1, #36	@ 0x24
 8003616:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2101      	movs	r1, #1
 800362c:	438a      	bics	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	08d9      	lsrs	r1, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	0018      	movs	r0, r3
 8003648:	f000 f854 	bl	80036f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2288      	movs	r2, #136	@ 0x88
 8003658:	2120      	movs	r1, #32
 800365a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2284      	movs	r2, #132	@ 0x84
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b004      	add	sp, #16
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2284      	movs	r2, #132	@ 0x84
 800367e:	5c9b      	ldrb	r3, [r3, r2]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003684:	2302      	movs	r3, #2
 8003686:	e02f      	b.n	80036e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2284      	movs	r2, #132	@ 0x84
 800368c:	2101      	movs	r1, #1
 800368e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2288      	movs	r2, #136	@ 0x88
 8003694:	2124      	movs	r1, #36	@ 0x24
 8003696:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2101      	movs	r1, #1
 80036ac:	438a      	bics	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4a0e      	ldr	r2, [pc, #56]	@ (80036f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80036b8:	4013      	ands	r3, r2
 80036ba:	0019      	movs	r1, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f000 f813 	bl	80036f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2288      	movs	r2, #136	@ 0x88
 80036da:	2120      	movs	r1, #32
 80036dc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2284      	movs	r2, #132	@ 0x84
 80036e2:	2100      	movs	r1, #0
 80036e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	f1ffffff 	.word	0xf1ffffff

080036f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003700:	2b00      	cmp	r3, #0
 8003702:	d108      	bne.n	8003716 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	226a      	movs	r2, #106	@ 0x6a
 8003708:	2101      	movs	r1, #1
 800370a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2268      	movs	r2, #104	@ 0x68
 8003710:	2101      	movs	r1, #1
 8003712:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003714:	e043      	b.n	800379e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003716:	260f      	movs	r6, #15
 8003718:	19bb      	adds	r3, r7, r6
 800371a:	2208      	movs	r2, #8
 800371c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800371e:	200e      	movs	r0, #14
 8003720:	183b      	adds	r3, r7, r0
 8003722:	2208      	movs	r2, #8
 8003724:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	0e5b      	lsrs	r3, r3, #25
 800372e:	b2da      	uxtb	r2, r3
 8003730:	240d      	movs	r4, #13
 8003732:	193b      	adds	r3, r7, r4
 8003734:	2107      	movs	r1, #7
 8003736:	400a      	ands	r2, r1
 8003738:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	0f5b      	lsrs	r3, r3, #29
 8003742:	b2da      	uxtb	r2, r3
 8003744:	250c      	movs	r5, #12
 8003746:	197b      	adds	r3, r7, r5
 8003748:	2107      	movs	r1, #7
 800374a:	400a      	ands	r2, r1
 800374c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800374e:	183b      	adds	r3, r7, r0
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	197a      	adds	r2, r7, r5
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	4914      	ldr	r1, [pc, #80]	@ (80037a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003758:	5c8a      	ldrb	r2, [r1, r2]
 800375a:	435a      	muls	r2, r3
 800375c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800375e:	197b      	adds	r3, r7, r5
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <UARTEx_SetNbDataToProcess+0xb8>)
 8003764:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003766:	0019      	movs	r1, r3
 8003768:	f7fc fd66 	bl	8000238 <__divsi3>
 800376c:	0003      	movs	r3, r0
 800376e:	b299      	uxth	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	226a      	movs	r2, #106	@ 0x6a
 8003774:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003776:	19bb      	adds	r3, r7, r6
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	193a      	adds	r2, r7, r4
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	490a      	ldr	r1, [pc, #40]	@ (80037a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003780:	5c8a      	ldrb	r2, [r1, r2]
 8003782:	435a      	muls	r2, r3
 8003784:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003786:	193b      	adds	r3, r7, r4
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <UARTEx_SetNbDataToProcess+0xb8>)
 800378c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800378e:	0019      	movs	r1, r3
 8003790:	f7fc fd52 	bl	8000238 <__divsi3>
 8003794:	0003      	movs	r3, r0
 8003796:	b299      	uxth	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2268      	movs	r2, #104	@ 0x68
 800379c:	5299      	strh	r1, [r3, r2]
}
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b005      	add	sp, #20
 80037a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	08007a3c 	.word	0x08007a3c
 80037ac:	08007a44 	.word	0x08007a44

080037b0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80037b4:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <MX_FATFS_Init+0x28>)
 80037b6:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <MX_FATFS_Init+0x2c>)
 80037b8:	0011      	movs	r1, r2
 80037ba:	0018      	movs	r0, r3
 80037bc:	f003 fb32 	bl	8006e24 <FATFS_LinkDriver>
 80037c0:	1e03      	subs	r3, r0, #0
 80037c2:	d002      	beq.n	80037ca <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	425b      	negs	r3, r3
 80037c8:	e003      	b.n	80037d2 <MX_FATFS_Init+0x22>
  }
  else
  {
    Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 80037ca:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <MX_FATFS_Init+0x30>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80037d0:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80037d2:	0018      	movs	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20000290 	.word	0x20000290
 80037dc:	2000000c 	.word	0x2000000c
 80037e0:	20000294 	.word	0x20000294

080037e4 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80037e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	0002      	movs	r2, r0
 80037f8:	1dfb      	adds	r3, r7, #7
 80037fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	0018      	movs	r0, r3
 8003802:	f000 fa19 	bl	8003c38 <USER_SPI_initialize>
 8003806:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}

08003810 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	0002      	movs	r2, r0
 8003818:	1dfb      	adds	r3, r7, #7
 800381a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800381c:	1dfb      	adds	r3, r7, #7
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	0018      	movs	r0, r3
 8003822:	f000 fb21 	bl	8003e68 <USER_SPI_status>
 8003826:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003830:	b5b0      	push	{r4, r5, r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	250f      	movs	r5, #15
 800383e:	197b      	adds	r3, r7, r5
 8003840:	1c02      	adds	r2, r0, #0
 8003842:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 8003844:	683c      	ldr	r4, [r7, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	197b      	adds	r3, r7, r5
 800384c:	7818      	ldrb	r0, [r3, #0]
 800384e:	0023      	movs	r3, r4
 8003850:	f000 fb20 	bl	8003e94 <USER_SPI_read>
 8003854:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b004      	add	sp, #16
 800385c:	bdb0      	pop	{r4, r5, r7, pc}

0800385e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800385e:	b5b0      	push	{r4, r5, r7, lr}
 8003860:	b084      	sub	sp, #16
 8003862:	af00      	add	r7, sp, #0
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	250f      	movs	r5, #15
 800386c:	197b      	adds	r3, r7, r5
 800386e:	1c02      	adds	r2, r0, #0
 8003870:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 8003872:	683c      	ldr	r4, [r7, #0]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	197b      	adds	r3, r7, r5
 800387a:	7818      	ldrb	r0, [r3, #0]
 800387c:	0023      	movs	r3, r4
 800387e:	f000 fb75 	bl	8003f6c <USER_SPI_write>
 8003882:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b004      	add	sp, #16
 800388a:	bdb0      	pop	{r4, r5, r7, pc}

0800388c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	603a      	str	r2, [r7, #0]
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	1c02      	adds	r2, r0, #0
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	1dbb      	adds	r3, r7, #6
 800389c:	1c0a      	adds	r2, r1, #0
 800389e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	1dbb      	adds	r3, r7, #6
 80038a4:	7819      	ldrb	r1, [r3, #0]
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 fbde 	bl	800406c <USER_SPI_ioctl>
 80038b0:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80038b2:	0018      	movs	r0, r3
 80038b4:	46bd      	mov	sp, r7
 80038b6:	b002      	add	sp, #8
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80038c4:	f7fd f9de 	bl	8000c84 <HAL_GetTick>
 80038c8:	0002      	movs	r2, r0
 80038ca:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <SPI_Timer_On+0x20>)
 80038cc:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80038ce:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <SPI_Timer_On+0x24>)
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	601a      	str	r2, [r3, #0]
}
 80038d4:	46c0      	nop			@ (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	20000298 	.word	0x20000298
 80038e0:	2000029c 	.word	0x2000029c

080038e4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80038e8:	f7fd f9cc 	bl	8000c84 <HAL_GetTick>
 80038ec:	0002      	movs	r2, r0
 80038ee:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <SPI_Timer_Status+0x24>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1ad2      	subs	r2, r2, r3
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <SPI_Timer_Status+0x28>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	419b      	sbcs	r3, r3
 80038fc:	425b      	negs	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
}
 8003900:	0018      	movs	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	46c0      	nop			@ (mov r8, r8)
 8003908:	20000298 	.word	0x20000298
 800390c:	2000029c 	.word	0x2000029c

08003910 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003910:	b590      	push	{r4, r7, lr}
 8003912:	b087      	sub	sp, #28
 8003914:	af02      	add	r7, sp, #8
 8003916:	0002      	movs	r2, r0
 8003918:	1dfb      	adds	r3, r7, #7
 800391a:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800391c:	240f      	movs	r4, #15
 800391e:	193a      	adds	r2, r7, r4
 8003920:	1df9      	adds	r1, r7, #7
 8003922:	4806      	ldr	r0, [pc, #24]	@ (800393c <xchg_spi+0x2c>)
 8003924:	2332      	movs	r3, #50	@ 0x32
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2301      	movs	r3, #1
 800392a:	f7fe fcf5 	bl	8002318 <HAL_SPI_TransmitReceive>
    return rxDat;
 800392e:	193b      	adds	r3, r7, r4
 8003930:	781b      	ldrb	r3, [r3, #0]
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b005      	add	sp, #20
 8003938:	bd90      	pop	{r4, r7, pc}
 800393a:	46c0      	nop			@ (mov r8, r8)
 800393c:	20000190 	.word	0x20000190

08003940 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e00a      	b.n	8003966 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	18d4      	adds	r4, r2, r3
 8003956:	20ff      	movs	r0, #255	@ 0xff
 8003958:	f7ff ffda 	bl	8003910 <xchg_spi>
 800395c:	0003      	movs	r3, r0
 800395e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3301      	adds	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d3f0      	bcc.n	8003950 <rcvr_spi_multi+0x10>
	}
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46c0      	nop			@ (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b005      	add	sp, #20
 8003976:	bd90      	pop	{r4, r7, pc}

08003978 <xmit_spi_multi>:
static
void xmit_spi_multi (
	uint8_t *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b29a      	uxth	r2, r3
 8003986:	2301      	movs	r3, #1
 8003988:	425b      	negs	r3, r3
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4803      	ldr	r0, [pc, #12]	@ (800399c <xmit_spi_multi+0x24>)
 800398e:	f7fe fb63 	bl	8002058 <HAL_SPI_Transmit>
}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	20000190 	.word	0x20000190

080039a0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80039a0:	b5b0      	push	{r4, r5, r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80039a8:	f7fd f96c 	bl	8000c84 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80039b4:	250f      	movs	r5, #15
 80039b6:	197c      	adds	r4, r7, r5
 80039b8:	20ff      	movs	r0, #255	@ 0xff
 80039ba:	f7ff ffa9 	bl	8003910 <xchg_spi>
 80039be:	0003      	movs	r3, r0
 80039c0:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80039c2:	197b      	adds	r3, r7, r5
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2bff      	cmp	r3, #255	@ 0xff
 80039c8:	d007      	beq.n	80039da <wait_ready+0x3a>
 80039ca:	f7fd f95b 	bl	8000c84 <HAL_GetTick>
 80039ce:	0002      	movs	r2, r0
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d8ec      	bhi.n	80039b4 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 80039da:	230f      	movs	r3, #15
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	3bff      	subs	r3, #255	@ 0xff
 80039e2:	425a      	negs	r2, r3
 80039e4:	4153      	adcs	r3, r2
 80039e6:	b2db      	uxtb	r3, r3
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b006      	add	sp, #24
 80039ee:	bdb0      	pop	{r4, r5, r7, pc}

080039f0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80039f4:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <despiselect+0x1c>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	2102      	movs	r1, #2
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7fd fc1c 	bl	8001238 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003a00:	20ff      	movs	r0, #255	@ 0xff
 8003a02:	f7ff ff85 	bl	8003910 <xchg_spi>

}
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	50000400 	.word	0x50000400

08003a10 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003a14:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <spiselect+0x34>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	2102      	movs	r1, #2
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fd fc0c 	bl	8001238 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003a20:	20ff      	movs	r0, #255	@ 0xff
 8003a22:	f7ff ff75 	bl	8003910 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003a26:	23fa      	movs	r3, #250	@ 0xfa
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f7ff ffb8 	bl	80039a0 <wait_ready>
 8003a30:	1e03      	subs	r3, r0, #0
 8003a32:	d001      	beq.n	8003a38 <spiselect+0x28>
 8003a34:	2301      	movs	r3, #1
 8003a36:	e002      	b.n	8003a3e <spiselect+0x2e>

	despiselect();
 8003a38:	f7ff ffda 	bl	80039f0 <despiselect>
	return 0;	/* Timeout */
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	50000400 	.word	0x50000400

08003a48 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003a48:	b5b0      	push	{r4, r5, r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003a52:	20c8      	movs	r0, #200	@ 0xc8
 8003a54:	f7ff ff32 	bl	80038bc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003a58:	250f      	movs	r5, #15
 8003a5a:	197c      	adds	r4, r7, r5
 8003a5c:	20ff      	movs	r0, #255	@ 0xff
 8003a5e:	f7ff ff57 	bl	8003910 <xchg_spi>
 8003a62:	0003      	movs	r3, r0
 8003a64:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003a66:	197b      	adds	r3, r7, r5
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2bff      	cmp	r3, #255	@ 0xff
 8003a6c:	d103      	bne.n	8003a76 <rcvr_datablock+0x2e>
 8003a6e:	f7ff ff39 	bl	80038e4 <SPI_Timer_Status>
 8003a72:	1e03      	subs	r3, r0, #0
 8003a74:	d1f0      	bne.n	8003a58 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003a76:	230f      	movs	r3, #15
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2bfe      	cmp	r3, #254	@ 0xfe
 8003a7e:	d001      	beq.n	8003a84 <rcvr_datablock+0x3c>
 8003a80:	2300      	movs	r3, #0
 8003a82:	e00c      	b.n	8003a9e <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0011      	movs	r1, r2
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f7ff ff58 	bl	8003940 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003a90:	20ff      	movs	r0, #255	@ 0xff
 8003a92:	f7ff ff3d 	bl	8003910 <xchg_spi>
 8003a96:	20ff      	movs	r0, #255	@ 0xff
 8003a98:	f7ff ff3a 	bl	8003910 <xchg_spi>

	return 1;						/* Function succeeded */
 8003a9c:	2301      	movs	r3, #1
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bdb0      	pop	{r4, r5, r7, pc}

08003aa6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003aa6:	b5b0      	push	{r4, r5, r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	000a      	movs	r2, r1
 8003ab0:	1cfb      	adds	r3, r7, #3
 8003ab2:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003ab4:	23fa      	movs	r3, #250	@ 0xfa
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	0018      	movs	r0, r3
 8003aba:	f7ff ff71 	bl	80039a0 <wait_ready>
 8003abe:	1e03      	subs	r3, r0, #0
 8003ac0:	d101      	bne.n	8003ac6 <xmit_datablock+0x20>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	e025      	b.n	8003b12 <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8003ac6:	1cfb      	adds	r3, r7, #3
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7ff ff20 	bl	8003910 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003ad0:	1cfb      	adds	r3, r7, #3
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2bfd      	cmp	r3, #253	@ 0xfd
 8003ad6:	d01b      	beq.n	8003b10 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003ad8:	2380      	movs	r3, #128	@ 0x80
 8003ada:	009a      	lsls	r2, r3, #2
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	0011      	movs	r1, r2
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff ff49 	bl	8003978 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003ae6:	20ff      	movs	r0, #255	@ 0xff
 8003ae8:	f7ff ff12 	bl	8003910 <xchg_spi>
 8003aec:	20ff      	movs	r0, #255	@ 0xff
 8003aee:	f7ff ff0f 	bl	8003910 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003af2:	250f      	movs	r5, #15
 8003af4:	197c      	adds	r4, r7, r5
 8003af6:	20ff      	movs	r0, #255	@ 0xff
 8003af8:	f7ff ff0a 	bl	8003910 <xchg_spi>
 8003afc:	0003      	movs	r3, r0
 8003afe:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003b00:	197b      	adds	r3, r7, r5
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	221f      	movs	r2, #31
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b05      	cmp	r3, #5
 8003b0a:	d001      	beq.n	8003b10 <xmit_datablock+0x6a>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <xmit_datablock+0x6c>
	}
	return 1;
 8003b10:	2301      	movs	r3, #1
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b004      	add	sp, #16
 8003b18:	bdb0      	pop	{r4, r5, r7, pc}

08003b1a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003b1a:	b5b0      	push	{r4, r5, r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	0002      	movs	r2, r0
 8003b22:	6039      	str	r1, [r7, #0]
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003b28:	1dfb      	adds	r3, r7, #7
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b25b      	sxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da15      	bge.n	8003b5e <send_cmd+0x44>
		cmd &= 0x7F;
 8003b32:	1dfb      	adds	r3, r7, #7
 8003b34:	1dfa      	adds	r2, r7, #7
 8003b36:	7812      	ldrb	r2, [r2, #0]
 8003b38:	217f      	movs	r1, #127	@ 0x7f
 8003b3a:	400a      	ands	r2, r1
 8003b3c:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8003b3e:	250e      	movs	r5, #14
 8003b40:	197c      	adds	r4, r7, r5
 8003b42:	2100      	movs	r1, #0
 8003b44:	2037      	movs	r0, #55	@ 0x37
 8003b46:	f7ff ffe8 	bl	8003b1a <send_cmd>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8003b4e:	002a      	movs	r2, r5
 8003b50:	18bb      	adds	r3, r7, r2
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d902      	bls.n	8003b5e <send_cmd+0x44>
 8003b58:	18bb      	adds	r3, r7, r2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	e067      	b.n	8003c2e <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003b5e:	1dfb      	adds	r3, r7, #7
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b0c      	cmp	r3, #12
 8003b64:	d007      	beq.n	8003b76 <send_cmd+0x5c>
		despiselect();
 8003b66:	f7ff ff43 	bl	80039f0 <despiselect>
		if (!spiselect()) return 0xFF;
 8003b6a:	f7ff ff51 	bl	8003a10 <spiselect>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d101      	bne.n	8003b76 <send_cmd+0x5c>
 8003b72:	23ff      	movs	r3, #255	@ 0xff
 8003b74:	e05b      	b.n	8003c2e <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2240      	movs	r2, #64	@ 0x40
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff fec5 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7ff febf 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	0c1b      	lsrs	r3, r3, #16
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff feb9 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7ff feb3 	bl	8003910 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f7ff feae 	bl	8003910 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003bbc:	1dfb      	adds	r3, r7, #7
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <send_cmd+0xb0>
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	2295      	movs	r2, #149	@ 0x95
 8003bc8:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003bca:	1dfb      	adds	r3, r7, #7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d103      	bne.n	8003bda <send_cmd+0xc0>
 8003bd2:	230f      	movs	r3, #15
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	2287      	movs	r2, #135	@ 0x87
 8003bd8:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8003bda:	230f      	movs	r3, #15
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7ff fe95 	bl	8003910 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003be6:	1dfb      	adds	r3, r7, #7
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b0c      	cmp	r3, #12
 8003bec:	d102      	bne.n	8003bf4 <send_cmd+0xda>
 8003bee:	20ff      	movs	r0, #255	@ 0xff
 8003bf0:	f7ff fe8e 	bl	8003910 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003bf4:	230f      	movs	r3, #15
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	220a      	movs	r2, #10
 8003bfa:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8003bfc:	250e      	movs	r5, #14
 8003bfe:	197c      	adds	r4, r7, r5
 8003c00:	20ff      	movs	r0, #255	@ 0xff
 8003c02:	f7ff fe85 	bl	8003910 <xchg_spi>
 8003c06:	0003      	movs	r3, r0
 8003c08:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8003c0a:	197b      	adds	r3, r7, r5
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	da09      	bge.n	8003c28 <send_cmd+0x10e>
 8003c14:	210f      	movs	r1, #15
 8003c16:	187b      	adds	r3, r7, r1
 8003c18:	187a      	adds	r2, r7, r1
 8003c1a:	7812      	ldrb	r2, [r2, #0]
 8003c1c:	3a01      	subs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e9      	bne.n	8003bfc <send_cmd+0xe2>

	return res;							/* Return received response */
 8003c28:	230e      	movs	r3, #14
 8003c2a:	18fb      	adds	r3, r7, r3
 8003c2c:	781b      	ldrb	r3, [r3, #0]
}
 8003c2e:	0018      	movs	r0, r3
 8003c30:	46bd      	mov	sp, r7
 8003c32:	b004      	add	sp, #16
 8003c34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003c38 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003c38:	b5b0      	push	{r4, r5, r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	0002      	movs	r2, r0
 8003c40:	1dfb      	adds	r3, r7, #7
 8003c42:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <USER_SPI_initialize+0x18>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e100      	b.n	8003e52 <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003c50:	4b82      	ldr	r3, [pc, #520]	@ (8003e5c <USER_SPI_initialize+0x224>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	001a      	movs	r2, r3
 8003c58:	2302      	movs	r3, #2
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d003      	beq.n	8003c66 <USER_SPI_initialize+0x2e>
 8003c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e5c <USER_SPI_initialize+0x224>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e0f5      	b.n	8003e52 <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8003c66:	4b7e      	ldr	r3, [pc, #504]	@ (8003e60 <USER_SPI_initialize+0x228>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2238      	movs	r2, #56	@ 0x38
 8003c6e:	4393      	bics	r3, r2
 8003c70:	001a      	movs	r2, r3
 8003c72:	4b7b      	ldr	r3, [pc, #492]	@ (8003e60 <USER_SPI_initialize+0x228>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2128      	movs	r1, #40	@ 0x28
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003c7c:	230f      	movs	r3, #15
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	220a      	movs	r2, #10
 8003c82:	701a      	strb	r2, [r3, #0]
 8003c84:	e008      	b.n	8003c98 <USER_SPI_initialize+0x60>
 8003c86:	20ff      	movs	r0, #255	@ 0xff
 8003c88:	f7ff fe42 	bl	8003910 <xchg_spi>
 8003c8c:	210f      	movs	r1, #15
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	781a      	ldrb	r2, [r3, #0]
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	3a01      	subs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	240f      	movs	r4, #15
 8003c9a:	193b      	adds	r3, r7, r4
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f1      	bne.n	8003c86 <USER_SPI_initialize+0x4e>

	ty = 0;
 8003ca2:	230d      	movs	r3, #13
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003caa:	2100      	movs	r1, #0
 8003cac:	2000      	movs	r0, #0
 8003cae:	f7ff ff34 	bl	8003b1a <send_cmd>
 8003cb2:	0003      	movs	r3, r0
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d000      	beq.n	8003cba <USER_SPI_initialize+0x82>
 8003cb8:	e0a6      	b.n	8003e08 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003cba:	23fa      	movs	r3, #250	@ 0xfa
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f7ff fdfc 	bl	80038bc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003cc4:	23d5      	movs	r3, #213	@ 0xd5
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	0019      	movs	r1, r3
 8003cca:	2008      	movs	r0, #8
 8003ccc:	f7ff ff25 	bl	8003b1a <send_cmd>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d162      	bne.n	8003d9c <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e00f      	b.n	8003cfe <USER_SPI_initialize+0xc6>
 8003cde:	250f      	movs	r5, #15
 8003ce0:	197b      	adds	r3, r7, r5
 8003ce2:	781c      	ldrb	r4, [r3, #0]
 8003ce4:	20ff      	movs	r0, #255	@ 0xff
 8003ce6:	f7ff fe13 	bl	8003910 <xchg_spi>
 8003cea:	0003      	movs	r3, r0
 8003cec:	001a      	movs	r2, r3
 8003cee:	2308      	movs	r3, #8
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	551a      	strb	r2, [r3, r4]
 8003cf4:	197b      	adds	r3, r7, r5
 8003cf6:	781a      	ldrb	r2, [r3, #0]
 8003cf8:	197b      	adds	r3, r7, r5
 8003cfa:	3201      	adds	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	230f      	movs	r3, #15
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d9ea      	bls.n	8003cde <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003d08:	2208      	movs	r2, #8
 8003d0a:	18bb      	adds	r3, r7, r2
 8003d0c:	789b      	ldrb	r3, [r3, #2]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d000      	beq.n	8003d14 <USER_SPI_initialize+0xdc>
 8003d12:	e079      	b.n	8003e08 <USER_SPI_initialize+0x1d0>
 8003d14:	18bb      	adds	r3, r7, r2
 8003d16:	78db      	ldrb	r3, [r3, #3]
 8003d18:	2baa      	cmp	r3, #170	@ 0xaa
 8003d1a:	d000      	beq.n	8003d1e <USER_SPI_initialize+0xe6>
 8003d1c:	e074      	b.n	8003e08 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	f7ff fde0 	bl	80038e4 <SPI_Timer_Status>
 8003d24:	1e03      	subs	r3, r0, #0
 8003d26:	d007      	beq.n	8003d38 <USER_SPI_initialize+0x100>
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	05db      	lsls	r3, r3, #23
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	20a9      	movs	r0, #169	@ 0xa9
 8003d30:	f7ff fef3 	bl	8003b1a <send_cmd>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d1f3      	bne.n	8003d20 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003d38:	f7ff fdd4 	bl	80038e4 <SPI_Timer_Status>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d063      	beq.n	8003e08 <USER_SPI_initialize+0x1d0>
 8003d40:	2100      	movs	r1, #0
 8003d42:	203a      	movs	r0, #58	@ 0x3a
 8003d44:	f7ff fee9 	bl	8003b1a <send_cmd>
 8003d48:	1e03      	subs	r3, r0, #0
 8003d4a:	d15d      	bne.n	8003e08 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003d4c:	230f      	movs	r3, #15
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
 8003d54:	e00f      	b.n	8003d76 <USER_SPI_initialize+0x13e>
 8003d56:	250f      	movs	r5, #15
 8003d58:	197b      	adds	r3, r7, r5
 8003d5a:	781c      	ldrb	r4, [r3, #0]
 8003d5c:	20ff      	movs	r0, #255	@ 0xff
 8003d5e:	f7ff fdd7 	bl	8003910 <xchg_spi>
 8003d62:	0003      	movs	r3, r0
 8003d64:	001a      	movs	r2, r3
 8003d66:	2308      	movs	r3, #8
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	551a      	strb	r2, [r3, r4]
 8003d6c:	197b      	adds	r3, r7, r5
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	197b      	adds	r3, r7, r5
 8003d72:	3201      	adds	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	230f      	movs	r3, #15
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d9ea      	bls.n	8003d56 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003d80:	2308      	movs	r3, #8
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	001a      	movs	r2, r3
 8003d88:	2340      	movs	r3, #64	@ 0x40
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d001      	beq.n	8003d92 <USER_SPI_initialize+0x15a>
 8003d8e:	220c      	movs	r2, #12
 8003d90:	e000      	b.n	8003d94 <USER_SPI_initialize+0x15c>
 8003d92:	2204      	movs	r2, #4
 8003d94:	230d      	movs	r3, #13
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	701a      	strb	r2, [r3, #0]
 8003d9a:	e035      	b.n	8003e08 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	20a9      	movs	r0, #169	@ 0xa9
 8003da0:	f7ff febb 	bl	8003b1a <send_cmd>
 8003da4:	0003      	movs	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d808      	bhi.n	8003dbc <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003daa:	230d      	movs	r3, #13
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	2202      	movs	r2, #2
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	230e      	movs	r3, #14
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	22a9      	movs	r2, #169	@ 0xa9
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e007      	b.n	8003dcc <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003dbc:	230d      	movs	r3, #13
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
 8003dc4:	230e      	movs	r3, #14
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	f7ff fd89 	bl	80038e4 <SPI_Timer_Status>
 8003dd2:	1e03      	subs	r3, r0, #0
 8003dd4:	d008      	beq.n	8003de8 <USER_SPI_initialize+0x1b0>
 8003dd6:	230e      	movs	r3, #14
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7ff fe9b 	bl	8003b1a <send_cmd>
 8003de4:	1e03      	subs	r3, r0, #0
 8003de6:	d1f2      	bne.n	8003dce <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003de8:	f7ff fd7c 	bl	80038e4 <SPI_Timer_Status>
 8003dec:	1e03      	subs	r3, r0, #0
 8003dee:	d007      	beq.n	8003e00 <USER_SPI_initialize+0x1c8>
 8003df0:	2380      	movs	r3, #128	@ 0x80
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	0019      	movs	r1, r3
 8003df6:	2010      	movs	r0, #16
 8003df8:	f7ff fe8f 	bl	8003b1a <send_cmd>
 8003dfc:	1e03      	subs	r3, r0, #0
 8003dfe:	d003      	beq.n	8003e08 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8003e00:	230d      	movs	r3, #13
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8003e08:	4b16      	ldr	r3, [pc, #88]	@ (8003e64 <USER_SPI_initialize+0x22c>)
 8003e0a:	240d      	movs	r4, #13
 8003e0c:	193a      	adds	r2, r7, r4
 8003e0e:	7812      	ldrb	r2, [r2, #0]
 8003e10:	701a      	strb	r2, [r3, #0]
	despiselect();
 8003e12:	f7ff fded 	bl	80039f0 <despiselect>

	if (ty) {			/* OK */
 8003e16:	193b      	adds	r3, r7, r4
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d013      	beq.n	8003e46 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <USER_SPI_initialize+0x228>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2238      	movs	r2, #56	@ 0x38
 8003e26:	4393      	bics	r3, r2
 8003e28:	001a      	movs	r2, r3
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <USER_SPI_initialize+0x228>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2108      	movs	r1, #8
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003e34:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <USER_SPI_initialize+0x224>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <USER_SPI_initialize+0x224>)
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e002      	b.n	8003e4c <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003e46:	4b05      	ldr	r3, [pc, #20]	@ (8003e5c <USER_SPI_initialize+0x224>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	@ (8003e5c <USER_SPI_initialize+0x224>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b2db      	uxtb	r3, r3
}
 8003e52:	0018      	movs	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b004      	add	sp, #16
 8003e58:	bdb0      	pop	{r4, r5, r7, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	20000020 	.word	0x20000020
 8003e60:	20000190 	.word	0x20000190
 8003e64:	20000295 	.word	0x20000295

08003e68 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	0002      	movs	r2, r0
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003e74:	1dfb      	adds	r3, r7, #7
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <USER_SPI_status+0x18>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e002      	b.n	8003e86 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8003e80:	4b03      	ldr	r3, [pc, #12]	@ (8003e90 <USER_SPI_status+0x28>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b002      	add	sp, #8
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	20000020 	.word	0x20000020

08003e94 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	210f      	movs	r1, #15
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	1c02      	adds	r2, r0, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <USER_SPI_read+0x22>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <USER_SPI_read+0x26>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	e04f      	b.n	8003f5a <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003eba:	4b2a      	ldr	r3, [pc, #168]	@ (8003f64 <USER_SPI_read+0xd0>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	001a      	movs	r2, r3
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d001      	beq.n	8003ecc <USER_SPI_read+0x38>
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e046      	b.n	8003f5a <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003ecc:	4b26      	ldr	r3, [pc, #152]	@ (8003f68 <USER_SPI_read+0xd4>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	001a      	movs	r2, r3
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d102      	bne.n	8003ede <USER_SPI_read+0x4a>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	025b      	lsls	r3, r3, #9
 8003edc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d112      	bne.n	8003f0a <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0019      	movs	r1, r3
 8003ee8:	2011      	movs	r0, #17
 8003eea:	f7ff fe16 	bl	8003b1a <send_cmd>
 8003eee:	1e03      	subs	r3, r0, #0
 8003ef0:	d12d      	bne.n	8003f4e <USER_SPI_read+0xba>
			&& rcvr_datablock(buff, 512)) {
 8003ef2:	2380      	movs	r3, #128	@ 0x80
 8003ef4:	009a      	lsls	r2, r3, #2
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff fda4 	bl	8003a48 <rcvr_datablock>
 8003f00:	1e03      	subs	r3, r0, #0
 8003f02:	d024      	beq.n	8003f4e <USER_SPI_read+0xba>
			count = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	e021      	b.n	8003f4e <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	2012      	movs	r0, #18
 8003f10:	f7ff fe03 	bl	8003b1a <send_cmd>
 8003f14:	1e03      	subs	r3, r0, #0
 8003f16:	d11a      	bne.n	8003f4e <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003f18:	2380      	movs	r3, #128	@ 0x80
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	0011      	movs	r1, r2
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff fd91 	bl	8003a48 <rcvr_datablock>
 8003f26:	1e03      	subs	r3, r0, #0
 8003f28:	d00c      	beq.n	8003f44 <USER_SPI_read+0xb0>
				buff += 512;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2280      	movs	r2, #128	@ 0x80
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	4694      	mov	ip, r2
 8003f32:	4463      	add	r3, ip
 8003f34:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ea      	bne.n	8003f18 <USER_SPI_read+0x84>
 8003f42:	e000      	b.n	8003f46 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8003f44:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003f46:	2100      	movs	r1, #0
 8003f48:	200c      	movs	r0, #12
 8003f4a:	f7ff fde6 	bl	8003b1a <send_cmd>
		}
	}
	despiselect();
 8003f4e:	f7ff fd4f 	bl	80039f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	1e5a      	subs	r2, r3, #1
 8003f56:	4193      	sbcs	r3, r2
 8003f58:	b2db      	uxtb	r3, r3
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b004      	add	sp, #16
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	20000020 	.word	0x20000020
 8003f68:	20000295 	.word	0x20000295

08003f6c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	210f      	movs	r1, #15
 8003f7a:	187b      	adds	r3, r7, r1
 8003f7c:	1c02      	adds	r2, r0, #0
 8003f7e:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <USER_SPI_write+0x22>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <USER_SPI_write+0x26>
 8003f8e:	2304      	movs	r3, #4
 8003f90:	e063      	b.n	800405a <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003f92:	4b34      	ldr	r3, [pc, #208]	@ (8004064 <USER_SPI_write+0xf8>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	001a      	movs	r2, r3
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d001      	beq.n	8003fa4 <USER_SPI_write+0x38>
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e05a      	b.n	800405a <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8004064 <USER_SPI_write+0xf8>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	001a      	movs	r2, r3
 8003fac:	2304      	movs	r3, #4
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d001      	beq.n	8003fb6 <USER_SPI_write+0x4a>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e051      	b.n	800405a <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8004068 <USER_SPI_write+0xfc>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	001a      	movs	r2, r3
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d102      	bne.n	8003fc8 <USER_SPI_write+0x5c>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	025b      	lsls	r3, r3, #9
 8003fc6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d110      	bne.n	8003ff0 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	2018      	movs	r0, #24
 8003fd4:	f7ff fda1 	bl	8003b1a <send_cmd>
 8003fd8:	1e03      	subs	r3, r0, #0
 8003fda:	d138      	bne.n	800404e <USER_SPI_write+0xe2>
			&& xmit_datablock(buff, 0xFE)) {
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	21fe      	movs	r1, #254	@ 0xfe
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7ff fd60 	bl	8003aa6 <xmit_datablock>
 8003fe6:	1e03      	subs	r3, r0, #0
 8003fe8:	d031      	beq.n	800404e <USER_SPI_write+0xe2>
			count = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	603b      	str	r3, [r7, #0]
 8003fee:	e02e      	b.n	800404e <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8004068 <USER_SPI_write+0xfc>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	001a      	movs	r2, r3
 8003ff6:	2306      	movs	r3, #6
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d004      	beq.n	8004006 <USER_SPI_write+0x9a>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	0019      	movs	r1, r3
 8004000:	2097      	movs	r0, #151	@ 0x97
 8004002:	f7ff fd8a 	bl	8003b1a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	0019      	movs	r1, r3
 800400a:	2019      	movs	r0, #25
 800400c:	f7ff fd85 	bl	8003b1a <send_cmd>
 8004010:	1e03      	subs	r3, r0, #0
 8004012:	d11c      	bne.n	800404e <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	21fc      	movs	r1, #252	@ 0xfc
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff fd44 	bl	8003aa6 <xmit_datablock>
 800401e:	1e03      	subs	r3, r0, #0
 8004020:	d00c      	beq.n	800403c <USER_SPI_write+0xd0>
				buff += 512;
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2280      	movs	r2, #128	@ 0x80
 8004026:	0092      	lsls	r2, r2, #2
 8004028:	4694      	mov	ip, r2
 800402a:	4463      	add	r3, ip
 800402c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1ec      	bne.n	8004014 <USER_SPI_write+0xa8>
 800403a:	e000      	b.n	800403e <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 800403c:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800403e:	21fd      	movs	r1, #253	@ 0xfd
 8004040:	2000      	movs	r0, #0
 8004042:	f7ff fd30 	bl	8003aa6 <xmit_datablock>
 8004046:	1e03      	subs	r3, r0, #0
 8004048:	d101      	bne.n	800404e <USER_SPI_write+0xe2>
 800404a:	2301      	movs	r3, #1
 800404c:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800404e:	f7ff fccf 	bl	80039f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	1e5a      	subs	r2, r3, #1
 8004056:	4193      	sbcs	r3, r2
 8004058:	b2db      	uxtb	r3, r3
}
 800405a:	0018      	movs	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	b004      	add	sp, #16
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	20000020 	.word	0x20000020
 8004068:	20000295 	.word	0x20000295

0800406c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b08d      	sub	sp, #52	@ 0x34
 8004070:	af00      	add	r7, sp, #0
 8004072:	603a      	str	r2, [r7, #0]
 8004074:	1dfb      	adds	r3, r7, #7
 8004076:	1c02      	adds	r2, r0, #0
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	1dbb      	adds	r3, r7, #6
 800407c:	1c0a      	adds	r2, r1, #0
 800407e:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004080:	1dfb      	adds	r3, r7, #7
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <USER_SPI_ioctl+0x20>
 8004088:	2304      	movs	r3, #4
 800408a:	e178      	b.n	800437e <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800408c:	4bbe      	ldr	r3, [pc, #760]	@ (8004388 <USER_SPI_ioctl+0x31c>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	001a      	movs	r2, r3
 8004094:	2301      	movs	r3, #1
 8004096:	4013      	ands	r3, r2
 8004098:	d001      	beq.n	800409e <USER_SPI_ioctl+0x32>
 800409a:	2303      	movs	r3, #3
 800409c:	e16f      	b.n	800437e <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 800409e:	232f      	movs	r3, #47	@ 0x2f
 80040a0:	18fb      	adds	r3, r7, r3
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 80040a6:	1dbb      	adds	r3, r7, #6
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d100      	bne.n	80040b0 <USER_SPI_ioctl+0x44>
 80040ae:	e100      	b.n	80042b2 <USER_SPI_ioctl+0x246>
 80040b0:	dd00      	ble.n	80040b4 <USER_SPI_ioctl+0x48>
 80040b2:	e14d      	b.n	8004350 <USER_SPI_ioctl+0x2e4>
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d100      	bne.n	80040ba <USER_SPI_ioctl+0x4e>
 80040b8:	e074      	b.n	80041a4 <USER_SPI_ioctl+0x138>
 80040ba:	dd00      	ble.n	80040be <USER_SPI_ioctl+0x52>
 80040bc:	e148      	b.n	8004350 <USER_SPI_ioctl+0x2e4>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <USER_SPI_ioctl+0x5c>
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d00a      	beq.n	80040dc <USER_SPI_ioctl+0x70>
 80040c6:	e143      	b.n	8004350 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80040c8:	f7ff fca2 	bl	8003a10 <spiselect>
 80040cc:	1e03      	subs	r3, r0, #0
 80040ce:	d100      	bne.n	80040d2 <USER_SPI_ioctl+0x66>
 80040d0:	e143      	b.n	800435a <USER_SPI_ioctl+0x2ee>
 80040d2:	232f      	movs	r3, #47	@ 0x2f
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	2200      	movs	r2, #0
 80040d8:	701a      	strb	r2, [r3, #0]
		break;
 80040da:	e13e      	b.n	800435a <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80040dc:	2100      	movs	r1, #0
 80040de:	2009      	movs	r0, #9
 80040e0:	f7ff fd1b 	bl	8003b1a <send_cmd>
 80040e4:	1e03      	subs	r3, r0, #0
 80040e6:	d000      	beq.n	80040ea <USER_SPI_ioctl+0x7e>
 80040e8:	e139      	b.n	800435e <USER_SPI_ioctl+0x2f2>
 80040ea:	240c      	movs	r4, #12
 80040ec:	193b      	adds	r3, r7, r4
 80040ee:	2110      	movs	r1, #16
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff fca9 	bl	8003a48 <rcvr_datablock>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d100      	bne.n	80040fc <USER_SPI_ioctl+0x90>
 80040fa:	e130      	b.n	800435e <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80040fc:	0020      	movs	r0, r4
 80040fe:	183b      	adds	r3, r7, r0
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d115      	bne.n	8004136 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800410a:	183b      	adds	r3, r7, r0
 800410c:	7a5b      	ldrb	r3, [r3, #9]
 800410e:	001a      	movs	r2, r3
 8004110:	183b      	adds	r3, r7, r0
 8004112:	7a1b      	ldrb	r3, [r3, #8]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	18d3      	adds	r3, r2, r3
 8004118:	0019      	movs	r1, r3
 800411a:	183b      	adds	r3, r7, r0
 800411c:	79db      	ldrb	r3, [r3, #7]
 800411e:	041a      	lsls	r2, r3, #16
 8004120:	23fc      	movs	r3, #252	@ 0xfc
 8004122:	039b      	lsls	r3, r3, #14
 8004124:	4013      	ands	r3, r2
 8004126:	18cb      	adds	r3, r1, r3
 8004128:	3301      	adds	r3, #1
 800412a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	029a      	lsls	r2, r3, #10
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e031      	b.n	800419a <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004136:	200c      	movs	r0, #12
 8004138:	183b      	adds	r3, r7, r0
 800413a:	795b      	ldrb	r3, [r3, #5]
 800413c:	220f      	movs	r2, #15
 800413e:	4013      	ands	r3, r2
 8004140:	b2da      	uxtb	r2, r3
 8004142:	183b      	adds	r3, r7, r0
 8004144:	7a9b      	ldrb	r3, [r3, #10]
 8004146:	09db      	lsrs	r3, r3, #7
 8004148:	b2db      	uxtb	r3, r3
 800414a:	18d3      	adds	r3, r2, r3
 800414c:	b2da      	uxtb	r2, r3
 800414e:	183b      	adds	r3, r7, r0
 8004150:	7a5b      	ldrb	r3, [r3, #9]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2106      	movs	r1, #6
 8004158:	400b      	ands	r3, r1
 800415a:	b2db      	uxtb	r3, r3
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	b2da      	uxtb	r2, r3
 8004160:	242e      	movs	r4, #46	@ 0x2e
 8004162:	193b      	adds	r3, r7, r4
 8004164:	3202      	adds	r2, #2
 8004166:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8004168:	183b      	adds	r3, r7, r0
 800416a:	7a1b      	ldrb	r3, [r3, #8]
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	b2db      	uxtb	r3, r3
 8004170:	001a      	movs	r2, r3
 8004172:	183b      	adds	r3, r7, r0
 8004174:	79db      	ldrb	r3, [r3, #7]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	18d2      	adds	r2, r2, r3
 800417a:	183b      	adds	r3, r7, r0
 800417c:	799b      	ldrb	r3, [r3, #6]
 800417e:	0299      	lsls	r1, r3, #10
 8004180:	23c0      	movs	r3, #192	@ 0xc0
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	400b      	ands	r3, r1
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	3301      	adds	r3, #1
 800418a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800418c:	193b      	adds	r3, r7, r4
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	3b09      	subs	r3, #9
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	409a      	lsls	r2, r3
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800419a:	232f      	movs	r3, #47	@ 0x2f
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	2200      	movs	r2, #0
 80041a0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80041a2:	e0dc      	b.n	800435e <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80041a4:	4b79      	ldr	r3, [pc, #484]	@ (800438c <USER_SPI_ioctl+0x320>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	001a      	movs	r2, r3
 80041aa:	2304      	movs	r3, #4
 80041ac:	4013      	ands	r3, r2
 80041ae:	d035      	beq.n	800421c <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80041b0:	2100      	movs	r1, #0
 80041b2:	208d      	movs	r0, #141	@ 0x8d
 80041b4:	f7ff fcb1 	bl	8003b1a <send_cmd>
 80041b8:	1e03      	subs	r3, r0, #0
 80041ba:	d000      	beq.n	80041be <USER_SPI_ioctl+0x152>
 80041bc:	e0d1      	b.n	8004362 <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 80041be:	20ff      	movs	r0, #255	@ 0xff
 80041c0:	f7ff fba6 	bl	8003910 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80041c4:	230c      	movs	r3, #12
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	2110      	movs	r1, #16
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7ff fc3c 	bl	8003a48 <rcvr_datablock>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d100      	bne.n	80041d6 <USER_SPI_ioctl+0x16a>
 80041d4:	e0c5      	b.n	8004362 <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80041d6:	232e      	movs	r3, #46	@ 0x2e
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	2230      	movs	r2, #48	@ 0x30
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	e008      	b.n	80041f2 <USER_SPI_ioctl+0x186>
 80041e0:	20ff      	movs	r0, #255	@ 0xff
 80041e2:	f7ff fb95 	bl	8003910 <xchg_spi>
 80041e6:	212e      	movs	r1, #46	@ 0x2e
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	781a      	ldrb	r2, [r3, #0]
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	3a01      	subs	r2, #1
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	232e      	movs	r3, #46	@ 0x2e
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1f1      	bne.n	80041e0 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80041fc:	230c      	movs	r3, #12
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	7a9b      	ldrb	r3, [r3, #10]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	b2db      	uxtb	r3, r3
 8004206:	001a      	movs	r2, r3
 8004208:	2310      	movs	r3, #16
 800420a:	4093      	lsls	r3, r2
 800420c:	001a      	movs	r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004212:	232f      	movs	r3, #47	@ 0x2f
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2200      	movs	r2, #0
 8004218:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800421a:	e0a2      	b.n	8004362 <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800421c:	2100      	movs	r1, #0
 800421e:	2009      	movs	r0, #9
 8004220:	f7ff fc7b 	bl	8003b1a <send_cmd>
 8004224:	1e03      	subs	r3, r0, #0
 8004226:	d000      	beq.n	800422a <USER_SPI_ioctl+0x1be>
 8004228:	e09b      	b.n	8004362 <USER_SPI_ioctl+0x2f6>
 800422a:	240c      	movs	r4, #12
 800422c:	193b      	adds	r3, r7, r4
 800422e:	2110      	movs	r1, #16
 8004230:	0018      	movs	r0, r3
 8004232:	f7ff fc09 	bl	8003a48 <rcvr_datablock>
 8004236:	1e03      	subs	r3, r0, #0
 8004238:	d100      	bne.n	800423c <USER_SPI_ioctl+0x1d0>
 800423a:	e092      	b.n	8004362 <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800423c:	4b53      	ldr	r3, [pc, #332]	@ (800438c <USER_SPI_ioctl+0x320>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	001a      	movs	r2, r3
 8004242:	2302      	movs	r3, #2
 8004244:	4013      	ands	r3, r2
 8004246:	d016      	beq.n	8004276 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8004248:	0021      	movs	r1, r4
 800424a:	187b      	adds	r3, r7, r1
 800424c:	7a9b      	ldrb	r3, [r3, #10]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	227e      	movs	r2, #126	@ 0x7e
 8004252:	4013      	ands	r3, r2
 8004254:	187a      	adds	r2, r7, r1
 8004256:	7ad2      	ldrb	r2, [r2, #11]
 8004258:	09d2      	lsrs	r2, r2, #7
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	189b      	adds	r3, r3, r2
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	187b      	adds	r3, r7, r1
 8004262:	7b5b      	ldrb	r3, [r3, #13]
 8004264:	099b      	lsrs	r3, r3, #6
 8004266:	b2db      	uxtb	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	0013      	movs	r3, r2
 800426e:	001a      	movs	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e018      	b.n	80042a8 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8004276:	210c      	movs	r1, #12
 8004278:	187b      	adds	r3, r7, r1
 800427a:	7a9b      	ldrb	r3, [r3, #10]
 800427c:	109b      	asrs	r3, r3, #2
 800427e:	b29b      	uxth	r3, r3
 8004280:	001a      	movs	r2, r3
 8004282:	231f      	movs	r3, #31
 8004284:	4013      	ands	r3, r2
 8004286:	3301      	adds	r3, #1
 8004288:	0008      	movs	r0, r1
 800428a:	187a      	adds	r2, r7, r1
 800428c:	7ad2      	ldrb	r2, [r2, #11]
 800428e:	00d2      	lsls	r2, r2, #3
 8004290:	2118      	movs	r1, #24
 8004292:	400a      	ands	r2, r1
 8004294:	1839      	adds	r1, r7, r0
 8004296:	7ac9      	ldrb	r1, [r1, #11]
 8004298:	0949      	lsrs	r1, r1, #5
 800429a:	b2c9      	uxtb	r1, r1
 800429c:	1852      	adds	r2, r2, r1
 800429e:	3201      	adds	r2, #1
 80042a0:	4353      	muls	r3, r2
 80042a2:	001a      	movs	r2, r3
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80042a8:	232f      	movs	r3, #47	@ 0x2f
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	2200      	movs	r2, #0
 80042ae:	701a      	strb	r2, [r3, #0]
		break;
 80042b0:	e057      	b.n	8004362 <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80042b2:	4b36      	ldr	r3, [pc, #216]	@ (800438c <USER_SPI_ioctl+0x320>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	001a      	movs	r2, r3
 80042b8:	2306      	movs	r3, #6
 80042ba:	4013      	ands	r3, r2
 80042bc:	d053      	beq.n	8004366 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80042be:	240c      	movs	r4, #12
 80042c0:	193a      	adds	r2, r7, r4
 80042c2:	1dfb      	adds	r3, r7, #7
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	210b      	movs	r1, #11
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7ff fecf 	bl	800406c <USER_SPI_ioctl>
 80042ce:	1e03      	subs	r3, r0, #0
 80042d0:	d14b      	bne.n	800436a <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80042d2:	193b      	adds	r3, r7, r4
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d105      	bne.n	80042ea <USER_SPI_ioctl+0x27e>
 80042de:	193b      	adds	r3, r7, r4
 80042e0:	7a9b      	ldrb	r3, [r3, #10]
 80042e2:	001a      	movs	r2, r3
 80042e4:	2340      	movs	r3, #64	@ 0x40
 80042e6:	4013      	ands	r3, r2
 80042e8:	d041      	beq.n	800436e <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80042fa:	4b24      	ldr	r3, [pc, #144]	@ (800438c <USER_SPI_ioctl+0x320>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	001a      	movs	r2, r3
 8004300:	2308      	movs	r3, #8
 8004302:	4013      	ands	r3, r2
 8004304:	d105      	bne.n	8004312 <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	025b      	lsls	r3, r3, #9
 800430a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	0019      	movs	r1, r3
 8004316:	2020      	movs	r0, #32
 8004318:	f7ff fbff 	bl	8003b1a <send_cmd>
 800431c:	1e03      	subs	r3, r0, #0
 800431e:	d128      	bne.n	8004372 <USER_SPI_ioctl+0x306>
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	0019      	movs	r1, r3
 8004324:	2021      	movs	r0, #33	@ 0x21
 8004326:	f7ff fbf8 	bl	8003b1a <send_cmd>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d121      	bne.n	8004372 <USER_SPI_ioctl+0x306>
 800432e:	2100      	movs	r1, #0
 8004330:	2026      	movs	r0, #38	@ 0x26
 8004332:	f7ff fbf2 	bl	8003b1a <send_cmd>
 8004336:	1e03      	subs	r3, r0, #0
 8004338:	d11b      	bne.n	8004372 <USER_SPI_ioctl+0x306>
 800433a:	4b15      	ldr	r3, [pc, #84]	@ (8004390 <USER_SPI_ioctl+0x324>)
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff fb2f 	bl	80039a0 <wait_ready>
 8004342:	1e03      	subs	r3, r0, #0
 8004344:	d015      	beq.n	8004372 <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8004346:	232f      	movs	r3, #47	@ 0x2f
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	2200      	movs	r2, #0
 800434c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800434e:	e010      	b.n	8004372 <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8004350:	232f      	movs	r3, #47	@ 0x2f
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	2204      	movs	r2, #4
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e00c      	b.n	8004374 <USER_SPI_ioctl+0x308>
		break;
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	e00a      	b.n	8004374 <USER_SPI_ioctl+0x308>
		break;
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	e008      	b.n	8004374 <USER_SPI_ioctl+0x308>
		break;
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	e006      	b.n	8004374 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	e004      	b.n	8004374 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	e002      	b.n	8004374 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	e000      	b.n	8004374 <USER_SPI_ioctl+0x308>
		break;
 8004372:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 8004374:	f7ff fb3c 	bl	80039f0 <despiselect>

	return res;
 8004378:	232f      	movs	r3, #47	@ 0x2f
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	781b      	ldrb	r3, [r3, #0]
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b00d      	add	sp, #52	@ 0x34
 8004384:	bd90      	pop	{r4, r7, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	20000020 	.word	0x20000020
 800438c:	20000295 	.word	0x20000295
 8004390:	00007530 	.word	0x00007530

08004394 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004394:	b5b0      	push	{r4, r5, r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	0002      	movs	r2, r0
 800439c:	1dfb      	adds	r3, r7, #7
 800439e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80043a0:	1dfb      	adds	r3, r7, #7
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	4a0b      	ldr	r2, [pc, #44]	@ (80043d4 <disk_status+0x40>)
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	18d3      	adds	r3, r2, r3
 80043aa:	3304      	adds	r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	1dfa      	adds	r2, r7, #7
 80043b2:	7812      	ldrb	r2, [r2, #0]
 80043b4:	4907      	ldr	r1, [pc, #28]	@ (80043d4 <disk_status+0x40>)
 80043b6:	188a      	adds	r2, r1, r2
 80043b8:	7a12      	ldrb	r2, [r2, #8]
 80043ba:	250f      	movs	r5, #15
 80043bc:	197c      	adds	r4, r7, r5
 80043be:	0010      	movs	r0, r2
 80043c0:	4798      	blx	r3
 80043c2:	0003      	movs	r3, r0
 80043c4:	7023      	strb	r3, [r4, #0]
  return stat;
 80043c6:	197b      	adds	r3, r7, r5
 80043c8:	781b      	ldrb	r3, [r3, #0]
}
 80043ca:	0018      	movs	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bdb0      	pop	{r4, r5, r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	200002c8 	.word	0x200002c8

080043d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	0002      	movs	r2, r0
 80043e0:	1dfb      	adds	r3, r7, #7
 80043e2:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80043e4:	200f      	movs	r0, #15
 80043e6:	183b      	adds	r3, r7, r0
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80043ec:	1dfb      	adds	r3, r7, #7
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	4a10      	ldr	r2, [pc, #64]	@ (8004434 <disk_initialize+0x5c>)
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d116      	bne.n	8004426 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80043f8:	1dfb      	adds	r3, r7, #7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004434 <disk_initialize+0x5c>)
 80043fe:	2101      	movs	r1, #1
 8004400:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004402:	1dfb      	adds	r3, r7, #7
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	4a0b      	ldr	r2, [pc, #44]	@ (8004434 <disk_initialize+0x5c>)
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	18d3      	adds	r3, r2, r3
 800440c:	3304      	adds	r3, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	1dfa      	adds	r2, r7, #7
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	4907      	ldr	r1, [pc, #28]	@ (8004434 <disk_initialize+0x5c>)
 8004418:	188a      	adds	r2, r1, r2
 800441a:	7a12      	ldrb	r2, [r2, #8]
 800441c:	183c      	adds	r4, r7, r0
 800441e:	0010      	movs	r0, r2
 8004420:	4798      	blx	r3
 8004422:	0003      	movs	r3, r0
 8004424:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8004426:	230f      	movs	r3, #15
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	781b      	ldrb	r3, [r3, #0]
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b005      	add	sp, #20
 8004432:	bd90      	pop	{r4, r7, pc}
 8004434:	200002c8 	.word	0x200002c8

08004438 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	210f      	movs	r1, #15
 8004446:	187b      	adds	r3, r7, r1
 8004448:	1c02      	adds	r2, r0, #0
 800444a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800444c:	187b      	adds	r3, r7, r1
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	4a0c      	ldr	r2, [pc, #48]	@ (8004484 <disk_read+0x4c>)
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	18d3      	adds	r3, r2, r3
 8004456:	3304      	adds	r3, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689d      	ldr	r5, [r3, #8]
 800445c:	187b      	adds	r3, r7, r1
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	4a08      	ldr	r2, [pc, #32]	@ (8004484 <disk_read+0x4c>)
 8004462:	18d3      	adds	r3, r2, r3
 8004464:	7a18      	ldrb	r0, [r3, #8]
 8004466:	2617      	movs	r6, #23
 8004468:	19bc      	adds	r4, r7, r6
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	47a8      	blx	r5
 8004472:	0003      	movs	r3, r0
 8004474:	7023      	strb	r3, [r4, #0]
  return res;
 8004476:	19bb      	adds	r3, r7, r6
 8004478:	781b      	ldrb	r3, [r3, #0]
}
 800447a:	0018      	movs	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	b007      	add	sp, #28
 8004480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	200002c8 	.word	0x200002c8

08004488 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	210f      	movs	r1, #15
 8004496:	187b      	adds	r3, r7, r1
 8004498:	1c02      	adds	r2, r0, #0
 800449a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800449c:	187b      	adds	r3, r7, r1
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	4a0c      	ldr	r2, [pc, #48]	@ (80044d4 <disk_write+0x4c>)
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	18d3      	adds	r3, r2, r3
 80044a6:	3304      	adds	r3, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68dd      	ldr	r5, [r3, #12]
 80044ac:	187b      	adds	r3, r7, r1
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	4a08      	ldr	r2, [pc, #32]	@ (80044d4 <disk_write+0x4c>)
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	7a18      	ldrb	r0, [r3, #8]
 80044b6:	2617      	movs	r6, #23
 80044b8:	19bc      	adds	r4, r7, r6
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	47a8      	blx	r5
 80044c2:	0003      	movs	r3, r0
 80044c4:	7023      	strb	r3, [r4, #0]
  return res;
 80044c6:	19bb      	adds	r3, r7, r6
 80044c8:	781b      	ldrb	r3, [r3, #0]
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b007      	add	sp, #28
 80044d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	200002c8 	.word	0x200002c8

080044d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80044d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	603a      	str	r2, [r7, #0]
 80044e0:	1dfb      	adds	r3, r7, #7
 80044e2:	1c02      	adds	r2, r0, #0
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	1dbb      	adds	r3, r7, #6
 80044e8:	1c0a      	adds	r2, r1, #0
 80044ea:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80044ec:	1dfb      	adds	r3, r7, #7
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004524 <disk_ioctl+0x4c>)
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	3304      	adds	r3, #4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	1dfa      	adds	r2, r7, #7
 80044fe:	7812      	ldrb	r2, [r2, #0]
 8004500:	4908      	ldr	r1, [pc, #32]	@ (8004524 <disk_ioctl+0x4c>)
 8004502:	188a      	adds	r2, r1, r2
 8004504:	7a10      	ldrb	r0, [r2, #8]
 8004506:	260f      	movs	r6, #15
 8004508:	19bc      	adds	r4, r7, r6
 800450a:	683d      	ldr	r5, [r7, #0]
 800450c:	1dba      	adds	r2, r7, #6
 800450e:	7811      	ldrb	r1, [r2, #0]
 8004510:	002a      	movs	r2, r5
 8004512:	4798      	blx	r3
 8004514:	0003      	movs	r3, r0
 8004516:	7023      	strb	r3, [r4, #0]
  return res;
 8004518:	19bb      	adds	r3, r7, r6
 800451a:	781b      	ldrb	r3, [r3, #0]
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b005      	add	sp, #20
 8004522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004524:	200002c8 	.word	0x200002c8

08004528 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3301      	adds	r3, #1
 8004534:	781a      	ldrb	r2, [r3, #0]
 8004536:	210e      	movs	r1, #14
 8004538:	187b      	adds	r3, r7, r1
 800453a:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 800453c:	187b      	adds	r3, r7, r1
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	b21a      	sxth	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b21b      	sxth	r3, r3
 800454a:	4313      	orrs	r3, r2
 800454c:	b21a      	sxth	r2, r3
 800454e:	187b      	adds	r3, r7, r1
 8004550:	801a      	strh	r2, [r3, #0]
	return rv;
 8004552:	187b      	adds	r3, r7, r1
 8004554:	881b      	ldrh	r3, [r3, #0]
}
 8004556:	0018      	movs	r0, r3
 8004558:	46bd      	mov	sp, r7
 800455a:	b004      	add	sp, #16
 800455c:	bd80      	pop	{r7, pc}

0800455e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3303      	adds	r3, #3
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	3202      	adds	r2, #2
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	3201      	adds	r2, #1
 8004584:	7812      	ldrb	r2, [r2, #0]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
	return rv;
 8004596:	68fb      	ldr	r3, [r7, #12]
}
 8004598:	0018      	movs	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	b004      	add	sp, #16
 800459e:	bd80      	pop	{r7, pc}

080045a0 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	000a      	movs	r2, r1
 80045aa:	1cbb      	adds	r3, r7, #2
 80045ac:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	1cba      	adds	r2, r7, #2
 80045b6:	8812      	ldrh	r2, [r2, #0]
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	1cbb      	adds	r3, r7, #2
 80045be:	1cba      	adds	r2, r7, #2
 80045c0:	8812      	ldrh	r2, [r2, #0]
 80045c2:	0a12      	lsrs	r2, r2, #8
 80045c4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	1cba      	adds	r2, r7, #2
 80045ce:	8812      	ldrh	r2, [r2, #0]
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b002      	add	sp, #8
 80045da:	bd80      	pop	{r7, pc}

080045dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	607a      	str	r2, [r7, #4]
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	607a      	str	r2, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
}
 8004628:	46c0      	nop			@ (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	b002      	add	sp, #8
 800462e:	bd80      	pop	{r7, pc}

08004630 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00d      	beq.n	8004666 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	1c53      	adds	r3, r2, #1
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	1c59      	adds	r1, r3, #1
 8004654:	6179      	str	r1, [r7, #20]
 8004656:	7812      	ldrb	r2, [r2, #0]
 8004658:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3b01      	subs	r3, #1
 800465e:	607b      	str	r3, [r7, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d1f1      	bne.n	800464a <mem_cpy+0x1a>
	}
}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	46bd      	mov	sp, r7
 800466a:	b006      	add	sp, #24
 800466c:	bd80      	pop	{r7, pc}

0800466e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800466e:	b580      	push	{r7, lr}
 8004670:	b086      	sub	sp, #24
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	617a      	str	r2, [r7, #20]
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3b01      	subs	r3, #1
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f3      	bne.n	800467e <mem_set+0x10>
}
 8004696:	46c0      	nop			@ (mov r8, r8)
 8004698:	46c0      	nop			@ (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b006      	add	sp, #24
 800469e:	bd80      	pop	{r7, pc}

080046a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	61fa      	str	r2, [r7, #28]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	0019      	movs	r1, r3
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	61ba      	str	r2, [r7, #24]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	1acb      	subs	r3, r1, r3
 80046cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <mem_cmp+0x40>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0eb      	beq.n	80046b8 <mem_cmp+0x18>

	return r;
 80046e0:	697b      	ldr	r3, [r7, #20]
}
 80046e2:	0018      	movs	r0, r3
 80046e4:	46bd      	mov	sp, r7
 80046e6:	b008      	add	sp, #32
 80046e8:	bd80      	pop	{r7, pc}

080046ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b082      	sub	sp, #8
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80046f4:	e002      	b.n	80046fc <chk_chr+0x12>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3301      	adds	r3, #1
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <chk_chr+0x26>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	001a      	movs	r2, r3
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	4293      	cmp	r3, r2
 800470e:	d1f2      	bne.n	80046f6 <chk_chr+0xc>
	return *str;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	781b      	ldrb	r3, [r3, #0]
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b002      	add	sp, #8
 800471a:	bd80      	pop	{r7, pc}

0800471c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e027      	b.n	8004780 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <chk_lock+0xac>)
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	0112      	lsls	r2, r2, #4
 8004736:	58d3      	ldr	r3, [r2, r3]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d01c      	beq.n	8004776 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800473c:	4b22      	ldr	r3, [pc, #136]	@ (80047c8 <chk_lock+0xac>)
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	58d2      	ldr	r2, [r2, r3]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d116      	bne.n	800477a <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 800474c:	4a1e      	ldr	r2, [pc, #120]	@ (80047c8 <chk_lock+0xac>)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	18d3      	adds	r3, r2, r3
 8004754:	3304      	adds	r3, #4
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800475c:	429a      	cmp	r2, r3
 800475e:	d10c      	bne.n	800477a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <chk_lock+0xac>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	18d3      	adds	r3, r2, r3
 8004768:	3308      	adds	r3, #8
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004770:	429a      	cmp	r2, r3
 8004772:	d102      	bne.n	800477a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8004774:	e007      	b.n	8004786 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3301      	adds	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d9d4      	bls.n	8004730 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d109      	bne.n	80047a0 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <chk_lock+0x7c>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d101      	bne.n	800479c <chk_lock+0x80>
 8004798:	2300      	movs	r3, #0
 800479a:	e011      	b.n	80047c0 <chk_lock+0xa4>
 800479c:	2312      	movs	r3, #18
 800479e:	e00f      	b.n	80047c0 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <chk_lock+0x9e>
 80047a6:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <chk_lock+0xac>)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	18d3      	adds	r3, r2, r3
 80047ae:	330c      	adds	r3, #12
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d101      	bne.n	80047be <chk_lock+0xa2>
 80047ba:	2310      	movs	r3, #16
 80047bc:	e000      	b.n	80047c0 <chk_lock+0xa4>
 80047be:	2300      	movs	r3, #0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b004      	add	sp, #16
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200002a8 	.word	0x200002a8

080047cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	e002      	b.n	80047de <enq_lock+0x12>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3301      	adds	r3, #1
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d805      	bhi.n	80047f0 <enq_lock+0x24>
 80047e4:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <enq_lock+0x38>)
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	58d3      	ldr	r3, [r2, r3]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f3      	bne.n	80047d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	3b02      	subs	r3, #2
 80047f4:	1e5a      	subs	r2, r3, #1
 80047f6:	4193      	sbcs	r3, r2
 80047f8:	b2db      	uxtb	r3, r3
}
 80047fa:	0018      	movs	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b002      	add	sp, #8
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			@ (mov r8, r8)
 8004804:	200002a8 	.word	0x200002a8

08004808 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	e01e      	b.n	8004856 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8004818:	4b3f      	ldr	r3, [pc, #252]	@ (8004918 <inc_lock+0x110>)
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	0112      	lsls	r2, r2, #4
 800481e:	58d2      	ldr	r2, [r2, r3]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d113      	bne.n	8004850 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8004828:	4a3b      	ldr	r2, [pc, #236]	@ (8004918 <inc_lock+0x110>)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	18d3      	adds	r3, r2, r3
 8004830:	3304      	adds	r3, #4
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004838:	429a      	cmp	r2, r3
 800483a:	d109      	bne.n	8004850 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 800483c:	4a36      	ldr	r2, [pc, #216]	@ (8004918 <inc_lock+0x110>)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	18d3      	adds	r3, r2, r3
 8004844:	3308      	adds	r3, #8
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800484c:	429a      	cmp	r2, r3
 800484e:	d006      	beq.n	800485e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d9dd      	bls.n	8004818 <inc_lock+0x10>
 800485c:	e000      	b.n	8004860 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 800485e:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d130      	bne.n	80048c8 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	e002      	b.n	8004872 <inc_lock+0x6a>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3301      	adds	r3, #1
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d805      	bhi.n	8004884 <inc_lock+0x7c>
 8004878:	4b27      	ldr	r3, [pc, #156]	@ (8004918 <inc_lock+0x110>)
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	0112      	lsls	r2, r2, #4
 800487e:	58d3      	ldr	r3, [r2, r3]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f3      	bne.n	800486c <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d101      	bne.n	800488e <inc_lock+0x86>
 800488a:	2300      	movs	r3, #0
 800488c:	e03f      	b.n	800490e <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	4b21      	ldr	r3, [pc, #132]	@ (8004918 <inc_lock+0x110>)
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	0112      	lsls	r2, r2, #4
 8004898:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	491e      	ldr	r1, [pc, #120]	@ (8004918 <inc_lock+0x110>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	18cb      	adds	r3, r1, r3
 80048a6:	3304      	adds	r3, #4
 80048a8:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	491a      	ldr	r1, [pc, #104]	@ (8004918 <inc_lock+0x110>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	18cb      	adds	r3, r1, r3
 80048b6:	3308      	adds	r3, #8
 80048b8:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80048ba:	4a17      	ldr	r2, [pc, #92]	@ (8004918 <inc_lock+0x110>)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	18d3      	adds	r3, r2, r3
 80048c2:	330c      	adds	r3, #12
 80048c4:	2200      	movs	r2, #0
 80048c6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d009      	beq.n	80048e2 <inc_lock+0xda>
 80048ce:	4a12      	ldr	r2, [pc, #72]	@ (8004918 <inc_lock+0x110>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	18d3      	adds	r3, r2, r3
 80048d6:	330c      	adds	r3, #12
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <inc_lock+0xda>
 80048de:	2300      	movs	r3, #0
 80048e0:	e015      	b.n	800490e <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d108      	bne.n	80048fa <inc_lock+0xf2>
 80048e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004918 <inc_lock+0x110>)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	18d3      	adds	r3, r2, r3
 80048f0:	330c      	adds	r3, #12
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	e001      	b.n	80048fe <inc_lock+0xf6>
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	4906      	ldr	r1, [pc, #24]	@ (8004918 <inc_lock+0x110>)
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	188a      	adds	r2, r1, r2
 8004906:	320c      	adds	r2, #12
 8004908:	8013      	strh	r3, [r2, #0]

	return i + 1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3301      	adds	r3, #1
}
 800490e:	0018      	movs	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	b004      	add	sp, #16
 8004914:	bd80      	pop	{r7, pc}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	200002a8 	.word	0x200002a8

0800491c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3b01      	subs	r3, #1
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d832      	bhi.n	8004996 <dec_lock+0x7a>
		n = Files[i].ctr;
 8004930:	200e      	movs	r0, #14
 8004932:	183b      	adds	r3, r7, r0
 8004934:	491d      	ldr	r1, [pc, #116]	@ (80049ac <dec_lock+0x90>)
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	0112      	lsls	r2, r2, #4
 800493a:	188a      	adds	r2, r1, r2
 800493c:	320c      	adds	r2, #12
 800493e:	8812      	ldrh	r2, [r2, #0]
 8004940:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004942:	183b      	adds	r3, r7, r0
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	429a      	cmp	r2, r3
 800494c:	d102      	bne.n	8004954 <dec_lock+0x38>
 800494e:	183b      	adds	r3, r7, r0
 8004950:	2200      	movs	r2, #0
 8004952:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004954:	210e      	movs	r1, #14
 8004956:	187b      	adds	r3, r7, r1
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d004      	beq.n	8004968 <dec_lock+0x4c>
 800495e:	187b      	adds	r3, r7, r1
 8004960:	881a      	ldrh	r2, [r3, #0]
 8004962:	187b      	adds	r3, r7, r1
 8004964:	3a01      	subs	r2, #1
 8004966:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8004968:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <dec_lock+0x90>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	18d3      	adds	r3, r2, r3
 8004970:	330c      	adds	r3, #12
 8004972:	210e      	movs	r1, #14
 8004974:	187a      	adds	r2, r7, r1
 8004976:	8812      	ldrh	r2, [r2, #0]
 8004978:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800497a:	187b      	adds	r3, r7, r1
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <dec_lock+0x70>
 8004982:	4b0a      	ldr	r3, [pc, #40]	@ (80049ac <dec_lock+0x90>)
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	0112      	lsls	r2, r2, #4
 8004988:	2100      	movs	r1, #0
 800498a:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 800498c:	230d      	movs	r3, #13
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	e003      	b.n	800499e <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004996:	230d      	movs	r3, #13
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	2202      	movs	r2, #2
 800499c:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800499e:	230d      	movs	r3, #13
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	781b      	ldrb	r3, [r3, #0]
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b004      	add	sp, #16
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	200002a8 	.word	0x200002a8

080049b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e00e      	b.n	80049dc <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80049be:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <clear_lock+0x3c>)
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	58d3      	ldr	r3, [r2, r3]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d104      	bne.n	80049d6 <clear_lock+0x26>
 80049cc:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <clear_lock+0x3c>)
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	0112      	lsls	r2, r2, #4
 80049d2:	2100      	movs	r1, #0
 80049d4:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d9ed      	bls.n	80049be <clear_lock+0xe>
	}
}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	46c0      	nop			@ (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b004      	add	sp, #16
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	200002a8 	.word	0x200002a8

080049f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80049f8:	240f      	movs	r4, #15
 80049fa:	193b      	adds	r3, r7, r4
 80049fc:	2200      	movs	r2, #0
 80049fe:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	78db      	ldrb	r3, [r3, #3]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d034      	beq.n	8004a72 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7858      	ldrb	r0, [r3, #1]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3330      	adds	r3, #48	@ 0x30
 8004a16:	0019      	movs	r1, r3
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f7ff fd34 	bl	8004488 <disk_write>
 8004a20:	1e03      	subs	r3, r0, #0
 8004a22:	d003      	beq.n	8004a2c <sync_window+0x3c>
			res = FR_DISK_ERR;
 8004a24:	193b      	adds	r3, r7, r4
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e022      	b.n	8004a72 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	1ad2      	subs	r2, r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d217      	bcs.n	8004a72 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	789b      	ldrb	r3, [r3, #2]
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	e010      	b.n	8004a6c <sync_window+0x7c>
					wsect += fs->fsize;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	18d3      	adds	r3, r2, r3
 8004a52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7858      	ldrb	r0, [r3, #1]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3330      	adds	r3, #48	@ 0x30
 8004a5c:	0019      	movs	r1, r3
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	2301      	movs	r3, #1
 8004a62:	f7ff fd11 	bl	8004488 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d8eb      	bhi.n	8004a4a <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8004a72:	230f      	movs	r3, #15
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	781b      	ldrb	r3, [r3, #0]
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b007      	add	sp, #28
 8004a7e:	bd90      	pop	{r4, r7, pc}

08004a80 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004a80:	b5b0      	push	{r4, r5, r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004a8a:	250f      	movs	r5, #15
 8004a8c:	197b      	adds	r3, r7, r5
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d01f      	beq.n	8004adc <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004a9c:	197c      	adds	r4, r7, r5
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff ffa5 	bl	80049f0 <sync_window>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004aaa:	002c      	movs	r4, r5
 8004aac:	193b      	adds	r3, r7, r4
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d113      	bne.n	8004adc <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	7858      	ldrb	r0, [r3, #1]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3330      	adds	r3, #48	@ 0x30
 8004abc:	0019      	movs	r1, r3
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f7ff fcb9 	bl	8004438 <disk_read>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d005      	beq.n	8004ad6 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004aca:	2301      	movs	r3, #1
 8004acc:	425b      	negs	r3, r3
 8004ace:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004ad0:	193b      	adds	r3, r7, r4
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8004adc:	230f      	movs	r3, #15
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	781b      	ldrb	r3, [r3, #0]
}
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b004      	add	sp, #16
 8004ae8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004aec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004aec:	b5b0      	push	{r4, r5, r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004af4:	250f      	movs	r5, #15
 8004af6:	197c      	adds	r4, r7, r5
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	0018      	movs	r0, r3
 8004afc:	f7ff ff78 	bl	80049f0 <sync_window>
 8004b00:	0003      	movs	r3, r0
 8004b02:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8004b04:	197b      	adds	r3, r7, r5
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d15d      	bne.n	8004bc8 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d14c      	bne.n	8004bae <sync_fs+0xc2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	791b      	ldrb	r3, [r3, #4]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d148      	bne.n	8004bae <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3330      	adds	r3, #48	@ 0x30
 8004b20:	2280      	movs	r2, #128	@ 0x80
 8004b22:	0092      	lsls	r2, r2, #2
 8004b24:	2100      	movs	r1, #0
 8004b26:	0018      	movs	r0, r3
 8004b28:	f7ff fda1 	bl	800466e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3330      	adds	r3, #48	@ 0x30
 8004b30:	33ff      	adds	r3, #255	@ 0xff
 8004b32:	33ff      	adds	r3, #255	@ 0xff
 8004b34:	4a28      	ldr	r2, [pc, #160]	@ (8004bd8 <sync_fs+0xec>)
 8004b36:	0011      	movs	r1, r2
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff fd31 	bl	80045a0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3330      	adds	r3, #48	@ 0x30
 8004b42:	4a26      	ldr	r2, [pc, #152]	@ (8004bdc <sync_fs+0xf0>)
 8004b44:	0011      	movs	r1, r2
 8004b46:	0018      	movs	r0, r3
 8004b48:	f7ff fd48 	bl	80045dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3330      	adds	r3, #48	@ 0x30
 8004b50:	33e5      	adds	r3, #229	@ 0xe5
 8004b52:	33ff      	adds	r3, #255	@ 0xff
 8004b54:	4a22      	ldr	r2, [pc, #136]	@ (8004be0 <sync_fs+0xf4>)
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7ff fd3f 	bl	80045dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3330      	adds	r3, #48	@ 0x30
 8004b62:	33e9      	adds	r3, #233	@ 0xe9
 8004b64:	33ff      	adds	r3, #255	@ 0xff
 8004b66:	001a      	movs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	0010      	movs	r0, r2
 8004b70:	f7ff fd34 	bl	80045dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3330      	adds	r3, #48	@ 0x30
 8004b78:	33ed      	adds	r3, #237	@ 0xed
 8004b7a:	33ff      	adds	r3, #255	@ 0xff
 8004b7c:	001a      	movs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	0019      	movs	r1, r3
 8004b84:	0010      	movs	r0, r2
 8004b86:	f7ff fd29 	bl	80045dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	7858      	ldrb	r0, [r3, #1]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3330      	adds	r3, #48	@ 0x30
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f7ff fc70 	bl	8004488 <disk_write>
			fs->fsi_flag = 0;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	785b      	ldrb	r3, [r3, #1]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f7ff fc8e 	bl	80044d8 <disk_ioctl>
 8004bbc:	1e03      	subs	r3, r0, #0
 8004bbe:	d003      	beq.n	8004bc8 <sync_fs+0xdc>
 8004bc0:	230f      	movs	r3, #15
 8004bc2:	18fb      	adds	r3, r7, r3
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8004bc8:	230f      	movs	r3, #15
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	781b      	ldrb	r3, [r3, #0]
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	0000aa55 	.word	0x0000aa55
 8004bdc:	41615252 	.word	0x41615252
 8004be0:	61417272 	.word	0x61417272

08004be4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	3b02      	subs	r3, #2
 8004bf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	3b02      	subs	r3, #2
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d301      	bcc.n	8004c04 <clust2sect+0x20>
 8004c00:	2300      	movs	r3, #0
 8004c02:	e007      	b.n	8004c14 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	895b      	ldrh	r3, [r3, #10]
 8004c08:	001a      	movs	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	435a      	muls	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c12:	18d3      	adds	r3, r2, r3
}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d904      	bls.n	8004c3c <get_fat+0x20>
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d302      	bcc.n	8004c42 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	617b      	str	r3, [r7, #20]
 8004c40:	e091      	b.n	8004d66 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004c42:	2301      	movs	r3, #1
 8004c44:	425b      	negs	r3, r3
 8004c46:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d063      	beq.n	8004d18 <get_fat+0xfc>
 8004c50:	dd00      	ble.n	8004c54 <get_fat+0x38>
 8004c52:	e07e      	b.n	8004d52 <get_fat+0x136>
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d002      	beq.n	8004c5e <get_fat+0x42>
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d042      	beq.n	8004ce2 <get_fat+0xc6>
 8004c5c:	e079      	b.n	8004d52 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	18d3      	adds	r3, r2, r3
 8004c6a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	0a5b      	lsrs	r3, r3, #9
 8004c74:	18d2      	adds	r2, r2, r3
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	0011      	movs	r1, r2
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	f7ff ff00 	bl	8004a80 <move_window>
 8004c80:	1e03      	subs	r3, r0, #0
 8004c82:	d169      	bne.n	8004d58 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	60fa      	str	r2, [r7, #12]
 8004c8a:	05db      	lsls	r3, r3, #23
 8004c8c:	0ddb      	lsrs	r3, r3, #23
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	2130      	movs	r1, #48	@ 0x30
 8004c92:	18d3      	adds	r3, r2, r3
 8004c94:	185b      	adds	r3, r3, r1
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	0a5b      	lsrs	r3, r3, #9
 8004ca2:	18d2      	adds	r2, r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	0011      	movs	r1, r2
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7ff fee9 	bl	8004a80 <move_window>
 8004cae:	1e03      	subs	r3, r0, #0
 8004cb0:	d154      	bne.n	8004d5c <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	05db      	lsls	r3, r3, #23
 8004cb6:	0ddb      	lsrs	r3, r3, #23
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	2130      	movs	r1, #48	@ 0x30
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	185b      	adds	r3, r3, r1
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d002      	beq.n	8004cd8 <get_fat+0xbc>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	e002      	b.n	8004cde <get_fat+0xc2>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	051b      	lsls	r3, r3, #20
 8004cdc:	0d1b      	lsrs	r3, r3, #20
 8004cde:	617b      	str	r3, [r7, #20]
			break;
 8004ce0:	e041      	b.n	8004d66 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	18d2      	adds	r2, r2, r3
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	0011      	movs	r1, r2
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f7ff fec5 	bl	8004a80 <move_window>
 8004cf6:	1e03      	subs	r3, r0, #0
 8004cf8:	d132      	bne.n	8004d60 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3330      	adds	r3, #48	@ 0x30
 8004cfe:	001a      	movs	r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	0059      	lsls	r1, r3, #1
 8004d04:	23ff      	movs	r3, #255	@ 0xff
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	400b      	ands	r3, r1
 8004d0a:	18d3      	adds	r3, r2, r3
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f7ff fc0b 	bl	8004528 <ld_word>
 8004d12:	0003      	movs	r3, r0
 8004d14:	617b      	str	r3, [r7, #20]
			break;
 8004d16:	e026      	b.n	8004d66 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	6a1a      	ldr	r2, [r3, #32]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	09db      	lsrs	r3, r3, #7
 8004d20:	18d2      	adds	r2, r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	0011      	movs	r1, r2
 8004d26:	0018      	movs	r0, r3
 8004d28:	f7ff feaa 	bl	8004a80 <move_window>
 8004d2c:	1e03      	subs	r3, r0, #0
 8004d2e:	d119      	bne.n	8004d64 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	3330      	adds	r3, #48	@ 0x30
 8004d34:	001a      	movs	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	0099      	lsls	r1, r3, #2
 8004d3a:	23fe      	movs	r3, #254	@ 0xfe
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	400b      	ands	r3, r1
 8004d40:	18d3      	adds	r3, r2, r3
 8004d42:	0018      	movs	r0, r3
 8004d44:	f7ff fc0b 	bl	800455e <ld_dword>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	091b      	lsrs	r3, r3, #4
 8004d4e:	617b      	str	r3, [r7, #20]
			break;
 8004d50:	e009      	b.n	8004d66 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004d52:	2301      	movs	r3, #1
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	e006      	b.n	8004d66 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d58:	46c0      	nop			@ (mov r8, r8)
 8004d5a:	e004      	b.n	8004d66 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004d5c:	46c0      	nop			@ (mov r8, r8)
 8004d5e:	e002      	b.n	8004d66 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004d60:	46c0      	nop			@ (mov r8, r8)
 8004d62:	e000      	b.n	8004d66 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004d64:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8004d66:	697b      	ldr	r3, [r7, #20]
}
 8004d68:	0018      	movs	r0, r3
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	b006      	add	sp, #24
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004d70:	b5b0      	push	{r4, r5, r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004d7c:	231f      	movs	r3, #31
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	2202      	movs	r2, #2
 8004d82:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d800      	bhi.n	8004d8c <put_fat+0x1c>
 8004d8a:	e0eb      	b.n	8004f64 <put_fat+0x1f4>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d300      	bcc.n	8004d98 <put_fat+0x28>
 8004d96:	e0e5      	b.n	8004f64 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d100      	bne.n	8004da2 <put_fat+0x32>
 8004da0:	e0a1      	b.n	8004ee6 <put_fat+0x176>
 8004da2:	dd00      	ble.n	8004da6 <put_fat+0x36>
 8004da4:	e0de      	b.n	8004f64 <put_fat+0x1f4>
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d003      	beq.n	8004db2 <put_fat+0x42>
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d100      	bne.n	8004db0 <put_fat+0x40>
 8004dae:	e075      	b.n	8004e9c <put_fat+0x12c>
 8004db0:	e0d8      	b.n	8004f64 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	18d3      	adds	r3, r2, r3
 8004dbe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1a      	ldr	r2, [r3, #32]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	0a5b      	lsrs	r3, r3, #9
 8004dc8:	18d2      	adds	r2, r2, r3
 8004dca:	251f      	movs	r5, #31
 8004dcc:	197c      	adds	r4, r7, r5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	0011      	movs	r1, r2
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7ff fe54 	bl	8004a80 <move_window>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004ddc:	197b      	adds	r3, r7, r5
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d000      	beq.n	8004de6 <put_fat+0x76>
 8004de4:	e0b7      	b.n	8004f56 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3330      	adds	r3, #48	@ 0x30
 8004dea:	001a      	movs	r2, r3
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	1c59      	adds	r1, r3, #1
 8004df0:	61b9      	str	r1, [r7, #24]
 8004df2:	05db      	lsls	r3, r3, #23
 8004df4:	0ddb      	lsrs	r3, r3, #23
 8004df6:	18d3      	adds	r3, r2, r3
 8004df8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d00d      	beq.n	8004e1e <put_fat+0xae>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	b25b      	sxtb	r3, r3
 8004e08:	220f      	movs	r2, #15
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	b25a      	sxtb	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	b25b      	sxtb	r3, r3
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b25b      	sxtb	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	e001      	b.n	8004e22 <put_fat+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	0a5b      	lsrs	r3, r3, #9
 8004e34:	18d2      	adds	r2, r2, r3
 8004e36:	251f      	movs	r5, #31
 8004e38:	197c      	adds	r4, r7, r5
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	0011      	movs	r1, r2
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f7ff fe1e 	bl	8004a80 <move_window>
 8004e44:	0003      	movs	r3, r0
 8004e46:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004e48:	197b      	adds	r3, r7, r5
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d000      	beq.n	8004e52 <put_fat+0xe2>
 8004e50:	e083      	b.n	8004f5a <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3330      	adds	r3, #48	@ 0x30
 8004e56:	001a      	movs	r2, r3
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	05db      	lsls	r3, r3, #23
 8004e5c:	0ddb      	lsrs	r3, r3, #23
 8004e5e:	18d3      	adds	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2201      	movs	r2, #1
 8004e66:	4013      	ands	r3, r2
 8004e68:	d003      	beq.n	8004e72 <put_fat+0x102>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	091b      	lsrs	r3, r3, #4
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	e00e      	b.n	8004e90 <put_fat+0x120>
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	b25b      	sxtb	r3, r3
 8004e78:	220f      	movs	r2, #15
 8004e7a:	4393      	bics	r3, r2
 8004e7c:	b25a      	sxtb	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	b25b      	sxtb	r3, r3
 8004e84:	210f      	movs	r1, #15
 8004e86:	400b      	ands	r3, r1
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b25b      	sxtb	r3, r3
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	70da      	strb	r2, [r3, #3]
			break;
 8004e9a:	e063      	b.n	8004f64 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	0a1b      	lsrs	r3, r3, #8
 8004ea4:	18d2      	adds	r2, r2, r3
 8004ea6:	251f      	movs	r5, #31
 8004ea8:	197c      	adds	r4, r7, r5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	0011      	movs	r1, r2
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f7ff fde6 	bl	8004a80 <move_window>
 8004eb4:	0003      	movs	r3, r0
 8004eb6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004eb8:	197b      	adds	r3, r7, r5
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d14e      	bne.n	8004f5e <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3330      	adds	r3, #48	@ 0x30
 8004ec4:	001a      	movs	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	0059      	lsls	r1, r3, #1
 8004eca:	23ff      	movs	r3, #255	@ 0xff
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	400b      	ands	r3, r1
 8004ed0:	18d3      	adds	r3, r2, r3
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	b292      	uxth	r2, r2
 8004ed6:	0011      	movs	r1, r2
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f7ff fb61 	bl	80045a0 <st_word>
			fs->wflag = 1;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	70da      	strb	r2, [r3, #3]
			break;
 8004ee4:	e03e      	b.n	8004f64 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	09db      	lsrs	r3, r3, #7
 8004eee:	18d2      	adds	r2, r2, r3
 8004ef0:	251f      	movs	r5, #31
 8004ef2:	197c      	adds	r4, r7, r5
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	0011      	movs	r1, r2
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7ff fdc1 	bl	8004a80 <move_window>
 8004efe:	0003      	movs	r3, r0
 8004f00:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8004f02:	197b      	adds	r3, r7, r5
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d12b      	bne.n	8004f62 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	091c      	lsrs	r4, r3, #4
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3330      	adds	r3, #48	@ 0x30
 8004f14:	001a      	movs	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	0099      	lsls	r1, r3, #2
 8004f1a:	23fe      	movs	r3, #254	@ 0xfe
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	400b      	ands	r3, r1
 8004f20:	18d3      	adds	r3, r2, r3
 8004f22:	0018      	movs	r0, r3
 8004f24:	f7ff fb1b 	bl	800455e <ld_dword>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	0f1b      	lsrs	r3, r3, #28
 8004f2c:	071b      	lsls	r3, r3, #28
 8004f2e:	4323      	orrs	r3, r4
 8004f30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	3330      	adds	r3, #48	@ 0x30
 8004f36:	001a      	movs	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	0099      	lsls	r1, r3, #2
 8004f3c:	23fe      	movs	r3, #254	@ 0xfe
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	400b      	ands	r3, r1
 8004f42:	18d3      	adds	r3, r2, r3
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	0011      	movs	r1, r2
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7ff fb47 	bl	80045dc <st_dword>
			fs->wflag = 1;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	70da      	strb	r2, [r3, #3]
			break;
 8004f54:	e006      	b.n	8004f64 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	e004      	b.n	8004f64 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8004f5a:	46c0      	nop			@ (mov r8, r8)
 8004f5c:	e002      	b.n	8004f64 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	e000      	b.n	8004f64 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8004f62:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8004f64:	231f      	movs	r3, #31
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	781b      	ldrb	r3, [r3, #0]
}
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b008      	add	sp, #32
 8004f70:	bdb0      	pop	{r4, r5, r7, pc}

08004f72 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004f72:	b5b0      	push	{r4, r5, r7, lr}
 8004f74:	b088      	sub	sp, #32
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	60f8      	str	r0, [r7, #12]
 8004f7a:	60b9      	str	r1, [r7, #8]
 8004f7c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004f7e:	231f      	movs	r3, #31
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d904      	bls.n	8004f9c <remove_chain+0x2a>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d301      	bcc.n	8004fa0 <remove_chain+0x2e>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e057      	b.n	8005050 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d011      	beq.n	8004fca <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004fa6:	251f      	movs	r5, #31
 8004fa8:	197c      	adds	r4, r7, r5
 8004faa:	2301      	movs	r3, #1
 8004fac:	425a      	negs	r2, r3
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7ff fedc 	bl	8004d70 <put_fat>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8004fbc:	197b      	adds	r3, r7, r5
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <remove_chain+0x58>
 8004fc4:	197b      	adds	r3, r7, r5
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	e042      	b.n	8005050 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	0011      	movs	r1, r2
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f7ff fe23 	bl	8004c1c <get_fat>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d035      	beq.n	800504c <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <remove_chain+0x78>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e032      	b.n	8005050 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	3301      	adds	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <remove_chain+0x82>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e02d      	b.n	8005050 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004ff4:	251f      	movs	r5, #31
 8004ff6:	197c      	adds	r4, r7, r5
 8004ff8:	68b9      	ldr	r1, [r7, #8]
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	0018      	movs	r0, r3
 8005000:	f7ff feb6 	bl	8004d70 <put_fat>
 8005004:	0003      	movs	r3, r0
 8005006:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8005008:	197b      	adds	r3, r7, r5
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <remove_chain+0xa4>
 8005010:	197b      	adds	r3, r7, r5
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	e01c      	b.n	8005050 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	3b02      	subs	r3, #2
 8005020:	429a      	cmp	r2, r3
 8005022:	d20b      	bcs.n	800503c <remove_chain+0xca>
			fs->free_clst++;
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	791b      	ldrb	r3, [r3, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	4313      	orrs	r3, r2
 8005036:	b2da      	uxtb	r2, r3
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	d3bf      	bcc.n	8004fca <remove_chain+0x58>
 800504a:	e000      	b.n	800504e <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 800504c:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	0018      	movs	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	b008      	add	sp, #32
 8005056:	bdb0      	pop	{r4, r5, r7, pc}

08005058 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005058:	b5b0      	push	{r4, r5, r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10d      	bne.n	800508a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <create_chain+0x2c>
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	429a      	cmp	r2, r3
 8005082:	d31d      	bcc.n	80050c0 <create_chain+0x68>
 8005084:	2301      	movs	r3, #1
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	e01a      	b.n	80050c0 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	0011      	movs	r1, r2
 8005090:	0018      	movs	r0, r3
 8005092:	f7ff fdc3 	bl	8004c1c <get_fat>
 8005096:	0003      	movs	r3, r0
 8005098:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d801      	bhi.n	80050a4 <create_chain+0x4c>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e07b      	b.n	800519c <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3301      	adds	r3, #1
 80050a8:	d101      	bne.n	80050ae <create_chain+0x56>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	e076      	b.n	800519c <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d201      	bcs.n	80050bc <create_chain+0x64>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	e06f      	b.n	800519c <create_chain+0x144>
		scl = clst;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3301      	adds	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d307      	bcc.n	80050e4 <create_chain+0x8c>
				ncl = 2;
 80050d4:	2302      	movs	r3, #2
 80050d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d901      	bls.n	80050e4 <create_chain+0x8c>
 80050e0:	2300      	movs	r3, #0
 80050e2:	e05b      	b.n	800519c <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	0011      	movs	r1, r2
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7ff fd96 	bl	8004c1c <get_fat>
 80050f0:	0003      	movs	r3, r0
 80050f2:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d002      	beq.n	8005106 <create_chain+0xae>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	d101      	bne.n	800510a <create_chain+0xb2>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	e048      	b.n	800519c <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 800510a:	69fa      	ldr	r2, [r7, #28]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	429a      	cmp	r2, r3
 8005110:	d1d8      	bne.n	80050c4 <create_chain+0x6c>
 8005112:	2300      	movs	r3, #0
 8005114:	e042      	b.n	800519c <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8005116:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005118:	2517      	movs	r5, #23
 800511a:	197c      	adds	r4, r7, r5
 800511c:	2301      	movs	r3, #1
 800511e:	425a      	negs	r2, r3
 8005120:	69f9      	ldr	r1, [r7, #28]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	0018      	movs	r0, r3
 8005126:	f7ff fe23 	bl	8004d70 <put_fat>
 800512a:	0003      	movs	r3, r0
 800512c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800512e:	197b      	adds	r3, r7, r5
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <create_chain+0xf6>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800513c:	197c      	adds	r4, r7, r5
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	0018      	movs	r0, r3
 8005146:	f7ff fe13 	bl	8004d70 <put_fat>
 800514a:	0003      	movs	r3, r0
 800514c:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800514e:	2317      	movs	r3, #23
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d116      	bne.n	8005186 <create_chain+0x12e>
		fs->last_clst = ncl;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	691a      	ldr	r2, [r3, #16]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	3b02      	subs	r3, #2
 8005168:	429a      	cmp	r2, r3
 800516a:	d804      	bhi.n	8005176 <create_chain+0x11e>
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	1e5a      	subs	r2, r3, #1
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	791b      	ldrb	r3, [r3, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	4313      	orrs	r3, r2
 800517e:	b2da      	uxtb	r2, r3
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	711a      	strb	r2, [r3, #4]
 8005184:	e009      	b.n	800519a <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005186:	2317      	movs	r3, #23
 8005188:	18fb      	adds	r3, r7, r3
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d102      	bne.n	8005196 <create_chain+0x13e>
 8005190:	2301      	movs	r3, #1
 8005192:	425b      	negs	r3, r3
 8005194:	e000      	b.n	8005198 <create_chain+0x140>
 8005196:	2301      	movs	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800519a:	69fb      	ldr	r3, [r7, #28]
}
 800519c:	0018      	movs	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	b008      	add	sp, #32
 80051a2:	bdb0      	pop	{r4, r5, r7, pc}

080051a4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b8:	3304      	adds	r3, #4
 80051ba:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	0a5a      	lsrs	r2, r3, #9
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	895b      	ldrh	r3, [r3, #10]
 80051c4:	0019      	movs	r1, r3
 80051c6:	0010      	movs	r0, r2
 80051c8:	f7fa ffac 	bl	8000124 <__udivsi3>
 80051cc:	0003      	movs	r3, r0
 80051ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	613a      	str	r2, [r7, #16]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <clmt_clust+0x40>
 80051e0:	2300      	movs	r3, #0
 80051e2:	e010      	b.n	8005206 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d307      	bcc.n	80051fc <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	3304      	adds	r3, #4
 80051f8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80051fa:	e7e9      	b.n	80051d0 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 80051fc:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	18d3      	adds	r3, r2, r3
}
 8005206:	0018      	movs	r0, r3
 8005208:	46bd      	mov	sp, r7
 800520a:	b006      	add	sp, #24
 800520c:	bd80      	pop	{r7, pc}

0800520e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	2380      	movs	r3, #128	@ 0x80
 8005222:	039b      	lsls	r3, r3, #14
 8005224:	429a      	cmp	r2, r3
 8005226:	d203      	bcs.n	8005230 <dir_sdi+0x22>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	221f      	movs	r2, #31
 800522c:	4013      	ands	r3, r2
 800522e:	d001      	beq.n	8005234 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005230:	2302      	movs	r3, #2
 8005232:	e066      	b.n	8005302 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <dir_sdi+0x46>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d902      	bls.n	8005254 <dir_sdi+0x46>
		clst = fs->dirbase;
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10c      	bne.n	8005274 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	095b      	lsrs	r3, r3, #5
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	8912      	ldrh	r2, [r2, #8]
 8005262:	4293      	cmp	r3, r2
 8005264:	d301      	bcc.n	800526a <dir_sdi+0x5c>
 8005266:	2302      	movs	r3, #2
 8005268:	e04b      	b.n	8005302 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	61da      	str	r2, [r3, #28]
 8005272:	e02c      	b.n	80052ce <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	895b      	ldrh	r3, [r3, #10]
 8005278:	025b      	lsls	r3, r3, #9
 800527a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800527c:	e01a      	b.n	80052b4 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	0011      	movs	r1, r2
 8005284:	0018      	movs	r0, r3
 8005286:	f7ff fcc9 	bl	8004c1c <get_fat>
 800528a:	0003      	movs	r3, r0
 800528c:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	3301      	adds	r3, #1
 8005292:	d101      	bne.n	8005298 <dir_sdi+0x8a>
 8005294:	2301      	movs	r3, #1
 8005296:	e034      	b.n	8005302 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d904      	bls.n	80052a8 <dir_sdi+0x9a>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d301      	bcc.n	80052ac <dir_sdi+0x9e>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e02a      	b.n	8005302 <dir_sdi+0xf4>
			ofs -= csz;
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d2e0      	bcs.n	800527e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	0011      	movs	r1, r2
 80052c2:	0018      	movs	r0, r3
 80052c4:	f7ff fc8e 	bl	8004be4 <clust2sect>
 80052c8:	0002      	movs	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <dir_sdi+0xd2>
 80052dc:	2302      	movs	r3, #2
 80052de:	e010      	b.n	8005302 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	0a5b      	lsrs	r3, r3, #9
 80052e8:	18d2      	adds	r2, r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	3330      	adds	r3, #48	@ 0x30
 80052f2:	001a      	movs	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	05db      	lsls	r3, r3, #23
 80052f8:	0ddb      	lsrs	r3, r3, #23
 80052fa:	18d2      	adds	r2, r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	0018      	movs	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	b006      	add	sp, #24
 8005308:	bd80      	pop	{r7, pc}

0800530a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b086      	sub	sp, #24
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	3320      	adds	r3, #32
 8005320:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <dir_next+0x2a>
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	2380      	movs	r3, #128	@ 0x80
 800532e:	039b      	lsls	r3, r3, #14
 8005330:	429a      	cmp	r2, r3
 8005332:	d301      	bcc.n	8005338 <dir_next+0x2e>
 8005334:	2304      	movs	r3, #4
 8005336:	e0ad      	b.n	8005494 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	05db      	lsls	r3, r3, #23
 800533c:	0ddb      	lsrs	r3, r3, #23
 800533e:	d000      	beq.n	8005342 <dir_next+0x38>
 8005340:	e09b      	b.n	800547a <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	8912      	ldrh	r2, [r2, #8]
 800535c:	4293      	cmp	r3, r2
 800535e:	d200      	bcs.n	8005362 <dir_next+0x58>
 8005360:	e08b      	b.n	800547a <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	61da      	str	r2, [r3, #28]
 8005368:	2304      	movs	r3, #4
 800536a:	e093      	b.n	8005494 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	0a5b      	lsrs	r3, r3, #9
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	8952      	ldrh	r2, [r2, #10]
 8005374:	3a01      	subs	r2, #1
 8005376:	4013      	ands	r3, r2
 8005378:	d000      	beq.n	800537c <dir_next+0x72>
 800537a:	e07e      	b.n	800547a <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	0019      	movs	r1, r3
 8005384:	0010      	movs	r0, r2
 8005386:	f7ff fc49 	bl	8004c1c <get_fat>
 800538a:	0003      	movs	r3, r0
 800538c:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d801      	bhi.n	8005398 <dir_next+0x8e>
 8005394:	2302      	movs	r3, #2
 8005396:	e07d      	b.n	8005494 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3301      	adds	r3, #1
 800539c:	d101      	bne.n	80053a2 <dir_next+0x98>
 800539e:	2301      	movs	r3, #1
 80053a0:	e078      	b.n	8005494 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d35a      	bcc.n	8005462 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	61da      	str	r2, [r3, #28]
 80053b8:	2304      	movs	r3, #4
 80053ba:	e06b      	b.n	8005494 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	0019      	movs	r1, r3
 80053c4:	0010      	movs	r0, r2
 80053c6:	f7ff fe47 	bl	8005058 <create_chain>
 80053ca:	0003      	movs	r3, r0
 80053cc:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <dir_next+0xce>
 80053d4:	2307      	movs	r3, #7
 80053d6:	e05d      	b.n	8005494 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <dir_next+0xd8>
 80053de:	2302      	movs	r3, #2
 80053e0:	e058      	b.n	8005494 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	3301      	adds	r3, #1
 80053e6:	d101      	bne.n	80053ec <dir_next+0xe2>
 80053e8:	2301      	movs	r3, #1
 80053ea:	e053      	b.n	8005494 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7ff fafe 	bl	80049f0 <sync_window>
 80053f4:	1e03      	subs	r3, r0, #0
 80053f6:	d001      	beq.n	80053fc <dir_next+0xf2>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e04b      	b.n	8005494 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3330      	adds	r3, #48	@ 0x30
 8005400:	2280      	movs	r2, #128	@ 0x80
 8005402:	0092      	lsls	r2, r2, #2
 8005404:	2100      	movs	r1, #0
 8005406:	0018      	movs	r0, r3
 8005408:	f7ff f931 	bl	800466e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	0011      	movs	r1, r2
 8005416:	0018      	movs	r0, r3
 8005418:	f7ff fbe4 	bl	8004be4 <clust2sect>
 800541c:	0002      	movs	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005422:	e012      	b.n	800544a <dir_next+0x140>
						fs->wflag = 1;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	0018      	movs	r0, r3
 800542e:	f7ff fadf 	bl	80049f0 <sync_window>
 8005432:	1e03      	subs	r3, r0, #0
 8005434:	d001      	beq.n	800543a <dir_next+0x130>
 8005436:	2301      	movs	r3, #1
 8005438:	e02c      	b.n	8005494 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	3301      	adds	r3, #1
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	62da      	str	r2, [r3, #44]	@ 0x2c
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	895b      	ldrh	r3, [r3, #10]
 800544e:	001a      	movs	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4293      	cmp	r3, r2
 8005454:	d3e6      	bcc.n	8005424 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad2      	subs	r2, r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	0011      	movs	r1, r2
 800546e:	0018      	movs	r0, r3
 8005470:	f7ff fbb8 	bl	8004be4 <clust2sect>
 8005474:	0002      	movs	r2, r0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3330      	adds	r3, #48	@ 0x30
 8005484:	001a      	movs	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	05db      	lsls	r3, r3, #23
 800548a:	0ddb      	lsrs	r3, r3, #23
 800548c:	18d2      	adds	r2, r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	0018      	movs	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	b006      	add	sp, #24
 800549a:	bd80      	pop	{r7, pc}

0800549c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800549c:	b5b0      	push	{r4, r5, r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80054ac:	2517      	movs	r5, #23
 80054ae:	197c      	adds	r4, r7, r5
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2100      	movs	r1, #0
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7ff feaa 	bl	800520e <dir_sdi>
 80054ba:	0003      	movs	r3, r0
 80054bc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80054be:	197b      	adds	r3, r7, r5
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d133      	bne.n	800552e <dir_alloc+0x92>
		n = 0;
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	69da      	ldr	r2, [r3, #28]
 80054ce:	2517      	movs	r5, #23
 80054d0:	197c      	adds	r4, r7, r5
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	0011      	movs	r1, r2
 80054d6:	0018      	movs	r0, r3
 80054d8:	f7ff fad2 	bl	8004a80 <move_window>
 80054dc:	0003      	movs	r3, r0
 80054de:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80054e0:	197b      	adds	r3, r7, r5
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d121      	bne.n	800552c <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2be5      	cmp	r3, #229	@ 0xe5
 80054f0:	d004      	beq.n	80054fc <dir_alloc+0x60>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d107      	bne.n	800550c <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	3301      	adds	r3, #1
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	429a      	cmp	r2, r3
 8005508:	d102      	bne.n	8005510 <dir_alloc+0x74>
 800550a:	e010      	b.n	800552e <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005510:	2517      	movs	r5, #23
 8005512:	197c      	adds	r4, r7, r5
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2101      	movs	r1, #1
 8005518:	0018      	movs	r0, r3
 800551a:	f7ff fef6 	bl	800530a <dir_next>
 800551e:	0003      	movs	r3, r0
 8005520:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005522:	197b      	adds	r3, r7, r5
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0cf      	beq.n	80054ca <dir_alloc+0x2e>
 800552a:	e000      	b.n	800552e <dir_alloc+0x92>
			if (res != FR_OK) break;
 800552c:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800552e:	2217      	movs	r2, #23
 8005530:	18bb      	adds	r3, r7, r2
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d102      	bne.n	800553e <dir_alloc+0xa2>
 8005538:	18bb      	adds	r3, r7, r2
 800553a:	2207      	movs	r2, #7
 800553c:	701a      	strb	r2, [r3, #0]
	return res;
 800553e:	2317      	movs	r3, #23
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	781b      	ldrb	r3, [r3, #0]
}
 8005544:	0018      	movs	r0, r3
 8005546:	46bd      	mov	sp, r7
 8005548:	b006      	add	sp, #24
 800554a:	bdb0      	pop	{r4, r5, r7, pc}

0800554c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	331a      	adds	r3, #26
 800555a:	0018      	movs	r0, r3
 800555c:	f7fe ffe4 	bl	8004528 <ld_word>
 8005560:	0003      	movs	r3, r0
 8005562:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d109      	bne.n	8005580 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	0018      	movs	r0, r3
 8005572:	f7fe ffd9 	bl	8004528 <ld_word>
 8005576:	0003      	movs	r3, r0
 8005578:	041b      	lsls	r3, r3, #16
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005580:	68fb      	ldr	r3, [r7, #12]
}
 8005582:	0018      	movs	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	b004      	add	sp, #16
 8005588:	bd80      	pop	{r7, pc}

0800558a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	331a      	adds	r3, #26
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	b292      	uxth	r2, r2
 800559e:	0011      	movs	r1, r2
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7fe fffd 	bl	80045a0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d109      	bne.n	80055c2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	3314      	adds	r3, #20
 80055b2:	001a      	movs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	0c1b      	lsrs	r3, r3, #16
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	0019      	movs	r1, r3
 80055bc:	0010      	movs	r0, r2
 80055be:	f7fe ffef 	bl	80045a0 <st_word>
	}
}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b004      	add	sp, #16
 80055c8:	bd80      	pop	{r7, pc}

080055ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80055ca:	b5b0      	push	{r4, r5, r7, lr}
 80055cc:	b086      	sub	sp, #24
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80055d8:	2517      	movs	r5, #23
 80055da:	197c      	adds	r4, r7, r5
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2100      	movs	r1, #0
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7ff fe14 	bl	800520e <dir_sdi>
 80055e6:	0003      	movs	r3, r0
 80055e8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80055ea:	197b      	adds	r3, r7, r5
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <dir_find+0x2e>
 80055f2:	197b      	adds	r3, r7, r5
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	e04c      	b.n	8005692 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	2517      	movs	r5, #23
 80055fe:	197c      	adds	r4, r7, r5
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	0011      	movs	r1, r2
 8005604:	0018      	movs	r0, r3
 8005606:	f7ff fa3b 	bl	8004a80 <move_window>
 800560a:	0003      	movs	r3, r0
 800560c:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800560e:	0029      	movs	r1, r5
 8005610:	187b      	adds	r3, r7, r1
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d136      	bne.n	8005686 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	200f      	movs	r0, #15
 800561e:	183b      	adds	r3, r7, r0
 8005620:	7812      	ldrb	r2, [r2, #0]
 8005622:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005624:	183b      	adds	r3, r7, r0
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <dir_find+0x6a>
 800562c:	187b      	adds	r3, r7, r1
 800562e:	2204      	movs	r2, #4
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	e02b      	b.n	800568c <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	330b      	adds	r3, #11
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	223f      	movs	r2, #63	@ 0x3f
 800563e:	4013      	ands	r3, r2
 8005640:	b2da      	uxtb	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	330b      	adds	r3, #11
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	001a      	movs	r2, r3
 8005650:	2308      	movs	r3, #8
 8005652:	4013      	ands	r3, r2
 8005654:	d109      	bne.n	800566a <dir_find+0xa0>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a18      	ldr	r0, [r3, #32]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3324      	adds	r3, #36	@ 0x24
 800565e:	220b      	movs	r2, #11
 8005660:	0019      	movs	r1, r3
 8005662:	f7ff f81d 	bl	80046a0 <mem_cmp>
 8005666:	1e03      	subs	r3, r0, #0
 8005668:	d00f      	beq.n	800568a <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800566a:	2517      	movs	r5, #23
 800566c:	197c      	adds	r4, r7, r5
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2100      	movs	r1, #0
 8005672:	0018      	movs	r0, r3
 8005674:	f7ff fe49 	bl	800530a <dir_next>
 8005678:	0003      	movs	r3, r0
 800567a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800567c:	197b      	adds	r3, r7, r5
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0b9      	beq.n	80055f8 <dir_find+0x2e>
 8005684:	e002      	b.n	800568c <dir_find+0xc2>
		if (res != FR_OK) break;
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	e000      	b.n	800568c <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800568a:	46c0      	nop			@ (mov r8, r8)

	return res;
 800568c:	2317      	movs	r3, #23
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	781b      	ldrb	r3, [r3, #0]
}
 8005692:	0018      	movs	r0, r3
 8005694:	46bd      	mov	sp, r7
 8005696:	b006      	add	sp, #24
 8005698:	bdb0      	pop	{r4, r5, r7, pc}

0800569a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800569a:	b5b0      	push	{r4, r5, r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80056a8:	250f      	movs	r5, #15
 80056aa:	197c      	adds	r4, r7, r5
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2101      	movs	r1, #1
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7ff fef3 	bl	800549c <dir_alloc>
 80056b6:	0003      	movs	r3, r0
 80056b8:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80056ba:	197b      	adds	r3, r7, r5
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11f      	bne.n	8005702 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69da      	ldr	r2, [r3, #28]
 80056c6:	197c      	adds	r4, r7, r5
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	0011      	movs	r1, r2
 80056cc:	0018      	movs	r0, r3
 80056ce:	f7ff f9d7 	bl	8004a80 <move_window>
 80056d2:	0003      	movs	r3, r0
 80056d4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80056d6:	197b      	adds	r3, r7, r5
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d111      	bne.n	8005702 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	2220      	movs	r2, #32
 80056e4:	2100      	movs	r1, #0
 80056e6:	0018      	movs	r0, r3
 80056e8:	f7fe ffc1 	bl	800466e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a18      	ldr	r0, [r3, #32]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3324      	adds	r3, #36	@ 0x24
 80056f4:	220b      	movs	r2, #11
 80056f6:	0019      	movs	r1, r3
 80056f8:	f7fe ff9a 	bl	8004630 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2201      	movs	r2, #1
 8005700:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005702:	230f      	movs	r3, #15
 8005704:	18fb      	adds	r3, r7, r3
 8005706:	781b      	ldrb	r3, [r3, #0]
}
 8005708:	0018      	movs	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	b004      	add	sp, #16
 800570e:	bdb0      	pop	{r4, r5, r7, pc}

08005710 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b088      	sub	sp, #32
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3324      	adds	r3, #36	@ 0x24
 8005724:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	220b      	movs	r2, #11
 800572a:	2120      	movs	r1, #32
 800572c:	0018      	movs	r0, r3
 800572e:	f7fe ff9e 	bl	800466e <mem_set>
	si = i = 0; ni = 8;
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	2308      	movs	r3, #8
 800573c:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	61fa      	str	r2, [r7, #28]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	18d2      	adds	r2, r2, r3
 8005748:	211b      	movs	r1, #27
 800574a:	187b      	adds	r3, r7, r1
 800574c:	7812      	ldrb	r2, [r2, #0]
 800574e:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005750:	000a      	movs	r2, r1
 8005752:	18bb      	adds	r3, r7, r2
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b20      	cmp	r3, #32
 8005758:	d800      	bhi.n	800575c <create_name+0x4c>
 800575a:	e062      	b.n	8005822 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800575c:	18bb      	adds	r3, r7, r2
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	2b2f      	cmp	r3, #47	@ 0x2f
 8005762:	d007      	beq.n	8005774 <create_name+0x64>
 8005764:	18bb      	adds	r3, r7, r2
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b5c      	cmp	r3, #92	@ 0x5c
 800576a:	d110      	bne.n	800578e <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800576c:	e002      	b.n	8005774 <create_name+0x64>
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	3301      	adds	r3, #1
 8005772:	61fb      	str	r3, [r7, #28]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	18d3      	adds	r3, r2, r3
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b2f      	cmp	r3, #47	@ 0x2f
 800577e:	d0f6      	beq.n	800576e <create_name+0x5e>
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b5c      	cmp	r3, #92	@ 0x5c
 800578a:	d0f0      	beq.n	800576e <create_name+0x5e>
			break;
 800578c:	e04a      	b.n	8005824 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800578e:	231b      	movs	r3, #27
 8005790:	18fb      	adds	r3, r7, r3
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b2e      	cmp	r3, #46	@ 0x2e
 8005796:	d003      	beq.n	80057a0 <create_name+0x90>
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	429a      	cmp	r2, r3
 800579e:	d30e      	bcc.n	80057be <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b0b      	cmp	r3, #11
 80057a4:	d004      	beq.n	80057b0 <create_name+0xa0>
 80057a6:	231b      	movs	r3, #27
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80057ae:	d001      	beq.n	80057b4 <create_name+0xa4>
 80057b0:	2306      	movs	r3, #6
 80057b2:	e054      	b.n	800585e <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 80057b4:	2308      	movs	r3, #8
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	230b      	movs	r3, #11
 80057ba:	617b      	str	r3, [r7, #20]
			continue;
 80057bc:	e030      	b.n	8005820 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 80057be:	211b      	movs	r1, #27
 80057c0:	187b      	adds	r3, r7, r1
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b25b      	sxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	da07      	bge.n	80057da <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80057ca:	187b      	adds	r3, r7, r1
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	3b80      	subs	r3, #128	@ 0x80
 80057d0:	001a      	movs	r2, r3
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	4924      	ldr	r1, [pc, #144]	@ (8005868 <create_name+0x158>)
 80057d6:	5c8a      	ldrb	r2, [r1, r2]
 80057d8:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80057da:	231b      	movs	r3, #27
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	781a      	ldrb	r2, [r3, #0]
 80057e0:	4b22      	ldr	r3, [pc, #136]	@ (800586c <create_name+0x15c>)
 80057e2:	0011      	movs	r1, r2
 80057e4:	0018      	movs	r0, r3
 80057e6:	f7fe ff80 	bl	80046ea <chk_chr>
 80057ea:	1e03      	subs	r3, r0, #0
 80057ec:	d001      	beq.n	80057f2 <create_name+0xe2>
 80057ee:	2306      	movs	r3, #6
 80057f0:	e035      	b.n	800585e <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80057f2:	221b      	movs	r2, #27
 80057f4:	18bb      	adds	r3, r7, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b60      	cmp	r3, #96	@ 0x60
 80057fa:	d908      	bls.n	800580e <create_name+0xfe>
 80057fc:	18bb      	adds	r3, r7, r2
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b7a      	cmp	r3, #122	@ 0x7a
 8005802:	d804      	bhi.n	800580e <create_name+0xfe>
 8005804:	18bb      	adds	r3, r7, r2
 8005806:	18ba      	adds	r2, r7, r2
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	3a20      	subs	r2, #32
 800580c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	613a      	str	r2, [r7, #16]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	18d3      	adds	r3, r2, r3
 8005818:	221b      	movs	r2, #27
 800581a:	18ba      	adds	r2, r7, r2
 800581c:	7812      	ldrb	r2, [r2, #0]
 800581e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005820:	e78d      	b.n	800573e <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005822:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	18d2      	adds	r2, r2, r3
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d101      	bne.n	8005838 <create_name+0x128>
 8005834:	2306      	movs	r3, #6
 8005836:	e012      	b.n	800585e <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2be5      	cmp	r3, #229	@ 0xe5
 800583e:	d102      	bne.n	8005846 <create_name+0x136>
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2205      	movs	r2, #5
 8005844:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005846:	231b      	movs	r3, #27
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b20      	cmp	r3, #32
 800584e:	d801      	bhi.n	8005854 <create_name+0x144>
 8005850:	2204      	movs	r2, #4
 8005852:	e000      	b.n	8005856 <create_name+0x146>
 8005854:	2200      	movs	r2, #0
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	330b      	adds	r3, #11
 800585a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800585c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800585e:	0018      	movs	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	b008      	add	sp, #32
 8005864:	bd80      	pop	{r7, pc}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	08007a4c 	.word	0x08007a4c
 800586c:	08007980 	.word	0x08007980

08005870 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005870:	b5b0      	push	{r4, r5, r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005884:	e002      	b.n	800588c <follow_path+0x1c>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	603b      	str	r3, [r7, #0]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b2f      	cmp	r3, #47	@ 0x2f
 8005892:	d0f8      	beq.n	8005886 <follow_path+0x16>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b5c      	cmp	r3, #92	@ 0x5c
 800589a:	d0f4      	beq.n	8005886 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2200      	movs	r2, #0
 80058a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b1f      	cmp	r3, #31
 80058a8:	d80d      	bhi.n	80058c6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	222f      	movs	r2, #47	@ 0x2f
 80058ae:	2180      	movs	r1, #128	@ 0x80
 80058b0:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 80058b2:	2317      	movs	r3, #23
 80058b4:	18fc      	adds	r4, r7, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2100      	movs	r1, #0
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7ff fca7 	bl	800520e <dir_sdi>
 80058c0:	0003      	movs	r3, r0
 80058c2:	7023      	strb	r3, [r4, #0]
 80058c4:	e052      	b.n	800596c <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80058c6:	2517      	movs	r5, #23
 80058c8:	197c      	adds	r4, r7, r5
 80058ca:	003a      	movs	r2, r7
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0011      	movs	r1, r2
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7ff ff1d 	bl	8005710 <create_name>
 80058d6:	0003      	movs	r3, r0
 80058d8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80058da:	197b      	adds	r3, r7, r5
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d13f      	bne.n	8005962 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 80058e2:	197c      	adds	r4, r7, r5
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f7ff fe6f 	bl	80055ca <dir_find>
 80058ec:	0003      	movs	r3, r0
 80058ee:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80058f0:	200b      	movs	r0, #11
 80058f2:	183b      	adds	r3, r7, r0
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	212f      	movs	r1, #47	@ 0x2f
 80058f8:	5c52      	ldrb	r2, [r2, r1]
 80058fa:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80058fc:	197b      	adds	r3, r7, r5
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00c      	beq.n	800591e <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005904:	197b      	adds	r3, r7, r5
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b04      	cmp	r3, #4
 800590a:	d12c      	bne.n	8005966 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800590c:	183b      	adds	r3, r7, r0
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2204      	movs	r2, #4
 8005912:	4013      	ands	r3, r2
 8005914:	d127      	bne.n	8005966 <follow_path+0xf6>
 8005916:	197b      	adds	r3, r7, r5
 8005918:	2205      	movs	r2, #5
 800591a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800591c:	e023      	b.n	8005966 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800591e:	230b      	movs	r3, #11
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2204      	movs	r2, #4
 8005926:	4013      	ands	r3, r2
 8005928:	d11f      	bne.n	800596a <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	799b      	ldrb	r3, [r3, #6]
 800592e:	001a      	movs	r2, r3
 8005930:	2310      	movs	r3, #16
 8005932:	4013      	ands	r3, r2
 8005934:	d104      	bne.n	8005940 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8005936:	2317      	movs	r3, #23
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	2205      	movs	r2, #5
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	e015      	b.n	800596c <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3330      	adds	r3, #48	@ 0x30
 8005944:	001a      	movs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	05db      	lsls	r3, r3, #23
 800594c:	0ddb      	lsrs	r3, r3, #23
 800594e:	18d2      	adds	r2, r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	0011      	movs	r1, r2
 8005954:	0018      	movs	r0, r3
 8005956:	f7ff fdf9 	bl	800554c <ld_clust>
 800595a:	0002      	movs	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005960:	e7b1      	b.n	80058c6 <follow_path+0x56>
			if (res != FR_OK) break;
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	e002      	b.n	800596c <follow_path+0xfc>
				break;
 8005966:	46c0      	nop			@ (mov r8, r8)
 8005968:	e000      	b.n	800596c <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800596a:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 800596c:	2317      	movs	r3, #23
 800596e:	18fb      	adds	r3, r7, r3
 8005970:	781b      	ldrb	r3, [r3, #0]
}
 8005972:	0018      	movs	r0, r3
 8005974:	46bd      	mov	sp, r7
 8005976:	b006      	add	sp, #24
 8005978:	bdb0      	pop	{r4, r5, r7, pc}

0800597a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b086      	sub	sp, #24
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005982:	2301      	movs	r3, #1
 8005984:	425b      	negs	r3, r3
 8005986:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d031      	beq.n	80059f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e002      	b.n	800599e <get_ldnumber+0x24>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3301      	adds	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b20      	cmp	r3, #32
 80059a4:	d903      	bls.n	80059ae <get_ldnumber+0x34>
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b3a      	cmp	r3, #58	@ 0x3a
 80059ac:	d1f4      	bne.n	8005998 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b3a      	cmp	r3, #58	@ 0x3a
 80059b4:	d11c      	bne.n	80059f0 <get_ldnumber+0x76>
			tp = *path;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	60fa      	str	r2, [r7, #12]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	3b30      	subs	r3, #48	@ 0x30
 80059c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b09      	cmp	r3, #9
 80059cc:	d80e      	bhi.n	80059ec <get_ldnumber+0x72>
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d10a      	bne.n	80059ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d107      	bne.n	80059ec <get_ldnumber+0x72>
					vol = (int)i;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	3301      	adds	r3, #1
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	e002      	b.n	80059f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80059f4:	693b      	ldr	r3, [r7, #16]
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b006      	add	sp, #24
 80059fc:	bd80      	pop	{r7, pc}
	...

08005a00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	70da      	strb	r2, [r3, #3]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	4252      	negs	r2, r2
 8005a16:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0011      	movs	r1, r2
 8005a1e:	0018      	movs	r0, r3
 8005a20:	f7ff f82e 	bl	8004a80 <move_window>
 8005a24:	1e03      	subs	r3, r0, #0
 8005a26:	d001      	beq.n	8005a2c <check_fs+0x2c>
 8005a28:	2304      	movs	r3, #4
 8005a2a:	e037      	b.n	8005a9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3330      	adds	r3, #48	@ 0x30
 8005a30:	33ff      	adds	r3, #255	@ 0xff
 8005a32:	33ff      	adds	r3, #255	@ 0xff
 8005a34:	0018      	movs	r0, r3
 8005a36:	f7fe fd77 	bl	8004528 <ld_word>
 8005a3a:	0003      	movs	r3, r0
 8005a3c:	001a      	movs	r2, r3
 8005a3e:	4b19      	ldr	r3, [pc, #100]	@ (8005aa4 <check_fs+0xa4>)
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <check_fs+0x48>
 8005a44:	2303      	movs	r3, #3
 8005a46:	e029      	b.n	8005a9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2230      	movs	r2, #48	@ 0x30
 8005a4c:	5c9b      	ldrb	r3, [r3, r2]
 8005a4e:	2be9      	cmp	r3, #233	@ 0xe9
 8005a50:	d009      	beq.n	8005a66 <check_fs+0x66>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2230      	movs	r2, #48	@ 0x30
 8005a56:	5c9b      	ldrb	r3, [r3, r2]
 8005a58:	2beb      	cmp	r3, #235	@ 0xeb
 8005a5a:	d11e      	bne.n	8005a9a <check_fs+0x9a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2232      	movs	r2, #50	@ 0x32
 8005a60:	5c9b      	ldrb	r3, [r3, r2]
 8005a62:	2b90      	cmp	r3, #144	@ 0x90
 8005a64:	d119      	bne.n	8005a9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	3330      	adds	r3, #48	@ 0x30
 8005a6a:	3336      	adds	r3, #54	@ 0x36
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f7fe fd76 	bl	800455e <ld_dword>
 8005a72:	0003      	movs	r3, r0
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa8 <check_fs+0xa8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d101      	bne.n	8005a82 <check_fs+0x82>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e00c      	b.n	8005a9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3330      	adds	r3, #48	@ 0x30
 8005a86:	3352      	adds	r3, #82	@ 0x52
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f7fe fd68 	bl	800455e <ld_dword>
 8005a8e:	0003      	movs	r3, r0
 8005a90:	4a06      	ldr	r2, [pc, #24]	@ (8005aac <check_fs+0xac>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d101      	bne.n	8005a9a <check_fs+0x9a>
 8005a96:	2300      	movs	r3, #0
 8005a98:	e000      	b.n	8005a9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005a9a:	2302      	movs	r3, #2
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b002      	add	sp, #8
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	0000aa55 	.word	0x0000aa55
 8005aa8:	00544146 	.word	0x00544146
 8005aac:	33544146 	.word	0x33544146

08005ab0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005ab0:	b5b0      	push	{r4, r5, r7, lr}
 8005ab2:	b096      	sub	sp, #88	@ 0x58
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	1dfb      	adds	r3, r7, #7
 8005abc:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f7ff ff57 	bl	800597a <get_ldnumber>
 8005acc:	0003      	movs	r3, r0
 8005ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	da01      	bge.n	8005ada <find_volume+0x2a>
 8005ad6:	230b      	movs	r3, #11
 8005ad8:	e24b      	b.n	8005f72 <find_volume+0x4c2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005ada:	4bcc      	ldr	r3, [pc, #816]	@ (8005e0c <find_volume+0x35c>)
 8005adc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ade:	0092      	lsls	r2, r2, #2
 8005ae0:	58d3      	ldr	r3, [r2, r3]
 8005ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <find_volume+0x3e>
 8005aea:	230c      	movs	r3, #12
 8005aec:	e241      	b.n	8005f72 <find_volume+0x4c2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005af2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005af4:	1dfb      	adds	r3, r7, #7
 8005af6:	1dfa      	adds	r2, r7, #7
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	2101      	movs	r1, #1
 8005afc:	438a      	bics	r2, r1
 8005afe:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01b      	beq.n	8005b40 <find_volume+0x90>
		stat = disk_status(fs->drv);
 8005b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2537      	movs	r5, #55	@ 0x37
 8005b0e:	197c      	adds	r4, r7, r5
 8005b10:	0018      	movs	r0, r3
 8005b12:	f7fe fc3f 	bl	8004394 <disk_status>
 8005b16:	0003      	movs	r3, r0
 8005b18:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005b1a:	0029      	movs	r1, r5
 8005b1c:	187b      	adds	r3, r7, r1
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2201      	movs	r2, #1
 8005b22:	4013      	ands	r3, r2
 8005b24:	d10c      	bne.n	8005b40 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005b26:	1dfb      	adds	r3, r7, #7
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d006      	beq.n	8005b3c <find_volume+0x8c>
 8005b2e:	187b      	adds	r3, r7, r1
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2204      	movs	r2, #4
 8005b34:	4013      	ands	r3, r2
 8005b36:	d001      	beq.n	8005b3c <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8005b38:	230a      	movs	r3, #10
 8005b3a:	e21a      	b.n	8005f72 <find_volume+0x4c2>
			}
			return FR_OK;				/* The file system object is valid */
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e218      	b.n	8005f72 <find_volume+0x4c2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2537      	movs	r5, #55	@ 0x37
 8005b54:	197c      	adds	r4, r7, r5
 8005b56:	0018      	movs	r0, r3
 8005b58:	f7fe fc3e 	bl	80043d8 <disk_initialize>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005b60:	197b      	adds	r3, r7, r5
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	4013      	ands	r3, r2
 8005b68:	d001      	beq.n	8005b6e <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e201      	b.n	8005f72 <find_volume+0x4c2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005b6e:	1dfb      	adds	r3, r7, #7
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d007      	beq.n	8005b86 <find_volume+0xd6>
 8005b76:	2337      	movs	r3, #55	@ 0x37
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d001      	beq.n	8005b86 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8005b82:	230a      	movs	r3, #10
 8005b84:	e1f5      	b.n	8005f72 <find_volume+0x4c2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005b8a:	2557      	movs	r5, #87	@ 0x57
 8005b8c:	197c      	adds	r4, r7, r5
 8005b8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	0011      	movs	r1, r2
 8005b94:	0018      	movs	r0, r3
 8005b96:	f7ff ff33 	bl	8005a00 <check_fs>
 8005b9a:	0003      	movs	r3, r0
 8005b9c:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005b9e:	197b      	adds	r3, r7, r5
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d14b      	bne.n	8005c3e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005baa:	e01d      	b.n	8005be8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	3330      	adds	r3, #48	@ 0x30
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	33bf      	adds	r3, #191	@ 0xbf
 8005bb8:	33ff      	adds	r3, #255	@ 0xff
 8005bba:	18d3      	adds	r3, r2, r3
 8005bbc:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d006      	beq.n	8005bd6 <find_volume+0x126>
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	3308      	adds	r3, #8
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7fe fcc6 	bl	800455e <ld_dword>
 8005bd2:	0003      	movs	r3, r0
 8005bd4:	e000      	b.n	8005bd8 <find_volume+0x128>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2214      	movs	r2, #20
 8005bda:	18ba      	adds	r2, r7, r2
 8005bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bde:	0089      	lsls	r1, r1, #2
 8005be0:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005be4:	3301      	adds	r3, #1
 8005be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d9de      	bls.n	8005bac <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005bee:	2300      	movs	r3, #0
 8005bf0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <find_volume+0x14e>
 8005bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005bfe:	2314      	movs	r3, #20
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	58d3      	ldr	r3, [r2, r3]
 8005c08:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <find_volume+0x172>
 8005c10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c14:	0011      	movs	r1, r2
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7ff fef2 	bl	8005a00 <check_fs>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	001a      	movs	r2, r3
 8005c20:	e000      	b.n	8005c24 <find_volume+0x174>
 8005c22:	2203      	movs	r2, #3
 8005c24:	2157      	movs	r1, #87	@ 0x57
 8005c26:	187b      	adds	r3, r7, r1
 8005c28:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005c2a:	187b      	adds	r3, r7, r1
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d905      	bls.n	8005c3e <find_volume+0x18e>
 8005c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c34:	3301      	adds	r3, #1
 8005c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d9df      	bls.n	8005bfe <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005c3e:	2357      	movs	r3, #87	@ 0x57
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d101      	bne.n	8005c4c <find_volume+0x19c>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e192      	b.n	8005f72 <find_volume+0x4c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005c4c:	2357      	movs	r3, #87	@ 0x57
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d901      	bls.n	8005c5a <find_volume+0x1aa>
 8005c56:	230d      	movs	r3, #13
 8005c58:	e18b      	b.n	8005f72 <find_volume+0x4c2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	3330      	adds	r3, #48	@ 0x30
 8005c5e:	330b      	adds	r3, #11
 8005c60:	0018      	movs	r0, r3
 8005c62:	f7fe fc61 	bl	8004528 <ld_word>
 8005c66:	0003      	movs	r3, r0
 8005c68:	001a      	movs	r2, r3
 8005c6a:	2380      	movs	r3, #128	@ 0x80
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d001      	beq.n	8005c76 <find_volume+0x1c6>
 8005c72:	230d      	movs	r3, #13
 8005c74:	e17d      	b.n	8005f72 <find_volume+0x4c2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	3330      	adds	r3, #48	@ 0x30
 8005c7a:	3316      	adds	r3, #22
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7fe fc53 	bl	8004528 <ld_word>
 8005c82:	0003      	movs	r3, r0
 8005c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005c86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d107      	bne.n	8005c9c <find_volume+0x1ec>
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8e:	3330      	adds	r3, #48	@ 0x30
 8005c90:	3324      	adds	r3, #36	@ 0x24
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fe fc63 	bl	800455e <ld_dword>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ca0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	2240      	movs	r2, #64	@ 0x40
 8005ca6:	5c9a      	ldrb	r2, [r3, r2]
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	789b      	ldrb	r3, [r3, #2]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d005      	beq.n	8005cc0 <find_volume+0x210>
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb6:	789b      	ldrb	r3, [r3, #2]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d001      	beq.n	8005cc0 <find_volume+0x210>
 8005cbc:	230d      	movs	r3, #13
 8005cbe:	e158      	b.n	8005f72 <find_volume+0x4c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	789b      	ldrb	r3, [r3, #2]
 8005cc4:	001a      	movs	r2, r3
 8005cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cc8:	4353      	muls	r3, r2
 8005cca:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cce:	223d      	movs	r2, #61	@ 0x3d
 8005cd0:	5c9b      	ldrb	r3, [r3, r2]
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	895b      	ldrh	r3, [r3, #10]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d007      	beq.n	8005cf0 <find_volume+0x240>
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	895b      	ldrh	r3, [r3, #10]
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce8:	895b      	ldrh	r3, [r3, #10]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	4013      	ands	r3, r2
 8005cee:	d001      	beq.n	8005cf4 <find_volume+0x244>
 8005cf0:	230d      	movs	r3, #13
 8005cf2:	e13e      	b.n	8005f72 <find_volume+0x4c2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	3330      	adds	r3, #48	@ 0x30
 8005cf8:	3311      	adds	r3, #17
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f7fe fc14 	bl	8004528 <ld_word>
 8005d00:	0003      	movs	r3, r0
 8005d02:	001a      	movs	r2, r3
 8005d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	891b      	ldrh	r3, [r3, #8]
 8005d0c:	220f      	movs	r2, #15
 8005d0e:	4013      	ands	r3, r2
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <find_volume+0x26a>
 8005d16:	230d      	movs	r3, #13
 8005d18:	e12b      	b.n	8005f72 <find_volume+0x4c2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1c:	3330      	adds	r3, #48	@ 0x30
 8005d1e:	3313      	adds	r3, #19
 8005d20:	0018      	movs	r0, r3
 8005d22:	f7fe fc01 	bl	8004528 <ld_word>
 8005d26:	0003      	movs	r3, r0
 8005d28:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005d2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d107      	bne.n	8005d40 <find_volume+0x290>
 8005d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d32:	3330      	adds	r3, #48	@ 0x30
 8005d34:	3320      	adds	r3, #32
 8005d36:	0018      	movs	r0, r3
 8005d38:	f7fe fc11 	bl	800455e <ld_dword>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d42:	3330      	adds	r3, #48	@ 0x30
 8005d44:	330e      	adds	r3, #14
 8005d46:	252e      	movs	r5, #46	@ 0x2e
 8005d48:	197c      	adds	r4, r7, r5
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	f7fe fbec 	bl	8004528 <ld_word>
 8005d50:	0003      	movs	r3, r0
 8005d52:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005d54:	197b      	adds	r3, r7, r5
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <find_volume+0x2b0>
 8005d5c:	230d      	movs	r3, #13
 8005d5e:	e108      	b.n	8005f72 <find_volume+0x4c2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005d60:	232e      	movs	r3, #46	@ 0x2e
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	881a      	ldrh	r2, [r3, #0]
 8005d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d68:	18d3      	adds	r3, r2, r3
 8005d6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d6c:	8912      	ldrh	r2, [r2, #8]
 8005d6e:	0912      	lsrs	r2, r2, #4
 8005d70:	b292      	uxth	r2, r2
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005d76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d201      	bcs.n	8005d82 <find_volume+0x2d2>
 8005d7e:	230d      	movs	r3, #13
 8005d80:	e0f7      	b.n	8005f72 <find_volume+0x4c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005d82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d86:	1ad2      	subs	r2, r2, r3
 8005d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8a:	895b      	ldrh	r3, [r3, #10]
 8005d8c:	0019      	movs	r1, r3
 8005d8e:	0010      	movs	r0, r2
 8005d90:	f7fa f9c8 	bl	8000124 <__udivsi3>
 8005d94:	0003      	movs	r3, r0
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <find_volume+0x2f2>
 8005d9e:	230d      	movs	r3, #13
 8005da0:	e0e7      	b.n	8005f72 <find_volume+0x4c2>
		fmt = FS_FAT32;
 8005da2:	2157      	movs	r1, #87	@ 0x57
 8005da4:	187b      	adds	r3, r7, r1
 8005da6:	2203      	movs	r2, #3
 8005da8:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	4a18      	ldr	r2, [pc, #96]	@ (8005e10 <find_volume+0x360>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d802      	bhi.n	8005db8 <find_volume+0x308>
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	2202      	movs	r2, #2
 8005db6:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dba:	4a16      	ldr	r2, [pc, #88]	@ (8005e14 <find_volume+0x364>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d803      	bhi.n	8005dc8 <find_volume+0x318>
 8005dc0:	2357      	movs	r3, #87	@ 0x57
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dce:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005dd4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005dd6:	232e      	movs	r3, #46	@ 0x2e
 8005dd8:	18fb      	adds	r3, r7, r3
 8005dda:	881a      	ldrh	r2, [r3, #0]
 8005ddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dde:	18d2      	adds	r2, r2, r3
 8005de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005de4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de8:	18d2      	adds	r2, r2, r3
 8005dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005dee:	2357      	movs	r3, #87	@ 0x57
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d123      	bne.n	8005e40 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	3330      	adds	r3, #48	@ 0x30
 8005dfc:	332a      	adds	r3, #42	@ 0x2a
 8005dfe:	0018      	movs	r0, r3
 8005e00:	f7fe fb92 	bl	8004528 <ld_word>
 8005e04:	1e03      	subs	r3, r0, #0
 8005e06:	d007      	beq.n	8005e18 <find_volume+0x368>
 8005e08:	230d      	movs	r3, #13
 8005e0a:	e0b2      	b.n	8005f72 <find_volume+0x4c2>
 8005e0c:	200002a0 	.word	0x200002a0
 8005e10:	0000fff5 	.word	0x0000fff5
 8005e14:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	891b      	ldrh	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <find_volume+0x374>
 8005e20:	230d      	movs	r3, #13
 8005e22:	e0a6      	b.n	8005f72 <find_volume+0x4c2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e26:	3330      	adds	r3, #48	@ 0x30
 8005e28:	332c      	adds	r3, #44	@ 0x2c
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f7fe fb97 	bl	800455e <ld_dword>
 8005e30:	0002      	movs	r2, r0
 8005e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e34:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e3e:	e020      	b.n	8005e82 <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	891b      	ldrh	r3, [r3, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <find_volume+0x39c>
 8005e48:	230d      	movs	r3, #13
 8005e4a:	e092      	b.n	8005f72 <find_volume+0x4c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e52:	18d2      	adds	r2, r2, r3
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005e58:	2357      	movs	r3, #87	@ 0x57
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d103      	bne.n	8005e6a <find_volume+0x3ba>
 8005e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	005b      	lsls	r3, r3, #1
 8005e68:	e00a      	b.n	8005e80 <find_volume+0x3d0>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	695a      	ldr	r2, [r3, #20]
 8005e6e:	0013      	movs	r3, r2
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	189b      	adds	r3, r3, r2
 8005e74:	085a      	lsrs	r2, r3, #1
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	400b      	ands	r3, r1
 8005e7e:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005e80:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e88:	493c      	ldr	r1, [pc, #240]	@ (8005f7c <find_volume+0x4cc>)
 8005e8a:	468c      	mov	ip, r1
 8005e8c:	4463      	add	r3, ip
 8005e8e:	0a5b      	lsrs	r3, r3, #9
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d201      	bcs.n	8005e98 <find_volume+0x3e8>
 8005e94:	230d      	movs	r3, #13
 8005e96:	e06c      	b.n	8005f72 <find_volume+0x4c2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4252      	negs	r2, r2
 8005e9e:	611a      	str	r2, [r3, #16]
 8005ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eaa:	2280      	movs	r2, #128	@ 0x80
 8005eac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005eae:	2357      	movs	r3, #87	@ 0x57
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d148      	bne.n	8005f4a <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eba:	3330      	adds	r3, #48	@ 0x30
 8005ebc:	3330      	adds	r3, #48	@ 0x30
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7fe fb32 	bl	8004528 <ld_word>
 8005ec4:	0003      	movs	r3, r0
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d13f      	bne.n	8005f4a <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ecc:	1c5a      	adds	r2, r3, #1
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	0011      	movs	r1, r2
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f7fe fdd4 	bl	8004a80 <move_window>
 8005ed8:	1e03      	subs	r3, r0, #0
 8005eda:	d136      	bne.n	8005f4a <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 8005edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ede:	2200      	movs	r2, #0
 8005ee0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	3330      	adds	r3, #48	@ 0x30
 8005ee6:	33ff      	adds	r3, #255	@ 0xff
 8005ee8:	33ff      	adds	r3, #255	@ 0xff
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7fe fb1c 	bl	8004528 <ld_word>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	001a      	movs	r2, r3
 8005ef4:	4b22      	ldr	r3, [pc, #136]	@ (8005f80 <find_volume+0x4d0>)
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d127      	bne.n	8005f4a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	3330      	adds	r3, #48	@ 0x30
 8005efe:	0018      	movs	r0, r3
 8005f00:	f7fe fb2d 	bl	800455e <ld_dword>
 8005f04:	0003      	movs	r3, r0
 8005f06:	4a1f      	ldr	r2, [pc, #124]	@ (8005f84 <find_volume+0x4d4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d11e      	bne.n	8005f4a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	3330      	adds	r3, #48	@ 0x30
 8005f10:	33e5      	adds	r3, #229	@ 0xe5
 8005f12:	33ff      	adds	r3, #255	@ 0xff
 8005f14:	0018      	movs	r0, r3
 8005f16:	f7fe fb22 	bl	800455e <ld_dword>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f88 <find_volume+0x4d8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d113      	bne.n	8005f4a <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f24:	3330      	adds	r3, #48	@ 0x30
 8005f26:	33e9      	adds	r3, #233	@ 0xe9
 8005f28:	33ff      	adds	r3, #255	@ 0xff
 8005f2a:	0018      	movs	r0, r3
 8005f2c:	f7fe fb17 	bl	800455e <ld_dword>
 8005f30:	0002      	movs	r2, r0
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	3330      	adds	r3, #48	@ 0x30
 8005f3a:	33ed      	adds	r3, #237	@ 0xed
 8005f3c:	33ff      	adds	r3, #255	@ 0xff
 8005f3e:	0018      	movs	r0, r3
 8005f40:	f7fe fb0d 	bl	800455e <ld_dword>
 8005f44:	0002      	movs	r2, r0
 8005f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f48:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4c:	2257      	movs	r2, #87	@ 0x57
 8005f4e:	18ba      	adds	r2, r7, r2
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005f54:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <find_volume+0x4dc>)
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <find_volume+0x4dc>)
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <find_volume+0x4dc>)
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f66:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f7fe fd20 	bl	80049b0 <clear_lock>
#endif
	return FR_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	0018      	movs	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b016      	add	sp, #88	@ 0x58
 8005f78:	bdb0      	pop	{r4, r5, r7, pc}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
 8005f7c:	000001ff 	.word	0x000001ff
 8005f80:	0000aa55 	.word	0x0000aa55
 8005f84:	41615252 	.word	0x41615252
 8005f88:	61417272 	.word	0x61417272
 8005f8c:	200002a4 	.word	0x200002a4

08005f90 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005f90:	b590      	push	{r4, r7, lr}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005f9a:	240f      	movs	r4, #15
 8005f9c:	193b      	adds	r3, r7, r4
 8005f9e:	2209      	movs	r2, #9
 8005fa0:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01d      	beq.n	8005fe4 <validate+0x54>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d019      	beq.n	8005fe4 <validate+0x54>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <validate+0x54>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	889a      	ldrh	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	88db      	ldrh	r3, [r3, #6]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d10d      	bne.n	8005fe4 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f7fe f9e0 	bl	8004394 <disk_status>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d102      	bne.n	8005fe4 <validate+0x54>
			res = FR_OK;
 8005fde:	193b      	adds	r3, r7, r4
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005fe4:	230f      	movs	r3, #15
 8005fe6:	18fb      	adds	r3, r7, r3
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <validate+0x64>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	e000      	b.n	8005ff6 <validate+0x66>
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	601a      	str	r2, [r3, #0]
	return res;
 8005ffa:	230f      	movs	r3, #15
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	781b      	ldrb	r3, [r3, #0]
}
 8006000:	0018      	movs	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	b005      	add	sp, #20
 8006006:	bd90      	pop	{r4, r7, pc}

08006008 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006008:	b5b0      	push	{r4, r5, r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	1dfb      	adds	r3, r7, #7
 8006014:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800601a:	2310      	movs	r3, #16
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	0018      	movs	r0, r3
 8006020:	f7ff fcab 	bl	800597a <get_ldnumber>
 8006024:	0003      	movs	r3, r0
 8006026:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	da01      	bge.n	8006032 <f_mount+0x2a>
 800602e:	230b      	movs	r3, #11
 8006030:	e030      	b.n	8006094 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006032:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <f_mount+0x94>)
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	0092      	lsls	r2, r2, #2
 8006038:	58d3      	ldr	r3, [r2, r3]
 800603a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d006      	beq.n	8006050 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	0018      	movs	r0, r3
 8006046:	f7fe fcb3 	bl	80049b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d002      	beq.n	800605c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	4b0f      	ldr	r3, [pc, #60]	@ (800609c <f_mount+0x94>)
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	0092      	lsls	r2, r2, #2
 8006064:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <f_mount+0x6c>
 800606c:	1dfb      	adds	r3, r7, #7
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d001      	beq.n	8006078 <f_mount+0x70>
 8006074:	2300      	movs	r3, #0
 8006076:	e00d      	b.n	8006094 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006078:	2517      	movs	r5, #23
 800607a:	197c      	adds	r4, r7, r5
 800607c:	230c      	movs	r3, #12
 800607e:	18f9      	adds	r1, r7, r3
 8006080:	2308      	movs	r3, #8
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	2200      	movs	r2, #0
 8006086:	0018      	movs	r0, r3
 8006088:	f7ff fd12 	bl	8005ab0 <find_volume>
 800608c:	0003      	movs	r3, r0
 800608e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8006090:	197b      	adds	r3, r7, r5
 8006092:	781b      	ldrb	r3, [r3, #0]
}
 8006094:	0018      	movs	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	b008      	add	sp, #32
 800609a:	bdb0      	pop	{r4, r5, r7, pc}
 800609c:	200002a0 	.word	0x200002a0

080060a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	b099      	sub	sp, #100	@ 0x64
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	1dfb      	adds	r3, r7, #7
 80060ac:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <f_open+0x18>
 80060b4:	2309      	movs	r3, #9
 80060b6:	e1e3      	b.n	8006480 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80060b8:	1dfb      	adds	r3, r7, #7
 80060ba:	1dfa      	adds	r2, r7, #7
 80060bc:	7812      	ldrb	r2, [r2, #0]
 80060be:	213f      	movs	r1, #63	@ 0x3f
 80060c0:	400a      	ands	r2, r1
 80060c2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80060c4:	255f      	movs	r5, #95	@ 0x5f
 80060c6:	197c      	adds	r4, r7, r5
 80060c8:	1dfb      	adds	r3, r7, #7
 80060ca:	781a      	ldrb	r2, [r3, #0]
 80060cc:	2310      	movs	r3, #16
 80060ce:	18f9      	adds	r1, r7, r3
 80060d0:	2308      	movs	r3, #8
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	0018      	movs	r0, r3
 80060d6:	f7ff fceb 	bl	8005ab0 <find_volume>
 80060da:	0003      	movs	r3, r0
 80060dc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80060de:	197b      	adds	r3, r7, r5
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d000      	beq.n	80060e8 <f_open+0x48>
 80060e6:	e1c0      	b.n	800646a <f_open+0x3ca>
		dj.obj.fs = fs;
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	2614      	movs	r6, #20
 80060ec:	19bb      	adds	r3, r7, r6
 80060ee:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	197c      	adds	r4, r7, r5
 80060f4:	19bb      	adds	r3, r7, r6
 80060f6:	0011      	movs	r1, r2
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7ff fbb9 	bl	8005870 <follow_path>
 80060fe:	0003      	movs	r3, r0
 8006100:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006102:	0029      	movs	r1, r5
 8006104:	197b      	adds	r3, r7, r5
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d11b      	bne.n	8006144 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800610c:	19bb      	adds	r3, r7, r6
 800610e:	222f      	movs	r2, #47	@ 0x2f
 8006110:	5c9b      	ldrb	r3, [r3, r2]
 8006112:	b25b      	sxtb	r3, r3
 8006114:	2b00      	cmp	r3, #0
 8006116:	da03      	bge.n	8006120 <f_open+0x80>
				res = FR_INVALID_NAME;
 8006118:	187b      	adds	r3, r7, r1
 800611a:	2206      	movs	r2, #6
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	e011      	b.n	8006144 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006120:	1dfb      	adds	r3, r7, #7
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2201      	movs	r2, #1
 8006126:	429a      	cmp	r2, r3
 8006128:	419b      	sbcs	r3, r3
 800612a:	425b      	negs	r3, r3
 800612c:	b2db      	uxtb	r3, r3
 800612e:	001a      	movs	r2, r3
 8006130:	235f      	movs	r3, #95	@ 0x5f
 8006132:	18fc      	adds	r4, r7, r3
 8006134:	2314      	movs	r3, #20
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f7fe faee 	bl	800471c <chk_lock>
 8006140:	0003      	movs	r3, r0
 8006142:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006144:	1dfb      	adds	r3, r7, #7
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	221c      	movs	r2, #28
 800614a:	4013      	ands	r3, r2
 800614c:	d100      	bne.n	8006150 <f_open+0xb0>
 800614e:	e096      	b.n	800627e <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8006150:	225f      	movs	r2, #95	@ 0x5f
 8006152:	18bb      	adds	r3, r7, r2
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01a      	beq.n	8006190 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800615a:	18bb      	adds	r3, r7, r2
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b04      	cmp	r3, #4
 8006160:	d10f      	bne.n	8006182 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006162:	f7fe fb33 	bl	80047cc <enq_lock>
 8006166:	1e03      	subs	r3, r0, #0
 8006168:	d007      	beq.n	800617a <f_open+0xda>
 800616a:	2314      	movs	r3, #20
 800616c:	18fb      	adds	r3, r7, r3
 800616e:	0018      	movs	r0, r3
 8006170:	f7ff fa93 	bl	800569a <dir_register>
 8006174:	0003      	movs	r3, r0
 8006176:	001a      	movs	r2, r3
 8006178:	e000      	b.n	800617c <f_open+0xdc>
 800617a:	2212      	movs	r2, #18
 800617c:	235f      	movs	r3, #95	@ 0x5f
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006182:	1dfb      	adds	r3, r7, #7
 8006184:	1dfa      	adds	r2, r7, #7
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	2108      	movs	r1, #8
 800618a:	430a      	orrs	r2, r1
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e014      	b.n	80061ba <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006190:	2314      	movs	r3, #20
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	799b      	ldrb	r3, [r3, #6]
 8006196:	001a      	movs	r2, r3
 8006198:	2311      	movs	r3, #17
 800619a:	4013      	ands	r3, r2
 800619c:	d004      	beq.n	80061a8 <f_open+0x108>
					res = FR_DENIED;
 800619e:	235f      	movs	r3, #95	@ 0x5f
 80061a0:	18fb      	adds	r3, r7, r3
 80061a2:	2207      	movs	r2, #7
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	e008      	b.n	80061ba <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80061a8:	1dfb      	adds	r3, r7, #7
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2204      	movs	r2, #4
 80061ae:	4013      	ands	r3, r2
 80061b0:	d003      	beq.n	80061ba <f_open+0x11a>
 80061b2:	235f      	movs	r3, #95	@ 0x5f
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	2208      	movs	r2, #8
 80061b8:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80061ba:	245f      	movs	r4, #95	@ 0x5f
 80061bc:	193b      	adds	r3, r7, r4
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d000      	beq.n	80061c6 <f_open+0x126>
 80061c4:	e07b      	b.n	80062be <f_open+0x21e>
 80061c6:	1dfb      	adds	r3, r7, #7
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2208      	movs	r2, #8
 80061cc:	4013      	ands	r3, r2
 80061ce:	d100      	bne.n	80061d2 <f_open+0x132>
 80061d0:	e075      	b.n	80062be <f_open+0x21e>
				dw = GET_FATTIME();
 80061d2:	f7fd fb07 	bl	80037e4 <get_fattime>
 80061d6:	0003      	movs	r3, r0
 80061d8:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80061da:	2514      	movs	r5, #20
 80061dc:	197b      	adds	r3, r7, r5
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	330e      	adds	r3, #14
 80061e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80061e4:	0011      	movs	r1, r2
 80061e6:	0018      	movs	r0, r3
 80061e8:	f7fe f9f8 	bl	80045dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80061ec:	197b      	adds	r3, r7, r5
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	3316      	adds	r3, #22
 80061f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80061f4:	0011      	movs	r1, r2
 80061f6:	0018      	movs	r0, r3
 80061f8:	f7fe f9f0 	bl	80045dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80061fc:	197b      	adds	r3, r7, r5
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	330b      	adds	r3, #11
 8006202:	2220      	movs	r2, #32
 8006204:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	197b      	adds	r3, r7, r5
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	0019      	movs	r1, r3
 800620e:	0010      	movs	r0, r2
 8006210:	f7ff f99c 	bl	800554c <ld_clust>
 8006214:	0003      	movs	r3, r0
 8006216:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006218:	6938      	ldr	r0, [r7, #16]
 800621a:	197b      	adds	r3, r7, r5
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	2200      	movs	r2, #0
 8006220:	0019      	movs	r1, r3
 8006222:	f7ff f9b2 	bl	800558a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006226:	197b      	adds	r3, r7, r5
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	331c      	adds	r3, #28
 800622c:	2100      	movs	r1, #0
 800622e:	0018      	movs	r0, r3
 8006230:	f7fe f9d4 	bl	80045dc <st_dword>
					fs->wflag = 1;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2201      	movs	r2, #1
 8006238:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800623a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03e      	beq.n	80062be <f_open+0x21e>
						dw = fs->winsect;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006244:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006246:	0026      	movs	r6, r4
 8006248:	193c      	adds	r4, r7, r4
 800624a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800624c:	197b      	adds	r3, r7, r5
 800624e:	2200      	movs	r2, #0
 8006250:	0018      	movs	r0, r3
 8006252:	f7fe fe8e 	bl	8004f72 <remove_chain>
 8006256:	0003      	movs	r3, r0
 8006258:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800625a:	19bb      	adds	r3, r7, r6
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d12d      	bne.n	80062be <f_open+0x21e>
							res = move_window(fs, dw);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	19bc      	adds	r4, r7, r6
 8006266:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006268:	0011      	movs	r1, r2
 800626a:	0018      	movs	r0, r3
 800626c:	f7fe fc08 	bl	8004a80 <move_window>
 8006270:	0003      	movs	r3, r0
 8006272:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006278:	3a01      	subs	r2, #1
 800627a:	60da      	str	r2, [r3, #12]
 800627c:	e01f      	b.n	80062be <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800627e:	215f      	movs	r1, #95	@ 0x5f
 8006280:	187b      	adds	r3, r7, r1
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d11a      	bne.n	80062be <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006288:	2314      	movs	r3, #20
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	799b      	ldrb	r3, [r3, #6]
 800628e:	001a      	movs	r2, r3
 8006290:	2310      	movs	r3, #16
 8006292:	4013      	ands	r3, r2
 8006294:	d003      	beq.n	800629e <f_open+0x1fe>
					res = FR_NO_FILE;
 8006296:	187b      	adds	r3, r7, r1
 8006298:	2204      	movs	r2, #4
 800629a:	701a      	strb	r2, [r3, #0]
 800629c:	e00f      	b.n	80062be <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800629e:	1dfb      	adds	r3, r7, #7
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2202      	movs	r2, #2
 80062a4:	4013      	ands	r3, r2
 80062a6:	d00a      	beq.n	80062be <f_open+0x21e>
 80062a8:	2314      	movs	r3, #20
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	799b      	ldrb	r3, [r3, #6]
 80062ae:	001a      	movs	r2, r3
 80062b0:	2301      	movs	r3, #1
 80062b2:	4013      	ands	r3, r2
 80062b4:	d003      	beq.n	80062be <f_open+0x21e>
						res = FR_DENIED;
 80062b6:	235f      	movs	r3, #95	@ 0x5f
 80062b8:	18fb      	adds	r3, r7, r3
 80062ba:	2207      	movs	r2, #7
 80062bc:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 80062be:	235f      	movs	r3, #95	@ 0x5f
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d12b      	bne.n	8006320 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80062c8:	1dfb      	adds	r3, r7, #7
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2208      	movs	r2, #8
 80062ce:	4013      	ands	r3, r2
 80062d0:	d005      	beq.n	80062de <f_open+0x23e>
				mode |= FA_MODIFIED;
 80062d2:	1dfb      	adds	r3, r7, #7
 80062d4:	1dfa      	adds	r2, r7, #7
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	2140      	movs	r1, #64	@ 0x40
 80062da:	430a      	orrs	r2, r1
 80062dc:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80062e6:	2114      	movs	r1, #20
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	6a1a      	ldr	r2, [r3, #32]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062f0:	1dfb      	adds	r3, r7, #7
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2201      	movs	r2, #1
 80062f6:	429a      	cmp	r2, r3
 80062f8:	419b      	sbcs	r3, r3
 80062fa:	425b      	negs	r3, r3
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	001a      	movs	r2, r3
 8006300:	187b      	adds	r3, r7, r1
 8006302:	0011      	movs	r1, r2
 8006304:	0018      	movs	r0, r3
 8006306:	f7fe fa7f 	bl	8004808 <inc_lock>
 800630a:	0002      	movs	r2, r0
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d103      	bne.n	8006320 <f_open+0x280>
 8006318:	235f      	movs	r3, #95	@ 0x5f
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	2202      	movs	r2, #2
 800631e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006320:	235f      	movs	r3, #95	@ 0x5f
 8006322:	18fb      	adds	r3, r7, r3
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d000      	beq.n	800632c <f_open+0x28c>
 800632a:	e09e      	b.n	800646a <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	2414      	movs	r4, #20
 8006330:	193b      	adds	r3, r7, r4
 8006332:	6a1b      	ldr	r3, [r3, #32]
 8006334:	0019      	movs	r1, r3
 8006336:	0010      	movs	r0, r2
 8006338:	f7ff f908 	bl	800554c <ld_clust>
 800633c:	0002      	movs	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006342:	193b      	adds	r3, r7, r4
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	331c      	adds	r3, #28
 8006348:	0018      	movs	r0, r3
 800634a:	f7fe f908 	bl	800455e <ld_dword>
 800634e:	0002      	movs	r2, r0
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	88da      	ldrh	r2, [r3, #6]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	1dfa      	adds	r2, r7, #7
 800636c:	7812      	ldrb	r2, [r2, #0]
 800636e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3330      	adds	r3, #48	@ 0x30
 8006386:	2280      	movs	r2, #128	@ 0x80
 8006388:	0092      	lsls	r2, r2, #2
 800638a:	2100      	movs	r1, #0
 800638c:	0018      	movs	r0, r3
 800638e:	f7fe f96e 	bl	800466e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006392:	1dfb      	adds	r3, r7, #7
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	2220      	movs	r2, #32
 8006398:	4013      	ands	r3, r2
 800639a:	d066      	beq.n	800646a <f_open+0x3ca>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d062      	beq.n	800646a <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	895b      	ldrh	r3, [r3, #10]
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	657b      	str	r3, [r7, #84]	@ 0x54
 80063c0:	e019      	b.n	80063f6 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063c6:	0011      	movs	r1, r2
 80063c8:	0018      	movs	r0, r3
 80063ca:	f7fe fc27 	bl	8004c1c <get_fat>
 80063ce:	0003      	movs	r3, r0
 80063d0:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80063d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d803      	bhi.n	80063e0 <f_open+0x340>
 80063d8:	235f      	movs	r3, #95	@ 0x5f
 80063da:	18fb      	adds	r3, r7, r3
 80063dc:	2202      	movs	r2, #2
 80063de:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80063e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063e2:	3301      	adds	r3, #1
 80063e4:	d103      	bne.n	80063ee <f_open+0x34e>
 80063e6:	235f      	movs	r3, #95	@ 0x5f
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80063ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80063f6:	235f      	movs	r3, #95	@ 0x5f
 80063f8:	18fb      	adds	r3, r7, r3
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <f_open+0x368>
 8006400:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006404:	429a      	cmp	r2, r3
 8006406:	d8dc      	bhi.n	80063c2 <f_open+0x322>
				}
				fp->clust = clst;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800640c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800640e:	245f      	movs	r4, #95	@ 0x5f
 8006410:	193b      	adds	r3, r7, r4
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d128      	bne.n	800646a <f_open+0x3ca>
 8006418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641a:	05db      	lsls	r3, r3, #23
 800641c:	0ddb      	lsrs	r3, r3, #23
 800641e:	d024      	beq.n	800646a <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006424:	0011      	movs	r1, r2
 8006426:	0018      	movs	r0, r3
 8006428:	f7fe fbdc 	bl	8004be4 <clust2sect>
 800642c:	0003      	movs	r3, r0
 800642e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <f_open+0x39e>
						res = FR_INT_ERR;
 8006436:	193b      	adds	r3, r7, r4
 8006438:	2202      	movs	r2, #2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	e015      	b.n	800646a <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800643e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006440:	0a5a      	lsrs	r2, r3, #9
 8006442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006444:	18d2      	adds	r2, r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	7858      	ldrb	r0, [r3, #1]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3330      	adds	r3, #48	@ 0x30
 8006452:	0019      	movs	r1, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	2301      	movs	r3, #1
 800645a:	f7fd ffed 	bl	8004438 <disk_read>
 800645e:	1e03      	subs	r3, r0, #0
 8006460:	d003      	beq.n	800646a <f_open+0x3ca>
 8006462:	235f      	movs	r3, #95	@ 0x5f
 8006464:	18fb      	adds	r3, r7, r3
 8006466:	2201      	movs	r2, #1
 8006468:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800646a:	235f      	movs	r3, #95	@ 0x5f
 800646c:	18fb      	adds	r3, r7, r3
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <f_open+0x3da>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800647a:	235f      	movs	r3, #95	@ 0x5f
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	781b      	ldrb	r3, [r3, #0]
}
 8006480:	0018      	movs	r0, r3
 8006482:	46bd      	mov	sp, r7
 8006484:	b019      	add	sp, #100	@ 0x64
 8006486:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006488 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006488:	b5b0      	push	{r4, r5, r7, lr}
 800648a:	b08e      	sub	sp, #56	@ 0x38
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2537      	movs	r5, #55	@ 0x37
 80064a4:	197c      	adds	r4, r7, r5
 80064a6:	2214      	movs	r2, #20
 80064a8:	18ba      	adds	r2, r7, r2
 80064aa:	0011      	movs	r1, r2
 80064ac:	0018      	movs	r0, r3
 80064ae:	f7ff fd6f 	bl	8005f90 <validate>
 80064b2:	0003      	movs	r3, r0
 80064b4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80064b6:	197b      	adds	r3, r7, r5
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d107      	bne.n	80064ce <f_read+0x46>
 80064be:	197b      	adds	r3, r7, r5
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	7d52      	ldrb	r2, [r2, #21]
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	197b      	adds	r3, r7, r5
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <f_read+0x4e>
 80064ce:	2337      	movs	r3, #55	@ 0x37
 80064d0:	18fb      	adds	r3, r7, r3
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	e115      	b.n	8006702 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	7d1b      	ldrb	r3, [r3, #20]
 80064da:	001a      	movs	r2, r3
 80064dc:	2301      	movs	r3, #1
 80064de:	4013      	ands	r3, r2
 80064e0:	d101      	bne.n	80064e6 <f_read+0x5e>
 80064e2:	2307      	movs	r3, #7
 80064e4:	e10d      	b.n	8006702 <f_read+0x27a>
	remain = fp->obj.objsize - fp->fptr;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d800      	bhi.n	80064fc <f_read+0x74>
 80064fa:	e0fd      	b.n	80066f8 <f_read+0x270>
 80064fc:	6a3b      	ldr	r3, [r7, #32]
 80064fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006500:	e0fa      	b.n	80066f8 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	05db      	lsls	r3, r3, #23
 8006508:	0ddb      	lsrs	r3, r3, #23
 800650a:	d000      	beq.n	800650e <f_read+0x86>
 800650c:	e0c5      	b.n	800669a <f_read+0x212>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	0a5b      	lsrs	r3, r3, #9
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	8952      	ldrh	r2, [r2, #10]
 8006518:	3a01      	subs	r2, #1
 800651a:	4013      	ands	r3, r2
 800651c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d131      	bne.n	8006588 <f_read+0x100>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d103      	bne.n	8006534 <f_read+0xac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	633b      	str	r3, [r7, #48]	@ 0x30
 8006532:	e016      	b.n	8006562 <f_read+0xda>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <f_read+0xc8>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	0011      	movs	r1, r2
 8006544:	0018      	movs	r0, r3
 8006546:	f7fe fe2d 	bl	80051a4 <clmt_clust>
 800654a:	0003      	movs	r3, r0
 800654c:	633b      	str	r3, [r7, #48]	@ 0x30
 800654e:	e008      	b.n	8006562 <f_read+0xda>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	0019      	movs	r1, r3
 8006558:	0010      	movs	r0, r2
 800655a:	f7fe fb5f 	bl	8004c1c <get_fat>
 800655e:	0003      	movs	r3, r0
 8006560:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	2b01      	cmp	r3, #1
 8006566:	d804      	bhi.n	8006572 <f_read+0xea>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2202      	movs	r2, #2
 800656c:	755a      	strb	r2, [r3, #21]
 800656e:	2302      	movs	r3, #2
 8006570:	e0c7      	b.n	8006702 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	3301      	adds	r3, #1
 8006576:	d104      	bne.n	8006582 <f_read+0xfa>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2201      	movs	r2, #1
 800657c:	755a      	strb	r2, [r3, #21]
 800657e:	2301      	movs	r3, #1
 8006580:	e0bf      	b.n	8006702 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006586:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	0019      	movs	r1, r3
 8006590:	0010      	movs	r0, r2
 8006592:	f7fe fb27 	bl	8004be4 <clust2sect>
 8006596:	0003      	movs	r3, r0
 8006598:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <f_read+0x122>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2202      	movs	r2, #2
 80065a4:	755a      	strb	r2, [r3, #21]
 80065a6:	2302      	movs	r3, #2
 80065a8:	e0ab      	b.n	8006702 <f_read+0x27a>
			sect += csect;
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	18d3      	adds	r3, r2, r3
 80065b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	0a5b      	lsrs	r3, r3, #9
 80065b6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80065b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d038      	beq.n	8006630 <f_read+0x1a8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c2:	18d3      	adds	r3, r2, r3
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	8952      	ldrh	r2, [r2, #10]
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d905      	bls.n	80065d8 <f_read+0x150>
					cc = fs->csize - csect;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	895b      	ldrh	r3, [r3, #10]
 80065d0:	001a      	movs	r2, r3
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	7858      	ldrb	r0, [r3, #1]
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065e2:	f7fd ff29 	bl	8004438 <disk_read>
 80065e6:	1e03      	subs	r3, r0, #0
 80065e8:	d004      	beq.n	80065f4 <f_read+0x16c>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	755a      	strb	r2, [r3, #21]
 80065f0:	2301      	movs	r3, #1
 80065f2:	e086      	b.n	8006702 <f_read+0x27a>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	7d1b      	ldrb	r3, [r3, #20]
 80065f8:	b25b      	sxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da14      	bge.n	8006628 <f_read+0x1a0>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1a      	ldr	r2, [r3, #32]
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006608:	429a      	cmp	r2, r3
 800660a:	d90d      	bls.n	8006628 <f_read+0x1a0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1a      	ldr	r2, [r3, #32]
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	025b      	lsls	r3, r3, #9
 8006616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006618:	18d0      	adds	r0, r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3330      	adds	r3, #48	@ 0x30
 800661e:	2280      	movs	r2, #128	@ 0x80
 8006620:	0092      	lsls	r2, r2, #2
 8006622:	0019      	movs	r1, r3
 8006624:	f7fe f804 	bl	8004630 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662a:	025b      	lsls	r3, r3, #9
 800662c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800662e:	e04f      	b.n	80066d0 <f_read+0x248>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	429a      	cmp	r2, r3
 8006638:	d02c      	beq.n	8006694 <f_read+0x20c>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	7d1b      	ldrb	r3, [r3, #20]
 800663e:	b25b      	sxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	da17      	bge.n	8006674 <f_read+0x1ec>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	7858      	ldrb	r0, [r3, #1]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3330      	adds	r3, #48	@ 0x30
 800664c:	0019      	movs	r1, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1a      	ldr	r2, [r3, #32]
 8006652:	2301      	movs	r3, #1
 8006654:	f7fd ff18 	bl	8004488 <disk_write>
 8006658:	1e03      	subs	r3, r0, #0
 800665a:	d004      	beq.n	8006666 <f_read+0x1de>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	755a      	strb	r2, [r3, #21]
 8006662:	2301      	movs	r3, #1
 8006664:	e04d      	b.n	8006702 <f_read+0x27a>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	7d1b      	ldrb	r3, [r3, #20]
 800666a:	227f      	movs	r2, #127	@ 0x7f
 800666c:	4013      	ands	r3, r2
 800666e:	b2da      	uxtb	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	7858      	ldrb	r0, [r3, #1]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3330      	adds	r3, #48	@ 0x30
 800667c:	0019      	movs	r1, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	2301      	movs	r3, #1
 8006682:	f7fd fed9 	bl	8004438 <disk_read>
 8006686:	1e03      	subs	r3, r0, #0
 8006688:	d004      	beq.n	8006694 <f_read+0x20c>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	755a      	strb	r2, [r3, #21]
 8006690:	2301      	movs	r3, #1
 8006692:	e036      	b.n	8006702 <f_read+0x27a>
			}
#endif
			fp->sect = sect;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	05db      	lsls	r3, r3, #23
 80066a0:	0ddb      	lsrs	r3, r3, #23
 80066a2:	2280      	movs	r2, #128	@ 0x80
 80066a4:	0092      	lsls	r2, r2, #2
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80066aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d901      	bls.n	80066b6 <f_read+0x22e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3330      	adds	r3, #48	@ 0x30
 80066ba:	001a      	movs	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	05db      	lsls	r3, r3, #23
 80066c2:	0ddb      	lsrs	r3, r3, #23
 80066c4:	18d1      	adds	r1, r2, r3
 80066c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	0018      	movs	r0, r3
 80066cc:	f7fd ffb0 	bl	8004630 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80066d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d4:	18d3      	adds	r3, r2, r3
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066de:	18d2      	adds	r2, r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	619a      	str	r2, [r3, #24]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ea:	18d2      	adds	r2, r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d000      	beq.n	8006700 <f_read+0x278>
 80066fe:	e700      	b.n	8006502 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006700:	2300      	movs	r3, #0
}
 8006702:	0018      	movs	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	b00e      	add	sp, #56	@ 0x38
 8006708:	bdb0      	pop	{r4, r5, r7, pc}

0800670a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800670a:	b5b0      	push	{r4, r5, r7, lr}
 800670c:	b08c      	sub	sp, #48	@ 0x30
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	607a      	str	r2, [r7, #4]
 8006716:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	252f      	movs	r5, #47	@ 0x2f
 8006726:	197c      	adds	r4, r7, r5
 8006728:	2210      	movs	r2, #16
 800672a:	18ba      	adds	r2, r7, r2
 800672c:	0011      	movs	r1, r2
 800672e:	0018      	movs	r0, r3
 8006730:	f7ff fc2e 	bl	8005f90 <validate>
 8006734:	0003      	movs	r3, r0
 8006736:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006738:	197b      	adds	r3, r7, r5
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d107      	bne.n	8006750 <f_write+0x46>
 8006740:	197b      	adds	r3, r7, r5
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	7d52      	ldrb	r2, [r2, #21]
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	197b      	adds	r3, r7, r5
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <f_write+0x4e>
 8006750:	232f      	movs	r3, #47	@ 0x2f
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	e14e      	b.n	80069f6 <f_write+0x2ec>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	7d1b      	ldrb	r3, [r3, #20]
 800675c:	001a      	movs	r2, r3
 800675e:	2302      	movs	r3, #2
 8006760:	4013      	ands	r3, r2
 8006762:	d101      	bne.n	8006768 <f_write+0x5e>
 8006764:	2307      	movs	r3, #7
 8006766:	e146      	b.n	80069f6 <f_write+0x2ec>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	18d2      	adds	r2, r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	429a      	cmp	r2, r3
 8006776:	d300      	bcc.n	800677a <f_write+0x70>
 8006778:	e12f      	b.n	80069da <f_write+0x2d0>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	43db      	mvns	r3, r3
 8006780:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006782:	e12a      	b.n	80069da <f_write+0x2d0>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	699b      	ldr	r3, [r3, #24]
 8006788:	05db      	lsls	r3, r3, #23
 800678a:	0ddb      	lsrs	r3, r3, #23
 800678c:	d000      	beq.n	8006790 <f_write+0x86>
 800678e:	e0e3      	b.n	8006958 <f_write+0x24e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	0a5b      	lsrs	r3, r3, #9
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	8952      	ldrh	r2, [r2, #10]
 800679a:	3a01      	subs	r2, #1
 800679c:	4013      	ands	r3, r2
 800679e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d146      	bne.n	8006834 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10d      	bne.n	80067ca <f_write+0xc0>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d11e      	bne.n	80067f8 <f_write+0xee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2100      	movs	r1, #0
 80067be:	0018      	movs	r0, r3
 80067c0:	f7fe fc4a 	bl	8005058 <create_chain>
 80067c4:	0003      	movs	r3, r0
 80067c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067c8:	e016      	b.n	80067f8 <f_write+0xee>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <f_write+0xdc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	0011      	movs	r1, r2
 80067da:	0018      	movs	r0, r3
 80067dc:	f7fe fce2 	bl	80051a4 <clmt_clust>
 80067e0:	0003      	movs	r3, r0
 80067e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067e4:	e008      	b.n	80067f8 <f_write+0xee>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	69db      	ldr	r3, [r3, #28]
 80067ec:	0019      	movs	r1, r3
 80067ee:	0010      	movs	r0, r2
 80067f0:	f7fe fc32 	bl	8005058 <create_chain>
 80067f4:	0003      	movs	r3, r0
 80067f6:	62bb      	str	r3, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80067f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d100      	bne.n	8006800 <f_write+0xf6>
 80067fe:	e0f1      	b.n	80069e4 <f_write+0x2da>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006802:	2b01      	cmp	r3, #1
 8006804:	d104      	bne.n	8006810 <f_write+0x106>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2202      	movs	r2, #2
 800680a:	755a      	strb	r2, [r3, #21]
 800680c:	2302      	movs	r3, #2
 800680e:	e0f2      	b.n	80069f6 <f_write+0x2ec>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006812:	3301      	adds	r3, #1
 8006814:	d104      	bne.n	8006820 <f_write+0x116>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	755a      	strb	r2, [r3, #21]
 800681c:	2301      	movs	r3, #1
 800681e:	e0ea      	b.n	80069f6 <f_write+0x2ec>
				fp->clust = clst;			/* Update current cluster */
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006824:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d102      	bne.n	8006834 <f_write+0x12a>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006832:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	7d1b      	ldrb	r3, [r3, #20]
 8006838:	b25b      	sxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	da17      	bge.n	800686e <f_write+0x164>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	7858      	ldrb	r0, [r3, #1]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3330      	adds	r3, #48	@ 0x30
 8006846:	0019      	movs	r1, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	2301      	movs	r3, #1
 800684e:	f7fd fe1b 	bl	8004488 <disk_write>
 8006852:	1e03      	subs	r3, r0, #0
 8006854:	d004      	beq.n	8006860 <f_write+0x156>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2201      	movs	r2, #1
 800685a:	755a      	strb	r2, [r3, #21]
 800685c:	2301      	movs	r3, #1
 800685e:	e0ca      	b.n	80069f6 <f_write+0x2ec>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	7d1b      	ldrb	r3, [r3, #20]
 8006864:	227f      	movs	r2, #127	@ 0x7f
 8006866:	4013      	ands	r3, r2
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	0019      	movs	r1, r3
 8006876:	0010      	movs	r0, r2
 8006878:	f7fe f9b4 	bl	8004be4 <clust2sect>
 800687c:	0003      	movs	r3, r0
 800687e:	617b      	str	r3, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <f_write+0x186>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2202      	movs	r2, #2
 800688a:	755a      	strb	r2, [r3, #21]
 800688c:	2302      	movs	r3, #2
 800688e:	e0b2      	b.n	80069f6 <f_write+0x2ec>
			sect += csect;
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	18d3      	adds	r3, r2, r3
 8006896:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	0a5b      	lsrs	r3, r3, #9
 800689c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d03b      	beq.n	800691c <f_write+0x212>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	18d3      	adds	r3, r2, r3
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	8952      	ldrh	r2, [r2, #10]
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d905      	bls.n	80068be <f_write+0x1b4>
					cc = fs->csize - csect;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	895b      	ldrh	r3, [r3, #10]
 80068b6:	001a      	movs	r2, r3
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	7858      	ldrb	r0, [r3, #1]
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	69f9      	ldr	r1, [r7, #28]
 80068c8:	f7fd fdde 	bl	8004488 <disk_write>
 80068cc:	1e03      	subs	r3, r0, #0
 80068ce:	d004      	beq.n	80068da <f_write+0x1d0>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	755a      	strb	r2, [r3, #21]
 80068d6:	2301      	movs	r3, #1
 80068d8:	e08d      	b.n	80069f6 <f_write+0x2ec>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1a      	ldr	r2, [r3, #32]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d915      	bls.n	8006914 <f_write+0x20a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3330      	adds	r3, #48	@ 0x30
 80068ec:	0018      	movs	r0, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a1a      	ldr	r2, [r3, #32]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	025b      	lsls	r3, r3, #9
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	18d3      	adds	r3, r2, r3
 80068fc:	2280      	movs	r2, #128	@ 0x80
 80068fe:	0092      	lsls	r2, r2, #2
 8006900:	0019      	movs	r1, r3
 8006902:	f7fd fe95 	bl	8004630 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	7d1b      	ldrb	r3, [r3, #20]
 800690a:	227f      	movs	r2, #127	@ 0x7f
 800690c:	4013      	ands	r3, r2
 800690e:	b2da      	uxtb	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	025b      	lsls	r3, r3, #9
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800691a:	e040      	b.n	800699e <f_write+0x294>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	429a      	cmp	r2, r3
 8006924:	d015      	beq.n	8006952 <f_write+0x248>
				fp->fptr < fp->obj.objsize &&
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800692e:	429a      	cmp	r2, r3
 8006930:	d20f      	bcs.n	8006952 <f_write+0x248>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	7858      	ldrb	r0, [r3, #1]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3330      	adds	r3, #48	@ 0x30
 800693a:	0019      	movs	r1, r3
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	2301      	movs	r3, #1
 8006940:	f7fd fd7a 	bl	8004438 <disk_read>
 8006944:	1e03      	subs	r3, r0, #0
				fp->fptr < fp->obj.objsize &&
 8006946:	d004      	beq.n	8006952 <f_write+0x248>
					ABORT(fs, FR_DISK_ERR);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	755a      	strb	r2, [r3, #21]
 800694e:	2301      	movs	r3, #1
 8006950:	e051      	b.n	80069f6 <f_write+0x2ec>
			}
#endif
			fp->sect = sect;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	05db      	lsls	r3, r3, #23
 800695e:	0ddb      	lsrs	r3, r3, #23
 8006960:	2280      	movs	r2, #128	@ 0x80
 8006962:	0092      	lsls	r2, r2, #2
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	429a      	cmp	r2, r3
 800696e:	d901      	bls.n	8006974 <f_write+0x26a>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3330      	adds	r3, #48	@ 0x30
 8006978:	001a      	movs	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	05db      	lsls	r3, r3, #23
 8006980:	0ddb      	lsrs	r3, r3, #23
 8006982:	18d3      	adds	r3, r2, r3
 8006984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006986:	69f9      	ldr	r1, [r7, #28]
 8006988:	0018      	movs	r0, r3
 800698a:	f7fd fe51 	bl	8004630 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	7d1b      	ldrb	r3, [r3, #20]
 8006992:	2280      	movs	r2, #128	@ 0x80
 8006994:	4252      	negs	r2, r2
 8006996:	4313      	orrs	r3, r2
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a2:	18d3      	adds	r3, r2, r3
 80069a4:	61fb      	str	r3, [r7, #28]
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ac:	18d2      	adds	r2, r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	619a      	str	r2, [r3, #24]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	68d9      	ldr	r1, [r3, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	000b      	movs	r3, r1
 80069bc:	4293      	cmp	r3, r2
 80069be:	d200      	bcs.n	80069c2 <f_write+0x2b8>
 80069c0:	0013      	movs	r3, r2
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	60d3      	str	r3, [r2, #12]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	18d2      	adds	r2, r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d000      	beq.n	80069e2 <f_write+0x2d8>
 80069e0:	e6d0      	b.n	8006784 <f_write+0x7a>
 80069e2:	e000      	b.n	80069e6 <f_write+0x2dc>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80069e4:	46c0      	nop			@ (mov r8, r8)
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	7d1b      	ldrb	r3, [r3, #20]
 80069ea:	2240      	movs	r2, #64	@ 0x40
 80069ec:	4313      	orrs	r3, r2
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	0018      	movs	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b00c      	add	sp, #48	@ 0x30
 80069fc:	bdb0      	pop	{r4, r5, r7, pc}

080069fe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80069fe:	b5b0      	push	{r4, r5, r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2517      	movs	r5, #23
 8006a0a:	197c      	adds	r4, r7, r5
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	18ba      	adds	r2, r7, r2
 8006a10:	0011      	movs	r1, r2
 8006a12:	0018      	movs	r0, r3
 8006a14:	f7ff fabc 	bl	8005f90 <validate>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006a1c:	197b      	adds	r3, r7, r5
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d16e      	bne.n	8006b02 <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7d1b      	ldrb	r3, [r3, #20]
 8006a28:	001a      	movs	r2, r3
 8006a2a:	2340      	movs	r3, #64	@ 0x40
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d068      	beq.n	8006b02 <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	7d1b      	ldrb	r3, [r3, #20]
 8006a34:	b25b      	sxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da14      	bge.n	8006a64 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	7858      	ldrb	r0, [r3, #1]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3330      	adds	r3, #48	@ 0x30
 8006a42:	0019      	movs	r1, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1a      	ldr	r2, [r3, #32]
 8006a48:	2301      	movs	r3, #1
 8006a4a:	f7fd fd1d 	bl	8004488 <disk_write>
 8006a4e:	1e03      	subs	r3, r0, #0
 8006a50:	d001      	beq.n	8006a56 <f_sync+0x58>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e058      	b.n	8006b08 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	7d1b      	ldrb	r3, [r3, #20]
 8006a5a:	227f      	movs	r2, #127	@ 0x7f
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006a64:	f7fc febe 	bl	80037e4 <get_fattime>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	2517      	movs	r5, #23
 8006a74:	197c      	adds	r4, r7, r5
 8006a76:	0019      	movs	r1, r3
 8006a78:	0010      	movs	r0, r2
 8006a7a:	f7fe f801 	bl	8004a80 <move_window>
 8006a7e:	0003      	movs	r3, r0
 8006a80:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 8006a82:	002c      	movs	r4, r5
 8006a84:	193b      	adds	r3, r7, r4
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d13a      	bne.n	8006b02 <f_sync+0x104>
					dir = fp->dir_ptr;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a90:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	330b      	adds	r3, #11
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	330b      	adds	r3, #11
 8006a9c:	2120      	movs	r1, #32
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	0019      	movs	r1, r3
 8006ab0:	f7fe fd6b 	bl	800558a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	331c      	adds	r3, #28
 8006ab8:	001a      	movs	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	0019      	movs	r1, r3
 8006ac0:	0010      	movs	r0, r2
 8006ac2:	f7fd fd8b 	bl	80045dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3316      	adds	r3, #22
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	0011      	movs	r1, r2
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f7fd fd84 	bl	80045dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	3312      	adds	r3, #18
 8006ad8:	2100      	movs	r1, #0
 8006ada:	0018      	movs	r0, r3
 8006adc:	f7fd fd60 	bl	80045a0 <st_word>
					fs->wflag = 1;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	193c      	adds	r4, r7, r4
 8006aea:	0018      	movs	r0, r3
 8006aec:	f7fd fffe 	bl	8004aec <sync_fs>
 8006af0:	0003      	movs	r3, r0
 8006af2:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	7d1b      	ldrb	r3, [r3, #20]
 8006af8:	2240      	movs	r2, #64	@ 0x40
 8006afa:	4393      	bics	r3, r2
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006b02:	2317      	movs	r3, #23
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	781b      	ldrb	r3, [r3, #0]
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b006      	add	sp, #24
 8006b0e:	bdb0      	pop	{r4, r5, r7, pc}

08006b10 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006b10:	b5b0      	push	{r4, r5, r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006b18:	250f      	movs	r5, #15
 8006b1a:	197c      	adds	r4, r7, r5
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7ff ff6d 	bl	80069fe <f_sync>
 8006b24:	0003      	movs	r3, r0
 8006b26:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8006b28:	197b      	adds	r3, r7, r5
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11c      	bne.n	8006b6a <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	197c      	adds	r4, r7, r5
 8006b34:	2208      	movs	r2, #8
 8006b36:	18ba      	adds	r2, r7, r2
 8006b38:	0011      	movs	r1, r2
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f7ff fa28 	bl	8005f90 <validate>
 8006b40:	0003      	movs	r3, r0
 8006b42:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8006b44:	197b      	adds	r3, r7, r5
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10e      	bne.n	8006b6a <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	197c      	adds	r4, r7, r5
 8006b52:	0018      	movs	r0, r3
 8006b54:	f7fd fee2 	bl	800491c <dec_lock>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8006b5c:	197b      	adds	r3, r7, r5
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006b6a:	230f      	movs	r3, #15
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	781b      	ldrb	r3, [r3, #0]
}
 8006b70:	0018      	movs	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	b004      	add	sp, #16
 8006b76:	bdb0      	pop	{r4, r5, r7, pc}

08006b78 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006b78:	b5b0      	push	{r4, r5, r7, lr}
 8006b7a:	b092      	sub	sp, #72	@ 0x48
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006b84:	2547      	movs	r5, #71	@ 0x47
 8006b86:	197c      	adds	r4, r7, r5
 8006b88:	2328      	movs	r3, #40	@ 0x28
 8006b8a:	18f9      	adds	r1, r7, r3
 8006b8c:	230c      	movs	r3, #12
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	2200      	movs	r2, #0
 8006b92:	0018      	movs	r0, r3
 8006b94:	f7fe ff8c 	bl	8005ab0 <find_volume>
 8006b98:	0003      	movs	r3, r0
 8006b9a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006b9c:	197b      	adds	r3, r7, r5
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d000      	beq.n	8006ba6 <f_getfree+0x2e>
 8006ba4:	e09e      	b.n	8006ce4 <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	3b02      	subs	r3, #2
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d804      	bhi.n	8006bc4 <f_getfree+0x4c>
			*nclst = fs->free_clst;
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	e08f      	b.n	8006ce4 <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d12d      	bne.n	8006c2c <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bd6:	2314      	movs	r3, #20
 8006bd8:	18fb      	adds	r3, r7, r3
 8006bda:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 8006bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bde:	2314      	movs	r3, #20
 8006be0:	18fb      	adds	r3, r7, r3
 8006be2:	0011      	movs	r1, r2
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7fe f819 	bl	8004c1c <get_fat>
 8006bea:	0003      	movs	r3, r0
 8006bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	d104      	bne.n	8006bfe <f_getfree+0x86>
 8006bf4:	2347      	movs	r3, #71	@ 0x47
 8006bf6:	18fb      	adds	r3, r7, r3
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	e065      	b.n	8006cca <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d104      	bne.n	8006c0e <f_getfree+0x96>
 8006c04:	2347      	movs	r3, #71	@ 0x47
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	2202      	movs	r2, #2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	e05d      	b.n	8006cca <f_getfree+0x152>
					if (stat == 0) nfree++;
 8006c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d102      	bne.n	8006c1a <f_getfree+0xa2>
 8006c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c16:	3301      	adds	r3, #1
 8006c18:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8006c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d3d8      	bcc.n	8006bdc <f_getfree+0x64>
 8006c2a:	e04e      	b.n	8006cca <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8006c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d114      	bne.n	8006c70 <f_getfree+0xf8>
							res = move_window(fs, sect++);
 8006c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006c4e:	2547      	movs	r5, #71	@ 0x47
 8006c50:	197c      	adds	r4, r7, r5
 8006c52:	0019      	movs	r1, r3
 8006c54:	f7fd ff14 	bl	8004a80 <move_window>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 8006c5c:	197b      	adds	r3, r7, r5
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d131      	bne.n	8006cc8 <f_getfree+0x150>
							p = fs->win;
 8006c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c66:	3330      	adds	r3, #48	@ 0x30
 8006c68:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8006c6a:	2380      	movs	r3, #128	@ 0x80
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d10f      	bne.n	8006c98 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f7fd fc54 	bl	8004528 <ld_word>
 8006c80:	1e03      	subs	r3, r0, #0
 8006c82:	d102      	bne.n	8006c8a <f_getfree+0x112>
 8006c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c86:	3301      	adds	r3, #1
 8006c88:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	3302      	adds	r3, #2
 8006c8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c92:	3b02      	subs	r3, #2
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c96:	e010      	b.n	8006cba <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f7fd fc5f 	bl	800455e <ld_dword>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	d102      	bne.n	8006cae <f_getfree+0x136>
 8006ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006caa:	3301      	adds	r3, #1
 8006cac:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb6:	3b04      	subs	r3, #4
 8006cb8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8006cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1bc      	bne.n	8006c40 <f_getfree+0xc8>
 8006cc6:	e000      	b.n	8006cca <f_getfree+0x152>
							if (res != FR_OK) break;
 8006cc8:	46c0      	nop			@ (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cce:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cd4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	791a      	ldrb	r2, [r3, #4]
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	2101      	movs	r1, #1
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006ce4:	2347      	movs	r3, #71	@ 0x47
 8006ce6:	18fb      	adds	r3, r7, r3
 8006ce8:	781b      	ldrb	r3, [r3, #0]
}
 8006cea:	0018      	movs	r0, r3
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b012      	add	sp, #72	@ 0x48
 8006cf0:	bdb0      	pop	{r4, r5, r7, pc}

08006cf2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006cf2:	b590      	push	{r4, r7, lr}
 8006cf4:	b089      	sub	sp, #36	@ 0x24
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	60f8      	str	r0, [r7, #12]
 8006cfa:	60b9      	str	r1, [r7, #8]
 8006cfc:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006d06:	e022      	b.n	8006d4e <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006d08:	2310      	movs	r3, #16
 8006d0a:	18fb      	adds	r3, r7, r3
 8006d0c:	2414      	movs	r4, #20
 8006d0e:	1939      	adds	r1, r7, r4
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f7ff fbb8 	bl	8006488 <f_read>
		if (rc != 1) break;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d11d      	bne.n	8006d5a <f_gets+0x68>
		c = s[0];
 8006d1e:	2117      	movs	r1, #23
 8006d20:	187b      	adds	r3, r7, r1
 8006d22:	193a      	adds	r2, r7, r4
 8006d24:	7812      	ldrb	r2, [r2, #0]
 8006d26:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006d28:	187b      	adds	r3, r7, r1
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b0d      	cmp	r3, #13
 8006d2e:	d00d      	beq.n	8006d4c <f_gets+0x5a>
		*p++ = c;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	61ba      	str	r2, [r7, #24]
 8006d36:	187a      	adds	r2, r7, r1
 8006d38:	7812      	ldrb	r2, [r2, #0]
 8006d3a:	701a      	strb	r2, [r3, #0]
		n++;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006d42:	187b      	adds	r3, r7, r1
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	2b0a      	cmp	r3, #10
 8006d48:	d009      	beq.n	8006d5e <f_gets+0x6c>
 8006d4a:	e000      	b.n	8006d4e <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006d4c:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	3b01      	subs	r3, #1
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	dbd7      	blt.n	8006d08 <f_gets+0x16>
 8006d58:	e002      	b.n	8006d60 <f_gets+0x6e>
		if (rc != 1) break;
 8006d5a:	46c0      	nop			@ (mov r8, r8)
 8006d5c:	e000      	b.n	8006d60 <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8006d5e:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	2200      	movs	r2, #0
 8006d64:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <f_gets+0x7e>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	e000      	b.n	8006d72 <f_gets+0x80>
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	0018      	movs	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	b009      	add	sp, #36	@ 0x24
 8006d78:	bd90      	pop	{r4, r7, pc}
	...

08006d7c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006d7c:	b590      	push	{r4, r7, lr}
 8006d7e:	b087      	sub	sp, #28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	1dfb      	adds	r3, r7, #7
 8006d88:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8006d8a:	2417      	movs	r4, #23
 8006d8c:	193b      	adds	r3, r7, r4
 8006d8e:	2201      	movs	r2, #1
 8006d90:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8006d92:	2016      	movs	r0, #22
 8006d94:	183b      	adds	r3, r7, r0
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8006d9a:	4b21      	ldr	r3, [pc, #132]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006d9c:	7a5b      	ldrb	r3, [r3, #9]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d136      	bne.n	8006e12 <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006da4:	4b1e      	ldr	r3, [pc, #120]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006da6:	7a5b      	ldrb	r3, [r3, #9]
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	001a      	movs	r2, r3
 8006dac:	4b1c      	ldr	r3, [pc, #112]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006dae:	2100      	movs	r1, #0
 8006db0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006db2:	4b1b      	ldr	r3, [pc, #108]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006db4:	7a5b      	ldrb	r3, [r3, #9]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4a19      	ldr	r2, [pc, #100]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	18d3      	adds	r3, r2, r3
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8006dc4:	4b16      	ldr	r3, [pc, #88]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006dc6:	7a5b      	ldrb	r3, [r3, #9]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	001a      	movs	r2, r3
 8006dcc:	4b14      	ldr	r3, [pc, #80]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006dce:	189b      	adds	r3, r3, r2
 8006dd0:	1dfa      	adds	r2, r7, #7
 8006dd2:	7812      	ldrb	r2, [r2, #0]
 8006dd4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006dd6:	4b12      	ldr	r3, [pc, #72]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006dd8:	7a5b      	ldrb	r3, [r3, #9]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	b2d1      	uxtb	r1, r2
 8006de0:	4a0f      	ldr	r2, [pc, #60]	@ (8006e20 <FATFS_LinkDriverEx+0xa4>)
 8006de2:	7251      	strb	r1, [r2, #9]
 8006de4:	183a      	adds	r2, r7, r0
 8006de6:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8006de8:	183b      	adds	r3, r7, r0
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	3330      	adds	r3, #48	@ 0x30
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3301      	adds	r3, #1
 8006df8:	223a      	movs	r2, #58	@ 0x3a
 8006dfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	3302      	adds	r3, #2
 8006e00:	222f      	movs	r2, #47	@ 0x2f
 8006e02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	3303      	adds	r3, #3
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006e0c:	193b      	adds	r3, r7, r4
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006e12:	2317      	movs	r3, #23
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	781b      	ldrb	r3, [r3, #0]
}
 8006e18:	0018      	movs	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b007      	add	sp, #28
 8006e1e:	bd90      	pop	{r4, r7, pc}
 8006e20:	200002c8 	.word	0x200002c8

08006e24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	0018      	movs	r0, r3
 8006e36:	f7ff ffa1 	bl	8006d7c <FATFS_LinkDriverEx>
 8006e3a:	0003      	movs	r3, r0
}
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b002      	add	sp, #8
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <_vsniprintf_r>:
 8006e44:	b530      	push	{r4, r5, lr}
 8006e46:	0014      	movs	r4, r2
 8006e48:	0005      	movs	r5, r0
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	b09b      	sub	sp, #108	@ 0x6c
 8006e4e:	2c00      	cmp	r4, #0
 8006e50:	da05      	bge.n	8006e5e <_vsniprintf_r+0x1a>
 8006e52:	238b      	movs	r3, #139	@ 0x8b
 8006e54:	6003      	str	r3, [r0, #0]
 8006e56:	2001      	movs	r0, #1
 8006e58:	4240      	negs	r0, r0
 8006e5a:	b01b      	add	sp, #108	@ 0x6c
 8006e5c:	bd30      	pop	{r4, r5, pc}
 8006e5e:	2382      	movs	r3, #130	@ 0x82
 8006e60:	4668      	mov	r0, sp
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	8183      	strh	r3, [r0, #12]
 8006e66:	2300      	movs	r3, #0
 8006e68:	9100      	str	r1, [sp, #0]
 8006e6a:	9104      	str	r1, [sp, #16]
 8006e6c:	429c      	cmp	r4, r3
 8006e6e:	d000      	beq.n	8006e72 <_vsniprintf_r+0x2e>
 8006e70:	1e63      	subs	r3, r4, #1
 8006e72:	9302      	str	r3, [sp, #8]
 8006e74:	9305      	str	r3, [sp, #20]
 8006e76:	2301      	movs	r3, #1
 8006e78:	4669      	mov	r1, sp
 8006e7a:	425b      	negs	r3, r3
 8006e7c:	81cb      	strh	r3, [r1, #14]
 8006e7e:	0028      	movs	r0, r5
 8006e80:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006e82:	f000 f8b5 	bl	8006ff0 <_svfiprintf_r>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	da01      	bge.n	8006e8e <_vsniprintf_r+0x4a>
 8006e8a:	238b      	movs	r3, #139	@ 0x8b
 8006e8c:	602b      	str	r3, [r5, #0]
 8006e8e:	2c00      	cmp	r4, #0
 8006e90:	d0e3      	beq.n	8006e5a <_vsniprintf_r+0x16>
 8006e92:	2200      	movs	r2, #0
 8006e94:	9b00      	ldr	r3, [sp, #0]
 8006e96:	701a      	strb	r2, [r3, #0]
 8006e98:	e7df      	b.n	8006e5a <_vsniprintf_r+0x16>
	...

08006e9c <vsniprintf>:
 8006e9c:	b513      	push	{r0, r1, r4, lr}
 8006e9e:	4c04      	ldr	r4, [pc, #16]	@ (8006eb0 <vsniprintf+0x14>)
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	0013      	movs	r3, r2
 8006ea4:	000a      	movs	r2, r1
 8006ea6:	0001      	movs	r1, r0
 8006ea8:	6820      	ldr	r0, [r4, #0]
 8006eaa:	f7ff ffcb 	bl	8006e44 <_vsniprintf_r>
 8006eae:	bd16      	pop	{r1, r2, r4, pc}
 8006eb0:	20000024 	.word	0x20000024

08006eb4 <memset>:
 8006eb4:	0003      	movs	r3, r0
 8006eb6:	1882      	adds	r2, r0, r2
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d100      	bne.n	8006ebe <memset+0xa>
 8006ebc:	4770      	bx	lr
 8006ebe:	7019      	strb	r1, [r3, #0]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	e7f9      	b.n	8006eb8 <memset+0x4>

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	@ (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	46c0      	nop			@ (mov r8, r8)
 8006ecc:	20000024 	.word	0x20000024

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	2600      	movs	r6, #0
 8006ed4:	4c0c      	ldr	r4, [pc, #48]	@ (8006f08 <__libc_init_array+0x38>)
 8006ed6:	4d0d      	ldr	r5, [pc, #52]	@ (8006f0c <__libc_init_array+0x3c>)
 8006ed8:	1b64      	subs	r4, r4, r5
 8006eda:	10a4      	asrs	r4, r4, #2
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	2600      	movs	r6, #0
 8006ee2:	f000 fc65 	bl	80077b0 <_init>
 8006ee6:	4c0a      	ldr	r4, [pc, #40]	@ (8006f10 <__libc_init_array+0x40>)
 8006ee8:	4d0a      	ldr	r5, [pc, #40]	@ (8006f14 <__libc_init_array+0x44>)
 8006eea:	1b64      	subs	r4, r4, r5
 8006eec:	10a4      	asrs	r4, r4, #2
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	00b3      	lsls	r3, r6, #2
 8006ef6:	58eb      	ldr	r3, [r5, r3]
 8006ef8:	4798      	blx	r3
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	00b3      	lsls	r3, r6, #2
 8006f00:	58eb      	ldr	r3, [r5, r3]
 8006f02:	4798      	blx	r3
 8006f04:	3601      	adds	r6, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	08007b00 	.word	0x08007b00
 8006f0c:	08007b00 	.word	0x08007b00
 8006f10:	08007b04 	.word	0x08007b04
 8006f14:	08007b00 	.word	0x08007b00

08006f18 <__retarget_lock_acquire_recursive>:
 8006f18:	4770      	bx	lr

08006f1a <__retarget_lock_release_recursive>:
 8006f1a:	4770      	bx	lr

08006f1c <memcpy>:
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d100      	bne.n	8006f26 <memcpy+0xa>
 8006f24:	bd10      	pop	{r4, pc}
 8006f26:	5ccc      	ldrb	r4, [r1, r3]
 8006f28:	54c4      	strb	r4, [r0, r3]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	e7f8      	b.n	8006f20 <memcpy+0x4>
	...

08006f30 <__ssputs_r>:
 8006f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f32:	688e      	ldr	r6, [r1, #8]
 8006f34:	b085      	sub	sp, #20
 8006f36:	001f      	movs	r7, r3
 8006f38:	000c      	movs	r4, r1
 8006f3a:	680b      	ldr	r3, [r1, #0]
 8006f3c:	9002      	str	r0, [sp, #8]
 8006f3e:	9203      	str	r2, [sp, #12]
 8006f40:	42be      	cmp	r6, r7
 8006f42:	d830      	bhi.n	8006fa6 <__ssputs_r+0x76>
 8006f44:	210c      	movs	r1, #12
 8006f46:	5e62      	ldrsh	r2, [r4, r1]
 8006f48:	2190      	movs	r1, #144	@ 0x90
 8006f4a:	00c9      	lsls	r1, r1, #3
 8006f4c:	420a      	tst	r2, r1
 8006f4e:	d028      	beq.n	8006fa2 <__ssputs_r+0x72>
 8006f50:	2003      	movs	r0, #3
 8006f52:	6921      	ldr	r1, [r4, #16]
 8006f54:	1a5b      	subs	r3, r3, r1
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	6963      	ldr	r3, [r4, #20]
 8006f5a:	4343      	muls	r3, r0
 8006f5c:	9801      	ldr	r0, [sp, #4]
 8006f5e:	0fdd      	lsrs	r5, r3, #31
 8006f60:	18ed      	adds	r5, r5, r3
 8006f62:	1c7b      	adds	r3, r7, #1
 8006f64:	181b      	adds	r3, r3, r0
 8006f66:	106d      	asrs	r5, r5, #1
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	d900      	bls.n	8006f6e <__ssputs_r+0x3e>
 8006f6c:	001d      	movs	r5, r3
 8006f6e:	0552      	lsls	r2, r2, #21
 8006f70:	d528      	bpl.n	8006fc4 <__ssputs_r+0x94>
 8006f72:	0029      	movs	r1, r5
 8006f74:	9802      	ldr	r0, [sp, #8]
 8006f76:	f000 f95b 	bl	8007230 <_malloc_r>
 8006f7a:	1e06      	subs	r6, r0, #0
 8006f7c:	d02c      	beq.n	8006fd8 <__ssputs_r+0xa8>
 8006f7e:	9a01      	ldr	r2, [sp, #4]
 8006f80:	6921      	ldr	r1, [r4, #16]
 8006f82:	f7ff ffcb 	bl	8006f1c <memcpy>
 8006f86:	89a2      	ldrh	r2, [r4, #12]
 8006f88:	4b18      	ldr	r3, [pc, #96]	@ (8006fec <__ssputs_r+0xbc>)
 8006f8a:	401a      	ands	r2, r3
 8006f8c:	2380      	movs	r3, #128	@ 0x80
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	6126      	str	r6, [r4, #16]
 8006f96:	18f6      	adds	r6, r6, r3
 8006f98:	6026      	str	r6, [r4, #0]
 8006f9a:	003e      	movs	r6, r7
 8006f9c:	6165      	str	r5, [r4, #20]
 8006f9e:	1aed      	subs	r5, r5, r3
 8006fa0:	60a5      	str	r5, [r4, #8]
 8006fa2:	42be      	cmp	r6, r7
 8006fa4:	d900      	bls.n	8006fa8 <__ssputs_r+0x78>
 8006fa6:	003e      	movs	r6, r7
 8006fa8:	0032      	movs	r2, r6
 8006faa:	9903      	ldr	r1, [sp, #12]
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	f000 fb7c 	bl	80076aa <memmove>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	1b9b      	subs	r3, r3, r6
 8006fb8:	60a3      	str	r3, [r4, #8]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	199b      	adds	r3, r3, r6
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	b005      	add	sp, #20
 8006fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc4:	002a      	movs	r2, r5
 8006fc6:	9802      	ldr	r0, [sp, #8]
 8006fc8:	f000 fb40 	bl	800764c <_realloc_r>
 8006fcc:	1e06      	subs	r6, r0, #0
 8006fce:	d1e0      	bne.n	8006f92 <__ssputs_r+0x62>
 8006fd0:	6921      	ldr	r1, [r4, #16]
 8006fd2:	9802      	ldr	r0, [sp, #8]
 8006fd4:	f000 fb9a 	bl	800770c <_free_r>
 8006fd8:	230c      	movs	r3, #12
 8006fda:	2001      	movs	r0, #1
 8006fdc:	9a02      	ldr	r2, [sp, #8]
 8006fde:	4240      	negs	r0, r0
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	89a2      	ldrh	r2, [r4, #12]
 8006fe4:	3334      	adds	r3, #52	@ 0x34
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	e7e9      	b.n	8006fc0 <__ssputs_r+0x90>
 8006fec:	fffffb7f 	.word	0xfffffb7f

08006ff0 <_svfiprintf_r>:
 8006ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff2:	b0a1      	sub	sp, #132	@ 0x84
 8006ff4:	9003      	str	r0, [sp, #12]
 8006ff6:	001d      	movs	r5, r3
 8006ff8:	898b      	ldrh	r3, [r1, #12]
 8006ffa:	000f      	movs	r7, r1
 8006ffc:	0016      	movs	r6, r2
 8006ffe:	061b      	lsls	r3, r3, #24
 8007000:	d511      	bpl.n	8007026 <_svfiprintf_r+0x36>
 8007002:	690b      	ldr	r3, [r1, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10e      	bne.n	8007026 <_svfiprintf_r+0x36>
 8007008:	2140      	movs	r1, #64	@ 0x40
 800700a:	f000 f911 	bl	8007230 <_malloc_r>
 800700e:	6038      	str	r0, [r7, #0]
 8007010:	6138      	str	r0, [r7, #16]
 8007012:	2800      	cmp	r0, #0
 8007014:	d105      	bne.n	8007022 <_svfiprintf_r+0x32>
 8007016:	230c      	movs	r3, #12
 8007018:	9a03      	ldr	r2, [sp, #12]
 800701a:	6013      	str	r3, [r2, #0]
 800701c:	2001      	movs	r0, #1
 800701e:	4240      	negs	r0, r0
 8007020:	e0cf      	b.n	80071c2 <_svfiprintf_r+0x1d2>
 8007022:	2340      	movs	r3, #64	@ 0x40
 8007024:	617b      	str	r3, [r7, #20]
 8007026:	2300      	movs	r3, #0
 8007028:	ac08      	add	r4, sp, #32
 800702a:	6163      	str	r3, [r4, #20]
 800702c:	3320      	adds	r3, #32
 800702e:	7663      	strb	r3, [r4, #25]
 8007030:	3310      	adds	r3, #16
 8007032:	76a3      	strb	r3, [r4, #26]
 8007034:	9507      	str	r5, [sp, #28]
 8007036:	0035      	movs	r5, r6
 8007038:	782b      	ldrb	r3, [r5, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <_svfiprintf_r+0x52>
 800703e:	2b25      	cmp	r3, #37	@ 0x25
 8007040:	d148      	bne.n	80070d4 <_svfiprintf_r+0xe4>
 8007042:	1bab      	subs	r3, r5, r6
 8007044:	9305      	str	r3, [sp, #20]
 8007046:	42b5      	cmp	r5, r6
 8007048:	d00b      	beq.n	8007062 <_svfiprintf_r+0x72>
 800704a:	0032      	movs	r2, r6
 800704c:	0039      	movs	r1, r7
 800704e:	9803      	ldr	r0, [sp, #12]
 8007050:	f7ff ff6e 	bl	8006f30 <__ssputs_r>
 8007054:	3001      	adds	r0, #1
 8007056:	d100      	bne.n	800705a <_svfiprintf_r+0x6a>
 8007058:	e0ae      	b.n	80071b8 <_svfiprintf_r+0x1c8>
 800705a:	6963      	ldr	r3, [r4, #20]
 800705c:	9a05      	ldr	r2, [sp, #20]
 800705e:	189b      	adds	r3, r3, r2
 8007060:	6163      	str	r3, [r4, #20]
 8007062:	782b      	ldrb	r3, [r5, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d100      	bne.n	800706a <_svfiprintf_r+0x7a>
 8007068:	e0a6      	b.n	80071b8 <_svfiprintf_r+0x1c8>
 800706a:	2201      	movs	r2, #1
 800706c:	2300      	movs	r3, #0
 800706e:	4252      	negs	r2, r2
 8007070:	6062      	str	r2, [r4, #4]
 8007072:	a904      	add	r1, sp, #16
 8007074:	3254      	adds	r2, #84	@ 0x54
 8007076:	1852      	adds	r2, r2, r1
 8007078:	1c6e      	adds	r6, r5, #1
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	60e3      	str	r3, [r4, #12]
 800707e:	60a3      	str	r3, [r4, #8]
 8007080:	7013      	strb	r3, [r2, #0]
 8007082:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007084:	4b54      	ldr	r3, [pc, #336]	@ (80071d8 <_svfiprintf_r+0x1e8>)
 8007086:	2205      	movs	r2, #5
 8007088:	0018      	movs	r0, r3
 800708a:	7831      	ldrb	r1, [r6, #0]
 800708c:	9305      	str	r3, [sp, #20]
 800708e:	f000 fb31 	bl	80076f4 <memchr>
 8007092:	1c75      	adds	r5, r6, #1
 8007094:	2800      	cmp	r0, #0
 8007096:	d11f      	bne.n	80070d8 <_svfiprintf_r+0xe8>
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	06d3      	lsls	r3, r2, #27
 800709c:	d504      	bpl.n	80070a8 <_svfiprintf_r+0xb8>
 800709e:	2353      	movs	r3, #83	@ 0x53
 80070a0:	a904      	add	r1, sp, #16
 80070a2:	185b      	adds	r3, r3, r1
 80070a4:	2120      	movs	r1, #32
 80070a6:	7019      	strb	r1, [r3, #0]
 80070a8:	0713      	lsls	r3, r2, #28
 80070aa:	d504      	bpl.n	80070b6 <_svfiprintf_r+0xc6>
 80070ac:	2353      	movs	r3, #83	@ 0x53
 80070ae:	a904      	add	r1, sp, #16
 80070b0:	185b      	adds	r3, r3, r1
 80070b2:	212b      	movs	r1, #43	@ 0x2b
 80070b4:	7019      	strb	r1, [r3, #0]
 80070b6:	7833      	ldrb	r3, [r6, #0]
 80070b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ba:	d016      	beq.n	80070ea <_svfiprintf_r+0xfa>
 80070bc:	0035      	movs	r5, r6
 80070be:	2100      	movs	r1, #0
 80070c0:	200a      	movs	r0, #10
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	782a      	ldrb	r2, [r5, #0]
 80070c6:	1c6e      	adds	r6, r5, #1
 80070c8:	3a30      	subs	r2, #48	@ 0x30
 80070ca:	2a09      	cmp	r2, #9
 80070cc:	d950      	bls.n	8007170 <_svfiprintf_r+0x180>
 80070ce:	2900      	cmp	r1, #0
 80070d0:	d111      	bne.n	80070f6 <_svfiprintf_r+0x106>
 80070d2:	e017      	b.n	8007104 <_svfiprintf_r+0x114>
 80070d4:	3501      	adds	r5, #1
 80070d6:	e7af      	b.n	8007038 <_svfiprintf_r+0x48>
 80070d8:	9b05      	ldr	r3, [sp, #20]
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	1ac0      	subs	r0, r0, r3
 80070de:	2301      	movs	r3, #1
 80070e0:	4083      	lsls	r3, r0
 80070e2:	4313      	orrs	r3, r2
 80070e4:	002e      	movs	r6, r5
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	e7cc      	b.n	8007084 <_svfiprintf_r+0x94>
 80070ea:	9b07      	ldr	r3, [sp, #28]
 80070ec:	1d19      	adds	r1, r3, #4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	9107      	str	r1, [sp, #28]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	db01      	blt.n	80070fa <_svfiprintf_r+0x10a>
 80070f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070f8:	e004      	b.n	8007104 <_svfiprintf_r+0x114>
 80070fa:	425b      	negs	r3, r3
 80070fc:	60e3      	str	r3, [r4, #12]
 80070fe:	2302      	movs	r3, #2
 8007100:	4313      	orrs	r3, r2
 8007102:	6023      	str	r3, [r4, #0]
 8007104:	782b      	ldrb	r3, [r5, #0]
 8007106:	2b2e      	cmp	r3, #46	@ 0x2e
 8007108:	d10c      	bne.n	8007124 <_svfiprintf_r+0x134>
 800710a:	786b      	ldrb	r3, [r5, #1]
 800710c:	2b2a      	cmp	r3, #42	@ 0x2a
 800710e:	d134      	bne.n	800717a <_svfiprintf_r+0x18a>
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	3502      	adds	r5, #2
 8007114:	1d1a      	adds	r2, r3, #4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	9207      	str	r2, [sp, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	da01      	bge.n	8007122 <_svfiprintf_r+0x132>
 800711e:	2301      	movs	r3, #1
 8007120:	425b      	negs	r3, r3
 8007122:	9309      	str	r3, [sp, #36]	@ 0x24
 8007124:	4e2d      	ldr	r6, [pc, #180]	@ (80071dc <_svfiprintf_r+0x1ec>)
 8007126:	2203      	movs	r2, #3
 8007128:	0030      	movs	r0, r6
 800712a:	7829      	ldrb	r1, [r5, #0]
 800712c:	f000 fae2 	bl	80076f4 <memchr>
 8007130:	2800      	cmp	r0, #0
 8007132:	d006      	beq.n	8007142 <_svfiprintf_r+0x152>
 8007134:	2340      	movs	r3, #64	@ 0x40
 8007136:	1b80      	subs	r0, r0, r6
 8007138:	4083      	lsls	r3, r0
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	3501      	adds	r5, #1
 800713e:	4313      	orrs	r3, r2
 8007140:	6023      	str	r3, [r4, #0]
 8007142:	7829      	ldrb	r1, [r5, #0]
 8007144:	2206      	movs	r2, #6
 8007146:	4826      	ldr	r0, [pc, #152]	@ (80071e0 <_svfiprintf_r+0x1f0>)
 8007148:	1c6e      	adds	r6, r5, #1
 800714a:	7621      	strb	r1, [r4, #24]
 800714c:	f000 fad2 	bl	80076f4 <memchr>
 8007150:	2800      	cmp	r0, #0
 8007152:	d038      	beq.n	80071c6 <_svfiprintf_r+0x1d6>
 8007154:	4b23      	ldr	r3, [pc, #140]	@ (80071e4 <_svfiprintf_r+0x1f4>)
 8007156:	2b00      	cmp	r3, #0
 8007158:	d122      	bne.n	80071a0 <_svfiprintf_r+0x1b0>
 800715a:	2207      	movs	r2, #7
 800715c:	9b07      	ldr	r3, [sp, #28]
 800715e:	3307      	adds	r3, #7
 8007160:	4393      	bics	r3, r2
 8007162:	3308      	adds	r3, #8
 8007164:	9307      	str	r3, [sp, #28]
 8007166:	6963      	ldr	r3, [r4, #20]
 8007168:	9a04      	ldr	r2, [sp, #16]
 800716a:	189b      	adds	r3, r3, r2
 800716c:	6163      	str	r3, [r4, #20]
 800716e:	e762      	b.n	8007036 <_svfiprintf_r+0x46>
 8007170:	4343      	muls	r3, r0
 8007172:	0035      	movs	r5, r6
 8007174:	2101      	movs	r1, #1
 8007176:	189b      	adds	r3, r3, r2
 8007178:	e7a4      	b.n	80070c4 <_svfiprintf_r+0xd4>
 800717a:	2300      	movs	r3, #0
 800717c:	200a      	movs	r0, #10
 800717e:	0019      	movs	r1, r3
 8007180:	3501      	adds	r5, #1
 8007182:	6063      	str	r3, [r4, #4]
 8007184:	782a      	ldrb	r2, [r5, #0]
 8007186:	1c6e      	adds	r6, r5, #1
 8007188:	3a30      	subs	r2, #48	@ 0x30
 800718a:	2a09      	cmp	r2, #9
 800718c:	d903      	bls.n	8007196 <_svfiprintf_r+0x1a6>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0c8      	beq.n	8007124 <_svfiprintf_r+0x134>
 8007192:	9109      	str	r1, [sp, #36]	@ 0x24
 8007194:	e7c6      	b.n	8007124 <_svfiprintf_r+0x134>
 8007196:	4341      	muls	r1, r0
 8007198:	0035      	movs	r5, r6
 800719a:	2301      	movs	r3, #1
 800719c:	1889      	adds	r1, r1, r2
 800719e:	e7f1      	b.n	8007184 <_svfiprintf_r+0x194>
 80071a0:	aa07      	add	r2, sp, #28
 80071a2:	9200      	str	r2, [sp, #0]
 80071a4:	0021      	movs	r1, r4
 80071a6:	003a      	movs	r2, r7
 80071a8:	4b0f      	ldr	r3, [pc, #60]	@ (80071e8 <_svfiprintf_r+0x1f8>)
 80071aa:	9803      	ldr	r0, [sp, #12]
 80071ac:	e000      	b.n	80071b0 <_svfiprintf_r+0x1c0>
 80071ae:	bf00      	nop
 80071b0:	9004      	str	r0, [sp, #16]
 80071b2:	9b04      	ldr	r3, [sp, #16]
 80071b4:	3301      	adds	r3, #1
 80071b6:	d1d6      	bne.n	8007166 <_svfiprintf_r+0x176>
 80071b8:	89bb      	ldrh	r3, [r7, #12]
 80071ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80071bc:	065b      	lsls	r3, r3, #25
 80071be:	d500      	bpl.n	80071c2 <_svfiprintf_r+0x1d2>
 80071c0:	e72c      	b.n	800701c <_svfiprintf_r+0x2c>
 80071c2:	b021      	add	sp, #132	@ 0x84
 80071c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071c6:	aa07      	add	r2, sp, #28
 80071c8:	9200      	str	r2, [sp, #0]
 80071ca:	0021      	movs	r1, r4
 80071cc:	003a      	movs	r2, r7
 80071ce:	4b06      	ldr	r3, [pc, #24]	@ (80071e8 <_svfiprintf_r+0x1f8>)
 80071d0:	9803      	ldr	r0, [sp, #12]
 80071d2:	f000 f91d 	bl	8007410 <_printf_i>
 80071d6:	e7eb      	b.n	80071b0 <_svfiprintf_r+0x1c0>
 80071d8:	08007acc 	.word	0x08007acc
 80071dc:	08007ad2 	.word	0x08007ad2
 80071e0:	08007ad6 	.word	0x08007ad6
 80071e4:	00000000 	.word	0x00000000
 80071e8:	08006f31 	.word	0x08006f31

080071ec <sbrk_aligned>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	4e0f      	ldr	r6, [pc, #60]	@ (800722c <sbrk_aligned+0x40>)
 80071f0:	000d      	movs	r5, r1
 80071f2:	6831      	ldr	r1, [r6, #0]
 80071f4:	0004      	movs	r4, r0
 80071f6:	2900      	cmp	r1, #0
 80071f8:	d102      	bne.n	8007200 <sbrk_aligned+0x14>
 80071fa:	f000 fa69 	bl	80076d0 <_sbrk_r>
 80071fe:	6030      	str	r0, [r6, #0]
 8007200:	0029      	movs	r1, r5
 8007202:	0020      	movs	r0, r4
 8007204:	f000 fa64 	bl	80076d0 <_sbrk_r>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d103      	bne.n	8007214 <sbrk_aligned+0x28>
 800720c:	2501      	movs	r5, #1
 800720e:	426d      	negs	r5, r5
 8007210:	0028      	movs	r0, r5
 8007212:	bd70      	pop	{r4, r5, r6, pc}
 8007214:	2303      	movs	r3, #3
 8007216:	1cc5      	adds	r5, r0, #3
 8007218:	439d      	bics	r5, r3
 800721a:	42a8      	cmp	r0, r5
 800721c:	d0f8      	beq.n	8007210 <sbrk_aligned+0x24>
 800721e:	1a29      	subs	r1, r5, r0
 8007220:	0020      	movs	r0, r4
 8007222:	f000 fa55 	bl	80076d0 <_sbrk_r>
 8007226:	3001      	adds	r0, #1
 8007228:	d1f2      	bne.n	8007210 <sbrk_aligned+0x24>
 800722a:	e7ef      	b.n	800720c <sbrk_aligned+0x20>
 800722c:	20000410 	.word	0x20000410

08007230 <_malloc_r>:
 8007230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007232:	2203      	movs	r2, #3
 8007234:	1ccb      	adds	r3, r1, #3
 8007236:	4393      	bics	r3, r2
 8007238:	3308      	adds	r3, #8
 800723a:	0005      	movs	r5, r0
 800723c:	001f      	movs	r7, r3
 800723e:	2b0c      	cmp	r3, #12
 8007240:	d234      	bcs.n	80072ac <_malloc_r+0x7c>
 8007242:	270c      	movs	r7, #12
 8007244:	42b9      	cmp	r1, r7
 8007246:	d833      	bhi.n	80072b0 <_malloc_r+0x80>
 8007248:	0028      	movs	r0, r5
 800724a:	f000 f9ef 	bl	800762c <__malloc_lock>
 800724e:	4e37      	ldr	r6, [pc, #220]	@ (800732c <_malloc_r+0xfc>)
 8007250:	6833      	ldr	r3, [r6, #0]
 8007252:	001c      	movs	r4, r3
 8007254:	2c00      	cmp	r4, #0
 8007256:	d12f      	bne.n	80072b8 <_malloc_r+0x88>
 8007258:	0039      	movs	r1, r7
 800725a:	0028      	movs	r0, r5
 800725c:	f7ff ffc6 	bl	80071ec <sbrk_aligned>
 8007260:	0004      	movs	r4, r0
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	d15f      	bne.n	8007326 <_malloc_r+0xf6>
 8007266:	6834      	ldr	r4, [r6, #0]
 8007268:	9400      	str	r4, [sp, #0]
 800726a:	9b00      	ldr	r3, [sp, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d14a      	bne.n	8007306 <_malloc_r+0xd6>
 8007270:	2c00      	cmp	r4, #0
 8007272:	d052      	beq.n	800731a <_malloc_r+0xea>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	0028      	movs	r0, r5
 8007278:	18e3      	adds	r3, r4, r3
 800727a:	9900      	ldr	r1, [sp, #0]
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	f000 fa27 	bl	80076d0 <_sbrk_r>
 8007282:	9b01      	ldr	r3, [sp, #4]
 8007284:	4283      	cmp	r3, r0
 8007286:	d148      	bne.n	800731a <_malloc_r+0xea>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	0028      	movs	r0, r5
 800728c:	1aff      	subs	r7, r7, r3
 800728e:	0039      	movs	r1, r7
 8007290:	f7ff ffac 	bl	80071ec <sbrk_aligned>
 8007294:	3001      	adds	r0, #1
 8007296:	d040      	beq.n	800731a <_malloc_r+0xea>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	19db      	adds	r3, r3, r7
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	6833      	ldr	r3, [r6, #0]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	d133      	bne.n	800730e <_malloc_r+0xde>
 80072a6:	9b00      	ldr	r3, [sp, #0]
 80072a8:	6033      	str	r3, [r6, #0]
 80072aa:	e019      	b.n	80072e0 <_malloc_r+0xb0>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dac9      	bge.n	8007244 <_malloc_r+0x14>
 80072b0:	230c      	movs	r3, #12
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	2000      	movs	r0, #0
 80072b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072b8:	6821      	ldr	r1, [r4, #0]
 80072ba:	1bc9      	subs	r1, r1, r7
 80072bc:	d420      	bmi.n	8007300 <_malloc_r+0xd0>
 80072be:	290b      	cmp	r1, #11
 80072c0:	d90a      	bls.n	80072d8 <_malloc_r+0xa8>
 80072c2:	19e2      	adds	r2, r4, r7
 80072c4:	6027      	str	r7, [r4, #0]
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	d104      	bne.n	80072d4 <_malloc_r+0xa4>
 80072ca:	6032      	str	r2, [r6, #0]
 80072cc:	6863      	ldr	r3, [r4, #4]
 80072ce:	6011      	str	r1, [r2, #0]
 80072d0:	6053      	str	r3, [r2, #4]
 80072d2:	e005      	b.n	80072e0 <_malloc_r+0xb0>
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	e7f9      	b.n	80072cc <_malloc_r+0x9c>
 80072d8:	6862      	ldr	r2, [r4, #4]
 80072da:	42a3      	cmp	r3, r4
 80072dc:	d10e      	bne.n	80072fc <_malloc_r+0xcc>
 80072de:	6032      	str	r2, [r6, #0]
 80072e0:	0028      	movs	r0, r5
 80072e2:	f000 f9ab 	bl	800763c <__malloc_unlock>
 80072e6:	0020      	movs	r0, r4
 80072e8:	2207      	movs	r2, #7
 80072ea:	300b      	adds	r0, #11
 80072ec:	1d23      	adds	r3, r4, #4
 80072ee:	4390      	bics	r0, r2
 80072f0:	1ac2      	subs	r2, r0, r3
 80072f2:	4298      	cmp	r0, r3
 80072f4:	d0df      	beq.n	80072b6 <_malloc_r+0x86>
 80072f6:	1a1b      	subs	r3, r3, r0
 80072f8:	50a3      	str	r3, [r4, r2]
 80072fa:	e7dc      	b.n	80072b6 <_malloc_r+0x86>
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	e7ef      	b.n	80072e0 <_malloc_r+0xb0>
 8007300:	0023      	movs	r3, r4
 8007302:	6864      	ldr	r4, [r4, #4]
 8007304:	e7a6      	b.n	8007254 <_malloc_r+0x24>
 8007306:	9c00      	ldr	r4, [sp, #0]
 8007308:	6863      	ldr	r3, [r4, #4]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	e7ad      	b.n	800726a <_malloc_r+0x3a>
 800730e:	001a      	movs	r2, r3
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	42a3      	cmp	r3, r4
 8007314:	d1fb      	bne.n	800730e <_malloc_r+0xde>
 8007316:	2300      	movs	r3, #0
 8007318:	e7da      	b.n	80072d0 <_malloc_r+0xa0>
 800731a:	230c      	movs	r3, #12
 800731c:	0028      	movs	r0, r5
 800731e:	602b      	str	r3, [r5, #0]
 8007320:	f000 f98c 	bl	800763c <__malloc_unlock>
 8007324:	e7c6      	b.n	80072b4 <_malloc_r+0x84>
 8007326:	6007      	str	r7, [r0, #0]
 8007328:	e7da      	b.n	80072e0 <_malloc_r+0xb0>
 800732a:	46c0      	nop			@ (mov r8, r8)
 800732c:	20000414 	.word	0x20000414

08007330 <_printf_common>:
 8007330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007332:	0016      	movs	r6, r2
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	688a      	ldr	r2, [r1, #8]
 8007338:	690b      	ldr	r3, [r1, #16]
 800733a:	000c      	movs	r4, r1
 800733c:	9000      	str	r0, [sp, #0]
 800733e:	4293      	cmp	r3, r2
 8007340:	da00      	bge.n	8007344 <_printf_common+0x14>
 8007342:	0013      	movs	r3, r2
 8007344:	0022      	movs	r2, r4
 8007346:	6033      	str	r3, [r6, #0]
 8007348:	3243      	adds	r2, #67	@ 0x43
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	2a00      	cmp	r2, #0
 800734e:	d001      	beq.n	8007354 <_printf_common+0x24>
 8007350:	3301      	adds	r3, #1
 8007352:	6033      	str	r3, [r6, #0]
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	069b      	lsls	r3, r3, #26
 8007358:	d502      	bpl.n	8007360 <_printf_common+0x30>
 800735a:	6833      	ldr	r3, [r6, #0]
 800735c:	3302      	adds	r3, #2
 800735e:	6033      	str	r3, [r6, #0]
 8007360:	6822      	ldr	r2, [r4, #0]
 8007362:	2306      	movs	r3, #6
 8007364:	0015      	movs	r5, r2
 8007366:	401d      	ands	r5, r3
 8007368:	421a      	tst	r2, r3
 800736a:	d027      	beq.n	80073bc <_printf_common+0x8c>
 800736c:	0023      	movs	r3, r4
 800736e:	3343      	adds	r3, #67	@ 0x43
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	1e5a      	subs	r2, r3, #1
 8007374:	4193      	sbcs	r3, r2
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	0692      	lsls	r2, r2, #26
 800737a:	d430      	bmi.n	80073de <_printf_common+0xae>
 800737c:	0022      	movs	r2, r4
 800737e:	9901      	ldr	r1, [sp, #4]
 8007380:	9800      	ldr	r0, [sp, #0]
 8007382:	9d08      	ldr	r5, [sp, #32]
 8007384:	3243      	adds	r2, #67	@ 0x43
 8007386:	47a8      	blx	r5
 8007388:	3001      	adds	r0, #1
 800738a:	d025      	beq.n	80073d8 <_printf_common+0xa8>
 800738c:	2206      	movs	r2, #6
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	2500      	movs	r5, #0
 8007392:	4013      	ands	r3, r2
 8007394:	2b04      	cmp	r3, #4
 8007396:	d105      	bne.n	80073a4 <_printf_common+0x74>
 8007398:	6833      	ldr	r3, [r6, #0]
 800739a:	68e5      	ldr	r5, [r4, #12]
 800739c:	1aed      	subs	r5, r5, r3
 800739e:	43eb      	mvns	r3, r5
 80073a0:	17db      	asrs	r3, r3, #31
 80073a2:	401d      	ands	r5, r3
 80073a4:	68a3      	ldr	r3, [r4, #8]
 80073a6:	6922      	ldr	r2, [r4, #16]
 80073a8:	4293      	cmp	r3, r2
 80073aa:	dd01      	ble.n	80073b0 <_printf_common+0x80>
 80073ac:	1a9b      	subs	r3, r3, r2
 80073ae:	18ed      	adds	r5, r5, r3
 80073b0:	2600      	movs	r6, #0
 80073b2:	42b5      	cmp	r5, r6
 80073b4:	d120      	bne.n	80073f8 <_printf_common+0xc8>
 80073b6:	2000      	movs	r0, #0
 80073b8:	e010      	b.n	80073dc <_printf_common+0xac>
 80073ba:	3501      	adds	r5, #1
 80073bc:	68e3      	ldr	r3, [r4, #12]
 80073be:	6832      	ldr	r2, [r6, #0]
 80073c0:	1a9b      	subs	r3, r3, r2
 80073c2:	42ab      	cmp	r3, r5
 80073c4:	ddd2      	ble.n	800736c <_printf_common+0x3c>
 80073c6:	0022      	movs	r2, r4
 80073c8:	2301      	movs	r3, #1
 80073ca:	9901      	ldr	r1, [sp, #4]
 80073cc:	9800      	ldr	r0, [sp, #0]
 80073ce:	9f08      	ldr	r7, [sp, #32]
 80073d0:	3219      	adds	r2, #25
 80073d2:	47b8      	blx	r7
 80073d4:	3001      	adds	r0, #1
 80073d6:	d1f0      	bne.n	80073ba <_printf_common+0x8a>
 80073d8:	2001      	movs	r0, #1
 80073da:	4240      	negs	r0, r0
 80073dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80073de:	2030      	movs	r0, #48	@ 0x30
 80073e0:	18e1      	adds	r1, r4, r3
 80073e2:	3143      	adds	r1, #67	@ 0x43
 80073e4:	7008      	strb	r0, [r1, #0]
 80073e6:	0021      	movs	r1, r4
 80073e8:	1c5a      	adds	r2, r3, #1
 80073ea:	3145      	adds	r1, #69	@ 0x45
 80073ec:	7809      	ldrb	r1, [r1, #0]
 80073ee:	18a2      	adds	r2, r4, r2
 80073f0:	3243      	adds	r2, #67	@ 0x43
 80073f2:	3302      	adds	r3, #2
 80073f4:	7011      	strb	r1, [r2, #0]
 80073f6:	e7c1      	b.n	800737c <_printf_common+0x4c>
 80073f8:	0022      	movs	r2, r4
 80073fa:	2301      	movs	r3, #1
 80073fc:	9901      	ldr	r1, [sp, #4]
 80073fe:	9800      	ldr	r0, [sp, #0]
 8007400:	9f08      	ldr	r7, [sp, #32]
 8007402:	321a      	adds	r2, #26
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	d0e6      	beq.n	80073d8 <_printf_common+0xa8>
 800740a:	3601      	adds	r6, #1
 800740c:	e7d1      	b.n	80073b2 <_printf_common+0x82>
	...

08007410 <_printf_i>:
 8007410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007412:	b08b      	sub	sp, #44	@ 0x2c
 8007414:	9206      	str	r2, [sp, #24]
 8007416:	000a      	movs	r2, r1
 8007418:	3243      	adds	r2, #67	@ 0x43
 800741a:	9307      	str	r3, [sp, #28]
 800741c:	9005      	str	r0, [sp, #20]
 800741e:	9203      	str	r2, [sp, #12]
 8007420:	7e0a      	ldrb	r2, [r1, #24]
 8007422:	000c      	movs	r4, r1
 8007424:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007426:	2a78      	cmp	r2, #120	@ 0x78
 8007428:	d809      	bhi.n	800743e <_printf_i+0x2e>
 800742a:	2a62      	cmp	r2, #98	@ 0x62
 800742c:	d80b      	bhi.n	8007446 <_printf_i+0x36>
 800742e:	2a00      	cmp	r2, #0
 8007430:	d100      	bne.n	8007434 <_printf_i+0x24>
 8007432:	e0bc      	b.n	80075ae <_printf_i+0x19e>
 8007434:	497b      	ldr	r1, [pc, #492]	@ (8007624 <_printf_i+0x214>)
 8007436:	9104      	str	r1, [sp, #16]
 8007438:	2a58      	cmp	r2, #88	@ 0x58
 800743a:	d100      	bne.n	800743e <_printf_i+0x2e>
 800743c:	e090      	b.n	8007560 <_printf_i+0x150>
 800743e:	0025      	movs	r5, r4
 8007440:	3542      	adds	r5, #66	@ 0x42
 8007442:	702a      	strb	r2, [r5, #0]
 8007444:	e022      	b.n	800748c <_printf_i+0x7c>
 8007446:	0010      	movs	r0, r2
 8007448:	3863      	subs	r0, #99	@ 0x63
 800744a:	2815      	cmp	r0, #21
 800744c:	d8f7      	bhi.n	800743e <_printf_i+0x2e>
 800744e:	f7f8 fe5f 	bl	8000110 <__gnu_thumb1_case_shi>
 8007452:	0016      	.short	0x0016
 8007454:	fff6001f 	.word	0xfff6001f
 8007458:	fff6fff6 	.word	0xfff6fff6
 800745c:	001ffff6 	.word	0x001ffff6
 8007460:	fff6fff6 	.word	0xfff6fff6
 8007464:	fff6fff6 	.word	0xfff6fff6
 8007468:	003600a1 	.word	0x003600a1
 800746c:	fff60080 	.word	0xfff60080
 8007470:	00b2fff6 	.word	0x00b2fff6
 8007474:	0036fff6 	.word	0x0036fff6
 8007478:	fff6fff6 	.word	0xfff6fff6
 800747c:	0084      	.short	0x0084
 800747e:	0025      	movs	r5, r4
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	3542      	adds	r5, #66	@ 0x42
 8007484:	1d11      	adds	r1, r2, #4
 8007486:	6019      	str	r1, [r3, #0]
 8007488:	6813      	ldr	r3, [r2, #0]
 800748a:	702b      	strb	r3, [r5, #0]
 800748c:	2301      	movs	r3, #1
 800748e:	e0a0      	b.n	80075d2 <_printf_i+0x1c2>
 8007490:	6818      	ldr	r0, [r3, #0]
 8007492:	6809      	ldr	r1, [r1, #0]
 8007494:	1d02      	adds	r2, r0, #4
 8007496:	060d      	lsls	r5, r1, #24
 8007498:	d50b      	bpl.n	80074b2 <_printf_i+0xa2>
 800749a:	6806      	ldr	r6, [r0, #0]
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	2e00      	cmp	r6, #0
 80074a0:	da03      	bge.n	80074aa <_printf_i+0x9a>
 80074a2:	232d      	movs	r3, #45	@ 0x2d
 80074a4:	9a03      	ldr	r2, [sp, #12]
 80074a6:	4276      	negs	r6, r6
 80074a8:	7013      	strb	r3, [r2, #0]
 80074aa:	4b5e      	ldr	r3, [pc, #376]	@ (8007624 <_printf_i+0x214>)
 80074ac:	270a      	movs	r7, #10
 80074ae:	9304      	str	r3, [sp, #16]
 80074b0:	e018      	b.n	80074e4 <_printf_i+0xd4>
 80074b2:	6806      	ldr	r6, [r0, #0]
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	0649      	lsls	r1, r1, #25
 80074b8:	d5f1      	bpl.n	800749e <_printf_i+0x8e>
 80074ba:	b236      	sxth	r6, r6
 80074bc:	e7ef      	b.n	800749e <_printf_i+0x8e>
 80074be:	6808      	ldr	r0, [r1, #0]
 80074c0:	6819      	ldr	r1, [r3, #0]
 80074c2:	c940      	ldmia	r1!, {r6}
 80074c4:	0605      	lsls	r5, r0, #24
 80074c6:	d402      	bmi.n	80074ce <_printf_i+0xbe>
 80074c8:	0640      	lsls	r0, r0, #25
 80074ca:	d500      	bpl.n	80074ce <_printf_i+0xbe>
 80074cc:	b2b6      	uxth	r6, r6
 80074ce:	6019      	str	r1, [r3, #0]
 80074d0:	4b54      	ldr	r3, [pc, #336]	@ (8007624 <_printf_i+0x214>)
 80074d2:	270a      	movs	r7, #10
 80074d4:	9304      	str	r3, [sp, #16]
 80074d6:	2a6f      	cmp	r2, #111	@ 0x6f
 80074d8:	d100      	bne.n	80074dc <_printf_i+0xcc>
 80074da:	3f02      	subs	r7, #2
 80074dc:	0023      	movs	r3, r4
 80074de:	2200      	movs	r2, #0
 80074e0:	3343      	adds	r3, #67	@ 0x43
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	60a3      	str	r3, [r4, #8]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	db03      	blt.n	80074f4 <_printf_i+0xe4>
 80074ec:	2104      	movs	r1, #4
 80074ee:	6822      	ldr	r2, [r4, #0]
 80074f0:	438a      	bics	r2, r1
 80074f2:	6022      	str	r2, [r4, #0]
 80074f4:	2e00      	cmp	r6, #0
 80074f6:	d102      	bne.n	80074fe <_printf_i+0xee>
 80074f8:	9d03      	ldr	r5, [sp, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00c      	beq.n	8007518 <_printf_i+0x108>
 80074fe:	9d03      	ldr	r5, [sp, #12]
 8007500:	0030      	movs	r0, r6
 8007502:	0039      	movs	r1, r7
 8007504:	f7f8 fe94 	bl	8000230 <__aeabi_uidivmod>
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	3d01      	subs	r5, #1
 800750c:	5c5b      	ldrb	r3, [r3, r1]
 800750e:	702b      	strb	r3, [r5, #0]
 8007510:	0033      	movs	r3, r6
 8007512:	0006      	movs	r6, r0
 8007514:	429f      	cmp	r7, r3
 8007516:	d9f3      	bls.n	8007500 <_printf_i+0xf0>
 8007518:	2f08      	cmp	r7, #8
 800751a:	d109      	bne.n	8007530 <_printf_i+0x120>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	07db      	lsls	r3, r3, #31
 8007520:	d506      	bpl.n	8007530 <_printf_i+0x120>
 8007522:	6862      	ldr	r2, [r4, #4]
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	429a      	cmp	r2, r3
 8007528:	dc02      	bgt.n	8007530 <_printf_i+0x120>
 800752a:	2330      	movs	r3, #48	@ 0x30
 800752c:	3d01      	subs	r5, #1
 800752e:	702b      	strb	r3, [r5, #0]
 8007530:	9b03      	ldr	r3, [sp, #12]
 8007532:	1b5b      	subs	r3, r3, r5
 8007534:	6123      	str	r3, [r4, #16]
 8007536:	9b07      	ldr	r3, [sp, #28]
 8007538:	0021      	movs	r1, r4
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	9805      	ldr	r0, [sp, #20]
 800753e:	9b06      	ldr	r3, [sp, #24]
 8007540:	aa09      	add	r2, sp, #36	@ 0x24
 8007542:	f7ff fef5 	bl	8007330 <_printf_common>
 8007546:	3001      	adds	r0, #1
 8007548:	d148      	bne.n	80075dc <_printf_i+0x1cc>
 800754a:	2001      	movs	r0, #1
 800754c:	4240      	negs	r0, r0
 800754e:	b00b      	add	sp, #44	@ 0x2c
 8007550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007552:	2220      	movs	r2, #32
 8007554:	6809      	ldr	r1, [r1, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	6022      	str	r2, [r4, #0]
 800755a:	2278      	movs	r2, #120	@ 0x78
 800755c:	4932      	ldr	r1, [pc, #200]	@ (8007628 <_printf_i+0x218>)
 800755e:	9104      	str	r1, [sp, #16]
 8007560:	0021      	movs	r1, r4
 8007562:	3145      	adds	r1, #69	@ 0x45
 8007564:	700a      	strb	r2, [r1, #0]
 8007566:	6819      	ldr	r1, [r3, #0]
 8007568:	6822      	ldr	r2, [r4, #0]
 800756a:	c940      	ldmia	r1!, {r6}
 800756c:	0610      	lsls	r0, r2, #24
 800756e:	d402      	bmi.n	8007576 <_printf_i+0x166>
 8007570:	0650      	lsls	r0, r2, #25
 8007572:	d500      	bpl.n	8007576 <_printf_i+0x166>
 8007574:	b2b6      	uxth	r6, r6
 8007576:	6019      	str	r1, [r3, #0]
 8007578:	07d3      	lsls	r3, r2, #31
 800757a:	d502      	bpl.n	8007582 <_printf_i+0x172>
 800757c:	2320      	movs	r3, #32
 800757e:	4313      	orrs	r3, r2
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	2e00      	cmp	r6, #0
 8007584:	d001      	beq.n	800758a <_printf_i+0x17a>
 8007586:	2710      	movs	r7, #16
 8007588:	e7a8      	b.n	80074dc <_printf_i+0xcc>
 800758a:	2220      	movs	r2, #32
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	4393      	bics	r3, r2
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	e7f8      	b.n	8007586 <_printf_i+0x176>
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	680d      	ldr	r5, [r1, #0]
 8007598:	1d10      	adds	r0, r2, #4
 800759a:	6949      	ldr	r1, [r1, #20]
 800759c:	6018      	str	r0, [r3, #0]
 800759e:	6813      	ldr	r3, [r2, #0]
 80075a0:	062e      	lsls	r6, r5, #24
 80075a2:	d501      	bpl.n	80075a8 <_printf_i+0x198>
 80075a4:	6019      	str	r1, [r3, #0]
 80075a6:	e002      	b.n	80075ae <_printf_i+0x19e>
 80075a8:	066d      	lsls	r5, r5, #25
 80075aa:	d5fb      	bpl.n	80075a4 <_printf_i+0x194>
 80075ac:	8019      	strh	r1, [r3, #0]
 80075ae:	2300      	movs	r3, #0
 80075b0:	9d03      	ldr	r5, [sp, #12]
 80075b2:	6123      	str	r3, [r4, #16]
 80075b4:	e7bf      	b.n	8007536 <_printf_i+0x126>
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	1d11      	adds	r1, r2, #4
 80075ba:	6019      	str	r1, [r3, #0]
 80075bc:	6815      	ldr	r5, [r2, #0]
 80075be:	2100      	movs	r1, #0
 80075c0:	0028      	movs	r0, r5
 80075c2:	6862      	ldr	r2, [r4, #4]
 80075c4:	f000 f896 	bl	80076f4 <memchr>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d001      	beq.n	80075d0 <_printf_i+0x1c0>
 80075cc:	1b40      	subs	r0, r0, r5
 80075ce:	6060      	str	r0, [r4, #4]
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	6123      	str	r3, [r4, #16]
 80075d4:	2300      	movs	r3, #0
 80075d6:	9a03      	ldr	r2, [sp, #12]
 80075d8:	7013      	strb	r3, [r2, #0]
 80075da:	e7ac      	b.n	8007536 <_printf_i+0x126>
 80075dc:	002a      	movs	r2, r5
 80075de:	6923      	ldr	r3, [r4, #16]
 80075e0:	9906      	ldr	r1, [sp, #24]
 80075e2:	9805      	ldr	r0, [sp, #20]
 80075e4:	9d07      	ldr	r5, [sp, #28]
 80075e6:	47a8      	blx	r5
 80075e8:	3001      	adds	r0, #1
 80075ea:	d0ae      	beq.n	800754a <_printf_i+0x13a>
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	079b      	lsls	r3, r3, #30
 80075f0:	d415      	bmi.n	800761e <_printf_i+0x20e>
 80075f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f4:	68e0      	ldr	r0, [r4, #12]
 80075f6:	4298      	cmp	r0, r3
 80075f8:	daa9      	bge.n	800754e <_printf_i+0x13e>
 80075fa:	0018      	movs	r0, r3
 80075fc:	e7a7      	b.n	800754e <_printf_i+0x13e>
 80075fe:	0022      	movs	r2, r4
 8007600:	2301      	movs	r3, #1
 8007602:	9906      	ldr	r1, [sp, #24]
 8007604:	9805      	ldr	r0, [sp, #20]
 8007606:	9e07      	ldr	r6, [sp, #28]
 8007608:	3219      	adds	r2, #25
 800760a:	47b0      	blx	r6
 800760c:	3001      	adds	r0, #1
 800760e:	d09c      	beq.n	800754a <_printf_i+0x13a>
 8007610:	3501      	adds	r5, #1
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007616:	1a9b      	subs	r3, r3, r2
 8007618:	42ab      	cmp	r3, r5
 800761a:	dcf0      	bgt.n	80075fe <_printf_i+0x1ee>
 800761c:	e7e9      	b.n	80075f2 <_printf_i+0x1e2>
 800761e:	2500      	movs	r5, #0
 8007620:	e7f7      	b.n	8007612 <_printf_i+0x202>
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	08007add 	.word	0x08007add
 8007628:	08007aee 	.word	0x08007aee

0800762c <__malloc_lock>:
 800762c:	b510      	push	{r4, lr}
 800762e:	4802      	ldr	r0, [pc, #8]	@ (8007638 <__malloc_lock+0xc>)
 8007630:	f7ff fc72 	bl	8006f18 <__retarget_lock_acquire_recursive>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	2000040c 	.word	0x2000040c

0800763c <__malloc_unlock>:
 800763c:	b510      	push	{r4, lr}
 800763e:	4802      	ldr	r0, [pc, #8]	@ (8007648 <__malloc_unlock+0xc>)
 8007640:	f7ff fc6b 	bl	8006f1a <__retarget_lock_release_recursive>
 8007644:	bd10      	pop	{r4, pc}
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	2000040c 	.word	0x2000040c

0800764c <_realloc_r>:
 800764c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800764e:	0006      	movs	r6, r0
 8007650:	000c      	movs	r4, r1
 8007652:	0015      	movs	r5, r2
 8007654:	2900      	cmp	r1, #0
 8007656:	d105      	bne.n	8007664 <_realloc_r+0x18>
 8007658:	0011      	movs	r1, r2
 800765a:	f7ff fde9 	bl	8007230 <_malloc_r>
 800765e:	0004      	movs	r4, r0
 8007660:	0020      	movs	r0, r4
 8007662:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007664:	2a00      	cmp	r2, #0
 8007666:	d103      	bne.n	8007670 <_realloc_r+0x24>
 8007668:	f000 f850 	bl	800770c <_free_r>
 800766c:	2400      	movs	r4, #0
 800766e:	e7f7      	b.n	8007660 <_realloc_r+0x14>
 8007670:	f000 f896 	bl	80077a0 <_malloc_usable_size_r>
 8007674:	0007      	movs	r7, r0
 8007676:	4285      	cmp	r5, r0
 8007678:	d802      	bhi.n	8007680 <_realloc_r+0x34>
 800767a:	0843      	lsrs	r3, r0, #1
 800767c:	42ab      	cmp	r3, r5
 800767e:	d3ef      	bcc.n	8007660 <_realloc_r+0x14>
 8007680:	0029      	movs	r1, r5
 8007682:	0030      	movs	r0, r6
 8007684:	f7ff fdd4 	bl	8007230 <_malloc_r>
 8007688:	9001      	str	r0, [sp, #4]
 800768a:	2800      	cmp	r0, #0
 800768c:	d0ee      	beq.n	800766c <_realloc_r+0x20>
 800768e:	002a      	movs	r2, r5
 8007690:	42bd      	cmp	r5, r7
 8007692:	d900      	bls.n	8007696 <_realloc_r+0x4a>
 8007694:	003a      	movs	r2, r7
 8007696:	0021      	movs	r1, r4
 8007698:	9801      	ldr	r0, [sp, #4]
 800769a:	f7ff fc3f 	bl	8006f1c <memcpy>
 800769e:	0021      	movs	r1, r4
 80076a0:	0030      	movs	r0, r6
 80076a2:	f000 f833 	bl	800770c <_free_r>
 80076a6:	9c01      	ldr	r4, [sp, #4]
 80076a8:	e7da      	b.n	8007660 <_realloc_r+0x14>

080076aa <memmove>:
 80076aa:	b510      	push	{r4, lr}
 80076ac:	4288      	cmp	r0, r1
 80076ae:	d806      	bhi.n	80076be <memmove+0x14>
 80076b0:	2300      	movs	r3, #0
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d008      	beq.n	80076c8 <memmove+0x1e>
 80076b6:	5ccc      	ldrb	r4, [r1, r3]
 80076b8:	54c4      	strb	r4, [r0, r3]
 80076ba:	3301      	adds	r3, #1
 80076bc:	e7f9      	b.n	80076b2 <memmove+0x8>
 80076be:	188b      	adds	r3, r1, r2
 80076c0:	4298      	cmp	r0, r3
 80076c2:	d2f5      	bcs.n	80076b0 <memmove+0x6>
 80076c4:	3a01      	subs	r2, #1
 80076c6:	d200      	bcs.n	80076ca <memmove+0x20>
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	5c8b      	ldrb	r3, [r1, r2]
 80076cc:	5483      	strb	r3, [r0, r2]
 80076ce:	e7f9      	b.n	80076c4 <memmove+0x1a>

080076d0 <_sbrk_r>:
 80076d0:	2300      	movs	r3, #0
 80076d2:	b570      	push	{r4, r5, r6, lr}
 80076d4:	4d06      	ldr	r5, [pc, #24]	@ (80076f0 <_sbrk_r+0x20>)
 80076d6:	0004      	movs	r4, r0
 80076d8:	0008      	movs	r0, r1
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	f7f9 f942 	bl	8000964 <_sbrk>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d103      	bne.n	80076ec <_sbrk_r+0x1c>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d000      	beq.n	80076ec <_sbrk_r+0x1c>
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	20000418 	.word	0x20000418

080076f4 <memchr>:
 80076f4:	b2c9      	uxtb	r1, r1
 80076f6:	1882      	adds	r2, r0, r2
 80076f8:	4290      	cmp	r0, r2
 80076fa:	d101      	bne.n	8007700 <memchr+0xc>
 80076fc:	2000      	movs	r0, #0
 80076fe:	4770      	bx	lr
 8007700:	7803      	ldrb	r3, [r0, #0]
 8007702:	428b      	cmp	r3, r1
 8007704:	d0fb      	beq.n	80076fe <memchr+0xa>
 8007706:	3001      	adds	r0, #1
 8007708:	e7f6      	b.n	80076f8 <memchr+0x4>
	...

0800770c <_free_r>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	0005      	movs	r5, r0
 8007710:	1e0c      	subs	r4, r1, #0
 8007712:	d010      	beq.n	8007736 <_free_r+0x2a>
 8007714:	3c04      	subs	r4, #4
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	da00      	bge.n	800771e <_free_r+0x12>
 800771c:	18e4      	adds	r4, r4, r3
 800771e:	0028      	movs	r0, r5
 8007720:	f7ff ff84 	bl	800762c <__malloc_lock>
 8007724:	4a1d      	ldr	r2, [pc, #116]	@ (800779c <_free_r+0x90>)
 8007726:	6813      	ldr	r3, [r2, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d105      	bne.n	8007738 <_free_r+0x2c>
 800772c:	6063      	str	r3, [r4, #4]
 800772e:	6014      	str	r4, [r2, #0]
 8007730:	0028      	movs	r0, r5
 8007732:	f7ff ff83 	bl	800763c <__malloc_unlock>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	42a3      	cmp	r3, r4
 800773a:	d908      	bls.n	800774e <_free_r+0x42>
 800773c:	6820      	ldr	r0, [r4, #0]
 800773e:	1821      	adds	r1, r4, r0
 8007740:	428b      	cmp	r3, r1
 8007742:	d1f3      	bne.n	800772c <_free_r+0x20>
 8007744:	6819      	ldr	r1, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	1809      	adds	r1, r1, r0
 800774a:	6021      	str	r1, [r4, #0]
 800774c:	e7ee      	b.n	800772c <_free_r+0x20>
 800774e:	001a      	movs	r2, r3
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <_free_r+0x4e>
 8007756:	42a3      	cmp	r3, r4
 8007758:	d9f9      	bls.n	800774e <_free_r+0x42>
 800775a:	6811      	ldr	r1, [r2, #0]
 800775c:	1850      	adds	r0, r2, r1
 800775e:	42a0      	cmp	r0, r4
 8007760:	d10b      	bne.n	800777a <_free_r+0x6e>
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	1809      	adds	r1, r1, r0
 8007766:	1850      	adds	r0, r2, r1
 8007768:	6011      	str	r1, [r2, #0]
 800776a:	4283      	cmp	r3, r0
 800776c:	d1e0      	bne.n	8007730 <_free_r+0x24>
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	1841      	adds	r1, r0, r1
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	6053      	str	r3, [r2, #4]
 8007778:	e7da      	b.n	8007730 <_free_r+0x24>
 800777a:	42a0      	cmp	r0, r4
 800777c:	d902      	bls.n	8007784 <_free_r+0x78>
 800777e:	230c      	movs	r3, #12
 8007780:	602b      	str	r3, [r5, #0]
 8007782:	e7d5      	b.n	8007730 <_free_r+0x24>
 8007784:	6820      	ldr	r0, [r4, #0]
 8007786:	1821      	adds	r1, r4, r0
 8007788:	428b      	cmp	r3, r1
 800778a:	d103      	bne.n	8007794 <_free_r+0x88>
 800778c:	6819      	ldr	r1, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	1809      	adds	r1, r1, r0
 8007792:	6021      	str	r1, [r4, #0]
 8007794:	6063      	str	r3, [r4, #4]
 8007796:	6054      	str	r4, [r2, #4]
 8007798:	e7ca      	b.n	8007730 <_free_r+0x24>
 800779a:	46c0      	nop			@ (mov r8, r8)
 800779c:	20000414 	.word	0x20000414

080077a0 <_malloc_usable_size_r>:
 80077a0:	1f0b      	subs	r3, r1, #4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	1f18      	subs	r0, r3, #4
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da01      	bge.n	80077ae <_malloc_usable_size_r+0xe>
 80077aa:	580b      	ldr	r3, [r1, r0]
 80077ac:	18c0      	adds	r0, r0, r3
 80077ae:	4770      	bx	lr

080077b0 <_init>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	46c0      	nop			@ (mov r8, r8)
 80077b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077b6:	bc08      	pop	{r3}
 80077b8:	469e      	mov	lr, r3
 80077ba:	4770      	bx	lr

080077bc <_fini>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	46c0      	nop			@ (mov r8, r8)
 80077c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c2:	bc08      	pop	{r3}
 80077c4:	469e      	mov	lr, r3
 80077c6:	4770      	bx	lr
