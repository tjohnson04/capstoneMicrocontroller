
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b100  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800b1c0  0800b1c0  0000c1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b494  0800b494  0000d138  2**0
                  CONTENTS
  4 .ARM          00000000  0800b494  0800b494  0000d138  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b494  0800b494  0000d138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b494  0800b494  0000c494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b498  0800b498  0000c498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  0800b49c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c84  20000138  0800b5d4  0000d138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001dbc  0800b5d4  0000ddbc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002581b  00000000  00000000  0000d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005839  00000000  00000000  0003297b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002090  00000000  00000000  000381b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001954  00000000  00000000  0003a248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df51  00000000  00000000  0003bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c161  00000000  00000000  00059aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa17e  00000000  00000000  00085c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0012fdcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a50  00000000  00000000  0012fe54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001378a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000138 	.word	0x20000138
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b1a8 	.word	0x0800b1a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000013c 	.word	0x2000013c
 8000104:	0800b1a8 	.word	0x0800b1a8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	230c      	movs	r3, #12
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f00a fa48 	bl	800a8ac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800041c:	4b2d      	ldr	r3, [pc, #180]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800041e:	4a2e      	ldr	r2, [pc, #184]	@ (80004d8 <MX_ADC1_Init+0xd0>)
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000422:	4b2c      	ldr	r3, [pc, #176]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	05d2      	lsls	r2, r2, #23
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042a:	4b2a      	ldr	r3, [pc, #168]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000436:	4b27      	ldr	r3, [pc, #156]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043c:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800043e:	2204      	movs	r2, #4
 8000440:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000444:	2200      	movs	r2, #0
 8000446:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000448:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800044a:	2200      	movs	r2, #0
 800044c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800044e:	4b21      	ldr	r3, [pc, #132]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000454:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000456:	2201      	movs	r2, #1
 8000458:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b1e      	ldr	r3, [pc, #120]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800045c:	2220      	movs	r2, #32
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000462:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000464:	2200      	movs	r2, #0
 8000466:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000468:	4b1a      	ldr	r3, [pc, #104]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800046a:	2200      	movs	r2, #0
 800046c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800046e:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000470:	222c      	movs	r2, #44	@ 0x2c
 8000472:	2100      	movs	r1, #0
 8000474:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000476:	4b17      	ldr	r3, [pc, #92]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000482:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000484:	2200      	movs	r2, #0
 8000486:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800048a:	223c      	movs	r2, #60	@ 0x3c
 800048c:	2100      	movs	r1, #0
 800048e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000490:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000492:	2200      	movs	r2, #0
 8000494:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 f991 	bl	80017c0 <HAL_ADC_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004a2:	f000 fc71 	bl	8000d88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2201      	movs	r2, #1
 80004aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b8:	1d3a      	adds	r2, r7, #4
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fb26 	bl	8001b10 <HAL_ADC_ConfigChannel>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004c8:	f000 fc5e 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b004      	add	sp, #16
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000154 	.word	0x20000154
 80004d8:	40012400 	.word	0x40012400

080004dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b08b      	sub	sp, #44	@ 0x2c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	2414      	movs	r4, #20
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2314      	movs	r3, #20
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f00a f9dc 	bl	800a8ac <memset>
  if(adcHandle->Instance==ADC1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a18      	ldr	r2, [pc, #96]	@ (800055c <HAL_ADC_MspInit+0x80>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d129      	bne.n	8000552 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004fe:	4b18      	ldr	r3, [pc, #96]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000504:	2180      	movs	r1, #128	@ 0x80
 8000506:	0349      	lsls	r1, r1, #13
 8000508:	430a      	orrs	r2, r1
 800050a:	641a      	str	r2, [r3, #64]	@ 0x40
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 800050e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	035b      	lsls	r3, r3, #13
 8000514:	4013      	ands	r3, r2
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 800051c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2203      	movs	r2, #3
 800053c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	193a      	adds	r2, r7, r4
 8000546:	23a0      	movs	r3, #160	@ 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fd65 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b00b      	add	sp, #44	@ 0x2c
 8000558:	bd90      	pop	{r4, r7, pc}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	40012400 	.word	0x40012400
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b08b      	sub	sp, #44	@ 0x2c
 8000568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	2414      	movs	r4, #20
 800056c:	193b      	adds	r3, r7, r4
 800056e:	0018      	movs	r0, r3
 8000570:	2314      	movs	r3, #20
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f00a f999 	bl	800a8ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b5f      	ldr	r3, [pc, #380]	@ (80006f8 <MX_GPIO_Init+0x194>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800057e:	4b5e      	ldr	r3, [pc, #376]	@ (80006f8 <MX_GPIO_Init+0x194>)
 8000580:	2104      	movs	r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	@ 0x34
 8000586:	4b5c      	ldr	r3, [pc, #368]	@ (80006f8 <MX_GPIO_Init+0x194>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000592:	4b59      	ldr	r3, [pc, #356]	@ (80006f8 <MX_GPIO_Init+0x194>)
 8000594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000596:	4b58      	ldr	r3, [pc, #352]	@ (80006f8 <MX_GPIO_Init+0x194>)
 8000598:	2120      	movs	r1, #32
 800059a:	430a      	orrs	r2, r1
 800059c:	635a      	str	r2, [r3, #52]	@ 0x34
 800059e:	4b56      	ldr	r3, [pc, #344]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a2:	2220      	movs	r2, #32
 80005a4:	4013      	ands	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b53      	ldr	r3, [pc, #332]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ae:	4b52      	ldr	r3, [pc, #328]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	430a      	orrs	r2, r1
 80005b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005b6:	4b50      	ldr	r3, [pc, #320]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ba:	2201      	movs	r2, #1
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005c6:	4b4c      	ldr	r3, [pc, #304]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005c8:	2102      	movs	r1, #2
 80005ca:	430a      	orrs	r2, r1
 80005cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ce:	4b4a      	ldr	r3, [pc, #296]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005d2:	2202      	movs	r2, #2
 80005d4:	4013      	ands	r3, r2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b47      	ldr	r3, [pc, #284]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005de:	4b46      	ldr	r3, [pc, #280]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005e0:	2108      	movs	r1, #8
 80005e2:	430a      	orrs	r2, r1
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005e6:	4b44      	ldr	r3, [pc, #272]	@ (80006f8 <MX_GPIO_Init+0x194>)
 80005e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ea:	2208      	movs	r2, #8
 80005ec:	4013      	ands	r3, r2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_NS_Pin|LED_Row13_Pin|LED_Row15_Pin|LED_Row4_Pin
 80005f2:	238f      	movs	r3, #143	@ 0x8f
 80005f4:	019b      	lsls	r3, r3, #6
 80005f6:	4841      	ldr	r0, [pc, #260]	@ (80006fc <MX_GPIO_Init+0x198>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	0019      	movs	r1, r3
 80005fc:	f001 fe72 	bl	80022e4 <HAL_GPIO_WritePin>
                          |LED_Row2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Column8_Pin|LED_Column10_Pin|LED_Column12_Pin|LED_Column9_Pin
 8000600:	493f      	ldr	r1, [pc, #252]	@ (8000700 <MX_GPIO_Init+0x19c>)
 8000602:	23a0      	movs	r3, #160	@ 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fe6b 	bl	80022e4 <HAL_GPIO_WritePin>
                          |LED_Row9_Pin|LED_Row11_Pin|LED_Row10_Pin|LED_Row8_Pin
                          |LED_Row6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Column11_Pin|LED_Column13_Pin|LED_Column14_Pin|LED_Column15_Pin
 800060e:	493d      	ldr	r1, [pc, #244]	@ (8000704 <MX_GPIO_Init+0x1a0>)
 8000610:	4b3d      	ldr	r3, [pc, #244]	@ (8000708 <MX_GPIO_Init+0x1a4>)
 8000612:	2200      	movs	r2, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f001 fe65 	bl	80022e4 <HAL_GPIO_WritePin>
                          |LED_Row1_Pin|LED_Row3_Pin|LED_Row5_Pin|LED_Row7_Pin
                          |LED_Column5_Pin|LED_Column7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Row14_Pin|LED_Row12_Pin|LED_Row0_Pin|LED_Column0_Pin
 800061a:	493c      	ldr	r1, [pc, #240]	@ (800070c <MX_GPIO_Init+0x1a8>)
 800061c:	4b3c      	ldr	r3, [pc, #240]	@ (8000710 <MX_GPIO_Init+0x1ac>)
 800061e:	2200      	movs	r2, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fe5f 	bl	80022e4 <HAL_GPIO_WritePin>
                          |LED_Column1_Pin|LED_Column2_Pin|LED_Column4_Pin|LED_Column6_Pin
                          |LED_Column3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : MOTOR_NS_Pin LED_Row13_Pin LED_Row15_Pin LED_Row4_Pin
                           LED_Row2_Pin */
  GPIO_InitStruct.Pin = MOTOR_NS_Pin|LED_Row13_Pin|LED_Row15_Pin|LED_Row4_Pin
 8000626:	193b      	adds	r3, r7, r4
 8000628:	228f      	movs	r2, #143	@ 0x8f
 800062a:	0192      	lsls	r2, r2, #6
 800062c:	601a      	str	r2, [r3, #0]
                          |LED_Row2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000640:	193b      	adds	r3, r7, r4
 8000642:	4a2e      	ldr	r2, [pc, #184]	@ (80006fc <MX_GPIO_Init+0x198>)
 8000644:	0019      	movs	r1, r3
 8000646:	0010      	movs	r0, r2
 8000648:	f001 fce8 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Column8_Pin LED_Column10_Pin LED_Column12_Pin LED_Column9_Pin
                           LED_Row9_Pin LED_Row11_Pin LED_Row10_Pin LED_Row8_Pin
                           LED_Row6_Pin */
  GPIO_InitStruct.Pin = LED_Column8_Pin|LED_Column10_Pin|LED_Column12_Pin|LED_Column9_Pin
 800064c:	193b      	adds	r3, r7, r4
 800064e:	4a2c      	ldr	r2, [pc, #176]	@ (8000700 <MX_GPIO_Init+0x19c>)
 8000650:	601a      	str	r2, [r3, #0]
                          |LED_Row9_Pin|LED_Row11_Pin|LED_Row10_Pin|LED_Row8_Pin
                          |LED_Row6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2201      	movs	r2, #1
 8000656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	193a      	adds	r2, r7, r4
 8000666:	23a0      	movs	r3, #160	@ 0xa0
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fcd5 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Column11_Pin LED_Column13_Pin LED_Column14_Pin LED_Column15_Pin
                           LED_Row1_Pin LED_Row3_Pin LED_Row5_Pin LED_Row7_Pin
                           LED_Column5_Pin LED_Column7_Pin */
  GPIO_InitStruct.Pin = LED_Column11_Pin|LED_Column13_Pin|LED_Column14_Pin|LED_Column15_Pin
 8000672:	193b      	adds	r3, r7, r4
 8000674:	4a23      	ldr	r2, [pc, #140]	@ (8000704 <MX_GPIO_Init+0x1a0>)
 8000676:	601a      	str	r2, [r3, #0]
                          |LED_Row1_Pin|LED_Row3_Pin|LED_Row5_Pin|LED_Row7_Pin
                          |LED_Column5_Pin|LED_Column7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2201      	movs	r2, #1
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	193b      	adds	r3, r7, r4
 800068c:	4a1e      	ldr	r2, [pc, #120]	@ (8000708 <MX_GPIO_Init+0x1a4>)
 800068e:	0019      	movs	r1, r3
 8000690:	0010      	movs	r0, r2
 8000692:	f001 fcc3 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Row14_Pin LED_Row12_Pin LED_Row0_Pin LED_Column0_Pin
                           LED_Column1_Pin LED_Column2_Pin LED_Column4_Pin LED_Column6_Pin
                           LED_Column3_Pin */
  GPIO_InitStruct.Pin = LED_Row14_Pin|LED_Row12_Pin|LED_Row0_Pin|LED_Column0_Pin
 8000696:	193b      	adds	r3, r7, r4
 8000698:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <MX_GPIO_Init+0x1a8>)
 800069a:	601a      	str	r2, [r3, #0]
                          |LED_Column1_Pin|LED_Column2_Pin|LED_Column4_Pin|LED_Column6_Pin
                          |LED_Column3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2201      	movs	r2, #1
 80006a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a17      	ldr	r2, [pc, #92]	@ (8000710 <MX_GPIO_Init+0x1ac>)
 80006b2:	0019      	movs	r1, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f001 fcb1 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2280      	movs	r2, #128	@ 0x80
 80006c0:	0052      	lsls	r2, r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2284      	movs	r2, #132	@ 0x84
 80006c8:	0392      	lsls	r2, r2, #14
 80006ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2201      	movs	r2, #1
 80006d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000708 <MX_GPIO_Init+0x1a4>)
 80006d6:	0019      	movs	r1, r3
 80006d8:	0010      	movs	r0, r2
 80006da:	f001 fc9f 	bl	800201c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2103      	movs	r1, #3
 80006e2:	2007      	movs	r0, #7
 80006e4:	f001 fc74 	bl	8001fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80006e8:	2007      	movs	r0, #7
 80006ea:	f001 fc86 	bl	8001ffa <HAL_NVIC_EnableIRQ>

}
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b00b      	add	sp, #44	@ 0x2c
 80006f4:	bd90      	pop	{r4, r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	40021000 	.word	0x40021000
 80006fc:	50000800 	.word	0x50000800
 8000700:	00008ff0 	.word	0x00008ff0
 8000704:	0000dc37 	.word	0x0000dc37
 8000708:	50000400 	.word	0x50000400
 800070c:	0000037f 	.word	0x0000037f
 8000710:	50000c00 	.word	0x50000c00

08000714 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_I2C1_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	@ (800078c <MX_I2C1_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000720:	4a1b      	ldr	r2, [pc, #108]	@ (8000790 <MX_I2C1_Init+0x7c>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_I2C1_Init+0x74>)
 800072c:	2201      	movs	r2, #1
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000750:	0018      	movs	r0, r3
 8000752:	f001 fe19 	bl	8002388 <HAL_I2C_Init>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800075a:	f000 fb15 	bl	8000d88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075e:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000760:	2100      	movs	r1, #0
 8000762:	0018      	movs	r0, r3
 8000764:	f001 feb6 	bl	80024d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800076c:	f000 fb0c 	bl	8000d88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000770:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <MX_I2C1_Init+0x74>)
 8000772:	2100      	movs	r1, #0
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fef9 	bl	800256c <HAL_I2CEx_ConfigDigitalFilter>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 fb03 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000898 	.word	0x20000898
 800078c:	40005400 	.word	0x40005400
 8000790:	00503d58 	.word	0x00503d58

08000794 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b091      	sub	sp, #68	@ 0x44
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	232c      	movs	r3, #44	@ 0x2c
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	0018      	movs	r0, r3
 80007a2:	2314      	movs	r3, #20
 80007a4:	001a      	movs	r2, r3
 80007a6:	2100      	movs	r1, #0
 80007a8:	f00a f880 	bl	800a8ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ac:	2410      	movs	r4, #16
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	0018      	movs	r0, r3
 80007b2:	231c      	movs	r3, #28
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f00a f878 	bl	800a8ac <memset>
  if(i2cHandle->Instance==I2C1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a22      	ldr	r2, [pc, #136]	@ (800084c <HAL_I2C_MspInit+0xb8>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d13d      	bne.n	8000842 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2220      	movs	r2, #32
 80007ca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d2:	193b      	adds	r3, r7, r4
 80007d4:	0018      	movs	r0, r3
 80007d6:	f002 fc45 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80007de:	f000 fad3 	bl	8000d88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000850 <HAL_I2C_MspInit+0xbc>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <HAL_I2C_MspInit+0xbc>)
 80007e8:	2102      	movs	r1, #2
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ee:	4b18      	ldr	r3, [pc, #96]	@ (8000850 <HAL_I2C_MspInit+0xbc>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007f2:	2202      	movs	r2, #2
 80007f4:	4013      	ands	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007fa:	212c      	movs	r1, #44	@ 0x2c
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	22c0      	movs	r2, #192	@ 0xc0
 8000800:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2212      	movs	r2, #18
 8000806:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2206      	movs	r2, #6
 8000818:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	187b      	adds	r3, r7, r1
 800081c:	4a0d      	ldr	r2, [pc, #52]	@ (8000854 <HAL_I2C_MspInit+0xc0>)
 800081e:	0019      	movs	r1, r3
 8000820:	0010      	movs	r0, r2
 8000822:	f001 fbfb 	bl	800201c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <HAL_I2C_MspInit+0xbc>)
 8000828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800082a:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <HAL_I2C_MspInit+0xbc>)
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0389      	lsls	r1, r1, #14
 8000830:	430a      	orrs	r2, r1
 8000832:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <HAL_I2C_MspInit+0xbc>)
 8000836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	039b      	lsls	r3, r3, #14
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b011      	add	sp, #68	@ 0x44
 8000848:	bd90      	pop	{r4, r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	40005400 	.word	0x40005400
 8000850:	40021000 	.word	0x40021000
 8000854:	50000400 	.word	0x50000400

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 fe51 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f889 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000866:	f7ff fe7d 	bl	8000564 <MX_GPIO_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800086a:	f004 ff21 	bl	80056b0 <MX_FATFS_Init>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <main+0x1e>
    Error_Handler();
 8000872:	f000 fa89 	bl	8000d88 <Error_Handler>
  }
  MX_TIM16_Init();
 8000876:	f000 fc9f 	bl	80011b8 <MX_TIM16_Init>
  MX_I2C1_Init();
 800087a:	f7ff ff4b 	bl	8000714 <MX_I2C1_Init>
  MX_ADC1_Init();
 800087e:	f7ff fdc3 	bl	8000408 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000882:	f000 fa87 	bl	8000d94 <MX_SPI2_Init>
  MX_TIM14_Init();
 8000886:	f000 fc47 	bl	8001118 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 800088a:	f000 fd39 	bl	8001300 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	// LED testing code
#ifdef NO_SCHEDULER
	// nmos = columns | pmos = rows
	for (uint8_t j = 0; j < 16; j++) {
 800088e:	1dfb      	adds	r3, r7, #7
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
 8000894:	e012      	b.n	80008bc <main+0x64>
		HAL_GPIO_WritePin(led_column_ports[j], led_column_pins[j], GPIO_PIN_SET);
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	4b32      	ldr	r3, [pc, #200]	@ (8000964 <main+0x10c>)
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	58d0      	ldr	r0, [r2, r3]
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	4b30      	ldr	r3, [pc, #192]	@ (8000968 <main+0x110>)
 80008a6:	0052      	lsls	r2, r2, #1
 80008a8:	5ad3      	ldrh	r3, [r2, r3]
 80008aa:	2201      	movs	r2, #1
 80008ac:	0019      	movs	r1, r3
 80008ae:	f001 fd19 	bl	80022e4 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 16; j++) {
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	1dfb      	adds	r3, r7, #7
 80008b8:	3201      	adds	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b0f      	cmp	r3, #15
 80008c2:	d9e8      	bls.n	8000896 <main+0x3e>
	}

	for (uint8_t i = 0; i < 16; i++) {
 80008c4:	1dbb      	adds	r3, r7, #6
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
 80008ca:	e012      	b.n	80008f2 <main+0x9a>
		HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_SET);
 80008cc:	1dbb      	adds	r3, r7, #6
 80008ce:	781a      	ldrb	r2, [r3, #0]
 80008d0:	4b26      	ldr	r3, [pc, #152]	@ (800096c <main+0x114>)
 80008d2:	0092      	lsls	r2, r2, #2
 80008d4:	58d0      	ldr	r0, [r2, r3]
 80008d6:	1dbb      	adds	r3, r7, #6
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <main+0x118>)
 80008dc:	0052      	lsls	r2, r2, #1
 80008de:	5ad3      	ldrh	r3, [r2, r3]
 80008e0:	2201      	movs	r2, #1
 80008e2:	0019      	movs	r1, r3
 80008e4:	f001 fcfe 	bl	80022e4 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 16; i++) {
 80008e8:	1dbb      	adds	r3, r7, #6
 80008ea:	781a      	ldrb	r2, [r3, #0]
 80008ec:	1dbb      	adds	r3, r7, #6
 80008ee:	3201      	adds	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	1dbb      	adds	r3, r7, #6
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d9e8      	bls.n	80008cc <main+0x74>
	}
	i = 0;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <main+0x11c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
	while (1) {
		HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_RESET);
 8000900:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <main+0x11c>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <main+0x114>)
 8000908:	0092      	lsls	r2, r2, #2
 800090a:	58d0      	ldr	r0, [r2, r3]
 800090c:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <main+0x11c>)
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	001a      	movs	r2, r3
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <main+0x118>)
 8000914:	0052      	lsls	r2, r2, #1
 8000916:	5ad3      	ldrh	r3, [r2, r3]
 8000918:	2200      	movs	r2, #0
 800091a:	0019      	movs	r1, r3
 800091c:	f001 fce2 	bl	80022e4 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8000920:	2005      	movs	r0, #5
 8000922:	f000 fe2b 	bl	800157c <HAL_Delay>
		HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_SET);
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <main+0x11c>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	001a      	movs	r2, r3
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <main+0x114>)
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	58d0      	ldr	r0, [r2, r3]
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <main+0x11c>)
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	001a      	movs	r2, r3
 8000938:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <main+0x118>)
 800093a:	0052      	lsls	r2, r2, #1
 800093c:	5ad3      	ldrh	r3, [r2, r3]
 800093e:	2201      	movs	r2, #1
 8000940:	0019      	movs	r1, r3
 8000942:	f001 fccf 	bl	80022e4 <HAL_GPIO_WritePin>
		i++;
 8000946:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <main+0x11c>)
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	3301      	adds	r3, #1
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <main+0x11c>)
 8000950:	801a      	strh	r2, [r3, #0]
		if (i > 15) i = 0;
 8000952:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <main+0x11c>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2b0f      	cmp	r3, #15
 8000958:	d9d2      	bls.n	8000900 <main+0xa8>
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <main+0x11c>)
 800095c:	2200      	movs	r2, #0
 800095e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_RESET);
 8000960:	e7ce      	b.n	8000900 <main+0xa8>
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	20000000 	.word	0x20000000
 8000968:	20000040 	.word	0x20000040
 800096c:	20000060 	.word	0x20000060
 8000970:	200000a0 	.word	0x200000a0
 8000974:	20000930 	.word	0x20000930

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b093      	sub	sp, #76	@ 0x4c
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	2414      	movs	r4, #20
 8000980:	193b      	adds	r3, r7, r4
 8000982:	0018      	movs	r0, r3
 8000984:	2334      	movs	r3, #52	@ 0x34
 8000986:	001a      	movs	r2, r3
 8000988:	2100      	movs	r1, #0
 800098a:	f009 ff8f 	bl	800a8ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	0018      	movs	r0, r3
 8000992:	2310      	movs	r3, #16
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f009 ff88 	bl	800a8ac <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fe2f 	bl	8002604 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2202      	movs	r2, #2
 80009aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2280      	movs	r2, #128	@ 0x80
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2240      	movs	r2, #64	@ 0x40
 80009be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	f001 fe67 	bl	800269c <HAL_RCC_OscConfig>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009d2:	f000 f9d9 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2100      	movs	r1, #0
 80009f2:	0018      	movs	r0, r3
 80009f4:	f002 f962 	bl	8002cbc <HAL_RCC_ClockConfig>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80009fc:	f000 f9c4 	bl	8000d88 <Error_Handler>
  }
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b013      	add	sp, #76	@ 0x4c
 8000a06:	bd90      	pop	{r4, r7, pc}

08000a08 <ReadSD>:

/* USER CODE BEGIN 4 */
void ReadSD() {
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	4cac      	ldr	r4, [pc, #688]	@ (8000cbc <ReadSD+0x2b4>)
 8000a0c:	44a5      	add	sp, r4
 8000a0e:	af00      	add	r7, sp, #0
	HAL_Delay(1000); // short delay to let the SD card settle
 8000a10:	23fa      	movs	r3, #250	@ 0xfa
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fdb1 	bl	800157c <HAL_Delay>
	FATFS FatFs; 	// Fatfs handle
	FIL fil; 		// File handle
	FRESULT fres; 	// Result after operations

	// open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000a1a:	4da9      	ldr	r5, [pc, #676]	@ (8000cc0 <ReadSD+0x2b8>)
 8000a1c:	197c      	adds	r4, r7, r5
 8000a1e:	49a9      	ldr	r1, [pc, #676]	@ (8000cc4 <ReadSD+0x2bc>)
 8000a20:	23b3      	movs	r3, #179	@ 0xb3
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	2201      	movs	r2, #1
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f007 fac1 	bl	8007fb0 <f_mount>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8000a32:	197b      	adds	r3, r7, r5
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00c      	beq.n	8000a54 <ReadSD+0x4c>
		sprintf((char *) OutputBuffer, "f_mount error (%i)\r\n", fres);
 8000a3a:	197b      	adds	r3, r7, r5
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	49a2      	ldr	r1, [pc, #648]	@ (8000cc8 <ReadSD+0x2c0>)
 8000a40:	4ba2      	ldr	r3, [pc, #648]	@ (8000ccc <ReadSD+0x2c4>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f009 ff12 	bl	800a86c <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000a48:	4ba0      	ldr	r3, [pc, #640]	@ (8000ccc <ReadSD+0x2c4>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fd08 	bl	8001460 <PrintOutputBuffer>
		while(1);
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	e7fd      	b.n	8000a50 <ReadSD+0x48>
	// gather statistics from the SD card
	DWORD free_clusters, free_sectors, total_sectors;

	FATFS* getFreeFs;

	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000a54:	4d9a      	ldr	r5, [pc, #616]	@ (8000cc0 <ReadSD+0x2b8>)
 8000a56:	197c      	adds	r4, r7, r5
 8000a58:	2394      	movs	r3, #148	@ 0x94
 8000a5a:	18fa      	adds	r2, r7, r3
 8000a5c:	2398      	movs	r3, #152	@ 0x98
 8000a5e:	18f9      	adds	r1, r7, r3
 8000a60:	4b98      	ldr	r3, [pc, #608]	@ (8000cc4 <ReadSD+0x2bc>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f007 ff45 	bl	80088f2 <f_getfree>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8000a6c:	197b      	adds	r3, r7, r5
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00c      	beq.n	8000a8e <ReadSD+0x86>
		sprintf((char *) OutputBuffer, "f_getfree error (%i)\r\n", fres);
 8000a74:	197b      	adds	r3, r7, r5
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	4995      	ldr	r1, [pc, #596]	@ (8000cd0 <ReadSD+0x2c8>)
 8000a7a:	4b94      	ldr	r3, [pc, #592]	@ (8000ccc <ReadSD+0x2c4>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f009 fef5 	bl	800a86c <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000a82:	4b92      	ldr	r3, [pc, #584]	@ (8000ccc <ReadSD+0x2c4>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f000 fceb 	bl	8001460 <PrintOutputBuffer>
		while(1);
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	e7fd      	b.n	8000a8a <ReadSD+0x82>
	}

	// formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000a8e:	2194      	movs	r1, #148	@ 0x94
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	3b02      	subs	r3, #2
 8000a98:	187a      	adds	r2, r7, r1
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	8952      	ldrh	r2, [r2, #10]
 8000a9e:	4353      	muls	r3, r2
 8000aa0:	488c      	ldr	r0, [pc, #560]	@ (8000cd4 <ReadSD+0x2cc>)
 8000aa2:	183a      	adds	r2, r7, r0
 8000aa4:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	895b      	ldrh	r3, [r3, #10]
 8000aac:	001a      	movs	r2, r3
 8000aae:	2398      	movs	r3, #152	@ 0x98
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4353      	muls	r3, r2
 8000ab6:	24a1      	movs	r4, #161	@ 0xa1
 8000ab8:	00e4      	lsls	r4, r4, #3
 8000aba:	193a      	adds	r2, r7, r4
 8000abc:	6013      	str	r3, [r2, #0]

	sprintf((char *) OutputBuffer, "SD card stats:\r\n%10lu KiB total drive space.\r\n", total_sectors/2);
 8000abe:	183b      	adds	r3, r7, r0
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	085a      	lsrs	r2, r3, #1
 8000ac4:	4984      	ldr	r1, [pc, #528]	@ (8000cd8 <ReadSD+0x2d0>)
 8000ac6:	4b81      	ldr	r3, [pc, #516]	@ (8000ccc <ReadSD+0x2c4>)
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f009 fecf 	bl	800a86c <siprintf>
	PrintOutputBuffer(OutputBuffer);
 8000ace:	4b7f      	ldr	r3, [pc, #508]	@ (8000ccc <ReadSD+0x2c4>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fcc5 	bl	8001460 <PrintOutputBuffer>
	sprintf((char *) OutputBuffer, "%10lu KiB available.\r\n", free_sectors/2);
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	085a      	lsrs	r2, r3, #1
 8000adc:	497f      	ldr	r1, [pc, #508]	@ (8000cdc <ReadSD+0x2d4>)
 8000ade:	4b7b      	ldr	r3, [pc, #492]	@ (8000ccc <ReadSD+0x2c4>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f009 fec3 	bl	800a86c <siprintf>
	PrintOutputBuffer(OutputBuffer);
 8000ae6:	4b79      	ldr	r3, [pc, #484]	@ (8000ccc <ReadSD+0x2c4>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f000 fcb9 	bl	8001460 <PrintOutputBuffer>

	//Now let's try to open file "test.txt"
	fres = f_open(&fil, "test.txt", FA_READ);
 8000aee:	4d74      	ldr	r5, [pc, #464]	@ (8000cc0 <ReadSD+0x2b8>)
 8000af0:	197c      	adds	r4, r7, r5
 8000af2:	497b      	ldr	r1, [pc, #492]	@ (8000ce0 <ReadSD+0x2d8>)
 8000af4:	239c      	movs	r3, #156	@ 0x9c
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2201      	movs	r2, #1
 8000afa:	0018      	movs	r0, r3
 8000afc:	f007 fac0 	bl	8008080 <f_open>
 8000b00:	0003      	movs	r3, r0
 8000b02:	7023      	strb	r3, [r4, #0]
	if (fres != FR_OK) {
 8000b04:	197b      	adds	r3, r7, r5
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00c      	beq.n	8000b26 <ReadSD+0x11e>
		sprintf((char *) OutputBuffer, "f_open error (%i)\r\n", fres);
 8000b0c:	197b      	adds	r3, r7, r5
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4974      	ldr	r1, [pc, #464]	@ (8000ce4 <ReadSD+0x2dc>)
 8000b12:	4b6e      	ldr	r3, [pc, #440]	@ (8000ccc <ReadSD+0x2c4>)
 8000b14:	0018      	movs	r0, r3
 8000b16:	f009 fea9 	bl	800a86c <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000b1a:	4b6c      	ldr	r3, [pc, #432]	@ (8000ccc <ReadSD+0x2c4>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f000 fc9f 	bl	8001460 <PrintOutputBuffer>
		while(1);
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	e7fd      	b.n	8000b22 <ReadSD+0x11a>
	}
	sprintf((char *) OutputBuffer, "I was able to open 'test.txt' for reading!\r\n");
 8000b26:	4a70      	ldr	r2, [pc, #448]	@ (8000ce8 <ReadSD+0x2e0>)
 8000b28:	4b68      	ldr	r3, [pc, #416]	@ (8000ccc <ReadSD+0x2c4>)
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f009 fe9d 	bl	800a86c <siprintf>
	PrintOutputBuffer(OutputBuffer);
 8000b32:	4b66      	ldr	r3, [pc, #408]	@ (8000ccc <ReadSD+0x2c4>)
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 fc93 	bl	8001460 <PrintOutputBuffer>

	BYTE readBuf[17];
	int x = -1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	425b      	negs	r3, r3
 8000b3e:	4a6b      	ldr	r2, [pc, #428]	@ (8000cec <ReadSD+0x2e4>)
 8000b40:	18ba      	adds	r2, r7, r2
 8000b42:	6013      	str	r3, [r2, #0]
	int x3 = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	22a4      	movs	r2, #164	@ 0xa4
 8000b48:	00d2      	lsls	r2, r2, #3
 8000b4a:	18ba      	adds	r2, r7, r2
 8000b4c:	6013      	str	r3, [r2, #0]
	int image = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	4a67      	ldr	r2, [pc, #412]	@ (8000cf0 <ReadSD+0x2e8>)
 8000b52:	18ba      	adds	r2, r7, r2
 8000b54:	6013      	str	r3, [r2, #0]
	char fullText[128];
	unsigned int decimal_value = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	22a3      	movs	r2, #163	@ 0xa3
 8000b5a:	00d2      	lsls	r2, r2, #3
 8000b5c:	18ba      	adds	r2, r7, r2
 8000b5e:	6013      	str	r3, [r2, #0]
	memset(fullText, 0, sizeof(fullText));
 8000b60:	003b      	movs	r3, r7
 8000b62:	2280      	movs	r2, #128	@ 0x80
 8000b64:	2100      	movs	r1, #0
 8000b66:	0018      	movs	r0, r3
 8000b68:	f009 fea0 	bl	800a8ac <memset>
	TCHAR* rres3 = "4";
 8000b6c:	4b61      	ldr	r3, [pc, #388]	@ (8000cf4 <ReadSD+0x2ec>)
 8000b6e:	4a62      	ldr	r2, [pc, #392]	@ (8000cf8 <ReadSD+0x2f0>)
 8000b70:	18b9      	adds	r1, r7, r2
 8000b72:	600b      	str	r3, [r1, #0]
	if(rres3 != 0) {
 8000b74:	18bb      	adds	r3, r7, r2
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d100      	bne.n	8000b7e <ReadSD+0x176>
 8000b7c:	e080      	b.n	8000c80 <ReadSD+0x278>
		while (x < 1760) { //this states limit of how big the txt is
 8000b7e:	e06d      	b.n	8000c5c <ReadSD+0x254>
			f_gets((TCHAR*)readBuf, 17, &fil);
 8000b80:	239c      	movs	r3, #156	@ 0x9c
 8000b82:	18fa      	adds	r2, r7, r3
 8000b84:	2380      	movs	r3, #128	@ 0x80
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2111      	movs	r1, #17
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f007 ff75 	bl	8008a7a <f_gets>
			x += 1;
 8000b90:	4a56      	ldr	r2, [pc, #344]	@ (8000cec <ReadSD+0x2e4>)
 8000b92:	18bb      	adds	r3, r7, r2
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	3301      	adds	r3, #1
 8000b98:	18b9      	adds	r1, r7, r2
 8000b9a:	600b      	str	r3, [r1, #0]
			decimal_value = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	21a3      	movs	r1, #163	@ 0xa3
 8000ba0:	00c9      	lsls	r1, r1, #3
 8000ba2:	1879      	adds	r1, r7, r1
 8000ba4:	600b      	str	r3, [r1, #0]
			if ((x+1) % 2 == 1) {
 8000ba6:	18bb      	adds	r3, r7, r2
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a53      	ldr	r2, [pc, #332]	@ (8000cfc <ReadSD+0x2f4>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	d504      	bpl.n	8000bbc <ReadSD+0x1b4>
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	4252      	negs	r2, r2
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	3301      	adds	r3, #1
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d13e      	bne.n	8000c3e <ReadSD+0x236>
				// Concatenate the read line to the full text buffer
				for (int i = 0; i < 16; i++) { // the 16 bits when running
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	4a4f      	ldr	r2, [pc, #316]	@ (8000d00 <ReadSD+0x2f8>)
 8000bc4:	18ba      	adds	r2, r7, r2
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e01d      	b.n	8000c06 <ReadSD+0x1fe>
					// Convert '1' or '0' char to its integer value
					int bit_value = readBuf[i] - '0'; // '1' - '0' = 1, '0' - '0' = 0
 8000bca:	4b4e      	ldr	r3, [pc, #312]	@ (8000d04 <ReadSD+0x2fc>)
 8000bcc:	22a5      	movs	r2, #165	@ 0xa5
 8000bce:	00d2      	lsls	r2, r2, #3
 8000bd0:	189b      	adds	r3, r3, r2
 8000bd2:	19da      	adds	r2, r3, r7
 8000bd4:	494a      	ldr	r1, [pc, #296]	@ (8000d00 <ReadSD+0x2f8>)
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	18d3      	adds	r3, r2, r3
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	3b30      	subs	r3, #48	@ 0x30
 8000be0:	20a0      	movs	r0, #160	@ 0xa0
 8000be2:	00c0      	lsls	r0, r0, #3
 8000be4:	183a      	adds	r2, r7, r0
 8000be6:	6013      	str	r3, [r2, #0]

					// Update the decimal value
					decimal_value = (decimal_value << 1) | bit_value; // Left-shift and add the current bit
 8000be8:	24a3      	movs	r4, #163	@ 0xa3
 8000bea:	00e4      	lsls	r4, r4, #3
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	005a      	lsls	r2, r3, #1
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	193a      	adds	r2, r7, r4
 8000bfa:	6013      	str	r3, [r2, #0]
				for (int i = 0; i < 16; i++) { // the 16 bits when running
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	187a      	adds	r2, r7, r1
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	4b3e      	ldr	r3, [pc, #248]	@ (8000d00 <ReadSD+0x2f8>)
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	dddc      	ble.n	8000bca <ReadSD+0x1c2>
				}
				image_leds[image][x3] = decimal_value;
 8000c10:	23a3      	movs	r3, #163	@ 0xa3
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	b298      	uxth	r0, r3
 8000c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d08 <ReadSD+0x300>)
 8000c1c:	4a34      	ldr	r2, [pc, #208]	@ (8000cf0 <ReadSD+0x2e8>)
 8000c1e:	18ba      	adds	r2, r7, r2
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	0111      	lsls	r1, r2, #4
 8000c24:	24a4      	movs	r4, #164	@ 0xa4
 8000c26:	00e4      	lsls	r4, r4, #3
 8000c28:	193a      	adds	r2, r7, r4
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	188a      	adds	r2, r1, r2
 8000c2e:	0052      	lsls	r2, r2, #1
 8000c30:	1c01      	adds	r1, r0, #0
 8000c32:	52d1      	strh	r1, [r2, r3]
				x3 += 1;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	193a      	adds	r2, r7, r4
 8000c3c:	6013      	str	r3, [r2, #0]
			}
			if (x3 > 15) {
 8000c3e:	22a4      	movs	r2, #164	@ 0xa4
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	18bb      	adds	r3, r7, r2
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	dd08      	ble.n	8000c5c <ReadSD+0x254>
				image += 1;
 8000c4a:	4929      	ldr	r1, [pc, #164]	@ (8000cf0 <ReadSD+0x2e8>)
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	3301      	adds	r3, #1
 8000c52:	1879      	adds	r1, r7, r1
 8000c54:	600b      	str	r3, [r1, #0]
				x3 = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	18ba      	adds	r2, r7, r2
 8000c5a:	6013      	str	r3, [r2, #0]
		while (x < 1760) { //this states limit of how big the txt is
 8000c5c:	4b23      	ldr	r3, [pc, #140]	@ (8000cec <ReadSD+0x2e4>)
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	23dc      	movs	r3, #220	@ 0xdc
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	429a      	cmp	r2, r3
 8000c68:	db8a      	blt.n	8000b80 <ReadSD+0x178>
			}
		}

		sprintf((char *) OutputBuffer, "Read string from 'test.txt'");
 8000c6a:	4a28      	ldr	r2, [pc, #160]	@ (8000d0c <ReadSD+0x304>)
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <ReadSD+0x2c4>)
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f009 fdfb 	bl	800a86c <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <ReadSD+0x2c4>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fbf1 	bl	8001460 <PrintOutputBuffer>
 8000c7e:	e00b      	b.n	8000c98 <ReadSD+0x290>
	} else {
		sprintf((char *) OutputBuffer, "f_gets error (%i)\r\n", fres);
 8000c80:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc0 <ReadSD+0x2b8>)
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	4922      	ldr	r1, [pc, #136]	@ (8000d10 <ReadSD+0x308>)
 8000c88:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <ReadSD+0x2c4>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f009 fdee 	bl	800a86c <siprintf>
		PrintOutputBuffer(OutputBuffer);
 8000c90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <ReadSD+0x2c4>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fbe4 	bl	8001460 <PrintOutputBuffer>
	}

	f_close(&fil);
 8000c98:	239c      	movs	r3, #156	@ 0x9c
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f007 fdef 	bl	8008880 <f_close>

	//We're done, so de-mount the drive
	f_mount(NULL, "", 0);
 8000ca2:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <ReadSD+0x2bc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	0019      	movs	r1, r3
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f007 f981 	bl	8007fb0 <f_mount>
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	23a5      	movs	r3, #165	@ 0xa5
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	449d      	add	sp, r3
 8000cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000cba:	46c0      	nop			@ (mov r8, r8)
 8000cbc:	fffffad8 	.word	0xfffffad8
 8000cc0:	00000513 	.word	0x00000513
 8000cc4:	0800b1c0 	.word	0x0800b1c0
 8000cc8:	0800b1c4 	.word	0x0800b1c4
 8000ccc:	200008f0 	.word	0x200008f0
 8000cd0:	0800b1dc 	.word	0x0800b1dc
 8000cd4:	0000050c 	.word	0x0000050c
 8000cd8:	0800b1f4 	.word	0x0800b1f4
 8000cdc:	0800b224 	.word	0x0800b224
 8000ce0:	0800b23c 	.word	0x0800b23c
 8000ce4:	0800b248 	.word	0x0800b248
 8000ce8:	0800b25c 	.word	0x0800b25c
 8000cec:	00000524 	.word	0x00000524
 8000cf0:	0000051c 	.word	0x0000051c
 8000cf4:	0800b28c 	.word	0x0800b28c
 8000cf8:	00000504 	.word	0x00000504
 8000cfc:	80000001 	.word	0x80000001
 8000d00:	00000514 	.word	0x00000514
 8000d04:	fffffb58 	.word	0xfffffb58
 8000d08:	200001b8 	.word	0x200001b8
 8000d0c:	0800b290 	.word	0x0800b290
 8000d10:	0800b2ac 	.word	0x0800b2ac

08000d14 <HAL_GPIO_EXTI_Falling_Callback>:

//
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	1dbb      	adds	r3, r7, #6
 8000d1e:	801a      	strh	r2, [r3, #0]
	// If chip select pin goes low, SD card was plugged in
	if (GPIO_Pin == SPI2_NSS_Pin) {
 8000d20:	1dbb      	adds	r3, r7, #6
 8000d22:	881a      	ldrh	r2, [r3, #0]
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d105      	bne.n	8000d38 <HAL_GPIO_EXTI_Falling_Callback+0x24>
		// critical section to stop scheduler from exiting SD mount
		taskENTER_CRITICAL();
 8000d2c:	f009 fb70 	bl	800a410 <vPortEnterCritical>
		ReadSD();
 8000d30:	f7ff fe6a 	bl	8000a08 <ReadSD>
		taskEXIT_CRITICAL();
 8000d34:	f009 fb7e 	bl	800a434 <vPortExitCritical>
	}
}
 8000d38:	46c0      	nop			@ (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim == &htim16 ) {
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d10a      	bne.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x26>
		current_frame = (current_frame + 1) % 55;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	2137      	movs	r1, #55	@ 0x37
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff fb4f 	bl	80003fc <__aeabi_idivmod>
 8000d5e:	000b      	movs	r3, r1
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000d64:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d101      	bne.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0x34>
    HAL_IncTick();
 8000d70:	f000 fbe8 	bl	8001544 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000a34 	.word	0x20000a34
 8000d80:	200008ec 	.word	0x200008ec
 8000d84:	40001000 	.word	0x40001000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	e7fd      	b.n	8000d90 <Error_Handler+0x8>

08000d94 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e0c <MX_SPI2_Init+0x78>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000da0:	2282      	movs	r2, #130	@ 0x82
 8000da2:	0052      	lsls	r2, r2, #1
 8000da4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dae:	22e0      	movs	r2, #224	@ 0xe0
 8000db0:	00d2      	lsls	r2, r2, #3
 8000db2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db4:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dba:	4b13      	ldr	r3, [pc, #76]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dc2:	2280      	movs	r2, #128	@ 0x80
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000de2:	2207      	movs	r2, #7
 8000de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000dee:	2208      	movs	r2, #8
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000df2:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <MX_SPI2_Init+0x74>)
 8000df4:	0018      	movs	r0, r3
 8000df6:	f002 fa69 	bl	80032cc <HAL_SPI_Init>
 8000dfa:	1e03      	subs	r3, r0, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dfe:	f7ff ffc3 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000934 	.word	0x20000934
 8000e0c:	40003800 	.word	0x40003800

08000e10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b08b      	sub	sp, #44	@ 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	2414      	movs	r4, #20
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	2314      	movs	r3, #20
 8000e20:	001a      	movs	r2, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	f009 fd42 	bl	800a8ac <memset>
  if(spiHandle->Instance==SPI2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ee0 <HAL_SPI_MspInit+0xd0>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d151      	bne.n	8000ed6 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e38:	2180      	movs	r1, #128	@ 0x80
 8000e3a:	01c9      	lsls	r1, r1, #7
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e40:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e44:	2380      	movs	r3, #128	@ 0x80
 8000e46:	01db      	lsls	r3, r3, #7
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e52:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e54:	2104      	movs	r1, #4
 8000e56:	430a      	orrs	r2, r1
 8000e58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5e:	2204      	movs	r2, #4
 8000e60:	4013      	ands	r3, r2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <HAL_SPI_MspInit+0xd4>)
 8000e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e76:	2202      	movs	r2, #2
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	220c      	movs	r2, #12
 8000e82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2202      	movs	r2, #2
 8000e88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <HAL_SPI_MspInit+0xd8>)
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	0010      	movs	r0, r2
 8000ea4:	f001 f8ba 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea8:	0021      	movs	r1, r4
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2280      	movs	r2, #128	@ 0x80
 8000eae:	0192      	lsls	r2, r2, #6
 8000eb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	187b      	adds	r3, r7, r1
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <HAL_SPI_MspInit+0xdc>)
 8000ece:	0019      	movs	r1, r3
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	f001 f8a3 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ed6:	46c0      	nop			@ (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b00b      	add	sp, #44	@ 0x2c
 8000edc:	bd90      	pop	{r4, r7, pc}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	40003800 	.word	0x40003800
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	50000800 	.word	0x50000800
 8000eec:	50000400 	.word	0x50000400

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_MspInit+0x50>)
 8000ef8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <HAL_MspInit+0x50>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	430a      	orrs	r2, r1
 8000f00:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f02:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <HAL_MspInit+0x50>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	2201      	movs	r2, #1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <HAL_MspInit+0x50>)
 8000f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f12:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <HAL_MspInit+0x50>)
 8000f14:	2180      	movs	r1, #128	@ 0x80
 8000f16:	0549      	lsls	r1, r1, #21
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_MspInit+0x50>)
 8000f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f20:	2380      	movs	r3, #128	@ 0x80
 8000f22:	055b      	lsls	r3, r3, #21
 8000f24:	4013      	ands	r3, r2
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	425b      	negs	r3, r3
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2103      	movs	r1, #3
 8000f32:	0018      	movs	r0, r3
 8000f34:	f001 f84c 	bl	8001fd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b08c      	sub	sp, #48	@ 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000f4c:	232b      	movs	r3, #43	@ 0x2b
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f54:	4b37      	ldr	r3, [pc, #220]	@ (8001034 <HAL_InitTick+0xf0>)
 8000f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f58:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <HAL_InitTick+0xf0>)
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f60:	4b34      	ldr	r3, [pc, #208]	@ (8001034 <HAL_InitTick+0xf0>)
 8000f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f64:	2210      	movs	r2, #16
 8000f66:	4013      	ands	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f6c:	230c      	movs	r3, #12
 8000f6e:	18fa      	adds	r2, r7, r3
 8000f70:	2410      	movs	r4, #16
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	0011      	movs	r1, r2
 8000f76:	0018      	movs	r0, r3
 8000f78:	f002 f84a 	bl	8003010 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d104      	bne.n	8000f92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f88:	f002 f82c 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000f90:	e004      	b.n	8000f9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f92:	f002 f827 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8000f96:	0003      	movs	r3, r0
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f9e:	4926      	ldr	r1, [pc, #152]	@ (8001038 <HAL_InitTick+0xf4>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f7ff f8bb 	bl	800011c <__udivsi3>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fac:	4b23      	ldr	r3, [pc, #140]	@ (800103c <HAL_InitTick+0xf8>)
 8000fae:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <HAL_InitTick+0xfc>)
 8000fb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <HAL_InitTick+0xf8>)
 8000fb4:	4a23      	ldr	r2, [pc, #140]	@ (8001044 <HAL_InitTick+0x100>)
 8000fb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fb8:	4b20      	ldr	r3, [pc, #128]	@ (800103c <HAL_InitTick+0xf8>)
 8000fba:	6a3a      	ldr	r2, [r7, #32]
 8000fbc:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <HAL_InitTick+0xf8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <HAL_InitTick+0xf8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <HAL_InitTick+0xf8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000fd0:	252b      	movs	r5, #43	@ 0x2b
 8000fd2:	197c      	adds	r4, r7, r5
 8000fd4:	4b19      	ldr	r3, [pc, #100]	@ (800103c <HAL_InitTick+0xf8>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f002 fee8 	bl	8003dac <HAL_TIM_Base_Init>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000fe0:	197b      	adds	r3, r7, r5
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d11e      	bne.n	8001026 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fe8:	197c      	adds	r4, r7, r5
 8000fea:	4b14      	ldr	r3, [pc, #80]	@ (800103c <HAL_InitTick+0xf8>)
 8000fec:	0018      	movs	r0, r3
 8000fee:	f002 ff35 	bl	8003e5c <HAL_TIM_Base_Start_IT>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000ff6:	197b      	adds	r3, r7, r5
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d113      	bne.n	8001026 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000ffe:	2011      	movs	r0, #17
 8001000:	f000 fffb 	bl	8001ffa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d809      	bhi.n	800101e <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	0019      	movs	r1, r3
 8001010:	2011      	movs	r0, #17
 8001012:	f000 ffdd 	bl	8001fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <HAL_InitTick+0x104>)
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	e003      	b.n	8001026 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800101e:	232b      	movs	r3, #43	@ 0x2b
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001026:	232b      	movs	r3, #43	@ 0x2b
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b00c      	add	sp, #48	@ 0x30
 8001032:	bdb0      	pop	{r4, r5, r7, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	000f4240 	.word	0x000f4240
 800103c:	20000998 	.word	0x20000998
 8001040:	40001000 	.word	0x40001000
 8001044:	000003e7 	.word	0x000003e7
 8001048:	200000c4 	.word	0x200000c4

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	46c0      	nop			@ (mov r8, r8)
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPI2_NSS_Pin);
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	0018      	movs	r0, r3
 8001066:	f001 f95b 	bl	8002320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001074:	4b03      	ldr	r3, [pc, #12]	@ (8001084 <TIM6_IRQHandler+0x14>)
 8001076:	0018      	movs	r0, r3
 8001078:	f002 ffa6 	bl	8003fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	20000998 	.word	0x20000998

08001088 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800108c:	4b03      	ldr	r3, [pc, #12]	@ (800109c <TIM16_IRQHandler+0x14>)
 800108e:	0018      	movs	r0, r3
 8001090:	f002 ff9a 	bl	8003fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001094:	46c0      	nop			@ (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	20000a34 	.word	0x20000a34

080010a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a8:	4a14      	ldr	r2, [pc, #80]	@ (80010fc <_sbrk+0x5c>)
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <_sbrk+0x60>)
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <_sbrk+0x64>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <_sbrk+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	18d3      	adds	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d207      	bcs.n	80010e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d0:	f009 fbf4 	bl	800a8bc <__errno>
 80010d4:	0003      	movs	r3, r0
 80010d6:	220c      	movs	r2, #12
 80010d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010da:	2301      	movs	r3, #1
 80010dc:	425b      	negs	r3, r3
 80010de:	e009      	b.n	80010f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e6:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	18d2      	adds	r2, r2, r3
 80010ee:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <_sbrk+0x64>)
 80010f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b006      	add	sp, #24
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20009000 	.word	0x20009000
 8001100:	00000400 	.word	0x00000400
 8001104:	200009e4 	.word	0x200009e4
 8001108:	20001dc0 	.word	0x20001dc0

0800110c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <MX_TIM14_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim16;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	0018      	movs	r0, r3
 8001122:	231c      	movs	r3, #28
 8001124:	001a      	movs	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	f009 fbc0 	bl	800a8ac <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <MX_TIM14_Init+0x94>)
 800112e:	4a20      	ldr	r2, [pc, #128]	@ (80011b0 <MX_TIM14_Init+0x98>)
 8001130:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_TIM14_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_TIM14_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_TIM14_Init+0x94>)
 8001140:	4a1c      	ldr	r2, [pc, #112]	@ (80011b4 <MX_TIM14_Init+0x9c>)
 8001142:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001144:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_TIM14_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_TIM14_Init+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_TIM14_Init+0x94>)
 8001152:	0018      	movs	r0, r3
 8001154:	f002 fe2a 	bl	8003dac <HAL_TIM_Base_Init>
 8001158:	1e03      	subs	r3, r0, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800115c:	f7ff fe14 	bl	8000d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_TIM14_Init+0x94>)
 8001162:	0018      	movs	r0, r3
 8001164:	f002 fed0 	bl	8003f08 <HAL_TIM_PWM_Init>
 8001168:	1e03      	subs	r3, r0, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800116c:	f7ff fe0c 	bl	8000d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2260      	movs	r2, #96	@ 0x60
 8001174:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001188:	1d39      	adds	r1, r7, #4
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_TIM14_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	0018      	movs	r0, r3
 8001190:	f003 f822 	bl	80041d8 <HAL_TIM_PWM_ConfigChannel>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001198:	f7ff fdf6 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <MX_TIM14_Init+0x94>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f000 f870 	bl	8001284 <HAL_TIM_MspPostInit>

}
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b008      	add	sp, #32
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200009e8 	.word	0x200009e8
 80011b0:	40002000 	.word	0x40002000
 80011b4:	0000ffff 	.word	0x0000ffff

080011b8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_TIM16_Init+0x44>)
 80011be:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <MX_TIM16_Init+0x48>)
 80011c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_TIM16_Init+0x44>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_TIM16_Init+0x44>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 36360-1;
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <MX_TIM16_Init+0x44>)
 80011d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001204 <MX_TIM16_Init+0x4c>)
 80011d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_TIM16_Init+0x44>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <MX_TIM16_Init+0x44>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_TIM16_Init+0x44>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011e6:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <MX_TIM16_Init+0x44>)
 80011e8:	0018      	movs	r0, r3
 80011ea:	f002 fddf 	bl	8003dac <HAL_TIM_Base_Init>
 80011ee:	1e03      	subs	r3, r0, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80011f2:	f7ff fdc9 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000a34 	.word	0x20000a34
 8001200:	40014400 	.word	0x40014400
 8001204:	00008e07 	.word	0x00008e07

08001208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a18      	ldr	r2, [pc, #96]	@ (8001278 <HAL_TIM_Base_MspInit+0x70>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10e      	bne.n	8001238 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <HAL_TIM_Base_MspInit+0x74>)
 800121c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_TIM_Base_MspInit+0x74>)
 8001220:	2180      	movs	r1, #128	@ 0x80
 8001222:	0209      	lsls	r1, r1, #8
 8001224:	430a      	orrs	r2, r1
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_TIM_Base_MspInit+0x74>)
 800122a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	4013      	ands	r3, r2
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001236:	e01a      	b.n	800126e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM16)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a10      	ldr	r2, [pc, #64]	@ (8001280 <HAL_TIM_Base_MspInit+0x78>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d115      	bne.n	800126e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_TIM_Base_MspInit+0x74>)
 8001244:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_TIM_Base_MspInit+0x74>)
 8001248:	2180      	movs	r1, #128	@ 0x80
 800124a:	0289      	lsls	r1, r1, #10
 800124c:	430a      	orrs	r2, r1
 800124e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <HAL_TIM_Base_MspInit+0x74>)
 8001252:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	029b      	lsls	r3, r3, #10
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2103      	movs	r1, #3
 8001262:	2015      	movs	r0, #21
 8001264:	f000 feb4 	bl	8001fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001268:	2015      	movs	r0, #21
 800126a:	f000 fec6 	bl	8001ffa <HAL_NVIC_EnableIRQ>
}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	40002000 	.word	0x40002000
 800127c:	40021000 	.word	0x40021000
 8001280:	40014400 	.word	0x40014400

08001284 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	240c      	movs	r4, #12
 800128e:	193b      	adds	r3, r7, r4
 8001290:	0018      	movs	r0, r3
 8001292:	2314      	movs	r3, #20
 8001294:	001a      	movs	r2, r3
 8001296:	2100      	movs	r1, #0
 8001298:	f009 fb08 	bl	800a8ac <memset>
  if(timHandle->Instance==TIM14)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <HAL_TIM_MspPostInit+0x70>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d122      	bne.n	80012ec <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <HAL_TIM_MspPostInit+0x74>)
 80012a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <HAL_TIM_MspPostInit+0x74>)
 80012ac:	2104      	movs	r1, #4
 80012ae:	430a      	orrs	r2, r1
 80012b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <HAL_TIM_MspPostInit+0x74>)
 80012b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b6:	2204      	movs	r2, #4
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	0152      	lsls	r2, r2, #5
 80012c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	0021      	movs	r1, r4
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2202      	movs	r2, #2
 80012cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2202      	movs	r2, #2
 80012de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <HAL_TIM_MspPostInit+0x78>)
 80012e4:	0019      	movs	r1, r3
 80012e6:	0010      	movs	r0, r2
 80012e8:	f000 fe98 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80012ec:	46c0      	nop			@ (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b009      	add	sp, #36	@ 0x24
 80012f2:	bd90      	pop	{r4, r7, pc}
 80012f4:	40002000 	.word	0x40002000
 80012f8:	40021000 	.word	0x40021000
 80012fc:	50000800 	.word	0x50000800

08001300 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001306:	4a24      	ldr	r2, [pc, #144]	@ (8001398 <MX_USART1_UART_Init+0x98>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 800130c:	22e1      	movs	r2, #225	@ 0xe1
 800130e:	0252      	lsls	r2, r2, #9
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b1d      	ldr	r3, [pc, #116]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b1b      	ldr	r3, [pc, #108]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800133c:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001348:	4b12      	ldr	r3, [pc, #72]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 800134a:	0018      	movs	r0, r3
 800134c:	f003 fbc4 	bl	8004ad8 <HAL_UART_Init>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001354:	f7ff fd18 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 800135a:	2100      	movs	r1, #0
 800135c:	0018      	movs	r0, r3
 800135e:	f004 f8c7 	bl	80054f0 <HAL_UARTEx_SetTxFifoThreshold>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001366:	f7ff fd0f 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 800136c:	2100      	movs	r1, #0
 800136e:	0018      	movs	r0, r3
 8001370:	f004 f8fe 	bl	8005570 <HAL_UARTEx_SetRxFifoThreshold>
 8001374:	1e03      	subs	r3, r0, #0
 8001376:	d001      	beq.n	800137c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001378:	f7ff fd06 	bl	8000d88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <MX_USART1_UART_Init+0x94>)
 800137e:	0018      	movs	r0, r3
 8001380:	f004 f87c 	bl	800547c <HAL_UARTEx_DisableFifoMode>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001388:	f7ff fcfe 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	20000a80 	.word	0x20000a80
 8001398:	40013800 	.word	0x40013800

0800139c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b091      	sub	sp, #68	@ 0x44
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	232c      	movs	r3, #44	@ 0x2c
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	0018      	movs	r0, r3
 80013aa:	2314      	movs	r3, #20
 80013ac:	001a      	movs	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f009 fa7c 	bl	800a8ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b4:	2410      	movs	r4, #16
 80013b6:	193b      	adds	r3, r7, r4
 80013b8:	0018      	movs	r0, r3
 80013ba:	231c      	movs	r3, #28
 80013bc:	001a      	movs	r2, r3
 80013be:	2100      	movs	r1, #0
 80013c0:	f009 fa74 	bl	800a8ac <memset>
  if(uartHandle->Instance==USART1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a22      	ldr	r2, [pc, #136]	@ (8001454 <HAL_UART_MspInit+0xb8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d13d      	bne.n	800144a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	0018      	movs	r0, r3
 80013de:	f001 fe41 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 80013e2:	1e03      	subs	r3, r0, #0
 80013e4:	d001      	beq.n	80013ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013e6:	f7ff fccf 	bl	8000d88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001458 <HAL_UART_MspInit+0xbc>)
 80013ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_UART_MspInit+0xbc>)
 80013f0:	2180      	movs	r1, #128	@ 0x80
 80013f2:	01c9      	lsls	r1, r1, #7
 80013f4:	430a      	orrs	r2, r1
 80013f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f8:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <HAL_UART_MspInit+0xbc>)
 80013fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013fc:	2380      	movs	r3, #128	@ 0x80
 80013fe:	01db      	lsls	r3, r3, #7
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <HAL_UART_MspInit+0xbc>)
 8001408:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800140a:	4b13      	ldr	r3, [pc, #76]	@ (8001458 <HAL_UART_MspInit+0xbc>)
 800140c:	2104      	movs	r1, #4
 800140e:	430a      	orrs	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	@ 0x34
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_UART_MspInit+0xbc>)
 8001414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001416:	2204      	movs	r2, #4
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800141e:	212c      	movs	r1, #44	@ 0x2c
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2230      	movs	r2, #48	@ 0x30
 8001424:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2202      	movs	r2, #2
 800142a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2201      	movs	r2, #1
 800143c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	187b      	adds	r3, r7, r1
 8001440:	4a06      	ldr	r2, [pc, #24]	@ (800145c <HAL_UART_MspInit+0xc0>)
 8001442:	0019      	movs	r1, r3
 8001444:	0010      	movs	r0, r2
 8001446:	f000 fde9 	bl	800201c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b011      	add	sp, #68	@ 0x44
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	40013800 	.word	0x40013800
 8001458:	40021000 	.word	0x40021000
 800145c:	50000800 	.word	0x50000800

08001460 <PrintOutputBuffer>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void PrintOutputBuffer(uint8_t *OutputBuffer){
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	uint32_t StringLength;
	HAL_StatusTypeDef HALStatus;

	for (StringLength = 0; *(OutputBuffer+StringLength); StringLength++);
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e002      	b.n	8001474 <PrintOutputBuffer+0x14>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	3301      	adds	r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	18d3      	adds	r3, r2, r3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f6      	bne.n	800146e <PrintOutputBuffer+0xe>

	HALStatus = HAL_UART_Transmit(&huart1, OutputBuffer, StringLength, HAL_MAX_DELAY);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	b29a      	uxth	r2, r3
 8001484:	250b      	movs	r5, #11
 8001486:	197c      	adds	r4, r7, r5
 8001488:	2301      	movs	r3, #1
 800148a:	425b      	negs	r3, r3
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <PrintOutputBuffer+0x4c>)
 8001490:	f003 fb78 	bl	8004b84 <HAL_UART_Transmit>
 8001494:	0003      	movs	r3, r0
 8001496:	7023      	strb	r3, [r4, #0]

	if (HALStatus != HAL_OK){
 8001498:	197b      	adds	r3, r7, r5
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <PrintOutputBuffer+0x44>
		Error_Handler();
 80014a0:	f7ff fc72 	bl	8000d88 <Error_Handler>
	}
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bdb0      	pop	{r4, r5, r7, pc}
 80014ac:	20000a80 	.word	0x20000a80

080014b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014b0:	480d      	ldr	r0, [pc, #52]	@ (80014e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b4:	f7ff fe2a 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <LoopForever+0x6>)
  ldr r1, =_edata
 80014ba:	490d      	ldr	r1, [pc, #52]	@ (80014f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <LoopForever+0xe>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c0:	e002      	b.n	80014c8 <LoopCopyDataInit>

080014c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c6:	3304      	adds	r3, #4

080014c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014cc:	d3f9      	bcc.n	80014c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d0:	4c0a      	ldr	r4, [pc, #40]	@ (80014fc <LoopForever+0x16>)
  movs r3, #0
 80014d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d4:	e001      	b.n	80014da <LoopFillZerobss>

080014d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d8:	3204      	adds	r2, #4

080014da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014dc:	d3fb      	bcc.n	80014d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014de:	f009 f9f3 	bl	800a8c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80014e2:	f7ff f9b9 	bl	8000858 <main>

080014e6 <LoopForever>:

LoopForever:
  b LoopForever
 80014e6:	e7fe      	b.n	80014e6 <LoopForever>
  ldr   r0, =_estack
 80014e8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80014ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f0:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 80014f4:	0800b49c 	.word	0x0800b49c
  ldr r2, =_sbss
 80014f8:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 80014fc:	20001dbc 	.word	0x20001dbc

08001500 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001500:	e7fe      	b.n	8001500 <ADC1_IRQHandler>
	...

08001504 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <HAL_Init+0x3c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_Init+0x3c>)
 8001516:	2180      	movs	r1, #128	@ 0x80
 8001518:	0049      	lsls	r1, r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151e:	2003      	movs	r0, #3
 8001520:	f7ff fd10 	bl	8000f44 <HAL_InitTick>
 8001524:	1e03      	subs	r3, r0, #0
 8001526:	d003      	beq.n	8001530 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001528:	1dfb      	adds	r3, r7, #7
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e001      	b.n	8001534 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fcde 	bl	8000ef0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001534:	1dfb      	adds	r3, r7, #7
 8001536:	781b      	ldrb	r3, [r3, #0]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40022000 	.word	0x40022000

08001544 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_IncTick+0x1c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	001a      	movs	r2, r3
 800154e:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <HAL_IncTick+0x20>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	18d2      	adds	r2, r2, r3
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_IncTick+0x20>)
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	46c0      	nop			@ (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	200000c8 	.word	0x200000c8
 8001564:	20000b14 	.word	0x20000b14

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b02      	ldr	r3, [pc, #8]	@ (8001578 <HAL_GetTick+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	20000b14 	.word	0x20000b14

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff fff0 	bl	8001568 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b0a      	ldr	r3, [pc, #40]	@ (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	001a      	movs	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	189b      	adds	r3, r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	f7ff ffe0 	bl	8001568 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	46c0      	nop			@ (mov r8, r8)
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			@ (mov r8, r8)
 80015c0:	200000c8 	.word	0x200000c8

080015c4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80015d4:	401a      	ands	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	fe3fffff 	.word	0xfe3fffff

080015ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	23e0      	movs	r3, #224	@ 0xe0
 80015fa:	045b      	lsls	r3, r3, #17
 80015fc:	4013      	ands	r3, r2
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}

08001606 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	2104      	movs	r1, #4
 800161a:	400a      	ands	r2, r1
 800161c:	2107      	movs	r1, #7
 800161e:	4091      	lsls	r1, r2
 8001620:	000a      	movs	r2, r1
 8001622:	43d2      	mvns	r2, r2
 8001624:	401a      	ands	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2104      	movs	r1, #4
 800162a:	400b      	ands	r3, r1
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4099      	lsls	r1, r3
 8001630:	000b      	movs	r3, r1
 8001632:	431a      	orrs	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001638:	46c0      	nop			@ (mov r8, r8)
 800163a:	46bd      	mov	sp, r7
 800163c:	b004      	add	sp, #16
 800163e:	bd80      	pop	{r7, pc}

08001640 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	2104      	movs	r1, #4
 8001652:	400a      	ands	r2, r1
 8001654:	2107      	movs	r1, #7
 8001656:	4091      	lsls	r1, r2
 8001658:	000a      	movs	r2, r1
 800165a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2104      	movs	r1, #4
 8001660:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001662:	40da      	lsrs	r2, r3
 8001664:	0013      	movs	r3, r2
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}

0800166e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	211f      	movs	r1, #31
 8001682:	400a      	ands	r2, r1
 8001684:	210f      	movs	r1, #15
 8001686:	4091      	lsls	r1, r2
 8001688:	000a      	movs	r2, r1
 800168a:	43d2      	mvns	r2, r2
 800168c:	401a      	ands	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0e9b      	lsrs	r3, r3, #26
 8001692:	210f      	movs	r1, #15
 8001694:	4019      	ands	r1, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	201f      	movs	r0, #31
 800169a:	4003      	ands	r3, r0
 800169c:	4099      	lsls	r1, r3
 800169e:	000b      	movs	r3, r1
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b004      	add	sp, #16
 80016ac:	bd80      	pop	{r7, pc}

080016ae <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	035b      	lsls	r3, r3, #13
 80016c0:	0b5b      	lsrs	r3, r3, #13
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c8:	46c0      	nop			@ (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	0352      	lsls	r2, r2, #13
 80016e2:	0b52      	lsrs	r2, r2, #13
 80016e4:	43d2      	mvns	r2, r2
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	68ba      	ldr	r2, [r7, #8]
 8001706:	0212      	lsls	r2, r2, #8
 8001708:	43d2      	mvns	r2, r2
 800170a:	401a      	ands	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	400b      	ands	r3, r1
 8001714:	4904      	ldr	r1, [pc, #16]	@ (8001728 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001716:	400b      	ands	r3, r1
 8001718:	431a      	orrs	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	07ffff00 	.word	0x07ffff00

0800172c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <LL_ADC_EnableInternalRegulator+0x24>)
 800173a:	4013      	ands	r3, r2
 800173c:	2280      	movs	r2, #128	@ 0x80
 800173e:	0552      	lsls	r2, r2, #21
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			@ (mov r8, r8)
 8001750:	6fffffe8 	.word	0x6fffffe8

08001754 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	401a      	ands	r2, r3
 8001766:	2380      	movs	r3, #128	@ 0x80
 8001768:	055b      	lsls	r3, r3, #21
 800176a:	429a      	cmp	r2, r3
 800176c:	d101      	bne.n	8001772 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001772:	2300      	movs	r3, #0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}

0800177c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <LL_ADC_IsEnabled+0x18>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <LL_ADC_IsEnabled+0x1a>
 8001794:	2300      	movs	r3, #0
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b002      	add	sp, #8
 800179c:	bd80      	pop	{r7, pc}

0800179e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2204      	movs	r2, #4
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d101      	bne.n	80017b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b002      	add	sp, #8
 80017be:	bd80      	pop	{r7, pc}

080017c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017c8:	231f      	movs	r3, #31
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e17f      	b.n	8001ae6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7fe fe73 	bl	80004dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2254      	movs	r2, #84	@ 0x54
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff ffa3 	bl	8001754 <LL_ADC_IsInternalRegulatorEnabled>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d115      	bne.n	800183e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	0018      	movs	r0, r3
 8001818:	f7ff ff88 	bl	800172c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800181c:	4bb4      	ldr	r3, [pc, #720]	@ (8001af0 <HAL_ADC_Init+0x330>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	49b4      	ldr	r1, [pc, #720]	@ (8001af4 <HAL_ADC_Init+0x334>)
 8001822:	0018      	movs	r0, r3
 8001824:	f7fe fc7a 	bl	800011c <__udivsi3>
 8001828:	0003      	movs	r3, r0
 800182a:	3301      	adds	r3, #1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001830:	e002      	b.n	8001838 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3b01      	subs	r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f9      	bne.n	8001832 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0018      	movs	r0, r3
 8001844:	f7ff ff86 	bl	8001754 <LL_ADC_IsInternalRegulatorEnabled>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d10f      	bne.n	800186c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	2210      	movs	r2, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185c:	2201      	movs	r2, #1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001864:	231f      	movs	r3, #31
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0018      	movs	r0, r3
 8001872:	f7ff ff94 	bl	800179e <LL_ADC_REG_IsConversionOngoing>
 8001876:	0003      	movs	r3, r0
 8001878:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	2210      	movs	r2, #16
 8001880:	4013      	ands	r3, r2
 8001882:	d000      	beq.n	8001886 <HAL_ADC_Init+0xc6>
 8001884:	e122      	b.n	8001acc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d000      	beq.n	800188e <HAL_ADC_Init+0xce>
 800188c:	e11e      	b.n	8001acc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	4a99      	ldr	r2, [pc, #612]	@ (8001af8 <HAL_ADC_Init+0x338>)
 8001894:	4013      	ands	r3, r2
 8001896:	2202      	movs	r2, #2
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f7ff ff6a 	bl	800177c <LL_ADC_IsEnabled>
 80018a8:	1e03      	subs	r3, r0, #0
 80018aa:	d000      	beq.n	80018ae <HAL_ADC_Init+0xee>
 80018ac:	e0ad      	b.n	8001a0a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7e1b      	ldrb	r3, [r3, #24]
 80018b6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80018b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7e5b      	ldrb	r3, [r3, #25]
 80018be:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018c0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7e9b      	ldrb	r3, [r3, #26]
 80018c6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HAL_ADC_Init+0x118>
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	e000      	b.n	80018da <HAL_ADC_Init+0x11a>
 80018d8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018da:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80018e0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da04      	bge.n	80018f4 <HAL_ADC_Init+0x134>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	e001      	b.n	80018f8 <HAL_ADC_Init+0x138>
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80018f8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	212c      	movs	r1, #44	@ 0x2c
 80018fe:	5c5b      	ldrb	r3, [r3, r1]
 8001900:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001902:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2220      	movs	r2, #32
 800190e:	5c9b      	ldrb	r3, [r3, r2]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d115      	bne.n	8001940 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7e9b      	ldrb	r3, [r3, #26]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2280      	movs	r2, #128	@ 0x80
 8001920:	0252      	lsls	r2, r2, #9
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	e00b      	b.n	8001940 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	2220      	movs	r2, #32
 800192e:	431a      	orrs	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001938:	2201      	movs	r2, #1
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00a      	beq.n	800195e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800194c:	23e0      	movs	r3, #224	@ 0xe0
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001956:	4313      	orrs	r3, r2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	4a65      	ldr	r2, [pc, #404]	@ (8001afc <HAL_ADC_Init+0x33c>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	430a      	orrs	r2, r1
 8001972:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0f9b      	lsrs	r3, r3, #30
 800197a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001980:	4313      	orrs	r3, r2
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4313      	orrs	r3, r2
 8001986:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	223c      	movs	r2, #60	@ 0x3c
 800198c:	5c9b      	ldrb	r3, [r3, r2]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d111      	bne.n	80019b6 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	0f9b      	lsrs	r3, r3, #30
 8001998:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800199e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80019a4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80019aa:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	2201      	movs	r2, #1
 80019b2:	4313      	orrs	r3, r2
 80019b4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	4a50      	ldr	r2, [pc, #320]	@ (8001b00 <HAL_ADC_Init+0x340>)
 80019be:	4013      	ands	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	23c0      	movs	r3, #192	@ 0xc0
 80019d2:	061b      	lsls	r3, r3, #24
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d018      	beq.n	8001a0a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	05db      	lsls	r3, r3, #23
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d012      	beq.n	8001a0a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	061b      	lsls	r3, r3, #24
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d00c      	beq.n	8001a0a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80019f0:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <HAL_ADC_Init+0x344>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a44      	ldr	r2, [pc, #272]	@ (8001b08 <HAL_ADC_Init+0x348>)
 80019f6:	4013      	ands	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	23f0      	movs	r3, #240	@ 0xf0
 8001a00:	039b      	lsls	r3, r3, #14
 8001a02:	401a      	ands	r2, r3
 8001a04:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <HAL_ADC_Init+0x344>)
 8001a06:	430a      	orrs	r2, r1
 8001a08:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a12:	001a      	movs	r2, r3
 8001a14:	2100      	movs	r1, #0
 8001a16:	f7ff fdf6 	bl	8001606 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a22:	493a      	ldr	r1, [pc, #232]	@ (8001b0c <HAL_ADC_Init+0x34c>)
 8001a24:	001a      	movs	r2, r3
 8001a26:	f7ff fdee 	bl	8001606 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2110      	movs	r1, #16
 8001a3e:	4249      	negs	r1, r1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	629a      	str	r2, [r3, #40]	@ 0x28
 8001a44:	e018      	b.n	8001a78 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691a      	ldr	r2, [r3, #16]
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	039b      	lsls	r3, r3, #14
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d112      	bne.n	8001a78 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	221c      	movs	r2, #28
 8001a62:	4013      	ands	r3, r2
 8001a64:	2210      	movs	r2, #16
 8001a66:	4252      	negs	r2, r2
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff fdde 	bl	8001640 <LL_ADC_GetSamplingTimeCommonChannels>
 8001a84:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001aa4:	e01c      	b.n	8001ae0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aaa:	2212      	movs	r2, #18
 8001aac:	4393      	bics	r3, r2
 8001aae:	2210      	movs	r2, #16
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aba:	2201      	movs	r2, #1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001ac2:	231f      	movs	r3, #31
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001aca:	e009      	b.n	8001ae0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ad8:	231f      	movs	r3, #31
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001ae0:	231f      	movs	r3, #31
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	781b      	ldrb	r3, [r3, #0]
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b008      	add	sp, #32
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	200000c0 	.word	0x200000c0
 8001af4:	00030d40 	.word	0x00030d40
 8001af8:	fffffefd 	.word	0xfffffefd
 8001afc:	ffde0201 	.word	0xffde0201
 8001b00:	1ffffc02 	.word	0x1ffffc02
 8001b04:	40012708 	.word	0x40012708
 8001b08:	ffc3ffff 	.word	0xffc3ffff
 8001b0c:	07ffff04 	.word	0x07ffff04

08001b10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b1a:	2317      	movs	r3, #23
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2254      	movs	r2, #84	@ 0x54
 8001b2a:	5c9b      	ldrb	r3, [r3, r2]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_ADC_ConfigChannel+0x24>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e1c0      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x3a6>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2254      	movs	r2, #84	@ 0x54
 8001b38:	2101      	movs	r1, #1
 8001b3a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff fe2c 	bl	800179e <LL_ADC_REG_IsConversionOngoing>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d000      	beq.n	8001b4c <HAL_ADC_ConfigChannel+0x3c>
 8001b4a:	e1a3      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d100      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x46>
 8001b54:	e143      	b.n	8001dde <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	2380      	movs	r3, #128	@ 0x80
 8001b5c:	061b      	lsls	r3, r3, #24
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d004      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b66:	4ac1      	ldr	r2, [pc, #772]	@ (8001e6c <HAL_ADC_ConfigChannel+0x35c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d108      	bne.n	8001b7e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0019      	movs	r1, r3
 8001b76:	0010      	movs	r0, r2
 8001b78:	f7ff fd99 	bl	80016ae <LL_ADC_REG_SetSequencerChAdd>
 8001b7c:	e0c9      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	211f      	movs	r1, #31
 8001b88:	400b      	ands	r3, r1
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	4099      	lsls	r1, r3
 8001b8e:	000b      	movs	r3, r1
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	035b      	lsls	r3, r3, #13
 8001b9c:	0b5b      	lsrs	r3, r3, #13
 8001b9e:	d105      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x9c>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0e9b      	lsrs	r3, r3, #26
 8001ba6:	221f      	movs	r2, #31
 8001ba8:	4013      	ands	r3, r2
 8001baa:	e098      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d000      	beq.n	8001bb8 <HAL_ADC_ConfigChannel+0xa8>
 8001bb6:	e091      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x1cc>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d000      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0xb4>
 8001bc2:	e089      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x1c8>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d000      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0xc0>
 8001bce:	e081      	b.n	8001cd4 <HAL_ADC_ConfigChannel+0x1c4>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d000      	beq.n	8001bdc <HAL_ADC_ConfigChannel+0xcc>
 8001bda:	e079      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0x1c0>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2210      	movs	r2, #16
 8001be2:	4013      	ands	r3, r2
 8001be4:	d000      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0xd8>
 8001be6:	e071      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x1bc>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2220      	movs	r2, #32
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d000      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0xe4>
 8001bf2:	e069      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x1b8>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2240      	movs	r2, #64	@ 0x40
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d000      	beq.n	8001c00 <HAL_ADC_ConfigChannel+0xf0>
 8001bfe:	e061      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x1b4>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2280      	movs	r2, #128	@ 0x80
 8001c06:	4013      	ands	r3, r2
 8001c08:	d000      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0xfc>
 8001c0a:	e059      	b.n	8001cc0 <HAL_ADC_ConfigChannel+0x1b0>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4013      	ands	r3, r2
 8001c16:	d151      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1ac>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2380      	movs	r3, #128	@ 0x80
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	d149      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x1a8>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d141      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1a4>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d139      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x1a0>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	4013      	ands	r3, r2
 8001c46:	d131      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x19c>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	019b      	lsls	r3, r3, #6
 8001c50:	4013      	ands	r3, r2
 8001c52:	d129      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x198>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	@ 0x80
 8001c5a:	01db      	lsls	r3, r3, #7
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d121      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x194>
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d119      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x190>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	025b      	lsls	r3, r3, #9
 8001c74:	4013      	ands	r3, r2
 8001c76:	d111      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x18c>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	d109      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x188>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	02db      	lsls	r3, r3, #11
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d001      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0x184>
 8001c90:	2312      	movs	r3, #18
 8001c92:	e024      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001c94:	2300      	movs	r3, #0
 8001c96:	e022      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001c98:	2311      	movs	r3, #17
 8001c9a:	e020      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001c9c:	2310      	movs	r3, #16
 8001c9e:	e01e      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001ca0:	230f      	movs	r3, #15
 8001ca2:	e01c      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001ca4:	230e      	movs	r3, #14
 8001ca6:	e01a      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001ca8:	230d      	movs	r3, #13
 8001caa:	e018      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cac:	230c      	movs	r3, #12
 8001cae:	e016      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cb0:	230b      	movs	r3, #11
 8001cb2:	e014      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cb4:	230a      	movs	r3, #10
 8001cb6:	e012      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cb8:	2309      	movs	r3, #9
 8001cba:	e010      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	e00e      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	e00c      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cc4:	2306      	movs	r3, #6
 8001cc6:	e00a      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cc8:	2305      	movs	r3, #5
 8001cca:	e008      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e006      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e004      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e002      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1ce>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	6852      	ldr	r2, [r2, #4]
 8001ce2:	201f      	movs	r0, #31
 8001ce4:	4002      	ands	r2, r0
 8001ce6:	4093      	lsls	r3, r2
 8001ce8:	000a      	movs	r2, r1
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d808      	bhi.n	8001d12 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	f7ff fcae 	bl	800166e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	001a      	movs	r2, r3
 8001d20:	f7ff fce8 	bl	80016f4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db00      	blt.n	8001d2e <HAL_ADC_ConfigChannel+0x21e>
 8001d2c:	e0bc      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d2e:	4b50      	ldr	r3, [pc, #320]	@ (8001e70 <HAL_ADC_ConfigChannel+0x360>)
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fc5b 	bl	80015ec <LL_ADC_GetCommonPathInternalCh>
 8001d36:	0003      	movs	r3, r0
 8001d38:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a4d      	ldr	r2, [pc, #308]	@ (8001e74 <HAL_ADC_ConfigChannel+0x364>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d122      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d4c:	d11d      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2280      	movs	r2, #128	@ 0x80
 8001d52:	0412      	lsls	r2, r2, #16
 8001d54:	4313      	orrs	r3, r2
 8001d56:	4a46      	ldr	r2, [pc, #280]	@ (8001e70 <HAL_ADC_ConfigChannel+0x360>)
 8001d58:	0019      	movs	r1, r3
 8001d5a:	0010      	movs	r0, r2
 8001d5c:	f7ff fc32 	bl	80015c4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d60:	4b45      	ldr	r3, [pc, #276]	@ (8001e78 <HAL_ADC_ConfigChannel+0x368>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4945      	ldr	r1, [pc, #276]	@ (8001e7c <HAL_ADC_ConfigChannel+0x36c>)
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7fe f9d8 	bl	800011c <__udivsi3>
 8001d6c:	0003      	movs	r3, r0
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	0013      	movs	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	189b      	adds	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d7a:	e002      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f9      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d88:	e08e      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e80 <HAL_ADC_ConfigChannel+0x370>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d10e      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	2380      	movs	r3, #128	@ 0x80
 8001d98:	045b      	lsls	r3, r3, #17
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d109      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2280      	movs	r2, #128	@ 0x80
 8001da2:	0452      	lsls	r2, r2, #17
 8001da4:	4313      	orrs	r3, r2
 8001da6:	4a32      	ldr	r2, [pc, #200]	@ (8001e70 <HAL_ADC_ConfigChannel+0x360>)
 8001da8:	0019      	movs	r1, r3
 8001daa:	0010      	movs	r0, r2
 8001dac:	f7ff fc0a 	bl	80015c4 <LL_ADC_SetCommonPathInternalCh>
 8001db0:	e07a      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a33      	ldr	r2, [pc, #204]	@ (8001e84 <HAL_ADC_ConfigChannel+0x374>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d000      	beq.n	8001dbe <HAL_ADC_ConfigChannel+0x2ae>
 8001dbc:	e074      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	03db      	lsls	r3, r3, #15
 8001dc4:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001dc6:	d000      	beq.n	8001dca <HAL_ADC_ConfigChannel+0x2ba>
 8001dc8:	e06e      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2280      	movs	r2, #128	@ 0x80
 8001dce:	03d2      	lsls	r2, r2, #15
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	4a27      	ldr	r2, [pc, #156]	@ (8001e70 <HAL_ADC_ConfigChannel+0x360>)
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	f7ff fbf4 	bl	80015c4 <LL_ADC_SetCommonPathInternalCh>
 8001ddc:	e064      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dee:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <HAL_ADC_ConfigChannel+0x35c>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d107      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	0010      	movs	r0, r2
 8001e00:	f7ff fc66 	bl	80016d0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	da4d      	bge.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e0c:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <HAL_ADC_ConfigChannel+0x360>)
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7ff fbec 	bl	80015ec <LL_ADC_GetCommonPathInternalCh>
 8001e14:	0003      	movs	r3, r0
 8001e16:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a15      	ldr	r2, [pc, #84]	@ (8001e74 <HAL_ADC_ConfigChannel+0x364>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d108      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4a18      	ldr	r2, [pc, #96]	@ (8001e88 <HAL_ADC_ConfigChannel+0x378>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_ADC_ConfigChannel+0x360>)
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	0010      	movs	r0, r2
 8001e2e:	f7ff fbc9 	bl	80015c4 <LL_ADC_SetCommonPathInternalCh>
 8001e32:	e039      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_ADC_ConfigChannel+0x370>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d108      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4a12      	ldr	r2, [pc, #72]	@ (8001e8c <HAL_ADC_ConfigChannel+0x37c>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_ADC_ConfigChannel+0x360>)
 8001e46:	0019      	movs	r1, r3
 8001e48:	0010      	movs	r0, r2
 8001e4a:	f7ff fbbb 	bl	80015c4 <LL_ADC_SetCommonPathInternalCh>
 8001e4e:	e02b      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <HAL_ADC_ConfigChannel+0x374>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d126      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e90 <HAL_ADC_ConfigChannel+0x380>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	4a03      	ldr	r2, [pc, #12]	@ (8001e70 <HAL_ADC_ConfigChannel+0x360>)
 8001e62:	0019      	movs	r1, r3
 8001e64:	0010      	movs	r0, r2
 8001e66:	f7ff fbad 	bl	80015c4 <LL_ADC_SetCommonPathInternalCh>
 8001e6a:	e01d      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x398>
 8001e6c:	80000004 	.word	0x80000004
 8001e70:	40012708 	.word	0x40012708
 8001e74:	b0001000 	.word	0xb0001000
 8001e78:	200000c0 	.word	0x200000c0
 8001e7c:	00030d40 	.word	0x00030d40
 8001e80:	b8004000 	.word	0xb8004000
 8001e84:	b4002000 	.word	0xb4002000
 8001e88:	ff7fffff 	.word	0xff7fffff
 8001e8c:	feffffff 	.word	0xfeffffff
 8001e90:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	2220      	movs	r2, #32
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001ea0:	2317      	movs	r3, #23
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2254      	movs	r2, #84	@ 0x54
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001eb0:	2317      	movs	r3, #23
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	781b      	ldrb	r3, [r3, #0]
}
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	b006      	add	sp, #24
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	46c0      	nop			@ (mov r8, r8)

08001ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	1dfb      	adds	r3, r7, #7
 8001eca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	1dfb      	adds	r3, r7, #7
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ed2:	d809      	bhi.n	8001ee8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	001a      	movs	r2, r3
 8001eda:	231f      	movs	r3, #31
 8001edc:	401a      	ands	r2, r3
 8001ede:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <__NVIC_EnableIRQ+0x30>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4091      	lsls	r1, r2
 8001ee4:	000a      	movs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001ee8:	46c0      	nop			@ (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b002      	add	sp, #8
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	0002      	movs	r2, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	1dfb      	adds	r3, r7, #7
 8001f00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	1dfb      	adds	r3, r7, #7
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f08:	d828      	bhi.n	8001f5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc8 <__NVIC_SetPriority+0xd4>)
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b25b      	sxtb	r3, r3
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	33c0      	adds	r3, #192	@ 0xc0
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	589b      	ldr	r3, [r3, r2]
 8001f1a:	1dfa      	adds	r2, r7, #7
 8001f1c:	7812      	ldrb	r2, [r2, #0]
 8001f1e:	0011      	movs	r1, r2
 8001f20:	2203      	movs	r2, #3
 8001f22:	400a      	ands	r2, r1
 8001f24:	00d2      	lsls	r2, r2, #3
 8001f26:	21ff      	movs	r1, #255	@ 0xff
 8001f28:	4091      	lsls	r1, r2
 8001f2a:	000a      	movs	r2, r1
 8001f2c:	43d2      	mvns	r2, r2
 8001f2e:	401a      	ands	r2, r3
 8001f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	019b      	lsls	r3, r3, #6
 8001f36:	22ff      	movs	r2, #255	@ 0xff
 8001f38:	401a      	ands	r2, r3
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	2303      	movs	r3, #3
 8001f42:	4003      	ands	r3, r0
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f48:	481f      	ldr	r0, [pc, #124]	@ (8001fc8 <__NVIC_SetPriority+0xd4>)
 8001f4a:	1dfb      	adds	r3, r7, #7
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b25b      	sxtb	r3, r3
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	430a      	orrs	r2, r1
 8001f54:	33c0      	adds	r3, #192	@ 0xc0
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f5a:	e031      	b.n	8001fc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fcc <__NVIC_SetPriority+0xd8>)
 8001f5e:	1dfb      	adds	r3, r7, #7
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	0019      	movs	r1, r3
 8001f64:	230f      	movs	r3, #15
 8001f66:	400b      	ands	r3, r1
 8001f68:	3b08      	subs	r3, #8
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3306      	adds	r3, #6
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	18d3      	adds	r3, r2, r3
 8001f72:	3304      	adds	r3, #4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1dfa      	adds	r2, r7, #7
 8001f78:	7812      	ldrb	r2, [r2, #0]
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	400a      	ands	r2, r1
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	21ff      	movs	r1, #255	@ 0xff
 8001f84:	4091      	lsls	r1, r2
 8001f86:	000a      	movs	r2, r1
 8001f88:	43d2      	mvns	r2, r2
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	22ff      	movs	r2, #255	@ 0xff
 8001f94:	401a      	ands	r2, r3
 8001f96:	1dfb      	adds	r3, r7, #7
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	4003      	ands	r3, r0
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fa4:	4809      	ldr	r0, [pc, #36]	@ (8001fcc <__NVIC_SetPriority+0xd8>)
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	001c      	movs	r4, r3
 8001fac:	230f      	movs	r3, #15
 8001fae:	4023      	ands	r3, r4
 8001fb0:	3b08      	subs	r3, #8
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	3306      	adds	r3, #6
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	18c3      	adds	r3, r0, r3
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	601a      	str	r2, [r3, #0]
}
 8001fc0:	46c0      	nop			@ (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b003      	add	sp, #12
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	210f      	movs	r1, #15
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	1c02      	adds	r2, r0, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b25b      	sxtb	r3, r3
 8001fea:	0011      	movs	r1, r2
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff ff81 	bl	8001ef4 <__NVIC_SetPriority>
}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b004      	add	sp, #16
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	0002      	movs	r2, r0
 8002002:	1dfb      	adds	r3, r7, #7
 8002004:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b25b      	sxtb	r3, r3
 800200c:	0018      	movs	r0, r3
 800200e:	f7ff ff57 	bl	8001ec0 <__NVIC_EnableIRQ>
}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b002      	add	sp, #8
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202a:	e147      	b.n	80022bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2101      	movs	r1, #1
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4091      	lsls	r1, r2
 8002036:	000a      	movs	r2, r1
 8002038:	4013      	ands	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d100      	bne.n	8002044 <HAL_GPIO_Init+0x28>
 8002042:	e138      	b.n	80022b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2203      	movs	r2, #3
 800204a:	4013      	ands	r3, r2
 800204c:	2b01      	cmp	r3, #1
 800204e:	d005      	beq.n	800205c <HAL_GPIO_Init+0x40>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2203      	movs	r2, #3
 8002056:	4013      	ands	r3, r2
 8002058:	2b02      	cmp	r3, #2
 800205a:	d130      	bne.n	80020be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	2203      	movs	r2, #3
 8002068:	409a      	lsls	r2, r3
 800206a:	0013      	movs	r3, r2
 800206c:	43da      	mvns	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	409a      	lsls	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002092:	2201      	movs	r2, #1
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	43da      	mvns	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	2201      	movs	r2, #1
 80020aa:	401a      	ands	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	409a      	lsls	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2203      	movs	r2, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d017      	beq.n	80020fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	43da      	mvns	r2, r3
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	409a      	lsls	r2, r3
 80020ec:	0013      	movs	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2203      	movs	r2, #3
 8002100:	4013      	ands	r3, r2
 8002102:	2b02      	cmp	r3, #2
 8002104:	d123      	bne.n	800214e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	08da      	lsrs	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3208      	adds	r2, #8
 800210e:	0092      	lsls	r2, r2, #2
 8002110:	58d3      	ldr	r3, [r2, r3]
 8002112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	2207      	movs	r2, #7
 8002118:	4013      	ands	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	409a      	lsls	r2, r3
 8002120:	0013      	movs	r3, r2
 8002122:	43da      	mvns	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4013      	ands	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	691a      	ldr	r2, [r3, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2107      	movs	r1, #7
 8002132:	400b      	ands	r3, r1
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	409a      	lsls	r2, r3
 8002138:	0013      	movs	r3, r2
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	6939      	ldr	r1, [r7, #16]
 800214c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	43da      	mvns	r2, r3
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4013      	ands	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2203      	movs	r2, #3
 800216c:	401a      	ands	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	23c0      	movs	r3, #192	@ 0xc0
 8002188:	029b      	lsls	r3, r3, #10
 800218a:	4013      	ands	r3, r2
 800218c:	d100      	bne.n	8002190 <HAL_GPIO_Init+0x174>
 800218e:	e092      	b.n	80022b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002190:	4a50      	ldr	r2, [pc, #320]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3318      	adds	r3, #24
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	589b      	ldr	r3, [r3, r2]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2203      	movs	r2, #3
 80021a2:	4013      	ands	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	220f      	movs	r2, #15
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	43da      	mvns	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	23a0      	movs	r3, #160	@ 0xa0
 80021b8:	05db      	lsls	r3, r3, #23
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d013      	beq.n	80021e6 <HAL_GPIO_Init+0x1ca>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a45      	ldr	r2, [pc, #276]	@ (80022d8 <HAL_GPIO_Init+0x2bc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00d      	beq.n	80021e2 <HAL_GPIO_Init+0x1c6>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a44      	ldr	r2, [pc, #272]	@ (80022dc <HAL_GPIO_Init+0x2c0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <HAL_GPIO_Init+0x1c2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a43      	ldr	r2, [pc, #268]	@ (80022e0 <HAL_GPIO_Init+0x2c4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_GPIO_Init+0x1be>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e006      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021da:	2305      	movs	r3, #5
 80021dc:	e004      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021de:	2302      	movs	r3, #2
 80021e0:	e002      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x1cc>
 80021e6:	2300      	movs	r3, #0
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	2103      	movs	r1, #3
 80021ec:	400a      	ands	r2, r1
 80021ee:	00d2      	lsls	r2, r2, #3
 80021f0:	4093      	lsls	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80021f8:	4936      	ldr	r1, [pc, #216]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	3318      	adds	r3, #24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002206:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	43da      	mvns	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4013      	ands	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	2380      	movs	r3, #128	@ 0x80
 800221c:	035b      	lsls	r3, r3, #13
 800221e:	4013      	ands	r3, r2
 8002220:	d003      	beq.n	800222a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800222a:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002230:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	43da      	mvns	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	2380      	movs	r3, #128	@ 0x80
 8002246:	039b      	lsls	r3, r3, #14
 8002248:	4013      	ands	r3, r2
 800224a:	d003      	beq.n	8002254 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800225a:	4a1e      	ldr	r2, [pc, #120]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800225c:	2384      	movs	r3, #132	@ 0x84
 800225e:	58d3      	ldr	r3, [r2, r3]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43da      	mvns	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002280:	4914      	ldr	r1, [pc, #80]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 8002282:	2284      	movs	r2, #132	@ 0x84
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002288:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	58d3      	ldr	r3, [r2, r3]
 800228e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	43da      	mvns	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4013      	ands	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	2380      	movs	r3, #128	@ 0x80
 80022a0:	025b      	lsls	r3, r3, #9
 80022a2:	4013      	ands	r3, r2
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022ae:	4909      	ldr	r1, [pc, #36]	@ (80022d4 <HAL_GPIO_Init+0x2b8>)
 80022b0:	2280      	movs	r2, #128	@ 0x80
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	40da      	lsrs	r2, r3
 80022c4:	1e13      	subs	r3, r2, #0
 80022c6:	d000      	beq.n	80022ca <HAL_GPIO_Init+0x2ae>
 80022c8:	e6b0      	b.n	800202c <HAL_GPIO_Init+0x10>
  }
}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b006      	add	sp, #24
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021800 	.word	0x40021800
 80022d8:	50000400 	.word	0x50000400
 80022dc:	50000800 	.word	0x50000800
 80022e0:	50000c00 	.word	0x50000c00

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	0008      	movs	r0, r1
 80022ee:	0011      	movs	r1, r2
 80022f0:	1cbb      	adds	r3, r7, #2
 80022f2:	1c02      	adds	r2, r0, #0
 80022f4:	801a      	strh	r2, [r3, #0]
 80022f6:	1c7b      	adds	r3, r7, #1
 80022f8:	1c0a      	adds	r2, r1, #0
 80022fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fc:	1c7b      	adds	r3, r7, #1
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002304:	1cbb      	adds	r3, r7, #2
 8002306:	881a      	ldrh	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800230e:	1cbb      	adds	r3, r7, #2
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b002      	add	sp, #8
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	0002      	movs	r2, r0
 8002328:	1dbb      	adds	r3, r7, #6
 800232a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800232c:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	1dba      	adds	r2, r7, #6
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	4013      	ands	r3, r2
 8002336:	d008      	beq.n	800234a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002338:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800233a:	1dba      	adds	r2, r7, #6
 800233c:	8812      	ldrh	r2, [r2, #0]
 800233e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002340:	1dbb      	adds	r3, r7, #6
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	0018      	movs	r0, r3
 8002346:	f000 f815 	bl	8002374 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800234a:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	1dba      	adds	r2, r7, #6
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	4013      	ands	r3, r2
 8002354:	d008      	beq.n	8002368 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002356:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002358:	1dba      	adds	r2, r7, #6
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800235e:	1dbb      	adds	r3, r7, #6
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	0018      	movs	r0, r3
 8002364:	f7fe fcd6 	bl	8000d14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002368:	46c0      	nop			@ (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021800 	.word	0x40021800

08002374 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	0002      	movs	r2, r0
 800237c:	1dbb      	adds	r3, r7, #6
 800237e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002380:	46c0      	nop			@ (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e08f      	b.n	80024ba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2241      	movs	r2, #65	@ 0x41
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d107      	bne.n	80023b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2240      	movs	r2, #64	@ 0x40
 80023aa:	2100      	movs	r1, #0
 80023ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7fe f9ef 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2241      	movs	r2, #65	@ 0x41
 80023ba:	2124      	movs	r1, #36	@ 0x24
 80023bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	438a      	bics	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	493b      	ldr	r1, [pc, #236]	@ (80024c4 <HAL_I2C_Init+0x13c>)
 80023d8:	400a      	ands	r2, r1
 80023da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4938      	ldr	r1, [pc, #224]	@ (80024c8 <HAL_I2C_Init+0x140>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d108      	bne.n	8002406 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2180      	movs	r1, #128	@ 0x80
 80023fe:	0209      	lsls	r1, r1, #8
 8002400:	430a      	orrs	r2, r1
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e007      	b.n	8002416 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2184      	movs	r1, #132	@ 0x84
 8002410:	0209      	lsls	r1, r1, #8
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b02      	cmp	r3, #2
 800241c:	d109      	bne.n	8002432 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	0109      	lsls	r1, r1, #4
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	e007      	b.n	8002442 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4923      	ldr	r1, [pc, #140]	@ (80024cc <HAL_I2C_Init+0x144>)
 800243e:	400a      	ands	r2, r1
 8002440:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4920      	ldr	r1, [pc, #128]	@ (80024d0 <HAL_I2C_Init+0x148>)
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68da      	ldr	r2, [r3, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	491a      	ldr	r1, [pc, #104]	@ (80024c8 <HAL_I2C_Init+0x140>)
 800245e:	400a      	ands	r2, r1
 8002460:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	431a      	orrs	r2, r3
 800246c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69d9      	ldr	r1, [r3, #28]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1a      	ldr	r2, [r3, #32]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2241      	movs	r2, #65	@ 0x41
 80024a6:	2120      	movs	r1, #32
 80024a8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2242      	movs	r2, #66	@ 0x42
 80024b4:	2100      	movs	r1, #0
 80024b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	f0ffffff 	.word	0xf0ffffff
 80024c8:	ffff7fff 	.word	0xffff7fff
 80024cc:	fffff7ff 	.word	0xfffff7ff
 80024d0:	02008000 	.word	0x02008000

080024d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2241      	movs	r2, #65	@ 0x41
 80024e2:	5c9b      	ldrb	r3, [r3, r2]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d138      	bne.n	800255c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2240      	movs	r2, #64	@ 0x40
 80024ee:	5c9b      	ldrb	r3, [r3, r2]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d101      	bne.n	80024f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e032      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2240      	movs	r2, #64	@ 0x40
 80024fc:	2101      	movs	r1, #1
 80024fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2241      	movs	r2, #65	@ 0x41
 8002504:	2124      	movs	r1, #36	@ 0x24
 8002506:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	438a      	bics	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4911      	ldr	r1, [pc, #68]	@ (8002568 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002524:	400a      	ands	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6819      	ldr	r1, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2241      	movs	r2, #65	@ 0x41
 800254c:	2120      	movs	r1, #32
 800254e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2240      	movs	r2, #64	@ 0x40
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b002      	add	sp, #8
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	ffffefff 	.word	0xffffefff

0800256c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2241      	movs	r2, #65	@ 0x41
 800257a:	5c9b      	ldrb	r3, [r3, r2]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b20      	cmp	r3, #32
 8002580:	d139      	bne.n	80025f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2240      	movs	r2, #64	@ 0x40
 8002586:	5c9b      	ldrb	r3, [r3, r2]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d101      	bne.n	8002590 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800258c:	2302      	movs	r3, #2
 800258e:	e033      	b.n	80025f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2240      	movs	r2, #64	@ 0x40
 8002594:	2101      	movs	r1, #1
 8002596:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2241      	movs	r2, #65	@ 0x41
 800259c:	2124      	movs	r1, #36	@ 0x24
 800259e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2101      	movs	r1, #1
 80025ac:	438a      	bics	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4a11      	ldr	r2, [pc, #68]	@ (8002600 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025bc:	4013      	ands	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2241      	movs	r2, #65	@ 0x41
 80025e6:	2120      	movs	r1, #32
 80025e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2240      	movs	r2, #64	@ 0x40
 80025ee:	2100      	movs	r1, #0
 80025f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e000      	b.n	80025f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
  }
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b004      	add	sp, #16
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	fffff0ff 	.word	0xfffff0ff

08002604 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a19      	ldr	r2, [pc, #100]	@ (8002678 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002612:	4013      	ands	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	430a      	orrs	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d11f      	bne.n	8002668 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	0013      	movs	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	189b      	adds	r3, r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4912      	ldr	r1, [pc, #72]	@ (8002680 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002636:	0018      	movs	r0, r3
 8002638:	f7fd fd70 	bl	800011c <__udivsi3>
 800263c:	0003      	movs	r3, r0
 800263e:	3301      	adds	r3, #1
 8002640:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002642:	e008      	b.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3b01      	subs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	e001      	b.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e009      	b.n	800266a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002656:	4b07      	ldr	r3, [pc, #28]	@ (8002674 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	2380      	movs	r3, #128	@ 0x80
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	401a      	ands	r2, r3
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	429a      	cmp	r2, r3
 8002666:	d0ed      	beq.n	8002644 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b004      	add	sp, #16
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	40007000 	.word	0x40007000
 8002678:	fffff9ff 	.word	0xfffff9ff
 800267c:	200000c0 	.word	0x200000c0
 8002680:	000f4240 	.word	0x000f4240

08002684 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <LL_RCC_GetAPB1Prescaler+0x14>)
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	23e0      	movs	r3, #224	@ 0xe0
 800268e:	01db      	lsls	r3, r3, #7
 8002690:	4013      	ands	r3, r2
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000

0800269c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e2f3      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	d100      	bne.n	80026ba <HAL_RCC_OscConfig+0x1e>
 80026b8:	e07c      	b.n	80027b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ba:	4bc3      	ldr	r3, [pc, #780]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2238      	movs	r2, #56	@ 0x38
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c4:	4bc0      	ldr	r3, [pc, #768]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2203      	movs	r2, #3
 80026ca:	4013      	ands	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d102      	bne.n	80026da <HAL_RCC_OscConfig+0x3e>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d002      	beq.n	80026e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d10b      	bne.n	80026f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	4bb9      	ldr	r3, [pc, #740]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	4013      	ands	r3, r2
 80026ea:	d062      	beq.n	80027b2 <HAL_RCC_OscConfig+0x116>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d15e      	bne.n	80027b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e2ce      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	025b      	lsls	r3, r3, #9
 8002700:	429a      	cmp	r2, r3
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x78>
 8002704:	4bb0      	ldr	r3, [pc, #704]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4baf      	ldr	r3, [pc, #700]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800270a:	2180      	movs	r1, #128	@ 0x80
 800270c:	0249      	lsls	r1, r1, #9
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e020      	b.n	8002756 <HAL_RCC_OscConfig+0xba>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	23a0      	movs	r3, #160	@ 0xa0
 800271a:	02db      	lsls	r3, r3, #11
 800271c:	429a      	cmp	r2, r3
 800271e:	d10e      	bne.n	800273e <HAL_RCC_OscConfig+0xa2>
 8002720:	4ba9      	ldr	r3, [pc, #676]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	4ba8      	ldr	r3, [pc, #672]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002726:	2180      	movs	r1, #128	@ 0x80
 8002728:	02c9      	lsls	r1, r1, #11
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	4ba6      	ldr	r3, [pc, #664]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	4ba5      	ldr	r3, [pc, #660]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002734:	2180      	movs	r1, #128	@ 0x80
 8002736:	0249      	lsls	r1, r1, #9
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e00b      	b.n	8002756 <HAL_RCC_OscConfig+0xba>
 800273e:	4ba2      	ldr	r3, [pc, #648]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4ba1      	ldr	r3, [pc, #644]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002744:	49a1      	ldr	r1, [pc, #644]	@ (80029cc <HAL_RCC_OscConfig+0x330>)
 8002746:	400a      	ands	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	4b9f      	ldr	r3, [pc, #636]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b9e      	ldr	r3, [pc, #632]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002750:	499f      	ldr	r1, [pc, #636]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002752:	400a      	ands	r2, r1
 8002754:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d014      	beq.n	8002788 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275e:	f7fe ff03 	bl	8001568 <HAL_GetTick>
 8002762:	0003      	movs	r3, r0
 8002764:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002768:	f7fe fefe 	bl	8001568 <HAL_GetTick>
 800276c:	0002      	movs	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	@ 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e28d      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277a:	4b93      	ldr	r3, [pc, #588]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	029b      	lsls	r3, r3, #10
 8002782:	4013      	ands	r3, r2
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0xcc>
 8002786:	e015      	b.n	80027b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe feee 	bl	8001568 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002792:	f7fe fee9 	bl	8001568 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	@ 0x64
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e278      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a4:	4b88      	ldr	r3, [pc, #544]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	029b      	lsls	r3, r3, #10
 80027ac:	4013      	ands	r3, r2
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0xf6>
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2202      	movs	r2, #2
 80027ba:	4013      	ands	r3, r2
 80027bc:	d100      	bne.n	80027c0 <HAL_RCC_OscConfig+0x124>
 80027be:	e099      	b.n	80028f4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c0:	4b81      	ldr	r3, [pc, #516]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2238      	movs	r2, #56	@ 0x38
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ca:	4b7f      	ldr	r3, [pc, #508]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2203      	movs	r2, #3
 80027d0:	4013      	ands	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b10      	cmp	r3, #16
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_OscConfig+0x144>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d002      	beq.n	80027e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d135      	bne.n	8002852 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027e6:	4b78      	ldr	r3, [pc, #480]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4013      	ands	r3, r2
 80027f0:	d005      	beq.n	80027fe <HAL_RCC_OscConfig+0x162>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e24b      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b72      	ldr	r3, [pc, #456]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4a74      	ldr	r2, [pc, #464]	@ (80029d4 <HAL_RCC_OscConfig+0x338>)
 8002804:	4013      	ands	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	021a      	lsls	r2, r3, #8
 800280e:	4b6e      	ldr	r3, [pc, #440]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d112      	bne.n	8002840 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800281a:	4b6b      	ldr	r3, [pc, #428]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6e      	ldr	r2, [pc, #440]	@ (80029d8 <HAL_RCC_OscConfig+0x33c>)
 8002820:	4013      	ands	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	4b67      	ldr	r3, [pc, #412]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800282e:	4b66      	ldr	r3, [pc, #408]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	0adb      	lsrs	r3, r3, #11
 8002834:	2207      	movs	r2, #7
 8002836:	4013      	ands	r3, r2
 8002838:	4a68      	ldr	r2, [pc, #416]	@ (80029dc <HAL_RCC_OscConfig+0x340>)
 800283a:	40da      	lsrs	r2, r3
 800283c:	4b68      	ldr	r3, [pc, #416]	@ (80029e0 <HAL_RCC_OscConfig+0x344>)
 800283e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002840:	4b68      	ldr	r3, [pc, #416]	@ (80029e4 <HAL_RCC_OscConfig+0x348>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0018      	movs	r0, r3
 8002846:	f7fe fb7d 	bl	8000f44 <HAL_InitTick>
 800284a:	1e03      	subs	r3, r0, #0
 800284c:	d051      	beq.n	80028f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e221      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d030      	beq.n	80028bc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800285a:	4b5b      	ldr	r3, [pc, #364]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a5e      	ldr	r2, [pc, #376]	@ (80029d8 <HAL_RCC_OscConfig+0x33c>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	4b57      	ldr	r3, [pc, #348]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800286e:	4b56      	ldr	r3, [pc, #344]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b55      	ldr	r3, [pc, #340]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002874:	2180      	movs	r1, #128	@ 0x80
 8002876:	0049      	lsls	r1, r1, #1
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fe74 	bl	8001568 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002886:	f7fe fe6f 	bl	8001568 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1fe      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002898:	4b4b      	ldr	r3, [pc, #300]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4013      	ands	r3, r2
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b48      	ldr	r3, [pc, #288]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a4a      	ldr	r2, [pc, #296]	@ (80029d4 <HAL_RCC_OscConfig+0x338>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	4b44      	ldr	r3, [pc, #272]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	e01b      	b.n	80028f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80028bc:	4b42      	ldr	r3, [pc, #264]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80028c2:	4949      	ldr	r1, [pc, #292]	@ (80029e8 <HAL_RCC_OscConfig+0x34c>)
 80028c4:	400a      	ands	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe fe4e 	bl	8001568 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe fe49 	bl	8001568 <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e1d8      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e4:	4b38      	ldr	r3, [pc, #224]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4013      	ands	r3, r2
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x236>
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2208      	movs	r2, #8
 80028fa:	4013      	ands	r3, r2
 80028fc:	d047      	beq.n	800298e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80028fe:	4b32      	ldr	r3, [pc, #200]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2238      	movs	r2, #56	@ 0x38
 8002904:	4013      	ands	r3, r2
 8002906:	2b18      	cmp	r3, #24
 8002908:	d10a      	bne.n	8002920 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800290a:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800290c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290e:	2202      	movs	r2, #2
 8002910:	4013      	ands	r3, r2
 8002912:	d03c      	beq.n	800298e <HAL_RCC_OscConfig+0x2f2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d138      	bne.n	800298e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e1ba      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d019      	beq.n	800295c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002928:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800292a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800292c:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800292e:	2101      	movs	r1, #1
 8002930:	430a      	orrs	r2, r1
 8002932:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002934:	f7fe fe18 	bl	8001568 <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293e:	f7fe fe13 	bl	8001568 <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1a2      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002952:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002954:	2202      	movs	r2, #2
 8002956:	4013      	ands	r3, r2
 8002958:	d0f1      	beq.n	800293e <HAL_RCC_OscConfig+0x2a2>
 800295a:	e018      	b.n	800298e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 800295e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002960:	4b19      	ldr	r3, [pc, #100]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002962:	2101      	movs	r1, #1
 8002964:	438a      	bics	r2, r1
 8002966:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe fdfe 	bl	8001568 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002972:	f7fe fdf9 	bl	8001568 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e188      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002984:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 8002986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002988:	2202      	movs	r2, #2
 800298a:	4013      	ands	r3, r2
 800298c:	d1f1      	bne.n	8002972 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2204      	movs	r2, #4
 8002994:	4013      	ands	r3, r2
 8002996:	d100      	bne.n	800299a <HAL_RCC_OscConfig+0x2fe>
 8002998:	e0c6      	b.n	8002b28 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299a:	231f      	movs	r3, #31
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2238      	movs	r2, #56	@ 0x38
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d11e      	bne.n	80029ec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_RCC_OscConfig+0x32c>)
 80029b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b2:	2202      	movs	r2, #2
 80029b4:	4013      	ands	r3, r2
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_OscConfig+0x31e>
 80029b8:	e0b6      	b.n	8002b28 <HAL_RCC_OscConfig+0x48c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d000      	beq.n	80029c4 <HAL_RCC_OscConfig+0x328>
 80029c2:	e0b1      	b.n	8002b28 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e166      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	fffeffff 	.word	0xfffeffff
 80029d0:	fffbffff 	.word	0xfffbffff
 80029d4:	ffff80ff 	.word	0xffff80ff
 80029d8:	ffffc7ff 	.word	0xffffc7ff
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	200000c0 	.word	0x200000c0
 80029e4:	200000c4 	.word	0x200000c4
 80029e8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029ec:	4bac      	ldr	r3, [pc, #688]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 80029ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80029f0:	2380      	movs	r3, #128	@ 0x80
 80029f2:	055b      	lsls	r3, r3, #21
 80029f4:	4013      	ands	r3, r2
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_OscConfig+0x360>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x362>
 80029fc:	2300      	movs	r3, #0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d011      	beq.n	8002a26 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4ba7      	ldr	r3, [pc, #668]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a06:	4ba6      	ldr	r3, [pc, #664]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a08:	2180      	movs	r1, #128	@ 0x80
 8002a0a:	0549      	lsls	r1, r1, #21
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a10:	4ba3      	ldr	r3, [pc, #652]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a14:	2380      	movs	r3, #128	@ 0x80
 8002a16:	055b      	lsls	r3, r3, #21
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a1e:	231f      	movs	r3, #31
 8002a20:	18fb      	adds	r3, r7, r3
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a26:	4b9f      	ldr	r3, [pc, #636]	@ (8002ca4 <HAL_RCC_OscConfig+0x608>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	@ 0x80
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d11a      	bne.n	8002a68 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a32:	4b9c      	ldr	r3, [pc, #624]	@ (8002ca4 <HAL_RCC_OscConfig+0x608>)
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	4b9b      	ldr	r3, [pc, #620]	@ (8002ca4 <HAL_RCC_OscConfig+0x608>)
 8002a38:	2180      	movs	r1, #128	@ 0x80
 8002a3a:	0049      	lsls	r1, r1, #1
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a40:	f7fe fd92 	bl	8001568 <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7fe fd8d 	bl	8001568 <HAL_GetTick>
 8002a4e:	0002      	movs	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e11c      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5c:	4b91      	ldr	r3, [pc, #580]	@ (8002ca4 <HAL_RCC_OscConfig+0x608>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	@ 0x80
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3e2>
 8002a70:	4b8b      	ldr	r3, [pc, #556]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a74:	4b8a      	ldr	r3, [pc, #552]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x41c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x404>
 8002a86:	4b86      	ldr	r3, [pc, #536]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a8a:	4b85      	ldr	r3, [pc, #532]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a92:	4b83      	ldr	r3, [pc, #524]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a96:	4b82      	ldr	r3, [pc, #520]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002a98:	2101      	movs	r1, #1
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a9e:	e00b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x41c>
 8002aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002aa2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	438a      	bics	r2, r1
 8002aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aac:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002aae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ab0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	438a      	bics	r2, r1
 8002ab6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d014      	beq.n	8002aea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fd52 	bl	8001568 <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac8:	e009      	b.n	8002ade <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aca:	f7fe fd4d 	bl	8001568 <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	4a74      	ldr	r2, [pc, #464]	@ (8002ca8 <HAL_RCC_OscConfig+0x60c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0db      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ade:	4b70      	ldr	r3, [pc, #448]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x42e>
 8002ae8:	e013      	b.n	8002b12 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aea:	f7fe fd3d 	bl	8001568 <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af2:	e009      	b.n	8002b08 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fe fd38 	bl	8001568 <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	4a6a      	ldr	r2, [pc, #424]	@ (8002ca8 <HAL_RCC_OscConfig+0x60c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0c6      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b08:	4b65      	ldr	r3, [pc, #404]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b12:	231f      	movs	r3, #31
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b1c:	4b60      	ldr	r3, [pc, #384]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b20:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002b22:	4962      	ldr	r1, [pc, #392]	@ (8002cac <HAL_RCC_OscConfig+0x610>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d100      	bne.n	8002b32 <HAL_RCC_OscConfig+0x496>
 8002b30:	e0b0      	b.n	8002c94 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b32:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2238      	movs	r2, #56	@ 0x38
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d100      	bne.n	8002b40 <HAL_RCC_OscConfig+0x4a4>
 8002b3e:	e078      	b.n	8002c32 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d153      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b48:	4b55      	ldr	r3, [pc, #340]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b54      	ldr	r3, [pc, #336]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002b4e:	4958      	ldr	r1, [pc, #352]	@ (8002cb0 <HAL_RCC_OscConfig+0x614>)
 8002b50:	400a      	ands	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fd08 	bl	8001568 <HAL_GetTick>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe fd03 	bl	8001568 <HAL_GetTick>
 8002b62:	0002      	movs	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e092      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	049b      	lsls	r3, r3, #18
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7c:	4b48      	ldr	r3, [pc, #288]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb4 <HAL_RCC_OscConfig+0x618>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1a      	ldr	r2, [r3, #32]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002baa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	4b3c      	ldr	r3, [pc, #240]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002bb0:	2180      	movs	r1, #128	@ 0x80
 8002bb2:	0449      	lsls	r1, r1, #17
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002bb8:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002bbe:	2180      	movs	r1, #128	@ 0x80
 8002bc0:	0549      	lsls	r1, r1, #21
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fccf 	bl	8001568 <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe fcca 	bl	8001568 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e059      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	2380      	movs	r3, #128	@ 0x80
 8002be8:	049b      	lsls	r3, r3, #18
 8002bea:	4013      	ands	r3, r2
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x534>
 8002bee:	e051      	b.n	8002c94 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002bf6:	492e      	ldr	r1, [pc, #184]	@ (8002cb0 <HAL_RCC_OscConfig+0x614>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f7fe fcb4 	bl	8001568 <HAL_GetTick>
 8002c00:	0003      	movs	r3, r0
 8002c02:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c06:	f7fe fcaf 	bl	8001568 <HAL_GetTick>
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e03e      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c18:	4b21      	ldr	r3, [pc, #132]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	049b      	lsls	r3, r3, #18
 8002c20:	4013      	ands	r3, r2
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002c24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002c2a:	4923      	ldr	r1, [pc, #140]	@ (8002cb8 <HAL_RCC_OscConfig+0x61c>)
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	60da      	str	r2, [r3, #12]
 8002c30:	e030      	b.n	8002c94 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e02b      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ca0 <HAL_RCC_OscConfig+0x604>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	2203      	movs	r2, #3
 8002c48:	401a      	ands	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d11e      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2270      	movs	r2, #112	@ 0x70
 8002c56:	401a      	ands	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d117      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	23fe      	movs	r3, #254	@ 0xfe
 8002c64:	01db      	lsls	r3, r3, #7
 8002c66:	401a      	ands	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d10e      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	23f8      	movs	r3, #248	@ 0xf8
 8002c76:	039b      	lsls	r3, r3, #14
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d106      	bne.n	8002c90 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	0f5b      	lsrs	r3, r3, #29
 8002c86:	075a      	lsls	r2, r3, #29
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	0018      	movs	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b008      	add	sp, #32
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	00001388 	.word	0x00001388
 8002cac:	efffffff 	.word	0xefffffff
 8002cb0:	feffffff 	.word	0xfeffffff
 8002cb4:	1fc1808c 	.word	0x1fc1808c
 8002cb8:	effefffc 	.word	0xeffefffc

08002cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0e9      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd0:	4b76      	ldr	r3, [pc, #472]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d91e      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cde:	4b73      	ldr	r3, [pc, #460]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	4b70      	ldr	r3, [pc, #448]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cf0:	f7fe fc3a 	bl	8001568 <HAL_GetTick>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cf8:	e009      	b.n	8002d0e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfa:	f7fe fc35 	bl	8001568 <HAL_GetTick>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	4a6a      	ldr	r2, [pc, #424]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0ca      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d0e:	4b67      	ldr	r3, [pc, #412]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2207      	movs	r2, #7
 8002d14:	4013      	ands	r3, r2
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1ee      	bne.n	8002cfa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2202      	movs	r2, #2
 8002d22:	4013      	ands	r3, r2
 8002d24:	d015      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d006      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d30:	4b60      	ldr	r3, [pc, #384]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	4b5f      	ldr	r3, [pc, #380]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d36:	21e0      	movs	r1, #224	@ 0xe0
 8002d38:	01c9      	lsls	r1, r1, #7
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	0019      	movs	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	4b59      	ldr	r3, [pc, #356]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d057      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d64:	4b53      	ldr	r3, [pc, #332]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	@ 0x80
 8002d6a:	029b      	lsls	r3, r3, #10
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d12b      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e097      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	049b      	lsls	r3, r3, #18
 8002d84:	4013      	ands	r3, r2
 8002d86:	d11f      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e08b      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d94:	4b47      	ldr	r3, [pc, #284]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d113      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e07f      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dac:	4b41      	ldr	r3, [pc, #260]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db0:	2202      	movs	r2, #2
 8002db2:	4013      	ands	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e074      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dba:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e06d      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	2207      	movs	r2, #7
 8002dce:	4393      	bics	r3, r2
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fbc4 	bl	8001568 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de4:	e009      	b.n	8002dfa <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de6:	f7fe fbbf 	bl	8001568 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	4a2f      	ldr	r2, [pc, #188]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e054      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2238      	movs	r2, #56	@ 0x38
 8002e00:	401a      	ands	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1ec      	bne.n	8002de6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b27      	ldr	r3, [pc, #156]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2207      	movs	r2, #7
 8002e12:	4013      	ands	r3, r2
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d21e      	bcs.n	8002e58 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2207      	movs	r2, #7
 8002e20:	4393      	bics	r3, r2
 8002e22:	0019      	movs	r1, r3
 8002e24:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e2c:	f7fe fb9c 	bl	8001568 <HAL_GetTick>
 8002e30:	0003      	movs	r3, r0
 8002e32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e34:	e009      	b.n	8002e4a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e36:	f7fe fb97 	bl	8001568 <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e02c      	b.n	8002ea4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e4a:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2207      	movs	r2, #7
 8002e50:	4013      	ands	r3, r2
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d1ee      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d009      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e62:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <HAL_RCC_ClockConfig+0x200>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	0019      	movs	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e72:	430a      	orrs	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e76:	f000 f829 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8002e7a:	0001      	movs	r1, r0
 8002e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	220f      	movs	r2, #15
 8002e84:	401a      	ands	r2, r3
 8002e86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec0 <HAL_RCC_ClockConfig+0x204>)
 8002e88:	0092      	lsls	r2, r2, #2
 8002e8a:	58d3      	ldr	r3, [r2, r3]
 8002e8c:	221f      	movs	r2, #31
 8002e8e:	4013      	ands	r3, r2
 8002e90:	000a      	movs	r2, r1
 8002e92:	40da      	lsrs	r2, r3
 8002e94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec4 <HAL_RCC_ClockConfig+0x208>)
 8002e96:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e98:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <HAL_RCC_ClockConfig+0x20c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7fe f851 	bl	8000f44 <HAL_InitTick>
 8002ea2:	0003      	movs	r3, r0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40022000 	.word	0x40022000
 8002eb0:	00001388 	.word	0x00001388
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	fffff0ff 	.word	0xfffff0ff
 8002ebc:	ffff8fff 	.word	0xffff8fff
 8002ec0:	0800b304 	.word	0x0800b304
 8002ec4:	200000c0 	.word	0x200000c0
 8002ec8:	200000c4 	.word	0x200000c4

08002ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2238      	movs	r2, #56	@ 0x38
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d10f      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002edc:	4b39      	ldr	r3, [pc, #228]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	0adb      	lsrs	r3, r3, #11
 8002ee2:	2207      	movs	r2, #7
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	0013      	movs	r3, r2
 8002eec:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	4835      	ldr	r0, [pc, #212]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ef2:	f7fd f913 	bl	800011c <__udivsi3>
 8002ef6:	0003      	movs	r3, r0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	e05d      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002efc:	4b31      	ldr	r3, [pc, #196]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	2238      	movs	r2, #56	@ 0x38
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d102      	bne.n	8002f0e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f08:	4b30      	ldr	r3, [pc, #192]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x100>)
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	e054      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2238      	movs	r2, #56	@ 0x38
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d138      	bne.n	8002f8c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2203      	movs	r2, #3
 8002f20:	4013      	ands	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f24:	4b27      	ldr	r3, [pc, #156]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b03      	cmp	r3, #3
 8002f36:	d10d      	bne.n	8002f54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	4824      	ldr	r0, [pc, #144]	@ (8002fcc <HAL_RCC_GetSysClockFreq+0x100>)
 8002f3c:	f7fd f8ee 	bl	800011c <__udivsi3>
 8002f40:	0003      	movs	r3, r0
 8002f42:	0019      	movs	r1, r3
 8002f44:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	227f      	movs	r2, #127	@ 0x7f
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	434b      	muls	r3, r1
 8002f50:	617b      	str	r3, [r7, #20]
        break;
 8002f52:	e00d      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	481c      	ldr	r0, [pc, #112]	@ (8002fc8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f58:	f7fd f8e0 	bl	800011c <__udivsi3>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	0019      	movs	r1, r3
 8002f60:	4b18      	ldr	r3, [pc, #96]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	227f      	movs	r2, #127	@ 0x7f
 8002f68:	4013      	ands	r3, r2
 8002f6a:	434b      	muls	r3, r1
 8002f6c:	617b      	str	r3, [r7, #20]
        break;
 8002f6e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f70:	4b14      	ldr	r3, [pc, #80]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0f5b      	lsrs	r3, r3, #29
 8002f76:	2207      	movs	r2, #7
 8002f78:	4013      	ands	r3, r2
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	6978      	ldr	r0, [r7, #20]
 8002f82:	f7fd f8cb 	bl	800011c <__udivsi3>
 8002f86:	0003      	movs	r3, r0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	e015      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	2238      	movs	r2, #56	@ 0x38
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d103      	bne.n	8002fa0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002fa0:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2238      	movs	r2, #56	@ 0x38
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b18      	cmp	r3, #24
 8002faa:	d103      	bne.n	8002fb4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fac:	23fa      	movs	r3, #250	@ 0xfa
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fb8:	693b      	ldr	r3, [r7, #16]
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b006      	add	sp, #24
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	00f42400 	.word	0x00f42400
 8002fcc:	007a1200 	.word	0x007a1200

08002fd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fd4:	4b02      	ldr	r3, [pc, #8]	@ (8002fe0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	200000c0 	.word	0x200000c0

08002fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002fe8:	f7ff fff2 	bl	8002fd0 <HAL_RCC_GetHCLKFreq>
 8002fec:	0004      	movs	r4, r0
 8002fee:	f7ff fb49 	bl	8002684 <LL_RCC_GetAPB1Prescaler>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	0b1a      	lsrs	r2, r3, #12
 8002ff6:	4b05      	ldr	r3, [pc, #20]	@ (800300c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	58d3      	ldr	r3, [r2, r3]
 8002ffc:	221f      	movs	r2, #31
 8002ffe:	4013      	ands	r3, r2
 8003000:	40dc      	lsrs	r4, r3
 8003002:	0023      	movs	r3, r4
}
 8003004:	0018      	movs	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	bdb0      	pop	{r4, r5, r7, pc}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	0800b344 	.word	0x0800b344

08003010 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2207      	movs	r2, #7
 800301e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003020:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <HAL_RCC_GetClockConfig+0x4c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2207      	movs	r2, #7
 8003026:	401a      	ands	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800302c:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <HAL_RCC_GetClockConfig+0x4c>)
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	23f0      	movs	r3, #240	@ 0xf0
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	401a      	ands	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800303a:	4b08      	ldr	r3, [pc, #32]	@ (800305c <HAL_RCC_GetClockConfig+0x4c>)
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	23e0      	movs	r3, #224	@ 0xe0
 8003040:	01db      	lsls	r3, r3, #7
 8003042:	401a      	ands	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003048:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_RCC_GetClockConfig+0x50>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2207      	movs	r2, #7
 800304e:	401a      	ands	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b002      	add	sp, #8
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40021000 	.word	0x40021000
 8003060:	40022000 	.word	0x40022000

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800306c:	2313      	movs	r3, #19
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003074:	2312      	movs	r3, #18
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	@ 0x80
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	4013      	ands	r3, r2
 8003086:	d100      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003088:	e0a3      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2011      	movs	r0, #17
 800308c:	183b      	adds	r3, r7, r0
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b86      	ldr	r3, [pc, #536]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003096:	2380      	movs	r3, #128	@ 0x80
 8003098:	055b      	lsls	r3, r3, #21
 800309a:	4013      	ands	r3, r2
 800309c:	d110      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4b83      	ldr	r3, [pc, #524]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030a2:	4b82      	ldr	r3, [pc, #520]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	0549      	lsls	r1, r1, #21
 80030a8:	430a      	orrs	r2, r1
 80030aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030ac:	4b7f      	ldr	r3, [pc, #508]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030b0:	2380      	movs	r3, #128	@ 0x80
 80030b2:	055b      	lsls	r3, r3, #21
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c0:	4b7b      	ldr	r3, [pc, #492]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b7a      	ldr	r3, [pc, #488]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030c6:	2180      	movs	r1, #128	@ 0x80
 80030c8:	0049      	lsls	r1, r1, #1
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ce:	f7fe fa4b 	bl	8001568 <HAL_GetTick>
 80030d2:	0003      	movs	r3, r0
 80030d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d6:	e00b      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7fe fa46 	bl	8001568 <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d904      	bls.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030e6:	2313      	movs	r3, #19
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2203      	movs	r2, #3
 80030ec:	701a      	strb	r2, [r3, #0]
        break;
 80030ee:	e005      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030f0:	4b6f      	ldr	r3, [pc, #444]	@ (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	d0ed      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030fc:	2313      	movs	r3, #19
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d154      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003106:	4b69      	ldr	r3, [pc, #420]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003108:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800310a:	23c0      	movs	r3, #192	@ 0xc0
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4013      	ands	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d019      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	429a      	cmp	r2, r3
 8003120:	d014      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003122:	4b62      	ldr	r3, [pc, #392]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003126:	4a63      	ldr	r2, [pc, #396]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003128:	4013      	ands	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312c:	4b5f      	ldr	r3, [pc, #380]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800312e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003130:	4b5e      	ldr	r3, [pc, #376]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003132:	2180      	movs	r1, #128	@ 0x80
 8003134:	0249      	lsls	r1, r1, #9
 8003136:	430a      	orrs	r2, r1
 8003138:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800313a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800313c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800313e:	4b5b      	ldr	r3, [pc, #364]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003140:	495d      	ldr	r1, [pc, #372]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003142:	400a      	ands	r2, r1
 8003144:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003146:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2201      	movs	r2, #1
 8003150:	4013      	ands	r3, r2
 8003152:	d016      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe fa08 	bl	8001568 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315c:	e00c      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fe fa03 	bl	8001568 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	4a54      	ldr	r2, [pc, #336]	@ (80032bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d904      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800316e:	2313      	movs	r3, #19
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2203      	movs	r2, #3
 8003174:	701a      	strb	r2, [r3, #0]
            break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003178:	4b4c      	ldr	r3, [pc, #304]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317c:	2202      	movs	r2, #2
 800317e:	4013      	ands	r3, r2
 8003180:	d0ed      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003182:	2313      	movs	r3, #19
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318c:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	4a48      	ldr	r2, [pc, #288]	@ (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	4b44      	ldr	r3, [pc, #272]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319c:	430a      	orrs	r2, r1
 800319e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031a0:	e00c      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a2:	2312      	movs	r3, #18
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2213      	movs	r2, #19
 80031a8:	18ba      	adds	r2, r7, r2
 80031aa:	7812      	ldrb	r2, [r2, #0]
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e005      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	2312      	movs	r3, #18
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	2213      	movs	r2, #19
 80031b6:	18ba      	adds	r2, r7, r2
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031bc:	2311      	movs	r3, #17
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4b39      	ldr	r3, [pc, #228]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031ca:	4b38      	ldr	r3, [pc, #224]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031cc:	493c      	ldr	r1, [pc, #240]	@ (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80031ce:	400a      	ands	r2, r1
 80031d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031dc:	4b33      	ldr	r3, [pc, #204]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e0:	2203      	movs	r2, #3
 80031e2:	4393      	bics	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4b30      	ldr	r3, [pc, #192]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2202      	movs	r2, #2
 80031f6:	4013      	ands	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fa:	4b2c      	ldr	r3, [pc, #176]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fe:	220c      	movs	r2, #12
 8003200:	4393      	bics	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	4b28      	ldr	r3, [pc, #160]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800320a:	430a      	orrs	r2, r1
 800320c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2220      	movs	r2, #32
 8003214:	4013      	ands	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003218:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800321a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321c:	4a29      	ldr	r2, [pc, #164]	@ (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	4013      	ands	r3, r2
 8003220:	0019      	movs	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b21      	ldr	r3, [pc, #132]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003228:	430a      	orrs	r2, r1
 800322a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	01db      	lsls	r3, r3, #7
 8003234:	4013      	ands	r3, r2
 8003236:	d015      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003238:	4b1c      	ldr	r3, [pc, #112]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	0899      	lsrs	r1, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003246:	430a      	orrs	r2, r1
 8003248:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	2380      	movs	r3, #128	@ 0x80
 8003250:	05db      	lsls	r3, r3, #23
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003256:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800325c:	2180      	movs	r1, #128	@ 0x80
 800325e:	0249      	lsls	r1, r1, #9
 8003260:	430a      	orrs	r2, r1
 8003262:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	4013      	ands	r3, r2
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003270:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003274:	4a14      	ldr	r2, [pc, #80]	@ (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003280:	430a      	orrs	r2, r1
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	01db      	lsls	r3, r3, #7
 800328c:	429a      	cmp	r2, r3
 800328e:	d106      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003296:	2180      	movs	r1, #128	@ 0x80
 8003298:	0249      	lsls	r1, r1, #9
 800329a:	430a      	orrs	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800329e:	2312      	movs	r3, #18
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	781b      	ldrb	r3, [r3, #0]
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b006      	add	sp, #24
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	fffffcff 	.word	0xfffffcff
 80032b8:	fffeffff 	.word	0xfffeffff
 80032bc:	00001388 	.word	0x00001388
 80032c0:	efffffff 	.word	0xefffffff
 80032c4:	ffffcfff 	.word	0xffffcfff
 80032c8:	ffff3fff 	.word	0xffff3fff

080032cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0a8      	b.n	8003430 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	2382      	movs	r3, #130	@ 0x82
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d009      	beq.n	8003306 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	61da      	str	r2, [r3, #28]
 80032f8:	e005      	b.n	8003306 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	225d      	movs	r2, #93	@ 0x5d
 8003310:	5c9b      	ldrb	r3, [r3, r2]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d107      	bne.n	8003328 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	225c      	movs	r2, #92	@ 0x5c
 800331c:	2100      	movs	r1, #0
 800331e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	0018      	movs	r0, r3
 8003324:	f7fd fd74 	bl	8000e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	225d      	movs	r2, #93	@ 0x5d
 800332c:	2102      	movs	r1, #2
 800332e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2140      	movs	r1, #64	@ 0x40
 800333c:	438a      	bics	r2, r1
 800333e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68da      	ldr	r2, [r3, #12]
 8003344:	23e0      	movs	r3, #224	@ 0xe0
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	429a      	cmp	r2, r3
 800334a:	d902      	bls.n	8003352 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e002      	b.n	8003358 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	015b      	lsls	r3, r3, #5
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	23f0      	movs	r3, #240	@ 0xf0
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	429a      	cmp	r2, r3
 8003362:	d008      	beq.n	8003376 <HAL_SPI_Init+0xaa>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68da      	ldr	r2, [r3, #12]
 8003368:	23e0      	movs	r3, #224	@ 0xe0
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	429a      	cmp	r2, r3
 800336e:	d002      	beq.n	8003376 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	2382      	movs	r3, #130	@ 0x82
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6899      	ldr	r1, [r3, #8]
 8003384:	2384      	movs	r3, #132	@ 0x84
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	400b      	ands	r3, r1
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2102      	movs	r1, #2
 8003392:	400b      	ands	r3, r1
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	2101      	movs	r1, #1
 800339c:	400b      	ands	r3, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6999      	ldr	r1, [r3, #24]
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	400b      	ands	r3, r1
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2138      	movs	r1, #56	@ 0x38
 80033b2:	400b      	ands	r3, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	2180      	movs	r1, #128	@ 0x80
 80033bc:	400b      	ands	r3, r1
 80033be:	431a      	orrs	r2, r3
 80033c0:	0011      	movs	r1, r2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033c6:	2380      	movs	r3, #128	@ 0x80
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	401a      	ands	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	0c1b      	lsrs	r3, r3, #16
 80033da:	2204      	movs	r2, #4
 80033dc:	401a      	ands	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e2:	2110      	movs	r1, #16
 80033e4:	400b      	ands	r3, r1
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ec:	2108      	movs	r1, #8
 80033ee:	400b      	ands	r3, r1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68d9      	ldr	r1, [r3, #12]
 80033f6:	23f0      	movs	r3, #240	@ 0xf0
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	400b      	ands	r3, r1
 80033fc:	431a      	orrs	r2, r3
 80033fe:	0011      	movs	r1, r2
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	015b      	lsls	r3, r3, #5
 8003406:	401a      	ands	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69da      	ldr	r2, [r3, #28]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4907      	ldr	r1, [pc, #28]	@ (8003438 <HAL_SPI_Init+0x16c>)
 800341c:	400a      	ands	r2, r1
 800341e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	225d      	movs	r2, #93	@ 0x5d
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	fffff7ff 	.word	0xfffff7ff

0800343c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	1dbb      	adds	r3, r7, #6
 800344a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800344c:	231f      	movs	r3, #31
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	225c      	movs	r2, #92	@ 0x5c
 8003458:	5c9b      	ldrb	r3, [r3, r2]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_SPI_Transmit+0x26>
 800345e:	2302      	movs	r3, #2
 8003460:	e147      	b.n	80036f2 <HAL_SPI_Transmit+0x2b6>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	225c      	movs	r2, #92	@ 0x5c
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800346a:	f7fe f87d 	bl	8001568 <HAL_GetTick>
 800346e:	0003      	movs	r3, r0
 8003470:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003472:	2316      	movs	r3, #22
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	1dba      	adds	r2, r7, #6
 8003478:	8812      	ldrh	r2, [r2, #0]
 800347a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	225d      	movs	r2, #93	@ 0x5d
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d004      	beq.n	8003492 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003488:	231f      	movs	r3, #31
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2202      	movs	r2, #2
 800348e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003490:	e128      	b.n	80036e4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_SPI_Transmit+0x64>
 8003498:	1dbb      	adds	r3, r7, #6
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80034a0:	231f      	movs	r3, #31
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80034a8:	e11c      	b.n	80036e4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	225d      	movs	r2, #93	@ 0x5d
 80034ae:	2103      	movs	r1, #3
 80034b0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1dba      	adds	r2, r7, #6
 80034c2:	8812      	ldrh	r2, [r2, #0]
 80034c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1dba      	adds	r2, r7, #6
 80034ca:	8812      	ldrh	r2, [r2, #0]
 80034cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2244      	movs	r2, #68	@ 0x44
 80034d8:	2100      	movs	r1, #0
 80034da:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2246      	movs	r2, #70	@ 0x46
 80034e0:	2100      	movs	r1, #0
 80034e2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	2380      	movs	r3, #128	@ 0x80
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d110      	bne.n	800351e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2140      	movs	r1, #64	@ 0x40
 8003508:	438a      	bics	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2180      	movs	r1, #128	@ 0x80
 8003518:	01c9      	lsls	r1, r1, #7
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2240      	movs	r2, #64	@ 0x40
 8003526:	4013      	ands	r3, r2
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2140      	movs	r1, #64	@ 0x40
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	23e0      	movs	r3, #224	@ 0xe0
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	429a      	cmp	r2, r3
 8003546:	d952      	bls.n	80035ee <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <HAL_SPI_Transmit+0x11e>
 8003550:	2316      	movs	r3, #22
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d143      	bne.n	80035e2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	881a      	ldrh	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	1c9a      	adds	r2, r3, #2
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800357e:	e030      	b.n	80035e2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2202      	movs	r2, #2
 8003588:	4013      	ands	r3, r2
 800358a:	2b02      	cmp	r3, #2
 800358c:	d112      	bne.n	80035b4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359e:	1c9a      	adds	r2, r3, #2
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035b2:	e016      	b.n	80035e2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b4:	f7fd ffd8 	bl	8001568 <HAL_GetTick>
 80035b8:	0002      	movs	r2, r0
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d802      	bhi.n	80035ca <HAL_SPI_Transmit+0x18e>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	3301      	adds	r3, #1
 80035c8:	d102      	bne.n	80035d0 <HAL_SPI_Transmit+0x194>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d108      	bne.n	80035e2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80035d0:	231f      	movs	r3, #31
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2203      	movs	r2, #3
 80035d6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	225d      	movs	r2, #93	@ 0x5d
 80035dc:	2101      	movs	r1, #1
 80035de:	5499      	strb	r1, [r3, r2]
          goto error;
 80035e0:	e080      	b.n	80036e4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1c9      	bne.n	8003580 <HAL_SPI_Transmit+0x144>
 80035ec:	e053      	b.n	8003696 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d004      	beq.n	8003600 <HAL_SPI_Transmit+0x1c4>
 80035f6:	2316      	movs	r3, #22
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d145      	bne.n	800368c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8003626:	e031      	b.n	800368c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2202      	movs	r2, #2
 8003630:	4013      	ands	r3, r2
 8003632:	2b02      	cmp	r3, #2
 8003634:	d113      	bne.n	800365e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	7812      	ldrb	r2, [r2, #0]
 8003642:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800365c:	e016      	b.n	800368c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800365e:	f7fd ff83 	bl	8001568 <HAL_GetTick>
 8003662:	0002      	movs	r2, r0
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d802      	bhi.n	8003674 <HAL_SPI_Transmit+0x238>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	d102      	bne.n	800367a <HAL_SPI_Transmit+0x23e>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800367a:	231f      	movs	r3, #31
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	2203      	movs	r2, #3
 8003680:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	225d      	movs	r2, #93	@ 0x5d
 8003686:	2101      	movs	r1, #1
 8003688:	5499      	strb	r1, [r3, r2]
          goto error;
 800368a:	e02b      	b.n	80036e4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1c8      	bne.n	8003628 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 fb3f 	bl	8003d20 <SPI_EndRxTxTransaction>
 80036a2:	1e03      	subs	r3, r0, #0
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d004      	beq.n	80036dc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80036d2:	231f      	movs	r3, #31
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e003      	b.n	80036e4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	225d      	movs	r2, #93	@ 0x5d
 80036e0:	2101      	movs	r1, #1
 80036e2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	225c      	movs	r2, #92	@ 0x5c
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80036ec:	231f      	movs	r3, #31
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	781b      	ldrb	r3, [r3, #0]
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b008      	add	sp, #32
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	@ 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	001a      	movs	r2, r3
 800370a:	1cbb      	adds	r3, r7, #2
 800370c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800370e:	2301      	movs	r3, #1
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003712:	2323      	movs	r3, #35	@ 0x23
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	225c      	movs	r2, #92	@ 0x5c
 800371e:	5c9b      	ldrb	r3, [r3, r2]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x2c>
 8003724:	2302      	movs	r3, #2
 8003726:	e1c4      	b.n	8003ab2 <HAL_SPI_TransmitReceive+0x3b6>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	225c      	movs	r2, #92	@ 0x5c
 800372c:	2101      	movs	r1, #1
 800372e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003730:	f7fd ff1a 	bl	8001568 <HAL_GetTick>
 8003734:	0003      	movs	r3, r0
 8003736:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003738:	201b      	movs	r0, #27
 800373a:	183b      	adds	r3, r7, r0
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	215d      	movs	r1, #93	@ 0x5d
 8003740:	5c52      	ldrb	r2, [r2, r1]
 8003742:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800374a:	2312      	movs	r3, #18
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	1cba      	adds	r2, r7, #2
 8003750:	8812      	ldrh	r2, [r2, #0]
 8003752:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003754:	183b      	adds	r3, r7, r0
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d011      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x84>
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	2382      	movs	r3, #130	@ 0x82
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	429a      	cmp	r2, r3
 8003764:	d107      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d103      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x7a>
 800376e:	183b      	adds	r3, r7, r0
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b04      	cmp	r3, #4
 8003774:	d004      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003776:	2323      	movs	r3, #35	@ 0x23
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2202      	movs	r2, #2
 800377c:	701a      	strb	r2, [r3, #0]
    goto error;
 800377e:	e191      	b.n	8003aa4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <HAL_SPI_TransmitReceive+0x98>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_SPI_TransmitReceive+0x98>
 800378c:	1cbb      	adds	r3, r7, #2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003794:	2323      	movs	r3, #35	@ 0x23
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
    goto error;
 800379c:	e182      	b.n	8003aa4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	225d      	movs	r2, #93	@ 0x5d
 80037a2:	5c9b      	ldrb	r3, [r3, r2]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d003      	beq.n	80037b2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	225d      	movs	r2, #93	@ 0x5d
 80037ae:	2105      	movs	r1, #5
 80037b0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1cba      	adds	r2, r7, #2
 80037c2:	2146      	movs	r1, #70	@ 0x46
 80037c4:	8812      	ldrh	r2, [r2, #0]
 80037c6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1cba      	adds	r2, r7, #2
 80037cc:	2144      	movs	r1, #68	@ 0x44
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1cba      	adds	r2, r7, #2
 80037dc:	8812      	ldrh	r2, [r2, #0]
 80037de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1cba      	adds	r2, r7, #2
 80037e4:	8812      	ldrh	r2, [r2, #0]
 80037e6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	23e0      	movs	r3, #224	@ 0xe0
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d908      	bls.n	8003812 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	49ac      	ldr	r1, [pc, #688]	@ (8003abc <HAL_SPI_TransmitReceive+0x3c0>)
 800380c:	400a      	ands	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	e008      	b.n	8003824 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2180      	movs	r1, #128	@ 0x80
 800381e:	0149      	lsls	r1, r1, #5
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2240      	movs	r2, #64	@ 0x40
 800382c:	4013      	ands	r3, r2
 800382e:	2b40      	cmp	r3, #64	@ 0x40
 8003830:	d007      	beq.n	8003842 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2140      	movs	r1, #64	@ 0x40
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	23e0      	movs	r3, #224	@ 0xe0
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	429a      	cmp	r2, r3
 800384c:	d800      	bhi.n	8003850 <HAL_SPI_TransmitReceive+0x154>
 800384e:	e083      	b.n	8003958 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x168>
 8003858:	2312      	movs	r3, #18
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d000      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x168>
 8003862:	e06d      	b.n	8003940 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003868:	881a      	ldrh	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	1c9a      	adds	r2, r3, #2
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003888:	e05a      	b.n	8003940 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2202      	movs	r2, #2
 8003892:	4013      	ands	r3, r2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d11b      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x1d4>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x1d4>
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d113      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2201      	movs	r2, #1
 80038d8:	4013      	ands	r3, r2
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11c      	bne.n	8003918 <HAL_SPI_TransmitReceive+0x21c>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2246      	movs	r2, #70	@ 0x46
 80038e2:	5a9b      	ldrh	r3, [r3, r2]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d016      	beq.n	8003918 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	b292      	uxth	r2, r2
 80038f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fc:	1c9a      	adds	r2, r3, #2
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2246      	movs	r2, #70	@ 0x46
 8003906:	5a9b      	ldrh	r3, [r3, r2]
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b299      	uxth	r1, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2246      	movs	r2, #70	@ 0x46
 8003912:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003914:	2301      	movs	r3, #1
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003918:	f7fd fe26 	bl	8001568 <HAL_GetTick>
 800391c:	0002      	movs	r2, r0
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003924:	429a      	cmp	r2, r3
 8003926:	d80b      	bhi.n	8003940 <HAL_SPI_TransmitReceive+0x244>
 8003928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392a:	3301      	adds	r3, #1
 800392c:	d008      	beq.n	8003940 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800392e:	2323      	movs	r3, #35	@ 0x23
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2203      	movs	r2, #3
 8003934:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	225d      	movs	r2, #93	@ 0x5d
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]
        goto error;
 800393e:	e0b1      	b.n	8003aa4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d19f      	bne.n	800388a <HAL_SPI_TransmitReceive+0x18e>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2246      	movs	r2, #70	@ 0x46
 800394e:	5a9b      	ldrh	r3, [r3, r2]
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d199      	bne.n	800388a <HAL_SPI_TransmitReceive+0x18e>
 8003956:	e089      	b.n	8003a6c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_SPI_TransmitReceive+0x270>
 8003960:	2312      	movs	r3, #18
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d000      	beq.n	800396c <HAL_SPI_TransmitReceive+0x270>
 800396a:	e074      	b.n	8003a56 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	330c      	adds	r3, #12
 8003976:	7812      	ldrb	r2, [r2, #0]
 8003978:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003992:	e060      	b.n	8003a56 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	2202      	movs	r2, #2
 800399c:	4013      	ands	r3, r2
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d11c      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x2e0>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d017      	beq.n	80039dc <HAL_SPI_TransmitReceive+0x2e0>
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d114      	bne.n	80039dc <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	330c      	adds	r3, #12
 80039bc:	7812      	ldrb	r2, [r2, #0]
 80039be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2201      	movs	r2, #1
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d11e      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x32c>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2246      	movs	r2, #70	@ 0x46
 80039ee:	5a9b      	ldrh	r3, [r3, r2]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d018      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	330c      	adds	r3, #12
 80039fc:	001a      	movs	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	b2d2      	uxtb	r2, r2
 8003a06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2246      	movs	r2, #70	@ 0x46
 8003a16:	5a9b      	ldrh	r3, [r3, r2]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b299      	uxth	r1, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2246      	movs	r2, #70	@ 0x46
 8003a22:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a24:	2301      	movs	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a28:	f7fd fd9e 	bl	8001568 <HAL_GetTick>
 8003a2c:	0002      	movs	r2, r0
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d802      	bhi.n	8003a3e <HAL_SPI_TransmitReceive+0x342>
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	d102      	bne.n	8003a44 <HAL_SPI_TransmitReceive+0x348>
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d108      	bne.n	8003a56 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8003a44:	2323      	movs	r3, #35	@ 0x23
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2203      	movs	r2, #3
 8003a4a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	225d      	movs	r2, #93	@ 0x5d
 8003a50:	2101      	movs	r1, #1
 8003a52:	5499      	strb	r1, [r3, r2]
        goto error;
 8003a54:	e026      	b.n	8003aa4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d199      	bne.n	8003994 <HAL_SPI_TransmitReceive+0x298>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2246      	movs	r2, #70	@ 0x46
 8003a64:	5a9b      	ldrh	r3, [r3, r2]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d193      	bne.n	8003994 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	0018      	movs	r0, r3
 8003a74:	f000 f954 	bl	8003d20 <SPI_EndRxTxTransaction>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d006      	beq.n	8003a8a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8003a7c:	2323      	movs	r3, #35	@ 0x23
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8003a92:	2323      	movs	r3, #35	@ 0x23
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
 8003a9a:	e003      	b.n	8003aa4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	225d      	movs	r2, #93	@ 0x5d
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	225c      	movs	r2, #92	@ 0x5c
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003aac:	2323      	movs	r3, #35	@ 0x23
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	781b      	ldrb	r3, [r3, #0]
}
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b00a      	add	sp, #40	@ 0x28
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	ffffefff 	.word	0xffffefff

08003ac0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ad0:	f7fd fd4a 	bl	8001568 <HAL_GetTick>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	18d3      	adds	r3, r2, r3
 8003ade:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ae0:	f7fd fd42 	bl	8001568 <HAL_GetTick>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	015b      	lsls	r3, r3, #5
 8003aee:	0d1b      	lsrs	r3, r3, #20
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	4353      	muls	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003af6:	e058      	b.n	8003baa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	3301      	adds	r3, #1
 8003afc:	d055      	beq.n	8003baa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003afe:	f7fd fd33 	bl	8001568 <HAL_GetTick>
 8003b02:	0002      	movs	r2, r0
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d902      	bls.n	8003b14 <SPI_WaitFlagStateUntilTimeout+0x54>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d142      	bne.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	21e0      	movs	r1, #224	@ 0xe0
 8003b20:	438a      	bics	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	2382      	movs	r3, #130	@ 0x82
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d113      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d005      	beq.n	8003b48 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	2380      	movs	r3, #128	@ 0x80
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2140      	movs	r1, #64	@ 0x40
 8003b54:	438a      	bics	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	019b      	lsls	r3, r3, #6
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d110      	bne.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	491a      	ldr	r1, [pc, #104]	@ (8003bd8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003b70:	400a      	ands	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2180      	movs	r1, #128	@ 0x80
 8003b80:	0189      	lsls	r1, r1, #6
 8003b82:	430a      	orrs	r2, r1
 8003b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	225d      	movs	r2, #93	@ 0x5d
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	225c      	movs	r2, #92	@ 0x5c
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e017      	b.n	8003bca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	425a      	negs	r2, r3
 8003bba:	4153      	adcs	r3, r2
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	1dfb      	adds	r3, r7, #7
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d197      	bne.n	8003af8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b008      	add	sp, #32
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	200000c0 	.word	0x200000c0
 8003bd8:	ffffdfff 	.word	0xffffdfff

08003bdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	@ 0x28
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bea:	2317      	movs	r3, #23
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bf2:	f7fd fcb9 	bl	8001568 <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	18d3      	adds	r3, r2, r3
 8003c00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c02:	f7fd fcb1 	bl	8001568 <HAL_GetTick>
 8003c06:	0003      	movs	r3, r0
 8003c08:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c12:	4b41      	ldr	r3, [pc, #260]	@ (8003d18 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	0013      	movs	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	00da      	lsls	r2, r3, #3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	0d1b      	lsrs	r3, r3, #20
 8003c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c24:	4353      	muls	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c28:	e068      	b.n	8003cfc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	23c0      	movs	r3, #192	@ 0xc0
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d10a      	bne.n	8003c4a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d107      	bne.n	8003c4a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	2117      	movs	r1, #23
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	d055      	beq.n	8003cfc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c50:	f7fd fc8a 	bl	8001568 <HAL_GetTick>
 8003c54:	0002      	movs	r2, r0
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d902      	bls.n	8003c66 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d142      	bne.n	8003cec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	21e0      	movs	r1, #224	@ 0xe0
 8003c72:	438a      	bics	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	2382      	movs	r3, #130	@ 0x82
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d113      	bne.n	8003caa <SPI_WaitFifoStateUntilTimeout+0xce>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	2380      	movs	r3, #128	@ 0x80
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d005      	beq.n	8003c9a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	2380      	movs	r3, #128	@ 0x80
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d107      	bne.n	8003caa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2140      	movs	r1, #64	@ 0x40
 8003ca6:	438a      	bics	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003cae:	2380      	movs	r3, #128	@ 0x80
 8003cb0:	019b      	lsls	r3, r3, #6
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d110      	bne.n	8003cd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4916      	ldr	r1, [pc, #88]	@ (8003d1c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2180      	movs	r1, #128	@ 0x80
 8003cd2:	0189      	lsls	r1, r1, #6
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	225d      	movs	r2, #93	@ 0x5d
 8003cdc:	2101      	movs	r1, #1
 8003cde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	225c      	movs	r2, #92	@ 0x5c
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e010      	b.n	8003d0e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d18e      	bne.n	8003c2a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b00a      	add	sp, #40	@ 0x28
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	46c0      	nop			@ (mov r8, r8)
 8003d18:	200000c0 	.word	0x200000c0
 8003d1c:	ffffdfff 	.word	0xffffdfff

08003d20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	23c0      	movs	r3, #192	@ 0xc0
 8003d30:	0159      	lsls	r1, r3, #5
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	0013      	movs	r3, r2
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f7ff ff4e 	bl	8003bdc <SPI_WaitFifoStateUntilTimeout>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d007      	beq.n	8003d54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d48:	2220      	movs	r2, #32
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e027      	b.n	8003da4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	0013      	movs	r3, r2
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2180      	movs	r1, #128	@ 0x80
 8003d62:	f7ff fead 	bl	8003ac0 <SPI_WaitFlagStateUntilTimeout>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d007      	beq.n	8003d7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6e:	2220      	movs	r2, #32
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e014      	b.n	8003da4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	23c0      	movs	r3, #192	@ 0xc0
 8003d7e:	00d9      	lsls	r1, r3, #3
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	0013      	movs	r3, r2
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f7ff ff27 	bl	8003bdc <SPI_WaitFifoStateUntilTimeout>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d007      	beq.n	8003da2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d96:	2220      	movs	r2, #32
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e000      	b.n	8003da4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b004      	add	sp, #16
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e04a      	b.n	8003e54 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	223d      	movs	r2, #61	@ 0x3d
 8003dc2:	5c9b      	ldrb	r3, [r3, r2]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d107      	bne.n	8003dda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	223c      	movs	r2, #60	@ 0x3c
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7fd fa17 	bl	8001208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	223d      	movs	r2, #61	@ 0x3d
 8003dde:	2102      	movs	r1, #2
 8003de0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3304      	adds	r3, #4
 8003dea:	0019      	movs	r1, r3
 8003dec:	0010      	movs	r0, r2
 8003dee:	f000 fb13 	bl	8004418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2248      	movs	r2, #72	@ 0x48
 8003df6:	2101      	movs	r1, #1
 8003df8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	223e      	movs	r2, #62	@ 0x3e
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	223f      	movs	r2, #63	@ 0x3f
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2240      	movs	r2, #64	@ 0x40
 8003e0e:	2101      	movs	r1, #1
 8003e10:	5499      	strb	r1, [r3, r2]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2241      	movs	r2, #65	@ 0x41
 8003e16:	2101      	movs	r1, #1
 8003e18:	5499      	strb	r1, [r3, r2]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2242      	movs	r2, #66	@ 0x42
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2243      	movs	r2, #67	@ 0x43
 8003e26:	2101      	movs	r1, #1
 8003e28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2244      	movs	r2, #68	@ 0x44
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2245      	movs	r2, #69	@ 0x45
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2246      	movs	r2, #70	@ 0x46
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2247      	movs	r2, #71	@ 0x47
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	223d      	movs	r2, #61	@ 0x3d
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	223d      	movs	r2, #61	@ 0x3d
 8003e68:	5c9b      	ldrb	r3, [r3, r2]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e03c      	b.n	8003eee <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	223d      	movs	r2, #61	@ 0x3d
 8003e78:	2102      	movs	r1, #2
 8003e7a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2101      	movs	r1, #1
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a19      	ldr	r2, [pc, #100]	@ (8003ef8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d009      	beq.n	8003eaa <HAL_TIM_Base_Start_IT+0x4e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a18      	ldr	r2, [pc, #96]	@ (8003efc <HAL_TIM_Base_Start_IT+0xa0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d004      	beq.n	8003eaa <HAL_TIM_Base_Start_IT+0x4e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <HAL_TIM_Base_Start_IT+0xa4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d116      	bne.n	8003ed8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a14      	ldr	r2, [pc, #80]	@ (8003f04 <HAL_TIM_Base_Start_IT+0xa8>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b06      	cmp	r3, #6
 8003eba:	d016      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0x8e>
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	2380      	movs	r3, #128	@ 0x80
 8003ec0:	025b      	lsls	r3, r3, #9
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d011      	beq.n	8003eea <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	e008      	b.n	8003eea <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eea:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	40012c00 	.word	0x40012c00
 8003efc:	40000400 	.word	0x40000400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	00010007 	.word	0x00010007

08003f08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e04a      	b.n	8003fb0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	223d      	movs	r2, #61	@ 0x3d
 8003f1e:	5c9b      	ldrb	r3, [r3, r2]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d107      	bne.n	8003f36 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	223c      	movs	r2, #60	@ 0x3c
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f000 f841 	bl	8003fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	223d      	movs	r2, #61	@ 0x3d
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	0019      	movs	r1, r3
 8003f48:	0010      	movs	r0, r2
 8003f4a:	f000 fa65 	bl	8004418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2248      	movs	r2, #72	@ 0x48
 8003f52:	2101      	movs	r1, #1
 8003f54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	223e      	movs	r2, #62	@ 0x3e
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	5499      	strb	r1, [r3, r2]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	223f      	movs	r2, #63	@ 0x3f
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2240      	movs	r2, #64	@ 0x40
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	5499      	strb	r1, [r3, r2]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2241      	movs	r2, #65	@ 0x41
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2242      	movs	r2, #66	@ 0x42
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2243      	movs	r2, #67	@ 0x43
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2244      	movs	r2, #68	@ 0x44
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2245      	movs	r2, #69	@ 0x45
 8003f92:	2101      	movs	r1, #1
 8003f94:	5499      	strb	r1, [r3, r2]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2246      	movs	r2, #70	@ 0x46
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2247      	movs	r2, #71	@ 0x47
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	223d      	movs	r2, #61	@ 0x3d
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b002      	add	sp, #8
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fc0:	46c0      	nop			@ (mov r8, r8)
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d021      	beq.n	800402c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d01d      	beq.n	800402c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	4252      	negs	r2, r2
 8003ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	2203      	movs	r2, #3
 8004008:	4013      	ands	r3, r2
 800400a:	d004      	beq.n	8004016 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	0018      	movs	r0, r3
 8004010:	f000 f9ea 	bl	80043e8 <HAL_TIM_IC_CaptureCallback>
 8004014:	e007      	b.n	8004026 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f000 f9dd 	bl	80043d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f000 f9e9 	bl	80043f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2204      	movs	r2, #4
 8004030:	4013      	ands	r3, r2
 8004032:	d022      	beq.n	800407a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2204      	movs	r2, #4
 8004038:	4013      	ands	r3, r2
 800403a:	d01e      	beq.n	800407a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2205      	movs	r2, #5
 8004042:	4252      	negs	r2, r2
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699a      	ldr	r2, [r3, #24]
 8004052:	23c0      	movs	r3, #192	@ 0xc0
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4013      	ands	r3, r2
 8004058:	d004      	beq.n	8004064 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 f9c3 	bl	80043e8 <HAL_TIM_IC_CaptureCallback>
 8004062:	e007      	b.n	8004074 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f9b6 	bl	80043d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0018      	movs	r0, r3
 8004070:	f000 f9c2 	bl	80043f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2208      	movs	r2, #8
 800407e:	4013      	ands	r3, r2
 8004080:	d021      	beq.n	80040c6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2208      	movs	r2, #8
 8004086:	4013      	ands	r3, r2
 8004088:	d01d      	beq.n	80040c6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2209      	movs	r2, #9
 8004090:	4252      	negs	r2, r2
 8004092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2204      	movs	r2, #4
 8004098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	2203      	movs	r2, #3
 80040a2:	4013      	ands	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	0018      	movs	r0, r3
 80040aa:	f000 f99d 	bl	80043e8 <HAL_TIM_IC_CaptureCallback>
 80040ae:	e007      	b.n	80040c0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 f990 	bl	80043d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	0018      	movs	r0, r3
 80040bc:	f000 f99c 	bl	80043f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2210      	movs	r2, #16
 80040ca:	4013      	ands	r3, r2
 80040cc:	d022      	beq.n	8004114 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2210      	movs	r2, #16
 80040d2:	4013      	ands	r3, r2
 80040d4:	d01e      	beq.n	8004114 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2211      	movs	r2, #17
 80040dc:	4252      	negs	r2, r2
 80040de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2208      	movs	r2, #8
 80040e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	23c0      	movs	r3, #192	@ 0xc0
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4013      	ands	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f976 	bl	80043e8 <HAL_TIM_IC_CaptureCallback>
 80040fc:	e007      	b.n	800410e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0018      	movs	r0, r3
 8004102:	f000 f969 	bl	80043d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0018      	movs	r0, r3
 800410a:	f000 f975 	bl	80043f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2201      	movs	r2, #1
 8004118:	4013      	ands	r3, r2
 800411a:	d00c      	beq.n	8004136 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	4013      	ands	r3, r2
 8004122:	d008      	beq.n	8004136 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2202      	movs	r2, #2
 800412a:	4252      	negs	r2, r2
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	0018      	movs	r0, r3
 8004132:	f7fc fe05 	bl	8000d40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2280      	movs	r2, #128	@ 0x80
 800413a:	4013      	ands	r3, r2
 800413c:	d104      	bne.n	8004148 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	2380      	movs	r3, #128	@ 0x80
 8004142:	019b      	lsls	r3, r3, #6
 8004144:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004146:	d00b      	beq.n	8004160 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2280      	movs	r2, #128	@ 0x80
 800414c:	4013      	ands	r3, r2
 800414e:	d007      	beq.n	8004160 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1e      	ldr	r2, [pc, #120]	@ (80041d0 <HAL_TIM_IRQHandler+0x208>)
 8004156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	0018      	movs	r0, r3
 800415c:	f000 fcac 	bl	8004ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	2380      	movs	r3, #128	@ 0x80
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4013      	ands	r3, r2
 8004168:	d00b      	beq.n	8004182 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2280      	movs	r2, #128	@ 0x80
 800416e:	4013      	ands	r3, r2
 8004170:	d007      	beq.n	8004182 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <HAL_TIM_IRQHandler+0x20c>)
 8004178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f000 fca3 	bl	8004ac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2240      	movs	r2, #64	@ 0x40
 8004186:	4013      	ands	r3, r2
 8004188:	d00c      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2240      	movs	r2, #64	@ 0x40
 800418e:	4013      	ands	r3, r2
 8004190:	d008      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2241      	movs	r2, #65	@ 0x41
 8004198:	4252      	negs	r2, r2
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 f932 	bl	8004408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2220      	movs	r2, #32
 80041a8:	4013      	ands	r3, r2
 80041aa:	d00c      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2220      	movs	r2, #32
 80041b0:	4013      	ands	r3, r2
 80041b2:	d008      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2221      	movs	r2, #33	@ 0x21
 80041ba:	4252      	negs	r2, r2
 80041bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f000 fc71 	bl	8004aa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b004      	add	sp, #16
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	ffffdf7f 	.word	0xffffdf7f
 80041d4:	fffffeff 	.word	0xfffffeff

080041d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e4:	2317      	movs	r3, #23
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	2200      	movs	r2, #0
 80041ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	223c      	movs	r2, #60	@ 0x3c
 80041f0:	5c9b      	ldrb	r3, [r3, r2]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_PWM_ConfigChannel+0x22>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0e5      	b.n	80043c6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	223c      	movs	r2, #60	@ 0x3c
 80041fe:	2101      	movs	r1, #1
 8004200:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b14      	cmp	r3, #20
 8004206:	d900      	bls.n	800420a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004208:	e0d1      	b.n	80043ae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	009a      	lsls	r2, r3, #2
 800420e:	4b70      	ldr	r3, [pc, #448]	@ (80043d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004210:	18d3      	adds	r3, r2, r3
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	0011      	movs	r1, r2
 800421e:	0018      	movs	r0, r3
 8004220:	f000 f97e 	bl	8004520 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2108      	movs	r1, #8
 8004230:	430a      	orrs	r2, r1
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2104      	movs	r1, #4
 8004240:	438a      	bics	r2, r1
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	619a      	str	r2, [r3, #24]
      break;
 8004256:	e0af      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	0011      	movs	r1, r2
 8004260:	0018      	movs	r0, r3
 8004262:	f000 f9e7 	bl	8004634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699a      	ldr	r2, [r3, #24]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2180      	movs	r1, #128	@ 0x80
 8004272:	0109      	lsls	r1, r1, #4
 8004274:	430a      	orrs	r2, r1
 8004276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4954      	ldr	r1, [pc, #336]	@ (80043d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004284:	400a      	ands	r2, r1
 8004286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6999      	ldr	r1, [r3, #24]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	021a      	lsls	r2, r3, #8
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	430a      	orrs	r2, r1
 800429a:	619a      	str	r2, [r3, #24]
      break;
 800429c:	e08c      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	0011      	movs	r1, r2
 80042a6:	0018      	movs	r0, r3
 80042a8:	f000 fa48 	bl	800473c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69da      	ldr	r2, [r3, #28]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2108      	movs	r1, #8
 80042b8:	430a      	orrs	r2, r1
 80042ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69da      	ldr	r2, [r3, #28]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2104      	movs	r1, #4
 80042c8:	438a      	bics	r2, r1
 80042ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69d9      	ldr	r1, [r3, #28]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	61da      	str	r2, [r3, #28]
      break;
 80042de:	e06b      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	0011      	movs	r1, r2
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 faaf 	bl	800484c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2180      	movs	r1, #128	@ 0x80
 80042fa:	0109      	lsls	r1, r1, #4
 80042fc:	430a      	orrs	r2, r1
 80042fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4932      	ldr	r1, [pc, #200]	@ (80043d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800430c:	400a      	ands	r2, r1
 800430e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69d9      	ldr	r1, [r3, #28]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	021a      	lsls	r2, r3, #8
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	430a      	orrs	r2, r1
 8004322:	61da      	str	r2, [r3, #28]
      break;
 8004324:	e048      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	0011      	movs	r1, r2
 800432e:	0018      	movs	r0, r3
 8004330:	f000 faf6 	bl	8004920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2108      	movs	r1, #8
 8004340:	430a      	orrs	r2, r1
 8004342:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2104      	movs	r1, #4
 8004350:	438a      	bics	r2, r1
 8004352:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004366:	e027      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	0011      	movs	r1, r2
 8004370:	0018      	movs	r0, r3
 8004372:	f000 fb35 	bl	80049e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2180      	movs	r1, #128	@ 0x80
 8004382:	0109      	lsls	r1, r1, #4
 8004384:	430a      	orrs	r2, r1
 8004386:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4910      	ldr	r1, [pc, #64]	@ (80043d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004394:	400a      	ands	r2, r1
 8004396:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	021a      	lsls	r2, r3, #8
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043ac:	e004      	b.n	80043b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80043ae:	2317      	movs	r3, #23
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
      break;
 80043b6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	223c      	movs	r2, #60	@ 0x3c
 80043bc:	2100      	movs	r1, #0
 80043be:	5499      	strb	r1, [r3, r2]

  return status;
 80043c0:	2317      	movs	r3, #23
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	781b      	ldrb	r3, [r3, #0]
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b006      	add	sp, #24
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	0800b364 	.word	0x0800b364
 80043d4:	fffffbff 	.word	0xfffffbff

080043d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b002      	add	sp, #8
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004400:	46c0      	nop			@ (mov r8, r8)
 8004402:	46bd      	mov	sp, r7
 8004404:	b002      	add	sp, #8
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004410:	46c0      	nop			@ (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}

08004418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a36      	ldr	r2, [pc, #216]	@ (8004504 <TIM_Base_SetConfig+0xec>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x20>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a35      	ldr	r2, [pc, #212]	@ (8004508 <TIM_Base_SetConfig+0xf0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2270      	movs	r2, #112	@ 0x70
 800443c:	4393      	bics	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2d      	ldr	r2, [pc, #180]	@ (8004504 <TIM_Base_SetConfig+0xec>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <TIM_Base_SetConfig+0x62>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2c      	ldr	r2, [pc, #176]	@ (8004508 <TIM_Base_SetConfig+0xf0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d00f      	beq.n	800447a <TIM_Base_SetConfig+0x62>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2b      	ldr	r2, [pc, #172]	@ (800450c <TIM_Base_SetConfig+0xf4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d00b      	beq.n	800447a <TIM_Base_SetConfig+0x62>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2a      	ldr	r2, [pc, #168]	@ (8004510 <TIM_Base_SetConfig+0xf8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d007      	beq.n	800447a <TIM_Base_SetConfig+0x62>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a29      	ldr	r2, [pc, #164]	@ (8004514 <TIM_Base_SetConfig+0xfc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_Base_SetConfig+0x62>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a28      	ldr	r2, [pc, #160]	@ (8004518 <TIM_Base_SetConfig+0x100>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d108      	bne.n	800448c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a27      	ldr	r2, [pc, #156]	@ (800451c <TIM_Base_SetConfig+0x104>)
 800447e:	4013      	ands	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2280      	movs	r2, #128	@ 0x80
 8004490:	4393      	bics	r3, r2
 8004492:	001a      	movs	r2, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a13      	ldr	r2, [pc, #76]	@ (8004504 <TIM_Base_SetConfig+0xec>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00b      	beq.n	80044d2 <TIM_Base_SetConfig+0xba>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a14      	ldr	r2, [pc, #80]	@ (8004510 <TIM_Base_SetConfig+0xf8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d007      	beq.n	80044d2 <TIM_Base_SetConfig+0xba>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a13      	ldr	r2, [pc, #76]	@ (8004514 <TIM_Base_SetConfig+0xfc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d003      	beq.n	80044d2 <TIM_Base_SetConfig+0xba>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a12      	ldr	r2, [pc, #72]	@ (8004518 <TIM_Base_SetConfig+0x100>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d103      	bne.n	80044da <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2201      	movs	r2, #1
 80044e6:	4013      	ands	r3, r2
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d106      	bne.n	80044fa <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2201      	movs	r2, #1
 80044f2:	4393      	bics	r3, r2
 80044f4:	001a      	movs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	611a      	str	r2, [r3, #16]
  }
}
 80044fa:	46c0      	nop			@ (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b004      	add	sp, #16
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40000400 	.word	0x40000400
 800450c:	40002000 	.word	0x40002000
 8004510:	40014000 	.word	0x40014000
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800
 800451c:	fffffcff 	.word	0xfffffcff

08004520 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	2201      	movs	r2, #1
 8004536:	4393      	bics	r3, r2
 8004538:	001a      	movs	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a32      	ldr	r2, [pc, #200]	@ (8004618 <TIM_OC1_SetConfig+0xf8>)
 800454e:	4013      	ands	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2203      	movs	r2, #3
 8004556:	4393      	bics	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	2202      	movs	r2, #2
 8004568:	4393      	bics	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a28      	ldr	r2, [pc, #160]	@ (800461c <TIM_OC1_SetConfig+0xfc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00b      	beq.n	8004596 <TIM_OC1_SetConfig+0x76>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a27      	ldr	r2, [pc, #156]	@ (8004620 <TIM_OC1_SetConfig+0x100>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <TIM_OC1_SetConfig+0x76>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a26      	ldr	r2, [pc, #152]	@ (8004624 <TIM_OC1_SetConfig+0x104>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_OC1_SetConfig+0x76>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a25      	ldr	r2, [pc, #148]	@ (8004628 <TIM_OC1_SetConfig+0x108>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10c      	bne.n	80045b0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2208      	movs	r2, #8
 800459a:	4393      	bics	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	2204      	movs	r2, #4
 80045ac:	4393      	bics	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a1a      	ldr	r2, [pc, #104]	@ (800461c <TIM_OC1_SetConfig+0xfc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d00b      	beq.n	80045d0 <TIM_OC1_SetConfig+0xb0>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a19      	ldr	r2, [pc, #100]	@ (8004620 <TIM_OC1_SetConfig+0x100>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d007      	beq.n	80045d0 <TIM_OC1_SetConfig+0xb0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a18      	ldr	r2, [pc, #96]	@ (8004624 <TIM_OC1_SetConfig+0x104>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d003      	beq.n	80045d0 <TIM_OC1_SetConfig+0xb0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a17      	ldr	r2, [pc, #92]	@ (8004628 <TIM_OC1_SetConfig+0x108>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4a16      	ldr	r2, [pc, #88]	@ (800462c <TIM_OC1_SetConfig+0x10c>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4a15      	ldr	r2, [pc, #84]	@ (8004630 <TIM_OC1_SetConfig+0x110>)
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b006      	add	sp, #24
 8004614:	bd80      	pop	{r7, pc}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	fffeff8f 	.word	0xfffeff8f
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40014000 	.word	0x40014000
 8004624:	40014400 	.word	0x40014400
 8004628:	40014800 	.word	0x40014800
 800462c:	fffffeff 	.word	0xfffffeff
 8004630:	fffffdff 	.word	0xfffffdff

08004634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	2210      	movs	r2, #16
 800464a:	4393      	bics	r3, r2
 800464c:	001a      	movs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4a2e      	ldr	r2, [pc, #184]	@ (800471c <TIM_OC2_SetConfig+0xe8>)
 8004662:	4013      	ands	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a2d      	ldr	r2, [pc, #180]	@ (8004720 <TIM_OC2_SetConfig+0xec>)
 800466a:	4013      	ands	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2220      	movs	r2, #32
 800467e:	4393      	bics	r3, r2
 8004680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a24      	ldr	r2, [pc, #144]	@ (8004724 <TIM_OC2_SetConfig+0xf0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d10d      	bne.n	80046b2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2280      	movs	r2, #128	@ 0x80
 800469a:	4393      	bics	r3, r2
 800469c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2240      	movs	r2, #64	@ 0x40
 80046ae:	4393      	bics	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004724 <TIM_OC2_SetConfig+0xf0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00b      	beq.n	80046d2 <TIM_OC2_SetConfig+0x9e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004728 <TIM_OC2_SetConfig+0xf4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d007      	beq.n	80046d2 <TIM_OC2_SetConfig+0x9e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a19      	ldr	r2, [pc, #100]	@ (800472c <TIM_OC2_SetConfig+0xf8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d003      	beq.n	80046d2 <TIM_OC2_SetConfig+0x9e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <TIM_OC2_SetConfig+0xfc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d113      	bne.n	80046fa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4a17      	ldr	r2, [pc, #92]	@ (8004734 <TIM_OC2_SetConfig+0x100>)
 80046d6:	4013      	ands	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4a16      	ldr	r2, [pc, #88]	@ (8004738 <TIM_OC2_SetConfig+0x104>)
 80046de:	4013      	ands	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	621a      	str	r2, [r3, #32]
}
 8004714:	46c0      	nop			@ (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b006      	add	sp, #24
 800471a:	bd80      	pop	{r7, pc}
 800471c:	feff8fff 	.word	0xfeff8fff
 8004720:	fffffcff 	.word	0xfffffcff
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40014000 	.word	0x40014000
 800472c:	40014400 	.word	0x40014400
 8004730:	40014800 	.word	0x40014800
 8004734:	fffffbff 	.word	0xfffffbff
 8004738:	fffff7ff 	.word	0xfffff7ff

0800473c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4a33      	ldr	r2, [pc, #204]	@ (8004820 <TIM_OC3_SetConfig+0xe4>)
 8004752:	401a      	ands	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a2f      	ldr	r2, [pc, #188]	@ (8004824 <TIM_OC3_SetConfig+0xe8>)
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2203      	movs	r2, #3
 8004770:	4393      	bics	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	4a29      	ldr	r2, [pc, #164]	@ (8004828 <TIM_OC3_SetConfig+0xec>)
 8004782:	4013      	ands	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a25      	ldr	r2, [pc, #148]	@ (800482c <TIM_OC3_SetConfig+0xf0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d10d      	bne.n	80047b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	4a24      	ldr	r2, [pc, #144]	@ (8004830 <TIM_OC3_SetConfig+0xf4>)
 800479e:	4013      	ands	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	4a20      	ldr	r2, [pc, #128]	@ (8004834 <TIM_OC3_SetConfig+0xf8>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <TIM_OC3_SetConfig+0xf0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_OC3_SetConfig+0x9a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004838 <TIM_OC3_SetConfig+0xfc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_OC3_SetConfig+0x9a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1c      	ldr	r2, [pc, #112]	@ (800483c <TIM_OC3_SetConfig+0x100>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_OC3_SetConfig+0x9a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1b      	ldr	r2, [pc, #108]	@ (8004840 <TIM_OC3_SetConfig+0x104>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d113      	bne.n	80047fe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004844 <TIM_OC3_SetConfig+0x108>)
 80047da:	4013      	ands	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4a19      	ldr	r2, [pc, #100]	@ (8004848 <TIM_OC3_SetConfig+0x10c>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	46c0      	nop			@ (mov r8, r8)
 800481a:	46bd      	mov	sp, r7
 800481c:	b006      	add	sp, #24
 800481e:	bd80      	pop	{r7, pc}
 8004820:	fffffeff 	.word	0xfffffeff
 8004824:	fffeff8f 	.word	0xfffeff8f
 8004828:	fffffdff 	.word	0xfffffdff
 800482c:	40012c00 	.word	0x40012c00
 8004830:	fffff7ff 	.word	0xfffff7ff
 8004834:	fffffbff 	.word	0xfffffbff
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800
 8004844:	ffffefff 	.word	0xffffefff
 8004848:	ffffdfff 	.word	0xffffdfff

0800484c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4a26      	ldr	r2, [pc, #152]	@ (80048fc <TIM_OC4_SetConfig+0xb0>)
 8004862:	401a      	ands	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a22      	ldr	r2, [pc, #136]	@ (8004900 <TIM_OC4_SetConfig+0xb4>)
 8004878:	4013      	ands	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4a21      	ldr	r2, [pc, #132]	@ (8004904 <TIM_OC4_SetConfig+0xb8>)
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4a1d      	ldr	r2, [pc, #116]	@ (8004908 <TIM_OC4_SetConfig+0xbc>)
 8004894:	4013      	ands	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	031b      	lsls	r3, r3, #12
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a19      	ldr	r2, [pc, #100]	@ (800490c <TIM_OC4_SetConfig+0xc0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00b      	beq.n	80048c4 <TIM_OC4_SetConfig+0x78>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a18      	ldr	r2, [pc, #96]	@ (8004910 <TIM_OC4_SetConfig+0xc4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <TIM_OC4_SetConfig+0x78>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a17      	ldr	r2, [pc, #92]	@ (8004914 <TIM_OC4_SetConfig+0xc8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_OC4_SetConfig+0x78>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a16      	ldr	r2, [pc, #88]	@ (8004918 <TIM_OC4_SetConfig+0xcc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d109      	bne.n	80048d8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	4a15      	ldr	r2, [pc, #84]	@ (800491c <TIM_OC4_SetConfig+0xd0>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	019b      	lsls	r3, r3, #6
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	46c0      	nop			@ (mov r8, r8)
 80048f4:	46bd      	mov	sp, r7
 80048f6:	b006      	add	sp, #24
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	ffffefff 	.word	0xffffefff
 8004900:	feff8fff 	.word	0xfeff8fff
 8004904:	fffffcff 	.word	0xfffffcff
 8004908:	ffffdfff 	.word	0xffffdfff
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40014000 	.word	0x40014000
 8004914:	40014400 	.word	0x40014400
 8004918:	40014800 	.word	0x40014800
 800491c:	ffffbfff 	.word	0xffffbfff

08004920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	4a23      	ldr	r2, [pc, #140]	@ (80049c4 <TIM_OC5_SetConfig+0xa4>)
 8004936:	401a      	ands	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4a1f      	ldr	r2, [pc, #124]	@ (80049c8 <TIM_OC5_SetConfig+0xa8>)
 800494c:	4013      	ands	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <TIM_OC5_SetConfig+0xac>)
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	041b      	lsls	r3, r3, #16
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a17      	ldr	r2, [pc, #92]	@ (80049d0 <TIM_OC5_SetConfig+0xb0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_OC5_SetConfig+0x6e>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a16      	ldr	r2, [pc, #88]	@ (80049d4 <TIM_OC5_SetConfig+0xb4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d007      	beq.n	800498e <TIM_OC5_SetConfig+0x6e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a15      	ldr	r2, [pc, #84]	@ (80049d8 <TIM_OC5_SetConfig+0xb8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_OC5_SetConfig+0x6e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a14      	ldr	r2, [pc, #80]	@ (80049dc <TIM_OC5_SetConfig+0xbc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d109      	bne.n	80049a2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	4a0c      	ldr	r2, [pc, #48]	@ (80049c4 <TIM_OC5_SetConfig+0xa4>)
 8004992:	4013      	ands	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	621a      	str	r2, [r3, #32]
}
 80049bc:	46c0      	nop			@ (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	b006      	add	sp, #24
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	fffeffff 	.word	0xfffeffff
 80049c8:	fffeff8f 	.word	0xfffeff8f
 80049cc:	fffdffff 	.word	0xfffdffff
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800

080049e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	4a24      	ldr	r2, [pc, #144]	@ (8004a88 <TIM_OC6_SetConfig+0xa8>)
 80049f6:	401a      	ands	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4a20      	ldr	r2, [pc, #128]	@ (8004a8c <TIM_OC6_SetConfig+0xac>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a90 <TIM_OC6_SetConfig+0xb0>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	051b      	lsls	r3, r3, #20
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a18      	ldr	r2, [pc, #96]	@ (8004a94 <TIM_OC6_SetConfig+0xb4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00b      	beq.n	8004a50 <TIM_OC6_SetConfig+0x70>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a17      	ldr	r2, [pc, #92]	@ (8004a98 <TIM_OC6_SetConfig+0xb8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d007      	beq.n	8004a50 <TIM_OC6_SetConfig+0x70>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a16      	ldr	r2, [pc, #88]	@ (8004a9c <TIM_OC6_SetConfig+0xbc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_OC6_SetConfig+0x70>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <TIM_OC6_SetConfig+0xc0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d109      	bne.n	8004a64 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	4a14      	ldr	r2, [pc, #80]	@ (8004aa4 <TIM_OC6_SetConfig+0xc4>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	029b      	lsls	r3, r3, #10
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	621a      	str	r2, [r3, #32]
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b006      	add	sp, #24
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	ffefffff 	.word	0xffefffff
 8004a8c:	feff8fff 	.word	0xfeff8fff
 8004a90:	ffdfffff 	.word	0xffdfffff
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800
 8004aa4:	fffbffff 	.word	0xfffbffff

08004aa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab0:	46c0      	nop			@ (mov r8, r8)
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b002      	add	sp, #8
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac0:	46c0      	nop			@ (mov r8, r8)
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ad0:	46c0      	nop			@ (mov r8, r8)
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e046      	b.n	8004b78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2288      	movs	r2, #136	@ 0x88
 8004aee:	589b      	ldr	r3, [r3, r2]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d107      	bne.n	8004b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2284      	movs	r2, #132	@ 0x84
 8004af8:	2100      	movs	r1, #0
 8004afa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7fc fc4c 	bl	800139c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2288      	movs	r2, #136	@ 0x88
 8004b08:	2124      	movs	r1, #36	@ 0x24
 8004b0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2101      	movs	r1, #1
 8004b18:	438a      	bics	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 fa74 	bl	8005014 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 f8cc 	bl	8004ccc <UART_SetConfig>
 8004b34:	0003      	movs	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e01c      	b.n	8004b78 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	490d      	ldr	r1, [pc, #52]	@ (8004b80 <HAL_UART_Init+0xa8>)
 8004b4a:	400a      	ands	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	212a      	movs	r1, #42	@ 0x2a
 8004b5a:	438a      	bics	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2101      	movs	r1, #1
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 fb03 	bl	800517c <UART_CheckIdleState>
 8004b76:	0003      	movs	r3, r0
}
 8004b78:	0018      	movs	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	ffffb7ff 	.word	0xffffb7ff

08004b84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	@ 0x28
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	1dbb      	adds	r3, r7, #6
 8004b92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2288      	movs	r2, #136	@ 0x88
 8004b98:	589b      	ldr	r3, [r3, r2]
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d000      	beq.n	8004ba0 <HAL_UART_Transmit+0x1c>
 8004b9e:	e090      	b.n	8004cc2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_UART_Transmit+0x2a>
 8004ba6:	1dbb      	adds	r3, r7, #6
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e088      	b.n	8004cc4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	2380      	movs	r3, #128	@ 0x80
 8004bb8:	015b      	lsls	r3, r3, #5
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d109      	bne.n	8004bd2 <HAL_UART_Transmit+0x4e>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d105      	bne.n	8004bd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d001      	beq.n	8004bd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e078      	b.n	8004cc4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2290      	movs	r2, #144	@ 0x90
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2288      	movs	r2, #136	@ 0x88
 8004bde:	2121      	movs	r1, #33	@ 0x21
 8004be0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004be2:	f7fc fcc1 	bl	8001568 <HAL_GetTick>
 8004be6:	0003      	movs	r3, r0
 8004be8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1dba      	adds	r2, r7, #6
 8004bee:	2154      	movs	r1, #84	@ 0x54
 8004bf0:	8812      	ldrh	r2, [r2, #0]
 8004bf2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1dba      	adds	r2, r7, #6
 8004bf8:	2156      	movs	r1, #86	@ 0x56
 8004bfa:	8812      	ldrh	r2, [r2, #0]
 8004bfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	2380      	movs	r3, #128	@ 0x80
 8004c04:	015b      	lsls	r3, r3, #5
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d108      	bne.n	8004c1c <HAL_UART_Transmit+0x98>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e003      	b.n	8004c24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c24:	e030      	b.n	8004c88 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	0013      	movs	r3, r2
 8004c30:	2200      	movs	r2, #0
 8004c32:	2180      	movs	r1, #128	@ 0x80
 8004c34:	f000 fb4c 	bl	80052d0 <UART_WaitOnFlagUntilTimeout>
 8004c38:	1e03      	subs	r3, r0, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2288      	movs	r2, #136	@ 0x88
 8004c40:	2120      	movs	r1, #32
 8004c42:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e03d      	b.n	8004cc4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	001a      	movs	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	05d2      	lsls	r2, r2, #23
 8004c5a:	0dd2      	lsrs	r2, r2, #23
 8004c5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	3302      	adds	r3, #2
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e007      	b.n	8004c76 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3301      	adds	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2256      	movs	r2, #86	@ 0x56
 8004c7a:	5a9b      	ldrh	r3, [r3, r2]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b299      	uxth	r1, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2256      	movs	r2, #86	@ 0x56
 8004c86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2256      	movs	r2, #86	@ 0x56
 8004c8c:	5a9b      	ldrh	r3, [r3, r2]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1c8      	bne.n	8004c26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	0013      	movs	r3, r2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2140      	movs	r1, #64	@ 0x40
 8004ca2:	f000 fb15 	bl	80052d0 <UART_WaitOnFlagUntilTimeout>
 8004ca6:	1e03      	subs	r3, r0, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2288      	movs	r2, #136	@ 0x88
 8004cae:	2120      	movs	r1, #32
 8004cb0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e006      	b.n	8004cc4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2288      	movs	r2, #136	@ 0x88
 8004cba:	2120      	movs	r1, #32
 8004cbc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b008      	add	sp, #32
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd4:	231a      	movs	r3, #26
 8004cd6:	18fb      	adds	r3, r7, r3
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4abc      	ldr	r2, [pc, #752]	@ (8004fec <UART_SetConfig+0x320>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	0019      	movs	r1, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69fa      	ldr	r2, [r7, #28]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4ab7      	ldr	r2, [pc, #732]	@ (8004ff0 <UART_SetConfig+0x324>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	4aae      	ldr	r2, [pc, #696]	@ (8004ff4 <UART_SetConfig+0x328>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4e:	220f      	movs	r2, #15
 8004d50:	4393      	bics	r3, r2
 8004d52:	0019      	movs	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4aa4      	ldr	r2, [pc, #656]	@ (8004ff8 <UART_SetConfig+0x32c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d127      	bne.n	8004dba <UART_SetConfig+0xee>
 8004d6a:	4ba4      	ldr	r3, [pc, #656]	@ (8004ffc <UART_SetConfig+0x330>)
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6e:	2203      	movs	r2, #3
 8004d70:	4013      	ands	r3, r2
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d017      	beq.n	8004da6 <UART_SetConfig+0xda>
 8004d76:	d81b      	bhi.n	8004db0 <UART_SetConfig+0xe4>
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d00a      	beq.n	8004d92 <UART_SetConfig+0xc6>
 8004d7c:	d818      	bhi.n	8004db0 <UART_SetConfig+0xe4>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <UART_SetConfig+0xbc>
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d00a      	beq.n	8004d9c <UART_SetConfig+0xd0>
 8004d86:	e013      	b.n	8004db0 <UART_SetConfig+0xe4>
 8004d88:	231b      	movs	r3, #27
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e058      	b.n	8004e44 <UART_SetConfig+0x178>
 8004d92:	231b      	movs	r3, #27
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2202      	movs	r2, #2
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e053      	b.n	8004e44 <UART_SetConfig+0x178>
 8004d9c:	231b      	movs	r3, #27
 8004d9e:	18fb      	adds	r3, r7, r3
 8004da0:	2204      	movs	r2, #4
 8004da2:	701a      	strb	r2, [r3, #0]
 8004da4:	e04e      	b.n	8004e44 <UART_SetConfig+0x178>
 8004da6:	231b      	movs	r3, #27
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2208      	movs	r2, #8
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e049      	b.n	8004e44 <UART_SetConfig+0x178>
 8004db0:	231b      	movs	r3, #27
 8004db2:	18fb      	adds	r3, r7, r3
 8004db4:	2210      	movs	r2, #16
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e044      	b.n	8004e44 <UART_SetConfig+0x178>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a90      	ldr	r2, [pc, #576]	@ (8005000 <UART_SetConfig+0x334>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d127      	bne.n	8004e14 <UART_SetConfig+0x148>
 8004dc4:	4b8d      	ldr	r3, [pc, #564]	@ (8004ffc <UART_SetConfig+0x330>)
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc8:	220c      	movs	r2, #12
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b0c      	cmp	r3, #12
 8004dce:	d017      	beq.n	8004e00 <UART_SetConfig+0x134>
 8004dd0:	d81b      	bhi.n	8004e0a <UART_SetConfig+0x13e>
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d00a      	beq.n	8004dec <UART_SetConfig+0x120>
 8004dd6:	d818      	bhi.n	8004e0a <UART_SetConfig+0x13e>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <UART_SetConfig+0x116>
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d00a      	beq.n	8004df6 <UART_SetConfig+0x12a>
 8004de0:	e013      	b.n	8004e0a <UART_SetConfig+0x13e>
 8004de2:	231b      	movs	r3, #27
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e02b      	b.n	8004e44 <UART_SetConfig+0x178>
 8004dec:	231b      	movs	r3, #27
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	2202      	movs	r2, #2
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	e026      	b.n	8004e44 <UART_SetConfig+0x178>
 8004df6:	231b      	movs	r3, #27
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	701a      	strb	r2, [r3, #0]
 8004dfe:	e021      	b.n	8004e44 <UART_SetConfig+0x178>
 8004e00:	231b      	movs	r3, #27
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	2208      	movs	r2, #8
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e01c      	b.n	8004e44 <UART_SetConfig+0x178>
 8004e0a:	231b      	movs	r3, #27
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	2210      	movs	r2, #16
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	e017      	b.n	8004e44 <UART_SetConfig+0x178>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a7a      	ldr	r2, [pc, #488]	@ (8005004 <UART_SetConfig+0x338>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d104      	bne.n	8004e28 <UART_SetConfig+0x15c>
 8004e1e:	231b      	movs	r3, #27
 8004e20:	18fb      	adds	r3, r7, r3
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
 8004e26:	e00d      	b.n	8004e44 <UART_SetConfig+0x178>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a76      	ldr	r2, [pc, #472]	@ (8005008 <UART_SetConfig+0x33c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d104      	bne.n	8004e3c <UART_SetConfig+0x170>
 8004e32:	231b      	movs	r3, #27
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e003      	b.n	8004e44 <UART_SetConfig+0x178>
 8004e3c:	231b      	movs	r3, #27
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	2210      	movs	r2, #16
 8004e42:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d000      	beq.n	8004e52 <UART_SetConfig+0x186>
 8004e50:	e065      	b.n	8004f1e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004e52:	231b      	movs	r3, #27
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d015      	beq.n	8004e88 <UART_SetConfig+0x1bc>
 8004e5c:	dc18      	bgt.n	8004e90 <UART_SetConfig+0x1c4>
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d00d      	beq.n	8004e7e <UART_SetConfig+0x1b2>
 8004e62:	dc15      	bgt.n	8004e90 <UART_SetConfig+0x1c4>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <UART_SetConfig+0x1a2>
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d005      	beq.n	8004e78 <UART_SetConfig+0x1ac>
 8004e6c:	e010      	b.n	8004e90 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e6e:	f7fe f8b9 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004e72:	0003      	movs	r3, r0
 8004e74:	617b      	str	r3, [r7, #20]
        break;
 8004e76:	e012      	b.n	8004e9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e78:	4b64      	ldr	r3, [pc, #400]	@ (800500c <UART_SetConfig+0x340>)
 8004e7a:	617b      	str	r3, [r7, #20]
        break;
 8004e7c:	e00f      	b.n	8004e9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e7e:	f7fe f825 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8004e82:	0003      	movs	r3, r0
 8004e84:	617b      	str	r3, [r7, #20]
        break;
 8004e86:	e00a      	b.n	8004e9e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e88:	2380      	movs	r3, #128	@ 0x80
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	617b      	str	r3, [r7, #20]
        break;
 8004e8e:	e006      	b.n	8004e9e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e94:	231a      	movs	r3, #26
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	2201      	movs	r2, #1
 8004e9a:	701a      	strb	r2, [r3, #0]
        break;
 8004e9c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d100      	bne.n	8004ea6 <UART_SetConfig+0x1da>
 8004ea4:	e08d      	b.n	8004fc2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004eaa:	4b59      	ldr	r3, [pc, #356]	@ (8005010 <UART_SetConfig+0x344>)
 8004eac:	0052      	lsls	r2, r2, #1
 8004eae:	5ad3      	ldrh	r3, [r2, r3]
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	6978      	ldr	r0, [r7, #20]
 8004eb4:	f7fb f932 	bl	800011c <__udivsi3>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	005a      	lsls	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	18d2      	adds	r2, r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	0019      	movs	r1, r3
 8004eca:	0010      	movs	r0, r2
 8004ecc:	f7fb f926 	bl	800011c <__udivsi3>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	d91c      	bls.n	8004f14 <UART_SetConfig+0x248>
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	025b      	lsls	r3, r3, #9
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d217      	bcs.n	8004f14 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	200e      	movs	r0, #14
 8004eea:	183b      	adds	r3, r7, r0
 8004eec:	210f      	movs	r1, #15
 8004eee:	438a      	bics	r2, r1
 8004ef0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2207      	movs	r2, #7
 8004efa:	4013      	ands	r3, r2
 8004efc:	b299      	uxth	r1, r3
 8004efe:	183b      	adds	r3, r7, r0
 8004f00:	183a      	adds	r2, r7, r0
 8004f02:	8812      	ldrh	r2, [r2, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	183a      	adds	r2, r7, r0
 8004f0e:	8812      	ldrh	r2, [r2, #0]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	e056      	b.n	8004fc2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004f14:	231a      	movs	r3, #26
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2201      	movs	r2, #1
 8004f1a:	701a      	strb	r2, [r3, #0]
 8004f1c:	e051      	b.n	8004fc2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f1e:	231b      	movs	r3, #27
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d015      	beq.n	8004f54 <UART_SetConfig+0x288>
 8004f28:	dc18      	bgt.n	8004f5c <UART_SetConfig+0x290>
 8004f2a:	2b04      	cmp	r3, #4
 8004f2c:	d00d      	beq.n	8004f4a <UART_SetConfig+0x27e>
 8004f2e:	dc15      	bgt.n	8004f5c <UART_SetConfig+0x290>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d002      	beq.n	8004f3a <UART_SetConfig+0x26e>
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d005      	beq.n	8004f44 <UART_SetConfig+0x278>
 8004f38:	e010      	b.n	8004f5c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f3a:	f7fe f853 	bl	8002fe4 <HAL_RCC_GetPCLK1Freq>
 8004f3e:	0003      	movs	r3, r0
 8004f40:	617b      	str	r3, [r7, #20]
        break;
 8004f42:	e012      	b.n	8004f6a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f44:	4b31      	ldr	r3, [pc, #196]	@ (800500c <UART_SetConfig+0x340>)
 8004f46:	617b      	str	r3, [r7, #20]
        break;
 8004f48:	e00f      	b.n	8004f6a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4a:	f7fd ffbf 	bl	8002ecc <HAL_RCC_GetSysClockFreq>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	617b      	str	r3, [r7, #20]
        break;
 8004f52:	e00a      	b.n	8004f6a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	617b      	str	r3, [r7, #20]
        break;
 8004f5a:	e006      	b.n	8004f6a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f60:	231a      	movs	r3, #26
 8004f62:	18fb      	adds	r3, r7, r3
 8004f64:	2201      	movs	r2, #1
 8004f66:	701a      	strb	r2, [r3, #0]
        break;
 8004f68:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d028      	beq.n	8004fc2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f74:	4b26      	ldr	r3, [pc, #152]	@ (8005010 <UART_SetConfig+0x344>)
 8004f76:	0052      	lsls	r2, r2, #1
 8004f78:	5ad3      	ldrh	r3, [r2, r3]
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	6978      	ldr	r0, [r7, #20]
 8004f7e:	f7fb f8cd 	bl	800011c <__udivsi3>
 8004f82:	0003      	movs	r3, r0
 8004f84:	001a      	movs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	18d2      	adds	r2, r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	0019      	movs	r1, r3
 8004f94:	0010      	movs	r0, r2
 8004f96:	f7fb f8c1 	bl	800011c <__udivsi3>
 8004f9a:	0003      	movs	r3, r0
 8004f9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b0f      	cmp	r3, #15
 8004fa2:	d90a      	bls.n	8004fba <UART_SetConfig+0x2ee>
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	2380      	movs	r3, #128	@ 0x80
 8004fa8:	025b      	lsls	r3, r3, #9
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d205      	bcs.n	8004fba <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60da      	str	r2, [r3, #12]
 8004fb8:	e003      	b.n	8004fc2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8004fba:	231a      	movs	r3, #26
 8004fbc:	18fb      	adds	r3, r7, r3
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	226a      	movs	r2, #106	@ 0x6a
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2268      	movs	r2, #104	@ 0x68
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fde:	231a      	movs	r3, #26
 8004fe0:	18fb      	adds	r3, r7, r3
 8004fe2:	781b      	ldrb	r3, [r3, #0]
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b008      	add	sp, #32
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	cfff69f3 	.word	0xcfff69f3
 8004ff0:	ffffcfff 	.word	0xffffcfff
 8004ff4:	11fff4ff 	.word	0x11fff4ff
 8004ff8:	40013800 	.word	0x40013800
 8004ffc:	40021000 	.word	0x40021000
 8005000:	40004400 	.word	0x40004400
 8005004:	40004800 	.word	0x40004800
 8005008:	40004c00 	.word	0x40004c00
 800500c:	00f42400 	.word	0x00f42400
 8005010:	0800b3b8 	.word	0x0800b3b8

08005014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005020:	2208      	movs	r2, #8
 8005022:	4013      	ands	r3, r2
 8005024:	d00b      	beq.n	800503e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4a4a      	ldr	r2, [pc, #296]	@ (8005158 <UART_AdvFeatureConfig+0x144>)
 800502e:	4013      	ands	r3, r2
 8005030:	0019      	movs	r1, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005042:	2201      	movs	r2, #1
 8005044:	4013      	ands	r3, r2
 8005046:	d00b      	beq.n	8005060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4a43      	ldr	r2, [pc, #268]	@ (800515c <UART_AdvFeatureConfig+0x148>)
 8005050:	4013      	ands	r3, r2
 8005052:	0019      	movs	r1, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005064:	2202      	movs	r2, #2
 8005066:	4013      	ands	r3, r2
 8005068:	d00b      	beq.n	8005082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4a3b      	ldr	r2, [pc, #236]	@ (8005160 <UART_AdvFeatureConfig+0x14c>)
 8005072:	4013      	ands	r3, r2
 8005074:	0019      	movs	r1, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005086:	2204      	movs	r2, #4
 8005088:	4013      	ands	r3, r2
 800508a:	d00b      	beq.n	80050a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	4a34      	ldr	r2, [pc, #208]	@ (8005164 <UART_AdvFeatureConfig+0x150>)
 8005094:	4013      	ands	r3, r2
 8005096:	0019      	movs	r1, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	2210      	movs	r2, #16
 80050aa:	4013      	ands	r3, r2
 80050ac:	d00b      	beq.n	80050c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005168 <UART_AdvFeatureConfig+0x154>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	0019      	movs	r1, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	2220      	movs	r2, #32
 80050cc:	4013      	ands	r3, r2
 80050ce:	d00b      	beq.n	80050e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4a25      	ldr	r2, [pc, #148]	@ (800516c <UART_AdvFeatureConfig+0x158>)
 80050d8:	4013      	ands	r3, r2
 80050da:	0019      	movs	r1, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ec:	2240      	movs	r2, #64	@ 0x40
 80050ee:	4013      	ands	r3, r2
 80050f0:	d01d      	beq.n	800512e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	4a1d      	ldr	r2, [pc, #116]	@ (8005170 <UART_AdvFeatureConfig+0x15c>)
 80050fa:	4013      	ands	r3, r2
 80050fc:	0019      	movs	r1, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	035b      	lsls	r3, r3, #13
 8005112:	429a      	cmp	r2, r3
 8005114:	d10b      	bne.n	800512e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a15      	ldr	r2, [pc, #84]	@ (8005174 <UART_AdvFeatureConfig+0x160>)
 800511e:	4013      	ands	r3, r2
 8005120:	0019      	movs	r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005132:	2280      	movs	r2, #128	@ 0x80
 8005134:	4013      	ands	r3, r2
 8005136:	d00b      	beq.n	8005150 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4a0e      	ldr	r2, [pc, #56]	@ (8005178 <UART_AdvFeatureConfig+0x164>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }
}
 8005150:	46c0      	nop			@ (mov r8, r8)
 8005152:	46bd      	mov	sp, r7
 8005154:	b002      	add	sp, #8
 8005156:	bd80      	pop	{r7, pc}
 8005158:	ffff7fff 	.word	0xffff7fff
 800515c:	fffdffff 	.word	0xfffdffff
 8005160:	fffeffff 	.word	0xfffeffff
 8005164:	fffbffff 	.word	0xfffbffff
 8005168:	ffffefff 	.word	0xffffefff
 800516c:	ffffdfff 	.word	0xffffdfff
 8005170:	ffefffff 	.word	0xffefffff
 8005174:	ff9fffff 	.word	0xff9fffff
 8005178:	fff7ffff 	.word	0xfff7ffff

0800517c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b092      	sub	sp, #72	@ 0x48
 8005180:	af02      	add	r7, sp, #8
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2290      	movs	r2, #144	@ 0x90
 8005188:	2100      	movs	r1, #0
 800518a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800518c:	f7fc f9ec 	bl	8001568 <HAL_GetTick>
 8005190:	0003      	movs	r3, r0
 8005192:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2208      	movs	r2, #8
 800519c:	4013      	ands	r3, r2
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d12d      	bne.n	80051fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a4:	2280      	movs	r2, #128	@ 0x80
 80051a6:	0391      	lsls	r1, r2, #14
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4a47      	ldr	r2, [pc, #284]	@ (80052c8 <UART_CheckIdleState+0x14c>)
 80051ac:	9200      	str	r2, [sp, #0]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f000 f88e 	bl	80052d0 <UART_WaitOnFlagUntilTimeout>
 80051b4:	1e03      	subs	r3, r0, #0
 80051b6:	d022      	beq.n	80051fe <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b8:	f3ef 8310 	mrs	r3, PRIMASK
 80051bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051c2:	2301      	movs	r3, #1
 80051c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c8:	f383 8810 	msr	PRIMASK, r3
}
 80051cc:	46c0      	nop			@ (mov r8, r8)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2180      	movs	r1, #128	@ 0x80
 80051da:	438a      	bics	r2, r1
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e4:	f383 8810 	msr	PRIMASK, r3
}
 80051e8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2288      	movs	r2, #136	@ 0x88
 80051ee:	2120      	movs	r1, #32
 80051f0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2284      	movs	r2, #132	@ 0x84
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e060      	b.n	80052c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2204      	movs	r2, #4
 8005206:	4013      	ands	r3, r2
 8005208:	2b04      	cmp	r3, #4
 800520a:	d146      	bne.n	800529a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800520c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800520e:	2280      	movs	r2, #128	@ 0x80
 8005210:	03d1      	lsls	r1, r2, #15
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4a2c      	ldr	r2, [pc, #176]	@ (80052c8 <UART_CheckIdleState+0x14c>)
 8005216:	9200      	str	r2, [sp, #0]
 8005218:	2200      	movs	r2, #0
 800521a:	f000 f859 	bl	80052d0 <UART_WaitOnFlagUntilTimeout>
 800521e:	1e03      	subs	r3, r0, #0
 8005220:	d03b      	beq.n	800529a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005222:	f3ef 8310 	mrs	r3, PRIMASK
 8005226:	60fb      	str	r3, [r7, #12]
  return(result);
 8005228:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800522a:	637b      	str	r3, [r7, #52]	@ 0x34
 800522c:	2301      	movs	r3, #1
 800522e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f383 8810 	msr	PRIMASK, r3
}
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4922      	ldr	r1, [pc, #136]	@ (80052cc <UART_CheckIdleState+0x150>)
 8005244:	400a      	ands	r2, r1
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f383 8810 	msr	PRIMASK, r3
}
 8005252:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005254:	f3ef 8310 	mrs	r3, PRIMASK
 8005258:	61bb      	str	r3, [r7, #24]
  return(result);
 800525a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525c:	633b      	str	r3, [r7, #48]	@ 0x30
 800525e:	2301      	movs	r3, #1
 8005260:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	f383 8810 	msr	PRIMASK, r3
}
 8005268:	46c0      	nop			@ (mov r8, r8)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2101      	movs	r1, #1
 8005276:	438a      	bics	r2, r1
 8005278:	609a      	str	r2, [r3, #8]
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f383 8810 	msr	PRIMASK, r3
}
 8005284:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	228c      	movs	r2, #140	@ 0x8c
 800528a:	2120      	movs	r1, #32
 800528c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2284      	movs	r2, #132	@ 0x84
 8005292:	2100      	movs	r1, #0
 8005294:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e012      	b.n	80052c0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2288      	movs	r2, #136	@ 0x88
 800529e:	2120      	movs	r1, #32
 80052a0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	228c      	movs	r2, #140	@ 0x8c
 80052a6:	2120      	movs	r1, #32
 80052a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2284      	movs	r2, #132	@ 0x84
 80052ba:	2100      	movs	r1, #0
 80052bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b010      	add	sp, #64	@ 0x40
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	01ffffff 	.word	0x01ffffff
 80052cc:	fffffedf 	.word	0xfffffedf

080052d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	1dfb      	adds	r3, r7, #7
 80052de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e0:	e051      	b.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	3301      	adds	r3, #1
 80052e6:	d04e      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fc f93e 	bl	8001568 <HAL_GetTick>
 80052ec:	0002      	movs	r2, r0
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e051      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2204      	movs	r2, #4
 800530a:	4013      	ands	r3, r2
 800530c:	d03b      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb6>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b80      	cmp	r3, #128	@ 0x80
 8005312:	d038      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b40      	cmp	r3, #64	@ 0x40
 8005318:	d035      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2208      	movs	r2, #8
 8005322:	4013      	ands	r3, r2
 8005324:	2b08      	cmp	r3, #8
 8005326:	d111      	bne.n	800534c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2208      	movs	r2, #8
 800532e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 f83c 	bl	80053b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2290      	movs	r2, #144	@ 0x90
 800533c:	2108      	movs	r1, #8
 800533e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2284      	movs	r2, #132	@ 0x84
 8005344:	2100      	movs	r1, #0
 8005346:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e02c      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69da      	ldr	r2, [r3, #28]
 8005352:	2380      	movs	r3, #128	@ 0x80
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	401a      	ands	r2, r3
 8005358:	2380      	movs	r3, #128	@ 0x80
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	429a      	cmp	r2, r3
 800535e:	d112      	bne.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2280      	movs	r2, #128	@ 0x80
 8005366:	0112      	lsls	r2, r2, #4
 8005368:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 f81f 	bl	80053b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2290      	movs	r2, #144	@ 0x90
 8005376:	2120      	movs	r1, #32
 8005378:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2284      	movs	r2, #132	@ 0x84
 800537e:	2100      	movs	r1, #0
 8005380:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e00f      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	4013      	ands	r3, r2
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	425a      	negs	r2, r3
 8005396:	4153      	adcs	r3, r2
 8005398:	b2db      	uxtb	r3, r3
 800539a:	001a      	movs	r2, r3
 800539c:	1dfb      	adds	r3, r7, #7
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d09e      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	0018      	movs	r0, r3
 80053a8:	46bd      	mov	sp, r7
 80053aa:	b004      	add	sp, #16
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08e      	sub	sp, #56	@ 0x38
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b8:	f3ef 8310 	mrs	r3, PRIMASK
 80053bc:	617b      	str	r3, [r7, #20]
  return(result);
 80053be:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c2:	2301      	movs	r3, #1
 80053c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	f383 8810 	msr	PRIMASK, r3
}
 80053cc:	46c0      	nop			@ (mov r8, r8)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4926      	ldr	r1, [pc, #152]	@ (8005474 <UART_EndRxTransfer+0xc4>)
 80053da:	400a      	ands	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f383 8810 	msr	PRIMASK, r3
}
 80053e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ea:	f3ef 8310 	mrs	r3, PRIMASK
 80053ee:	623b      	str	r3, [r7, #32]
  return(result);
 80053f0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80053f4:	2301      	movs	r3, #1
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	f383 8810 	msr	PRIMASK, r3
}
 80053fe:	46c0      	nop			@ (mov r8, r8)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	491b      	ldr	r1, [pc, #108]	@ (8005478 <UART_EndRxTransfer+0xc8>)
 800540c:	400a      	ands	r2, r1
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005412:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d118      	bne.n	8005456 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005424:	f3ef 8310 	mrs	r3, PRIMASK
 8005428:	60bb      	str	r3, [r7, #8]
  return(result);
 800542a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800542c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800542e:	2301      	movs	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f383 8810 	msr	PRIMASK, r3
}
 8005438:	46c0      	nop			@ (mov r8, r8)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2110      	movs	r1, #16
 8005446:	438a      	bics	r2, r1
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f383 8810 	msr	PRIMASK, r3
}
 8005454:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	228c      	movs	r2, #140	@ 0x8c
 800545a:	2120      	movs	r1, #32
 800545c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b00e      	add	sp, #56	@ 0x38
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			@ (mov r8, r8)
 8005474:	fffffedf 	.word	0xfffffedf
 8005478:	effffffe 	.word	0xeffffffe

0800547c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2284      	movs	r2, #132	@ 0x84
 8005488:	5c9b      	ldrb	r3, [r3, r2]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_UARTEx_DisableFifoMode+0x16>
 800548e:	2302      	movs	r3, #2
 8005490:	e027      	b.n	80054e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2284      	movs	r2, #132	@ 0x84
 8005496:	2101      	movs	r1, #1
 8005498:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2288      	movs	r2, #136	@ 0x88
 800549e:	2124      	movs	r1, #36	@ 0x24
 80054a0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2101      	movs	r1, #1
 80054b6:	438a      	bics	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a0b      	ldr	r2, [pc, #44]	@ (80054ec <HAL_UARTEx_DisableFifoMode+0x70>)
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2288      	movs	r2, #136	@ 0x88
 80054d4:	2120      	movs	r1, #32
 80054d6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2284      	movs	r2, #132	@ 0x84
 80054dc:	2100      	movs	r1, #0
 80054de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b004      	add	sp, #16
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	46c0      	nop			@ (mov r8, r8)
 80054ec:	dfffffff 	.word	0xdfffffff

080054f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2284      	movs	r2, #132	@ 0x84
 80054fe:	5c9b      	ldrb	r3, [r3, r2]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005504:	2302      	movs	r3, #2
 8005506:	e02e      	b.n	8005566 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2284      	movs	r2, #132	@ 0x84
 800550c:	2101      	movs	r1, #1
 800550e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2288      	movs	r2, #136	@ 0x88
 8005514:	2124      	movs	r1, #36	@ 0x24
 8005516:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2101      	movs	r1, #1
 800552c:	438a      	bics	r2, r1
 800552e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	08d9      	lsrs	r1, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	0018      	movs	r0, r3
 8005548:	f000 f854 	bl	80055f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2288      	movs	r2, #136	@ 0x88
 8005558:	2120      	movs	r1, #32
 800555a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2284      	movs	r2, #132	@ 0x84
 8005560:	2100      	movs	r1, #0
 8005562:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b004      	add	sp, #16
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2284      	movs	r2, #132	@ 0x84
 800557e:	5c9b      	ldrb	r3, [r3, r2]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005584:	2302      	movs	r3, #2
 8005586:	e02f      	b.n	80055e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2284      	movs	r2, #132	@ 0x84
 800558c:	2101      	movs	r1, #1
 800558e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2288      	movs	r2, #136	@ 0x88
 8005594:	2124      	movs	r1, #36	@ 0x24
 8005596:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2101      	movs	r1, #1
 80055ac:	438a      	bics	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	4a0e      	ldr	r2, [pc, #56]	@ (80055f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	0019      	movs	r1, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f000 f813 	bl	80055f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2288      	movs	r2, #136	@ 0x88
 80055da:	2120      	movs	r1, #32
 80055dc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2284      	movs	r2, #132	@ 0x84
 80055e2:	2100      	movs	r1, #0
 80055e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b004      	add	sp, #16
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	f1ffffff 	.word	0xf1ffffff

080055f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005600:	2b00      	cmp	r3, #0
 8005602:	d108      	bne.n	8005616 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	226a      	movs	r2, #106	@ 0x6a
 8005608:	2101      	movs	r1, #1
 800560a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2268      	movs	r2, #104	@ 0x68
 8005610:	2101      	movs	r1, #1
 8005612:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005614:	e043      	b.n	800569e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005616:	260f      	movs	r6, #15
 8005618:	19bb      	adds	r3, r7, r6
 800561a:	2208      	movs	r2, #8
 800561c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800561e:	200e      	movs	r0, #14
 8005620:	183b      	adds	r3, r7, r0
 8005622:	2208      	movs	r2, #8
 8005624:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	0e5b      	lsrs	r3, r3, #25
 800562e:	b2da      	uxtb	r2, r3
 8005630:	240d      	movs	r4, #13
 8005632:	193b      	adds	r3, r7, r4
 8005634:	2107      	movs	r1, #7
 8005636:	400a      	ands	r2, r1
 8005638:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	0f5b      	lsrs	r3, r3, #29
 8005642:	b2da      	uxtb	r2, r3
 8005644:	250c      	movs	r5, #12
 8005646:	197b      	adds	r3, r7, r5
 8005648:	2107      	movs	r1, #7
 800564a:	400a      	ands	r2, r1
 800564c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800564e:	183b      	adds	r3, r7, r0
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	197a      	adds	r2, r7, r5
 8005654:	7812      	ldrb	r2, [r2, #0]
 8005656:	4914      	ldr	r1, [pc, #80]	@ (80056a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005658:	5c8a      	ldrb	r2, [r1, r2]
 800565a:	435a      	muls	r2, r3
 800565c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800565e:	197b      	adds	r3, r7, r5
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	4a12      	ldr	r2, [pc, #72]	@ (80056ac <UARTEx_SetNbDataToProcess+0xb8>)
 8005664:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005666:	0019      	movs	r1, r3
 8005668:	f7fa fde2 	bl	8000230 <__divsi3>
 800566c:	0003      	movs	r3, r0
 800566e:	b299      	uxth	r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	226a      	movs	r2, #106	@ 0x6a
 8005674:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005676:	19bb      	adds	r3, r7, r6
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	193a      	adds	r2, r7, r4
 800567c:	7812      	ldrb	r2, [r2, #0]
 800567e:	490a      	ldr	r1, [pc, #40]	@ (80056a8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005680:	5c8a      	ldrb	r2, [r1, r2]
 8005682:	435a      	muls	r2, r3
 8005684:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005686:	193b      	adds	r3, r7, r4
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	4a08      	ldr	r2, [pc, #32]	@ (80056ac <UARTEx_SetNbDataToProcess+0xb8>)
 800568c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800568e:	0019      	movs	r1, r3
 8005690:	f7fa fdce 	bl	8000230 <__divsi3>
 8005694:	0003      	movs	r3, r0
 8005696:	b299      	uxth	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2268      	movs	r2, #104	@ 0x68
 800569c:	5299      	strh	r1, [r3, r2]
}
 800569e:	46c0      	nop			@ (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b005      	add	sp, #20
 80056a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a6:	46c0      	nop			@ (mov r8, r8)
 80056a8:	0800b3d0 	.word	0x0800b3d0
 80056ac:	0800b3d8 	.word	0x0800b3d8

080056b0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 80056b4:	4a08      	ldr	r2, [pc, #32]	@ (80056d8 <MX_FATFS_Init+0x28>)
 80056b6:	4b09      	ldr	r3, [pc, #36]	@ (80056dc <MX_FATFS_Init+0x2c>)
 80056b8:	0011      	movs	r1, r2
 80056ba:	0018      	movs	r0, r3
 80056bc:	f003 fa76 	bl	8008bac <FATFS_LinkDriver>
 80056c0:	1e03      	subs	r3, r0, #0
 80056c2:	d002      	beq.n	80056ca <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
	{
		return APP_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	425b      	negs	r3, r3
 80056c8:	e003      	b.n	80056d2 <MX_FATFS_Init+0x22>
	}
	else
	{
		Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 80056ca:	4b05      	ldr	r3, [pc, #20]	@ (80056e0 <MX_FATFS_Init+0x30>)
 80056cc:	2201      	movs	r2, #1
 80056ce:	701a      	strb	r2, [r3, #0]
		return APP_OK;
 80056d0:	2300      	movs	r3, #0
	}
  /* USER CODE END FATFS_Init */
}
 80056d2:	0018      	movs	r0, r3
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	20000b18 	.word	0x20000b18
 80056dc:	200000cc 	.word	0x200000cc
 80056e0:	20000b1c 	.word	0x20000b1c

080056e4 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 80056e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80056ea:	0018      	movs	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	0002      	movs	r2, r0
 80056f8:	1dfb      	adds	r3, r7, #7
 80056fa:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80056fc:	1dfb      	adds	r3, r7, #7
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	0018      	movs	r0, r3
 8005702:	f000 fa1d 	bl	8005b40 <USER_SPI_initialize>
 8005706:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8005708:	0018      	movs	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	b002      	add	sp, #8
 800570e:	bd80      	pop	{r7, pc}

08005710 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	0002      	movs	r2, r0
 8005718:	1dfb      	adds	r3, r7, #7
 800571a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800571c:	1dfb      	adds	r3, r7, #7
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	0018      	movs	r0, r3
 8005722:	f000 fb25 	bl	8005d70 <USER_SPI_status>
 8005726:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}

08005730 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005730:	b5b0      	push	{r4, r5, r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	60b9      	str	r1, [r7, #8]
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	250f      	movs	r5, #15
 800573e:	197b      	adds	r3, r7, r5
 8005740:	1c02      	adds	r2, r0, #0
 8005742:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8005744:	683c      	ldr	r4, [r7, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	68b9      	ldr	r1, [r7, #8]
 800574a:	197b      	adds	r3, r7, r5
 800574c:	7818      	ldrb	r0, [r3, #0]
 800574e:	0023      	movs	r3, r4
 8005750:	f000 fb24 	bl	8005d9c <USER_SPI_read>
 8005754:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b004      	add	sp, #16
 800575c:	bdb0      	pop	{r4, r5, r7, pc}

0800575e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800575e:	b5b0      	push	{r4, r5, r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	250f      	movs	r5, #15
 800576c:	197b      	adds	r3, r7, r5
 800576e:	1c02      	adds	r2, r0, #0
 8005770:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8005772:	683c      	ldr	r4, [r7, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	197b      	adds	r3, r7, r5
 800577a:	7818      	ldrb	r0, [r3, #0]
 800577c:	0023      	movs	r3, r4
 800577e:	f000 fb79 	bl	8005e74 <USER_SPI_write>
 8005782:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8005784:	0018      	movs	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	b004      	add	sp, #16
 800578a:	bdb0      	pop	{r4, r5, r7, pc}

0800578c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	603a      	str	r2, [r7, #0]
 8005794:	1dfb      	adds	r3, r7, #7
 8005796:	1c02      	adds	r2, r0, #0
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	1dbb      	adds	r3, r7, #6
 800579c:	1c0a      	adds	r2, r1, #0
 800579e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	1dbb      	adds	r3, r7, #6
 80057a4:	7819      	ldrb	r1, [r3, #0]
 80057a6:	1dfb      	adds	r3, r7, #7
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	0018      	movs	r0, r3
 80057ac:	f000 fbe2 	bl	8005f74 <USER_SPI_ioctl>
 80057b0:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b002      	add	sp, #8
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 80057c4:	f7fb fed0 	bl	8001568 <HAL_GetTick>
 80057c8:	0002      	movs	r2, r0
 80057ca:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <SPI_Timer_On+0x20>)
 80057cc:	601a      	str	r2, [r3, #0]
	spiTimerTickDelay = waitTicks;
 80057ce:	4b04      	ldr	r3, [pc, #16]	@ (80057e0 <SPI_Timer_On+0x24>)
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	46c0      	nop			@ (mov r8, r8)
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b002      	add	sp, #8
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000b20 	.word	0x20000b20
 80057e0:	20000b24 	.word	0x20000b24

080057e4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80057e8:	f7fb febe 	bl	8001568 <HAL_GetTick>
 80057ec:	0002      	movs	r2, r0
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <SPI_Timer_Status+0x24>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	1ad2      	subs	r2, r2, r3
 80057f4:	4b05      	ldr	r3, [pc, #20]	@ (800580c <SPI_Timer_Status+0x28>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	419b      	sbcs	r3, r3
 80057fc:	425b      	negs	r3, r3
 80057fe:	b2db      	uxtb	r3, r3
}
 8005800:	0018      	movs	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	20000b20 	.word	0x20000b20
 800580c:	20000b24 	.word	0x20000b24

08005810 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
		BYTE dat	/* Data to send */
)
{
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b087      	sub	sp, #28
 8005814:	af02      	add	r7, sp, #8
 8005816:	0002      	movs	r2, r0
 8005818:	1dfb      	adds	r3, r7, #7
 800581a:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800581c:	240f      	movs	r4, #15
 800581e:	193a      	adds	r2, r7, r4
 8005820:	1df9      	adds	r1, r7, #7
 8005822:	4806      	ldr	r0, [pc, #24]	@ (800583c <xchg_spi+0x2c>)
 8005824:	2332      	movs	r3, #50	@ 0x32
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	2301      	movs	r3, #1
 800582a:	f7fd ff67 	bl	80036fc <HAL_SPI_TransmitReceive>
	return rxDat;
 800582e:	193b      	adds	r3, r7, r4
 8005830:	781b      	ldrb	r3, [r3, #0]
}
 8005832:	0018      	movs	r0, r3
 8005834:	46bd      	mov	sp, r7
 8005836:	b005      	add	sp, #20
 8005838:	bd90      	pop	{r4, r7, pc}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	20000934 	.word	0x20000934

08005840 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
		BYTE *buff,		/* Pointer to data buffer */
		UINT btr		/* Number of bytes to receive (even number) */
)
{
 8005840:	b590      	push	{r4, r7, lr}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
 800584e:	e00a      	b.n	8005866 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	18d4      	adds	r4, r2, r3
 8005856:	20ff      	movs	r0, #255	@ 0xff
 8005858:	f7ff ffda 	bl	8005810 <xchg_spi>
 800585c:	0003      	movs	r3, r0
 800585e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d3f0      	bcc.n	8005850 <rcvr_spi_multi+0x10>
	}
}
 800586e:	46c0      	nop			@ (mov r8, r8)
 8005870:	46c0      	nop			@ (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b005      	add	sp, #20
 8005876:	bd90      	pop	{r4, r7, pc}

08005878 <xmit_spi_multi>:
static
void xmit_spi_multi (
		const BYTE *buff,	/* Pointer to the data */
		UINT btx			/* Number of bytes to send (even number) */
)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	b29a      	uxth	r2, r3
 8005886:	2301      	movs	r3, #1
 8005888:	425b      	negs	r3, r3
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4803      	ldr	r0, [pc, #12]	@ (800589c <xmit_spi_multi+0x24>)
 800588e:	f7fd fdd5 	bl	800343c <HAL_SPI_Transmit>
}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	46bd      	mov	sp, r7
 8005896:	b002      	add	sp, #8
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			@ (mov r8, r8)
 800589c:	20000934 	.word	0x20000934

080058a0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
		UINT wt			/* Timeout [ms] */
)
{
 80058a0:	b5b0      	push	{r4, r5, r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80058a8:	f7fb fe5e 	bl	8001568 <HAL_GetTick>
 80058ac:	0003      	movs	r3, r0
 80058ae:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80058b4:	250f      	movs	r5, #15
 80058b6:	197c      	adds	r4, r7, r5
 80058b8:	20ff      	movs	r0, #255	@ 0xff
 80058ba:	f7ff ffa9 	bl	8005810 <xchg_spi>
 80058be:	0003      	movs	r3, r0
 80058c0:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80058c2:	197b      	adds	r3, r7, r5
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2bff      	cmp	r3, #255	@ 0xff
 80058c8:	d007      	beq.n	80058da <wait_ready+0x3a>
 80058ca:	f7fb fe4d 	bl	8001568 <HAL_GetTick>
 80058ce:	0002      	movs	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d8ec      	bhi.n	80058b4 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 80058da:	230f      	movs	r3, #15
 80058dc:	18fb      	adds	r3, r7, r3
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	3bff      	subs	r3, #255	@ 0xff
 80058e2:	425a      	negs	r2, r3
 80058e4:	4153      	adcs	r3, r2
 80058e6:	b2db      	uxtb	r3, r3
}
 80058e8:	0018      	movs	r0, r3
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b006      	add	sp, #24
 80058ee:	bdb0      	pop	{r4, r5, r7, pc}

080058f0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80058f4:	2380      	movs	r3, #128	@ 0x80
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4805      	ldr	r0, [pc, #20]	@ (8005910 <despiselect+0x20>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	0019      	movs	r1, r3
 80058fe:	f7fc fcf1 	bl	80022e4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8005902:	20ff      	movs	r0, #255	@ 0xff
 8005904:	f7ff ff84 	bl	8005810 <xchg_spi>

}
 8005908:	46c0      	nop			@ (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	50000400 	.word	0x50000400

08005914 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	480b      	ldr	r0, [pc, #44]	@ (800594c <spiselect+0x38>)
 800591e:	2200      	movs	r2, #0
 8005920:	0019      	movs	r1, r3
 8005922:	f7fc fcdf 	bl	80022e4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8005926:	20ff      	movs	r0, #255	@ 0xff
 8005928:	f7ff ff72 	bl	8005810 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800592c:	23fa      	movs	r3, #250	@ 0xfa
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	0018      	movs	r0, r3
 8005932:	f7ff ffb5 	bl	80058a0 <wait_ready>
 8005936:	1e03      	subs	r3, r0, #0
 8005938:	d001      	beq.n	800593e <spiselect+0x2a>
 800593a:	2301      	movs	r3, #1
 800593c:	e002      	b.n	8005944 <spiselect+0x30>

	despiselect();
 800593e:	f7ff ffd7 	bl	80058f0 <despiselect>
	return 0;	/* Timeout */
 8005942:	2300      	movs	r3, #0
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	46c0      	nop			@ (mov r8, r8)
 800594c:	50000400 	.word	0x50000400

08005950 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
		BYTE *buff,			/* Data buffer */
		UINT btr			/* Data block length (byte) */
)
{
 8005950:	b5b0      	push	{r4, r5, r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800595a:	20c8      	movs	r0, #200	@ 0xc8
 800595c:	f7ff ff2e 	bl	80057bc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8005960:	250f      	movs	r5, #15
 8005962:	197c      	adds	r4, r7, r5
 8005964:	20ff      	movs	r0, #255	@ 0xff
 8005966:	f7ff ff53 	bl	8005810 <xchg_spi>
 800596a:	0003      	movs	r3, r0
 800596c:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800596e:	197b      	adds	r3, r7, r5
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2bff      	cmp	r3, #255	@ 0xff
 8005974:	d103      	bne.n	800597e <rcvr_datablock+0x2e>
 8005976:	f7ff ff35 	bl	80057e4 <SPI_Timer_Status>
 800597a:	1e03      	subs	r3, r0, #0
 800597c:	d1f0      	bne.n	8005960 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800597e:	230f      	movs	r3, #15
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2bfe      	cmp	r3, #254	@ 0xfe
 8005986:	d001      	beq.n	800598c <rcvr_datablock+0x3c>
 8005988:	2300      	movs	r3, #0
 800598a:	e00c      	b.n	80059a6 <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	0011      	movs	r1, r2
 8005992:	0018      	movs	r0, r3
 8005994:	f7ff ff54 	bl	8005840 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8005998:	20ff      	movs	r0, #255	@ 0xff
 800599a:	f7ff ff39 	bl	8005810 <xchg_spi>
 800599e:	20ff      	movs	r0, #255	@ 0xff
 80059a0:	f7ff ff36 	bl	8005810 <xchg_spi>

	return 1;						/* Function succeeded */
 80059a4:	2301      	movs	r3, #1
}
 80059a6:	0018      	movs	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	b004      	add	sp, #16
 80059ac:	bdb0      	pop	{r4, r5, r7, pc}

080059ae <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80059ae:	b5b0      	push	{r4, r5, r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	000a      	movs	r2, r1
 80059b8:	1cfb      	adds	r3, r7, #3
 80059ba:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80059bc:	23fa      	movs	r3, #250	@ 0xfa
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	0018      	movs	r0, r3
 80059c2:	f7ff ff6d 	bl	80058a0 <wait_ready>
 80059c6:	1e03      	subs	r3, r0, #0
 80059c8:	d101      	bne.n	80059ce <xmit_datablock+0x20>
 80059ca:	2300      	movs	r3, #0
 80059cc:	e025      	b.n	8005a1a <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 80059ce:	1cfb      	adds	r3, r7, #3
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7ff ff1c 	bl	8005810 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80059d8:	1cfb      	adds	r3, r7, #3
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2bfd      	cmp	r3, #253	@ 0xfd
 80059de:	d01b      	beq.n	8005a18 <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 80059e0:	2380      	movs	r3, #128	@ 0x80
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	0011      	movs	r1, r2
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7ff ff45 	bl	8005878 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80059ee:	20ff      	movs	r0, #255	@ 0xff
 80059f0:	f7ff ff0e 	bl	8005810 <xchg_spi>
 80059f4:	20ff      	movs	r0, #255	@ 0xff
 80059f6:	f7ff ff0b 	bl	8005810 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80059fa:	250f      	movs	r5, #15
 80059fc:	197c      	adds	r4, r7, r5
 80059fe:	20ff      	movs	r0, #255	@ 0xff
 8005a00:	f7ff ff06 	bl	8005810 <xchg_spi>
 8005a04:	0003      	movs	r3, r0
 8005a06:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8005a08:	197b      	adds	r3, r7, r5
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	221f      	movs	r2, #31
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b05      	cmp	r3, #5
 8005a12:	d001      	beq.n	8005a18 <xmit_datablock+0x6a>
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <xmit_datablock+0x6c>
	}
	return 1;
 8005a18:	2301      	movs	r3, #1
}
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	b004      	add	sp, #16
 8005a20:	bdb0      	pop	{r4, r5, r7, pc}

08005a22 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8005a22:	b5b0      	push	{r4, r5, r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	0002      	movs	r2, r0
 8005a2a:	6039      	str	r1, [r7, #0]
 8005a2c:	1dfb      	adds	r3, r7, #7
 8005a2e:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8005a30:	1dfb      	adds	r3, r7, #7
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	b25b      	sxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da15      	bge.n	8005a66 <send_cmd+0x44>
		cmd &= 0x7F;
 8005a3a:	1dfb      	adds	r3, r7, #7
 8005a3c:	1dfa      	adds	r2, r7, #7
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	217f      	movs	r1, #127	@ 0x7f
 8005a42:	400a      	ands	r2, r1
 8005a44:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8005a46:	250e      	movs	r5, #14
 8005a48:	197c      	adds	r4, r7, r5
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	2037      	movs	r0, #55	@ 0x37
 8005a4e:	f7ff ffe8 	bl	8005a22 <send_cmd>
 8005a52:	0003      	movs	r3, r0
 8005a54:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8005a56:	002a      	movs	r2, r5
 8005a58:	18bb      	adds	r3, r7, r2
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d902      	bls.n	8005a66 <send_cmd+0x44>
 8005a60:	18bb      	adds	r3, r7, r2
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	e067      	b.n	8005b36 <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005a66:	1dfb      	adds	r3, r7, #7
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d007      	beq.n	8005a7e <send_cmd+0x5c>
		despiselect();
 8005a6e:	f7ff ff3f 	bl	80058f0 <despiselect>
		if (!spiselect()) return 0xFF;
 8005a72:	f7ff ff4f 	bl	8005914 <spiselect>
 8005a76:	1e03      	subs	r3, r0, #0
 8005a78:	d101      	bne.n	8005a7e <send_cmd+0x5c>
 8005a7a:	23ff      	movs	r3, #255	@ 0xff
 8005a7c:	e05b      	b.n	8005b36 <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005a7e:	1dfb      	adds	r3, r7, #7
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2240      	movs	r2, #64	@ 0x40
 8005a84:	4313      	orrs	r3, r2
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f7ff fec1 	bl	8005810 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	0e1b      	lsrs	r3, r3, #24
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7ff febb 	bl	8005810 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	0018      	movs	r0, r3
 8005aa2:	f7ff feb5 	bl	8005810 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	0a1b      	lsrs	r3, r3, #8
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7ff feaf 	bl	8005810 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f7ff feaa 	bl	8005810 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8005abc:	210f      	movs	r1, #15
 8005abe:	187b      	adds	r3, r7, r1
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005ac4:	1dfb      	adds	r3, r7, #7
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d102      	bne.n	8005ad2 <send_cmd+0xb0>
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	2295      	movs	r2, #149	@ 0x95
 8005ad0:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8005ad2:	1dfb      	adds	r3, r7, #7
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d103      	bne.n	8005ae2 <send_cmd+0xc0>
 8005ada:	230f      	movs	r3, #15
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	2287      	movs	r2, #135	@ 0x87
 8005ae0:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8005ae2:	230f      	movs	r3, #15
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f7ff fe91 	bl	8005810 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8005aee:	1dfb      	adds	r3, r7, #7
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	d102      	bne.n	8005afc <send_cmd+0xda>
 8005af6:	20ff      	movs	r0, #255	@ 0xff
 8005af8:	f7ff fe8a 	bl	8005810 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005afc:	230f      	movs	r3, #15
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	220a      	movs	r2, #10
 8005b02:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8005b04:	250e      	movs	r5, #14
 8005b06:	197c      	adds	r4, r7, r5
 8005b08:	20ff      	movs	r0, #255	@ 0xff
 8005b0a:	f7ff fe81 	bl	8005810 <xchg_spi>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8005b12:	197b      	adds	r3, r7, r5
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	b25b      	sxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da09      	bge.n	8005b30 <send_cmd+0x10e>
 8005b1c:	210f      	movs	r1, #15
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	187a      	adds	r2, r7, r1
 8005b22:	7812      	ldrb	r2, [r2, #0]
 8005b24:	3a01      	subs	r2, #1
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	187b      	adds	r3, r7, r1
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e9      	bne.n	8005b04 <send_cmd+0xe2>

	return res;							/* Return received response */
 8005b30:	230e      	movs	r3, #14
 8005b32:	18fb      	adds	r3, r7, r3
 8005b34:	781b      	ldrb	r3, [r3, #0]
}
 8005b36:	0018      	movs	r0, r3
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b004      	add	sp, #16
 8005b3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b40 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
		BYTE drv		/* Physical drive number (0) */
)
{
 8005b40:	b5b0      	push	{r4, r5, r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	0002      	movs	r2, r0
 8005b48:	1dfb      	adds	r3, r7, #7
 8005b4a:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8005b4c:	1dfb      	adds	r3, r7, #7
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <USER_SPI_initialize+0x18>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e100      	b.n	8005d5a <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8005b58:	4b82      	ldr	r3, [pc, #520]	@ (8005d64 <USER_SPI_initialize+0x224>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	001a      	movs	r2, r3
 8005b60:	2302      	movs	r3, #2
 8005b62:	4013      	ands	r3, r2
 8005b64:	d003      	beq.n	8005b6e <USER_SPI_initialize+0x2e>
 8005b66:	4b7f      	ldr	r3, [pc, #508]	@ (8005d64 <USER_SPI_initialize+0x224>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	e0f5      	b.n	8005d5a <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8005b6e:	4b7e      	ldr	r3, [pc, #504]	@ (8005d68 <USER_SPI_initialize+0x228>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2238      	movs	r2, #56	@ 0x38
 8005b76:	4393      	bics	r3, r2
 8005b78:	001a      	movs	r2, r3
 8005b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005d68 <USER_SPI_initialize+0x228>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2130      	movs	r1, #48	@ 0x30
 8005b80:	430a      	orrs	r2, r1
 8005b82:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8005b84:	230f      	movs	r3, #15
 8005b86:	18fb      	adds	r3, r7, r3
 8005b88:	220a      	movs	r2, #10
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	e008      	b.n	8005ba0 <USER_SPI_initialize+0x60>
 8005b8e:	20ff      	movs	r0, #255	@ 0xff
 8005b90:	f7ff fe3e 	bl	8005810 <xchg_spi>
 8005b94:	210f      	movs	r1, #15
 8005b96:	187b      	adds	r3, r7, r1
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	187b      	adds	r3, r7, r1
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	240f      	movs	r4, #15
 8005ba2:	193b      	adds	r3, r7, r4
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f1      	bne.n	8005b8e <USER_SPI_initialize+0x4e>

	ty = 0;
 8005baa:	230d      	movs	r3, #13
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f7ff ff34 	bl	8005a22 <send_cmd>
 8005bba:	0003      	movs	r3, r0
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d000      	beq.n	8005bc2 <USER_SPI_initialize+0x82>
 8005bc0:	e0a6      	b.n	8005d10 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8005bc2:	23fa      	movs	r3, #250	@ 0xfa
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f7ff fdf8 	bl	80057bc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005bcc:	23d5      	movs	r3, #213	@ 0xd5
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	2008      	movs	r0, #8
 8005bd4:	f7ff ff25 	bl	8005a22 <send_cmd>
 8005bd8:	0003      	movs	r3, r0
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d162      	bne.n	8005ca4 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005bde:	193b      	adds	r3, r7, r4
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	e00f      	b.n	8005c06 <USER_SPI_initialize+0xc6>
 8005be6:	250f      	movs	r5, #15
 8005be8:	197b      	adds	r3, r7, r5
 8005bea:	781c      	ldrb	r4, [r3, #0]
 8005bec:	20ff      	movs	r0, #255	@ 0xff
 8005bee:	f7ff fe0f 	bl	8005810 <xchg_spi>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	001a      	movs	r2, r3
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	18fb      	adds	r3, r7, r3
 8005bfa:	551a      	strb	r2, [r3, r4]
 8005bfc:	197b      	adds	r3, r7, r5
 8005bfe:	781a      	ldrb	r2, [r3, #0]
 8005c00:	197b      	adds	r3, r7, r5
 8005c02:	3201      	adds	r2, #1
 8005c04:	701a      	strb	r2, [r3, #0]
 8005c06:	230f      	movs	r3, #15
 8005c08:	18fb      	adds	r3, r7, r3
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d9ea      	bls.n	8005be6 <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8005c10:	2208      	movs	r2, #8
 8005c12:	18bb      	adds	r3, r7, r2
 8005c14:	789b      	ldrb	r3, [r3, #2]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d000      	beq.n	8005c1c <USER_SPI_initialize+0xdc>
 8005c1a:	e079      	b.n	8005d10 <USER_SPI_initialize+0x1d0>
 8005c1c:	18bb      	adds	r3, r7, r2
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	2baa      	cmp	r3, #170	@ 0xaa
 8005c22:	d000      	beq.n	8005c26 <USER_SPI_initialize+0xe6>
 8005c24:	e074      	b.n	8005d10 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005c26:	46c0      	nop			@ (mov r8, r8)
 8005c28:	f7ff fddc 	bl	80057e4 <SPI_Timer_Status>
 8005c2c:	1e03      	subs	r3, r0, #0
 8005c2e:	d007      	beq.n	8005c40 <USER_SPI_initialize+0x100>
 8005c30:	2380      	movs	r3, #128	@ 0x80
 8005c32:	05db      	lsls	r3, r3, #23
 8005c34:	0019      	movs	r1, r3
 8005c36:	20a9      	movs	r0, #169	@ 0xa9
 8005c38:	f7ff fef3 	bl	8005a22 <send_cmd>
 8005c3c:	1e03      	subs	r3, r0, #0
 8005c3e:	d1f3      	bne.n	8005c28 <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005c40:	f7ff fdd0 	bl	80057e4 <SPI_Timer_Status>
 8005c44:	1e03      	subs	r3, r0, #0
 8005c46:	d063      	beq.n	8005d10 <USER_SPI_initialize+0x1d0>
 8005c48:	2100      	movs	r1, #0
 8005c4a:	203a      	movs	r0, #58	@ 0x3a
 8005c4c:	f7ff fee9 	bl	8005a22 <send_cmd>
 8005c50:	1e03      	subs	r3, r0, #0
 8005c52:	d15d      	bne.n	8005d10 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8005c54:	230f      	movs	r3, #15
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e00f      	b.n	8005c7e <USER_SPI_initialize+0x13e>
 8005c5e:	250f      	movs	r5, #15
 8005c60:	197b      	adds	r3, r7, r5
 8005c62:	781c      	ldrb	r4, [r3, #0]
 8005c64:	20ff      	movs	r0, #255	@ 0xff
 8005c66:	f7ff fdd3 	bl	8005810 <xchg_spi>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	001a      	movs	r2, r3
 8005c6e:	2308      	movs	r3, #8
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	551a      	strb	r2, [r3, r4]
 8005c74:	197b      	adds	r3, r7, r5
 8005c76:	781a      	ldrb	r2, [r3, #0]
 8005c78:	197b      	adds	r3, r7, r5
 8005c7a:	3201      	adds	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
 8005c7e:	230f      	movs	r3, #15
 8005c80:	18fb      	adds	r3, r7, r3
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d9ea      	bls.n	8005c5e <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8005c88:	2308      	movs	r3, #8
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	001a      	movs	r2, r3
 8005c90:	2340      	movs	r3, #64	@ 0x40
 8005c92:	4013      	ands	r3, r2
 8005c94:	d001      	beq.n	8005c9a <USER_SPI_initialize+0x15a>
 8005c96:	220c      	movs	r2, #12
 8005c98:	e000      	b.n	8005c9c <USER_SPI_initialize+0x15c>
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	230d      	movs	r3, #13
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	701a      	strb	r2, [r3, #0]
 8005ca2:	e035      	b.n	8005d10 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	20a9      	movs	r0, #169	@ 0xa9
 8005ca8:	f7ff febb 	bl	8005a22 <send_cmd>
 8005cac:	0003      	movs	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d808      	bhi.n	8005cc4 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8005cb2:	230d      	movs	r3, #13
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	230e      	movs	r3, #14
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	22a9      	movs	r2, #169	@ 0xa9
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	e007      	b.n	8005cd4 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8005cc4:	230d      	movs	r3, #13
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	230e      	movs	r3, #14
 8005cce:	18fb      	adds	r3, r7, r3
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8005cd4:	46c0      	nop			@ (mov r8, r8)
 8005cd6:	f7ff fd85 	bl	80057e4 <SPI_Timer_Status>
 8005cda:	1e03      	subs	r3, r0, #0
 8005cdc:	d008      	beq.n	8005cf0 <USER_SPI_initialize+0x1b0>
 8005cde:	230e      	movs	r3, #14
 8005ce0:	18fb      	adds	r3, r7, r3
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	f7ff fe9b 	bl	8005a22 <send_cmd>
 8005cec:	1e03      	subs	r3, r0, #0
 8005cee:	d1f2      	bne.n	8005cd6 <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005cf0:	f7ff fd78 	bl	80057e4 <SPI_Timer_Status>
 8005cf4:	1e03      	subs	r3, r0, #0
 8005cf6:	d007      	beq.n	8005d08 <USER_SPI_initialize+0x1c8>
 8005cf8:	2380      	movs	r3, #128	@ 0x80
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	2010      	movs	r0, #16
 8005d00:	f7ff fe8f 	bl	8005a22 <send_cmd>
 8005d04:	1e03      	subs	r3, r0, #0
 8005d06:	d003      	beq.n	8005d10 <USER_SPI_initialize+0x1d0>
				ty = 0;
 8005d08:	230d      	movs	r3, #13
 8005d0a:	18fb      	adds	r3, r7, r3
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8005d10:	4b16      	ldr	r3, [pc, #88]	@ (8005d6c <USER_SPI_initialize+0x22c>)
 8005d12:	240d      	movs	r4, #13
 8005d14:	193a      	adds	r2, r7, r4
 8005d16:	7812      	ldrb	r2, [r2, #0]
 8005d18:	701a      	strb	r2, [r3, #0]
	despiselect();
 8005d1a:	f7ff fde9 	bl	80058f0 <despiselect>

	if (ty) {			/* OK */
 8005d1e:	193b      	adds	r3, r7, r4
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d013      	beq.n	8005d4e <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 8005d26:	4b10      	ldr	r3, [pc, #64]	@ (8005d68 <USER_SPI_initialize+0x228>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2238      	movs	r2, #56	@ 0x38
 8005d2e:	4393      	bics	r3, r2
 8005d30:	001a      	movs	r2, r3
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <USER_SPI_initialize+0x228>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2110      	movs	r1, #16
 8005d38:	430a      	orrs	r2, r1
 8005d3a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005d3c:	4b09      	ldr	r3, [pc, #36]	@ (8005d64 <USER_SPI_initialize+0x224>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2201      	movs	r2, #1
 8005d44:	4393      	bics	r3, r2
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <USER_SPI_initialize+0x224>)
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e002      	b.n	8005d54 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005d4e:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <USER_SPI_initialize+0x224>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005d54:	4b03      	ldr	r3, [pc, #12]	@ (8005d64 <USER_SPI_initialize+0x224>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	b2db      	uxtb	r3, r3
}
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	b004      	add	sp, #16
 8005d60:	bdb0      	pop	{r4, r5, r7, pc}
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	200000e0 	.word	0x200000e0
 8005d68:	20000934 	.word	0x20000934
 8005d6c:	20000b1d 	.word	0x20000b1d

08005d70 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
		BYTE drv		/* Physical drive number (0) */
)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	0002      	movs	r2, r0
 8005d78:	1dfb      	adds	r3, r7, #7
 8005d7a:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8005d7c:	1dfb      	adds	r3, r7, #7
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <USER_SPI_status+0x18>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e002      	b.n	8005d8e <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 8005d88:	4b03      	ldr	r3, [pc, #12]	@ (8005d98 <USER_SPI_status+0x28>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	b2db      	uxtb	r3, r3
}
 8005d8e:	0018      	movs	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b002      	add	sp, #8
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	200000e0 	.word	0x200000e0

08005d9c <USER_SPI_read>:
		BYTE drv,		/* Physical drive number (0) */
		BYTE *buff,		/* Pointer to the data buffer to store read data */
		DWORD sector,	/* Start sector number (LBA) */
		UINT count		/* Number of sectors to read (1..128) */
)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	210f      	movs	r1, #15
 8005daa:	187b      	adds	r3, r7, r1
 8005dac:	1c02      	adds	r2, r0, #0
 8005dae:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d102      	bne.n	8005dbe <USER_SPI_read+0x22>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <USER_SPI_read+0x26>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	e04f      	b.n	8005e62 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8005e6c <USER_SPI_read+0xd0>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	001a      	movs	r2, r3
 8005dca:	2301      	movs	r3, #1
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d001      	beq.n	8005dd4 <USER_SPI_read+0x38>
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e046      	b.n	8005e62 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8005dd4:	4b26      	ldr	r3, [pc, #152]	@ (8005e70 <USER_SPI_read+0xd4>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	001a      	movs	r2, r3
 8005dda:	2308      	movs	r3, #8
 8005ddc:	4013      	ands	r3, r2
 8005dde:	d102      	bne.n	8005de6 <USER_SPI_read+0x4a>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	025b      	lsls	r3, r3, #9
 8005de4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d112      	bne.n	8005e12 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	0019      	movs	r1, r3
 8005df0:	2011      	movs	r0, #17
 8005df2:	f7ff fe16 	bl	8005a22 <send_cmd>
 8005df6:	1e03      	subs	r3, r0, #0
 8005df8:	d12d      	bne.n	8005e56 <USER_SPI_read+0xba>
				&& rcvr_datablock(buff, 512)) {
 8005dfa:	2380      	movs	r3, #128	@ 0x80
 8005dfc:	009a      	lsls	r2, r3, #2
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	0011      	movs	r1, r2
 8005e02:	0018      	movs	r0, r3
 8005e04:	f7ff fda4 	bl	8005950 <rcvr_datablock>
 8005e08:	1e03      	subs	r3, r0, #0
 8005e0a:	d024      	beq.n	8005e56 <USER_SPI_read+0xba>
			count = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	e021      	b.n	8005e56 <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	0019      	movs	r1, r3
 8005e16:	2012      	movs	r0, #18
 8005e18:	f7ff fe03 	bl	8005a22 <send_cmd>
 8005e1c:	1e03      	subs	r3, r0, #0
 8005e1e:	d11a      	bne.n	8005e56 <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005e20:	2380      	movs	r3, #128	@ 0x80
 8005e22:	009a      	lsls	r2, r3, #2
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	0011      	movs	r1, r2
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7ff fd91 	bl	8005950 <rcvr_datablock>
 8005e2e:	1e03      	subs	r3, r0, #0
 8005e30:	d00c      	beq.n	8005e4c <USER_SPI_read+0xb0>
				buff += 512;
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2280      	movs	r2, #128	@ 0x80
 8005e36:	0092      	lsls	r2, r2, #2
 8005e38:	4694      	mov	ip, r2
 8005e3a:	4463      	add	r3, ip
 8005e3c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1ea      	bne.n	8005e20 <USER_SPI_read+0x84>
 8005e4a:	e000      	b.n	8005e4e <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8005e4c:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005e4e:	2100      	movs	r1, #0
 8005e50:	200c      	movs	r0, #12
 8005e52:	f7ff fde6 	bl	8005a22 <send_cmd>
		}
	}
	despiselect();
 8005e56:	f7ff fd4b 	bl	80058f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	1e5a      	subs	r2, r3, #1
 8005e5e:	4193      	sbcs	r3, r2
 8005e60:	b2db      	uxtb	r3, r3
}
 8005e62:	0018      	movs	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	b004      	add	sp, #16
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	200000e0 	.word	0x200000e0
 8005e70:	20000b1d 	.word	0x20000b1d

08005e74 <USER_SPI_write>:
		BYTE drv,			/* Physical drive number (0) */
		const BYTE *buff,	/* Ponter to the data to write */
		DWORD sector,		/* Start sector number (LBA) */
		UINT count			/* Number of sectors to write (1..128) */
)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
 8005e7e:	603b      	str	r3, [r7, #0]
 8005e80:	210f      	movs	r1, #15
 8005e82:	187b      	adds	r3, r7, r1
 8005e84:	1c02      	adds	r2, r0, #0
 8005e86:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d102      	bne.n	8005e96 <USER_SPI_write+0x22>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <USER_SPI_write+0x26>
 8005e96:	2304      	movs	r3, #4
 8005e98:	e063      	b.n	8005f62 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005e9a:	4b34      	ldr	r3, [pc, #208]	@ (8005f6c <USER_SPI_write+0xf8>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	001a      	movs	r2, r3
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d001      	beq.n	8005eac <USER_SPI_write+0x38>
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e05a      	b.n	8005f62 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8005eac:	4b2f      	ldr	r3, [pc, #188]	@ (8005f6c <USER_SPI_write+0xf8>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	001a      	movs	r2, r3
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d001      	beq.n	8005ebe <USER_SPI_write+0x4a>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e051      	b.n	8005f62 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8005ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8005f70 <USER_SPI_write+0xfc>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	001a      	movs	r2, r3
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	d102      	bne.n	8005ed0 <USER_SPI_write+0x5c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	025b      	lsls	r3, r3, #9
 8005ece:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d110      	bne.n	8005ef8 <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	0019      	movs	r1, r3
 8005eda:	2018      	movs	r0, #24
 8005edc:	f7ff fda1 	bl	8005a22 <send_cmd>
 8005ee0:	1e03      	subs	r3, r0, #0
 8005ee2:	d138      	bne.n	8005f56 <USER_SPI_write+0xe2>
				&& xmit_datablock(buff, 0xFE)) {
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	21fe      	movs	r1, #254	@ 0xfe
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f7ff fd60 	bl	80059ae <xmit_datablock>
 8005eee:	1e03      	subs	r3, r0, #0
 8005ef0:	d031      	beq.n	8005f56 <USER_SPI_write+0xe2>
			count = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	e02e      	b.n	8005f56 <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8005ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f70 <USER_SPI_write+0xfc>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	001a      	movs	r2, r3
 8005efe:	2306      	movs	r3, #6
 8005f00:	4013      	ands	r3, r2
 8005f02:	d004      	beq.n	8005f0e <USER_SPI_write+0x9a>
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	0019      	movs	r1, r3
 8005f08:	2097      	movs	r0, #151	@ 0x97
 8005f0a:	f7ff fd8a 	bl	8005a22 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	0019      	movs	r1, r3
 8005f12:	2019      	movs	r0, #25
 8005f14:	f7ff fd85 	bl	8005a22 <send_cmd>
 8005f18:	1e03      	subs	r3, r0, #0
 8005f1a:	d11c      	bne.n	8005f56 <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	21fc      	movs	r1, #252	@ 0xfc
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7ff fd44 	bl	80059ae <xmit_datablock>
 8005f26:	1e03      	subs	r3, r0, #0
 8005f28:	d00c      	beq.n	8005f44 <USER_SPI_write+0xd0>
				buff += 512;
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2280      	movs	r2, #128	@ 0x80
 8005f2e:	0092      	lsls	r2, r2, #2
 8005f30:	4694      	mov	ip, r2
 8005f32:	4463      	add	r3, ip
 8005f34:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1ec      	bne.n	8005f1c <USER_SPI_write+0xa8>
 8005f42:	e000      	b.n	8005f46 <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8005f44:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8005f46:	21fd      	movs	r1, #253	@ 0xfd
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f7ff fd30 	bl	80059ae <xmit_datablock>
 8005f4e:	1e03      	subs	r3, r0, #0
 8005f50:	d101      	bne.n	8005f56 <USER_SPI_write+0xe2>
 8005f52:	2301      	movs	r3, #1
 8005f54:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005f56:	f7ff fccb 	bl	80058f0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	4193      	sbcs	r3, r2
 8005f60:	b2db      	uxtb	r3, r3
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b004      	add	sp, #16
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	200000e0 	.word	0x200000e0
 8005f70:	20000b1d 	.word	0x20000b1d

08005f74 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
		BYTE drv,		/* Physical drive number (0) */
		BYTE cmd,		/* Control command code */
		void *buff		/* Pointer to the conrtol data */
)
{
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b08d      	sub	sp, #52	@ 0x34
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	603a      	str	r2, [r7, #0]
 8005f7c:	1dfb      	adds	r3, r7, #7
 8005f7e:	1c02      	adds	r2, r0, #0
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	1dbb      	adds	r3, r7, #6
 8005f84:	1c0a      	adds	r2, r1, #0
 8005f86:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005f88:	1dfb      	adds	r3, r7, #7
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <USER_SPI_ioctl+0x20>
 8005f90:	2304      	movs	r3, #4
 8005f92:	e178      	b.n	8006286 <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8005f94:	4bbe      	ldr	r3, [pc, #760]	@ (8006290 <USER_SPI_ioctl+0x31c>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	001a      	movs	r2, r3
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	d001      	beq.n	8005fa6 <USER_SPI_ioctl+0x32>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e16f      	b.n	8006286 <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 8005fa6:	232f      	movs	r3, #47	@ 0x2f
 8005fa8:	18fb      	adds	r3, r7, r3
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 8005fae:	1dbb      	adds	r3, r7, #6
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d100      	bne.n	8005fb8 <USER_SPI_ioctl+0x44>
 8005fb6:	e100      	b.n	80061ba <USER_SPI_ioctl+0x246>
 8005fb8:	dd00      	ble.n	8005fbc <USER_SPI_ioctl+0x48>
 8005fba:	e14d      	b.n	8006258 <USER_SPI_ioctl+0x2e4>
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d100      	bne.n	8005fc2 <USER_SPI_ioctl+0x4e>
 8005fc0:	e074      	b.n	80060ac <USER_SPI_ioctl+0x138>
 8005fc2:	dd00      	ble.n	8005fc6 <USER_SPI_ioctl+0x52>
 8005fc4:	e148      	b.n	8006258 <USER_SPI_ioctl+0x2e4>
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <USER_SPI_ioctl+0x5c>
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d00a      	beq.n	8005fe4 <USER_SPI_ioctl+0x70>
 8005fce:	e143      	b.n	8006258 <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8005fd0:	f7ff fca0 	bl	8005914 <spiselect>
 8005fd4:	1e03      	subs	r3, r0, #0
 8005fd6:	d100      	bne.n	8005fda <USER_SPI_ioctl+0x66>
 8005fd8:	e143      	b.n	8006262 <USER_SPI_ioctl+0x2ee>
 8005fda:	232f      	movs	r3, #47	@ 0x2f
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
		break;
 8005fe2:	e13e      	b.n	8006262 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	2009      	movs	r0, #9
 8005fe8:	f7ff fd1b 	bl	8005a22 <send_cmd>
 8005fec:	1e03      	subs	r3, r0, #0
 8005fee:	d000      	beq.n	8005ff2 <USER_SPI_ioctl+0x7e>
 8005ff0:	e139      	b.n	8006266 <USER_SPI_ioctl+0x2f2>
 8005ff2:	240c      	movs	r4, #12
 8005ff4:	193b      	adds	r3, r7, r4
 8005ff6:	2110      	movs	r1, #16
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f7ff fca9 	bl	8005950 <rcvr_datablock>
 8005ffe:	1e03      	subs	r3, r0, #0
 8006000:	d100      	bne.n	8006004 <USER_SPI_ioctl+0x90>
 8006002:	e130      	b.n	8006266 <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006004:	0020      	movs	r0, r4
 8006006:	183b      	adds	r3, r7, r0
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	099b      	lsrs	r3, r3, #6
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b01      	cmp	r3, #1
 8006010:	d115      	bne.n	800603e <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006012:	183b      	adds	r3, r7, r0
 8006014:	7a5b      	ldrb	r3, [r3, #9]
 8006016:	001a      	movs	r2, r3
 8006018:	183b      	adds	r3, r7, r0
 800601a:	7a1b      	ldrb	r3, [r3, #8]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	18d3      	adds	r3, r2, r3
 8006020:	0019      	movs	r1, r3
 8006022:	183b      	adds	r3, r7, r0
 8006024:	79db      	ldrb	r3, [r3, #7]
 8006026:	041a      	lsls	r2, r3, #16
 8006028:	23fc      	movs	r3, #252	@ 0xfc
 800602a:	039b      	lsls	r3, r3, #14
 800602c:	4013      	ands	r3, r2
 800602e:	18cb      	adds	r3, r1, r3
 8006030:	3301      	adds	r3, #1
 8006032:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	029a      	lsls	r2, r3, #10
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e031      	b.n	80060a2 <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800603e:	200c      	movs	r0, #12
 8006040:	183b      	adds	r3, r7, r0
 8006042:	795b      	ldrb	r3, [r3, #5]
 8006044:	220f      	movs	r2, #15
 8006046:	4013      	ands	r3, r2
 8006048:	b2da      	uxtb	r2, r3
 800604a:	183b      	adds	r3, r7, r0
 800604c:	7a9b      	ldrb	r3, [r3, #10]
 800604e:	09db      	lsrs	r3, r3, #7
 8006050:	b2db      	uxtb	r3, r3
 8006052:	18d3      	adds	r3, r2, r3
 8006054:	b2da      	uxtb	r2, r3
 8006056:	183b      	adds	r3, r7, r0
 8006058:	7a5b      	ldrb	r3, [r3, #9]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2106      	movs	r1, #6
 8006060:	400b      	ands	r3, r1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	18d3      	adds	r3, r2, r3
 8006066:	b2da      	uxtb	r2, r3
 8006068:	242e      	movs	r4, #46	@ 0x2e
 800606a:	193b      	adds	r3, r7, r4
 800606c:	3202      	adds	r2, #2
 800606e:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006070:	183b      	adds	r3, r7, r0
 8006072:	7a1b      	ldrb	r3, [r3, #8]
 8006074:	099b      	lsrs	r3, r3, #6
 8006076:	b2db      	uxtb	r3, r3
 8006078:	001a      	movs	r2, r3
 800607a:	183b      	adds	r3, r7, r0
 800607c:	79db      	ldrb	r3, [r3, #7]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	18d2      	adds	r2, r2, r3
 8006082:	183b      	adds	r3, r7, r0
 8006084:	799b      	ldrb	r3, [r3, #6]
 8006086:	0299      	lsls	r1, r3, #10
 8006088:	23c0      	movs	r3, #192	@ 0xc0
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	400b      	ands	r3, r1
 800608e:	18d3      	adds	r3, r2, r3
 8006090:	3301      	adds	r3, #1
 8006092:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006094:	193b      	adds	r3, r7, r4
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	3b09      	subs	r3, #9
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	409a      	lsls	r2, r3
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80060a2:	232f      	movs	r3, #47	@ 0x2f
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060aa:	e0dc      	b.n	8006266 <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80060ac:	4b79      	ldr	r3, [pc, #484]	@ (8006294 <USER_SPI_ioctl+0x320>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	001a      	movs	r2, r3
 80060b2:	2304      	movs	r3, #4
 80060b4:	4013      	ands	r3, r2
 80060b6:	d035      	beq.n	8006124 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80060b8:	2100      	movs	r1, #0
 80060ba:	208d      	movs	r0, #141	@ 0x8d
 80060bc:	f7ff fcb1 	bl	8005a22 <send_cmd>
 80060c0:	1e03      	subs	r3, r0, #0
 80060c2:	d000      	beq.n	80060c6 <USER_SPI_ioctl+0x152>
 80060c4:	e0d1      	b.n	800626a <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 80060c6:	20ff      	movs	r0, #255	@ 0xff
 80060c8:	f7ff fba2 	bl	8005810 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80060cc:	230c      	movs	r3, #12
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	2110      	movs	r1, #16
 80060d2:	0018      	movs	r0, r3
 80060d4:	f7ff fc3c 	bl	8005950 <rcvr_datablock>
 80060d8:	1e03      	subs	r3, r0, #0
 80060da:	d100      	bne.n	80060de <USER_SPI_ioctl+0x16a>
 80060dc:	e0c5      	b.n	800626a <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80060de:	232e      	movs	r3, #46	@ 0x2e
 80060e0:	18fb      	adds	r3, r7, r3
 80060e2:	2230      	movs	r2, #48	@ 0x30
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	e008      	b.n	80060fa <USER_SPI_ioctl+0x186>
 80060e8:	20ff      	movs	r0, #255	@ 0xff
 80060ea:	f7ff fb91 	bl	8005810 <xchg_spi>
 80060ee:	212e      	movs	r1, #46	@ 0x2e
 80060f0:	187b      	adds	r3, r7, r1
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	187b      	adds	r3, r7, r1
 80060f6:	3a01      	subs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	232e      	movs	r3, #46	@ 0x2e
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1f1      	bne.n	80060e8 <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006104:	230c      	movs	r3, #12
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	7a9b      	ldrb	r3, [r3, #10]
 800610a:	091b      	lsrs	r3, r3, #4
 800610c:	b2db      	uxtb	r3, r3
 800610e:	001a      	movs	r2, r3
 8006110:	2310      	movs	r3, #16
 8006112:	4093      	lsls	r3, r2
 8006114:	001a      	movs	r2, r3
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800611a:	232f      	movs	r3, #47	@ 0x2f
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	2200      	movs	r2, #0
 8006120:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006122:	e0a2      	b.n	800626a <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006124:	2100      	movs	r1, #0
 8006126:	2009      	movs	r0, #9
 8006128:	f7ff fc7b 	bl	8005a22 <send_cmd>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d000      	beq.n	8006132 <USER_SPI_ioctl+0x1be>
 8006130:	e09b      	b.n	800626a <USER_SPI_ioctl+0x2f6>
 8006132:	240c      	movs	r4, #12
 8006134:	193b      	adds	r3, r7, r4
 8006136:	2110      	movs	r1, #16
 8006138:	0018      	movs	r0, r3
 800613a:	f7ff fc09 	bl	8005950 <rcvr_datablock>
 800613e:	1e03      	subs	r3, r0, #0
 8006140:	d100      	bne.n	8006144 <USER_SPI_ioctl+0x1d0>
 8006142:	e092      	b.n	800626a <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006144:	4b53      	ldr	r3, [pc, #332]	@ (8006294 <USER_SPI_ioctl+0x320>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	001a      	movs	r2, r3
 800614a:	2302      	movs	r3, #2
 800614c:	4013      	ands	r3, r2
 800614e:	d016      	beq.n	800617e <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006150:	0021      	movs	r1, r4
 8006152:	187b      	adds	r3, r7, r1
 8006154:	7a9b      	ldrb	r3, [r3, #10]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	227e      	movs	r2, #126	@ 0x7e
 800615a:	4013      	ands	r3, r2
 800615c:	187a      	adds	r2, r7, r1
 800615e:	7ad2      	ldrb	r2, [r2, #11]
 8006160:	09d2      	lsrs	r2, r2, #7
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	189b      	adds	r3, r3, r2
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	187b      	adds	r3, r7, r1
 800616a:	7b5b      	ldrb	r3, [r3, #13]
 800616c:	099b      	lsrs	r3, r3, #6
 800616e:	b2db      	uxtb	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	409a      	lsls	r2, r3
 8006174:	0013      	movs	r3, r2
 8006176:	001a      	movs	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	e018      	b.n	80061b0 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800617e:	210c      	movs	r1, #12
 8006180:	187b      	adds	r3, r7, r1
 8006182:	7a9b      	ldrb	r3, [r3, #10]
 8006184:	109b      	asrs	r3, r3, #2
 8006186:	b29b      	uxth	r3, r3
 8006188:	001a      	movs	r2, r3
 800618a:	231f      	movs	r3, #31
 800618c:	4013      	ands	r3, r2
 800618e:	3301      	adds	r3, #1
 8006190:	0008      	movs	r0, r1
 8006192:	187a      	adds	r2, r7, r1
 8006194:	7ad2      	ldrb	r2, [r2, #11]
 8006196:	00d2      	lsls	r2, r2, #3
 8006198:	2118      	movs	r1, #24
 800619a:	400a      	ands	r2, r1
 800619c:	1839      	adds	r1, r7, r0
 800619e:	7ac9      	ldrb	r1, [r1, #11]
 80061a0:	0949      	lsrs	r1, r1, #5
 80061a2:	b2c9      	uxtb	r1, r1
 80061a4:	1852      	adds	r2, r2, r1
 80061a6:	3201      	adds	r2, #1
 80061a8:	4353      	muls	r3, r2
 80061aa:	001a      	movs	r2, r3
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80061b0:	232f      	movs	r3, #47	@ 0x2f
 80061b2:	18fb      	adds	r3, r7, r3
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
		break;
 80061b8:	e057      	b.n	800626a <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80061ba:	4b36      	ldr	r3, [pc, #216]	@ (8006294 <USER_SPI_ioctl+0x320>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	001a      	movs	r2, r3
 80061c0:	2306      	movs	r3, #6
 80061c2:	4013      	ands	r3, r2
 80061c4:	d053      	beq.n	800626e <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80061c6:	240c      	movs	r4, #12
 80061c8:	193a      	adds	r2, r7, r4
 80061ca:	1dfb      	adds	r3, r7, #7
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	210b      	movs	r1, #11
 80061d0:	0018      	movs	r0, r3
 80061d2:	f7ff fecf 	bl	8005f74 <USER_SPI_ioctl>
 80061d6:	1e03      	subs	r3, r0, #0
 80061d8:	d14b      	bne.n	8006272 <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80061da:	193b      	adds	r3, r7, r4
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	099b      	lsrs	r3, r3, #6
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d105      	bne.n	80061f2 <USER_SPI_ioctl+0x27e>
 80061e6:	193b      	adds	r3, r7, r4
 80061e8:	7a9b      	ldrb	r3, [r3, #10]
 80061ea:	001a      	movs	r2, r3
 80061ec:	2340      	movs	r3, #64	@ 0x40
 80061ee:	4013      	ands	r3, r2
 80061f0:	d041      	beq.n	8006276 <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	623b      	str	r3, [r7, #32]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8006202:	4b24      	ldr	r3, [pc, #144]	@ (8006294 <USER_SPI_ioctl+0x320>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	001a      	movs	r2, r3
 8006208:	2308      	movs	r3, #8
 800620a:	4013      	ands	r3, r2
 800620c:	d105      	bne.n	800621a <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 800620e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006210:	025b      	lsls	r3, r3, #9
 8006212:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	025b      	lsls	r3, r3, #9
 8006218:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	0019      	movs	r1, r3
 800621e:	2020      	movs	r0, #32
 8006220:	f7ff fbff 	bl	8005a22 <send_cmd>
 8006224:	1e03      	subs	r3, r0, #0
 8006226:	d128      	bne.n	800627a <USER_SPI_ioctl+0x306>
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	0019      	movs	r1, r3
 800622c:	2021      	movs	r0, #33	@ 0x21
 800622e:	f7ff fbf8 	bl	8005a22 <send_cmd>
 8006232:	1e03      	subs	r3, r0, #0
 8006234:	d121      	bne.n	800627a <USER_SPI_ioctl+0x306>
 8006236:	2100      	movs	r1, #0
 8006238:	2026      	movs	r0, #38	@ 0x26
 800623a:	f7ff fbf2 	bl	8005a22 <send_cmd>
 800623e:	1e03      	subs	r3, r0, #0
 8006240:	d11b      	bne.n	800627a <USER_SPI_ioctl+0x306>
 8006242:	4b15      	ldr	r3, [pc, #84]	@ (8006298 <USER_SPI_ioctl+0x324>)
 8006244:	0018      	movs	r0, r3
 8006246:	f7ff fb2b 	bl	80058a0 <wait_ready>
 800624a:	1e03      	subs	r3, r0, #0
 800624c:	d015      	beq.n	800627a <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 800624e:	232f      	movs	r3, #47	@ 0x2f
 8006250:	18fb      	adds	r3, r7, r3
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006256:	e010      	b.n	800627a <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 8006258:	232f      	movs	r3, #47	@ 0x2f
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	2204      	movs	r2, #4
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	e00c      	b.n	800627c <USER_SPI_ioctl+0x308>
		break;
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	e00a      	b.n	800627c <USER_SPI_ioctl+0x308>
		break;
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	e008      	b.n	800627c <USER_SPI_ioctl+0x308>
		break;
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	e006      	b.n	800627c <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800626e:	46c0      	nop			@ (mov r8, r8)
 8006270:	e004      	b.n	800627c <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	e002      	b.n	800627c <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006276:	46c0      	nop			@ (mov r8, r8)
 8006278:	e000      	b.n	800627c <USER_SPI_ioctl+0x308>
		break;
 800627a:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 800627c:	f7ff fb38 	bl	80058f0 <despiselect>

	return res;
 8006280:	232f      	movs	r3, #47	@ 0x2f
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	781b      	ldrb	r3, [r3, #0]
}
 8006286:	0018      	movs	r0, r3
 8006288:	46bd      	mov	sp, r7
 800628a:	b00d      	add	sp, #52	@ 0x34
 800628c:	bd90      	pop	{r4, r7, pc}
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	200000e0 	.word	0x200000e0
 8006294:	20000b1d 	.word	0x20000b1d
 8006298:	00007530 	.word	0x00007530

0800629c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800629c:	b5b0      	push	{r4, r5, r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	0002      	movs	r2, r0
 80062a4:	1dfb      	adds	r3, r7, #7
 80062a6:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80062a8:	1dfb      	adds	r3, r7, #7
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	4a0b      	ldr	r2, [pc, #44]	@ (80062dc <disk_status+0x40>)
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	18d3      	adds	r3, r2, r3
 80062b2:	3304      	adds	r3, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	1dfa      	adds	r2, r7, #7
 80062ba:	7812      	ldrb	r2, [r2, #0]
 80062bc:	4907      	ldr	r1, [pc, #28]	@ (80062dc <disk_status+0x40>)
 80062be:	188a      	adds	r2, r1, r2
 80062c0:	7a12      	ldrb	r2, [r2, #8]
 80062c2:	250f      	movs	r5, #15
 80062c4:	197c      	adds	r4, r7, r5
 80062c6:	0010      	movs	r0, r2
 80062c8:	4798      	blx	r3
 80062ca:	0003      	movs	r3, r0
 80062cc:	7023      	strb	r3, [r4, #0]
  return stat;
 80062ce:	197b      	adds	r3, r7, r5
 80062d0:	781b      	ldrb	r3, [r3, #0]
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b004      	add	sp, #16
 80062d8:	bdb0      	pop	{r4, r5, r7, pc}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	20000b50 	.word	0x20000b50

080062e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	0002      	movs	r2, r0
 80062e8:	1dfb      	adds	r3, r7, #7
 80062ea:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80062ec:	200f      	movs	r0, #15
 80062ee:	183b      	adds	r3, r7, r0
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80062f4:	1dfb      	adds	r3, r7, #7
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	4a10      	ldr	r2, [pc, #64]	@ (800633c <disk_initialize+0x5c>)
 80062fa:	5cd3      	ldrb	r3, [r2, r3]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d116      	bne.n	800632e <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 8006300:	1dfb      	adds	r3, r7, #7
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	4a0d      	ldr	r2, [pc, #52]	@ (800633c <disk_initialize+0x5c>)
 8006306:	2101      	movs	r1, #1
 8006308:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800630a:	1dfb      	adds	r3, r7, #7
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	4a0b      	ldr	r2, [pc, #44]	@ (800633c <disk_initialize+0x5c>)
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	18d3      	adds	r3, r2, r3
 8006314:	3304      	adds	r3, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	1dfa      	adds	r2, r7, #7
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	4907      	ldr	r1, [pc, #28]	@ (800633c <disk_initialize+0x5c>)
 8006320:	188a      	adds	r2, r1, r2
 8006322:	7a12      	ldrb	r2, [r2, #8]
 8006324:	183c      	adds	r4, r7, r0
 8006326:	0010      	movs	r0, r2
 8006328:	4798      	blx	r3
 800632a:	0003      	movs	r3, r0
 800632c:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 800632e:	230f      	movs	r3, #15
 8006330:	18fb      	adds	r3, r7, r3
 8006332:	781b      	ldrb	r3, [r3, #0]
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b005      	add	sp, #20
 800633a:	bd90      	pop	{r4, r7, pc}
 800633c:	20000b50 	.word	0x20000b50

08006340 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	210f      	movs	r1, #15
 800634e:	187b      	adds	r3, r7, r1
 8006350:	1c02      	adds	r2, r0, #0
 8006352:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006354:	187b      	adds	r3, r7, r1
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	4a0c      	ldr	r2, [pc, #48]	@ (800638c <disk_read+0x4c>)
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	18d3      	adds	r3, r2, r3
 800635e:	3304      	adds	r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689d      	ldr	r5, [r3, #8]
 8006364:	187b      	adds	r3, r7, r1
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	4a08      	ldr	r2, [pc, #32]	@ (800638c <disk_read+0x4c>)
 800636a:	18d3      	adds	r3, r2, r3
 800636c:	7a18      	ldrb	r0, [r3, #8]
 800636e:	2617      	movs	r6, #23
 8006370:	19bc      	adds	r4, r7, r6
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	47a8      	blx	r5
 800637a:	0003      	movs	r3, r0
 800637c:	7023      	strb	r3, [r4, #0]
  return res;
 800637e:	19bb      	adds	r3, r7, r6
 8006380:	781b      	ldrb	r3, [r3, #0]
}
 8006382:	0018      	movs	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	b007      	add	sp, #28
 8006388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	20000b50 	.word	0x20000b50

08006390 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	210f      	movs	r1, #15
 800639e:	187b      	adds	r3, r7, r1
 80063a0:	1c02      	adds	r2, r0, #0
 80063a2:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80063a4:	187b      	adds	r3, r7, r1
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	4a0c      	ldr	r2, [pc, #48]	@ (80063dc <disk_write+0x4c>)
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	18d3      	adds	r3, r2, r3
 80063ae:	3304      	adds	r3, #4
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68dd      	ldr	r5, [r3, #12]
 80063b4:	187b      	adds	r3, r7, r1
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	4a08      	ldr	r2, [pc, #32]	@ (80063dc <disk_write+0x4c>)
 80063ba:	18d3      	adds	r3, r2, r3
 80063bc:	7a18      	ldrb	r0, [r3, #8]
 80063be:	2617      	movs	r6, #23
 80063c0:	19bc      	adds	r4, r7, r6
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	47a8      	blx	r5
 80063ca:	0003      	movs	r3, r0
 80063cc:	7023      	strb	r3, [r4, #0]
  return res;
 80063ce:	19bb      	adds	r3, r7, r6
 80063d0:	781b      	ldrb	r3, [r3, #0]
}
 80063d2:	0018      	movs	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b007      	add	sp, #28
 80063d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063da:	46c0      	nop			@ (mov r8, r8)
 80063dc:	20000b50 	.word	0x20000b50

080063e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80063e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	603a      	str	r2, [r7, #0]
 80063e8:	1dfb      	adds	r3, r7, #7
 80063ea:	1c02      	adds	r2, r0, #0
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	1dbb      	adds	r3, r7, #6
 80063f0:	1c0a      	adds	r2, r1, #0
 80063f2:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80063f4:	1dfb      	adds	r3, r7, #7
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	4a0c      	ldr	r2, [pc, #48]	@ (800642c <disk_ioctl+0x4c>)
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	18d3      	adds	r3, r2, r3
 80063fe:	3304      	adds	r3, #4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	1dfa      	adds	r2, r7, #7
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	4908      	ldr	r1, [pc, #32]	@ (800642c <disk_ioctl+0x4c>)
 800640a:	188a      	adds	r2, r1, r2
 800640c:	7a10      	ldrb	r0, [r2, #8]
 800640e:	260f      	movs	r6, #15
 8006410:	19bc      	adds	r4, r7, r6
 8006412:	683d      	ldr	r5, [r7, #0]
 8006414:	1dba      	adds	r2, r7, #6
 8006416:	7811      	ldrb	r1, [r2, #0]
 8006418:	002a      	movs	r2, r5
 800641a:	4798      	blx	r3
 800641c:	0003      	movs	r3, r0
 800641e:	7023      	strb	r3, [r4, #0]
  return res;
 8006420:	19bb      	adds	r3, r7, r6
 8006422:	781b      	ldrb	r3, [r3, #0]
}
 8006424:	0018      	movs	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	b005      	add	sp, #20
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642c:	20000b50 	.word	0x20000b50

08006430 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3301      	adds	r3, #1
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	210e      	movs	r1, #14
 8006440:	187b      	adds	r3, r7, r1
 8006442:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8006444:	187b      	adds	r3, r7, r1
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	b21a      	sxth	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	b21b      	sxth	r3, r3
 8006452:	4313      	orrs	r3, r2
 8006454:	b21a      	sxth	r2, r3
 8006456:	187b      	adds	r3, r7, r1
 8006458:	801a      	strh	r2, [r3, #0]
	return rv;
 800645a:	187b      	adds	r3, r7, r1
 800645c:	881b      	ldrh	r3, [r3, #0]
}
 800645e:	0018      	movs	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	b004      	add	sp, #16
 8006464:	bd80      	pop	{r7, pc}

08006466 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3303      	adds	r3, #3
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	3202      	adds	r2, #2
 800647e:	7812      	ldrb	r2, [r2, #0]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	3201      	adds	r2, #1
 800648c:	7812      	ldrb	r2, [r2, #0]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	7812      	ldrb	r2, [r2, #0]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
	return rv;
 800649e:	68fb      	ldr	r3, [r7, #12]
}
 80064a0:	0018      	movs	r0, r3
 80064a2:	46bd      	mov	sp, r7
 80064a4:	b004      	add	sp, #16
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	000a      	movs	r2, r1
 80064b2:	1cbb      	adds	r3, r7, #2
 80064b4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	1cba      	adds	r2, r7, #2
 80064be:	8812      	ldrh	r2, [r2, #0]
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	1cbb      	adds	r3, r7, #2
 80064c6:	1cba      	adds	r2, r7, #2
 80064c8:	8812      	ldrh	r2, [r2, #0]
 80064ca:	0a12      	lsrs	r2, r2, #8
 80064cc:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	1c5a      	adds	r2, r3, #1
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	1cba      	adds	r2, r7, #2
 80064d6:	8812      	ldrh	r2, [r2, #0]
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
}
 80064dc:	46c0      	nop			@ (mov r8, r8)
 80064de:	46bd      	mov	sp, r7
 80064e0:	b002      	add	sp, #8
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	b2d2      	uxtb	r2, r2
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	607a      	str	r2, [r7, #4]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	0a1b      	lsrs	r3, r3, #8
 8006522:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	1c5a      	adds	r2, r3, #1
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
}
 8006530:	46c0      	nop			@ (mov r8, r8)
 8006532:	46bd      	mov	sp, r7
 8006534:	b002      	add	sp, #8
 8006536:	bd80      	pop	{r7, pc}

08006538 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00d      	beq.n	800656e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	1c53      	adds	r3, r2, #1
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	1c59      	adds	r1, r3, #1
 800655c:	6179      	str	r1, [r7, #20]
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3b01      	subs	r3, #1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f1      	bne.n	8006552 <mem_cpy+0x1a>
	}
}
 800656e:	46c0      	nop			@ (mov r8, r8)
 8006570:	46bd      	mov	sp, r7
 8006572:	b006      	add	sp, #24
 8006574:	bd80      	pop	{r7, pc}

08006576 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006576:	b580      	push	{r7, lr}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	617a      	str	r2, [r7, #20]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3b01      	subs	r3, #1
 8006596:	607b      	str	r3, [r7, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f3      	bne.n	8006586 <mem_set+0x10>
}
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	46c0      	nop			@ (mov r8, r8)
 80065a2:	46bd      	mov	sp, r7
 80065a4:	b006      	add	sp, #24
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b088      	sub	sp, #32
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	61fa      	str	r2, [r7, #28]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	0019      	movs	r1, r3
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	61ba      	str	r2, [r7, #24]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	1acb      	subs	r3, r1, r3
 80065d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3b01      	subs	r3, #1
 80065da:	607b      	str	r3, [r7, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <mem_cmp+0x40>
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0eb      	beq.n	80065c0 <mem_cmp+0x18>

	return r;
 80065e8:	697b      	ldr	r3, [r7, #20]
}
 80065ea:	0018      	movs	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b008      	add	sp, #32
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80065fc:	e002      	b.n	8006604 <chk_chr+0x12>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3301      	adds	r3, #1
 8006602:	607b      	str	r3, [r7, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <chk_chr+0x26>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	001a      	movs	r2, r3
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	4293      	cmp	r3, r2
 8006616:	d1f2      	bne.n	80065fe <chk_chr+0xc>
	return *str;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	781b      	ldrb	r3, [r3, #0]
}
 800661c:	0018      	movs	r0, r3
 800661e:	46bd      	mov	sp, r7
 8006620:	b002      	add	sp, #8
 8006622:	bd80      	pop	{r7, pc}

08006624 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d008      	beq.n	8006644 <lock_fs+0x20>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	0018      	movs	r0, r3
 8006638:	f002 faef 	bl	8008c1a <ff_req_grant>
 800663c:	1e03      	subs	r3, r0, #0
 800663e:	d001      	beq.n	8006644 <lock_fs+0x20>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <lock_fs+0x22>
 8006644:	2300      	movs	r3, #0
}
 8006646:	0018      	movs	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	b002      	add	sp, #8
 800664c:	bd80      	pop	{r7, pc}

0800664e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	000a      	movs	r2, r1
 8006658:	1cfb      	adds	r3, r7, #3
 800665a:	701a      	strb	r2, [r3, #0]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d010      	beq.n	8006684 <unlock_fs+0x36>
 8006662:	1cfb      	adds	r3, r7, #3
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b0c      	cmp	r3, #12
 8006668:	d00c      	beq.n	8006684 <unlock_fs+0x36>
 800666a:	1cfb      	adds	r3, r7, #3
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	2b0b      	cmp	r3, #11
 8006670:	d008      	beq.n	8006684 <unlock_fs+0x36>
 8006672:	1cfb      	adds	r3, r7, #3
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b0f      	cmp	r3, #15
 8006678:	d004      	beq.n	8006684 <unlock_fs+0x36>
		ff_rel_grant(fs->sobj);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	0018      	movs	r0, r3
 8006680:	f002 fae1 	bl	8008c46 <ff_rel_grant>
	}
}
 8006684:	46c0      	nop			@ (mov r8, r8)
 8006686:	46bd      	mov	sp, r7
 8006688:	b002      	add	sp, #8
 800668a:	bd80      	pop	{r7, pc}

0800668c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006696:	2300      	movs	r3, #0
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	e027      	b.n	80066f0 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 80066a0:	4b25      	ldr	r3, [pc, #148]	@ (8006738 <chk_lock+0xac>)
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	0112      	lsls	r2, r2, #4
 80066a6:	58d3      	ldr	r3, [r2, r3]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01c      	beq.n	80066e6 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066ac:	4b22      	ldr	r3, [pc, #136]	@ (8006738 <chk_lock+0xac>)
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	0112      	lsls	r2, r2, #4
 80066b2:	58d2      	ldr	r2, [r2, r3]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d116      	bne.n	80066ea <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 80066bc:	4a1e      	ldr	r2, [pc, #120]	@ (8006738 <chk_lock+0xac>)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	18d3      	adds	r3, r2, r3
 80066c4:	3304      	adds	r3, #4
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d10c      	bne.n	80066ea <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 80066d0:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <chk_lock+0xac>)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	18d3      	adds	r3, r2, r3
 80066d8:	3308      	adds	r3, #8
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d102      	bne.n	80066ea <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 80066e4:	e007      	b.n	80066f6 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 80066e6:	2301      	movs	r3, #1
 80066e8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	3301      	adds	r3, #1
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d9d4      	bls.n	80066a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d109      	bne.n	8006710 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <chk_lock+0x7c>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d101      	bne.n	800670c <chk_lock+0x80>
 8006708:	2300      	movs	r3, #0
 800670a:	e011      	b.n	8006730 <chk_lock+0xa4>
 800670c:	2312      	movs	r3, #18
 800670e:	e00f      	b.n	8006730 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <chk_lock+0x9e>
 8006716:	4a08      	ldr	r2, [pc, #32]	@ (8006738 <chk_lock+0xac>)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	18d3      	adds	r3, r2, r3
 800671e:	330c      	adds	r3, #12
 8006720:	881a      	ldrh	r2, [r3, #0]
 8006722:	2380      	movs	r3, #128	@ 0x80
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	429a      	cmp	r2, r3
 8006728:	d101      	bne.n	800672e <chk_lock+0xa2>
 800672a:	2310      	movs	r3, #16
 800672c:	e000      	b.n	8006730 <chk_lock+0xa4>
 800672e:	2300      	movs	r3, #0
}
 8006730:	0018      	movs	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	b004      	add	sp, #16
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20000b30 	.word	0x20000b30

0800673c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006742:	2300      	movs	r3, #0
 8006744:	607b      	str	r3, [r7, #4]
 8006746:	e002      	b.n	800674e <enq_lock+0x12>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3301      	adds	r3, #1
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d805      	bhi.n	8006760 <enq_lock+0x24>
 8006754:	4b07      	ldr	r3, [pc, #28]	@ (8006774 <enq_lock+0x38>)
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	0112      	lsls	r2, r2, #4
 800675a:	58d3      	ldr	r3, [r2, r3]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f3      	bne.n	8006748 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	3b02      	subs	r3, #2
 8006764:	1e5a      	subs	r2, r3, #1
 8006766:	4193      	sbcs	r3, r2
 8006768:	b2db      	uxtb	r3, r3
}
 800676a:	0018      	movs	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	b002      	add	sp, #8
 8006770:	bd80      	pop	{r7, pc}
 8006772:	46c0      	nop			@ (mov r8, r8)
 8006774:	20000b30 	.word	0x20000b30

08006778 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	e01e      	b.n	80067c6 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8006788:	4b3f      	ldr	r3, [pc, #252]	@ (8006888 <inc_lock+0x110>)
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	0112      	lsls	r2, r2, #4
 800678e:	58d2      	ldr	r2, [r2, r3]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d113      	bne.n	80067c0 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8006798:	4a3b      	ldr	r2, [pc, #236]	@ (8006888 <inc_lock+0x110>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	18d3      	adds	r3, r2, r3
 80067a0:	3304      	adds	r3, #4
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d109      	bne.n	80067c0 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 80067ac:	4a36      	ldr	r2, [pc, #216]	@ (8006888 <inc_lock+0x110>)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	18d3      	adds	r3, r2, r3
 80067b4:	3308      	adds	r3, #8
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80067bc:	429a      	cmp	r2, r3
 80067be:	d006      	beq.n	80067ce <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	3301      	adds	r3, #1
 80067c4:	60fb      	str	r3, [r7, #12]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d9dd      	bls.n	8006788 <inc_lock+0x10>
 80067cc:	e000      	b.n	80067d0 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 80067ce:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d130      	bne.n	8006838 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e002      	b.n	80067e2 <inc_lock+0x6a>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3301      	adds	r3, #1
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d805      	bhi.n	80067f4 <inc_lock+0x7c>
 80067e8:	4b27      	ldr	r3, [pc, #156]	@ (8006888 <inc_lock+0x110>)
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	0112      	lsls	r2, r2, #4
 80067ee:	58d3      	ldr	r3, [r2, r3]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f3      	bne.n	80067dc <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d101      	bne.n	80067fe <inc_lock+0x86>
 80067fa:	2300      	movs	r3, #0
 80067fc:	e03f      	b.n	800687e <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6819      	ldr	r1, [r3, #0]
 8006802:	4b21      	ldr	r3, [pc, #132]	@ (8006888 <inc_lock+0x110>)
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	0112      	lsls	r2, r2, #4
 8006808:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	491e      	ldr	r1, [pc, #120]	@ (8006888 <inc_lock+0x110>)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	18cb      	adds	r3, r1, r3
 8006816:	3304      	adds	r3, #4
 8006818:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695a      	ldr	r2, [r3, #20]
 800681e:	491a      	ldr	r1, [pc, #104]	@ (8006888 <inc_lock+0x110>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	011b      	lsls	r3, r3, #4
 8006824:	18cb      	adds	r3, r1, r3
 8006826:	3308      	adds	r3, #8
 8006828:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800682a:	4a17      	ldr	r2, [pc, #92]	@ (8006888 <inc_lock+0x110>)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	18d3      	adds	r3, r2, r3
 8006832:	330c      	adds	r3, #12
 8006834:	2200      	movs	r2, #0
 8006836:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <inc_lock+0xda>
 800683e:	4a12      	ldr	r2, [pc, #72]	@ (8006888 <inc_lock+0x110>)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	18d3      	adds	r3, r2, r3
 8006846:	330c      	adds	r3, #12
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <inc_lock+0xda>
 800684e:	2300      	movs	r3, #0
 8006850:	e015      	b.n	800687e <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d108      	bne.n	800686a <inc_lock+0xf2>
 8006858:	4a0b      	ldr	r2, [pc, #44]	@ (8006888 <inc_lock+0x110>)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	18d3      	adds	r3, r2, r3
 8006860:	330c      	adds	r3, #12
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	b29b      	uxth	r3, r3
 8006868:	e001      	b.n	800686e <inc_lock+0xf6>
 800686a:	2380      	movs	r3, #128	@ 0x80
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	4906      	ldr	r1, [pc, #24]	@ (8006888 <inc_lock+0x110>)
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	0112      	lsls	r2, r2, #4
 8006874:	188a      	adds	r2, r1, r2
 8006876:	320c      	adds	r2, #12
 8006878:	8013      	strh	r3, [r2, #0]

	return i + 1;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
}
 800687e:	0018      	movs	r0, r3
 8006880:	46bd      	mov	sp, r7
 8006882:	b004      	add	sp, #16
 8006884:	bd80      	pop	{r7, pc}
 8006886:	46c0      	nop			@ (mov r8, r8)
 8006888:	20000b30 	.word	0x20000b30

0800688c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	3b01      	subs	r3, #1
 8006898:	607b      	str	r3, [r7, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d832      	bhi.n	8006906 <dec_lock+0x7a>
		n = Files[i].ctr;
 80068a0:	200e      	movs	r0, #14
 80068a2:	183b      	adds	r3, r7, r0
 80068a4:	491d      	ldr	r1, [pc, #116]	@ (800691c <dec_lock+0x90>)
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	0112      	lsls	r2, r2, #4
 80068aa:	188a      	adds	r2, r1, r2
 80068ac:	320c      	adds	r2, #12
 80068ae:	8812      	ldrh	r2, [r2, #0]
 80068b0:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80068b2:	183b      	adds	r3, r7, r0
 80068b4:	881a      	ldrh	r2, [r3, #0]
 80068b6:	2380      	movs	r3, #128	@ 0x80
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d102      	bne.n	80068c4 <dec_lock+0x38>
 80068be:	183b      	adds	r3, r7, r0
 80068c0:	2200      	movs	r2, #0
 80068c2:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 80068c4:	210e      	movs	r1, #14
 80068c6:	187b      	adds	r3, r7, r1
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d004      	beq.n	80068d8 <dec_lock+0x4c>
 80068ce:	187b      	adds	r3, r7, r1
 80068d0:	881a      	ldrh	r2, [r3, #0]
 80068d2:	187b      	adds	r3, r7, r1
 80068d4:	3a01      	subs	r2, #1
 80068d6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 80068d8:	4a10      	ldr	r2, [pc, #64]	@ (800691c <dec_lock+0x90>)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	18d3      	adds	r3, r2, r3
 80068e0:	330c      	adds	r3, #12
 80068e2:	210e      	movs	r1, #14
 80068e4:	187a      	adds	r2, r7, r1
 80068e6:	8812      	ldrh	r2, [r2, #0]
 80068e8:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80068ea:	187b      	adds	r3, r7, r1
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d104      	bne.n	80068fc <dec_lock+0x70>
 80068f2:	4b0a      	ldr	r3, [pc, #40]	@ (800691c <dec_lock+0x90>)
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	0112      	lsls	r2, r2, #4
 80068f8:	2100      	movs	r1, #0
 80068fa:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 80068fc:	230d      	movs	r3, #13
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	e003      	b.n	800690e <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006906:	230d      	movs	r3, #13
 8006908:	18fb      	adds	r3, r7, r3
 800690a:	2202      	movs	r2, #2
 800690c:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800690e:	230d      	movs	r3, #13
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	781b      	ldrb	r3, [r3, #0]
}
 8006914:	0018      	movs	r0, r3
 8006916:	46bd      	mov	sp, r7
 8006918:	b004      	add	sp, #16
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000b30 	.word	0x20000b30

08006920 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e00e      	b.n	800694c <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800692e:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <clear_lock+0x3c>)
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	0112      	lsls	r2, r2, #4
 8006934:	58d3      	ldr	r3, [r2, r3]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	429a      	cmp	r2, r3
 800693a:	d104      	bne.n	8006946 <clear_lock+0x26>
 800693c:	4b07      	ldr	r3, [pc, #28]	@ (800695c <clear_lock+0x3c>)
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	0112      	lsls	r2, r2, #4
 8006942:	2100      	movs	r1, #0
 8006944:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3301      	adds	r3, #1
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d9ed      	bls.n	800692e <clear_lock+0xe>
	}
}
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	46c0      	nop			@ (mov r8, r8)
 8006956:	46bd      	mov	sp, r7
 8006958:	b004      	add	sp, #16
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000b30 	.word	0x20000b30

08006960 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006968:	240f      	movs	r4, #15
 800696a:	193b      	adds	r3, r7, r4
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	78db      	ldrb	r3, [r3, #3]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d034      	beq.n	80069e2 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	7858      	ldrb	r0, [r3, #1]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	3334      	adds	r3, #52	@ 0x34
 8006986:	0019      	movs	r1, r3
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	2301      	movs	r3, #1
 800698c:	f7ff fd00 	bl	8006390 <disk_write>
 8006990:	1e03      	subs	r3, r0, #0
 8006992:	d003      	beq.n	800699c <sync_window+0x3c>
			res = FR_DISK_ERR;
 8006994:	193b      	adds	r3, r7, r4
 8006996:	2201      	movs	r2, #1
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	e022      	b.n	80069e2 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	1ad2      	subs	r2, r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d217      	bcs.n	80069e2 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	789b      	ldrb	r3, [r3, #2]
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	e010      	b.n	80069dc <sync_window+0x7c>
					wsect += fs->fsize;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	18d3      	adds	r3, r2, r3
 80069c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	7858      	ldrb	r0, [r3, #1]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3334      	adds	r3, #52	@ 0x34
 80069cc:	0019      	movs	r1, r3
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	2301      	movs	r3, #1
 80069d2:	f7ff fcdd 	bl	8006390 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3b01      	subs	r3, #1
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d8eb      	bhi.n	80069ba <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 80069e2:	230f      	movs	r3, #15
 80069e4:	18fb      	adds	r3, r7, r3
 80069e6:	781b      	ldrb	r3, [r3, #0]
}
 80069e8:	0018      	movs	r0, r3
 80069ea:	46bd      	mov	sp, r7
 80069ec:	b007      	add	sp, #28
 80069ee:	bd90      	pop	{r4, r7, pc}

080069f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80069f0:	b5b0      	push	{r4, r5, r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80069fa:	250f      	movs	r5, #15
 80069fc:	197b      	adds	r3, r7, r5
 80069fe:	2200      	movs	r2, #0
 8006a00:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d01f      	beq.n	8006a4c <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006a0c:	197c      	adds	r4, r7, r5
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	0018      	movs	r0, r3
 8006a12:	f7ff ffa5 	bl	8006960 <sync_window>
 8006a16:	0003      	movs	r3, r0
 8006a18:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006a1a:	002c      	movs	r4, r5
 8006a1c:	193b      	adds	r3, r7, r4
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d113      	bne.n	8006a4c <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	7858      	ldrb	r0, [r3, #1]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3334      	adds	r3, #52	@ 0x34
 8006a2c:	0019      	movs	r1, r3
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	2301      	movs	r3, #1
 8006a32:	f7ff fc85 	bl	8006340 <disk_read>
 8006a36:	1e03      	subs	r3, r0, #0
 8006a38:	d005      	beq.n	8006a46 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	425b      	negs	r3, r3
 8006a3e:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a40:	193b      	adds	r3, r7, r4
 8006a42:	2201      	movs	r2, #1
 8006a44:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8006a4c:	230f      	movs	r3, #15
 8006a4e:	18fb      	adds	r3, r7, r3
 8006a50:	781b      	ldrb	r3, [r3, #0]
}
 8006a52:	0018      	movs	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	b004      	add	sp, #16
 8006a58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006a5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006a5c:	b5b0      	push	{r4, r5, r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006a64:	250f      	movs	r5, #15
 8006a66:	197c      	adds	r4, r7, r5
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f7ff ff78 	bl	8006960 <sync_window>
 8006a70:	0003      	movs	r3, r0
 8006a72:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8006a74:	197b      	adds	r3, r7, r5
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d15d      	bne.n	8006b38 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d14c      	bne.n	8006b1e <sync_fs+0xc2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	791b      	ldrb	r3, [r3, #4]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d148      	bne.n	8006b1e <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3334      	adds	r3, #52	@ 0x34
 8006a90:	2280      	movs	r2, #128	@ 0x80
 8006a92:	0092      	lsls	r2, r2, #2
 8006a94:	2100      	movs	r1, #0
 8006a96:	0018      	movs	r0, r3
 8006a98:	f7ff fd6d 	bl	8006576 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3334      	adds	r3, #52	@ 0x34
 8006aa0:	33ff      	adds	r3, #255	@ 0xff
 8006aa2:	33ff      	adds	r3, #255	@ 0xff
 8006aa4:	4a28      	ldr	r2, [pc, #160]	@ (8006b48 <sync_fs+0xec>)
 8006aa6:	0011      	movs	r1, r2
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f7ff fcfd 	bl	80064a8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	3334      	adds	r3, #52	@ 0x34
 8006ab2:	4a26      	ldr	r2, [pc, #152]	@ (8006b4c <sync_fs+0xf0>)
 8006ab4:	0011      	movs	r1, r2
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7ff fd14 	bl	80064e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3334      	adds	r3, #52	@ 0x34
 8006ac0:	33e5      	adds	r3, #229	@ 0xe5
 8006ac2:	33ff      	adds	r3, #255	@ 0xff
 8006ac4:	4a22      	ldr	r2, [pc, #136]	@ (8006b50 <sync_fs+0xf4>)
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f7ff fd0b 	bl	80064e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3334      	adds	r3, #52	@ 0x34
 8006ad2:	33e9      	adds	r3, #233	@ 0xe9
 8006ad4:	33ff      	adds	r3, #255	@ 0xff
 8006ad6:	001a      	movs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	0019      	movs	r1, r3
 8006ade:	0010      	movs	r0, r2
 8006ae0:	f7ff fd00 	bl	80064e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3334      	adds	r3, #52	@ 0x34
 8006ae8:	33ed      	adds	r3, #237	@ 0xed
 8006aea:	33ff      	adds	r3, #255	@ 0xff
 8006aec:	001a      	movs	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	0019      	movs	r1, r3
 8006af4:	0010      	movs	r0, r2
 8006af6:	f7ff fcf5 	bl	80064e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	7858      	ldrb	r0, [r3, #1]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	3334      	adds	r3, #52	@ 0x34
 8006b0c:	0019      	movs	r1, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b12:	2301      	movs	r3, #1
 8006b14:	f7ff fc3c 	bl	8006390 <disk_write>
			fs->fsi_flag = 0;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	2200      	movs	r2, #0
 8006b24:	2100      	movs	r1, #0
 8006b26:	0018      	movs	r0, r3
 8006b28:	f7ff fc5a 	bl	80063e0 <disk_ioctl>
 8006b2c:	1e03      	subs	r3, r0, #0
 8006b2e:	d003      	beq.n	8006b38 <sync_fs+0xdc>
 8006b30:	230f      	movs	r3, #15
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	2201      	movs	r2, #1
 8006b36:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8006b38:	230f      	movs	r3, #15
 8006b3a:	18fb      	adds	r3, r7, r3
 8006b3c:	781b      	ldrb	r3, [r3, #0]
}
 8006b3e:	0018      	movs	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b004      	add	sp, #16
 8006b44:	bdb0      	pop	{r4, r5, r7, pc}
 8006b46:	46c0      	nop			@ (mov r8, r8)
 8006b48:	0000aa55 	.word	0x0000aa55
 8006b4c:	41615252 	.word	0x41615252
 8006b50:	61417272 	.word	0x61417272

08006b54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	3b02      	subs	r3, #2
 8006b62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	3b02      	subs	r3, #2
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d301      	bcc.n	8006b74 <clust2sect+0x20>
 8006b70:	2300      	movs	r3, #0
 8006b72:	e007      	b.n	8006b84 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	895b      	ldrh	r3, [r3, #10]
 8006b78:	001a      	movs	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	435a      	muls	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b82:	18d3      	adds	r3, r2, r3
}
 8006b84:	0018      	movs	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b002      	add	sp, #8
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d904      	bls.n	8006bac <get_fat+0x20>
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e091      	b.n	8006cd6 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	425b      	negs	r3, r3
 8006bb6:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d063      	beq.n	8006c88 <get_fat+0xfc>
 8006bc0:	dd00      	ble.n	8006bc4 <get_fat+0x38>
 8006bc2:	e07e      	b.n	8006cc2 <get_fat+0x136>
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d002      	beq.n	8006bce <get_fat+0x42>
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d042      	beq.n	8006c52 <get_fat+0xc6>
 8006bcc:	e079      	b.n	8006cc2 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	085b      	lsrs	r3, r3, #1
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	18d3      	adds	r3, r2, r3
 8006bda:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	0a5b      	lsrs	r3, r3, #9
 8006be4:	18d2      	adds	r2, r2, r3
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	0011      	movs	r1, r2
 8006bea:	0018      	movs	r0, r3
 8006bec:	f7ff ff00 	bl	80069f0 <move_window>
 8006bf0:	1e03      	subs	r3, r0, #0
 8006bf2:	d169      	bne.n	8006cc8 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	60fa      	str	r2, [r7, #12]
 8006bfa:	05db      	lsls	r3, r3, #23
 8006bfc:	0ddb      	lsrs	r3, r3, #23
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	2134      	movs	r1, #52	@ 0x34
 8006c02:	18d3      	adds	r3, r2, r3
 8006c04:	185b      	adds	r3, r3, r1
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	0a5b      	lsrs	r3, r3, #9
 8006c12:	18d2      	adds	r2, r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	0011      	movs	r1, r2
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f7ff fee9 	bl	80069f0 <move_window>
 8006c1e:	1e03      	subs	r3, r0, #0
 8006c20:	d154      	bne.n	8006ccc <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	05db      	lsls	r3, r3, #23
 8006c26:	0ddb      	lsrs	r3, r3, #23
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	2134      	movs	r1, #52	@ 0x34
 8006c2c:	18d3      	adds	r3, r2, r3
 8006c2e:	185b      	adds	r3, r3, r1
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	021b      	lsls	r3, r3, #8
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d002      	beq.n	8006c48 <get_fat+0xbc>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	091b      	lsrs	r3, r3, #4
 8006c46:	e002      	b.n	8006c4e <get_fat+0xc2>
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	051b      	lsls	r3, r3, #20
 8006c4c:	0d1b      	lsrs	r3, r3, #20
 8006c4e:	617b      	str	r3, [r7, #20]
			break;
 8006c50:	e041      	b.n	8006cd6 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	0a1b      	lsrs	r3, r3, #8
 8006c5a:	18d2      	adds	r2, r2, r3
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	0011      	movs	r1, r2
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7ff fec5 	bl	80069f0 <move_window>
 8006c66:	1e03      	subs	r3, r0, #0
 8006c68:	d132      	bne.n	8006cd0 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3334      	adds	r3, #52	@ 0x34
 8006c6e:	001a      	movs	r2, r3
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	0059      	lsls	r1, r3, #1
 8006c74:	23ff      	movs	r3, #255	@ 0xff
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	400b      	ands	r3, r1
 8006c7a:	18d3      	adds	r3, r2, r3
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f7ff fbd7 	bl	8006430 <ld_word>
 8006c82:	0003      	movs	r3, r0
 8006c84:	617b      	str	r3, [r7, #20]
			break;
 8006c86:	e026      	b.n	8006cd6 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	09db      	lsrs	r3, r3, #7
 8006c90:	18d2      	adds	r2, r2, r3
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	0011      	movs	r1, r2
 8006c96:	0018      	movs	r0, r3
 8006c98:	f7ff feaa 	bl	80069f0 <move_window>
 8006c9c:	1e03      	subs	r3, r0, #0
 8006c9e:	d119      	bne.n	8006cd4 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	3334      	adds	r3, #52	@ 0x34
 8006ca4:	001a      	movs	r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	0099      	lsls	r1, r3, #2
 8006caa:	23fe      	movs	r3, #254	@ 0xfe
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	400b      	ands	r3, r1
 8006cb0:	18d3      	adds	r3, r2, r3
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	f7ff fbd7 	bl	8006466 <ld_dword>
 8006cb8:	0003      	movs	r3, r0
 8006cba:	011b      	lsls	r3, r3, #4
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	617b      	str	r3, [r7, #20]
			break;
 8006cc0:	e009      	b.n	8006cd6 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	e006      	b.n	8006cd6 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cc8:	46c0      	nop			@ (mov r8, r8)
 8006cca:	e004      	b.n	8006cd6 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ccc:	46c0      	nop			@ (mov r8, r8)
 8006cce:	e002      	b.n	8006cd6 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006cd0:	46c0      	nop			@ (mov r8, r8)
 8006cd2:	e000      	b.n	8006cd6 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006cd4:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8006cd6:	697b      	ldr	r3, [r7, #20]
}
 8006cd8:	0018      	movs	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b006      	add	sp, #24
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006ce0:	b5b0      	push	{r4, r5, r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006cec:	231f      	movs	r3, #31
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d800      	bhi.n	8006cfc <put_fat+0x1c>
 8006cfa:	e0eb      	b.n	8006ed4 <put_fat+0x1f4>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d300      	bcc.n	8006d08 <put_fat+0x28>
 8006d06:	e0e5      	b.n	8006ed4 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b03      	cmp	r3, #3
 8006d0e:	d100      	bne.n	8006d12 <put_fat+0x32>
 8006d10:	e0a1      	b.n	8006e56 <put_fat+0x176>
 8006d12:	dd00      	ble.n	8006d16 <put_fat+0x36>
 8006d14:	e0de      	b.n	8006ed4 <put_fat+0x1f4>
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d003      	beq.n	8006d22 <put_fat+0x42>
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d100      	bne.n	8006d20 <put_fat+0x40>
 8006d1e:	e075      	b.n	8006e0c <put_fat+0x12c>
 8006d20:	e0d8      	b.n	8006ed4 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	61bb      	str	r3, [r7, #24]
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	18d3      	adds	r3, r2, r3
 8006d2e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	0a5b      	lsrs	r3, r3, #9
 8006d38:	18d2      	adds	r2, r2, r3
 8006d3a:	251f      	movs	r5, #31
 8006d3c:	197c      	adds	r4, r7, r5
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	0011      	movs	r1, r2
 8006d42:	0018      	movs	r0, r3
 8006d44:	f7ff fe54 	bl	80069f0 <move_window>
 8006d48:	0003      	movs	r3, r0
 8006d4a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006d4c:	197b      	adds	r3, r7, r5
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d000      	beq.n	8006d56 <put_fat+0x76>
 8006d54:	e0b7      	b.n	8006ec6 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3334      	adds	r3, #52	@ 0x34
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	1c59      	adds	r1, r3, #1
 8006d60:	61b9      	str	r1, [r7, #24]
 8006d62:	05db      	lsls	r3, r3, #23
 8006d64:	0ddb      	lsrs	r3, r3, #23
 8006d66:	18d3      	adds	r3, r2, r3
 8006d68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	4013      	ands	r3, r2
 8006d70:	d00d      	beq.n	8006d8e <put_fat+0xae>
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	b25b      	sxtb	r3, r3
 8006d78:	220f      	movs	r2, #15
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	b25a      	sxtb	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	4313      	orrs	r3, r2
 8006d88:	b25b      	sxtb	r3, r3
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	e001      	b.n	8006d92 <put_fat+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	0a5b      	lsrs	r3, r3, #9
 8006da4:	18d2      	adds	r2, r2, r3
 8006da6:	251f      	movs	r5, #31
 8006da8:	197c      	adds	r4, r7, r5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	0011      	movs	r1, r2
 8006dae:	0018      	movs	r0, r3
 8006db0:	f7ff fe1e 	bl	80069f0 <move_window>
 8006db4:	0003      	movs	r3, r0
 8006db6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006db8:	197b      	adds	r3, r7, r5
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d000      	beq.n	8006dc2 <put_fat+0xe2>
 8006dc0:	e083      	b.n	8006eca <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3334      	adds	r3, #52	@ 0x34
 8006dc6:	001a      	movs	r2, r3
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	05db      	lsls	r3, r3, #23
 8006dcc:	0ddb      	lsrs	r3, r3, #23
 8006dce:	18d3      	adds	r3, r2, r3
 8006dd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <put_fat+0x102>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	091b      	lsrs	r3, r3, #4
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	e00e      	b.n	8006e00 <put_fat+0x120>
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	b25b      	sxtb	r3, r3
 8006de8:	220f      	movs	r2, #15
 8006dea:	4393      	bics	r3, r2
 8006dec:	b25a      	sxtb	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	0a1b      	lsrs	r3, r3, #8
 8006df2:	b25b      	sxtb	r3, r3
 8006df4:	210f      	movs	r1, #15
 8006df6:	400b      	ands	r3, r1
 8006df8:	b25b      	sxtb	r3, r3
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	b25b      	sxtb	r3, r3
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	70da      	strb	r2, [r3, #3]
			break;
 8006e0a:	e063      	b.n	8006ed4 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	0a1b      	lsrs	r3, r3, #8
 8006e14:	18d2      	adds	r2, r2, r3
 8006e16:	251f      	movs	r5, #31
 8006e18:	197c      	adds	r4, r7, r5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	0011      	movs	r1, r2
 8006e1e:	0018      	movs	r0, r3
 8006e20:	f7ff fde6 	bl	80069f0 <move_window>
 8006e24:	0003      	movs	r3, r0
 8006e26:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006e28:	197b      	adds	r3, r7, r5
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d14e      	bne.n	8006ece <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3334      	adds	r3, #52	@ 0x34
 8006e34:	001a      	movs	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	0059      	lsls	r1, r3, #1
 8006e3a:	23ff      	movs	r3, #255	@ 0xff
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	400b      	ands	r3, r1
 8006e40:	18d3      	adds	r3, r2, r3
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	b292      	uxth	r2, r2
 8006e46:	0011      	movs	r1, r2
 8006e48:	0018      	movs	r0, r3
 8006e4a:	f7ff fb2d 	bl	80064a8 <st_word>
			fs->wflag = 1;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	70da      	strb	r2, [r3, #3]
			break;
 8006e54:	e03e      	b.n	8006ed4 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	09db      	lsrs	r3, r3, #7
 8006e5e:	18d2      	adds	r2, r2, r3
 8006e60:	251f      	movs	r5, #31
 8006e62:	197c      	adds	r4, r7, r5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	0011      	movs	r1, r2
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f7ff fdc1 	bl	80069f0 <move_window>
 8006e6e:	0003      	movs	r3, r0
 8006e70:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006e72:	197b      	adds	r3, r7, r5
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d12b      	bne.n	8006ed2 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	091c      	lsrs	r4, r3, #4
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3334      	adds	r3, #52	@ 0x34
 8006e84:	001a      	movs	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	0099      	lsls	r1, r3, #2
 8006e8a:	23fe      	movs	r3, #254	@ 0xfe
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	400b      	ands	r3, r1
 8006e90:	18d3      	adds	r3, r2, r3
 8006e92:	0018      	movs	r0, r3
 8006e94:	f7ff fae7 	bl	8006466 <ld_dword>
 8006e98:	0003      	movs	r3, r0
 8006e9a:	0f1b      	lsrs	r3, r3, #28
 8006e9c:	071b      	lsls	r3, r3, #28
 8006e9e:	4323      	orrs	r3, r4
 8006ea0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3334      	adds	r3, #52	@ 0x34
 8006ea6:	001a      	movs	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	0099      	lsls	r1, r3, #2
 8006eac:	23fe      	movs	r3, #254	@ 0xfe
 8006eae:	005b      	lsls	r3, r3, #1
 8006eb0:	400b      	ands	r3, r1
 8006eb2:	18d3      	adds	r3, r2, r3
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	0011      	movs	r1, r2
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f7ff fb13 	bl	80064e4 <st_dword>
			fs->wflag = 1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	70da      	strb	r2, [r3, #3]
			break;
 8006ec4:	e006      	b.n	8006ed4 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006ec6:	46c0      	nop			@ (mov r8, r8)
 8006ec8:	e004      	b.n	8006ed4 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006eca:	46c0      	nop			@ (mov r8, r8)
 8006ecc:	e002      	b.n	8006ed4 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006ece:	46c0      	nop			@ (mov r8, r8)
 8006ed0:	e000      	b.n	8006ed4 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006ed2:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8006ed4:	231f      	movs	r3, #31
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	781b      	ldrb	r3, [r3, #0]
}
 8006eda:	0018      	movs	r0, r3
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b008      	add	sp, #32
 8006ee0:	bdb0      	pop	{r4, r5, r7, pc}

08006ee2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006ee2:	b5b0      	push	{r4, r5, r7, lr}
 8006ee4:	b088      	sub	sp, #32
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006eee:	231f      	movs	r3, #31
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d904      	bls.n	8006f0c <remove_chain+0x2a>
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d301      	bcc.n	8006f10 <remove_chain+0x2e>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e057      	b.n	8006fc0 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d011      	beq.n	8006f3a <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006f16:	251f      	movs	r5, #31
 8006f18:	197c      	adds	r4, r7, r5
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	425a      	negs	r2, r3
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff fedc 	bl	8006ce0 <put_fat>
 8006f28:	0003      	movs	r3, r0
 8006f2a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8006f2c:	197b      	adds	r3, r7, r5
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <remove_chain+0x58>
 8006f34:	197b      	adds	r3, r7, r5
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	e042      	b.n	8006fc0 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	0011      	movs	r1, r2
 8006f40:	0018      	movs	r0, r3
 8006f42:	f7ff fe23 	bl	8006b8c <get_fat>
 8006f46:	0003      	movs	r3, r0
 8006f48:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d035      	beq.n	8006fbc <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d101      	bne.n	8006f5a <remove_chain+0x78>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e032      	b.n	8006fc0 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	d101      	bne.n	8006f64 <remove_chain+0x82>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e02d      	b.n	8006fc0 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f64:	251f      	movs	r5, #31
 8006f66:	197c      	adds	r4, r7, r5
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f7ff feb6 	bl	8006ce0 <put_fat>
 8006f74:	0003      	movs	r3, r0
 8006f76:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8006f78:	197b      	adds	r3, r7, r5
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d002      	beq.n	8006f86 <remove_chain+0xa4>
 8006f80:	197b      	adds	r3, r7, r5
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	e01c      	b.n	8006fc0 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	695a      	ldr	r2, [r3, #20]
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	3b02      	subs	r3, #2
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d20b      	bcs.n	8006fac <remove_chain+0xca>
			fs->free_clst++;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	791b      	ldrb	r3, [r3, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d3bf      	bcc.n	8006f3a <remove_chain+0x58>
 8006fba:	e000      	b.n	8006fbe <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8006fbc:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b008      	add	sp, #32
 8006fc6:	bdb0      	pop	{r4, r5, r7, pc}

08006fc8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006fc8:	b5b0      	push	{r4, r5, r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10d      	bne.n	8006ffa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d004      	beq.n	8006ff4 <create_chain+0x2c>
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d31d      	bcc.n	8007030 <create_chain+0x68>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	e01a      	b.n	8007030 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	0011      	movs	r1, r2
 8007000:	0018      	movs	r0, r3
 8007002:	f7ff fdc3 	bl	8006b8c <get_fat>
 8007006:	0003      	movs	r3, r0
 8007008:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d801      	bhi.n	8007014 <create_chain+0x4c>
 8007010:	2301      	movs	r3, #1
 8007012:	e07b      	b.n	800710c <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3301      	adds	r3, #1
 8007018:	d101      	bne.n	800701e <create_chain+0x56>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	e076      	b.n	800710c <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d201      	bcs.n	800702c <create_chain+0x64>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	e06f      	b.n	800710c <create_chain+0x144>
		scl = clst;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	3301      	adds	r3, #1
 8007038:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	429a      	cmp	r2, r3
 8007042:	d307      	bcc.n	8007054 <create_chain+0x8c>
				ncl = 2;
 8007044:	2302      	movs	r3, #2
 8007046:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007048:	69fa      	ldr	r2, [r7, #28]
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	429a      	cmp	r2, r3
 800704e:	d901      	bls.n	8007054 <create_chain+0x8c>
 8007050:	2300      	movs	r3, #0
 8007052:	e05b      	b.n	800710c <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007054:	69fa      	ldr	r2, [r7, #28]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0011      	movs	r1, r2
 800705a:	0018      	movs	r0, r3
 800705c:	f7ff fd96 	bl	8006b8c <get_fat>
 8007060:	0003      	movs	r3, r0
 8007062:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d002      	beq.n	8007076 <create_chain+0xae>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	d101      	bne.n	800707a <create_chain+0xb2>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	e048      	b.n	800710c <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	429a      	cmp	r2, r3
 8007080:	d1d8      	bne.n	8007034 <create_chain+0x6c>
 8007082:	2300      	movs	r3, #0
 8007084:	e042      	b.n	800710c <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8007086:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007088:	2517      	movs	r5, #23
 800708a:	197c      	adds	r4, r7, r5
 800708c:	2301      	movs	r3, #1
 800708e:	425a      	negs	r2, r3
 8007090:	69f9      	ldr	r1, [r7, #28]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	0018      	movs	r0, r3
 8007096:	f7ff fe23 	bl	8006ce0 <put_fat>
 800709a:	0003      	movs	r3, r0
 800709c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800709e:	197b      	adds	r3, r7, r5
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <create_chain+0xf6>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d008      	beq.n	80070be <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80070ac:	197c      	adds	r4, r7, r5
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	0018      	movs	r0, r3
 80070b6:	f7ff fe13 	bl	8006ce0 <put_fat>
 80070ba:	0003      	movs	r3, r0
 80070bc:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80070be:	2317      	movs	r3, #23
 80070c0:	18fb      	adds	r3, r7, r3
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d116      	bne.n	80070f6 <create_chain+0x12e>
		fs->last_clst = ncl;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	695a      	ldr	r2, [r3, #20]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	3b02      	subs	r3, #2
 80070d8:	429a      	cmp	r2, r3
 80070da:	d804      	bhi.n	80070e6 <create_chain+0x11e>
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	1e5a      	subs	r2, r3, #1
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	791b      	ldrb	r3, [r3, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	4313      	orrs	r3, r2
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	711a      	strb	r2, [r3, #4]
 80070f4:	e009      	b.n	800710a <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80070f6:	2317      	movs	r3, #23
 80070f8:	18fb      	adds	r3, r7, r3
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d102      	bne.n	8007106 <create_chain+0x13e>
 8007100:	2301      	movs	r3, #1
 8007102:	425b      	negs	r3, r3
 8007104:	e000      	b.n	8007108 <create_chain+0x140>
 8007106:	2301      	movs	r3, #1
 8007108:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800710a:	69fb      	ldr	r3, [r7, #28]
}
 800710c:	0018      	movs	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	b008      	add	sp, #32
 8007112:	bdb0      	pop	{r4, r5, r7, pc}

08007114 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	3304      	adds	r3, #4
 800712a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	0a5a      	lsrs	r2, r3, #9
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	895b      	ldrh	r3, [r3, #10]
 8007134:	0019      	movs	r1, r3
 8007136:	0010      	movs	r0, r2
 8007138:	f7f8 fff0 	bl	800011c <__udivsi3>
 800713c:	0003      	movs	r3, r0
 800713e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1d1a      	adds	r2, r3, #4
 8007144:	613a      	str	r2, [r7, #16]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <clmt_clust+0x40>
 8007150:	2300      	movs	r3, #0
 8007152:	e010      	b.n	8007176 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	429a      	cmp	r2, r3
 800715a:	d307      	bcc.n	800716c <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	3304      	adds	r3, #4
 8007168:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800716a:	e7e9      	b.n	8007140 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 800716c:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	18d3      	adds	r3, r2, r3
}
 8007176:	0018      	movs	r0, r3
 8007178:	46bd      	mov	sp, r7
 800717a:	b006      	add	sp, #24
 800717c:	bd80      	pop	{r7, pc}

0800717e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b086      	sub	sp, #24
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
 8007186:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	2380      	movs	r3, #128	@ 0x80
 8007192:	039b      	lsls	r3, r3, #14
 8007194:	429a      	cmp	r2, r3
 8007196:	d203      	bcs.n	80071a0 <dir_sdi+0x22>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	221f      	movs	r2, #31
 800719c:	4013      	ands	r3, r2
 800719e:	d001      	beq.n	80071a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80071a0:	2302      	movs	r3, #2
 80071a2:	e066      	b.n	8007272 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <dir_sdi+0x46>
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d902      	bls.n	80071c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10c      	bne.n	80071e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	095b      	lsrs	r3, r3, #5
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	8912      	ldrh	r2, [r2, #8]
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d301      	bcc.n	80071da <dir_sdi+0x5c>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e04b      	b.n	8007272 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	61da      	str	r2, [r3, #28]
 80071e2:	e02c      	b.n	800723e <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	895b      	ldrh	r3, [r3, #10]
 80071e8:	025b      	lsls	r3, r3, #9
 80071ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071ec:	e01a      	b.n	8007224 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	0011      	movs	r1, r2
 80071f4:	0018      	movs	r0, r3
 80071f6:	f7ff fcc9 	bl	8006b8c <get_fat>
 80071fa:	0003      	movs	r3, r0
 80071fc:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	3301      	adds	r3, #1
 8007202:	d101      	bne.n	8007208 <dir_sdi+0x8a>
 8007204:	2301      	movs	r3, #1
 8007206:	e034      	b.n	8007272 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d904      	bls.n	8007218 <dir_sdi+0x9a>
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	429a      	cmp	r2, r3
 8007216:	d301      	bcc.n	800721c <dir_sdi+0x9e>
 8007218:	2302      	movs	r3, #2
 800721a:	e02a      	b.n	8007272 <dir_sdi+0xf4>
			ofs -= csz;
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	d2e0      	bcs.n	80071ee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	0011      	movs	r1, r2
 8007232:	0018      	movs	r0, r3
 8007234:	f7ff fc8e 	bl	8006b54 <clust2sect>
 8007238:	0002      	movs	r2, r0
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <dir_sdi+0xd2>
 800724c:	2302      	movs	r3, #2
 800724e:	e010      	b.n	8007272 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	0a5b      	lsrs	r3, r3, #9
 8007258:	18d2      	adds	r2, r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	3334      	adds	r3, #52	@ 0x34
 8007262:	001a      	movs	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	05db      	lsls	r3, r3, #23
 8007268:	0ddb      	lsrs	r3, r3, #23
 800726a:	18d2      	adds	r2, r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	0018      	movs	r0, r3
 8007274:	46bd      	mov	sp, r7
 8007276:	b006      	add	sp, #24
 8007278:	bd80      	pop	{r7, pc}

0800727a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b086      	sub	sp, #24
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	3320      	adds	r3, #32
 8007290:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d004      	beq.n	80072a4 <dir_next+0x2a>
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	2380      	movs	r3, #128	@ 0x80
 800729e:	039b      	lsls	r3, r3, #14
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d301      	bcc.n	80072a8 <dir_next+0x2e>
 80072a4:	2304      	movs	r3, #4
 80072a6:	e0ad      	b.n	8007404 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	05db      	lsls	r3, r3, #23
 80072ac:	0ddb      	lsrs	r3, r3, #23
 80072ae:	d000      	beq.n	80072b2 <dir_next+0x38>
 80072b0:	e09b      	b.n	80073ea <dir_next+0x170>
		dp->sect++;				/* Next sector */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10b      	bne.n	80072dc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	8912      	ldrh	r2, [r2, #8]
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d200      	bcs.n	80072d2 <dir_next+0x58>
 80072d0:	e08b      	b.n	80073ea <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	61da      	str	r2, [r3, #28]
 80072d8:	2304      	movs	r3, #4
 80072da:	e093      	b.n	8007404 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	0a5b      	lsrs	r3, r3, #9
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	8952      	ldrh	r2, [r2, #10]
 80072e4:	3a01      	subs	r2, #1
 80072e6:	4013      	ands	r3, r2
 80072e8:	d000      	beq.n	80072ec <dir_next+0x72>
 80072ea:	e07e      	b.n	80073ea <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	0019      	movs	r1, r3
 80072f4:	0010      	movs	r0, r2
 80072f6:	f7ff fc49 	bl	8006b8c <get_fat>
 80072fa:	0003      	movs	r3, r0
 80072fc:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d801      	bhi.n	8007308 <dir_next+0x8e>
 8007304:	2302      	movs	r3, #2
 8007306:	e07d      	b.n	8007404 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3301      	adds	r3, #1
 800730c:	d101      	bne.n	8007312 <dir_next+0x98>
 800730e:	2301      	movs	r3, #1
 8007310:	e078      	b.n	8007404 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	429a      	cmp	r2, r3
 800731a:	d35a      	bcc.n	80073d2 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	61da      	str	r2, [r3, #28]
 8007328:	2304      	movs	r3, #4
 800732a:	e06b      	b.n	8007404 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	0019      	movs	r1, r3
 8007334:	0010      	movs	r0, r2
 8007336:	f7ff fe47 	bl	8006fc8 <create_chain>
 800733a:	0003      	movs	r3, r0
 800733c:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <dir_next+0xce>
 8007344:	2307      	movs	r3, #7
 8007346:	e05d      	b.n	8007404 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <dir_next+0xd8>
 800734e:	2302      	movs	r3, #2
 8007350:	e058      	b.n	8007404 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	3301      	adds	r3, #1
 8007356:	d101      	bne.n	800735c <dir_next+0xe2>
 8007358:	2301      	movs	r3, #1
 800735a:	e053      	b.n	8007404 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	0018      	movs	r0, r3
 8007360:	f7ff fafe 	bl	8006960 <sync_window>
 8007364:	1e03      	subs	r3, r0, #0
 8007366:	d001      	beq.n	800736c <dir_next+0xf2>
 8007368:	2301      	movs	r3, #1
 800736a:	e04b      	b.n	8007404 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3334      	adds	r3, #52	@ 0x34
 8007370:	2280      	movs	r2, #128	@ 0x80
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	2100      	movs	r1, #0
 8007376:	0018      	movs	r0, r3
 8007378:	f7ff f8fd 	bl	8006576 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800737c:	2300      	movs	r3, #0
 800737e:	613b      	str	r3, [r7, #16]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	0011      	movs	r1, r2
 8007386:	0018      	movs	r0, r3
 8007388:	f7ff fbe4 	bl	8006b54 <clust2sect>
 800738c:	0002      	movs	r2, r0
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	631a      	str	r2, [r3, #48]	@ 0x30
 8007392:	e012      	b.n	80073ba <dir_next+0x140>
						fs->wflag = 1;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	0018      	movs	r0, r3
 800739e:	f7ff fadf 	bl	8006960 <sync_window>
 80073a2:	1e03      	subs	r3, r0, #0
 80073a4:	d001      	beq.n	80073aa <dir_next+0x130>
 80073a6:	2301      	movs	r3, #1
 80073a8:	e02c      	b.n	8007404 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	3301      	adds	r3, #1
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	895b      	ldrh	r3, [r3, #10]
 80073be:	001a      	movs	r2, r3
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d3e6      	bcc.n	8007394 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad2      	subs	r2, r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	0011      	movs	r1, r2
 80073de:	0018      	movs	r0, r3
 80073e0:	f7ff fbb8 	bl	8006b54 <clust2sect>
 80073e4:	0002      	movs	r2, r0
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3334      	adds	r3, #52	@ 0x34
 80073f4:	001a      	movs	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	05db      	lsls	r3, r3, #23
 80073fa:	0ddb      	lsrs	r3, r3, #23
 80073fc:	18d2      	adds	r2, r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	0018      	movs	r0, r3
 8007406:	46bd      	mov	sp, r7
 8007408:	b006      	add	sp, #24
 800740a:	bd80      	pop	{r7, pc}

0800740c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800740c:	b5b0      	push	{r4, r5, r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800741c:	2517      	movs	r5, #23
 800741e:	197c      	adds	r4, r7, r5
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2100      	movs	r1, #0
 8007424:	0018      	movs	r0, r3
 8007426:	f7ff feaa 	bl	800717e <dir_sdi>
 800742a:	0003      	movs	r3, r0
 800742c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800742e:	197b      	adds	r3, r7, r5
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d133      	bne.n	800749e <dir_alloc+0x92>
		n = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69da      	ldr	r2, [r3, #28]
 800743e:	2517      	movs	r5, #23
 8007440:	197c      	adds	r4, r7, r5
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	0011      	movs	r1, r2
 8007446:	0018      	movs	r0, r3
 8007448:	f7ff fad2 	bl	80069f0 <move_window>
 800744c:	0003      	movs	r3, r0
 800744e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8007450:	197b      	adds	r3, r7, r5
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d121      	bne.n	800749c <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2be5      	cmp	r3, #229	@ 0xe5
 8007460:	d004      	beq.n	800746c <dir_alloc+0x60>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a1b      	ldr	r3, [r3, #32]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d107      	bne.n	800747c <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	3301      	adds	r3, #1
 8007470:	613b      	str	r3, [r7, #16]
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d102      	bne.n	8007480 <dir_alloc+0x74>
 800747a:	e010      	b.n	800749e <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800747c:	2300      	movs	r3, #0
 800747e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007480:	2517      	movs	r5, #23
 8007482:	197c      	adds	r4, r7, r5
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2101      	movs	r1, #1
 8007488:	0018      	movs	r0, r3
 800748a:	f7ff fef6 	bl	800727a <dir_next>
 800748e:	0003      	movs	r3, r0
 8007490:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007492:	197b      	adds	r3, r7, r5
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0cf      	beq.n	800743a <dir_alloc+0x2e>
 800749a:	e000      	b.n	800749e <dir_alloc+0x92>
			if (res != FR_OK) break;
 800749c:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800749e:	2217      	movs	r2, #23
 80074a0:	18bb      	adds	r3, r7, r2
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	d102      	bne.n	80074ae <dir_alloc+0xa2>
 80074a8:	18bb      	adds	r3, r7, r2
 80074aa:	2207      	movs	r2, #7
 80074ac:	701a      	strb	r2, [r3, #0]
	return res;
 80074ae:	2317      	movs	r3, #23
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	781b      	ldrb	r3, [r3, #0]
}
 80074b4:	0018      	movs	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b006      	add	sp, #24
 80074ba:	bdb0      	pop	{r4, r5, r7, pc}

080074bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	331a      	adds	r3, #26
 80074ca:	0018      	movs	r0, r3
 80074cc:	f7fe ffb0 	bl	8006430 <ld_word>
 80074d0:	0003      	movs	r3, r0
 80074d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d109      	bne.n	80074f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	3314      	adds	r3, #20
 80074e0:	0018      	movs	r0, r3
 80074e2:	f7fe ffa5 	bl	8006430 <ld_word>
 80074e6:	0003      	movs	r3, r0
 80074e8:	041b      	lsls	r3, r3, #16
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80074f0:	68fb      	ldr	r3, [r7, #12]
}
 80074f2:	0018      	movs	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b004      	add	sp, #16
 80074f8:	bd80      	pop	{r7, pc}

080074fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	331a      	adds	r3, #26
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	b292      	uxth	r2, r2
 800750e:	0011      	movs	r1, r2
 8007510:	0018      	movs	r0, r3
 8007512:	f7fe ffc9 	bl	80064a8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b03      	cmp	r3, #3
 800751c:	d109      	bne.n	8007532 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	3314      	adds	r3, #20
 8007522:	001a      	movs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	0c1b      	lsrs	r3, r3, #16
 8007528:	b29b      	uxth	r3, r3
 800752a:	0019      	movs	r1, r3
 800752c:	0010      	movs	r0, r2
 800752e:	f7fe ffbb 	bl	80064a8 <st_word>
	}
}
 8007532:	46c0      	nop			@ (mov r8, r8)
 8007534:	46bd      	mov	sp, r7
 8007536:	b004      	add	sp, #16
 8007538:	bd80      	pop	{r7, pc}

0800753a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800753a:	b5b0      	push	{r4, r5, r7, lr}
 800753c:	b086      	sub	sp, #24
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007548:	2517      	movs	r5, #23
 800754a:	197c      	adds	r4, r7, r5
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2100      	movs	r1, #0
 8007550:	0018      	movs	r0, r3
 8007552:	f7ff fe14 	bl	800717e <dir_sdi>
 8007556:	0003      	movs	r3, r0
 8007558:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 800755a:	197b      	adds	r3, r7, r5
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <dir_find+0x2e>
 8007562:	197b      	adds	r3, r7, r5
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	e04c      	b.n	8007602 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	2517      	movs	r5, #23
 800756e:	197c      	adds	r4, r7, r5
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	0011      	movs	r1, r2
 8007574:	0018      	movs	r0, r3
 8007576:	f7ff fa3b 	bl	80069f0 <move_window>
 800757a:	0003      	movs	r3, r0
 800757c:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 800757e:	0029      	movs	r1, r5
 8007580:	187b      	adds	r3, r7, r1
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d136      	bne.n	80075f6 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1a      	ldr	r2, [r3, #32]
 800758c:	200f      	movs	r0, #15
 800758e:	183b      	adds	r3, r7, r0
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007594:	183b      	adds	r3, r7, r0
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d103      	bne.n	80075a4 <dir_find+0x6a>
 800759c:	187b      	adds	r3, r7, r1
 800759e:	2204      	movs	r2, #4
 80075a0:	701a      	strb	r2, [r3, #0]
 80075a2:	e02b      	b.n	80075fc <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	330b      	adds	r3, #11
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	223f      	movs	r2, #63	@ 0x3f
 80075ae:	4013      	ands	r3, r2
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	330b      	adds	r3, #11
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	001a      	movs	r2, r3
 80075c0:	2308      	movs	r3, #8
 80075c2:	4013      	ands	r3, r2
 80075c4:	d109      	bne.n	80075da <dir_find+0xa0>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a18      	ldr	r0, [r3, #32]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3324      	adds	r3, #36	@ 0x24
 80075ce:	220b      	movs	r2, #11
 80075d0:	0019      	movs	r1, r3
 80075d2:	f7fe ffe9 	bl	80065a8 <mem_cmp>
 80075d6:	1e03      	subs	r3, r0, #0
 80075d8:	d00f      	beq.n	80075fa <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80075da:	2517      	movs	r5, #23
 80075dc:	197c      	adds	r4, r7, r5
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2100      	movs	r1, #0
 80075e2:	0018      	movs	r0, r3
 80075e4:	f7ff fe49 	bl	800727a <dir_next>
 80075e8:	0003      	movs	r3, r0
 80075ea:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 80075ec:	197b      	adds	r3, r7, r5
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0b9      	beq.n	8007568 <dir_find+0x2e>
 80075f4:	e002      	b.n	80075fc <dir_find+0xc2>
		if (res != FR_OK) break;
 80075f6:	46c0      	nop			@ (mov r8, r8)
 80075f8:	e000      	b.n	80075fc <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80075fa:	46c0      	nop			@ (mov r8, r8)

	return res;
 80075fc:	2317      	movs	r3, #23
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	781b      	ldrb	r3, [r3, #0]
}
 8007602:	0018      	movs	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	b006      	add	sp, #24
 8007608:	bdb0      	pop	{r4, r5, r7, pc}

0800760a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800760a:	b5b0      	push	{r4, r5, r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007618:	250f      	movs	r5, #15
 800761a:	197c      	adds	r4, r7, r5
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2101      	movs	r1, #1
 8007620:	0018      	movs	r0, r3
 8007622:	f7ff fef3 	bl	800740c <dir_alloc>
 8007626:	0003      	movs	r3, r0
 8007628:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800762a:	197b      	adds	r3, r7, r5
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d11f      	bne.n	8007672 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	69da      	ldr	r2, [r3, #28]
 8007636:	197c      	adds	r4, r7, r5
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	0011      	movs	r1, r2
 800763c:	0018      	movs	r0, r3
 800763e:	f7ff f9d7 	bl	80069f0 <move_window>
 8007642:	0003      	movs	r3, r0
 8007644:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8007646:	197b      	adds	r3, r7, r5
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d111      	bne.n	8007672 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	2220      	movs	r2, #32
 8007654:	2100      	movs	r1, #0
 8007656:	0018      	movs	r0, r3
 8007658:	f7fe ff8d 	bl	8006576 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a18      	ldr	r0, [r3, #32]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3324      	adds	r3, #36	@ 0x24
 8007664:	220b      	movs	r2, #11
 8007666:	0019      	movs	r1, r3
 8007668:	f7fe ff66 	bl	8006538 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2201      	movs	r2, #1
 8007670:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007672:	230f      	movs	r3, #15
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	781b      	ldrb	r3, [r3, #0]
}
 8007678:	0018      	movs	r0, r3
 800767a:	46bd      	mov	sp, r7
 800767c:	b004      	add	sp, #16
 800767e:	bdb0      	pop	{r4, r5, r7, pc}

08007680 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	3324      	adds	r3, #36	@ 0x24
 8007694:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	220b      	movs	r2, #11
 800769a:	2120      	movs	r1, #32
 800769c:	0018      	movs	r0, r3
 800769e:	f7fe ff6a 	bl	8006576 <mem_set>
	si = i = 0; ni = 8;
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	2308      	movs	r3, #8
 80076ac:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	61fa      	str	r2, [r7, #28]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	18d2      	adds	r2, r2, r3
 80076b8:	211b      	movs	r1, #27
 80076ba:	187b      	adds	r3, r7, r1
 80076bc:	7812      	ldrb	r2, [r2, #0]
 80076be:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076c0:	000a      	movs	r2, r1
 80076c2:	18bb      	adds	r3, r7, r2
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b20      	cmp	r3, #32
 80076c8:	d800      	bhi.n	80076cc <create_name+0x4c>
 80076ca:	e062      	b.n	8007792 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80076cc:	18bb      	adds	r3, r7, r2
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80076d2:	d007      	beq.n	80076e4 <create_name+0x64>
 80076d4:	18bb      	adds	r3, r7, r2
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80076da:	d110      	bne.n	80076fe <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80076dc:	e002      	b.n	80076e4 <create_name+0x64>
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	3301      	adds	r3, #1
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	18d3      	adds	r3, r2, r3
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80076ee:	d0f6      	beq.n	80076de <create_name+0x5e>
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	18d3      	adds	r3, r2, r3
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80076fa:	d0f0      	beq.n	80076de <create_name+0x5e>
			break;
 80076fc:	e04a      	b.n	8007794 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80076fe:	231b      	movs	r3, #27
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b2e      	cmp	r3, #46	@ 0x2e
 8007706:	d003      	beq.n	8007710 <create_name+0x90>
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	429a      	cmp	r2, r3
 800770e:	d30e      	bcc.n	800772e <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2b0b      	cmp	r3, #11
 8007714:	d004      	beq.n	8007720 <create_name+0xa0>
 8007716:	231b      	movs	r3, #27
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b2e      	cmp	r3, #46	@ 0x2e
 800771e:	d001      	beq.n	8007724 <create_name+0xa4>
 8007720:	2306      	movs	r3, #6
 8007722:	e054      	b.n	80077ce <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 8007724:	2308      	movs	r3, #8
 8007726:	613b      	str	r3, [r7, #16]
 8007728:	230b      	movs	r3, #11
 800772a:	617b      	str	r3, [r7, #20]
			continue;
 800772c:	e030      	b.n	8007790 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 800772e:	211b      	movs	r1, #27
 8007730:	187b      	adds	r3, r7, r1
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	b25b      	sxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	da07      	bge.n	800774a <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800773a:	187b      	adds	r3, r7, r1
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	3b80      	subs	r3, #128	@ 0x80
 8007740:	001a      	movs	r2, r3
 8007742:	187b      	adds	r3, r7, r1
 8007744:	4924      	ldr	r1, [pc, #144]	@ (80077d8 <create_name+0x158>)
 8007746:	5c8a      	ldrb	r2, [r1, r2]
 8007748:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800774a:	231b      	movs	r3, #27
 800774c:	18fb      	adds	r3, r7, r3
 800774e:	781a      	ldrb	r2, [r3, #0]
 8007750:	4b22      	ldr	r3, [pc, #136]	@ (80077dc <create_name+0x15c>)
 8007752:	0011      	movs	r1, r2
 8007754:	0018      	movs	r0, r3
 8007756:	f7fe ff4c 	bl	80065f2 <chk_chr>
 800775a:	1e03      	subs	r3, r0, #0
 800775c:	d001      	beq.n	8007762 <create_name+0xe2>
 800775e:	2306      	movs	r3, #6
 8007760:	e035      	b.n	80077ce <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007762:	221b      	movs	r2, #27
 8007764:	18bb      	adds	r3, r7, r2
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2b60      	cmp	r3, #96	@ 0x60
 800776a:	d908      	bls.n	800777e <create_name+0xfe>
 800776c:	18bb      	adds	r3, r7, r2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b7a      	cmp	r3, #122	@ 0x7a
 8007772:	d804      	bhi.n	800777e <create_name+0xfe>
 8007774:	18bb      	adds	r3, r7, r2
 8007776:	18ba      	adds	r2, r7, r2
 8007778:	7812      	ldrb	r2, [r2, #0]
 800777a:	3a20      	subs	r2, #32
 800777c:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	613a      	str	r2, [r7, #16]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	18d3      	adds	r3, r2, r3
 8007788:	221b      	movs	r2, #27
 800778a:	18ba      	adds	r2, r7, r2
 800778c:	7812      	ldrb	r2, [r2, #0]
 800778e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007790:	e78d      	b.n	80076ae <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007792:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	18d2      	adds	r2, r2, r3
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <create_name+0x128>
 80077a4:	2306      	movs	r3, #6
 80077a6:	e012      	b.n	80077ce <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	2be5      	cmp	r3, #229	@ 0xe5
 80077ae:	d102      	bne.n	80077b6 <create_name+0x136>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2205      	movs	r2, #5
 80077b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077b6:	231b      	movs	r3, #27
 80077b8:	18fb      	adds	r3, r7, r3
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d801      	bhi.n	80077c4 <create_name+0x144>
 80077c0:	2204      	movs	r2, #4
 80077c2:	e000      	b.n	80077c6 <create_name+0x146>
 80077c4:	2200      	movs	r2, #0
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	330b      	adds	r3, #11
 80077ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80077cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80077ce:	0018      	movs	r0, r3
 80077d0:	46bd      	mov	sp, r7
 80077d2:	b008      	add	sp, #32
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	46c0      	nop			@ (mov r8, r8)
 80077d8:	0800b3e0 	.word	0x0800b3e0
 80077dc:	0800b2c0 	.word	0x0800b2c0

080077e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80077e0:	b5b0      	push	{r4, r5, r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80077f4:	e002      	b.n	80077fc <follow_path+0x1c>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b2f      	cmp	r3, #47	@ 0x2f
 8007802:	d0f8      	beq.n	80077f6 <follow_path+0x16>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b5c      	cmp	r3, #92	@ 0x5c
 800780a:	d0f4      	beq.n	80077f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	2200      	movs	r2, #0
 8007810:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b1f      	cmp	r3, #31
 8007818:	d80d      	bhi.n	8007836 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	222f      	movs	r2, #47	@ 0x2f
 800781e:	2180      	movs	r1, #128	@ 0x80
 8007820:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 8007822:	2317      	movs	r3, #23
 8007824:	18fc      	adds	r4, r7, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2100      	movs	r1, #0
 800782a:	0018      	movs	r0, r3
 800782c:	f7ff fca7 	bl	800717e <dir_sdi>
 8007830:	0003      	movs	r3, r0
 8007832:	7023      	strb	r3, [r4, #0]
 8007834:	e052      	b.n	80078dc <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007836:	2517      	movs	r5, #23
 8007838:	197c      	adds	r4, r7, r5
 800783a:	003a      	movs	r2, r7
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	0011      	movs	r1, r2
 8007840:	0018      	movs	r0, r3
 8007842:	f7ff ff1d 	bl	8007680 <create_name>
 8007846:	0003      	movs	r3, r0
 8007848:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 800784a:	197b      	adds	r3, r7, r5
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d13f      	bne.n	80078d2 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007852:	197c      	adds	r4, r7, r5
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	0018      	movs	r0, r3
 8007858:	f7ff fe6f 	bl	800753a <dir_find>
 800785c:	0003      	movs	r3, r0
 800785e:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 8007860:	200b      	movs	r0, #11
 8007862:	183b      	adds	r3, r7, r0
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	212f      	movs	r1, #47	@ 0x2f
 8007868:	5c52      	ldrb	r2, [r2, r1]
 800786a:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 800786c:	197b      	adds	r3, r7, r5
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00c      	beq.n	800788e <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007874:	197b      	adds	r3, r7, r5
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b04      	cmp	r3, #4
 800787a:	d12c      	bne.n	80078d6 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800787c:	183b      	adds	r3, r7, r0
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2204      	movs	r2, #4
 8007882:	4013      	ands	r3, r2
 8007884:	d127      	bne.n	80078d6 <follow_path+0xf6>
 8007886:	197b      	adds	r3, r7, r5
 8007888:	2205      	movs	r2, #5
 800788a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800788c:	e023      	b.n	80078d6 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800788e:	230b      	movs	r3, #11
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	2204      	movs	r2, #4
 8007896:	4013      	ands	r3, r2
 8007898:	d11f      	bne.n	80078da <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	799b      	ldrb	r3, [r3, #6]
 800789e:	001a      	movs	r2, r3
 80078a0:	2310      	movs	r3, #16
 80078a2:	4013      	ands	r3, r2
 80078a4:	d104      	bne.n	80078b0 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 80078a6:	2317      	movs	r3, #23
 80078a8:	18fb      	adds	r3, r7, r3
 80078aa:	2205      	movs	r2, #5
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e015      	b.n	80078dc <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	3334      	adds	r3, #52	@ 0x34
 80078b4:	001a      	movs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	05db      	lsls	r3, r3, #23
 80078bc:	0ddb      	lsrs	r3, r3, #23
 80078be:	18d2      	adds	r2, r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	0011      	movs	r1, r2
 80078c4:	0018      	movs	r0, r3
 80078c6:	f7ff fdf9 	bl	80074bc <ld_clust>
 80078ca:	0002      	movs	r2, r0
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80078d0:	e7b1      	b.n	8007836 <follow_path+0x56>
			if (res != FR_OK) break;
 80078d2:	46c0      	nop			@ (mov r8, r8)
 80078d4:	e002      	b.n	80078dc <follow_path+0xfc>
				break;
 80078d6:	46c0      	nop			@ (mov r8, r8)
 80078d8:	e000      	b.n	80078dc <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078da:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 80078dc:	2317      	movs	r3, #23
 80078de:	18fb      	adds	r3, r7, r3
 80078e0:	781b      	ldrb	r3, [r3, #0]
}
 80078e2:	0018      	movs	r0, r3
 80078e4:	46bd      	mov	sp, r7
 80078e6:	b006      	add	sp, #24
 80078e8:	bdb0      	pop	{r4, r5, r7, pc}

080078ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b086      	sub	sp, #24
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80078f2:	2301      	movs	r3, #1
 80078f4:	425b      	negs	r3, r3
 80078f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d031      	beq.n	8007964 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	e002      	b.n	800790e <get_ldnumber+0x24>
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	3301      	adds	r3, #1
 800790c:	617b      	str	r3, [r7, #20]
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b20      	cmp	r3, #32
 8007914:	d903      	bls.n	800791e <get_ldnumber+0x34>
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b3a      	cmp	r3, #58	@ 0x3a
 800791c:	d1f4      	bne.n	8007908 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b3a      	cmp	r3, #58	@ 0x3a
 8007924:	d11c      	bne.n	8007960 <get_ldnumber+0x76>
			tp = *path;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	60fa      	str	r2, [r7, #12]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	3b30      	subs	r3, #48	@ 0x30
 8007936:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b09      	cmp	r3, #9
 800793c:	d80e      	bhi.n	800795c <get_ldnumber+0x72>
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	429a      	cmp	r2, r3
 8007944:	d10a      	bne.n	800795c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d107      	bne.n	800795c <get_ldnumber+0x72>
					vol = (int)i;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	3301      	adds	r3, #1
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	e002      	b.n	8007966 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007960:	2300      	movs	r3, #0
 8007962:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007964:	693b      	ldr	r3, [r7, #16]
}
 8007966:	0018      	movs	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	b006      	add	sp, #24
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	70da      	strb	r2, [r3, #3]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	4252      	negs	r2, r2
 8007986:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	0011      	movs	r1, r2
 800798e:	0018      	movs	r0, r3
 8007990:	f7ff f82e 	bl	80069f0 <move_window>
 8007994:	1e03      	subs	r3, r0, #0
 8007996:	d001      	beq.n	800799c <check_fs+0x2c>
 8007998:	2304      	movs	r3, #4
 800799a:	e037      	b.n	8007a0c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3334      	adds	r3, #52	@ 0x34
 80079a0:	33ff      	adds	r3, #255	@ 0xff
 80079a2:	33ff      	adds	r3, #255	@ 0xff
 80079a4:	0018      	movs	r0, r3
 80079a6:	f7fe fd43 	bl	8006430 <ld_word>
 80079aa:	0003      	movs	r3, r0
 80079ac:	001a      	movs	r2, r3
 80079ae:	4b19      	ldr	r3, [pc, #100]	@ (8007a14 <check_fs+0xa4>)
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d001      	beq.n	80079b8 <check_fs+0x48>
 80079b4:	2303      	movs	r3, #3
 80079b6:	e029      	b.n	8007a0c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2234      	movs	r2, #52	@ 0x34
 80079bc:	5c9b      	ldrb	r3, [r3, r2]
 80079be:	2be9      	cmp	r3, #233	@ 0xe9
 80079c0:	d009      	beq.n	80079d6 <check_fs+0x66>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2234      	movs	r2, #52	@ 0x34
 80079c6:	5c9b      	ldrb	r3, [r3, r2]
 80079c8:	2beb      	cmp	r3, #235	@ 0xeb
 80079ca:	d11e      	bne.n	8007a0a <check_fs+0x9a>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2236      	movs	r2, #54	@ 0x36
 80079d0:	5c9b      	ldrb	r3, [r3, r2]
 80079d2:	2b90      	cmp	r3, #144	@ 0x90
 80079d4:	d119      	bne.n	8007a0a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3334      	adds	r3, #52	@ 0x34
 80079da:	3336      	adds	r3, #54	@ 0x36
 80079dc:	0018      	movs	r0, r3
 80079de:	f7fe fd42 	bl	8006466 <ld_dword>
 80079e2:	0003      	movs	r3, r0
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	0a1b      	lsrs	r3, r3, #8
 80079e8:	4a0b      	ldr	r2, [pc, #44]	@ (8007a18 <check_fs+0xa8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d101      	bne.n	80079f2 <check_fs+0x82>
 80079ee:	2300      	movs	r3, #0
 80079f0:	e00c      	b.n	8007a0c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3334      	adds	r3, #52	@ 0x34
 80079f6:	3352      	adds	r3, #82	@ 0x52
 80079f8:	0018      	movs	r0, r3
 80079fa:	f7fe fd34 	bl	8006466 <ld_dword>
 80079fe:	0003      	movs	r3, r0
 8007a00:	4a06      	ldr	r2, [pc, #24]	@ (8007a1c <check_fs+0xac>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d101      	bne.n	8007a0a <check_fs+0x9a>
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007a0a:	2302      	movs	r3, #2
}
 8007a0c:	0018      	movs	r0, r3
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	b002      	add	sp, #8
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	0000aa55 	.word	0x0000aa55
 8007a18:	00544146 	.word	0x00544146
 8007a1c:	33544146 	.word	0x33544146

08007a20 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a20:	b5b0      	push	{r4, r5, r7, lr}
 8007a22:	b096      	sub	sp, #88	@ 0x58
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	1dfb      	adds	r3, r7, #7
 8007a2c:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff ff57 	bl	80078ea <get_ldnumber>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	da01      	bge.n	8007a4a <find_volume+0x2a>
 8007a46:	230b      	movs	r3, #11
 8007a48:	e250      	b.n	8007eec <find_volume+0x4cc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a4a:	4bb6      	ldr	r3, [pc, #728]	@ (8007d24 <find_volume+0x304>)
 8007a4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007a4e:	0092      	lsls	r2, r2, #2
 8007a50:	58d3      	ldr	r3, [r2, r3]
 8007a52:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <find_volume+0x3e>
 8007a5a:	230c      	movs	r3, #12
 8007a5c:	e246      	b.n	8007eec <find_volume+0x4cc>

	ENTER_FF(fs);						/* Lock the volume */
 8007a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a60:	0018      	movs	r0, r3
 8007a62:	f7fe fddf 	bl	8006624 <lock_fs>
 8007a66:	1e03      	subs	r3, r0, #0
 8007a68:	d101      	bne.n	8007a6e <find_volume+0x4e>
 8007a6a:	230f      	movs	r3, #15
 8007a6c:	e23e      	b.n	8007eec <find_volume+0x4cc>
	*rfs = fs;							/* Return pointer to the file system object */
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a72:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007a74:	1dfb      	adds	r3, r7, #7
 8007a76:	1dfa      	adds	r2, r7, #7
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	438a      	bics	r2, r1
 8007a7e:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01b      	beq.n	8007ac0 <find_volume+0xa0>
		stat = disk_status(fs->drv);
 8007a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8a:	785b      	ldrb	r3, [r3, #1]
 8007a8c:	2537      	movs	r5, #55	@ 0x37
 8007a8e:	197c      	adds	r4, r7, r5
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7fe fc03 	bl	800629c <disk_status>
 8007a96:	0003      	movs	r3, r0
 8007a98:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007a9a:	0029      	movs	r1, r5
 8007a9c:	187b      	adds	r3, r7, r1
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	d10c      	bne.n	8007ac0 <find_volume+0xa0>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007aa6:	1dfb      	adds	r3, r7, #7
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d006      	beq.n	8007abc <find_volume+0x9c>
 8007aae:	187b      	adds	r3, r7, r1
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	2204      	movs	r2, #4
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d001      	beq.n	8007abc <find_volume+0x9c>
				return FR_WRITE_PROTECTED;
 8007ab8:	230a      	movs	r3, #10
 8007aba:	e217      	b.n	8007eec <find_volume+0x4cc>
			}
			return FR_OK;				/* The file system object is valid */
 8007abc:	2300      	movs	r3, #0
 8007abe:	e215      	b.n	8007eec <find_volume+0x4cc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007acc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	785b      	ldrb	r3, [r3, #1]
 8007ad2:	2537      	movs	r5, #55	@ 0x37
 8007ad4:	197c      	adds	r4, r7, r5
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	f7fe fc02 	bl	80062e0 <disk_initialize>
 8007adc:	0003      	movs	r3, r0
 8007ade:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007ae0:	197b      	adds	r3, r7, r5
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	d001      	beq.n	8007aee <find_volume+0xce>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007aea:	2303      	movs	r3, #3
 8007aec:	e1fe      	b.n	8007eec <find_volume+0x4cc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007aee:	1dfb      	adds	r3, r7, #7
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <find_volume+0xe6>
 8007af6:	2337      	movs	r3, #55	@ 0x37
 8007af8:	18fb      	adds	r3, r7, r3
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2204      	movs	r2, #4
 8007afe:	4013      	ands	r3, r2
 8007b00:	d001      	beq.n	8007b06 <find_volume+0xe6>
		return FR_WRITE_PROTECTED;
 8007b02:	230a      	movs	r3, #10
 8007b04:	e1f2      	b.n	8007eec <find_volume+0x4cc>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b0a:	2557      	movs	r5, #87	@ 0x57
 8007b0c:	197c      	adds	r4, r7, r5
 8007b0e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b12:	0011      	movs	r1, r2
 8007b14:	0018      	movs	r0, r3
 8007b16:	f7ff ff2b 	bl	8007970 <check_fs>
 8007b1a:	0003      	movs	r3, r0
 8007b1c:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b1e:	197b      	adds	r3, r7, r5
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d14b      	bne.n	8007bbe <find_volume+0x19e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b26:	2300      	movs	r3, #0
 8007b28:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b2a:	e01d      	b.n	8007b68 <find_volume+0x148>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2e:	3334      	adds	r3, #52	@ 0x34
 8007b30:	001a      	movs	r2, r3
 8007b32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	33bf      	adds	r3, #191	@ 0xbf
 8007b38:	33ff      	adds	r3, #255	@ 0xff
 8007b3a:	18d3      	adds	r3, r2, r3
 8007b3c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	3304      	adds	r3, #4
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d006      	beq.n	8007b56 <find_volume+0x136>
 8007b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f7fe fc8a 	bl	8006466 <ld_dword>
 8007b52:	0003      	movs	r3, r0
 8007b54:	e000      	b.n	8007b58 <find_volume+0x138>
 8007b56:	2300      	movs	r3, #0
 8007b58:	2214      	movs	r2, #20
 8007b5a:	18ba      	adds	r2, r7, r2
 8007b5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b5e:	0089      	lsls	r1, r1, #2
 8007b60:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b64:	3301      	adds	r3, #1
 8007b66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b6a:	2b03      	cmp	r3, #3
 8007b6c:	d9de      	bls.n	8007b2c <find_volume+0x10c>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007b6e:	2300      	movs	r3, #0
 8007b70:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <find_volume+0x15e>
 8007b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007b7e:	2314      	movs	r3, #20
 8007b80:	18fb      	adds	r3, r7, r3
 8007b82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b84:	0092      	lsls	r2, r2, #2
 8007b86:	58d3      	ldr	r3, [r2, r3]
 8007b88:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007b8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <find_volume+0x182>
 8007b90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b94:	0011      	movs	r1, r2
 8007b96:	0018      	movs	r0, r3
 8007b98:	f7ff feea 	bl	8007970 <check_fs>
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	001a      	movs	r2, r3
 8007ba0:	e000      	b.n	8007ba4 <find_volume+0x184>
 8007ba2:	2203      	movs	r2, #3
 8007ba4:	2157      	movs	r1, #87	@ 0x57
 8007ba6:	187b      	adds	r3, r7, r1
 8007ba8:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007baa:	187b      	adds	r3, r7, r1
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d905      	bls.n	8007bbe <find_volume+0x19e>
 8007bb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d9df      	bls.n	8007b7e <find_volume+0x15e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007bbe:	2357      	movs	r3, #87	@ 0x57
 8007bc0:	18fb      	adds	r3, r7, r3
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b04      	cmp	r3, #4
 8007bc6:	d101      	bne.n	8007bcc <find_volume+0x1ac>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e18f      	b.n	8007eec <find_volume+0x4cc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007bcc:	2357      	movs	r3, #87	@ 0x57
 8007bce:	18fb      	adds	r3, r7, r3
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d901      	bls.n	8007bda <find_volume+0x1ba>
 8007bd6:	230d      	movs	r3, #13
 8007bd8:	e188      	b.n	8007eec <find_volume+0x4cc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bdc:	3334      	adds	r3, #52	@ 0x34
 8007bde:	330b      	adds	r3, #11
 8007be0:	0018      	movs	r0, r3
 8007be2:	f7fe fc25 	bl	8006430 <ld_word>
 8007be6:	0003      	movs	r3, r0
 8007be8:	001a      	movs	r2, r3
 8007bea:	2380      	movs	r3, #128	@ 0x80
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d001      	beq.n	8007bf6 <find_volume+0x1d6>
 8007bf2:	230d      	movs	r3, #13
 8007bf4:	e17a      	b.n	8007eec <find_volume+0x4cc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf8:	3334      	adds	r3, #52	@ 0x34
 8007bfa:	3316      	adds	r3, #22
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f7fe fc17 	bl	8006430 <ld_word>
 8007c02:	0003      	movs	r3, r0
 8007c04:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d107      	bne.n	8007c1c <find_volume+0x1fc>
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c0e:	3334      	adds	r3, #52	@ 0x34
 8007c10:	3324      	adds	r3, #36	@ 0x24
 8007c12:	0018      	movs	r0, r3
 8007c14:	f7fe fc27 	bl	8006466 <ld_dword>
 8007c18:	0003      	movs	r3, r0
 8007c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c20:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c24:	2244      	movs	r2, #68	@ 0x44
 8007c26:	5c9a      	ldrb	r2, [r3, r2]
 8007c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c2e:	789b      	ldrb	r3, [r3, #2]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d005      	beq.n	8007c40 <find_volume+0x220>
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	789b      	ldrb	r3, [r3, #2]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d001      	beq.n	8007c40 <find_volume+0x220>
 8007c3c:	230d      	movs	r3, #13
 8007c3e:	e155      	b.n	8007eec <find_volume+0x4cc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c42:	789b      	ldrb	r3, [r3, #2]
 8007c44:	001a      	movs	r2, r3
 8007c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c48:	4353      	muls	r3, r2
 8007c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c4e:	2241      	movs	r2, #65	@ 0x41
 8007c50:	5c9b      	ldrb	r3, [r3, r2]
 8007c52:	001a      	movs	r2, r3
 8007c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c56:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5a:	895b      	ldrh	r3, [r3, #10]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <find_volume+0x250>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c62:	895b      	ldrh	r3, [r3, #10]
 8007c64:	001a      	movs	r2, r3
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	895b      	ldrh	r3, [r3, #10]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	d001      	beq.n	8007c74 <find_volume+0x254>
 8007c70:	230d      	movs	r3, #13
 8007c72:	e13b      	b.n	8007eec <find_volume+0x4cc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c76:	3334      	adds	r3, #52	@ 0x34
 8007c78:	3311      	adds	r3, #17
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	f7fe fbd8 	bl	8006430 <ld_word>
 8007c80:	0003      	movs	r3, r0
 8007c82:	001a      	movs	r2, r3
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8a:	891b      	ldrh	r3, [r3, #8]
 8007c8c:	220f      	movs	r2, #15
 8007c8e:	4013      	ands	r3, r2
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <find_volume+0x27a>
 8007c96:	230d      	movs	r3, #13
 8007c98:	e128      	b.n	8007eec <find_volume+0x4cc>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9c:	3334      	adds	r3, #52	@ 0x34
 8007c9e:	3313      	adds	r3, #19
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f7fe fbc5 	bl	8006430 <ld_word>
 8007ca6:	0003      	movs	r3, r0
 8007ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d107      	bne.n	8007cc0 <find_volume+0x2a0>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb2:	3334      	adds	r3, #52	@ 0x34
 8007cb4:	3320      	adds	r3, #32
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	f7fe fbd5 	bl	8006466 <ld_dword>
 8007cbc:	0003      	movs	r3, r0
 8007cbe:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	3334      	adds	r3, #52	@ 0x34
 8007cc4:	330e      	adds	r3, #14
 8007cc6:	252e      	movs	r5, #46	@ 0x2e
 8007cc8:	197c      	adds	r4, r7, r5
 8007cca:	0018      	movs	r0, r3
 8007ccc:	f7fe fbb0 	bl	8006430 <ld_word>
 8007cd0:	0003      	movs	r3, r0
 8007cd2:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007cd4:	197b      	adds	r3, r7, r5
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d101      	bne.n	8007ce0 <find_volume+0x2c0>
 8007cdc:	230d      	movs	r3, #13
 8007cde:	e105      	b.n	8007eec <find_volume+0x4cc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ce0:	232e      	movs	r3, #46	@ 0x2e
 8007ce2:	18fb      	adds	r3, r7, r3
 8007ce4:	881a      	ldrh	r2, [r3, #0]
 8007ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ce8:	18d3      	adds	r3, r2, r3
 8007cea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cec:	8912      	ldrh	r2, [r2, #8]
 8007cee:	0912      	lsrs	r2, r2, #4
 8007cf0:	b292      	uxth	r2, r2
 8007cf2:	189b      	adds	r3, r3, r2
 8007cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d201      	bcs.n	8007d02 <find_volume+0x2e2>
 8007cfe:	230d      	movs	r3, #13
 8007d00:	e0f4      	b.n	8007eec <find_volume+0x4cc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	895b      	ldrh	r3, [r3, #10]
 8007d0c:	0019      	movs	r1, r3
 8007d0e:	0010      	movs	r0, r2
 8007d10:	f7f8 fa04 	bl	800011c <__udivsi3>
 8007d14:	0003      	movs	r3, r0
 8007d16:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d104      	bne.n	8007d28 <find_volume+0x308>
 8007d1e:	230d      	movs	r3, #13
 8007d20:	e0e4      	b.n	8007eec <find_volume+0x4cc>
 8007d22:	46c0      	nop			@ (mov r8, r8)
 8007d24:	20000b28 	.word	0x20000b28
		fmt = FS_FAT32;
 8007d28:	2157      	movs	r1, #87	@ 0x57
 8007d2a:	187b      	adds	r3, r7, r1
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	4a70      	ldr	r2, [pc, #448]	@ (8007ef4 <find_volume+0x4d4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d802      	bhi.n	8007d3e <find_volume+0x31e>
 8007d38:	187b      	adds	r3, r7, r1
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	4a6d      	ldr	r2, [pc, #436]	@ (8007ef8 <find_volume+0x4d8>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d803      	bhi.n	8007d4e <find_volume+0x32e>
 8007d46:	2357      	movs	r3, #87	@ 0x57
 8007d48:	18fb      	adds	r3, r7, r3
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d54:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d5a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d5c:	232e      	movs	r3, #46	@ 0x2e
 8007d5e:	18fb      	adds	r3, r7, r3
 8007d60:	881a      	ldrh	r2, [r3, #0]
 8007d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d64:	18d2      	adds	r2, r2, r3
 8007d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d68:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007d6a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6e:	18d2      	adds	r2, r2, r3
 8007d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d72:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8007d74:	2357      	movs	r3, #87	@ 0x57
 8007d76:	18fb      	adds	r3, r7, r3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d11d      	bne.n	8007dba <find_volume+0x39a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d80:	3334      	adds	r3, #52	@ 0x34
 8007d82:	332a      	adds	r3, #42	@ 0x2a
 8007d84:	0018      	movs	r0, r3
 8007d86:	f7fe fb53 	bl	8006430 <ld_word>
 8007d8a:	1e03      	subs	r3, r0, #0
 8007d8c:	d001      	beq.n	8007d92 <find_volume+0x372>
 8007d8e:	230d      	movs	r3, #13
 8007d90:	e0ac      	b.n	8007eec <find_volume+0x4cc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	891b      	ldrh	r3, [r3, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <find_volume+0x37e>
 8007d9a:	230d      	movs	r3, #13
 8007d9c:	e0a6      	b.n	8007eec <find_volume+0x4cc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007da0:	3334      	adds	r3, #52	@ 0x34
 8007da2:	332c      	adds	r3, #44	@ 0x2c
 8007da4:	0018      	movs	r0, r3
 8007da6:	f7fe fb5e 	bl	8006466 <ld_dword>
 8007daa:	0002      	movs	r2, r0
 8007dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dae:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	699b      	ldr	r3, [r3, #24]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007db8:	e020      	b.n	8007dfc <find_volume+0x3dc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dbc:	891b      	ldrh	r3, [r3, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d101      	bne.n	8007dc6 <find_volume+0x3a6>
 8007dc2:	230d      	movs	r3, #13
 8007dc4:	e092      	b.n	8007eec <find_volume+0x4cc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dcc:	18d2      	adds	r2, r2, r3
 8007dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dd0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dd2:	2357      	movs	r3, #87	@ 0x57
 8007dd4:	18fb      	adds	r3, r7, r3
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d103      	bne.n	8007de4 <find_volume+0x3c4>
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	e00a      	b.n	8007dfa <find_volume+0x3da>
 8007de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007de6:	699a      	ldr	r2, [r3, #24]
 8007de8:	0013      	movs	r3, r2
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	189b      	adds	r3, r3, r2
 8007dee:	085a      	lsrs	r2, r3, #1
 8007df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	2101      	movs	r1, #1
 8007df6:	400b      	ands	r3, r1
 8007df8:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007dfa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfe:	69da      	ldr	r2, [r3, #28]
 8007e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e02:	493e      	ldr	r1, [pc, #248]	@ (8007efc <find_volume+0x4dc>)
 8007e04:	468c      	mov	ip, r1
 8007e06:	4463      	add	r3, ip
 8007e08:	0a5b      	lsrs	r3, r3, #9
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d201      	bcs.n	8007e12 <find_volume+0x3f2>
 8007e0e:	230d      	movs	r3, #13
 8007e10:	e06c      	b.n	8007eec <find_volume+0x4cc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e14:	2201      	movs	r2, #1
 8007e16:	4252      	negs	r2, r2
 8007e18:	615a      	str	r2, [r3, #20]
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e20:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	2280      	movs	r2, #128	@ 0x80
 8007e26:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e28:	2357      	movs	r3, #87	@ 0x57
 8007e2a:	18fb      	adds	r3, r7, r3
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d148      	bne.n	8007ec4 <find_volume+0x4a4>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e34:	3334      	adds	r3, #52	@ 0x34
 8007e36:	3330      	adds	r3, #48	@ 0x30
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f7fe faf9 	bl	8006430 <ld_word>
 8007e3e:	0003      	movs	r3, r0
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d13f      	bne.n	8007ec4 <find_volume+0x4a4>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4a:	0011      	movs	r1, r2
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f7fe fdcf 	bl	80069f0 <move_window>
 8007e52:	1e03      	subs	r3, r0, #0
 8007e54:	d136      	bne.n	8007ec4 <find_volume+0x4a4>
		{
			fs->fsi_flag = 0;
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	2200      	movs	r2, #0
 8007e5a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5e:	3334      	adds	r3, #52	@ 0x34
 8007e60:	33ff      	adds	r3, #255	@ 0xff
 8007e62:	33ff      	adds	r3, #255	@ 0xff
 8007e64:	0018      	movs	r0, r3
 8007e66:	f7fe fae3 	bl	8006430 <ld_word>
 8007e6a:	0003      	movs	r3, r0
 8007e6c:	001a      	movs	r2, r3
 8007e6e:	4b24      	ldr	r3, [pc, #144]	@ (8007f00 <find_volume+0x4e0>)
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d127      	bne.n	8007ec4 <find_volume+0x4a4>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e76:	3334      	adds	r3, #52	@ 0x34
 8007e78:	0018      	movs	r0, r3
 8007e7a:	f7fe faf4 	bl	8006466 <ld_dword>
 8007e7e:	0003      	movs	r3, r0
 8007e80:	4a20      	ldr	r2, [pc, #128]	@ (8007f04 <find_volume+0x4e4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d11e      	bne.n	8007ec4 <find_volume+0x4a4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	3334      	adds	r3, #52	@ 0x34
 8007e8a:	33e5      	adds	r3, #229	@ 0xe5
 8007e8c:	33ff      	adds	r3, #255	@ 0xff
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f7fe fae9 	bl	8006466 <ld_dword>
 8007e94:	0003      	movs	r3, r0
 8007e96:	4a1c      	ldr	r2, [pc, #112]	@ (8007f08 <find_volume+0x4e8>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d113      	bne.n	8007ec4 <find_volume+0x4a4>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9e:	3334      	adds	r3, #52	@ 0x34
 8007ea0:	33e9      	adds	r3, #233	@ 0xe9
 8007ea2:	33ff      	adds	r3, #255	@ 0xff
 8007ea4:	0018      	movs	r0, r3
 8007ea6:	f7fe fade 	bl	8006466 <ld_dword>
 8007eaa:	0002      	movs	r2, r0
 8007eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eae:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb2:	3334      	adds	r3, #52	@ 0x34
 8007eb4:	33ed      	adds	r3, #237	@ 0xed
 8007eb6:	33ff      	adds	r3, #255	@ 0xff
 8007eb8:	0018      	movs	r0, r3
 8007eba:	f7fe fad4 	bl	8006466 <ld_dword>
 8007ebe:	0002      	movs	r2, r0
 8007ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	2257      	movs	r2, #87	@ 0x57
 8007ec8:	18ba      	adds	r2, r7, r2
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ece:	4b0f      	ldr	r3, [pc, #60]	@ (8007f0c <find_volume+0x4ec>)
 8007ed0:	881b      	ldrh	r3, [r3, #0]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f0c <find_volume+0x4ec>)
 8007ed8:	801a      	strh	r2, [r3, #0]
 8007eda:	4b0c      	ldr	r3, [pc, #48]	@ (8007f0c <find_volume+0x4ec>)
 8007edc:	881a      	ldrh	r2, [r3, #0]
 8007ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee4:	0018      	movs	r0, r3
 8007ee6:	f7fe fd1b 	bl	8006920 <clear_lock>
#endif
	return FR_OK;
 8007eea:	2300      	movs	r3, #0
}
 8007eec:	0018      	movs	r0, r3
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b016      	add	sp, #88	@ 0x58
 8007ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ef4:	0000fff5 	.word	0x0000fff5
 8007ef8:	00000ff5 	.word	0x00000ff5
 8007efc:	000001ff 	.word	0x000001ff
 8007f00:	0000aa55 	.word	0x0000aa55
 8007f04:	41615252 	.word	0x41615252
 8007f08:	61417272 	.word	0x61417272
 8007f0c:	20000b2c 	.word	0x20000b2c

08007f10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f10:	b590      	push	{r4, r7, lr}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f1a:	240f      	movs	r4, #15
 8007f1c:	193b      	adds	r3, r7, r4
 8007f1e:	2209      	movs	r2, #9
 8007f20:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d030      	beq.n	8007f8a <validate+0x7a>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d02c      	beq.n	8007f8a <validate+0x7a>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d027      	beq.n	8007f8a <validate+0x7a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	889a      	ldrh	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	88db      	ldrh	r3, [r3, #6]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d120      	bne.n	8007f8a <validate+0x7a>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f7fe fb69 	bl	8006624 <lock_fs>
 8007f52:	1e03      	subs	r3, r0, #0
 8007f54:	d015      	beq.n	8007f82 <validate+0x72>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f7fe f99d 	bl	800629c <disk_status>
 8007f62:	0003      	movs	r3, r0
 8007f64:	001a      	movs	r2, r3
 8007f66:	2301      	movs	r3, #1
 8007f68:	4013      	ands	r3, r2
 8007f6a:	d103      	bne.n	8007f74 <validate+0x64>
				res = FR_OK;
 8007f6c:	193b      	adds	r3, r7, r4
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
 8007f72:	e00a      	b.n	8007f8a <validate+0x7a>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2100      	movs	r1, #0
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f7fe fb67 	bl	800664e <unlock_fs>
 8007f80:	e003      	b.n	8007f8a <validate+0x7a>
			}
		} else {
			res = FR_TIMEOUT;
 8007f82:	230f      	movs	r3, #15
 8007f84:	18fb      	adds	r3, r7, r3
 8007f86:	220f      	movs	r2, #15
 8007f88:	701a      	strb	r2, [r3, #0]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f8a:	230f      	movs	r3, #15
 8007f8c:	18fb      	adds	r3, r7, r3
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <validate+0x8a>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	e000      	b.n	8007f9c <validate+0x8c>
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	601a      	str	r2, [r3, #0]
	return res;
 8007fa0:	230f      	movs	r3, #15
 8007fa2:	18fb      	adds	r3, r7, r3
 8007fa4:	781b      	ldrb	r3, [r3, #0]
}
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	b005      	add	sp, #20
 8007fac:	bd90      	pop	{r4, r7, pc}
	...

08007fb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fb0:	b5b0      	push	{r4, r5, r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	1dfb      	adds	r3, r7, #7
 8007fbc:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007fc2:	2310      	movs	r3, #16
 8007fc4:	18fb      	adds	r3, r7, r3
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	f7ff fc8f 	bl	80078ea <get_ldnumber>
 8007fcc:	0003      	movs	r3, r0
 8007fce:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da01      	bge.n	8007fda <f_mount+0x2a>
 8007fd6:	230b      	movs	r3, #11
 8007fd8:	e04c      	b.n	8008074 <f_mount+0xc4>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fda:	4b28      	ldr	r3, [pc, #160]	@ (800807c <f_mount+0xcc>)
 8007fdc:	69fa      	ldr	r2, [r7, #28]
 8007fde:	0092      	lsls	r2, r2, #2
 8007fe0:	58d3      	ldr	r3, [r2, r3]
 8007fe2:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00f      	beq.n	800800a <f_mount+0x5a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	0018      	movs	r0, r3
 8007fee:	f7fe fc97 	bl	8006920 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	0018      	movs	r0, r3
 8007ff8:	f000 fe02 	bl	8008c00 <ff_del_syncobj>
 8007ffc:	1e03      	subs	r3, r0, #0
 8007ffe:	d101      	bne.n	8008004 <f_mount+0x54>
 8008000:	2302      	movs	r3, #2
 8008002:	e037      	b.n	8008074 <f_mount+0xc4>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2200      	movs	r2, #0
 8008008:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00e      	beq.n	800802e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	b2da      	uxtb	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	330c      	adds	r3, #12
 800801e:	0019      	movs	r1, r3
 8008020:	0010      	movs	r0, r2
 8008022:	f000 fdd3 	bl	8008bcc <ff_cre_syncobj>
 8008026:	1e03      	subs	r3, r0, #0
 8008028:	d101      	bne.n	800802e <f_mount+0x7e>
 800802a:	2302      	movs	r3, #2
 800802c:	e022      	b.n	8008074 <f_mount+0xc4>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	4b12      	ldr	r3, [pc, #72]	@ (800807c <f_mount+0xcc>)
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	0092      	lsls	r2, r2, #2
 8008036:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <f_mount+0x96>
 800803e:	1dfb      	adds	r3, r7, #7
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d001      	beq.n	800804a <f_mount+0x9a>
 8008046:	2300      	movs	r3, #0
 8008048:	e014      	b.n	8008074 <f_mount+0xc4>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800804a:	2517      	movs	r5, #23
 800804c:	197c      	adds	r4, r7, r5
 800804e:	230c      	movs	r3, #12
 8008050:	18f9      	adds	r1, r7, r3
 8008052:	2308      	movs	r3, #8
 8008054:	18fb      	adds	r3, r7, r3
 8008056:	2200      	movs	r2, #0
 8008058:	0018      	movs	r0, r3
 800805a:	f7ff fce1 	bl	8007a20 <find_volume>
 800805e:	0003      	movs	r3, r0
 8008060:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	197b      	adds	r3, r7, r5
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	0019      	movs	r1, r3
 800806a:	0010      	movs	r0, r2
 800806c:	f7fe faef 	bl	800664e <unlock_fs>
 8008070:	197b      	adds	r3, r7, r5
 8008072:	781b      	ldrb	r3, [r3, #0]
}
 8008074:	0018      	movs	r0, r3
 8008076:	46bd      	mov	sp, r7
 8008078:	b008      	add	sp, #32
 800807a:	bdb0      	pop	{r4, r5, r7, pc}
 800807c:	20000b28 	.word	0x20000b28

08008080 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008082:	b099      	sub	sp, #100	@ 0x64
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	1dfb      	adds	r3, r7, #7
 800808c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <f_open+0x18>
 8008094:	2309      	movs	r3, #9
 8008096:	e1ea      	b.n	800846e <f_open+0x3ee>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008098:	1dfb      	adds	r3, r7, #7
 800809a:	1dfa      	adds	r2, r7, #7
 800809c:	7812      	ldrb	r2, [r2, #0]
 800809e:	213f      	movs	r1, #63	@ 0x3f
 80080a0:	400a      	ands	r2, r1
 80080a2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80080a4:	255f      	movs	r5, #95	@ 0x5f
 80080a6:	197c      	adds	r4, r7, r5
 80080a8:	1dfb      	adds	r3, r7, #7
 80080aa:	781a      	ldrb	r2, [r3, #0]
 80080ac:	2310      	movs	r3, #16
 80080ae:	18f9      	adds	r1, r7, r3
 80080b0:	2308      	movs	r3, #8
 80080b2:	18fb      	adds	r3, r7, r3
 80080b4:	0018      	movs	r0, r3
 80080b6:	f7ff fcb3 	bl	8007a20 <find_volume>
 80080ba:	0003      	movs	r3, r0
 80080bc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80080be:	197b      	adds	r3, r7, r5
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d000      	beq.n	80080c8 <f_open+0x48>
 80080c6:	e1c0      	b.n	800844a <f_open+0x3ca>
		dj.obj.fs = fs;
 80080c8:	693a      	ldr	r2, [r7, #16]
 80080ca:	2614      	movs	r6, #20
 80080cc:	19bb      	adds	r3, r7, r6
 80080ce:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	197c      	adds	r4, r7, r5
 80080d4:	19bb      	adds	r3, r7, r6
 80080d6:	0011      	movs	r1, r2
 80080d8:	0018      	movs	r0, r3
 80080da:	f7ff fb81 	bl	80077e0 <follow_path>
 80080de:	0003      	movs	r3, r0
 80080e0:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080e2:	0029      	movs	r1, r5
 80080e4:	197b      	adds	r3, r7, r5
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d11b      	bne.n	8008124 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080ec:	19bb      	adds	r3, r7, r6
 80080ee:	222f      	movs	r2, #47	@ 0x2f
 80080f0:	5c9b      	ldrb	r3, [r3, r2]
 80080f2:	b25b      	sxtb	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	da03      	bge.n	8008100 <f_open+0x80>
				res = FR_INVALID_NAME;
 80080f8:	187b      	adds	r3, r7, r1
 80080fa:	2206      	movs	r2, #6
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e011      	b.n	8008124 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008100:	1dfb      	adds	r3, r7, #7
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2201      	movs	r2, #1
 8008106:	429a      	cmp	r2, r3
 8008108:	419b      	sbcs	r3, r3
 800810a:	425b      	negs	r3, r3
 800810c:	b2db      	uxtb	r3, r3
 800810e:	001a      	movs	r2, r3
 8008110:	235f      	movs	r3, #95	@ 0x5f
 8008112:	18fc      	adds	r4, r7, r3
 8008114:	2314      	movs	r3, #20
 8008116:	18fb      	adds	r3, r7, r3
 8008118:	0011      	movs	r1, r2
 800811a:	0018      	movs	r0, r3
 800811c:	f7fe fab6 	bl	800668c <chk_lock>
 8008120:	0003      	movs	r3, r0
 8008122:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008124:	1dfb      	adds	r3, r7, #7
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	221c      	movs	r2, #28
 800812a:	4013      	ands	r3, r2
 800812c:	d100      	bne.n	8008130 <f_open+0xb0>
 800812e:	e096      	b.n	800825e <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8008130:	225f      	movs	r2, #95	@ 0x5f
 8008132:	18bb      	adds	r3, r7, r2
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d01a      	beq.n	8008170 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800813a:	18bb      	adds	r3, r7, r2
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b04      	cmp	r3, #4
 8008140:	d10f      	bne.n	8008162 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008142:	f7fe fafb 	bl	800673c <enq_lock>
 8008146:	1e03      	subs	r3, r0, #0
 8008148:	d007      	beq.n	800815a <f_open+0xda>
 800814a:	2314      	movs	r3, #20
 800814c:	18fb      	adds	r3, r7, r3
 800814e:	0018      	movs	r0, r3
 8008150:	f7ff fa5b 	bl	800760a <dir_register>
 8008154:	0003      	movs	r3, r0
 8008156:	001a      	movs	r2, r3
 8008158:	e000      	b.n	800815c <f_open+0xdc>
 800815a:	2212      	movs	r2, #18
 800815c:	235f      	movs	r3, #95	@ 0x5f
 800815e:	18fb      	adds	r3, r7, r3
 8008160:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008162:	1dfb      	adds	r3, r7, #7
 8008164:	1dfa      	adds	r2, r7, #7
 8008166:	7812      	ldrb	r2, [r2, #0]
 8008168:	2108      	movs	r1, #8
 800816a:	430a      	orrs	r2, r1
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e014      	b.n	800819a <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008170:	2314      	movs	r3, #20
 8008172:	18fb      	adds	r3, r7, r3
 8008174:	799b      	ldrb	r3, [r3, #6]
 8008176:	001a      	movs	r2, r3
 8008178:	2311      	movs	r3, #17
 800817a:	4013      	ands	r3, r2
 800817c:	d004      	beq.n	8008188 <f_open+0x108>
					res = FR_DENIED;
 800817e:	235f      	movs	r3, #95	@ 0x5f
 8008180:	18fb      	adds	r3, r7, r3
 8008182:	2207      	movs	r2, #7
 8008184:	701a      	strb	r2, [r3, #0]
 8008186:	e008      	b.n	800819a <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008188:	1dfb      	adds	r3, r7, #7
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	2204      	movs	r2, #4
 800818e:	4013      	ands	r3, r2
 8008190:	d003      	beq.n	800819a <f_open+0x11a>
 8008192:	235f      	movs	r3, #95	@ 0x5f
 8008194:	18fb      	adds	r3, r7, r3
 8008196:	2208      	movs	r2, #8
 8008198:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800819a:	245f      	movs	r4, #95	@ 0x5f
 800819c:	193b      	adds	r3, r7, r4
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d000      	beq.n	80081a6 <f_open+0x126>
 80081a4:	e07b      	b.n	800829e <f_open+0x21e>
 80081a6:	1dfb      	adds	r3, r7, #7
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2208      	movs	r2, #8
 80081ac:	4013      	ands	r3, r2
 80081ae:	d100      	bne.n	80081b2 <f_open+0x132>
 80081b0:	e075      	b.n	800829e <f_open+0x21e>
				dw = GET_FATTIME();
 80081b2:	f7fd fa97 	bl	80056e4 <get_fattime>
 80081b6:	0003      	movs	r3, r0
 80081b8:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80081ba:	2514      	movs	r5, #20
 80081bc:	197b      	adds	r3, r7, r5
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	330e      	adds	r3, #14
 80081c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081c4:	0011      	movs	r1, r2
 80081c6:	0018      	movs	r0, r3
 80081c8:	f7fe f98c 	bl	80064e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80081cc:	197b      	adds	r3, r7, r5
 80081ce:	6a1b      	ldr	r3, [r3, #32]
 80081d0:	3316      	adds	r3, #22
 80081d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081d4:	0011      	movs	r1, r2
 80081d6:	0018      	movs	r0, r3
 80081d8:	f7fe f984 	bl	80064e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80081dc:	197b      	adds	r3, r7, r5
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	330b      	adds	r3, #11
 80081e2:	2220      	movs	r2, #32
 80081e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	197b      	adds	r3, r7, r5
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	0019      	movs	r1, r3
 80081ee:	0010      	movs	r0, r2
 80081f0:	f7ff f964 	bl	80074bc <ld_clust>
 80081f4:	0003      	movs	r3, r0
 80081f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80081f8:	6938      	ldr	r0, [r7, #16]
 80081fa:	197b      	adds	r3, r7, r5
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	2200      	movs	r2, #0
 8008200:	0019      	movs	r1, r3
 8008202:	f7ff f97a 	bl	80074fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008206:	197b      	adds	r3, r7, r5
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	331c      	adds	r3, #28
 800820c:	2100      	movs	r1, #0
 800820e:	0018      	movs	r0, r3
 8008210:	f7fe f968 	bl	80064e4 <st_dword>
					fs->wflag = 1;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	2201      	movs	r2, #1
 8008218:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800821a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800821c:	2b00      	cmp	r3, #0
 800821e:	d03e      	beq.n	800829e <f_open+0x21e>
						dw = fs->winsect;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008224:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008226:	0026      	movs	r6, r4
 8008228:	193c      	adds	r4, r7, r4
 800822a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800822c:	197b      	adds	r3, r7, r5
 800822e:	2200      	movs	r2, #0
 8008230:	0018      	movs	r0, r3
 8008232:	f7fe fe56 	bl	8006ee2 <remove_chain>
 8008236:	0003      	movs	r3, r0
 8008238:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 800823a:	19bb      	adds	r3, r7, r6
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d12d      	bne.n	800829e <f_open+0x21e>
							res = move_window(fs, dw);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	19bc      	adds	r4, r7, r6
 8008246:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008248:	0011      	movs	r1, r2
 800824a:	0018      	movs	r0, r3
 800824c:	f7fe fbd0 	bl	80069f0 <move_window>
 8008250:	0003      	movs	r3, r0
 8008252:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008258:	3a01      	subs	r2, #1
 800825a:	611a      	str	r2, [r3, #16]
 800825c:	e01f      	b.n	800829e <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800825e:	215f      	movs	r1, #95	@ 0x5f
 8008260:	187b      	adds	r3, r7, r1
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d11a      	bne.n	800829e <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008268:	2314      	movs	r3, #20
 800826a:	18fb      	adds	r3, r7, r3
 800826c:	799b      	ldrb	r3, [r3, #6]
 800826e:	001a      	movs	r2, r3
 8008270:	2310      	movs	r3, #16
 8008272:	4013      	ands	r3, r2
 8008274:	d003      	beq.n	800827e <f_open+0x1fe>
					res = FR_NO_FILE;
 8008276:	187b      	adds	r3, r7, r1
 8008278:	2204      	movs	r2, #4
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e00f      	b.n	800829e <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800827e:	1dfb      	adds	r3, r7, #7
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	2202      	movs	r2, #2
 8008284:	4013      	ands	r3, r2
 8008286:	d00a      	beq.n	800829e <f_open+0x21e>
 8008288:	2314      	movs	r3, #20
 800828a:	18fb      	adds	r3, r7, r3
 800828c:	799b      	ldrb	r3, [r3, #6]
 800828e:	001a      	movs	r2, r3
 8008290:	2301      	movs	r3, #1
 8008292:	4013      	ands	r3, r2
 8008294:	d003      	beq.n	800829e <f_open+0x21e>
						res = FR_DENIED;
 8008296:	235f      	movs	r3, #95	@ 0x5f
 8008298:	18fb      	adds	r3, r7, r3
 800829a:	2207      	movs	r2, #7
 800829c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 800829e:	235f      	movs	r3, #95	@ 0x5f
 80082a0:	18fb      	adds	r3, r7, r3
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d12b      	bne.n	8008300 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80082a8:	1dfb      	adds	r3, r7, #7
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2208      	movs	r2, #8
 80082ae:	4013      	ands	r3, r2
 80082b0:	d005      	beq.n	80082be <f_open+0x23e>
				mode |= FA_MODIFIED;
 80082b2:	1dfb      	adds	r3, r7, #7
 80082b4:	1dfa      	adds	r2, r7, #7
 80082b6:	7812      	ldrb	r2, [r2, #0]
 80082b8:	2140      	movs	r1, #64	@ 0x40
 80082ba:	430a      	orrs	r2, r1
 80082bc:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80082c6:	2114      	movs	r1, #20
 80082c8:	187b      	adds	r3, r7, r1
 80082ca:	6a1a      	ldr	r2, [r3, #32]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082d0:	1dfb      	adds	r3, r7, #7
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	2201      	movs	r2, #1
 80082d6:	429a      	cmp	r2, r3
 80082d8:	419b      	sbcs	r3, r3
 80082da:	425b      	negs	r3, r3
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	001a      	movs	r2, r3
 80082e0:	187b      	adds	r3, r7, r1
 80082e2:	0011      	movs	r1, r2
 80082e4:	0018      	movs	r0, r3
 80082e6:	f7fe fa47 	bl	8006778 <inc_lock>
 80082ea:	0002      	movs	r2, r0
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	691b      	ldr	r3, [r3, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d103      	bne.n	8008300 <f_open+0x280>
 80082f8:	235f      	movs	r3, #95	@ 0x5f
 80082fa:	18fb      	adds	r3, r7, r3
 80082fc:	2202      	movs	r2, #2
 80082fe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008300:	235f      	movs	r3, #95	@ 0x5f
 8008302:	18fb      	adds	r3, r7, r3
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d000      	beq.n	800830c <f_open+0x28c>
 800830a:	e09e      	b.n	800844a <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	2414      	movs	r4, #20
 8008310:	193b      	adds	r3, r7, r4
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	0019      	movs	r1, r3
 8008316:	0010      	movs	r0, r2
 8008318:	f7ff f8d0 	bl	80074bc <ld_clust>
 800831c:	0002      	movs	r2, r0
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008322:	193b      	adds	r3, r7, r4
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	331c      	adds	r3, #28
 8008328:	0018      	movs	r0, r3
 800832a:	f7fe f89c 	bl	8006466 <ld_dword>
 800832e:	0002      	movs	r2, r0
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	88da      	ldrh	r2, [r3, #6]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	1dfa      	adds	r2, r7, #7
 800834c:	7812      	ldrb	r2, [r2, #0]
 800834e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3330      	adds	r3, #48	@ 0x30
 8008366:	2280      	movs	r2, #128	@ 0x80
 8008368:	0092      	lsls	r2, r2, #2
 800836a:	2100      	movs	r1, #0
 800836c:	0018      	movs	r0, r3
 800836e:	f7fe f902 	bl	8006576 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008372:	1dfb      	adds	r3, r7, #7
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2220      	movs	r2, #32
 8008378:	4013      	ands	r3, r2
 800837a:	d066      	beq.n	800844a <f_open+0x3ca>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d062      	beq.n	800844a <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	895b      	ldrh	r3, [r3, #10]
 8008390:	025b      	lsls	r3, r3, #9
 8008392:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	657b      	str	r3, [r7, #84]	@ 0x54
 80083a0:	e019      	b.n	80083d6 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083a6:	0011      	movs	r1, r2
 80083a8:	0018      	movs	r0, r3
 80083aa:	f7fe fbef 	bl	8006b8c <get_fat>
 80083ae:	0003      	movs	r3, r0
 80083b0:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80083b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d803      	bhi.n	80083c0 <f_open+0x340>
 80083b8:	235f      	movs	r3, #95	@ 0x5f
 80083ba:	18fb      	adds	r3, r7, r3
 80083bc:	2202      	movs	r2, #2
 80083be:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80083c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80083c2:	3301      	adds	r3, #1
 80083c4:	d103      	bne.n	80083ce <f_open+0x34e>
 80083c6:	235f      	movs	r3, #95	@ 0x5f
 80083c8:	18fb      	adds	r3, r7, r3
 80083ca:	2201      	movs	r2, #1
 80083cc:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80083ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80083d6:	235f      	movs	r3, #95	@ 0x5f
 80083d8:	18fb      	adds	r3, r7, r3
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d103      	bne.n	80083e8 <f_open+0x368>
 80083e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d8dc      	bhi.n	80083a2 <f_open+0x322>
				}
				fp->clust = clst;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80083ee:	245f      	movs	r4, #95	@ 0x5f
 80083f0:	193b      	adds	r3, r7, r4
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d128      	bne.n	800844a <f_open+0x3ca>
 80083f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083fa:	05db      	lsls	r3, r3, #23
 80083fc:	0ddb      	lsrs	r3, r3, #23
 80083fe:	d024      	beq.n	800844a <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008404:	0011      	movs	r1, r2
 8008406:	0018      	movs	r0, r3
 8008408:	f7fe fba4 	bl	8006b54 <clust2sect>
 800840c:	0003      	movs	r3, r0
 800840e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008412:	2b00      	cmp	r3, #0
 8008414:	d103      	bne.n	800841e <f_open+0x39e>
						res = FR_INT_ERR;
 8008416:	193b      	adds	r3, r7, r4
 8008418:	2202      	movs	r2, #2
 800841a:	701a      	strb	r2, [r3, #0]
 800841c:	e015      	b.n	800844a <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800841e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008420:	0a5a      	lsrs	r2, r3, #9
 8008422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008424:	18d2      	adds	r2, r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	7858      	ldrb	r0, [r3, #1]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3330      	adds	r3, #48	@ 0x30
 8008432:	0019      	movs	r1, r3
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a1a      	ldr	r2, [r3, #32]
 8008438:	2301      	movs	r3, #1
 800843a:	f7fd ff81 	bl	8006340 <disk_read>
 800843e:	1e03      	subs	r3, r0, #0
 8008440:	d003      	beq.n	800844a <f_open+0x3ca>
 8008442:	235f      	movs	r3, #95	@ 0x5f
 8008444:	18fb      	adds	r3, r7, r3
 8008446:	2201      	movs	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800844a:	235f      	movs	r3, #95	@ 0x5f
 800844c:	18fb      	adds	r3, r7, r3
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <f_open+0x3da>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	245f      	movs	r4, #95	@ 0x5f
 800845e:	193b      	adds	r3, r7, r4
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	0019      	movs	r1, r3
 8008464:	0010      	movs	r0, r2
 8008466:	f7fe f8f2 	bl	800664e <unlock_fs>
 800846a:	193b      	adds	r3, r7, r4
 800846c:	781b      	ldrb	r3, [r3, #0]
}
 800846e:	0018      	movs	r0, r3
 8008470:	46bd      	mov	sp, r7
 8008472:	b019      	add	sp, #100	@ 0x64
 8008474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008476 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008476:	b5b0      	push	{r4, r5, r7, lr}
 8008478:	b08e      	sub	sp, #56	@ 0x38
 800847a:	af00      	add	r7, sp, #0
 800847c:	60f8      	str	r0, [r7, #12]
 800847e:	60b9      	str	r1, [r7, #8]
 8008480:	607a      	str	r2, [r7, #4]
 8008482:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2537      	movs	r5, #55	@ 0x37
 8008492:	197c      	adds	r4, r7, r5
 8008494:	2214      	movs	r2, #20
 8008496:	18ba      	adds	r2, r7, r2
 8008498:	0011      	movs	r1, r2
 800849a:	0018      	movs	r0, r3
 800849c:	f7ff fd38 	bl	8007f10 <validate>
 80084a0:	0003      	movs	r3, r0
 80084a2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80084a4:	197b      	adds	r3, r7, r5
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d107      	bne.n	80084bc <f_read+0x46>
 80084ac:	197b      	adds	r3, r7, r5
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	7d52      	ldrb	r2, [r2, #21]
 80084b2:	701a      	strb	r2, [r3, #0]
 80084b4:	197b      	adds	r3, r7, r5
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <f_read+0x5c>
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	2437      	movs	r4, #55	@ 0x37
 80084c0:	193b      	adds	r3, r7, r4
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	0019      	movs	r1, r3
 80084c6:	0010      	movs	r0, r2
 80084c8:	f7fe f8c1 	bl	800664e <unlock_fs>
 80084cc:	193b      	adds	r3, r7, r4
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	e13d      	b.n	800874e <f_read+0x2d8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	7d1b      	ldrb	r3, [r3, #20]
 80084d6:	001a      	movs	r2, r3
 80084d8:	2301      	movs	r3, #1
 80084da:	4013      	ands	r3, r2
 80084dc:	d106      	bne.n	80084ec <f_read+0x76>
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2107      	movs	r1, #7
 80084e2:	0018      	movs	r0, r3
 80084e4:	f7fe f8b3 	bl	800664e <unlock_fs>
 80084e8:	2307      	movs	r3, #7
 80084ea:	e130      	b.n	800874e <f_read+0x2d8>
	remain = fp->obj.objsize - fp->fptr;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	68da      	ldr	r2, [r3, #12]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d800      	bhi.n	8008502 <f_read+0x8c>
 8008500:	e11b      	b.n	800873a <f_read+0x2c4>
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008506:	e118      	b.n	800873a <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	05db      	lsls	r3, r3, #23
 800850e:	0ddb      	lsrs	r3, r3, #23
 8008510:	d000      	beq.n	8008514 <f_read+0x9e>
 8008512:	e0e3      	b.n	80086dc <f_read+0x266>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	0a5b      	lsrs	r3, r3, #9
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	8952      	ldrh	r2, [r2, #10]
 800851e:	3a01      	subs	r2, #1
 8008520:	4013      	ands	r3, r2
 8008522:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d13b      	bne.n	80085a2 <f_read+0x12c>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <f_read+0xc4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	633b      	str	r3, [r7, #48]	@ 0x30
 8008538:	e016      	b.n	8008568 <f_read+0xf2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <f_read+0xe0>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	0011      	movs	r1, r2
 800854a:	0018      	movs	r0, r3
 800854c:	f7fe fde2 	bl	8007114 <clmt_clust>
 8008550:	0003      	movs	r3, r0
 8008552:	633b      	str	r3, [r7, #48]	@ 0x30
 8008554:	e008      	b.n	8008568 <f_read+0xf2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	0019      	movs	r1, r3
 800855e:	0010      	movs	r0, r2
 8008560:	f7fe fb14 	bl	8006b8c <get_fat>
 8008564:	0003      	movs	r3, r0
 8008566:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856a:	2b01      	cmp	r3, #1
 800856c:	d809      	bhi.n	8008582 <f_read+0x10c>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2202      	movs	r2, #2
 8008572:	755a      	strb	r2, [r3, #21]
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2102      	movs	r1, #2
 8008578:	0018      	movs	r0, r3
 800857a:	f7fe f868 	bl	800664e <unlock_fs>
 800857e:	2302      	movs	r3, #2
 8008580:	e0e5      	b.n	800874e <f_read+0x2d8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	3301      	adds	r3, #1
 8008586:	d109      	bne.n	800859c <f_read+0x126>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	755a      	strb	r2, [r3, #21]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2101      	movs	r1, #1
 8008592:	0018      	movs	r0, r3
 8008594:	f7fe f85b 	bl	800664e <unlock_fs>
 8008598:	2301      	movs	r3, #1
 800859a:	e0d8      	b.n	800874e <f_read+0x2d8>
				fp->clust = clst;				/* Update current cluster */
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085a0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	0019      	movs	r1, r3
 80085aa:	0010      	movs	r0, r2
 80085ac:	f7fe fad2 	bl	8006b54 <clust2sect>
 80085b0:	0003      	movs	r3, r0
 80085b2:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <f_read+0x158>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2202      	movs	r2, #2
 80085be:	755a      	strb	r2, [r3, #21]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	2102      	movs	r1, #2
 80085c4:	0018      	movs	r0, r3
 80085c6:	f7fe f842 	bl	800664e <unlock_fs>
 80085ca:	2302      	movs	r3, #2
 80085cc:	e0bf      	b.n	800874e <f_read+0x2d8>
			sect += csect;
 80085ce:	69ba      	ldr	r2, [r7, #24]
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	18d3      	adds	r3, r2, r3
 80085d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	0a5b      	lsrs	r3, r3, #9
 80085da:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d03d      	beq.n	800865e <f_read+0x1e8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e6:	18d3      	adds	r3, r2, r3
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	8952      	ldrh	r2, [r2, #10]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d905      	bls.n	80085fc <f_read+0x186>
					cc = fs->csize - csect;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	895b      	ldrh	r3, [r3, #10]
 80085f4:	001a      	movs	r2, r3
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	7858      	ldrb	r0, [r3, #1]
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008606:	f7fd fe9b 	bl	8006340 <disk_read>
 800860a:	1e03      	subs	r3, r0, #0
 800860c:	d009      	beq.n	8008622 <f_read+0x1ac>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	755a      	strb	r2, [r3, #21]
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2101      	movs	r1, #1
 8008618:	0018      	movs	r0, r3
 800861a:	f7fe f818 	bl	800664e <unlock_fs>
 800861e:	2301      	movs	r3, #1
 8008620:	e095      	b.n	800874e <f_read+0x2d8>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	7d1b      	ldrb	r3, [r3, #20]
 8008626:	b25b      	sxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	da14      	bge.n	8008656 <f_read+0x1e0>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6a1a      	ldr	r2, [r3, #32]
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008636:	429a      	cmp	r2, r3
 8008638:	d90d      	bls.n	8008656 <f_read+0x1e0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1a      	ldr	r2, [r3, #32]
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	025b      	lsls	r3, r3, #9
 8008644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008646:	18d0      	adds	r0, r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3330      	adds	r3, #48	@ 0x30
 800864c:	2280      	movs	r2, #128	@ 0x80
 800864e:	0092      	lsls	r2, r2, #2
 8008650:	0019      	movs	r1, r3
 8008652:	f7fd ff71 	bl	8006538 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008658:	025b      	lsls	r3, r3, #9
 800865a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800865c:	e059      	b.n	8008712 <f_read+0x29c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	429a      	cmp	r2, r3
 8008666:	d036      	beq.n	80086d6 <f_read+0x260>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	7d1b      	ldrb	r3, [r3, #20]
 800866c:	b25b      	sxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	da1c      	bge.n	80086ac <f_read+0x236>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	7858      	ldrb	r0, [r3, #1]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3330      	adds	r3, #48	@ 0x30
 800867a:	0019      	movs	r1, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a1a      	ldr	r2, [r3, #32]
 8008680:	2301      	movs	r3, #1
 8008682:	f7fd fe85 	bl	8006390 <disk_write>
 8008686:	1e03      	subs	r3, r0, #0
 8008688:	d009      	beq.n	800869e <f_read+0x228>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	755a      	strb	r2, [r3, #21]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	2101      	movs	r1, #1
 8008694:	0018      	movs	r0, r3
 8008696:	f7fd ffda 	bl	800664e <unlock_fs>
 800869a:	2301      	movs	r3, #1
 800869c:	e057      	b.n	800874e <f_read+0x2d8>
					fp->flag &= (BYTE)~FA_DIRTY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	7d1b      	ldrb	r3, [r3, #20]
 80086a2:	227f      	movs	r2, #127	@ 0x7f
 80086a4:	4013      	ands	r3, r2
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	7858      	ldrb	r0, [r3, #1]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3330      	adds	r3, #48	@ 0x30
 80086b4:	0019      	movs	r1, r3
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	2301      	movs	r3, #1
 80086ba:	f7fd fe41 	bl	8006340 <disk_read>
 80086be:	1e03      	subs	r3, r0, #0
 80086c0:	d009      	beq.n	80086d6 <f_read+0x260>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	755a      	strb	r2, [r3, #21]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2101      	movs	r1, #1
 80086cc:	0018      	movs	r0, r3
 80086ce:	f7fd ffbe 	bl	800664e <unlock_fs>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e03b      	b.n	800874e <f_read+0x2d8>
			}
#endif
			fp->sect = sect;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	699b      	ldr	r3, [r3, #24]
 80086e0:	05db      	lsls	r3, r3, #23
 80086e2:	0ddb      	lsrs	r3, r3, #23
 80086e4:	2280      	movs	r2, #128	@ 0x80
 80086e6:	0092      	lsls	r2, r2, #2
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80086ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d901      	bls.n	80086f8 <f_read+0x282>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3330      	adds	r3, #48	@ 0x30
 80086fc:	001a      	movs	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	05db      	lsls	r3, r3, #23
 8008704:	0ddb      	lsrs	r3, r3, #23
 8008706:	18d1      	adds	r1, r2, r3
 8008708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	0018      	movs	r0, r3
 800870e:	f7fd ff13 	bl	8006538 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008716:	18d3      	adds	r3, r2, r3
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	699a      	ldr	r2, [r3, #24]
 800871e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008720:	18d2      	adds	r2, r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	619a      	str	r2, [r3, #24]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872c:	18d2      	adds	r2, r2, r3
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d000      	beq.n	8008742 <f_read+0x2cc>
 8008740:	e6e2      	b.n	8008508 <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2100      	movs	r1, #0
 8008746:	0018      	movs	r0, r3
 8008748:	f7fd ff81 	bl	800664e <unlock_fs>
 800874c:	2300      	movs	r3, #0
}
 800874e:	0018      	movs	r0, r3
 8008750:	46bd      	mov	sp, r7
 8008752:	b00e      	add	sp, #56	@ 0x38
 8008754:	bdb0      	pop	{r4, r5, r7, pc}

08008756 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008756:	b5b0      	push	{r4, r5, r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2517      	movs	r5, #23
 8008762:	197c      	adds	r4, r7, r5
 8008764:	2208      	movs	r2, #8
 8008766:	18ba      	adds	r2, r7, r2
 8008768:	0011      	movs	r1, r2
 800876a:	0018      	movs	r0, r3
 800876c:	f7ff fbd0 	bl	8007f10 <validate>
 8008770:	0003      	movs	r3, r0
 8008772:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008774:	197b      	adds	r3, r7, r5
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d173      	bne.n	8008864 <f_sync+0x10e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	7d1b      	ldrb	r3, [r3, #20]
 8008780:	001a      	movs	r2, r3
 8008782:	2340      	movs	r3, #64	@ 0x40
 8008784:	4013      	ands	r3, r2
 8008786:	d06d      	beq.n	8008864 <f_sync+0x10e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	7d1b      	ldrb	r3, [r3, #20]
 800878c:	b25b      	sxtb	r3, r3
 800878e:	2b00      	cmp	r3, #0
 8008790:	da19      	bge.n	80087c6 <f_sync+0x70>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	7858      	ldrb	r0, [r3, #1]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3330      	adds	r3, #48	@ 0x30
 800879a:	0019      	movs	r1, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a1a      	ldr	r2, [r3, #32]
 80087a0:	2301      	movs	r3, #1
 80087a2:	f7fd fdf5 	bl	8006390 <disk_write>
 80087a6:	1e03      	subs	r3, r0, #0
 80087a8:	d006      	beq.n	80087b8 <f_sync+0x62>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2101      	movs	r1, #1
 80087ae:	0018      	movs	r0, r3
 80087b0:	f7fd ff4d 	bl	800664e <unlock_fs>
 80087b4:	2301      	movs	r3, #1
 80087b6:	e05f      	b.n	8008878 <f_sync+0x122>
				fp->flag &= (BYTE)~FA_DIRTY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	7d1b      	ldrb	r3, [r3, #20]
 80087bc:	227f      	movs	r2, #127	@ 0x7f
 80087be:	4013      	ands	r3, r2
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80087c6:	f7fc ff8d 	bl	80056e4 <get_fattime>
 80087ca:	0003      	movs	r3, r0
 80087cc:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d4:	2517      	movs	r5, #23
 80087d6:	197c      	adds	r4, r7, r5
 80087d8:	0019      	movs	r1, r3
 80087da:	0010      	movs	r0, r2
 80087dc:	f7fe f908 	bl	80069f0 <move_window>
 80087e0:	0003      	movs	r3, r0
 80087e2:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 80087e4:	002c      	movs	r4, r5
 80087e6:	193b      	adds	r3, r7, r4
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d13a      	bne.n	8008864 <f_sync+0x10e>
					dir = fp->dir_ptr;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	330b      	adds	r3, #11
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	330b      	adds	r3, #11
 80087fe:	2120      	movs	r1, #32
 8008800:	430a      	orrs	r2, r1
 8008802:	b2d2      	uxtb	r2, r2
 8008804:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	0019      	movs	r1, r3
 8008812:	f7fe fe72 	bl	80074fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	331c      	adds	r3, #28
 800881a:	001a      	movs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	0019      	movs	r1, r3
 8008822:	0010      	movs	r0, r2
 8008824:	f7fd fe5e 	bl	80064e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	3316      	adds	r3, #22
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	0011      	movs	r1, r2
 8008830:	0018      	movs	r0, r3
 8008832:	f7fd fe57 	bl	80064e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3312      	adds	r3, #18
 800883a:	2100      	movs	r1, #0
 800883c:	0018      	movs	r0, r3
 800883e:	f7fd fe33 	bl	80064a8 <st_word>
					fs->wflag = 1;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2201      	movs	r2, #1
 8008846:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	193c      	adds	r4, r7, r4
 800884c:	0018      	movs	r0, r3
 800884e:	f7fe f905 	bl	8006a5c <sync_fs>
 8008852:	0003      	movs	r3, r0
 8008854:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	7d1b      	ldrb	r3, [r3, #20]
 800885a:	2240      	movs	r2, #64	@ 0x40
 800885c:	4393      	bics	r3, r2
 800885e:	b2da      	uxtb	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	2417      	movs	r4, #23
 8008868:	193b      	adds	r3, r7, r4
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	0019      	movs	r1, r3
 800886e:	0010      	movs	r0, r2
 8008870:	f7fd feed 	bl	800664e <unlock_fs>
 8008874:	193b      	adds	r3, r7, r4
 8008876:	781b      	ldrb	r3, [r3, #0]
}
 8008878:	0018      	movs	r0, r3
 800887a:	46bd      	mov	sp, r7
 800887c:	b006      	add	sp, #24
 800887e:	bdb0      	pop	{r4, r5, r7, pc}

08008880 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008880:	b5b0      	push	{r4, r5, r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008888:	250f      	movs	r5, #15
 800888a:	197c      	adds	r4, r7, r5
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	0018      	movs	r0, r3
 8008890:	f7ff ff61 	bl	8008756 <f_sync>
 8008894:	0003      	movs	r3, r0
 8008896:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8008898:	197b      	adds	r3, r7, r5
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d121      	bne.n	80088e4 <f_close+0x64>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	197c      	adds	r4, r7, r5
 80088a4:	2208      	movs	r2, #8
 80088a6:	18ba      	adds	r2, r7, r2
 80088a8:	0011      	movs	r1, r2
 80088aa:	0018      	movs	r0, r3
 80088ac:	f7ff fb30 	bl	8007f10 <validate>
 80088b0:	0003      	movs	r3, r0
 80088b2:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80088b4:	197b      	adds	r3, r7, r5
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d113      	bne.n	80088e4 <f_close+0x64>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	197c      	adds	r4, r7, r5
 80088c2:	0018      	movs	r0, r3
 80088c4:	f7fd ffe2 	bl	800688c <dec_lock>
 80088c8:	0003      	movs	r3, r0
 80088ca:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 80088cc:	197b      	adds	r3, r7, r5
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d102      	bne.n	80088da <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	2100      	movs	r1, #0
 80088de:	0018      	movs	r0, r3
 80088e0:	f7fd feb5 	bl	800664e <unlock_fs>
#endif
		}
	}
	return res;
 80088e4:	230f      	movs	r3, #15
 80088e6:	18fb      	adds	r3, r7, r3
 80088e8:	781b      	ldrb	r3, [r3, #0]
}
 80088ea:	0018      	movs	r0, r3
 80088ec:	46bd      	mov	sp, r7
 80088ee:	b004      	add	sp, #16
 80088f0:	bdb0      	pop	{r4, r5, r7, pc}

080088f2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80088f2:	b5b0      	push	{r4, r5, r7, lr}
 80088f4:	b092      	sub	sp, #72	@ 0x48
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	60b9      	str	r1, [r7, #8]
 80088fc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80088fe:	2547      	movs	r5, #71	@ 0x47
 8008900:	197c      	adds	r4, r7, r5
 8008902:	2328      	movs	r3, #40	@ 0x28
 8008904:	18f9      	adds	r1, r7, r3
 8008906:	230c      	movs	r3, #12
 8008908:	18fb      	adds	r3, r7, r3
 800890a:	2200      	movs	r2, #0
 800890c:	0018      	movs	r0, r3
 800890e:	f7ff f887 	bl	8007a20 <find_volume>
 8008912:	0003      	movs	r3, r0
 8008914:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008916:	197b      	adds	r3, r7, r5
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d000      	beq.n	8008920 <f_getfree+0x2e>
 800891e:	e09e      	b.n	8008a5e <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008928:	695a      	ldr	r2, [r3, #20]
 800892a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	3b02      	subs	r3, #2
 8008930:	429a      	cmp	r2, r3
 8008932:	d804      	bhi.n	800893e <f_getfree+0x4c>
			*nclst = fs->free_clst;
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	695a      	ldr	r2, [r3, #20]
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	601a      	str	r2, [r3, #0]
 800893c:	e08f      	b.n	8008a5e <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b01      	cmp	r3, #1
 8008948:	d12d      	bne.n	80089a6 <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 800894a:	2302      	movs	r3, #2
 800894c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800894e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008950:	2314      	movs	r3, #20
 8008952:	18fb      	adds	r3, r7, r3
 8008954:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 8008956:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008958:	2314      	movs	r3, #20
 800895a:	18fb      	adds	r3, r7, r3
 800895c:	0011      	movs	r1, r2
 800895e:	0018      	movs	r0, r3
 8008960:	f7fe f914 	bl	8006b8c <get_fat>
 8008964:	0003      	movs	r3, r0
 8008966:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800896a:	3301      	adds	r3, #1
 800896c:	d104      	bne.n	8008978 <f_getfree+0x86>
 800896e:	2347      	movs	r3, #71	@ 0x47
 8008970:	18fb      	adds	r3, r7, r3
 8008972:	2201      	movs	r2, #1
 8008974:	701a      	strb	r2, [r3, #0]
 8008976:	e065      	b.n	8008a44 <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897a:	2b01      	cmp	r3, #1
 800897c:	d104      	bne.n	8008988 <f_getfree+0x96>
 800897e:	2347      	movs	r3, #71	@ 0x47
 8008980:	18fb      	adds	r3, r7, r3
 8008982:	2202      	movs	r2, #2
 8008984:	701a      	strb	r2, [r3, #0]
 8008986:	e05d      	b.n	8008a44 <f_getfree+0x152>
					if (stat == 0) nfree++;
 8008988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898a:	2b00      	cmp	r3, #0
 800898c:	d102      	bne.n	8008994 <f_getfree+0xa2>
 800898e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008990:	3301      	adds	r3, #1
 8008992:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008996:	3301      	adds	r3, #1
 8008998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800899a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d3d8      	bcc.n	8008956 <f_getfree+0x64>
 80089a4:	e04e      	b.n	8008a44 <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80089a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b0:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 80089b2:	2300      	movs	r3, #0
 80089b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80089b6:	2300      	movs	r3, #0
 80089b8:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 80089ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d114      	bne.n	80089ea <f_getfree+0xf8>
							res = move_window(fs, sect++);
 80089c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80089c8:	2547      	movs	r5, #71	@ 0x47
 80089ca:	197c      	adds	r4, r7, r5
 80089cc:	0019      	movs	r1, r3
 80089ce:	f7fe f80f 	bl	80069f0 <move_window>
 80089d2:	0003      	movs	r3, r0
 80089d4:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 80089d6:	197b      	adds	r3, r7, r5
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d131      	bne.n	8008a42 <f_getfree+0x150>
							p = fs->win;
 80089de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e0:	3334      	adds	r3, #52	@ 0x34
 80089e2:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 80089e4:	2380      	movs	r3, #128	@ 0x80
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d10f      	bne.n	8008a12 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 80089f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f4:	0018      	movs	r0, r3
 80089f6:	f7fd fd1b 	bl	8006430 <ld_word>
 80089fa:	1e03      	subs	r3, r0, #0
 80089fc:	d102      	bne.n	8008a04 <f_getfree+0x112>
 80089fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a00:	3301      	adds	r3, #1
 8008a02:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	3302      	adds	r3, #2
 8008a08:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0c:	3b02      	subs	r3, #2
 8008a0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a10:	e010      	b.n	8008a34 <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a14:	0018      	movs	r0, r3
 8008a16:	f7fd fd26 	bl	8006466 <ld_dword>
 8008a1a:	0003      	movs	r3, r0
 8008a1c:	011b      	lsls	r3, r3, #4
 8008a1e:	091b      	lsrs	r3, r3, #4
 8008a20:	d102      	bne.n	8008a28 <f_getfree+0x136>
 8008a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a24:	3301      	adds	r3, #1
 8008a26:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a30:	3b04      	subs	r3, #4
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8008a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a36:	3b01      	subs	r3, #1
 8008a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1bc      	bne.n	80089ba <f_getfree+0xc8>
 8008a40:	e000      	b.n	8008a44 <f_getfree+0x152>
							if (res != FR_OK) break;
 8008a42:	46c0      	nop			@ (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a48:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8008a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a4e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8008a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a52:	791a      	ldrb	r2, [r3, #4]
 8008a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a56:	2101      	movs	r1, #1
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8008a5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a60:	2447      	movs	r4, #71	@ 0x47
 8008a62:	193b      	adds	r3, r7, r4
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	0019      	movs	r1, r3
 8008a68:	0010      	movs	r0, r2
 8008a6a:	f7fd fdf0 	bl	800664e <unlock_fs>
 8008a6e:	193b      	adds	r3, r7, r4
 8008a70:	781b      	ldrb	r3, [r3, #0]
}
 8008a72:	0018      	movs	r0, r3
 8008a74:	46bd      	mov	sp, r7
 8008a76:	b012      	add	sp, #72	@ 0x48
 8008a78:	bdb0      	pop	{r4, r5, r7, pc}

08008a7a <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008a7a:	b590      	push	{r4, r7, lr}
 8008a7c:	b089      	sub	sp, #36	@ 0x24
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	60f8      	str	r0, [r7, #12]
 8008a82:	60b9      	str	r1, [r7, #8]
 8008a84:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008a8e:	e022      	b.n	8008ad6 <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008a90:	2310      	movs	r3, #16
 8008a92:	18fb      	adds	r3, r7, r3
 8008a94:	2414      	movs	r4, #20
 8008a96:	1939      	adds	r1, r7, r4
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f7ff fceb 	bl	8008476 <f_read>
		if (rc != 1) break;
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d11d      	bne.n	8008ae2 <f_gets+0x68>
		c = s[0];
 8008aa6:	2117      	movs	r1, #23
 8008aa8:	187b      	adds	r3, r7, r1
 8008aaa:	193a      	adds	r2, r7, r4
 8008aac:	7812      	ldrb	r2, [r2, #0]
 8008aae:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008ab0:	187b      	adds	r3, r7, r1
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	2b0d      	cmp	r3, #13
 8008ab6:	d00d      	beq.n	8008ad4 <f_gets+0x5a>
		*p++ = c;
 8008ab8:	69bb      	ldr	r3, [r7, #24]
 8008aba:	1c5a      	adds	r2, r3, #1
 8008abc:	61ba      	str	r2, [r7, #24]
 8008abe:	187a      	adds	r2, r7, r1
 8008ac0:	7812      	ldrb	r2, [r2, #0]
 8008ac2:	701a      	strb	r2, [r3, #0]
		n++;
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008aca:	187b      	adds	r3, r7, r1
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b0a      	cmp	r3, #10
 8008ad0:	d009      	beq.n	8008ae6 <f_gets+0x6c>
 8008ad2:	e000      	b.n	8008ad6 <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008ad4:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	dbd7      	blt.n	8008a90 <f_gets+0x16>
 8008ae0:	e002      	b.n	8008ae8 <f_gets+0x6e>
		if (rc != 1) break;
 8008ae2:	46c0      	nop			@ (mov r8, r8)
 8008ae4:	e000      	b.n	8008ae8 <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 8008ae6:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	2200      	movs	r2, #0
 8008aec:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <f_gets+0x7e>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	e000      	b.n	8008afa <f_gets+0x80>
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	0018      	movs	r0, r3
 8008afc:	46bd      	mov	sp, r7
 8008afe:	b009      	add	sp, #36	@ 0x24
 8008b00:	bd90      	pop	{r4, r7, pc}
	...

08008b04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b04:	b590      	push	{r4, r7, lr}
 8008b06:	b087      	sub	sp, #28
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	1dfb      	adds	r3, r7, #7
 8008b10:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8008b12:	2417      	movs	r4, #23
 8008b14:	193b      	adds	r3, r7, r4
 8008b16:	2201      	movs	r2, #1
 8008b18:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 8008b1a:	2016      	movs	r0, #22
 8008b1c:	183b      	adds	r3, r7, r0
 8008b1e:	2200      	movs	r2, #0
 8008b20:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8008b22:	4b21      	ldr	r3, [pc, #132]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b24:	7a5b      	ldrb	r3, [r3, #9]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d136      	bne.n	8008b9a <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b2e:	7a5b      	ldrb	r3, [r3, #9]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	001a      	movs	r2, r3
 8008b34:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b36:	2100      	movs	r1, #0
 8008b38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b3c:	7a5b      	ldrb	r3, [r3, #9]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	4a19      	ldr	r2, [pc, #100]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	18d3      	adds	r3, r2, r3
 8008b46:	3304      	adds	r3, #4
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 8008b4c:	4b16      	ldr	r3, [pc, #88]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b4e:	7a5b      	ldrb	r3, [r3, #9]
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	001a      	movs	r2, r3
 8008b54:	4b14      	ldr	r3, [pc, #80]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b56:	189b      	adds	r3, r3, r2
 8008b58:	1dfa      	adds	r2, r7, #7
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b5e:	4b12      	ldr	r3, [pc, #72]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b60:	7a5b      	ldrb	r3, [r3, #9]
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	1c5a      	adds	r2, r3, #1
 8008b66:	b2d1      	uxtb	r1, r2
 8008b68:	4a0f      	ldr	r2, [pc, #60]	@ (8008ba8 <FATFS_LinkDriverEx+0xa4>)
 8008b6a:	7251      	strb	r1, [r2, #9]
 8008b6c:	183a      	adds	r2, r7, r0
 8008b6e:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 8008b70:	183b      	adds	r3, r7, r0
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	3330      	adds	r3, #48	@ 0x30
 8008b76:	b2da      	uxtb	r2, r3
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	223a      	movs	r2, #58	@ 0x3a
 8008b82:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	3302      	adds	r3, #2
 8008b88:	222f      	movs	r2, #47	@ 0x2f
 8008b8a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	3303      	adds	r3, #3
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b94:	193b      	adds	r3, r7, r4
 8008b96:	2200      	movs	r2, #0
 8008b98:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008b9a:	2317      	movs	r3, #23
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	781b      	ldrb	r3, [r3, #0]
}
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	b007      	add	sp, #28
 8008ba6:	bd90      	pop	{r4, r7, pc}
 8008ba8:	20000b50 	.word	0x20000b50

08008bac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f7ff ffa1 	bl	8008b04 <FATFS_LinkDriverEx>
 8008bc2:	0003      	movs	r3, r0
}
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	b002      	add	sp, #8
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	0002      	movs	r2, r0
 8008bd4:	6039      	str	r1, [r7, #0]
 8008bd6:	1dfb      	adds	r3, r7, #7
 8008bd8:	701a      	strb	r2, [r3, #0]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2101      	movs	r1, #1
 8008bde:	2001      	movs	r0, #1
 8008be0:	f000 f84e 	bl	8008c80 <osSemaphoreNew>
 8008be4:	0002      	movs	r2, r0
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	4193      	sbcs	r3, r2
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	60fb      	str	r3, [r7, #12]

    return ret;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
}
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	b004      	add	sp, #16
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	0018      	movs	r0, r3
 8008c0c:	f000 f95c 	bl	8008ec8 <osSemaphoreDelete>
#endif
    return 1;
 8008c10:	2301      	movs	r3, #1
}
 8008c12:	0018      	movs	r0, r3
 8008c14:	46bd      	mov	sp, r7
 8008c16:	b002      	add	sp, #8
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8008c26:	23fa      	movs	r3, #250	@ 0xfa
 8008c28:	009a      	lsls	r2, r3, #2
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	0011      	movs	r1, r2
 8008c2e:	0018      	movs	r0, r3
 8008c30:	f000 f8ba 	bl	8008da8 <osSemaphoreAcquire>
 8008c34:	1e03      	subs	r3, r0, #0
 8008c36:	d101      	bne.n	8008c3c <ff_req_grant+0x22>
#endif

#endif
  {
    ret = 1;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
}
 8008c3e:	0018      	movs	r0, r3
 8008c40:	46bd      	mov	sp, r7
 8008c42:	b004      	add	sp, #16
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	0018      	movs	r0, r3
 8008c52:	f000 f8f9 	bl	8008e48 <osSemaphoreRelease>
#endif
}
 8008c56:	46c0      	nop			@ (mov r8, r8)
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b002      	add	sp, #8
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008c64:	4b05      	ldr	r3, [pc, #20]	@ (8008c7c <SysTick_Handler+0x1c>)
 8008c66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008c68:	f001 fa02 	bl	800a070 <xTaskGetSchedulerState>
 8008c6c:	0003      	movs	r3, r0
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d001      	beq.n	8008c76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008c72:	f001 fc29 	bl	800a4c8 <xPortSysTickHandler>
  }
}
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	e000e010 	.word	0xe000e010

08008c80 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	@ 0x28
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c90:	f3ef 8305 	mrs	r3, IPSR
 8008c94:	613b      	str	r3, [r7, #16]
  return(result);
 8008c96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d000      	beq.n	8008c9e <osSemaphoreNew+0x1e>
 8008c9c:	e07f      	b.n	8008d9e <osSemaphoreNew+0x11e>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d100      	bne.n	8008ca6 <osSemaphoreNew+0x26>
 8008ca4:	e07b      	b.n	8008d9e <osSemaphoreNew+0x11e>
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d900      	bls.n	8008cb0 <osSemaphoreNew+0x30>
 8008cae:	e076      	b.n	8008d9e <osSemaphoreNew+0x11e>
    mem = -1;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	425b      	negs	r3, r3
 8008cb4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d015      	beq.n	8008ce8 <osSemaphoreNew+0x68>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d006      	beq.n	8008cd2 <osSemaphoreNew+0x52>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b4f      	cmp	r3, #79	@ 0x4f
 8008cca:	d902      	bls.n	8008cd2 <osSemaphoreNew+0x52>
        mem = 1;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	61bb      	str	r3, [r7, #24]
 8008cd0:	e00c      	b.n	8008cec <osSemaphoreNew+0x6c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d108      	bne.n	8008cec <osSemaphoreNew+0x6c>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d104      	bne.n	8008cec <osSemaphoreNew+0x6c>
          mem = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61bb      	str	r3, [r7, #24]
 8008ce6:	e001      	b.n	8008cec <osSemaphoreNew+0x6c>
        }
      }
    }
    else {
      mem = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	d055      	beq.n	8008d9e <osSemaphoreNew+0x11e>
      if (max_count == 1U) {
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d12b      	bne.n	8008d50 <osSemaphoreNew+0xd0>
        if (mem == 1) {
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d10b      	bne.n	8008d16 <osSemaphoreNew+0x96>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	2203      	movs	r2, #3
 8008d04:	9200      	str	r2, [sp, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	2001      	movs	r0, #1
 8008d0c:	f000 f9f5 	bl	80090fa <xQueueGenericCreateStatic>
 8008d10:	0003      	movs	r3, r0
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	e006      	b.n	8008d24 <osSemaphoreNew+0xa4>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008d16:	2203      	movs	r2, #3
 8008d18:	2100      	movs	r1, #0
 8008d1a:	2001      	movs	r0, #1
 8008d1c:	f000 fa3e 	bl	800919c <xQueueGenericCreate>
 8008d20:	0003      	movs	r3, r0
 8008d22:	61fb      	str	r3, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d027      	beq.n	8008d7a <osSemaphoreNew+0xfa>
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d024      	beq.n	8008d7a <osSemaphoreNew+0xfa>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d30:	69f8      	ldr	r0, [r7, #28]
 8008d32:	2300      	movs	r3, #0
 8008d34:	2200      	movs	r2, #0
 8008d36:	2100      	movs	r1, #0
 8008d38:	f000 fad7 	bl	80092ea <xQueueGenericSend>
 8008d3c:	0003      	movs	r3, r0
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d01b      	beq.n	8008d7a <osSemaphoreNew+0xfa>
            vSemaphoreDelete (hSemaphore);
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	0018      	movs	r0, r3
 8008d46:	f000 fd43 	bl	80097d0 <vQueueDelete>
            hSemaphore = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	61fb      	str	r3, [r7, #28]
 8008d4e:	e014      	b.n	8008d7a <osSemaphoreNew+0xfa>
          }
        }
      }
      else {
        if (mem == 1) {
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d109      	bne.n	8008d6a <osSemaphoreNew+0xea>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	68b9      	ldr	r1, [r7, #8]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	0018      	movs	r0, r3
 8008d60:	f000 fa76 	bl	8009250 <xQueueCreateCountingSemaphoreStatic>
 8008d64:	0003      	movs	r3, r0
 8008d66:	61fb      	str	r3, [r7, #28]
 8008d68:	e007      	b.n	8008d7a <osSemaphoreNew+0xfa>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	0011      	movs	r1, r2
 8008d70:	0018      	movs	r0, r3
 8008d72:	f000 fa95 	bl	80092a0 <xQueueCreateCountingSemaphore>
 8008d76:	0003      	movs	r3, r0
 8008d78:	61fb      	str	r3, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00e      	beq.n	8008d9e <osSemaphoreNew+0x11e>
        if (attr != NULL) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <osSemaphoreNew+0x10e>
          name = attr->name;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	617b      	str	r3, [r7, #20]
 8008d8c:	e001      	b.n	8008d92 <osSemaphoreNew+0x112>
        } else {
          name = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	0011      	movs	r1, r2
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f000 fe69 	bl	8009a70 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008d9e:	69fb      	ldr	r3, [r7, #28]
}
 8008da0:	0018      	movs	r0, r3
 8008da2:	46bd      	mov	sp, r7
 8008da4:	b008      	add	sp, #32
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d103      	bne.n	8008dc8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008dc0:	2304      	movs	r3, #4
 8008dc2:	425b      	negs	r3, r3
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	e037      	b.n	8008e38 <osSemaphoreAcquire+0x90>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc8:	f3ef 8305 	mrs	r3, IPSR
 8008dcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dce:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d01e      	beq.n	8008e12 <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008dda:	2304      	movs	r3, #4
 8008ddc:	425b      	negs	r3, r3
 8008dde:	617b      	str	r3, [r7, #20]
 8008de0:	e02a      	b.n	8008e38 <osSemaphoreAcquire+0x90>
    }
    else {
      yield = pdFALSE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008de6:	2308      	movs	r3, #8
 8008de8:	18fa      	adds	r2, r7, r3
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	2100      	movs	r1, #0
 8008dee:	0018      	movs	r0, r3
 8008df0:	f000 fc89 	bl	8009706 <xQueueReceiveFromISR>
 8008df4:	0003      	movs	r3, r0
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d003      	beq.n	8008e02 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008dfa:	2303      	movs	r3, #3
 8008dfc:	425b      	negs	r3, r3
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e01a      	b.n	8008e38 <osSemaphoreAcquire+0x90>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d017      	beq.n	8008e38 <osSemaphoreAcquire+0x90>
 8008e08:	4b0e      	ldr	r3, [pc, #56]	@ (8008e44 <osSemaphoreAcquire+0x9c>)
 8008e0a:	2280      	movs	r2, #128	@ 0x80
 8008e0c:	0552      	lsls	r2, r2, #21
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e012      	b.n	8008e38 <osSemaphoreAcquire+0x90>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	0011      	movs	r1, r2
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f000 fb96 	bl	800954a <xQueueSemaphoreTake>
 8008e1e:	0003      	movs	r3, r0
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d009      	beq.n	8008e38 <osSemaphoreAcquire+0x90>
      if (timeout != 0U) {
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <osSemaphoreAcquire+0x8a>
        stat = osErrorTimeout;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	425b      	negs	r3, r3
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	e002      	b.n	8008e38 <osSemaphoreAcquire+0x90>
      } else {
        stat = osErrorResource;
 8008e32:	2303      	movs	r3, #3
 8008e34:	425b      	negs	r3, r3
 8008e36:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008e38:	697b      	ldr	r3, [r7, #20]
}
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	b006      	add	sp, #24
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	46c0      	nop			@ (mov r8, r8)
 8008e44:	e000ed04 	.word	0xe000ed04

08008e48 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d103      	bne.n	8008e66 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008e5e:	2304      	movs	r3, #4
 8008e60:	425b      	negs	r3, r3
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	e029      	b.n	8008eba <osSemaphoreRelease+0x72>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e66:	f3ef 8305 	mrs	r3, IPSR
 8008e6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d017      	beq.n	8008ea2 <osSemaphoreRelease+0x5a>
    yield = pdFALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e76:	2308      	movs	r3, #8
 8008e78:	18fa      	adds	r2, r7, r3
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	0011      	movs	r1, r2
 8008e7e:	0018      	movs	r0, r3
 8008e80:	f000 fafb 	bl	800947a <xQueueGiveFromISR>
 8008e84:	0003      	movs	r3, r0
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d003      	beq.n	8008e92 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	425b      	negs	r3, r3
 8008e8e:	617b      	str	r3, [r7, #20]
 8008e90:	e013      	b.n	8008eba <osSemaphoreRelease+0x72>
    } else {
      portYIELD_FROM_ISR (yield);
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d010      	beq.n	8008eba <osSemaphoreRelease+0x72>
 8008e98:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec4 <osSemaphoreRelease+0x7c>)
 8008e9a:	2280      	movs	r2, #128	@ 0x80
 8008e9c:	0552      	lsls	r2, r2, #21
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	e00b      	b.n	8008eba <osSemaphoreRelease+0x72>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ea2:	6938      	ldr	r0, [r7, #16]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	f000 fa1e 	bl	80092ea <xQueueGenericSend>
 8008eae:	0003      	movs	r3, r0
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d002      	beq.n	8008eba <osSemaphoreRelease+0x72>
      stat = osErrorResource;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	425b      	negs	r3, r3
 8008eb8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008eba:	697b      	ldr	r3, [r7, #20]
}
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b006      	add	sp, #24
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	e000ed04 	.word	0xe000ed04

08008ec8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ed4:	f3ef 8305 	mrs	r3, IPSR
 8008ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eda:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008ee0:	2306      	movs	r3, #6
 8008ee2:	425b      	negs	r3, r3
 8008ee4:	617b      	str	r3, [r7, #20]
 8008ee6:	e010      	b.n	8008f0a <osSemaphoreDelete+0x42>
  }
  else if (hSemaphore == NULL) {
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d103      	bne.n	8008ef6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008eee:	2304      	movs	r3, #4
 8008ef0:	425b      	negs	r3, r3
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	e009      	b.n	8008f0a <osSemaphoreDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	0018      	movs	r0, r3
 8008efa:	f000 fde1 	bl	8009ac0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008efe:	2300      	movs	r3, #0
 8008f00:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	0018      	movs	r0, r3
 8008f06:	f000 fc63 	bl	80097d0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008f0a:	697b      	ldr	r3, [r7, #20]
}
 8008f0c:	0018      	movs	r0, r3
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	b006      	add	sp, #24
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	001a      	movs	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4252      	negs	r2, r2
 8008f2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	3308      	adds	r3, #8
 8008f32:	001a      	movs	r2, r3
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3308      	adds	r3, #8
 8008f3c:	001a      	movs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f48:	46c0      	nop			@ (mov r8, r8)
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	b002      	add	sp, #8
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	601a      	str	r2, [r3, #0]
}
 8008f8c:	46c0      	nop			@ (mov r8, r8)
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	b004      	add	sp, #16
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	d103      	bne.n	8008fb2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	e00c      	b.n	8008fcc <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	e002      	b.n	8008fc0 <vListInsert+0x2c>
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	60fb      	str	r3, [r7, #12]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d2f6      	bcs.n	8008fba <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	601a      	str	r2, [r3, #0]
}
 8008ff8:	46c0      	nop			@ (mov r8, r8)
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	b004      	add	sp, #16
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	6892      	ldr	r2, [r2, #8]
 8009016:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6852      	ldr	r2, [r2, #4]
 8009020:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	429a      	cmp	r2, r3
 800902a:	d103      	bne.n	8009034 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689a      	ldr	r2, [r3, #8]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	1e5a      	subs	r2, r3, #1
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
}
 8009048:	0018      	movs	r0, r3
 800904a:	46bd      	mov	sp, r7
 800904c:	b004      	add	sp, #16
 800904e:	bd80      	pop	{r7, pc}

08009050 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d102      	bne.n	800906a <xQueueGenericReset+0x1a>
 8009064:	b672      	cpsid	i
 8009066:	46c0      	nop			@ (mov r8, r8)
 8009068:	e7fd      	b.n	8009066 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800906a:	f001 f9d1 	bl	800a410 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800907a:	434b      	muls	r3, r1
 800907c:	18d2      	adds	r2, r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009098:	1e59      	subs	r1, r3, #1
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909e:	434b      	muls	r3, r1
 80090a0:	18d2      	adds	r2, r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2244      	movs	r2, #68	@ 0x44
 80090aa:	21ff      	movs	r1, #255	@ 0xff
 80090ac:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2245      	movs	r2, #69	@ 0x45
 80090b2:	21ff      	movs	r1, #255	@ 0xff
 80090b4:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10d      	bne.n	80090d8 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d013      	beq.n	80090ec <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3310      	adds	r3, #16
 80090c8:	0018      	movs	r0, r3
 80090ca:	f000 fee5 	bl	8009e98 <xTaskRemoveFromEventList>
 80090ce:	1e03      	subs	r3, r0, #0
 80090d0:	d00c      	beq.n	80090ec <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090d2:	f001 f98d 	bl	800a3f0 <vPortYield>
 80090d6:	e009      	b.n	80090ec <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3310      	adds	r3, #16
 80090dc:	0018      	movs	r0, r3
 80090de:	f7ff ff19 	bl	8008f14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3324      	adds	r3, #36	@ 0x24
 80090e6:	0018      	movs	r0, r3
 80090e8:	f7ff ff14 	bl	8008f14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090ec:	f001 f9a2 	bl	800a434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090f0:	2301      	movs	r3, #1
}
 80090f2:	0018      	movs	r0, r3
 80090f4:	46bd      	mov	sp, r7
 80090f6:	b004      	add	sp, #16
 80090f8:	bd80      	pop	{r7, pc}

080090fa <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090fa:	b590      	push	{r4, r7, lr}
 80090fc:	b089      	sub	sp, #36	@ 0x24
 80090fe:	af02      	add	r7, sp, #8
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	60b9      	str	r1, [r7, #8]
 8009104:	607a      	str	r2, [r7, #4]
 8009106:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d102      	bne.n	8009114 <xQueueGenericCreateStatic+0x1a>
 800910e:	b672      	cpsid	i
 8009110:	46c0      	nop			@ (mov r8, r8)
 8009112:	e7fd      	b.n	8009110 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <xQueueGenericCreateStatic+0x26>
 800911a:	b672      	cpsid	i
 800911c:	46c0      	nop			@ (mov r8, r8)
 800911e:	e7fd      	b.n	800911c <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <xQueueGenericCreateStatic+0x32>
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d001      	beq.n	8009130 <xQueueGenericCreateStatic+0x36>
 800912c:	2301      	movs	r3, #1
 800912e:	e000      	b.n	8009132 <xQueueGenericCreateStatic+0x38>
 8009130:	2300      	movs	r3, #0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d102      	bne.n	800913c <xQueueGenericCreateStatic+0x42>
 8009136:	b672      	cpsid	i
 8009138:	46c0      	nop			@ (mov r8, r8)
 800913a:	e7fd      	b.n	8009138 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d102      	bne.n	8009148 <xQueueGenericCreateStatic+0x4e>
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <xQueueGenericCreateStatic+0x52>
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <xQueueGenericCreateStatic+0x54>
 800914c:	2300      	movs	r3, #0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <xQueueGenericCreateStatic+0x5e>
 8009152:	b672      	cpsid	i
 8009154:	46c0      	nop			@ (mov r8, r8)
 8009156:	e7fd      	b.n	8009154 <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009158:	2350      	movs	r3, #80	@ 0x50
 800915a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	2b50      	cmp	r3, #80	@ 0x50
 8009160:	d002      	beq.n	8009168 <xQueueGenericCreateStatic+0x6e>
 8009162:	b672      	cpsid	i
 8009164:	46c0      	nop			@ (mov r8, r8)
 8009166:	e7fd      	b.n	8009164 <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009168:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d00e      	beq.n	8009192 <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2246      	movs	r2, #70	@ 0x46
 8009178:	2101      	movs	r1, #1
 800917a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800917c:	2328      	movs	r3, #40	@ 0x28
 800917e:	18fb      	adds	r3, r7, r3
 8009180:	781c      	ldrb	r4, [r3, #0]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	68b9      	ldr	r1, [r7, #8]
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	0023      	movs	r3, r4
 800918e:	f000 f838 	bl	8009202 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009192:	697b      	ldr	r3, [r7, #20]
	}
 8009194:	0018      	movs	r0, r3
 8009196:	46bd      	mov	sp, r7
 8009198:	b007      	add	sp, #28
 800919a:	bd90      	pop	{r4, r7, pc}

0800919c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b08b      	sub	sp, #44	@ 0x2c
 80091a0:	af02      	add	r7, sp, #8
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	1dfb      	adds	r3, r7, #7
 80091a8:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <xQueueGenericCreate+0x1a>
 80091b0:	b672      	cpsid	i
 80091b2:	46c0      	nop			@ (mov r8, r8)
 80091b4:	e7fd      	b.n	80091b2 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	4353      	muls	r3, r2
 80091bc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	3350      	adds	r3, #80	@ 0x50
 80091c2:	0018      	movs	r0, r3
 80091c4:	f001 f99a 	bl	800a4fc <pvPortMalloc>
 80091c8:	0003      	movs	r3, r0
 80091ca:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d012      	beq.n	80091f8 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	3350      	adds	r3, #80	@ 0x50
 80091da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2246      	movs	r2, #70	@ 0x46
 80091e0:	2100      	movs	r1, #0
 80091e2:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091e4:	1dfb      	adds	r3, r7, #7
 80091e6:	781c      	ldrb	r4, [r3, #0]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	68b9      	ldr	r1, [r7, #8]
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	69bb      	ldr	r3, [r7, #24]
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	0023      	movs	r3, r4
 80091f4:	f000 f805 	bl	8009202 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091f8:	69bb      	ldr	r3, [r7, #24]
	}
 80091fa:	0018      	movs	r0, r3
 80091fc:	46bd      	mov	sp, r7
 80091fe:	b009      	add	sp, #36	@ 0x24
 8009200:	bd90      	pop	{r4, r7, pc}

08009202 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	60f8      	str	r0, [r7, #12]
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	001a      	movs	r2, r3
 8009210:	1cfb      	adds	r3, r7, #3
 8009212:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	69ba      	ldr	r2, [r7, #24]
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	e002      	b.n	8009228 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009228:	69bb      	ldr	r3, [r7, #24]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	2101      	movs	r1, #1
 8009238:	0018      	movs	r0, r3
 800923a:	f7ff ff09 	bl	8009050 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	1cfa      	adds	r2, r7, #3
 8009242:	214c      	movs	r1, #76	@ 0x4c
 8009244:	7812      	ldrb	r2, [r2, #0]
 8009246:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009248:	46c0      	nop			@ (mov r8, r8)
 800924a:	46bd      	mov	sp, r7
 800924c:	b004      	add	sp, #16
 800924e:	bd80      	pop	{r7, pc}

08009250 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af02      	add	r7, sp, #8
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d102      	bne.n	8009268 <xQueueCreateCountingSemaphoreStatic+0x18>
 8009262:	b672      	cpsid	i
 8009264:	46c0      	nop			@ (mov r8, r8)
 8009266:	e7fd      	b.n	8009264 <xQueueCreateCountingSemaphoreStatic+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	429a      	cmp	r2, r3
 800926e:	d902      	bls.n	8009276 <xQueueCreateCountingSemaphoreStatic+0x26>
 8009270:	b672      	cpsid	i
 8009272:	46c0      	nop			@ (mov r8, r8)
 8009274:	e7fd      	b.n	8009272 <xQueueCreateCountingSemaphoreStatic+0x22>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	2202      	movs	r2, #2
 800927c:	9200      	str	r2, [sp, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	2100      	movs	r1, #0
 8009282:	f7ff ff3a 	bl	80090fa <xQueueGenericCreateStatic>
 8009286:	0003      	movs	r3, r0
 8009288:	617b      	str	r3, [r7, #20]

		if( xHandle != NULL )
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <xQueueCreateCountingSemaphoreStatic+0x46>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	68ba      	ldr	r2, [r7, #8]
 8009294:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009296:	697b      	ldr	r3, [r7, #20]
	}
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	b006      	add	sp, #24
 800929e:	bd80      	pop	{r7, pc}

080092a0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <xQueueCreateCountingSemaphore+0x16>
 80092b0:	b672      	cpsid	i
 80092b2:	46c0      	nop			@ (mov r8, r8)
 80092b4:	e7fd      	b.n	80092b2 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d902      	bls.n	80092c4 <xQueueCreateCountingSemaphore+0x24>
 80092be:	b672      	cpsid	i
 80092c0:	46c0      	nop			@ (mov r8, r8)
 80092c2:	e7fd      	b.n	80092c0 <xQueueCreateCountingSemaphore+0x20>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2202      	movs	r2, #2
 80092c8:	2100      	movs	r1, #0
 80092ca:	0018      	movs	r0, r3
 80092cc:	f7ff ff66 	bl	800919c <xQueueGenericCreate>
 80092d0:	0003      	movs	r3, r0
 80092d2:	60fb      	str	r3, [r7, #12]

		if( xHandle != NULL )
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d002      	beq.n	80092e0 <xQueueCreateCountingSemaphore+0x40>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	683a      	ldr	r2, [r7, #0]
 80092de:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80092e0:	68fb      	ldr	r3, [r7, #12]
	}
 80092e2:	0018      	movs	r0, r3
 80092e4:	46bd      	mov	sp, r7
 80092e6:	b004      	add	sp, #16
 80092e8:	bd80      	pop	{r7, pc}

080092ea <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b08a      	sub	sp, #40	@ 0x28
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	60f8      	str	r0, [r7, #12]
 80092f2:	60b9      	str	r1, [r7, #8]
 80092f4:	607a      	str	r2, [r7, #4]
 80092f6:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092f8:	2300      	movs	r3, #0
 80092fa:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d102      	bne.n	800930c <xQueueGenericSend+0x22>
 8009306:	b672      	cpsid	i
 8009308:	46c0      	nop			@ (mov r8, r8)
 800930a:	e7fd      	b.n	8009308 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d103      	bne.n	800931a <xQueueGenericSend+0x30>
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <xQueueGenericSend+0x34>
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <xQueueGenericSend+0x36>
 800931e:	2300      	movs	r3, #0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d102      	bne.n	800932a <xQueueGenericSend+0x40>
 8009324:	b672      	cpsid	i
 8009326:	46c0      	nop			@ (mov r8, r8)
 8009328:	e7fd      	b.n	8009326 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b02      	cmp	r3, #2
 800932e:	d103      	bne.n	8009338 <xQueueGenericSend+0x4e>
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009334:	2b01      	cmp	r3, #1
 8009336:	d101      	bne.n	800933c <xQueueGenericSend+0x52>
 8009338:	2301      	movs	r3, #1
 800933a:	e000      	b.n	800933e <xQueueGenericSend+0x54>
 800933c:	2300      	movs	r3, #0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d102      	bne.n	8009348 <xQueueGenericSend+0x5e>
 8009342:	b672      	cpsid	i
 8009344:	46c0      	nop			@ (mov r8, r8)
 8009346:	e7fd      	b.n	8009344 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009348:	f000 fe92 	bl	800a070 <xTaskGetSchedulerState>
 800934c:	1e03      	subs	r3, r0, #0
 800934e:	d102      	bne.n	8009356 <xQueueGenericSend+0x6c>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <xQueueGenericSend+0x70>
 8009356:	2301      	movs	r3, #1
 8009358:	e000      	b.n	800935c <xQueueGenericSend+0x72>
 800935a:	2300      	movs	r3, #0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d102      	bne.n	8009366 <xQueueGenericSend+0x7c>
 8009360:	b672      	cpsid	i
 8009362:	46c0      	nop			@ (mov r8, r8)
 8009364:	e7fd      	b.n	8009362 <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009366:	f001 f853 	bl	800a410 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800936e:	6a3b      	ldr	r3, [r7, #32]
 8009370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009372:	429a      	cmp	r2, r3
 8009374:	d302      	bcc.n	800937c <xQueueGenericSend+0x92>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b02      	cmp	r3, #2
 800937a:	d11e      	bne.n	80093ba <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	68b9      	ldr	r1, [r7, #8]
 8009380:	6a3b      	ldr	r3, [r7, #32]
 8009382:	0018      	movs	r0, r3
 8009384:	f000 fa57 	bl	8009836 <prvCopyDataToQueue>
 8009388:	0003      	movs	r3, r0
 800938a:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009390:	2b00      	cmp	r3, #0
 8009392:	d009      	beq.n	80093a8 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009394:	6a3b      	ldr	r3, [r7, #32]
 8009396:	3324      	adds	r3, #36	@ 0x24
 8009398:	0018      	movs	r0, r3
 800939a:	f000 fd7d 	bl	8009e98 <xTaskRemoveFromEventList>
 800939e:	1e03      	subs	r3, r0, #0
 80093a0:	d007      	beq.n	80093b2 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80093a2:	f001 f825 	bl	800a3f0 <vPortYield>
 80093a6:	e004      	b.n	80093b2 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80093ae:	f001 f81f 	bl	800a3f0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80093b2:	f001 f83f 	bl	800a434 <vPortExitCritical>
				return pdPASS;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e05b      	b.n	8009472 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d103      	bne.n	80093c8 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093c0:	f001 f838 	bl	800a434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	e054      	b.n	8009472 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d106      	bne.n	80093dc <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093ce:	2314      	movs	r3, #20
 80093d0:	18fb      	adds	r3, r7, r3
 80093d2:	0018      	movs	r0, r3
 80093d4:	f000 fdbe 	bl	8009f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093d8:	2301      	movs	r3, #1
 80093da:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093dc:	f001 f82a 	bl	800a434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093e0:	f000 fb98 	bl	8009b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093e4:	f001 f814 	bl	800a410 <vPortEnterCritical>
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	2244      	movs	r2, #68	@ 0x44
 80093ec:	5c9b      	ldrb	r3, [r3, r2]
 80093ee:	b25b      	sxtb	r3, r3
 80093f0:	3301      	adds	r3, #1
 80093f2:	d103      	bne.n	80093fc <xQueueGenericSend+0x112>
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	2244      	movs	r2, #68	@ 0x44
 80093f8:	2100      	movs	r1, #0
 80093fa:	5499      	strb	r1, [r3, r2]
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	2245      	movs	r2, #69	@ 0x45
 8009400:	5c9b      	ldrb	r3, [r3, r2]
 8009402:	b25b      	sxtb	r3, r3
 8009404:	3301      	adds	r3, #1
 8009406:	d103      	bne.n	8009410 <xQueueGenericSend+0x126>
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	2245      	movs	r2, #69	@ 0x45
 800940c:	2100      	movs	r1, #0
 800940e:	5499      	strb	r1, [r3, r2]
 8009410:	f001 f810 	bl	800a434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009414:	1d3a      	adds	r2, r7, #4
 8009416:	2314      	movs	r3, #20
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	0011      	movs	r1, r2
 800941c:	0018      	movs	r0, r3
 800941e:	f000 fdad 	bl	8009f7c <xTaskCheckForTimeOut>
 8009422:	1e03      	subs	r3, r0, #0
 8009424:	d11e      	bne.n	8009464 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	0018      	movs	r0, r3
 800942a:	f000 fb09 	bl	8009a40 <prvIsQueueFull>
 800942e:	1e03      	subs	r3, r0, #0
 8009430:	d011      	beq.n	8009456 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009432:	6a3b      	ldr	r3, [r7, #32]
 8009434:	3310      	adds	r3, #16
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	0011      	movs	r1, r2
 800943a:	0018      	movs	r0, r3
 800943c:	f000 fd0c 	bl	8009e58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	0018      	movs	r0, r3
 8009444:	f000 fa88 	bl	8009958 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009448:	f000 fb70 	bl	8009b2c <xTaskResumeAll>
 800944c:	1e03      	subs	r3, r0, #0
 800944e:	d18a      	bne.n	8009366 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8009450:	f000 ffce 	bl	800a3f0 <vPortYield>
 8009454:	e787      	b.n	8009366 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009456:	6a3b      	ldr	r3, [r7, #32]
 8009458:	0018      	movs	r0, r3
 800945a:	f000 fa7d 	bl	8009958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800945e:	f000 fb65 	bl	8009b2c <xTaskResumeAll>
 8009462:	e780      	b.n	8009366 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	0018      	movs	r0, r3
 8009468:	f000 fa76 	bl	8009958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800946c:	f000 fb5e 	bl	8009b2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009470:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009472:	0018      	movs	r0, r3
 8009474:	46bd      	mov	sp, r7
 8009476:	b00a      	add	sp, #40	@ 0x28
 8009478:	bd80      	pop	{r7, pc}

0800947a <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b088      	sub	sp, #32
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d102      	bne.n	8009494 <xQueueGiveFromISR+0x1a>
 800948e:	b672      	cpsid	i
 8009490:	46c0      	nop			@ (mov r8, r8)
 8009492:	e7fd      	b.n	8009490 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	d002      	beq.n	80094a2 <xQueueGiveFromISR+0x28>
 800949c:	b672      	cpsid	i
 800949e:	46c0      	nop			@ (mov r8, r8)
 80094a0:	e7fd      	b.n	800949e <xQueueGiveFromISR+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d103      	bne.n	80094b2 <xQueueGiveFromISR+0x38>
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <xQueueGiveFromISR+0x3c>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e000      	b.n	80094b8 <xQueueGiveFromISR+0x3e>
 80094b6:	2300      	movs	r3, #0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d102      	bne.n	80094c2 <xQueueGiveFromISR+0x48>
 80094bc:	b672      	cpsid	i
 80094be:	46c0      	nop			@ (mov r8, r8)
 80094c0:	e7fd      	b.n	80094be <xQueueGiveFromISR+0x44>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094c2:	f000 ffcf 	bl	800a464 <ulSetInterruptMaskFromISR>
 80094c6:	0003      	movs	r3, r0
 80094c8:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ce:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d22c      	bcs.n	8009534 <xQueueGiveFromISR+0xba>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094da:	200f      	movs	r0, #15
 80094dc:	183b      	adds	r3, r7, r0
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	2145      	movs	r1, #69	@ 0x45
 80094e2:	5c52      	ldrb	r2, [r2, r1]
 80094e4:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094ee:	183b      	adds	r3, r7, r0
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	b25b      	sxtb	r3, r3
 80094f4:	3301      	adds	r3, #1
 80094f6:	d111      	bne.n	800951c <xQueueGiveFromISR+0xa2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d016      	beq.n	800952e <xQueueGiveFromISR+0xb4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	3324      	adds	r3, #36	@ 0x24
 8009504:	0018      	movs	r0, r3
 8009506:	f000 fcc7 	bl	8009e98 <xTaskRemoveFromEventList>
 800950a:	1e03      	subs	r3, r0, #0
 800950c:	d00f      	beq.n	800952e <xQueueGiveFromISR+0xb4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00c      	beq.n	800952e <xQueueGiveFromISR+0xb4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2201      	movs	r2, #1
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e008      	b.n	800952e <xQueueGiveFromISR+0xb4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800951c:	230f      	movs	r3, #15
 800951e:	18fb      	adds	r3, r7, r3
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	3301      	adds	r3, #1
 8009524:	b2db      	uxtb	r3, r3
 8009526:	b259      	sxtb	r1, r3
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	2245      	movs	r2, #69	@ 0x45
 800952c:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800952e:	2301      	movs	r3, #1
 8009530:	61fb      	str	r3, [r7, #28]
 8009532:	e001      	b.n	8009538 <xQueueGiveFromISR+0xbe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009534:	2300      	movs	r3, #0
 8009536:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	0018      	movs	r0, r3
 800953c:	f000 ff98 	bl	800a470 <vClearInterruptMaskFromISR>

	return xReturn;
 8009540:	69fb      	ldr	r3, [r7, #28]
}
 8009542:	0018      	movs	r0, r3
 8009544:	46bd      	mov	sp, r7
 8009546:	b008      	add	sp, #32
 8009548:	bd80      	pop	{r7, pc}

0800954a <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b08a      	sub	sp, #40	@ 0x28
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009554:	2300      	movs	r3, #0
 8009556:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800955c:	2300      	movs	r3, #0
 800955e:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <xQueueSemaphoreTake+0x22>
 8009566:	b672      	cpsid	i
 8009568:	46c0      	nop			@ (mov r8, r8)
 800956a:	e7fd      	b.n	8009568 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <xQueueSemaphoreTake+0x30>
 8009574:	b672      	cpsid	i
 8009576:	46c0      	nop			@ (mov r8, r8)
 8009578:	e7fd      	b.n	8009576 <xQueueSemaphoreTake+0x2c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800957a:	f000 fd79 	bl	800a070 <xTaskGetSchedulerState>
 800957e:	1e03      	subs	r3, r0, #0
 8009580:	d102      	bne.n	8009588 <xQueueSemaphoreTake+0x3e>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <xQueueSemaphoreTake+0x42>
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <xQueueSemaphoreTake+0x44>
 800958c:	2300      	movs	r3, #0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <xQueueSemaphoreTake+0x4e>
 8009592:	b672      	cpsid	i
 8009594:	46c0      	nop			@ (mov r8, r8)
 8009596:	e7fd      	b.n	8009594 <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009598:	f000 ff3a 	bl	800a410 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a0:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01d      	beq.n	80095e4 <xQueueSemaphoreTake+0x9a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	1e5a      	subs	r2, r3, #1
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d104      	bne.n	80095c2 <xQueueSemaphoreTake+0x78>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80095b8:	f000 feae 	bl	800a318 <pvTaskIncrementMutexHeldCount>
 80095bc:	0002      	movs	r2, r0
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d008      	beq.n	80095dc <xQueueSemaphoreTake+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	3310      	adds	r3, #16
 80095ce:	0018      	movs	r0, r3
 80095d0:	f000 fc62 	bl	8009e98 <xTaskRemoveFromEventList>
 80095d4:	1e03      	subs	r3, r0, #0
 80095d6:	d001      	beq.n	80095dc <xQueueSemaphoreTake+0x92>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095d8:	f000 ff0a 	bl	800a3f0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095dc:	f000 ff2a 	bl	800a434 <vPortExitCritical>
				return pdPASS;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e08c      	b.n	80096fe <xQueueSemaphoreTake+0x1b4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d109      	bne.n	80095fe <xQueueSemaphoreTake+0xb4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80095ea:	6a3b      	ldr	r3, [r7, #32]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <xQueueSemaphoreTake+0xac>
 80095f0:	b672      	cpsid	i
 80095f2:	46c0      	nop			@ (mov r8, r8)
 80095f4:	e7fd      	b.n	80095f2 <xQueueSemaphoreTake+0xa8>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80095f6:	f000 ff1d 	bl	800a434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095fa:	2300      	movs	r3, #0
 80095fc:	e07f      	b.n	80096fe <xQueueSemaphoreTake+0x1b4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009600:	2b00      	cmp	r3, #0
 8009602:	d106      	bne.n	8009612 <xQueueSemaphoreTake+0xc8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009604:	230c      	movs	r3, #12
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	0018      	movs	r0, r3
 800960a:	f000 fca3 	bl	8009f54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800960e:	2301      	movs	r3, #1
 8009610:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009612:	f000 ff0f 	bl	800a434 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009616:	f000 fa7d 	bl	8009b14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800961a:	f000 fef9 	bl	800a410 <vPortEnterCritical>
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	2244      	movs	r2, #68	@ 0x44
 8009622:	5c9b      	ldrb	r3, [r3, r2]
 8009624:	b25b      	sxtb	r3, r3
 8009626:	3301      	adds	r3, #1
 8009628:	d103      	bne.n	8009632 <xQueueSemaphoreTake+0xe8>
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	2244      	movs	r2, #68	@ 0x44
 800962e:	2100      	movs	r1, #0
 8009630:	5499      	strb	r1, [r3, r2]
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	2245      	movs	r2, #69	@ 0x45
 8009636:	5c9b      	ldrb	r3, [r3, r2]
 8009638:	b25b      	sxtb	r3, r3
 800963a:	3301      	adds	r3, #1
 800963c:	d103      	bne.n	8009646 <xQueueSemaphoreTake+0xfc>
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	2245      	movs	r2, #69	@ 0x45
 8009642:	2100      	movs	r1, #0
 8009644:	5499      	strb	r1, [r3, r2]
 8009646:	f000 fef5 	bl	800a434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800964a:	003a      	movs	r2, r7
 800964c:	230c      	movs	r3, #12
 800964e:	18fb      	adds	r3, r7, r3
 8009650:	0011      	movs	r1, r2
 8009652:	0018      	movs	r0, r3
 8009654:	f000 fc92 	bl	8009f7c <xTaskCheckForTimeOut>
 8009658:	1e03      	subs	r3, r0, #0
 800965a:	d12e      	bne.n	80096ba <xQueueSemaphoreTake+0x170>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	0018      	movs	r0, r3
 8009660:	f000 f9d8 	bl	8009a14 <prvIsQueueEmpty>
 8009664:	1e03      	subs	r3, r0, #0
 8009666:	d021      	beq.n	80096ac <xQueueSemaphoreTake+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d10a      	bne.n	8009686 <xQueueSemaphoreTake+0x13c>
					{
						taskENTER_CRITICAL();
 8009670:	f000 fece 	bl	800a410 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	0018      	movs	r0, r3
 800967a:	f000 fd15 	bl	800a0a8 <xTaskPriorityInherit>
 800967e:	0003      	movs	r3, r0
 8009680:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8009682:	f000 fed7 	bl	800a434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	3324      	adds	r3, #36	@ 0x24
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	0011      	movs	r1, r2
 800968e:	0018      	movs	r0, r3
 8009690:	f000 fbe2 	bl	8009e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	0018      	movs	r0, r3
 8009698:	f000 f95e 	bl	8009958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800969c:	f000 fa46 	bl	8009b2c <xTaskResumeAll>
 80096a0:	1e03      	subs	r3, r0, #0
 80096a2:	d000      	beq.n	80096a6 <xQueueSemaphoreTake+0x15c>
 80096a4:	e778      	b.n	8009598 <xQueueSemaphoreTake+0x4e>
				{
					portYIELD_WITHIN_API();
 80096a6:	f000 fea3 	bl	800a3f0 <vPortYield>
 80096aa:	e775      	b.n	8009598 <xQueueSemaphoreTake+0x4e>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	0018      	movs	r0, r3
 80096b0:	f000 f952 	bl	8009958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096b4:	f000 fa3a 	bl	8009b2c <xTaskResumeAll>
 80096b8:	e76e      	b.n	8009598 <xQueueSemaphoreTake+0x4e>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	0018      	movs	r0, r3
 80096be:	f000 f94b 	bl	8009958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096c2:	f000 fa33 	bl	8009b2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	0018      	movs	r0, r3
 80096ca:	f000 f9a3 	bl	8009a14 <prvIsQueueEmpty>
 80096ce:	1e03      	subs	r3, r0, #0
 80096d0:	d100      	bne.n	80096d4 <xQueueSemaphoreTake+0x18a>
 80096d2:	e761      	b.n	8009598 <xQueueSemaphoreTake+0x4e>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d010      	beq.n	80096fc <xQueueSemaphoreTake+0x1b2>
					{
						taskENTER_CRITICAL();
 80096da:	f000 fe99 	bl	800a410 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	0018      	movs	r0, r3
 80096e2:	f000 f892 	bl	800980a <prvGetDisinheritPriorityAfterTimeout>
 80096e6:	0003      	movs	r3, r0
 80096e8:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80096ea:	69fb      	ldr	r3, [r7, #28]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	0011      	movs	r1, r2
 80096f2:	0018      	movs	r0, r3
 80096f4:	f000 fd9e 	bl	800a234 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80096f8:	f000 fe9c 	bl	800a434 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096fe:	0018      	movs	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	b00a      	add	sp, #40	@ 0x28
 8009704:	bd80      	pop	{r7, pc}

08009706 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009706:	b590      	push	{r4, r7, lr}
 8009708:	b08b      	sub	sp, #44	@ 0x2c
 800970a:	af00      	add	r7, sp, #0
 800970c:	60f8      	str	r0, [r7, #12]
 800970e:	60b9      	str	r1, [r7, #8]
 8009710:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d102      	bne.n	8009722 <xQueueReceiveFromISR+0x1c>
 800971c:	b672      	cpsid	i
 800971e:	46c0      	nop			@ (mov r8, r8)
 8009720:	e7fd      	b.n	800971e <xQueueReceiveFromISR+0x18>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d103      	bne.n	8009730 <xQueueReceiveFromISR+0x2a>
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <xQueueReceiveFromISR+0x2e>
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <xQueueReceiveFromISR+0x30>
 8009734:	2300      	movs	r3, #0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d102      	bne.n	8009740 <xQueueReceiveFromISR+0x3a>
 800973a:	b672      	cpsid	i
 800973c:	46c0      	nop			@ (mov r8, r8)
 800973e:	e7fd      	b.n	800973c <xQueueReceiveFromISR+0x36>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009740:	f000 fe90 	bl	800a464 <ulSetInterruptMaskFromISR>
 8009744:	0003      	movs	r3, r0
 8009746:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009748:	6a3b      	ldr	r3, [r7, #32]
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d032      	beq.n	80097ba <xQueueReceiveFromISR+0xb4>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009754:	2417      	movs	r4, #23
 8009756:	193b      	adds	r3, r7, r4
 8009758:	6a3a      	ldr	r2, [r7, #32]
 800975a:	2144      	movs	r1, #68	@ 0x44
 800975c:	5c52      	ldrb	r2, [r2, r1]
 800975e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	0011      	movs	r1, r2
 8009766:	0018      	movs	r0, r3
 8009768:	f000 f8d0 	bl	800990c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	1e5a      	subs	r2, r3, #1
 8009770:	6a3b      	ldr	r3, [r7, #32]
 8009772:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009774:	193b      	adds	r3, r7, r4
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	b25b      	sxtb	r3, r3
 800977a:	3301      	adds	r3, #1
 800977c:	d111      	bne.n	80097a2 <xQueueReceiveFromISR+0x9c>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d016      	beq.n	80097b4 <xQueueReceiveFromISR+0xae>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	3310      	adds	r3, #16
 800978a:	0018      	movs	r0, r3
 800978c:	f000 fb84 	bl	8009e98 <xTaskRemoveFromEventList>
 8009790:	1e03      	subs	r3, r0, #0
 8009792:	d00f      	beq.n	80097b4 <xQueueReceiveFromISR+0xae>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00c      	beq.n	80097b4 <xQueueReceiveFromISR+0xae>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	601a      	str	r2, [r3, #0]
 80097a0:	e008      	b.n	80097b4 <xQueueReceiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80097a2:	2317      	movs	r3, #23
 80097a4:	18fb      	adds	r3, r7, r3
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	3301      	adds	r3, #1
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	b259      	sxtb	r1, r3
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	2244      	movs	r2, #68	@ 0x44
 80097b2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80097b4:	2301      	movs	r3, #1
 80097b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80097b8:	e001      	b.n	80097be <xQueueReceiveFromISR+0xb8>
		}
		else
		{
			xReturn = pdFAIL;
 80097ba:	2300      	movs	r3, #0
 80097bc:	627b      	str	r3, [r7, #36]	@ 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	0018      	movs	r0, r3
 80097c2:	f000 fe55 	bl	800a470 <vClearInterruptMaskFromISR>

	return xReturn;
 80097c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097c8:	0018      	movs	r0, r3
 80097ca:	46bd      	mov	sp, r7
 80097cc:	b00b      	add	sp, #44	@ 0x2c
 80097ce:	bd90      	pop	{r4, r7, pc}

080097d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d102      	bne.n	80097e8 <vQueueDelete+0x18>
 80097e2:	b672      	cpsid	i
 80097e4:	46c0      	nop			@ (mov r8, r8)
 80097e6:	e7fd      	b.n	80097e4 <vQueueDelete+0x14>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	0018      	movs	r0, r3
 80097ec:	f000 f968 	bl	8009ac0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2246      	movs	r2, #70	@ 0x46
 80097f4:	5c9b      	ldrb	r3, [r3, r2]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d103      	bne.n	8009802 <vQueueDelete+0x32>
		{
			vPortFree( pxQueue );
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	0018      	movs	r0, r3
 80097fe:	f000 ff2d 	bl	800a65c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009802:	46c0      	nop			@ (mov r8, r8)
 8009804:	46bd      	mov	sp, r7
 8009806:	b004      	add	sp, #16
 8009808:	bd80      	pop	{r7, pc}

0800980a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009816:	2b00      	cmp	r3, #0
 8009818:	d006      	beq.n	8009828 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2238      	movs	r2, #56	@ 0x38
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	e001      	b.n	800982c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009828:	2300      	movs	r3, #0
 800982a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800982c:	68fb      	ldr	r3, [r7, #12]
	}
 800982e:	0018      	movs	r0, r3
 8009830:	46bd      	mov	sp, r7
 8009832:	b004      	add	sp, #16
 8009834:	bd80      	pop	{r7, pc}

08009836 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b086      	sub	sp, #24
 800983a:	af00      	add	r7, sp, #0
 800983c:	60f8      	str	r0, [r7, #12]
 800983e:	60b9      	str	r1, [r7, #8]
 8009840:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009842:	2300      	movs	r3, #0
 8009844:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800984a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10e      	bne.n	8009872 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d14e      	bne.n	80098fa <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	0018      	movs	r0, r3
 8009862:	f000 fc89 	bl	800a178 <xTaskPriorityDisinherit>
 8009866:	0003      	movs	r3, r0
 8009868:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	609a      	str	r2, [r3, #8]
 8009870:	e043      	b.n	80098fa <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d119      	bne.n	80098ac <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6858      	ldr	r0, [r3, #4]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	0019      	movs	r1, r3
 8009884:	f001 f846 	bl	800a914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009890:	18d2      	adds	r2, r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d32b      	bcc.n	80098fa <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681a      	ldr	r2, [r3, #0]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	605a      	str	r2, [r3, #4]
 80098aa:	e026      	b.n	80098fa <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	68d8      	ldr	r0, [r3, #12]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	0019      	movs	r1, r3
 80098b8:	f001 f82c 	bl	800a914 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	68da      	ldr	r2, [r3, #12]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098c4:	425b      	negs	r3, r3
 80098c6:	18d2      	adds	r2, r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68da      	ldr	r2, [r3, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d207      	bcs.n	80098e8 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e0:	425b      	negs	r3, r3
 80098e2:	18d2      	adds	r2, r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d105      	bne.n	80098fa <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009902:	697b      	ldr	r3, [r7, #20]
}
 8009904:	0018      	movs	r0, r3
 8009906:	46bd      	mov	sp, r7
 8009908:	b006      	add	sp, #24
 800990a:	bd80      	pop	{r7, pc}

0800990c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d018      	beq.n	8009950 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009926:	18d2      	adds	r2, r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	68da      	ldr	r2, [r3, #12]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	429a      	cmp	r2, r3
 8009936:	d303      	bcc.n	8009940 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	68d9      	ldr	r1, [r3, #12]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	0018      	movs	r0, r3
 800994c:	f000 ffe2 	bl	800a914 <memcpy>
	}
}
 8009950:	46c0      	nop			@ (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b002      	add	sp, #8
 8009956:	bd80      	pop	{r7, pc}

08009958 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009960:	f000 fd56 	bl	800a410 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009964:	230f      	movs	r3, #15
 8009966:	18fb      	adds	r3, r7, r3
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	2145      	movs	r1, #69	@ 0x45
 800996c:	5c52      	ldrb	r2, [r2, r1]
 800996e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009970:	e013      	b.n	800999a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009976:	2b00      	cmp	r3, #0
 8009978:	d016      	beq.n	80099a8 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3324      	adds	r3, #36	@ 0x24
 800997e:	0018      	movs	r0, r3
 8009980:	f000 fa8a 	bl	8009e98 <xTaskRemoveFromEventList>
 8009984:	1e03      	subs	r3, r0, #0
 8009986:	d001      	beq.n	800998c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009988:	f000 fb4a 	bl	800a020 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800998c:	210f      	movs	r1, #15
 800998e:	187b      	adds	r3, r7, r1
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	3b01      	subs	r3, #1
 8009994:	b2da      	uxtb	r2, r3
 8009996:	187b      	adds	r3, r7, r1
 8009998:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800999a:	230f      	movs	r3, #15
 800999c:	18fb      	adds	r3, r7, r3
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	b25b      	sxtb	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dce5      	bgt.n	8009972 <prvUnlockQueue+0x1a>
 80099a6:	e000      	b.n	80099aa <prvUnlockQueue+0x52>
					break;
 80099a8:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2245      	movs	r2, #69	@ 0x45
 80099ae:	21ff      	movs	r1, #255	@ 0xff
 80099b0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80099b2:	f000 fd3f 	bl	800a434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099b6:	f000 fd2b 	bl	800a410 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099ba:	230e      	movs	r3, #14
 80099bc:	18fb      	adds	r3, r7, r3
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	2144      	movs	r1, #68	@ 0x44
 80099c2:	5c52      	ldrb	r2, [r2, r1]
 80099c4:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099c6:	e013      	b.n	80099f0 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d016      	beq.n	80099fe <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	3310      	adds	r3, #16
 80099d4:	0018      	movs	r0, r3
 80099d6:	f000 fa5f 	bl	8009e98 <xTaskRemoveFromEventList>
 80099da:	1e03      	subs	r3, r0, #0
 80099dc:	d001      	beq.n	80099e2 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80099de:	f000 fb1f 	bl	800a020 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099e2:	210e      	movs	r1, #14
 80099e4:	187b      	adds	r3, r7, r1
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	187b      	adds	r3, r7, r1
 80099ee:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099f0:	230e      	movs	r3, #14
 80099f2:	18fb      	adds	r3, r7, r3
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	b25b      	sxtb	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dce5      	bgt.n	80099c8 <prvUnlockQueue+0x70>
 80099fc:	e000      	b.n	8009a00 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80099fe:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2244      	movs	r2, #68	@ 0x44
 8009a04:	21ff      	movs	r1, #255	@ 0xff
 8009a06:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009a08:	f000 fd14 	bl	800a434 <vPortExitCritical>
}
 8009a0c:	46c0      	nop			@ (mov r8, r8)
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	b004      	add	sp, #16
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a1c:	f000 fcf8 	bl	800a410 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d102      	bne.n	8009a2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	60fb      	str	r3, [r7, #12]
 8009a2c:	e001      	b.n	8009a32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a32:	f000 fcff 	bl	800a434 <vPortExitCritical>

	return xReturn;
 8009a36:	68fb      	ldr	r3, [r7, #12]
}
 8009a38:	0018      	movs	r0, r3
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	b004      	add	sp, #16
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a48:	f000 fce2 	bl	800a410 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d102      	bne.n	8009a5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	e001      	b.n	8009a62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a62:	f000 fce7 	bl	800a434 <vPortExitCritical>

	return xReturn;
 8009a66:	68fb      	ldr	r3, [r7, #12]
}
 8009a68:	0018      	movs	r0, r3
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	b004      	add	sp, #16
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	60fb      	str	r3, [r7, #12]
 8009a7e:	e015      	b.n	8009aac <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a80:	4b0e      	ldr	r3, [pc, #56]	@ (8009abc <vQueueAddToRegistry+0x4c>)
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	00d2      	lsls	r2, r2, #3
 8009a86:	58d3      	ldr	r3, [r2, r3]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10c      	bne.n	8009aa6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009abc <vQueueAddToRegistry+0x4c>)
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	00d2      	lsls	r2, r2, #3
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a96:	4a09      	ldr	r2, [pc, #36]	@ (8009abc <vQueueAddToRegistry+0x4c>)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	18d3      	adds	r3, r2, r3
 8009a9e:	3304      	adds	r3, #4
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009aa4:	e006      	b.n	8009ab4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b07      	cmp	r3, #7
 8009ab0:	d9e6      	bls.n	8009a80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ab2:	46c0      	nop			@ (mov r8, r8)
 8009ab4:	46c0      	nop			@ (mov r8, r8)
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	b004      	add	sp, #16
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000b5c 	.word	0x20000b5c

08009ac0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ac8:	2300      	movs	r3, #0
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e018      	b.n	8009b00 <vQueueUnregisterQueue+0x40>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009ace:	4a10      	ldr	r2, [pc, #64]	@ (8009b10 <vQueueUnregisterQueue+0x50>)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	00db      	lsls	r3, r3, #3
 8009ad4:	18d3      	adds	r3, r2, r3
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d10c      	bne.n	8009afa <vQueueUnregisterQueue+0x3a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b10 <vQueueUnregisterQueue+0x50>)
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	00d2      	lsls	r2, r2, #3
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	50d1      	str	r1, [r2, r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009aea:	4a09      	ldr	r2, [pc, #36]	@ (8009b10 <vQueueUnregisterQueue+0x50>)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	00db      	lsls	r3, r3, #3
 8009af0:	18d3      	adds	r3, r2, r3
 8009af2:	3304      	adds	r3, #4
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
				break;
 8009af8:	e006      	b.n	8009b08 <vQueueUnregisterQueue+0x48>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	3301      	adds	r3, #1
 8009afe:	60fb      	str	r3, [r7, #12]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2b07      	cmp	r3, #7
 8009b04:	d9e3      	bls.n	8009ace <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009b06:	46c0      	nop			@ (mov r8, r8)
 8009b08:	46c0      	nop			@ (mov r8, r8)
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	b004      	add	sp, #16
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20000b5c 	.word	0x20000b5c

08009b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b18:	4b03      	ldr	r3, [pc, #12]	@ (8009b28 <vTaskSuspendAll+0x14>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	4b02      	ldr	r3, [pc, #8]	@ (8009b28 <vTaskSuspendAll+0x14>)
 8009b20:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b22:	46c0      	nop			@ (mov r8, r8)
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20001050 	.word	0x20001050

08009b2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8009c24 <xTaskResumeAll+0xf8>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d102      	bne.n	8009b48 <xTaskResumeAll+0x1c>
 8009b42:	b672      	cpsid	i
 8009b44:	46c0      	nop			@ (mov r8, r8)
 8009b46:	e7fd      	b.n	8009b44 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b48:	f000 fc62 	bl	800a410 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b4c:	4b35      	ldr	r3, [pc, #212]	@ (8009c24 <xTaskResumeAll+0xf8>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	1e5a      	subs	r2, r3, #1
 8009b52:	4b34      	ldr	r3, [pc, #208]	@ (8009c24 <xTaskResumeAll+0xf8>)
 8009b54:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b56:	4b33      	ldr	r3, [pc, #204]	@ (8009c24 <xTaskResumeAll+0xf8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d15b      	bne.n	8009c16 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b5e:	4b32      	ldr	r3, [pc, #200]	@ (8009c28 <xTaskResumeAll+0xfc>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d057      	beq.n	8009c16 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b66:	e02f      	b.n	8009bc8 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b68:	4b30      	ldr	r3, [pc, #192]	@ (8009c2c <xTaskResumeAll+0x100>)
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3318      	adds	r3, #24
 8009b74:	0018      	movs	r0, r3
 8009b76:	f7ff fa43 	bl	8009000 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	0018      	movs	r0, r3
 8009b80:	f7ff fa3e 	bl	8009000 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b88:	4b29      	ldr	r3, [pc, #164]	@ (8009c30 <xTaskResumeAll+0x104>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d903      	bls.n	8009b98 <xTaskResumeAll+0x6c>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b94:	4b26      	ldr	r3, [pc, #152]	@ (8009c30 <xTaskResumeAll+0x104>)
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b9c:	0013      	movs	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	189b      	adds	r3, r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4a23      	ldr	r2, [pc, #140]	@ (8009c34 <xTaskResumeAll+0x108>)
 8009ba6:	189a      	adds	r2, r3, r2
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3304      	adds	r3, #4
 8009bac:	0019      	movs	r1, r3
 8009bae:	0010      	movs	r0, r2
 8009bb0:	f7ff f9ce 	bl	8008f50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8009c38 <xTaskResumeAll+0x10c>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d302      	bcc.n	8009bc8 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8009bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c3c <xTaskResumeAll+0x110>)
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bc8:	4b18      	ldr	r3, [pc, #96]	@ (8009c2c <xTaskResumeAll+0x100>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1cb      	bne.n	8009b68 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009bd6:	f000 fa2d 	bl	800a034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009bda:	4b19      	ldr	r3, [pc, #100]	@ (8009c40 <xTaskResumeAll+0x114>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00f      	beq.n	8009c06 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009be6:	f000 f82d 	bl	8009c44 <xTaskIncrementTick>
 8009bea:	1e03      	subs	r3, r0, #0
 8009bec:	d002      	beq.n	8009bf4 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8009bee:	4b13      	ldr	r3, [pc, #76]	@ (8009c3c <xTaskResumeAll+0x110>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1f2      	bne.n	8009be6 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8009c00:	4b0f      	ldr	r3, [pc, #60]	@ (8009c40 <xTaskResumeAll+0x114>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c06:	4b0d      	ldr	r3, [pc, #52]	@ (8009c3c <xTaskResumeAll+0x110>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c12:	f000 fbed 	bl	800a3f0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c16:	f000 fc0d 	bl	800a434 <vPortExitCritical>

	return xAlreadyYielded;
 8009c1a:	68bb      	ldr	r3, [r7, #8]
}
 8009c1c:	0018      	movs	r0, r3
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b004      	add	sp, #16
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20001050 	.word	0x20001050
 8009c28:	20001030 	.word	0x20001030
 8009c2c:	20001008 	.word	0x20001008
 8009c30:	20001038 	.word	0x20001038
 8009c34:	20000ba0 	.word	0x20000ba0
 8009c38:	20000b9c 	.word	0x20000b9c
 8009c3c:	20001044 	.word	0x20001044
 8009c40:	20001040 	.word	0x20001040

08009c44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8009d78 <xTaskIncrementTick+0x134>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d000      	beq.n	8009c58 <xTaskIncrementTick+0x14>
 8009c56:	e085      	b.n	8009d64 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009c58:	4b48      	ldr	r3, [pc, #288]	@ (8009d7c <xTaskIncrementTick+0x138>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009c60:	4b46      	ldr	r3, [pc, #280]	@ (8009d7c <xTaskIncrementTick+0x138>)
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d118      	bne.n	8009c9e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009c6c:	4b44      	ldr	r3, [pc, #272]	@ (8009d80 <xTaskIncrementTick+0x13c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <xTaskIncrementTick+0x38>
 8009c76:	b672      	cpsid	i
 8009c78:	46c0      	nop			@ (mov r8, r8)
 8009c7a:	e7fd      	b.n	8009c78 <xTaskIncrementTick+0x34>
 8009c7c:	4b40      	ldr	r3, [pc, #256]	@ (8009d80 <xTaskIncrementTick+0x13c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	4b40      	ldr	r3, [pc, #256]	@ (8009d84 <xTaskIncrementTick+0x140>)
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	4b3e      	ldr	r3, [pc, #248]	@ (8009d80 <xTaskIncrementTick+0x13c>)
 8009c88:	601a      	str	r2, [r3, #0]
 8009c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8009d84 <xTaskIncrementTick+0x140>)
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	4b3d      	ldr	r3, [pc, #244]	@ (8009d88 <xTaskIncrementTick+0x144>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	4b3c      	ldr	r3, [pc, #240]	@ (8009d88 <xTaskIncrementTick+0x144>)
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f000 f9cb 	bl	800a034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8009d8c <xTaskIncrementTick+0x148>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d349      	bcc.n	8009d3c <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ca8:	4b35      	ldr	r3, [pc, #212]	@ (8009d80 <xTaskIncrementTick+0x13c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d104      	bne.n	8009cbc <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cb2:	4b36      	ldr	r3, [pc, #216]	@ (8009d8c <xTaskIncrementTick+0x148>)
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	4252      	negs	r2, r2
 8009cb8:	601a      	str	r2, [r3, #0]
					break;
 8009cba:	e03f      	b.n	8009d3c <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cbc:	4b30      	ldr	r3, [pc, #192]	@ (8009d80 <xTaskIncrementTick+0x13c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d203      	bcs.n	8009cdc <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8009d8c <xTaskIncrementTick+0x148>)
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009cda:	e02f      	b.n	8009d3c <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	3304      	adds	r3, #4
 8009ce0:	0018      	movs	r0, r3
 8009ce2:	f7ff f98d 	bl	8009000 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d004      	beq.n	8009cf8 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	3318      	adds	r3, #24
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f7ff f984 	bl	8009000 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cfc:	4b24      	ldr	r3, [pc, #144]	@ (8009d90 <xTaskIncrementTick+0x14c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d903      	bls.n	8009d0c <xTaskIncrementTick+0xc8>
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d08:	4b21      	ldr	r3, [pc, #132]	@ (8009d90 <xTaskIncrementTick+0x14c>)
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d10:	0013      	movs	r3, r2
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	189b      	adds	r3, r3, r2
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4a1e      	ldr	r2, [pc, #120]	@ (8009d94 <xTaskIncrementTick+0x150>)
 8009d1a:	189a      	adds	r2, r3, r2
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	3304      	adds	r3, #4
 8009d20:	0019      	movs	r1, r3
 8009d22:	0010      	movs	r0, r2
 8009d24:	f7ff f914 	bl	8008f50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009d98 <xTaskIncrementTick+0x154>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d3b8      	bcc.n	8009ca8 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8009d36:	2301      	movs	r3, #1
 8009d38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d3a:	e7b5      	b.n	8009ca8 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009d3c:	4b16      	ldr	r3, [pc, #88]	@ (8009d98 <xTaskIncrementTick+0x154>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d42:	4914      	ldr	r1, [pc, #80]	@ (8009d94 <xTaskIncrementTick+0x150>)
 8009d44:	0013      	movs	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	189b      	adds	r3, r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	585b      	ldr	r3, [r3, r1]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d901      	bls.n	8009d56 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8009d52:	2301      	movs	r3, #1
 8009d54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009d56:	4b11      	ldr	r3, [pc, #68]	@ (8009d9c <xTaskIncrementTick+0x158>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d007      	beq.n	8009d6e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	e004      	b.n	8009d6e <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009d64:	4b0e      	ldr	r3, [pc, #56]	@ (8009da0 <xTaskIncrementTick+0x15c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	1c5a      	adds	r2, r3, #1
 8009d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009da0 <xTaskIncrementTick+0x15c>)
 8009d6c:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009d6e:	697b      	ldr	r3, [r7, #20]
}
 8009d70:	0018      	movs	r0, r3
 8009d72:	46bd      	mov	sp, r7
 8009d74:	b006      	add	sp, #24
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	20001050 	.word	0x20001050
 8009d7c:	20001034 	.word	0x20001034
 8009d80:	20001000 	.word	0x20001000
 8009d84:	20001004 	.word	0x20001004
 8009d88:	20001048 	.word	0x20001048
 8009d8c:	2000104c 	.word	0x2000104c
 8009d90:	20001038 	.word	0x20001038
 8009d94:	20000ba0 	.word	0x20000ba0
 8009d98:	20000b9c 	.word	0x20000b9c
 8009d9c:	20001044 	.word	0x20001044
 8009da0:	20001040 	.word	0x20001040

08009da4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009daa:	4b25      	ldr	r3, [pc, #148]	@ (8009e40 <vTaskSwitchContext+0x9c>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009db2:	4b24      	ldr	r3, [pc, #144]	@ (8009e44 <vTaskSwitchContext+0xa0>)
 8009db4:	2201      	movs	r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009db8:	e03e      	b.n	8009e38 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009dba:	4b22      	ldr	r3, [pc, #136]	@ (8009e44 <vTaskSwitchContext+0xa0>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dc0:	4b21      	ldr	r3, [pc, #132]	@ (8009e48 <vTaskSwitchContext+0xa4>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	e008      	b.n	8009dda <vTaskSwitchContext+0x36>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d102      	bne.n	8009dd4 <vTaskSwitchContext+0x30>
 8009dce:	b672      	cpsid	i
 8009dd0:	46c0      	nop			@ (mov r8, r8)
 8009dd2:	e7fd      	b.n	8009dd0 <vTaskSwitchContext+0x2c>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	607b      	str	r3, [r7, #4]
 8009dda:	491c      	ldr	r1, [pc, #112]	@ (8009e4c <vTaskSwitchContext+0xa8>)
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	0013      	movs	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	189b      	adds	r3, r3, r2
 8009de4:	009b      	lsls	r3, r3, #2
 8009de6:	585b      	ldr	r3, [r3, r1]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0ed      	beq.n	8009dc8 <vTaskSwitchContext+0x24>
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	0013      	movs	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	189b      	adds	r3, r3, r2
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4a15      	ldr	r2, [pc, #84]	@ (8009e4c <vTaskSwitchContext+0xa8>)
 8009df8:	189b      	adds	r3, r3, r2
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	605a      	str	r2, [r3, #4]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d104      	bne.n	8009e1c <vTaskSwitchContext+0x78>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	605a      	str	r2, [r3, #4]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	4b0b      	ldr	r3, [pc, #44]	@ (8009e50 <vTaskSwitchContext+0xac>)
 8009e24:	601a      	str	r2, [r3, #0]
 8009e26:	4b08      	ldr	r3, [pc, #32]	@ (8009e48 <vTaskSwitchContext+0xa4>)
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e2c:	4b08      	ldr	r3, [pc, #32]	@ (8009e50 <vTaskSwitchContext+0xac>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3354      	adds	r3, #84	@ 0x54
 8009e32:	001a      	movs	r2, r3
 8009e34:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <vTaskSwitchContext+0xb0>)
 8009e36:	601a      	str	r2, [r3, #0]
}
 8009e38:	46c0      	nop			@ (mov r8, r8)
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	b002      	add	sp, #8
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20001050 	.word	0x20001050
 8009e44:	20001044 	.word	0x20001044
 8009e48:	20001038 	.word	0x20001038
 8009e4c:	20000ba0 	.word	0x20000ba0
 8009e50:	20000b9c 	.word	0x20000b9c
 8009e54:	200000e8 	.word	0x200000e8

08009e58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d102      	bne.n	8009e6e <vTaskPlaceOnEventList+0x16>
 8009e68:	b672      	cpsid	i
 8009e6a:	46c0      	nop			@ (mov r8, r8)
 8009e6c:	e7fd      	b.n	8009e6a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e6e:	4b09      	ldr	r3, [pc, #36]	@ (8009e94 <vTaskPlaceOnEventList+0x3c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3318      	adds	r3, #24
 8009e74:	001a      	movs	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	0011      	movs	r1, r2
 8009e7a:	0018      	movs	r0, r3
 8009e7c:	f7ff f88a 	bl	8008f94 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2101      	movs	r1, #1
 8009e84:	0018      	movs	r0, r3
 8009e86:	f000 fa59 	bl	800a33c <prvAddCurrentTaskToDelayedList>
}
 8009e8a:	46c0      	nop			@ (mov r8, r8)
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	b002      	add	sp, #8
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	46c0      	nop			@ (mov r8, r8)
 8009e94:	20000b9c 	.word	0x20000b9c

08009e98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d102      	bne.n	8009eb4 <xTaskRemoveFromEventList+0x1c>
 8009eae:	b672      	cpsid	i
 8009eb0:	46c0      	nop			@ (mov r8, r8)
 8009eb2:	e7fd      	b.n	8009eb0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	3318      	adds	r3, #24
 8009eb8:	0018      	movs	r0, r3
 8009eba:	f7ff f8a1 	bl	8009000 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8009f3c <xTaskRemoveFromEventList+0xa4>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d11d      	bne.n	8009f02 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	3304      	adds	r3, #4
 8009eca:	0018      	movs	r0, r3
 8009ecc:	f7ff f898 	bl	8009000 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8009f40 <xTaskRemoveFromEventList+0xa8>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d903      	bls.n	8009ee4 <xTaskRemoveFromEventList+0x4c>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee0:	4b17      	ldr	r3, [pc, #92]	@ (8009f40 <xTaskRemoveFromEventList+0xa8>)
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ee8:	0013      	movs	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	189b      	adds	r3, r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4a14      	ldr	r2, [pc, #80]	@ (8009f44 <xTaskRemoveFromEventList+0xac>)
 8009ef2:	189a      	adds	r2, r3, r2
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	0019      	movs	r1, r3
 8009efa:	0010      	movs	r0, r2
 8009efc:	f7ff f828 	bl	8008f50 <vListInsertEnd>
 8009f00:	e007      	b.n	8009f12 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	3318      	adds	r3, #24
 8009f06:	001a      	movs	r2, r3
 8009f08:	4b0f      	ldr	r3, [pc, #60]	@ (8009f48 <xTaskRemoveFromEventList+0xb0>)
 8009f0a:	0011      	movs	r1, r2
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	f7ff f81f 	bl	8008f50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f16:	4b0d      	ldr	r3, [pc, #52]	@ (8009f4c <xTaskRemoveFromEventList+0xb4>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d905      	bls.n	8009f2c <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009f20:	2301      	movs	r3, #1
 8009f22:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009f24:	4b0a      	ldr	r3, [pc, #40]	@ (8009f50 <xTaskRemoveFromEventList+0xb8>)
 8009f26:	2201      	movs	r2, #1
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	e001      	b.n	8009f30 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009f30:	68fb      	ldr	r3, [r7, #12]
}
 8009f32:	0018      	movs	r0, r3
 8009f34:	46bd      	mov	sp, r7
 8009f36:	b004      	add	sp, #16
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	20001050 	.word	0x20001050
 8009f40:	20001038 	.word	0x20001038
 8009f44:	20000ba0 	.word	0x20000ba0
 8009f48:	20001008 	.word	0x20001008
 8009f4c:	20000b9c 	.word	0x20000b9c
 8009f50:	20001044 	.word	0x20001044

08009f54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f5c:	4b05      	ldr	r3, [pc, #20]	@ (8009f74 <vTaskInternalSetTimeOutState+0x20>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f64:	4b04      	ldr	r3, [pc, #16]	@ (8009f78 <vTaskInternalSetTimeOutState+0x24>)
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	605a      	str	r2, [r3, #4]
}
 8009f6c:	46c0      	nop			@ (mov r8, r8)
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	b002      	add	sp, #8
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20001048 	.word	0x20001048
 8009f78:	20001034 	.word	0x20001034

08009f7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d102      	bne.n	8009f92 <xTaskCheckForTimeOut+0x16>
 8009f8c:	b672      	cpsid	i
 8009f8e:	46c0      	nop			@ (mov r8, r8)
 8009f90:	e7fd      	b.n	8009f8e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d102      	bne.n	8009f9e <xTaskCheckForTimeOut+0x22>
 8009f98:	b672      	cpsid	i
 8009f9a:	46c0      	nop			@ (mov r8, r8)
 8009f9c:	e7fd      	b.n	8009f9a <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8009f9e:	f000 fa37 	bl	800a410 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009fa2:	4b1d      	ldr	r3, [pc, #116]	@ (800a018 <xTaskCheckForTimeOut+0x9c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	d102      	bne.n	8009fc0 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	617b      	str	r3, [r7, #20]
 8009fbe:	e024      	b.n	800a00a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	4b15      	ldr	r3, [pc, #84]	@ (800a01c <xTaskCheckForTimeOut+0xa0>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d007      	beq.n	8009fdc <xTaskCheckForTimeOut+0x60>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	693a      	ldr	r2, [r7, #16]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d302      	bcc.n	8009fdc <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	617b      	str	r3, [r7, #20]
 8009fda:	e016      	b.n	800a00a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d20c      	bcs.n	800a000 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	1ad2      	subs	r2, r2, r3
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	0018      	movs	r0, r3
 8009ff6:	f7ff ffad 	bl	8009f54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	617b      	str	r3, [r7, #20]
 8009ffe:	e004      	b.n	800a00a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a006:	2301      	movs	r3, #1
 800a008:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800a00a:	f000 fa13 	bl	800a434 <vPortExitCritical>

	return xReturn;
 800a00e:	697b      	ldr	r3, [r7, #20]
}
 800a010:	0018      	movs	r0, r3
 800a012:	46bd      	mov	sp, r7
 800a014:	b006      	add	sp, #24
 800a016:	bd80      	pop	{r7, pc}
 800a018:	20001034 	.word	0x20001034
 800a01c:	20001048 	.word	0x20001048

0800a020 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a024:	4b02      	ldr	r3, [pc, #8]	@ (800a030 <vTaskMissedYield+0x10>)
 800a026:	2201      	movs	r2, #1
 800a028:	601a      	str	r2, [r3, #0]
}
 800a02a:	46c0      	nop			@ (mov r8, r8)
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20001044 	.word	0x20001044

0800a034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a03a:	4b0b      	ldr	r3, [pc, #44]	@ (800a068 <prvResetNextTaskUnblockTime+0x34>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d104      	bne.n	800a04e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a044:	4b09      	ldr	r3, [pc, #36]	@ (800a06c <prvResetNextTaskUnblockTime+0x38>)
 800a046:	2201      	movs	r2, #1
 800a048:	4252      	negs	r2, r2
 800a04a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a04c:	e008      	b.n	800a060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a04e:	4b06      	ldr	r3, [pc, #24]	@ (800a068 <prvResetNextTaskUnblockTime+0x34>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	4b03      	ldr	r3, [pc, #12]	@ (800a06c <prvResetNextTaskUnblockTime+0x38>)
 800a05e:	601a      	str	r2, [r3, #0]
}
 800a060:	46c0      	nop			@ (mov r8, r8)
 800a062:	46bd      	mov	sp, r7
 800a064:	b002      	add	sp, #8
 800a066:	bd80      	pop	{r7, pc}
 800a068:	20001000 	.word	0x20001000
 800a06c:	2000104c 	.word	0x2000104c

0800a070 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a076:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a0 <xTaskGetSchedulerState+0x30>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d102      	bne.n	800a084 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a07e:	2301      	movs	r3, #1
 800a080:	607b      	str	r3, [r7, #4]
 800a082:	e008      	b.n	800a096 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a084:	4b07      	ldr	r3, [pc, #28]	@ (800a0a4 <xTaskGetSchedulerState+0x34>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d102      	bne.n	800a092 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a08c:	2302      	movs	r3, #2
 800a08e:	607b      	str	r3, [r7, #4]
 800a090:	e001      	b.n	800a096 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a092:	2300      	movs	r3, #0
 800a094:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a096:	687b      	ldr	r3, [r7, #4]
	}
 800a098:	0018      	movs	r0, r3
 800a09a:	46bd      	mov	sp, r7
 800a09c:	b002      	add	sp, #8
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	2000103c 	.word	0x2000103c
 800a0a4:	20001050 	.word	0x20001050

0800a0a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d051      	beq.n	800a162 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0c2:	4b2a      	ldr	r3, [pc, #168]	@ (800a16c <xTaskPriorityInherit+0xc4>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d241      	bcs.n	800a150 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	db06      	blt.n	800a0e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0d4:	4b25      	ldr	r3, [pc, #148]	@ (800a16c <xTaskPriorityInherit+0xc4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0da:	2238      	movs	r2, #56	@ 0x38
 800a0dc:	1ad2      	subs	r2, r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	6959      	ldr	r1, [r3, #20]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ea:	0013      	movs	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	189b      	adds	r3, r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4a1f      	ldr	r2, [pc, #124]	@ (800a170 <xTaskPriorityInherit+0xc8>)
 800a0f4:	189b      	adds	r3, r3, r2
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	d122      	bne.n	800a140 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	0018      	movs	r0, r3
 800a100:	f7fe ff7e 	bl	8009000 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a104:	4b19      	ldr	r3, [pc, #100]	@ (800a16c <xTaskPriorityInherit+0xc4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a112:	4b18      	ldr	r3, [pc, #96]	@ (800a174 <xTaskPriorityInherit+0xcc>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d903      	bls.n	800a122 <xTaskPriorityInherit+0x7a>
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a11e:	4b15      	ldr	r3, [pc, #84]	@ (800a174 <xTaskPriorityInherit+0xcc>)
 800a120:	601a      	str	r2, [r3, #0]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a126:	0013      	movs	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	189b      	adds	r3, r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	4a10      	ldr	r2, [pc, #64]	@ (800a170 <xTaskPriorityInherit+0xc8>)
 800a130:	189a      	adds	r2, r3, r2
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	3304      	adds	r3, #4
 800a136:	0019      	movs	r1, r3
 800a138:	0010      	movs	r0, r2
 800a13a:	f7fe ff09 	bl	8008f50 <vListInsertEnd>
 800a13e:	e004      	b.n	800a14a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a140:	4b0a      	ldr	r3, [pc, #40]	@ (800a16c <xTaskPriorityInherit+0xc4>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a14a:	2301      	movs	r3, #1
 800a14c:	60fb      	str	r3, [r7, #12]
 800a14e:	e008      	b.n	800a162 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a154:	4b05      	ldr	r3, [pc, #20]	@ (800a16c <xTaskPriorityInherit+0xc4>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d201      	bcs.n	800a162 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a15e:	2301      	movs	r3, #1
 800a160:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a162:	68fb      	ldr	r3, [r7, #12]
	}
 800a164:	0018      	movs	r0, r3
 800a166:	46bd      	mov	sp, r7
 800a168:	b004      	add	sp, #16
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	20000b9c 	.word	0x20000b9c
 800a170:	20000ba0 	.word	0x20000ba0
 800a174:	20001038 	.word	0x20001038

0800a178 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a184:	2300      	movs	r3, #0
 800a186:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d046      	beq.n	800a21c <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a18e:	4b26      	ldr	r3, [pc, #152]	@ (800a228 <xTaskPriorityDisinherit+0xb0>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	429a      	cmp	r2, r3
 800a196:	d002      	beq.n	800a19e <xTaskPriorityDisinherit+0x26>
 800a198:	b672      	cpsid	i
 800a19a:	46c0      	nop			@ (mov r8, r8)
 800a19c:	e7fd      	b.n	800a19a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <xTaskPriorityDisinherit+0x34>
 800a1a6:	b672      	cpsid	i
 800a1a8:	46c0      	nop			@ (mov r8, r8)
 800a1aa:	e7fd      	b.n	800a1a8 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b0:	1e5a      	subs	r2, r3, #1
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d02c      	beq.n	800a21c <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d128      	bne.n	800a21c <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	f7fe ff16 	bl	8009000 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e0:	2238      	movs	r2, #56	@ 0x38
 800a1e2:	1ad2      	subs	r2, r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a22c <xTaskPriorityDisinherit+0xb4>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d903      	bls.n	800a1fc <xTaskPriorityDisinherit+0x84>
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a22c <xTaskPriorityDisinherit+0xb4>)
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a200:	0013      	movs	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	189b      	adds	r3, r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4a09      	ldr	r2, [pc, #36]	@ (800a230 <xTaskPriorityDisinherit+0xb8>)
 800a20a:	189a      	adds	r2, r3, r2
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	3304      	adds	r3, #4
 800a210:	0019      	movs	r1, r3
 800a212:	0010      	movs	r0, r2
 800a214:	f7fe fe9c 	bl	8008f50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a218:	2301      	movs	r3, #1
 800a21a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a21c:	68fb      	ldr	r3, [r7, #12]
	}
 800a21e:	0018      	movs	r0, r3
 800a220:	46bd      	mov	sp, r7
 800a222:	b004      	add	sp, #16
 800a224:	bd80      	pop	{r7, pc}
 800a226:	46c0      	nop			@ (mov r8, r8)
 800a228:	20000b9c 	.word	0x20000b9c
 800a22c:	20001038 	.word	0x20001038
 800a230:	20000ba0 	.word	0x20000ba0

0800a234 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a234:	b580      	push	{r7, lr}
 800a236:	b086      	sub	sp, #24
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a242:	2301      	movs	r3, #1
 800a244:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d05a      	beq.n	800a302 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a250:	2b00      	cmp	r3, #0
 800a252:	d102      	bne.n	800a25a <vTaskPriorityDisinheritAfterTimeout+0x26>
 800a254:	b672      	cpsid	i
 800a256:	46c0      	nop			@ (mov r8, r8)
 800a258:	e7fd      	b.n	800a256 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	429a      	cmp	r2, r3
 800a262:	d902      	bls.n	800a26a <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	617b      	str	r3, [r7, #20]
 800a268:	e002      	b.n	800a270 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a26e:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	429a      	cmp	r2, r3
 800a278:	d043      	beq.n	800a302 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	429a      	cmp	r2, r3
 800a282:	d13e      	bne.n	800a302 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a284:	4b21      	ldr	r3, [pc, #132]	@ (800a30c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d102      	bne.n	800a294 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800a28e:	b672      	cpsid	i
 800a290:	46c0      	nop			@ (mov r8, r8)
 800a292:	e7fd      	b.n	800a290 <vTaskPriorityDisinheritAfterTimeout+0x5c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a298:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	db04      	blt.n	800a2b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	2238      	movs	r2, #56	@ 0x38
 800a2ac:	1ad2      	subs	r2, r2, r3
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6959      	ldr	r1, [r3, #20]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	0013      	movs	r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	189b      	adds	r3, r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	4a13      	ldr	r2, [pc, #76]	@ (800a310 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800a2c2:	189b      	adds	r3, r3, r2
 800a2c4:	4299      	cmp	r1, r3
 800a2c6:	d11c      	bne.n	800a302 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	0018      	movs	r0, r3
 800a2ce:	f7fe fe97 	bl	8009000 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a314 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d903      	bls.n	800a2e6 <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a314 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2ea:	0013      	movs	r3, r2
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	189b      	adds	r3, r3, r2
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4a07      	ldr	r2, [pc, #28]	@ (800a310 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800a2f4:	189a      	adds	r2, r3, r2
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	0019      	movs	r1, r3
 800a2fc:	0010      	movs	r0, r2
 800a2fe:	f7fe fe27 	bl	8008f50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a302:	46c0      	nop			@ (mov r8, r8)
 800a304:	46bd      	mov	sp, r7
 800a306:	b006      	add	sp, #24
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	46c0      	nop			@ (mov r8, r8)
 800a30c:	20000b9c 	.word	0x20000b9c
 800a310:	20000ba0 	.word	0x20000ba0
 800a314:	20001038 	.word	0x20001038

0800a318 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a31c:	4b06      	ldr	r3, [pc, #24]	@ (800a338 <pvTaskIncrementMutexHeldCount+0x20>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a324:	4b04      	ldr	r3, [pc, #16]	@ (800a338 <pvTaskIncrementMutexHeldCount+0x20>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a32a:	3201      	adds	r2, #1
 800a32c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a32e:	4b02      	ldr	r3, [pc, #8]	@ (800a338 <pvTaskIncrementMutexHeldCount+0x20>)
 800a330:	681b      	ldr	r3, [r3, #0]
	}
 800a332:	0018      	movs	r0, r3
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	20000b9c 	.word	0x20000b9c

0800a33c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a346:	4b21      	ldr	r3, [pc, #132]	@ (800a3cc <prvAddCurrentTaskToDelayedList+0x90>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a34c:	4b20      	ldr	r3, [pc, #128]	@ (800a3d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3304      	adds	r3, #4
 800a352:	0018      	movs	r0, r3
 800a354:	f7fe fe54 	bl	8009000 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	3301      	adds	r3, #1
 800a35c:	d10b      	bne.n	800a376 <prvAddCurrentTaskToDelayedList+0x3a>
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d008      	beq.n	800a376 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a364:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	1d1a      	adds	r2, r3, #4
 800a36a:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a36c:	0011      	movs	r1, r2
 800a36e:	0018      	movs	r0, r3
 800a370:	f7fe fdee 	bl	8008f50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a374:	e026      	b.n	800a3c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	18d3      	adds	r3, r2, r3
 800a37c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a37e:	4b14      	ldr	r3, [pc, #80]	@ (800a3d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d209      	bcs.n	800a3a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a38e:	4b12      	ldr	r3, [pc, #72]	@ (800a3d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	4b0f      	ldr	r3, [pc, #60]	@ (800a3d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3304      	adds	r3, #4
 800a398:	0019      	movs	r1, r3
 800a39a:	0010      	movs	r0, r2
 800a39c:	f7fe fdfa 	bl	8008f94 <vListInsert>
}
 800a3a0:	e010      	b.n	800a3c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a3dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	4b0a      	ldr	r3, [pc, #40]	@ (800a3d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	0019      	movs	r1, r3
 800a3ae:	0010      	movs	r0, r2
 800a3b0:	f7fe fdf0 	bl	8008f94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68ba      	ldr	r2, [r7, #8]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d202      	bcs.n	800a3c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a3be:	4b08      	ldr	r3, [pc, #32]	@ (800a3e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	601a      	str	r2, [r3, #0]
}
 800a3c4:	46c0      	nop			@ (mov r8, r8)
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	b004      	add	sp, #16
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20001034 	.word	0x20001034
 800a3d0:	20000b9c 	.word	0x20000b9c
 800a3d4:	2000101c 	.word	0x2000101c
 800a3d8:	20001004 	.word	0x20001004
 800a3dc:	20001000 	.word	0x20001000
 800a3e0:	2000104c 	.word	0x2000104c

0800a3e4 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a3e8:	46c0      	nop			@ (mov r8, r8)
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a3f4:	4b05      	ldr	r3, [pc, #20]	@ (800a40c <vPortYield+0x1c>)
 800a3f6:	2280      	movs	r2, #128	@ 0x80
 800a3f8:	0552      	lsls	r2, r2, #21
 800a3fa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a3fc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a400:	f3bf 8f6f 	isb	sy
}
 800a404:	46c0      	nop			@ (mov r8, r8)
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	e000ed04 	.word	0xe000ed04

0800a410 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800a414:	b672      	cpsid	i
	uxCriticalNesting++;
 800a416:	4b06      	ldr	r3, [pc, #24]	@ (800a430 <vPortEnterCritical+0x20>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	4b04      	ldr	r3, [pc, #16]	@ (800a430 <vPortEnterCritical+0x20>)
 800a41e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800a420:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a424:	f3bf 8f6f 	isb	sy
}
 800a428:	46c0      	nop			@ (mov r8, r8)
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	46c0      	nop			@ (mov r8, r8)
 800a430:	200000e4 	.word	0x200000e4

0800a434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a438:	4b09      	ldr	r3, [pc, #36]	@ (800a460 <vPortExitCritical+0x2c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d102      	bne.n	800a446 <vPortExitCritical+0x12>
 800a440:	b672      	cpsid	i
 800a442:	46c0      	nop			@ (mov r8, r8)
 800a444:	e7fd      	b.n	800a442 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800a446:	4b06      	ldr	r3, [pc, #24]	@ (800a460 <vPortExitCritical+0x2c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	1e5a      	subs	r2, r3, #1
 800a44c:	4b04      	ldr	r3, [pc, #16]	@ (800a460 <vPortExitCritical+0x2c>)
 800a44e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800a450:	4b03      	ldr	r3, [pc, #12]	@ (800a460 <vPortExitCritical+0x2c>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d100      	bne.n	800a45a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 800a458:	b662      	cpsie	i
	}
}
 800a45a:	46c0      	nop			@ (mov r8, r8)
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	200000e4 	.word	0x200000e4

0800a464 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800a464:	f3ef 8010 	mrs	r0, PRIMASK
 800a468:	b672      	cpsid	i
 800a46a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800a46c:	46c0      	nop			@ (mov r8, r8)
 800a46e:	0018      	movs	r0, r3

0800a470 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800a470:	f380 8810 	msr	PRIMASK, r0
 800a474:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800a476:	46c0      	nop			@ (mov r8, r8)
	...

0800a480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a480:	f3ef 8009 	mrs	r0, PSP
 800a484:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c0 <pxCurrentTCBConst>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	3820      	subs	r0, #32
 800a48a:	6010      	str	r0, [r2, #0]
 800a48c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a48e:	4644      	mov	r4, r8
 800a490:	464d      	mov	r5, r9
 800a492:	4656      	mov	r6, sl
 800a494:	465f      	mov	r7, fp
 800a496:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800a498:	b508      	push	{r3, lr}
 800a49a:	b672      	cpsid	i
 800a49c:	f7ff fc82 	bl	8009da4 <vTaskSwitchContext>
 800a4a0:	b662      	cpsie	i
 800a4a2:	bc0c      	pop	{r2, r3}
 800a4a4:	6811      	ldr	r1, [r2, #0]
 800a4a6:	6808      	ldr	r0, [r1, #0]
 800a4a8:	3010      	adds	r0, #16
 800a4aa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a4ac:	46a0      	mov	r8, r4
 800a4ae:	46a9      	mov	r9, r5
 800a4b0:	46b2      	mov	sl, r6
 800a4b2:	46bb      	mov	fp, r7
 800a4b4:	f380 8809 	msr	PSP, r0
 800a4b8:	3820      	subs	r0, #32
 800a4ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800a4bc:	4718      	bx	r3
 800a4be:	46c0      	nop			@ (mov r8, r8)

0800a4c0 <pxCurrentTCBConst>:
 800a4c0:	20000b9c 	.word	0x20000b9c
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800a4c4:	46c0      	nop			@ (mov r8, r8)
 800a4c6:	46c0      	nop			@ (mov r8, r8)

0800a4c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4ce:	f7ff ffc9 	bl	800a464 <ulSetInterruptMaskFromISR>
 800a4d2:	0003      	movs	r3, r0
 800a4d4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4d6:	f7ff fbb5 	bl	8009c44 <xTaskIncrementTick>
 800a4da:	1e03      	subs	r3, r0, #0
 800a4dc:	d003      	beq.n	800a4e6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4de:	4b06      	ldr	r3, [pc, #24]	@ (800a4f8 <xPortSysTickHandler+0x30>)
 800a4e0:	2280      	movs	r2, #128	@ 0x80
 800a4e2:	0552      	lsls	r2, r2, #21
 800a4e4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	f7ff ffc1 	bl	800a470 <vClearInterruptMaskFromISR>
}
 800a4ee:	46c0      	nop			@ (mov r8, r8)
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b002      	add	sp, #8
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	46c0      	nop			@ (mov r8, r8)
 800a4f8:	e000ed04 	.word	0xe000ed04

0800a4fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a504:	2300      	movs	r3, #0
 800a506:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800a508:	f7ff fb04 	bl	8009b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a50c:	4b4d      	ldr	r3, [pc, #308]	@ (800a644 <pvPortMalloc+0x148>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a514:	f000 f8f2 	bl	800a6fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a518:	4b4b      	ldr	r3, [pc, #300]	@ (800a648 <pvPortMalloc+0x14c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	4013      	ands	r3, r2
 800a520:	d000      	beq.n	800a524 <pvPortMalloc+0x28>
 800a522:	e080      	b.n	800a626 <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d013      	beq.n	800a552 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800a52a:	2208      	movs	r2, #8
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	189b      	adds	r3, r3, r2
 800a530:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2207      	movs	r2, #7
 800a536:	4013      	ands	r3, r2
 800a538:	d00b      	beq.n	800a552 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2207      	movs	r2, #7
 800a53e:	4393      	bics	r3, r2
 800a540:	3308      	adds	r3, #8
 800a542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2207      	movs	r2, #7
 800a548:	4013      	ands	r3, r2
 800a54a:	d002      	beq.n	800a552 <pvPortMalloc+0x56>
 800a54c:	b672      	cpsid	i
 800a54e:	46c0      	nop			@ (mov r8, r8)
 800a550:	e7fd      	b.n	800a54e <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d066      	beq.n	800a626 <pvPortMalloc+0x12a>
 800a558:	4b3c      	ldr	r3, [pc, #240]	@ (800a64c <pvPortMalloc+0x150>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d861      	bhi.n	800a626 <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a562:	4b3b      	ldr	r3, [pc, #236]	@ (800a650 <pvPortMalloc+0x154>)
 800a564:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800a566:	4b3a      	ldr	r3, [pc, #232]	@ (800a650 <pvPortMalloc+0x154>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a56c:	e004      	b.n	800a578 <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d903      	bls.n	800a58a <pvPortMalloc+0x8e>
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1f1      	bne.n	800a56e <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a58a:	4b2e      	ldr	r3, [pc, #184]	@ (800a644 <pvPortMalloc+0x148>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	697a      	ldr	r2, [r7, #20]
 800a590:	429a      	cmp	r2, r3
 800a592:	d048      	beq.n	800a626 <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2208      	movs	r2, #8
 800a59a:	189b      	adds	r3, r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	685a      	ldr	r2, [r3, #4]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	1ad2      	subs	r2, r2, r3
 800a5ae:	2308      	movs	r3, #8
 800a5b0:	005b      	lsls	r3, r3, #1
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d917      	bls.n	800a5e6 <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	18d3      	adds	r3, r2, r3
 800a5bc:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	d002      	beq.n	800a5cc <pvPortMalloc+0xd0>
 800a5c6:	b672      	cpsid	i
 800a5c8:	46c0      	nop			@ (mov r8, r8)
 800a5ca:	e7fd      	b.n	800a5c8 <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	1ad2      	subs	r2, r2, r3
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	f000 f8eb 	bl	800a7bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a5e6:	4b19      	ldr	r3, [pc, #100]	@ (800a64c <pvPortMalloc+0x150>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	1ad2      	subs	r2, r2, r3
 800a5f0:	4b16      	ldr	r3, [pc, #88]	@ (800a64c <pvPortMalloc+0x150>)
 800a5f2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a5f4:	4b15      	ldr	r3, [pc, #84]	@ (800a64c <pvPortMalloc+0x150>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	4b16      	ldr	r3, [pc, #88]	@ (800a654 <pvPortMalloc+0x158>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d203      	bcs.n	800a608 <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a600:	4b12      	ldr	r3, [pc, #72]	@ (800a64c <pvPortMalloc+0x150>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	4b13      	ldr	r3, [pc, #76]	@ (800a654 <pvPortMalloc+0x158>)
 800a606:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b0e      	ldr	r3, [pc, #56]	@ (800a648 <pvPortMalloc+0x14c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	431a      	orrs	r2, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a61c:	4b0e      	ldr	r3, [pc, #56]	@ (800a658 <pvPortMalloc+0x15c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	1c5a      	adds	r2, r3, #1
 800a622:	4b0d      	ldr	r3, [pc, #52]	@ (800a658 <pvPortMalloc+0x15c>)
 800a624:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a626:	f7ff fa81 	bl	8009b2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2207      	movs	r2, #7
 800a62e:	4013      	ands	r3, r2
 800a630:	d002      	beq.n	800a638 <pvPortMalloc+0x13c>
 800a632:	b672      	cpsid	i
 800a634:	46c0      	nop			@ (mov r8, r8)
 800a636:	e7fd      	b.n	800a634 <pvPortMalloc+0x138>
	return pvReturn;
 800a638:	68fb      	ldr	r3, [r7, #12]
}
 800a63a:	0018      	movs	r0, r3
 800a63c:	46bd      	mov	sp, r7
 800a63e:	b006      	add	sp, #24
 800a640:	bd80      	pop	{r7, pc}
 800a642:	46c0      	nop			@ (mov r8, r8)
 800a644:	20001c5c 	.word	0x20001c5c
 800a648:	20001c70 	.word	0x20001c70
 800a64c:	20001c60 	.word	0x20001c60
 800a650:	20001c54 	.word	0x20001c54
 800a654:	20001c64 	.word	0x20001c64
 800a658:	20001c68 	.word	0x20001c68

0800a65c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d03c      	beq.n	800a6e8 <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a66e:	2308      	movs	r3, #8
 800a670:	425b      	negs	r3, r3
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	18d3      	adds	r3, r2, r3
 800a676:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	4b1b      	ldr	r3, [pc, #108]	@ (800a6f0 <vPortFree+0x94>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4013      	ands	r3, r2
 800a686:	d102      	bne.n	800a68e <vPortFree+0x32>
 800a688:	b672      	cpsid	i
 800a68a:	46c0      	nop			@ (mov r8, r8)
 800a68c:	e7fd      	b.n	800a68a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <vPortFree+0x40>
 800a696:	b672      	cpsid	i
 800a698:	46c0      	nop			@ (mov r8, r8)
 800a69a:	e7fd      	b.n	800a698 <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	685a      	ldr	r2, [r3, #4]
 800a6a0:	4b13      	ldr	r3, [pc, #76]	@ (800a6f0 <vPortFree+0x94>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	d01f      	beq.n	800a6e8 <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d11b      	bne.n	800a6e8 <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f0 <vPortFree+0x94>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	43db      	mvns	r3, r3
 800a6ba:	401a      	ands	r2, r3
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a6c0:	f7ff fa28 	bl	8009b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f4 <vPortFree+0x98>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	18d2      	adds	r2, r2, r3
 800a6ce:	4b09      	ldr	r3, [pc, #36]	@ (800a6f4 <vPortFree+0x98>)
 800a6d0:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	0018      	movs	r0, r3
 800a6d6:	f000 f871 	bl	800a7bc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a6da:	4b07      	ldr	r3, [pc, #28]	@ (800a6f8 <vPortFree+0x9c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	4b05      	ldr	r3, [pc, #20]	@ (800a6f8 <vPortFree+0x9c>)
 800a6e2:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800a6e4:	f7ff fa22 	bl	8009b2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a6e8:	46c0      	nop			@ (mov r8, r8)
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	b004      	add	sp, #16
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	20001c70 	.word	0x20001c70
 800a6f4:	20001c60 	.word	0x20001c60
 800a6f8:	20001c6c 	.word	0x20001c6c

0800a6fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a702:	23c0      	movs	r3, #192	@ 0xc0
 800a704:	011b      	lsls	r3, r3, #4
 800a706:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a708:	4b26      	ldr	r3, [pc, #152]	@ (800a7a4 <prvHeapInit+0xa8>)
 800a70a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2207      	movs	r2, #7
 800a710:	4013      	ands	r3, r2
 800a712:	d00c      	beq.n	800a72e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	3307      	adds	r3, #7
 800a718:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2207      	movs	r2, #7
 800a71e:	4393      	bics	r3, r2
 800a720:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	1ad2      	subs	r2, r2, r3
 800a728:	4b1e      	ldr	r3, [pc, #120]	@ (800a7a4 <prvHeapInit+0xa8>)
 800a72a:	18d3      	adds	r3, r2, r3
 800a72c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a732:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a8 <prvHeapInit+0xac>)
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a738:	4b1b      	ldr	r3, [pc, #108]	@ (800a7a8 <prvHeapInit+0xac>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	18d3      	adds	r3, r2, r3
 800a744:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a746:	2208      	movs	r2, #8
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	1a9b      	subs	r3, r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2207      	movs	r2, #7
 800a752:	4393      	bics	r3, r2
 800a754:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a756:	68fa      	ldr	r2, [r7, #12]
 800a758:	4b14      	ldr	r3, [pc, #80]	@ (800a7ac <prvHeapInit+0xb0>)
 800a75a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800a75c:	4b13      	ldr	r3, [pc, #76]	@ (800a7ac <prvHeapInit+0xb0>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2200      	movs	r2, #0
 800a762:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a764:	4b11      	ldr	r3, [pc, #68]	@ (800a7ac <prvHeapInit+0xb0>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	1ad2      	subs	r2, r2, r3
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a77a:	4b0c      	ldr	r3, [pc, #48]	@ (800a7ac <prvHeapInit+0xb0>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b0 <prvHeapInit+0xb4>)
 800a788:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	4b09      	ldr	r3, [pc, #36]	@ (800a7b4 <prvHeapInit+0xb8>)
 800a790:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a792:	4b09      	ldr	r3, [pc, #36]	@ (800a7b8 <prvHeapInit+0xbc>)
 800a794:	2280      	movs	r2, #128	@ 0x80
 800a796:	0612      	lsls	r2, r2, #24
 800a798:	601a      	str	r2, [r3, #0]
}
 800a79a:	46c0      	nop			@ (mov r8, r8)
 800a79c:	46bd      	mov	sp, r7
 800a79e:	b004      	add	sp, #16
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	46c0      	nop			@ (mov r8, r8)
 800a7a4:	20001054 	.word	0x20001054
 800a7a8:	20001c54 	.word	0x20001c54
 800a7ac:	20001c5c 	.word	0x20001c5c
 800a7b0:	20001c64 	.word	0x20001c64
 800a7b4:	20001c60 	.word	0x20001c60
 800a7b8:	20001c70 	.word	0x20001c70

0800a7bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a7c4:	4b27      	ldr	r3, [pc, #156]	@ (800a864 <prvInsertBlockIntoFreeList+0xa8>)
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	e002      	b.n	800a7d0 <prvInsertBlockIntoFreeList+0x14>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	60fb      	str	r3, [r7, #12]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d8f7      	bhi.n	800a7ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	18d3      	adds	r3, r2, r3
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d108      	bne.n	800a7fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	18d2      	adds	r2, r2, r3
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	68ba      	ldr	r2, [r7, #8]
 800a808:	18d2      	adds	r2, r2, r3
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d118      	bne.n	800a844 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	4b14      	ldr	r3, [pc, #80]	@ (800a868 <prvInsertBlockIntoFreeList+0xac>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	429a      	cmp	r2, r3
 800a81c:	d00d      	beq.n	800a83a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685a      	ldr	r2, [r3, #4]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	18d2      	adds	r2, r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	e008      	b.n	800a84c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a83a:	4b0b      	ldr	r3, [pc, #44]	@ (800a868 <prvInsertBlockIntoFreeList+0xac>)
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	e003      	b.n	800a84c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	429a      	cmp	r2, r3
 800a852:	d002      	beq.n	800a85a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a85a:	46c0      	nop			@ (mov r8, r8)
 800a85c:	46bd      	mov	sp, r7
 800a85e:	b004      	add	sp, #16
 800a860:	bd80      	pop	{r7, pc}
 800a862:	46c0      	nop			@ (mov r8, r8)
 800a864:	20001c54 	.word	0x20001c54
 800a868:	20001c5c 	.word	0x20001c5c

0800a86c <siprintf>:
 800a86c:	b40e      	push	{r1, r2, r3}
 800a86e:	b500      	push	{lr}
 800a870:	490b      	ldr	r1, [pc, #44]	@ (800a8a0 <siprintf+0x34>)
 800a872:	b09c      	sub	sp, #112	@ 0x70
 800a874:	ab1d      	add	r3, sp, #116	@ 0x74
 800a876:	9002      	str	r0, [sp, #8]
 800a878:	9006      	str	r0, [sp, #24]
 800a87a:	9107      	str	r1, [sp, #28]
 800a87c:	9104      	str	r1, [sp, #16]
 800a87e:	4809      	ldr	r0, [pc, #36]	@ (800a8a4 <siprintf+0x38>)
 800a880:	4909      	ldr	r1, [pc, #36]	@ (800a8a8 <siprintf+0x3c>)
 800a882:	cb04      	ldmia	r3!, {r2}
 800a884:	9105      	str	r1, [sp, #20]
 800a886:	6800      	ldr	r0, [r0, #0]
 800a888:	a902      	add	r1, sp, #8
 800a88a:	9301      	str	r3, [sp, #4]
 800a88c:	f000 f8f6 	bl	800aa7c <_svfiprintf_r>
 800a890:	2200      	movs	r2, #0
 800a892:	9b02      	ldr	r3, [sp, #8]
 800a894:	701a      	strb	r2, [r3, #0]
 800a896:	b01c      	add	sp, #112	@ 0x70
 800a898:	bc08      	pop	{r3}
 800a89a:	b003      	add	sp, #12
 800a89c:	4718      	bx	r3
 800a89e:	46c0      	nop			@ (mov r8, r8)
 800a8a0:	7fffffff 	.word	0x7fffffff
 800a8a4:	200000e8 	.word	0x200000e8
 800a8a8:	ffff0208 	.word	0xffff0208

0800a8ac <memset>:
 800a8ac:	0003      	movs	r3, r0
 800a8ae:	1882      	adds	r2, r0, r2
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d100      	bne.n	800a8b6 <memset+0xa>
 800a8b4:	4770      	bx	lr
 800a8b6:	7019      	strb	r1, [r3, #0]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	e7f9      	b.n	800a8b0 <memset+0x4>

0800a8bc <__errno>:
 800a8bc:	4b01      	ldr	r3, [pc, #4]	@ (800a8c4 <__errno+0x8>)
 800a8be:	6818      	ldr	r0, [r3, #0]
 800a8c0:	4770      	bx	lr
 800a8c2:	46c0      	nop			@ (mov r8, r8)
 800a8c4:	200000e8 	.word	0x200000e8

0800a8c8 <__libc_init_array>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	2600      	movs	r6, #0
 800a8cc:	4c0c      	ldr	r4, [pc, #48]	@ (800a900 <__libc_init_array+0x38>)
 800a8ce:	4d0d      	ldr	r5, [pc, #52]	@ (800a904 <__libc_init_array+0x3c>)
 800a8d0:	1b64      	subs	r4, r4, r5
 800a8d2:	10a4      	asrs	r4, r4, #2
 800a8d4:	42a6      	cmp	r6, r4
 800a8d6:	d109      	bne.n	800a8ec <__libc_init_array+0x24>
 800a8d8:	2600      	movs	r6, #0
 800a8da:	f000 fc65 	bl	800b1a8 <_init>
 800a8de:	4c0a      	ldr	r4, [pc, #40]	@ (800a908 <__libc_init_array+0x40>)
 800a8e0:	4d0a      	ldr	r5, [pc, #40]	@ (800a90c <__libc_init_array+0x44>)
 800a8e2:	1b64      	subs	r4, r4, r5
 800a8e4:	10a4      	asrs	r4, r4, #2
 800a8e6:	42a6      	cmp	r6, r4
 800a8e8:	d105      	bne.n	800a8f6 <__libc_init_array+0x2e>
 800a8ea:	bd70      	pop	{r4, r5, r6, pc}
 800a8ec:	00b3      	lsls	r3, r6, #2
 800a8ee:	58eb      	ldr	r3, [r5, r3]
 800a8f0:	4798      	blx	r3
 800a8f2:	3601      	adds	r6, #1
 800a8f4:	e7ee      	b.n	800a8d4 <__libc_init_array+0xc>
 800a8f6:	00b3      	lsls	r3, r6, #2
 800a8f8:	58eb      	ldr	r3, [r5, r3]
 800a8fa:	4798      	blx	r3
 800a8fc:	3601      	adds	r6, #1
 800a8fe:	e7f2      	b.n	800a8e6 <__libc_init_array+0x1e>
 800a900:	0800b494 	.word	0x0800b494
 800a904:	0800b494 	.word	0x0800b494
 800a908:	0800b498 	.word	0x0800b498
 800a90c:	0800b494 	.word	0x0800b494

0800a910 <__retarget_lock_acquire_recursive>:
 800a910:	4770      	bx	lr

0800a912 <__retarget_lock_release_recursive>:
 800a912:	4770      	bx	lr

0800a914 <memcpy>:
 800a914:	2300      	movs	r3, #0
 800a916:	b510      	push	{r4, lr}
 800a918:	429a      	cmp	r2, r3
 800a91a:	d100      	bne.n	800a91e <memcpy+0xa>
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	5ccc      	ldrb	r4, [r1, r3]
 800a920:	54c4      	strb	r4, [r0, r3]
 800a922:	3301      	adds	r3, #1
 800a924:	e7f8      	b.n	800a918 <memcpy+0x4>
	...

0800a928 <_free_r>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	0005      	movs	r5, r0
 800a92c:	1e0c      	subs	r4, r1, #0
 800a92e:	d010      	beq.n	800a952 <_free_r+0x2a>
 800a930:	3c04      	subs	r4, #4
 800a932:	6823      	ldr	r3, [r4, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	da00      	bge.n	800a93a <_free_r+0x12>
 800a938:	18e4      	adds	r4, r4, r3
 800a93a:	0028      	movs	r0, r5
 800a93c:	f000 fbbc 	bl	800b0b8 <__malloc_lock>
 800a940:	4a1d      	ldr	r2, [pc, #116]	@ (800a9b8 <_free_r+0x90>)
 800a942:	6813      	ldr	r3, [r2, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d105      	bne.n	800a954 <_free_r+0x2c>
 800a948:	6063      	str	r3, [r4, #4]
 800a94a:	6014      	str	r4, [r2, #0]
 800a94c:	0028      	movs	r0, r5
 800a94e:	f000 fbbb 	bl	800b0c8 <__malloc_unlock>
 800a952:	bd70      	pop	{r4, r5, r6, pc}
 800a954:	42a3      	cmp	r3, r4
 800a956:	d908      	bls.n	800a96a <_free_r+0x42>
 800a958:	6820      	ldr	r0, [r4, #0]
 800a95a:	1821      	adds	r1, r4, r0
 800a95c:	428b      	cmp	r3, r1
 800a95e:	d1f3      	bne.n	800a948 <_free_r+0x20>
 800a960:	6819      	ldr	r1, [r3, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	1809      	adds	r1, r1, r0
 800a966:	6021      	str	r1, [r4, #0]
 800a968:	e7ee      	b.n	800a948 <_free_r+0x20>
 800a96a:	001a      	movs	r2, r3
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <_free_r+0x4e>
 800a972:	42a3      	cmp	r3, r4
 800a974:	d9f9      	bls.n	800a96a <_free_r+0x42>
 800a976:	6811      	ldr	r1, [r2, #0]
 800a978:	1850      	adds	r0, r2, r1
 800a97a:	42a0      	cmp	r0, r4
 800a97c:	d10b      	bne.n	800a996 <_free_r+0x6e>
 800a97e:	6820      	ldr	r0, [r4, #0]
 800a980:	1809      	adds	r1, r1, r0
 800a982:	1850      	adds	r0, r2, r1
 800a984:	6011      	str	r1, [r2, #0]
 800a986:	4283      	cmp	r3, r0
 800a988:	d1e0      	bne.n	800a94c <_free_r+0x24>
 800a98a:	6818      	ldr	r0, [r3, #0]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	1841      	adds	r1, r0, r1
 800a990:	6011      	str	r1, [r2, #0]
 800a992:	6053      	str	r3, [r2, #4]
 800a994:	e7da      	b.n	800a94c <_free_r+0x24>
 800a996:	42a0      	cmp	r0, r4
 800a998:	d902      	bls.n	800a9a0 <_free_r+0x78>
 800a99a:	230c      	movs	r3, #12
 800a99c:	602b      	str	r3, [r5, #0]
 800a99e:	e7d5      	b.n	800a94c <_free_r+0x24>
 800a9a0:	6820      	ldr	r0, [r4, #0]
 800a9a2:	1821      	adds	r1, r4, r0
 800a9a4:	428b      	cmp	r3, r1
 800a9a6:	d103      	bne.n	800a9b0 <_free_r+0x88>
 800a9a8:	6819      	ldr	r1, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	1809      	adds	r1, r1, r0
 800a9ae:	6021      	str	r1, [r4, #0]
 800a9b0:	6063      	str	r3, [r4, #4]
 800a9b2:	6054      	str	r4, [r2, #4]
 800a9b4:	e7ca      	b.n	800a94c <_free_r+0x24>
 800a9b6:	46c0      	nop			@ (mov r8, r8)
 800a9b8:	20001db8 	.word	0x20001db8

0800a9bc <__ssputs_r>:
 800a9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9be:	688e      	ldr	r6, [r1, #8]
 800a9c0:	b085      	sub	sp, #20
 800a9c2:	001f      	movs	r7, r3
 800a9c4:	000c      	movs	r4, r1
 800a9c6:	680b      	ldr	r3, [r1, #0]
 800a9c8:	9002      	str	r0, [sp, #8]
 800a9ca:	9203      	str	r2, [sp, #12]
 800a9cc:	42be      	cmp	r6, r7
 800a9ce:	d830      	bhi.n	800aa32 <__ssputs_r+0x76>
 800a9d0:	210c      	movs	r1, #12
 800a9d2:	5e62      	ldrsh	r2, [r4, r1]
 800a9d4:	2190      	movs	r1, #144	@ 0x90
 800a9d6:	00c9      	lsls	r1, r1, #3
 800a9d8:	420a      	tst	r2, r1
 800a9da:	d028      	beq.n	800aa2e <__ssputs_r+0x72>
 800a9dc:	2003      	movs	r0, #3
 800a9de:	6921      	ldr	r1, [r4, #16]
 800a9e0:	1a5b      	subs	r3, r3, r1
 800a9e2:	9301      	str	r3, [sp, #4]
 800a9e4:	6963      	ldr	r3, [r4, #20]
 800a9e6:	4343      	muls	r3, r0
 800a9e8:	9801      	ldr	r0, [sp, #4]
 800a9ea:	0fdd      	lsrs	r5, r3, #31
 800a9ec:	18ed      	adds	r5, r5, r3
 800a9ee:	1c7b      	adds	r3, r7, #1
 800a9f0:	181b      	adds	r3, r3, r0
 800a9f2:	106d      	asrs	r5, r5, #1
 800a9f4:	42ab      	cmp	r3, r5
 800a9f6:	d900      	bls.n	800a9fa <__ssputs_r+0x3e>
 800a9f8:	001d      	movs	r5, r3
 800a9fa:	0552      	lsls	r2, r2, #21
 800a9fc:	d528      	bpl.n	800aa50 <__ssputs_r+0x94>
 800a9fe:	0029      	movs	r1, r5
 800aa00:	9802      	ldr	r0, [sp, #8]
 800aa02:	f000 f95b 	bl	800acbc <_malloc_r>
 800aa06:	1e06      	subs	r6, r0, #0
 800aa08:	d02c      	beq.n	800aa64 <__ssputs_r+0xa8>
 800aa0a:	9a01      	ldr	r2, [sp, #4]
 800aa0c:	6921      	ldr	r1, [r4, #16]
 800aa0e:	f7ff ff81 	bl	800a914 <memcpy>
 800aa12:	89a2      	ldrh	r2, [r4, #12]
 800aa14:	4b18      	ldr	r3, [pc, #96]	@ (800aa78 <__ssputs_r+0xbc>)
 800aa16:	401a      	ands	r2, r3
 800aa18:	2380      	movs	r3, #128	@ 0x80
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	6126      	str	r6, [r4, #16]
 800aa22:	18f6      	adds	r6, r6, r3
 800aa24:	6026      	str	r6, [r4, #0]
 800aa26:	003e      	movs	r6, r7
 800aa28:	6165      	str	r5, [r4, #20]
 800aa2a:	1aed      	subs	r5, r5, r3
 800aa2c:	60a5      	str	r5, [r4, #8]
 800aa2e:	42be      	cmp	r6, r7
 800aa30:	d900      	bls.n	800aa34 <__ssputs_r+0x78>
 800aa32:	003e      	movs	r6, r7
 800aa34:	0032      	movs	r2, r6
 800aa36:	9903      	ldr	r1, [sp, #12]
 800aa38:	6820      	ldr	r0, [r4, #0]
 800aa3a:	f000 fb7c 	bl	800b136 <memmove>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	68a3      	ldr	r3, [r4, #8]
 800aa42:	1b9b      	subs	r3, r3, r6
 800aa44:	60a3      	str	r3, [r4, #8]
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	199b      	adds	r3, r3, r6
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	b005      	add	sp, #20
 800aa4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa50:	002a      	movs	r2, r5
 800aa52:	9802      	ldr	r0, [sp, #8]
 800aa54:	f000 fb40 	bl	800b0d8 <_realloc_r>
 800aa58:	1e06      	subs	r6, r0, #0
 800aa5a:	d1e0      	bne.n	800aa1e <__ssputs_r+0x62>
 800aa5c:	6921      	ldr	r1, [r4, #16]
 800aa5e:	9802      	ldr	r0, [sp, #8]
 800aa60:	f7ff ff62 	bl	800a928 <_free_r>
 800aa64:	230c      	movs	r3, #12
 800aa66:	2001      	movs	r0, #1
 800aa68:	9a02      	ldr	r2, [sp, #8]
 800aa6a:	4240      	negs	r0, r0
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	89a2      	ldrh	r2, [r4, #12]
 800aa70:	3334      	adds	r3, #52	@ 0x34
 800aa72:	4313      	orrs	r3, r2
 800aa74:	81a3      	strh	r3, [r4, #12]
 800aa76:	e7e9      	b.n	800aa4c <__ssputs_r+0x90>
 800aa78:	fffffb7f 	.word	0xfffffb7f

0800aa7c <_svfiprintf_r>:
 800aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa7e:	b0a1      	sub	sp, #132	@ 0x84
 800aa80:	9003      	str	r0, [sp, #12]
 800aa82:	001d      	movs	r5, r3
 800aa84:	898b      	ldrh	r3, [r1, #12]
 800aa86:	000f      	movs	r7, r1
 800aa88:	0016      	movs	r6, r2
 800aa8a:	061b      	lsls	r3, r3, #24
 800aa8c:	d511      	bpl.n	800aab2 <_svfiprintf_r+0x36>
 800aa8e:	690b      	ldr	r3, [r1, #16]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10e      	bne.n	800aab2 <_svfiprintf_r+0x36>
 800aa94:	2140      	movs	r1, #64	@ 0x40
 800aa96:	f000 f911 	bl	800acbc <_malloc_r>
 800aa9a:	6038      	str	r0, [r7, #0]
 800aa9c:	6138      	str	r0, [r7, #16]
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d105      	bne.n	800aaae <_svfiprintf_r+0x32>
 800aaa2:	230c      	movs	r3, #12
 800aaa4:	9a03      	ldr	r2, [sp, #12]
 800aaa6:	6013      	str	r3, [r2, #0]
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	4240      	negs	r0, r0
 800aaac:	e0cf      	b.n	800ac4e <_svfiprintf_r+0x1d2>
 800aaae:	2340      	movs	r3, #64	@ 0x40
 800aab0:	617b      	str	r3, [r7, #20]
 800aab2:	2300      	movs	r3, #0
 800aab4:	ac08      	add	r4, sp, #32
 800aab6:	6163      	str	r3, [r4, #20]
 800aab8:	3320      	adds	r3, #32
 800aaba:	7663      	strb	r3, [r4, #25]
 800aabc:	3310      	adds	r3, #16
 800aabe:	76a3      	strb	r3, [r4, #26]
 800aac0:	9507      	str	r5, [sp, #28]
 800aac2:	0035      	movs	r5, r6
 800aac4:	782b      	ldrb	r3, [r5, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <_svfiprintf_r+0x52>
 800aaca:	2b25      	cmp	r3, #37	@ 0x25
 800aacc:	d148      	bne.n	800ab60 <_svfiprintf_r+0xe4>
 800aace:	1bab      	subs	r3, r5, r6
 800aad0:	9305      	str	r3, [sp, #20]
 800aad2:	42b5      	cmp	r5, r6
 800aad4:	d00b      	beq.n	800aaee <_svfiprintf_r+0x72>
 800aad6:	0032      	movs	r2, r6
 800aad8:	0039      	movs	r1, r7
 800aada:	9803      	ldr	r0, [sp, #12]
 800aadc:	f7ff ff6e 	bl	800a9bc <__ssputs_r>
 800aae0:	3001      	adds	r0, #1
 800aae2:	d100      	bne.n	800aae6 <_svfiprintf_r+0x6a>
 800aae4:	e0ae      	b.n	800ac44 <_svfiprintf_r+0x1c8>
 800aae6:	6963      	ldr	r3, [r4, #20]
 800aae8:	9a05      	ldr	r2, [sp, #20]
 800aaea:	189b      	adds	r3, r3, r2
 800aaec:	6163      	str	r3, [r4, #20]
 800aaee:	782b      	ldrb	r3, [r5, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d100      	bne.n	800aaf6 <_svfiprintf_r+0x7a>
 800aaf4:	e0a6      	b.n	800ac44 <_svfiprintf_r+0x1c8>
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	2300      	movs	r3, #0
 800aafa:	4252      	negs	r2, r2
 800aafc:	6062      	str	r2, [r4, #4]
 800aafe:	a904      	add	r1, sp, #16
 800ab00:	3254      	adds	r2, #84	@ 0x54
 800ab02:	1852      	adds	r2, r2, r1
 800ab04:	1c6e      	adds	r6, r5, #1
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	60e3      	str	r3, [r4, #12]
 800ab0a:	60a3      	str	r3, [r4, #8]
 800ab0c:	7013      	strb	r3, [r2, #0]
 800ab0e:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ab10:	4b54      	ldr	r3, [pc, #336]	@ (800ac64 <_svfiprintf_r+0x1e8>)
 800ab12:	2205      	movs	r2, #5
 800ab14:	0018      	movs	r0, r3
 800ab16:	7831      	ldrb	r1, [r6, #0]
 800ab18:	9305      	str	r3, [sp, #20]
 800ab1a:	f000 fb31 	bl	800b180 <memchr>
 800ab1e:	1c75      	adds	r5, r6, #1
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d11f      	bne.n	800ab64 <_svfiprintf_r+0xe8>
 800ab24:	6822      	ldr	r2, [r4, #0]
 800ab26:	06d3      	lsls	r3, r2, #27
 800ab28:	d504      	bpl.n	800ab34 <_svfiprintf_r+0xb8>
 800ab2a:	2353      	movs	r3, #83	@ 0x53
 800ab2c:	a904      	add	r1, sp, #16
 800ab2e:	185b      	adds	r3, r3, r1
 800ab30:	2120      	movs	r1, #32
 800ab32:	7019      	strb	r1, [r3, #0]
 800ab34:	0713      	lsls	r3, r2, #28
 800ab36:	d504      	bpl.n	800ab42 <_svfiprintf_r+0xc6>
 800ab38:	2353      	movs	r3, #83	@ 0x53
 800ab3a:	a904      	add	r1, sp, #16
 800ab3c:	185b      	adds	r3, r3, r1
 800ab3e:	212b      	movs	r1, #43	@ 0x2b
 800ab40:	7019      	strb	r1, [r3, #0]
 800ab42:	7833      	ldrb	r3, [r6, #0]
 800ab44:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab46:	d016      	beq.n	800ab76 <_svfiprintf_r+0xfa>
 800ab48:	0035      	movs	r5, r6
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	200a      	movs	r0, #10
 800ab4e:	68e3      	ldr	r3, [r4, #12]
 800ab50:	782a      	ldrb	r2, [r5, #0]
 800ab52:	1c6e      	adds	r6, r5, #1
 800ab54:	3a30      	subs	r2, #48	@ 0x30
 800ab56:	2a09      	cmp	r2, #9
 800ab58:	d950      	bls.n	800abfc <_svfiprintf_r+0x180>
 800ab5a:	2900      	cmp	r1, #0
 800ab5c:	d111      	bne.n	800ab82 <_svfiprintf_r+0x106>
 800ab5e:	e017      	b.n	800ab90 <_svfiprintf_r+0x114>
 800ab60:	3501      	adds	r5, #1
 800ab62:	e7af      	b.n	800aac4 <_svfiprintf_r+0x48>
 800ab64:	9b05      	ldr	r3, [sp, #20]
 800ab66:	6822      	ldr	r2, [r4, #0]
 800ab68:	1ac0      	subs	r0, r0, r3
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	4083      	lsls	r3, r0
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	002e      	movs	r6, r5
 800ab72:	6023      	str	r3, [r4, #0]
 800ab74:	e7cc      	b.n	800ab10 <_svfiprintf_r+0x94>
 800ab76:	9b07      	ldr	r3, [sp, #28]
 800ab78:	1d19      	adds	r1, r3, #4
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	9107      	str	r1, [sp, #28]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	db01      	blt.n	800ab86 <_svfiprintf_r+0x10a>
 800ab82:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab84:	e004      	b.n	800ab90 <_svfiprintf_r+0x114>
 800ab86:	425b      	negs	r3, r3
 800ab88:	60e3      	str	r3, [r4, #12]
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	6023      	str	r3, [r4, #0]
 800ab90:	782b      	ldrb	r3, [r5, #0]
 800ab92:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab94:	d10c      	bne.n	800abb0 <_svfiprintf_r+0x134>
 800ab96:	786b      	ldrb	r3, [r5, #1]
 800ab98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab9a:	d134      	bne.n	800ac06 <_svfiprintf_r+0x18a>
 800ab9c:	9b07      	ldr	r3, [sp, #28]
 800ab9e:	3502      	adds	r5, #2
 800aba0:	1d1a      	adds	r2, r3, #4
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	9207      	str	r2, [sp, #28]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	da01      	bge.n	800abae <_svfiprintf_r+0x132>
 800abaa:	2301      	movs	r3, #1
 800abac:	425b      	negs	r3, r3
 800abae:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb0:	4e2d      	ldr	r6, [pc, #180]	@ (800ac68 <_svfiprintf_r+0x1ec>)
 800abb2:	2203      	movs	r2, #3
 800abb4:	0030      	movs	r0, r6
 800abb6:	7829      	ldrb	r1, [r5, #0]
 800abb8:	f000 fae2 	bl	800b180 <memchr>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d006      	beq.n	800abce <_svfiprintf_r+0x152>
 800abc0:	2340      	movs	r3, #64	@ 0x40
 800abc2:	1b80      	subs	r0, r0, r6
 800abc4:	4083      	lsls	r3, r0
 800abc6:	6822      	ldr	r2, [r4, #0]
 800abc8:	3501      	adds	r5, #1
 800abca:	4313      	orrs	r3, r2
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	7829      	ldrb	r1, [r5, #0]
 800abd0:	2206      	movs	r2, #6
 800abd2:	4826      	ldr	r0, [pc, #152]	@ (800ac6c <_svfiprintf_r+0x1f0>)
 800abd4:	1c6e      	adds	r6, r5, #1
 800abd6:	7621      	strb	r1, [r4, #24]
 800abd8:	f000 fad2 	bl	800b180 <memchr>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d038      	beq.n	800ac52 <_svfiprintf_r+0x1d6>
 800abe0:	4b23      	ldr	r3, [pc, #140]	@ (800ac70 <_svfiprintf_r+0x1f4>)
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d122      	bne.n	800ac2c <_svfiprintf_r+0x1b0>
 800abe6:	2207      	movs	r2, #7
 800abe8:	9b07      	ldr	r3, [sp, #28]
 800abea:	3307      	adds	r3, #7
 800abec:	4393      	bics	r3, r2
 800abee:	3308      	adds	r3, #8
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	6963      	ldr	r3, [r4, #20]
 800abf4:	9a04      	ldr	r2, [sp, #16]
 800abf6:	189b      	adds	r3, r3, r2
 800abf8:	6163      	str	r3, [r4, #20]
 800abfa:	e762      	b.n	800aac2 <_svfiprintf_r+0x46>
 800abfc:	4343      	muls	r3, r0
 800abfe:	0035      	movs	r5, r6
 800ac00:	2101      	movs	r1, #1
 800ac02:	189b      	adds	r3, r3, r2
 800ac04:	e7a4      	b.n	800ab50 <_svfiprintf_r+0xd4>
 800ac06:	2300      	movs	r3, #0
 800ac08:	200a      	movs	r0, #10
 800ac0a:	0019      	movs	r1, r3
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	6063      	str	r3, [r4, #4]
 800ac10:	782a      	ldrb	r2, [r5, #0]
 800ac12:	1c6e      	adds	r6, r5, #1
 800ac14:	3a30      	subs	r2, #48	@ 0x30
 800ac16:	2a09      	cmp	r2, #9
 800ac18:	d903      	bls.n	800ac22 <_svfiprintf_r+0x1a6>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0c8      	beq.n	800abb0 <_svfiprintf_r+0x134>
 800ac1e:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac20:	e7c6      	b.n	800abb0 <_svfiprintf_r+0x134>
 800ac22:	4341      	muls	r1, r0
 800ac24:	0035      	movs	r5, r6
 800ac26:	2301      	movs	r3, #1
 800ac28:	1889      	adds	r1, r1, r2
 800ac2a:	e7f1      	b.n	800ac10 <_svfiprintf_r+0x194>
 800ac2c:	aa07      	add	r2, sp, #28
 800ac2e:	9200      	str	r2, [sp, #0]
 800ac30:	0021      	movs	r1, r4
 800ac32:	003a      	movs	r2, r7
 800ac34:	4b0f      	ldr	r3, [pc, #60]	@ (800ac74 <_svfiprintf_r+0x1f8>)
 800ac36:	9803      	ldr	r0, [sp, #12]
 800ac38:	e000      	b.n	800ac3c <_svfiprintf_r+0x1c0>
 800ac3a:	bf00      	nop
 800ac3c:	9004      	str	r0, [sp, #16]
 800ac3e:	9b04      	ldr	r3, [sp, #16]
 800ac40:	3301      	adds	r3, #1
 800ac42:	d1d6      	bne.n	800abf2 <_svfiprintf_r+0x176>
 800ac44:	89bb      	ldrh	r3, [r7, #12]
 800ac46:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ac48:	065b      	lsls	r3, r3, #25
 800ac4a:	d500      	bpl.n	800ac4e <_svfiprintf_r+0x1d2>
 800ac4c:	e72c      	b.n	800aaa8 <_svfiprintf_r+0x2c>
 800ac4e:	b021      	add	sp, #132	@ 0x84
 800ac50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac52:	aa07      	add	r2, sp, #28
 800ac54:	9200      	str	r2, [sp, #0]
 800ac56:	0021      	movs	r1, r4
 800ac58:	003a      	movs	r2, r7
 800ac5a:	4b06      	ldr	r3, [pc, #24]	@ (800ac74 <_svfiprintf_r+0x1f8>)
 800ac5c:	9803      	ldr	r0, [sp, #12]
 800ac5e:	f000 f91d 	bl	800ae9c <_printf_i>
 800ac62:	e7eb      	b.n	800ac3c <_svfiprintf_r+0x1c0>
 800ac64:	0800b460 	.word	0x0800b460
 800ac68:	0800b466 	.word	0x0800b466
 800ac6c:	0800b46a 	.word	0x0800b46a
 800ac70:	00000000 	.word	0x00000000
 800ac74:	0800a9bd 	.word	0x0800a9bd

0800ac78 <sbrk_aligned>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	4e0f      	ldr	r6, [pc, #60]	@ (800acb8 <sbrk_aligned+0x40>)
 800ac7c:	000d      	movs	r5, r1
 800ac7e:	6831      	ldr	r1, [r6, #0]
 800ac80:	0004      	movs	r4, r0
 800ac82:	2900      	cmp	r1, #0
 800ac84:	d102      	bne.n	800ac8c <sbrk_aligned+0x14>
 800ac86:	f000 fa69 	bl	800b15c <_sbrk_r>
 800ac8a:	6030      	str	r0, [r6, #0]
 800ac8c:	0029      	movs	r1, r5
 800ac8e:	0020      	movs	r0, r4
 800ac90:	f000 fa64 	bl	800b15c <_sbrk_r>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d103      	bne.n	800aca0 <sbrk_aligned+0x28>
 800ac98:	2501      	movs	r5, #1
 800ac9a:	426d      	negs	r5, r5
 800ac9c:	0028      	movs	r0, r5
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	2303      	movs	r3, #3
 800aca2:	1cc5      	adds	r5, r0, #3
 800aca4:	439d      	bics	r5, r3
 800aca6:	42a8      	cmp	r0, r5
 800aca8:	d0f8      	beq.n	800ac9c <sbrk_aligned+0x24>
 800acaa:	1a29      	subs	r1, r5, r0
 800acac:	0020      	movs	r0, r4
 800acae:	f000 fa55 	bl	800b15c <_sbrk_r>
 800acb2:	3001      	adds	r0, #1
 800acb4:	d1f2      	bne.n	800ac9c <sbrk_aligned+0x24>
 800acb6:	e7ef      	b.n	800ac98 <sbrk_aligned+0x20>
 800acb8:	20001db4 	.word	0x20001db4

0800acbc <_malloc_r>:
 800acbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acbe:	2203      	movs	r2, #3
 800acc0:	1ccb      	adds	r3, r1, #3
 800acc2:	4393      	bics	r3, r2
 800acc4:	3308      	adds	r3, #8
 800acc6:	0005      	movs	r5, r0
 800acc8:	001f      	movs	r7, r3
 800acca:	2b0c      	cmp	r3, #12
 800accc:	d234      	bcs.n	800ad38 <_malloc_r+0x7c>
 800acce:	270c      	movs	r7, #12
 800acd0:	42b9      	cmp	r1, r7
 800acd2:	d833      	bhi.n	800ad3c <_malloc_r+0x80>
 800acd4:	0028      	movs	r0, r5
 800acd6:	f000 f9ef 	bl	800b0b8 <__malloc_lock>
 800acda:	4e37      	ldr	r6, [pc, #220]	@ (800adb8 <_malloc_r+0xfc>)
 800acdc:	6833      	ldr	r3, [r6, #0]
 800acde:	001c      	movs	r4, r3
 800ace0:	2c00      	cmp	r4, #0
 800ace2:	d12f      	bne.n	800ad44 <_malloc_r+0x88>
 800ace4:	0039      	movs	r1, r7
 800ace6:	0028      	movs	r0, r5
 800ace8:	f7ff ffc6 	bl	800ac78 <sbrk_aligned>
 800acec:	0004      	movs	r4, r0
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	d15f      	bne.n	800adb2 <_malloc_r+0xf6>
 800acf2:	6834      	ldr	r4, [r6, #0]
 800acf4:	9400      	str	r4, [sp, #0]
 800acf6:	9b00      	ldr	r3, [sp, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d14a      	bne.n	800ad92 <_malloc_r+0xd6>
 800acfc:	2c00      	cmp	r4, #0
 800acfe:	d052      	beq.n	800ada6 <_malloc_r+0xea>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	0028      	movs	r0, r5
 800ad04:	18e3      	adds	r3, r4, r3
 800ad06:	9900      	ldr	r1, [sp, #0]
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	f000 fa27 	bl	800b15c <_sbrk_r>
 800ad0e:	9b01      	ldr	r3, [sp, #4]
 800ad10:	4283      	cmp	r3, r0
 800ad12:	d148      	bne.n	800ada6 <_malloc_r+0xea>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	0028      	movs	r0, r5
 800ad18:	1aff      	subs	r7, r7, r3
 800ad1a:	0039      	movs	r1, r7
 800ad1c:	f7ff ffac 	bl	800ac78 <sbrk_aligned>
 800ad20:	3001      	adds	r0, #1
 800ad22:	d040      	beq.n	800ada6 <_malloc_r+0xea>
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	19db      	adds	r3, r3, r7
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	6833      	ldr	r3, [r6, #0]
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	2a00      	cmp	r2, #0
 800ad30:	d133      	bne.n	800ad9a <_malloc_r+0xde>
 800ad32:	9b00      	ldr	r3, [sp, #0]
 800ad34:	6033      	str	r3, [r6, #0]
 800ad36:	e019      	b.n	800ad6c <_malloc_r+0xb0>
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dac9      	bge.n	800acd0 <_malloc_r+0x14>
 800ad3c:	230c      	movs	r3, #12
 800ad3e:	602b      	str	r3, [r5, #0]
 800ad40:	2000      	movs	r0, #0
 800ad42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad44:	6821      	ldr	r1, [r4, #0]
 800ad46:	1bc9      	subs	r1, r1, r7
 800ad48:	d420      	bmi.n	800ad8c <_malloc_r+0xd0>
 800ad4a:	290b      	cmp	r1, #11
 800ad4c:	d90a      	bls.n	800ad64 <_malloc_r+0xa8>
 800ad4e:	19e2      	adds	r2, r4, r7
 800ad50:	6027      	str	r7, [r4, #0]
 800ad52:	42a3      	cmp	r3, r4
 800ad54:	d104      	bne.n	800ad60 <_malloc_r+0xa4>
 800ad56:	6032      	str	r2, [r6, #0]
 800ad58:	6863      	ldr	r3, [r4, #4]
 800ad5a:	6011      	str	r1, [r2, #0]
 800ad5c:	6053      	str	r3, [r2, #4]
 800ad5e:	e005      	b.n	800ad6c <_malloc_r+0xb0>
 800ad60:	605a      	str	r2, [r3, #4]
 800ad62:	e7f9      	b.n	800ad58 <_malloc_r+0x9c>
 800ad64:	6862      	ldr	r2, [r4, #4]
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	d10e      	bne.n	800ad88 <_malloc_r+0xcc>
 800ad6a:	6032      	str	r2, [r6, #0]
 800ad6c:	0028      	movs	r0, r5
 800ad6e:	f000 f9ab 	bl	800b0c8 <__malloc_unlock>
 800ad72:	0020      	movs	r0, r4
 800ad74:	2207      	movs	r2, #7
 800ad76:	300b      	adds	r0, #11
 800ad78:	1d23      	adds	r3, r4, #4
 800ad7a:	4390      	bics	r0, r2
 800ad7c:	1ac2      	subs	r2, r0, r3
 800ad7e:	4298      	cmp	r0, r3
 800ad80:	d0df      	beq.n	800ad42 <_malloc_r+0x86>
 800ad82:	1a1b      	subs	r3, r3, r0
 800ad84:	50a3      	str	r3, [r4, r2]
 800ad86:	e7dc      	b.n	800ad42 <_malloc_r+0x86>
 800ad88:	605a      	str	r2, [r3, #4]
 800ad8a:	e7ef      	b.n	800ad6c <_malloc_r+0xb0>
 800ad8c:	0023      	movs	r3, r4
 800ad8e:	6864      	ldr	r4, [r4, #4]
 800ad90:	e7a6      	b.n	800ace0 <_malloc_r+0x24>
 800ad92:	9c00      	ldr	r4, [sp, #0]
 800ad94:	6863      	ldr	r3, [r4, #4]
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	e7ad      	b.n	800acf6 <_malloc_r+0x3a>
 800ad9a:	001a      	movs	r2, r3
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	42a3      	cmp	r3, r4
 800ada0:	d1fb      	bne.n	800ad9a <_malloc_r+0xde>
 800ada2:	2300      	movs	r3, #0
 800ada4:	e7da      	b.n	800ad5c <_malloc_r+0xa0>
 800ada6:	230c      	movs	r3, #12
 800ada8:	0028      	movs	r0, r5
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f000 f98c 	bl	800b0c8 <__malloc_unlock>
 800adb0:	e7c6      	b.n	800ad40 <_malloc_r+0x84>
 800adb2:	6007      	str	r7, [r0, #0]
 800adb4:	e7da      	b.n	800ad6c <_malloc_r+0xb0>
 800adb6:	46c0      	nop			@ (mov r8, r8)
 800adb8:	20001db8 	.word	0x20001db8

0800adbc <_printf_common>:
 800adbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adbe:	0016      	movs	r6, r2
 800adc0:	9301      	str	r3, [sp, #4]
 800adc2:	688a      	ldr	r2, [r1, #8]
 800adc4:	690b      	ldr	r3, [r1, #16]
 800adc6:	000c      	movs	r4, r1
 800adc8:	9000      	str	r0, [sp, #0]
 800adca:	4293      	cmp	r3, r2
 800adcc:	da00      	bge.n	800add0 <_printf_common+0x14>
 800adce:	0013      	movs	r3, r2
 800add0:	0022      	movs	r2, r4
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	3243      	adds	r2, #67	@ 0x43
 800add6:	7812      	ldrb	r2, [r2, #0]
 800add8:	2a00      	cmp	r2, #0
 800adda:	d001      	beq.n	800ade0 <_printf_common+0x24>
 800addc:	3301      	adds	r3, #1
 800adde:	6033      	str	r3, [r6, #0]
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	069b      	lsls	r3, r3, #26
 800ade4:	d502      	bpl.n	800adec <_printf_common+0x30>
 800ade6:	6833      	ldr	r3, [r6, #0]
 800ade8:	3302      	adds	r3, #2
 800adea:	6033      	str	r3, [r6, #0]
 800adec:	6822      	ldr	r2, [r4, #0]
 800adee:	2306      	movs	r3, #6
 800adf0:	0015      	movs	r5, r2
 800adf2:	401d      	ands	r5, r3
 800adf4:	421a      	tst	r2, r3
 800adf6:	d027      	beq.n	800ae48 <_printf_common+0x8c>
 800adf8:	0023      	movs	r3, r4
 800adfa:	3343      	adds	r3, #67	@ 0x43
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	1e5a      	subs	r2, r3, #1
 800ae00:	4193      	sbcs	r3, r2
 800ae02:	6822      	ldr	r2, [r4, #0]
 800ae04:	0692      	lsls	r2, r2, #26
 800ae06:	d430      	bmi.n	800ae6a <_printf_common+0xae>
 800ae08:	0022      	movs	r2, r4
 800ae0a:	9901      	ldr	r1, [sp, #4]
 800ae0c:	9800      	ldr	r0, [sp, #0]
 800ae0e:	9d08      	ldr	r5, [sp, #32]
 800ae10:	3243      	adds	r2, #67	@ 0x43
 800ae12:	47a8      	blx	r5
 800ae14:	3001      	adds	r0, #1
 800ae16:	d025      	beq.n	800ae64 <_printf_common+0xa8>
 800ae18:	2206      	movs	r2, #6
 800ae1a:	6823      	ldr	r3, [r4, #0]
 800ae1c:	2500      	movs	r5, #0
 800ae1e:	4013      	ands	r3, r2
 800ae20:	2b04      	cmp	r3, #4
 800ae22:	d105      	bne.n	800ae30 <_printf_common+0x74>
 800ae24:	6833      	ldr	r3, [r6, #0]
 800ae26:	68e5      	ldr	r5, [r4, #12]
 800ae28:	1aed      	subs	r5, r5, r3
 800ae2a:	43eb      	mvns	r3, r5
 800ae2c:	17db      	asrs	r3, r3, #31
 800ae2e:	401d      	ands	r5, r3
 800ae30:	68a3      	ldr	r3, [r4, #8]
 800ae32:	6922      	ldr	r2, [r4, #16]
 800ae34:	4293      	cmp	r3, r2
 800ae36:	dd01      	ble.n	800ae3c <_printf_common+0x80>
 800ae38:	1a9b      	subs	r3, r3, r2
 800ae3a:	18ed      	adds	r5, r5, r3
 800ae3c:	2600      	movs	r6, #0
 800ae3e:	42b5      	cmp	r5, r6
 800ae40:	d120      	bne.n	800ae84 <_printf_common+0xc8>
 800ae42:	2000      	movs	r0, #0
 800ae44:	e010      	b.n	800ae68 <_printf_common+0xac>
 800ae46:	3501      	adds	r5, #1
 800ae48:	68e3      	ldr	r3, [r4, #12]
 800ae4a:	6832      	ldr	r2, [r6, #0]
 800ae4c:	1a9b      	subs	r3, r3, r2
 800ae4e:	42ab      	cmp	r3, r5
 800ae50:	ddd2      	ble.n	800adf8 <_printf_common+0x3c>
 800ae52:	0022      	movs	r2, r4
 800ae54:	2301      	movs	r3, #1
 800ae56:	9901      	ldr	r1, [sp, #4]
 800ae58:	9800      	ldr	r0, [sp, #0]
 800ae5a:	9f08      	ldr	r7, [sp, #32]
 800ae5c:	3219      	adds	r2, #25
 800ae5e:	47b8      	blx	r7
 800ae60:	3001      	adds	r0, #1
 800ae62:	d1f0      	bne.n	800ae46 <_printf_common+0x8a>
 800ae64:	2001      	movs	r0, #1
 800ae66:	4240      	negs	r0, r0
 800ae68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae6a:	2030      	movs	r0, #48	@ 0x30
 800ae6c:	18e1      	adds	r1, r4, r3
 800ae6e:	3143      	adds	r1, #67	@ 0x43
 800ae70:	7008      	strb	r0, [r1, #0]
 800ae72:	0021      	movs	r1, r4
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	3145      	adds	r1, #69	@ 0x45
 800ae78:	7809      	ldrb	r1, [r1, #0]
 800ae7a:	18a2      	adds	r2, r4, r2
 800ae7c:	3243      	adds	r2, #67	@ 0x43
 800ae7e:	3302      	adds	r3, #2
 800ae80:	7011      	strb	r1, [r2, #0]
 800ae82:	e7c1      	b.n	800ae08 <_printf_common+0x4c>
 800ae84:	0022      	movs	r2, r4
 800ae86:	2301      	movs	r3, #1
 800ae88:	9901      	ldr	r1, [sp, #4]
 800ae8a:	9800      	ldr	r0, [sp, #0]
 800ae8c:	9f08      	ldr	r7, [sp, #32]
 800ae8e:	321a      	adds	r2, #26
 800ae90:	47b8      	blx	r7
 800ae92:	3001      	adds	r0, #1
 800ae94:	d0e6      	beq.n	800ae64 <_printf_common+0xa8>
 800ae96:	3601      	adds	r6, #1
 800ae98:	e7d1      	b.n	800ae3e <_printf_common+0x82>
	...

0800ae9c <_printf_i>:
 800ae9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae9e:	b08b      	sub	sp, #44	@ 0x2c
 800aea0:	9206      	str	r2, [sp, #24]
 800aea2:	000a      	movs	r2, r1
 800aea4:	3243      	adds	r2, #67	@ 0x43
 800aea6:	9307      	str	r3, [sp, #28]
 800aea8:	9005      	str	r0, [sp, #20]
 800aeaa:	9203      	str	r2, [sp, #12]
 800aeac:	7e0a      	ldrb	r2, [r1, #24]
 800aeae:	000c      	movs	r4, r1
 800aeb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aeb2:	2a78      	cmp	r2, #120	@ 0x78
 800aeb4:	d809      	bhi.n	800aeca <_printf_i+0x2e>
 800aeb6:	2a62      	cmp	r2, #98	@ 0x62
 800aeb8:	d80b      	bhi.n	800aed2 <_printf_i+0x36>
 800aeba:	2a00      	cmp	r2, #0
 800aebc:	d100      	bne.n	800aec0 <_printf_i+0x24>
 800aebe:	e0bc      	b.n	800b03a <_printf_i+0x19e>
 800aec0:	497b      	ldr	r1, [pc, #492]	@ (800b0b0 <_printf_i+0x214>)
 800aec2:	9104      	str	r1, [sp, #16]
 800aec4:	2a58      	cmp	r2, #88	@ 0x58
 800aec6:	d100      	bne.n	800aeca <_printf_i+0x2e>
 800aec8:	e090      	b.n	800afec <_printf_i+0x150>
 800aeca:	0025      	movs	r5, r4
 800aecc:	3542      	adds	r5, #66	@ 0x42
 800aece:	702a      	strb	r2, [r5, #0]
 800aed0:	e022      	b.n	800af18 <_printf_i+0x7c>
 800aed2:	0010      	movs	r0, r2
 800aed4:	3863      	subs	r0, #99	@ 0x63
 800aed6:	2815      	cmp	r0, #21
 800aed8:	d8f7      	bhi.n	800aeca <_printf_i+0x2e>
 800aeda:	f7f5 f915 	bl	8000108 <__gnu_thumb1_case_shi>
 800aede:	0016      	.short	0x0016
 800aee0:	fff6001f 	.word	0xfff6001f
 800aee4:	fff6fff6 	.word	0xfff6fff6
 800aee8:	001ffff6 	.word	0x001ffff6
 800aeec:	fff6fff6 	.word	0xfff6fff6
 800aef0:	fff6fff6 	.word	0xfff6fff6
 800aef4:	003600a1 	.word	0x003600a1
 800aef8:	fff60080 	.word	0xfff60080
 800aefc:	00b2fff6 	.word	0x00b2fff6
 800af00:	0036fff6 	.word	0x0036fff6
 800af04:	fff6fff6 	.word	0xfff6fff6
 800af08:	0084      	.short	0x0084
 800af0a:	0025      	movs	r5, r4
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	3542      	adds	r5, #66	@ 0x42
 800af10:	1d11      	adds	r1, r2, #4
 800af12:	6019      	str	r1, [r3, #0]
 800af14:	6813      	ldr	r3, [r2, #0]
 800af16:	702b      	strb	r3, [r5, #0]
 800af18:	2301      	movs	r3, #1
 800af1a:	e0a0      	b.n	800b05e <_printf_i+0x1c2>
 800af1c:	6818      	ldr	r0, [r3, #0]
 800af1e:	6809      	ldr	r1, [r1, #0]
 800af20:	1d02      	adds	r2, r0, #4
 800af22:	060d      	lsls	r5, r1, #24
 800af24:	d50b      	bpl.n	800af3e <_printf_i+0xa2>
 800af26:	6806      	ldr	r6, [r0, #0]
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	2e00      	cmp	r6, #0
 800af2c:	da03      	bge.n	800af36 <_printf_i+0x9a>
 800af2e:	232d      	movs	r3, #45	@ 0x2d
 800af30:	9a03      	ldr	r2, [sp, #12]
 800af32:	4276      	negs	r6, r6
 800af34:	7013      	strb	r3, [r2, #0]
 800af36:	4b5e      	ldr	r3, [pc, #376]	@ (800b0b0 <_printf_i+0x214>)
 800af38:	270a      	movs	r7, #10
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	e018      	b.n	800af70 <_printf_i+0xd4>
 800af3e:	6806      	ldr	r6, [r0, #0]
 800af40:	601a      	str	r2, [r3, #0]
 800af42:	0649      	lsls	r1, r1, #25
 800af44:	d5f1      	bpl.n	800af2a <_printf_i+0x8e>
 800af46:	b236      	sxth	r6, r6
 800af48:	e7ef      	b.n	800af2a <_printf_i+0x8e>
 800af4a:	6808      	ldr	r0, [r1, #0]
 800af4c:	6819      	ldr	r1, [r3, #0]
 800af4e:	c940      	ldmia	r1!, {r6}
 800af50:	0605      	lsls	r5, r0, #24
 800af52:	d402      	bmi.n	800af5a <_printf_i+0xbe>
 800af54:	0640      	lsls	r0, r0, #25
 800af56:	d500      	bpl.n	800af5a <_printf_i+0xbe>
 800af58:	b2b6      	uxth	r6, r6
 800af5a:	6019      	str	r1, [r3, #0]
 800af5c:	4b54      	ldr	r3, [pc, #336]	@ (800b0b0 <_printf_i+0x214>)
 800af5e:	270a      	movs	r7, #10
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	2a6f      	cmp	r2, #111	@ 0x6f
 800af64:	d100      	bne.n	800af68 <_printf_i+0xcc>
 800af66:	3f02      	subs	r7, #2
 800af68:	0023      	movs	r3, r4
 800af6a:	2200      	movs	r2, #0
 800af6c:	3343      	adds	r3, #67	@ 0x43
 800af6e:	701a      	strb	r2, [r3, #0]
 800af70:	6863      	ldr	r3, [r4, #4]
 800af72:	60a3      	str	r3, [r4, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	db03      	blt.n	800af80 <_printf_i+0xe4>
 800af78:	2104      	movs	r1, #4
 800af7a:	6822      	ldr	r2, [r4, #0]
 800af7c:	438a      	bics	r2, r1
 800af7e:	6022      	str	r2, [r4, #0]
 800af80:	2e00      	cmp	r6, #0
 800af82:	d102      	bne.n	800af8a <_printf_i+0xee>
 800af84:	9d03      	ldr	r5, [sp, #12]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00c      	beq.n	800afa4 <_printf_i+0x108>
 800af8a:	9d03      	ldr	r5, [sp, #12]
 800af8c:	0030      	movs	r0, r6
 800af8e:	0039      	movs	r1, r7
 800af90:	f7f5 f94a 	bl	8000228 <__aeabi_uidivmod>
 800af94:	9b04      	ldr	r3, [sp, #16]
 800af96:	3d01      	subs	r5, #1
 800af98:	5c5b      	ldrb	r3, [r3, r1]
 800af9a:	702b      	strb	r3, [r5, #0]
 800af9c:	0033      	movs	r3, r6
 800af9e:	0006      	movs	r6, r0
 800afa0:	429f      	cmp	r7, r3
 800afa2:	d9f3      	bls.n	800af8c <_printf_i+0xf0>
 800afa4:	2f08      	cmp	r7, #8
 800afa6:	d109      	bne.n	800afbc <_printf_i+0x120>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	07db      	lsls	r3, r3, #31
 800afac:	d506      	bpl.n	800afbc <_printf_i+0x120>
 800afae:	6862      	ldr	r2, [r4, #4]
 800afb0:	6923      	ldr	r3, [r4, #16]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	dc02      	bgt.n	800afbc <_printf_i+0x120>
 800afb6:	2330      	movs	r3, #48	@ 0x30
 800afb8:	3d01      	subs	r5, #1
 800afba:	702b      	strb	r3, [r5, #0]
 800afbc:	9b03      	ldr	r3, [sp, #12]
 800afbe:	1b5b      	subs	r3, r3, r5
 800afc0:	6123      	str	r3, [r4, #16]
 800afc2:	9b07      	ldr	r3, [sp, #28]
 800afc4:	0021      	movs	r1, r4
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	9805      	ldr	r0, [sp, #20]
 800afca:	9b06      	ldr	r3, [sp, #24]
 800afcc:	aa09      	add	r2, sp, #36	@ 0x24
 800afce:	f7ff fef5 	bl	800adbc <_printf_common>
 800afd2:	3001      	adds	r0, #1
 800afd4:	d148      	bne.n	800b068 <_printf_i+0x1cc>
 800afd6:	2001      	movs	r0, #1
 800afd8:	4240      	negs	r0, r0
 800afda:	b00b      	add	sp, #44	@ 0x2c
 800afdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afde:	2220      	movs	r2, #32
 800afe0:	6809      	ldr	r1, [r1, #0]
 800afe2:	430a      	orrs	r2, r1
 800afe4:	6022      	str	r2, [r4, #0]
 800afe6:	2278      	movs	r2, #120	@ 0x78
 800afe8:	4932      	ldr	r1, [pc, #200]	@ (800b0b4 <_printf_i+0x218>)
 800afea:	9104      	str	r1, [sp, #16]
 800afec:	0021      	movs	r1, r4
 800afee:	3145      	adds	r1, #69	@ 0x45
 800aff0:	700a      	strb	r2, [r1, #0]
 800aff2:	6819      	ldr	r1, [r3, #0]
 800aff4:	6822      	ldr	r2, [r4, #0]
 800aff6:	c940      	ldmia	r1!, {r6}
 800aff8:	0610      	lsls	r0, r2, #24
 800affa:	d402      	bmi.n	800b002 <_printf_i+0x166>
 800affc:	0650      	lsls	r0, r2, #25
 800affe:	d500      	bpl.n	800b002 <_printf_i+0x166>
 800b000:	b2b6      	uxth	r6, r6
 800b002:	6019      	str	r1, [r3, #0]
 800b004:	07d3      	lsls	r3, r2, #31
 800b006:	d502      	bpl.n	800b00e <_printf_i+0x172>
 800b008:	2320      	movs	r3, #32
 800b00a:	4313      	orrs	r3, r2
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	2e00      	cmp	r6, #0
 800b010:	d001      	beq.n	800b016 <_printf_i+0x17a>
 800b012:	2710      	movs	r7, #16
 800b014:	e7a8      	b.n	800af68 <_printf_i+0xcc>
 800b016:	2220      	movs	r2, #32
 800b018:	6823      	ldr	r3, [r4, #0]
 800b01a:	4393      	bics	r3, r2
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	e7f8      	b.n	800b012 <_printf_i+0x176>
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	680d      	ldr	r5, [r1, #0]
 800b024:	1d10      	adds	r0, r2, #4
 800b026:	6949      	ldr	r1, [r1, #20]
 800b028:	6018      	str	r0, [r3, #0]
 800b02a:	6813      	ldr	r3, [r2, #0]
 800b02c:	062e      	lsls	r6, r5, #24
 800b02e:	d501      	bpl.n	800b034 <_printf_i+0x198>
 800b030:	6019      	str	r1, [r3, #0]
 800b032:	e002      	b.n	800b03a <_printf_i+0x19e>
 800b034:	066d      	lsls	r5, r5, #25
 800b036:	d5fb      	bpl.n	800b030 <_printf_i+0x194>
 800b038:	8019      	strh	r1, [r3, #0]
 800b03a:	2300      	movs	r3, #0
 800b03c:	9d03      	ldr	r5, [sp, #12]
 800b03e:	6123      	str	r3, [r4, #16]
 800b040:	e7bf      	b.n	800afc2 <_printf_i+0x126>
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	1d11      	adds	r1, r2, #4
 800b046:	6019      	str	r1, [r3, #0]
 800b048:	6815      	ldr	r5, [r2, #0]
 800b04a:	2100      	movs	r1, #0
 800b04c:	0028      	movs	r0, r5
 800b04e:	6862      	ldr	r2, [r4, #4]
 800b050:	f000 f896 	bl	800b180 <memchr>
 800b054:	2800      	cmp	r0, #0
 800b056:	d001      	beq.n	800b05c <_printf_i+0x1c0>
 800b058:	1b40      	subs	r0, r0, r5
 800b05a:	6060      	str	r0, [r4, #4]
 800b05c:	6863      	ldr	r3, [r4, #4]
 800b05e:	6123      	str	r3, [r4, #16]
 800b060:	2300      	movs	r3, #0
 800b062:	9a03      	ldr	r2, [sp, #12]
 800b064:	7013      	strb	r3, [r2, #0]
 800b066:	e7ac      	b.n	800afc2 <_printf_i+0x126>
 800b068:	002a      	movs	r2, r5
 800b06a:	6923      	ldr	r3, [r4, #16]
 800b06c:	9906      	ldr	r1, [sp, #24]
 800b06e:	9805      	ldr	r0, [sp, #20]
 800b070:	9d07      	ldr	r5, [sp, #28]
 800b072:	47a8      	blx	r5
 800b074:	3001      	adds	r0, #1
 800b076:	d0ae      	beq.n	800afd6 <_printf_i+0x13a>
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	079b      	lsls	r3, r3, #30
 800b07c:	d415      	bmi.n	800b0aa <_printf_i+0x20e>
 800b07e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b080:	68e0      	ldr	r0, [r4, #12]
 800b082:	4298      	cmp	r0, r3
 800b084:	daa9      	bge.n	800afda <_printf_i+0x13e>
 800b086:	0018      	movs	r0, r3
 800b088:	e7a7      	b.n	800afda <_printf_i+0x13e>
 800b08a:	0022      	movs	r2, r4
 800b08c:	2301      	movs	r3, #1
 800b08e:	9906      	ldr	r1, [sp, #24]
 800b090:	9805      	ldr	r0, [sp, #20]
 800b092:	9e07      	ldr	r6, [sp, #28]
 800b094:	3219      	adds	r2, #25
 800b096:	47b0      	blx	r6
 800b098:	3001      	adds	r0, #1
 800b09a:	d09c      	beq.n	800afd6 <_printf_i+0x13a>
 800b09c:	3501      	adds	r5, #1
 800b09e:	68e3      	ldr	r3, [r4, #12]
 800b0a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0a2:	1a9b      	subs	r3, r3, r2
 800b0a4:	42ab      	cmp	r3, r5
 800b0a6:	dcf0      	bgt.n	800b08a <_printf_i+0x1ee>
 800b0a8:	e7e9      	b.n	800b07e <_printf_i+0x1e2>
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	e7f7      	b.n	800b09e <_printf_i+0x202>
 800b0ae:	46c0      	nop			@ (mov r8, r8)
 800b0b0:	0800b471 	.word	0x0800b471
 800b0b4:	0800b482 	.word	0x0800b482

0800b0b8 <__malloc_lock>:
 800b0b8:	b510      	push	{r4, lr}
 800b0ba:	4802      	ldr	r0, [pc, #8]	@ (800b0c4 <__malloc_lock+0xc>)
 800b0bc:	f7ff fc28 	bl	800a910 <__retarget_lock_acquire_recursive>
 800b0c0:	bd10      	pop	{r4, pc}
 800b0c2:	46c0      	nop			@ (mov r8, r8)
 800b0c4:	20001db0 	.word	0x20001db0

0800b0c8 <__malloc_unlock>:
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	4802      	ldr	r0, [pc, #8]	@ (800b0d4 <__malloc_unlock+0xc>)
 800b0cc:	f7ff fc21 	bl	800a912 <__retarget_lock_release_recursive>
 800b0d0:	bd10      	pop	{r4, pc}
 800b0d2:	46c0      	nop			@ (mov r8, r8)
 800b0d4:	20001db0 	.word	0x20001db0

0800b0d8 <_realloc_r>:
 800b0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0da:	0006      	movs	r6, r0
 800b0dc:	000c      	movs	r4, r1
 800b0de:	0015      	movs	r5, r2
 800b0e0:	2900      	cmp	r1, #0
 800b0e2:	d105      	bne.n	800b0f0 <_realloc_r+0x18>
 800b0e4:	0011      	movs	r1, r2
 800b0e6:	f7ff fde9 	bl	800acbc <_malloc_r>
 800b0ea:	0004      	movs	r4, r0
 800b0ec:	0020      	movs	r0, r4
 800b0ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0f0:	2a00      	cmp	r2, #0
 800b0f2:	d103      	bne.n	800b0fc <_realloc_r+0x24>
 800b0f4:	f7ff fc18 	bl	800a928 <_free_r>
 800b0f8:	2400      	movs	r4, #0
 800b0fa:	e7f7      	b.n	800b0ec <_realloc_r+0x14>
 800b0fc:	f000 f84b 	bl	800b196 <_malloc_usable_size_r>
 800b100:	0007      	movs	r7, r0
 800b102:	4285      	cmp	r5, r0
 800b104:	d802      	bhi.n	800b10c <_realloc_r+0x34>
 800b106:	0843      	lsrs	r3, r0, #1
 800b108:	42ab      	cmp	r3, r5
 800b10a:	d3ef      	bcc.n	800b0ec <_realloc_r+0x14>
 800b10c:	0029      	movs	r1, r5
 800b10e:	0030      	movs	r0, r6
 800b110:	f7ff fdd4 	bl	800acbc <_malloc_r>
 800b114:	9001      	str	r0, [sp, #4]
 800b116:	2800      	cmp	r0, #0
 800b118:	d0ee      	beq.n	800b0f8 <_realloc_r+0x20>
 800b11a:	002a      	movs	r2, r5
 800b11c:	42bd      	cmp	r5, r7
 800b11e:	d900      	bls.n	800b122 <_realloc_r+0x4a>
 800b120:	003a      	movs	r2, r7
 800b122:	0021      	movs	r1, r4
 800b124:	9801      	ldr	r0, [sp, #4]
 800b126:	f7ff fbf5 	bl	800a914 <memcpy>
 800b12a:	0021      	movs	r1, r4
 800b12c:	0030      	movs	r0, r6
 800b12e:	f7ff fbfb 	bl	800a928 <_free_r>
 800b132:	9c01      	ldr	r4, [sp, #4]
 800b134:	e7da      	b.n	800b0ec <_realloc_r+0x14>

0800b136 <memmove>:
 800b136:	b510      	push	{r4, lr}
 800b138:	4288      	cmp	r0, r1
 800b13a:	d806      	bhi.n	800b14a <memmove+0x14>
 800b13c:	2300      	movs	r3, #0
 800b13e:	429a      	cmp	r2, r3
 800b140:	d008      	beq.n	800b154 <memmove+0x1e>
 800b142:	5ccc      	ldrb	r4, [r1, r3]
 800b144:	54c4      	strb	r4, [r0, r3]
 800b146:	3301      	adds	r3, #1
 800b148:	e7f9      	b.n	800b13e <memmove+0x8>
 800b14a:	188b      	adds	r3, r1, r2
 800b14c:	4298      	cmp	r0, r3
 800b14e:	d2f5      	bcs.n	800b13c <memmove+0x6>
 800b150:	3a01      	subs	r2, #1
 800b152:	d200      	bcs.n	800b156 <memmove+0x20>
 800b154:	bd10      	pop	{r4, pc}
 800b156:	5c8b      	ldrb	r3, [r1, r2]
 800b158:	5483      	strb	r3, [r0, r2]
 800b15a:	e7f9      	b.n	800b150 <memmove+0x1a>

0800b15c <_sbrk_r>:
 800b15c:	2300      	movs	r3, #0
 800b15e:	b570      	push	{r4, r5, r6, lr}
 800b160:	4d06      	ldr	r5, [pc, #24]	@ (800b17c <_sbrk_r+0x20>)
 800b162:	0004      	movs	r4, r0
 800b164:	0008      	movs	r0, r1
 800b166:	602b      	str	r3, [r5, #0]
 800b168:	f7f5 ff9a 	bl	80010a0 <_sbrk>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d103      	bne.n	800b178 <_sbrk_r+0x1c>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d000      	beq.n	800b178 <_sbrk_r+0x1c>
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	bd70      	pop	{r4, r5, r6, pc}
 800b17a:	46c0      	nop			@ (mov r8, r8)
 800b17c:	20001dac 	.word	0x20001dac

0800b180 <memchr>:
 800b180:	b2c9      	uxtb	r1, r1
 800b182:	1882      	adds	r2, r0, r2
 800b184:	4290      	cmp	r0, r2
 800b186:	d101      	bne.n	800b18c <memchr+0xc>
 800b188:	2000      	movs	r0, #0
 800b18a:	4770      	bx	lr
 800b18c:	7803      	ldrb	r3, [r0, #0]
 800b18e:	428b      	cmp	r3, r1
 800b190:	d0fb      	beq.n	800b18a <memchr+0xa>
 800b192:	3001      	adds	r0, #1
 800b194:	e7f6      	b.n	800b184 <memchr+0x4>

0800b196 <_malloc_usable_size_r>:
 800b196:	1f0b      	subs	r3, r1, #4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	1f18      	subs	r0, r3, #4
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	da01      	bge.n	800b1a4 <_malloc_usable_size_r+0xe>
 800b1a0:	580b      	ldr	r3, [r1, r0]
 800b1a2:	18c0      	adds	r0, r0, r3
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <_init>:
 800b1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1aa:	46c0      	nop			@ (mov r8, r8)
 800b1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ae:	bc08      	pop	{r3}
 800b1b0:	469e      	mov	lr, r3
 800b1b2:	4770      	bx	lr

0800b1b4 <_fini>:
 800b1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b6:	46c0      	nop			@ (mov r8, r8)
 800b1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ba:	bc08      	pop	{r3}
 800b1bc:	469e      	mov	lr, r3
 800b1be:	4770      	bx	lr
