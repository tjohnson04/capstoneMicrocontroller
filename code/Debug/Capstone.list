
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5a0  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  0800b660  0800b660  0000c660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd24  0800bd24  0000d134  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd24  0800bd24  0000d134  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd24  0800bd24  0000d134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd24  0800bd24  0000cd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd28  0800bd28  0000cd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  0800bd2c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011f8  20000134  0800be60  0000d134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000132c  0800be60  0000d32c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000256a2  00000000  00000000  0000d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054b4  00000000  00000000  000327fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f80  00000000  00000000  00037cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000188f  00000000  00000000  00039c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc0f  00000000  00000000  0003b4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b3c5  00000000  00000000  000590d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a99fc  00000000  00000000  0008449b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012de97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007680  00000000  00000000  0012dedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0013555c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000134 	.word	0x20000134
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b648 	.word	0x0800b648

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000138 	.word	0x20000138
 8000104:	0800b648 	.word	0x0800b648

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	0018      	movs	r0, r3
 8000412:	230c      	movs	r3, #12
 8000414:	001a      	movs	r2, r3
 8000416:	2100      	movs	r1, #0
 8000418:	f00a fc98 	bl	800ad4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800041c:	4b2d      	ldr	r3, [pc, #180]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800041e:	4a2e      	ldr	r2, [pc, #184]	@ (80004d8 <MX_ADC1_Init+0xd0>)
 8000420:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000422:	4b2c      	ldr	r3, [pc, #176]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000424:	2280      	movs	r2, #128	@ 0x80
 8000426:	05d2      	lsls	r2, r2, #23
 8000428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800042a:	4b2a      	ldr	r3, [pc, #168]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000430:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000436:	4b27      	ldr	r3, [pc, #156]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800043c:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800043e:	2204      	movs	r2, #4
 8000440:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000444:	2200      	movs	r2, #0
 8000446:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000448:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800044a:	2200      	movs	r2, #0
 800044c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800044e:	4b21      	ldr	r3, [pc, #132]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000454:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000456:	2201      	movs	r2, #1
 8000458:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800045a:	4b1e      	ldr	r3, [pc, #120]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800045c:	2220      	movs	r2, #32
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000462:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000464:	2200      	movs	r2, #0
 8000466:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000468:	4b1a      	ldr	r3, [pc, #104]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800046a:	2200      	movs	r2, #0
 800046c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800046e:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000470:	222c      	movs	r2, #44	@ 0x2c
 8000472:	2100      	movs	r1, #0
 8000474:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000476:	4b17      	ldr	r3, [pc, #92]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000478:	2200      	movs	r2, #0
 800047a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000482:	4b14      	ldr	r3, [pc, #80]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000484:	2200      	movs	r2, #0
 8000486:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000488:	4b12      	ldr	r3, [pc, #72]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 800048a:	223c      	movs	r2, #60	@ 0x3c
 800048c:	2100      	movs	r1, #0
 800048e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000490:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000492:	2200      	movs	r2, #0
 8000494:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000496:	4b0f      	ldr	r3, [pc, #60]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fa0b 	bl	80018b4 <HAL_ADC_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004a2:	f000 fcc1 	bl	8000e28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2201      	movs	r2, #1
 80004aa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b8:	1d3a      	adds	r2, r7, #4
 80004ba:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_ADC1_Init+0xcc>)
 80004bc:	0011      	movs	r1, r2
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fba0 	bl	8001c04 <HAL_ADC_ConfigChannel>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004c8:	f000 fcae 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b004      	add	sp, #16
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000150 	.word	0x20000150
 80004d8:	40012400 	.word	0x40012400

080004dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b08b      	sub	sp, #44	@ 0x2c
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e4:	2414      	movs	r4, #20
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2314      	movs	r3, #20
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f00a fc2c 	bl	800ad4c <memset>
  if(adcHandle->Instance==ADC1)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a18      	ldr	r2, [pc, #96]	@ (800055c <HAL_ADC_MspInit+0x80>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d129      	bne.n	8000552 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004fe:	4b18      	ldr	r3, [pc, #96]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000500:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000502:	4b17      	ldr	r3, [pc, #92]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000504:	2180      	movs	r1, #128	@ 0x80
 8000506:	0349      	lsls	r1, r1, #13
 8000508:	430a      	orrs	r2, r1
 800050a:	641a      	str	r2, [r3, #64]	@ 0x40
 800050c:	4b14      	ldr	r3, [pc, #80]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 800050e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	035b      	lsls	r3, r3, #13
 8000514:	4013      	ands	r3, r2
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 800051c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051e:	4b10      	ldr	r3, [pc, #64]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <HAL_ADC_MspInit+0x84>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2203      	movs	r2, #3
 800053c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	193a      	adds	r2, r7, r4
 8000546:	23a0      	movs	r3, #160	@ 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	0011      	movs	r1, r2
 800054c:	0018      	movs	r0, r3
 800054e:	f001 fe55 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b00b      	add	sp, #44	@ 0x2c
 8000558:	bd90      	pop	{r4, r7, pc}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	40012400 	.word	0x40012400
 8000560:	40021000 	.word	0x40021000

08000564 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b08b      	sub	sp, #44	@ 0x2c
 8000568:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	2414      	movs	r4, #20
 800056c:	193b      	adds	r3, r7, r4
 800056e:	0018      	movs	r0, r3
 8000570:	2314      	movs	r3, #20
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f00a fbe9 	bl	800ad4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b71      	ldr	r3, [pc, #452]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 800057c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800057e:	4b70      	ldr	r3, [pc, #448]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 8000580:	2104      	movs	r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	635a      	str	r2, [r3, #52]	@ 0x34
 8000586:	4b6e      	ldr	r3, [pc, #440]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 8000588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800058a:	2204      	movs	r2, #4
 800058c:	4013      	ands	r3, r2
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000592:	4b6b      	ldr	r3, [pc, #428]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 8000594:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000596:	4b6a      	ldr	r3, [pc, #424]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 8000598:	2120      	movs	r1, #32
 800059a:	430a      	orrs	r2, r1
 800059c:	635a      	str	r2, [r3, #52]	@ 0x34
 800059e:	4b68      	ldr	r3, [pc, #416]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005a2:	2220      	movs	r2, #32
 80005a4:	4013      	ands	r3, r2
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b65      	ldr	r3, [pc, #404]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005ae:	4b64      	ldr	r3, [pc, #400]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005b0:	2101      	movs	r1, #1
 80005b2:	430a      	orrs	r2, r1
 80005b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005b6:	4b62      	ldr	r3, [pc, #392]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ba:	2201      	movs	r2, #1
 80005bc:	4013      	ands	r3, r2
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c2:	4b5f      	ldr	r3, [pc, #380]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005c8:	2102      	movs	r1, #2
 80005ca:	430a      	orrs	r2, r1
 80005cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ce:	4b5c      	ldr	r3, [pc, #368]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005d2:	2202      	movs	r2, #2
 80005d4:	4013      	ands	r3, r2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005da:	4b59      	ldr	r3, [pc, #356]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005de:	4b58      	ldr	r3, [pc, #352]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005e0:	2108      	movs	r1, #8
 80005e2:	430a      	orrs	r2, r1
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005e6:	4b56      	ldr	r3, [pc, #344]	@ (8000740 <MX_GPIO_Init+0x1dc>)
 80005e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ea:	2208      	movs	r2, #8
 80005ec:	4013      	ands	r3, r2
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_NS_Pin|LED_Row13_Pin|LED_Row15_Pin|LED_Row4_Pin
 80005f2:	238f      	movs	r3, #143	@ 0x8f
 80005f4:	019b      	lsls	r3, r3, #6
 80005f6:	4853      	ldr	r0, [pc, #332]	@ (8000744 <MX_GPIO_Init+0x1e0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	0019      	movs	r1, r3
 80005fc:	f001 ff62 	bl	80024c4 <HAL_GPIO_WritePin>
                          |LED_Row2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Column8_Pin|LED_Column10_Pin|LED_Column12_Pin|LED_Column9_Pin
 8000600:	4951      	ldr	r1, [pc, #324]	@ (8000748 <MX_GPIO_Init+0x1e4>)
 8000602:	23a0      	movs	r3, #160	@ 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 ff5b 	bl	80024c4 <HAL_GPIO_WritePin>
                          |LED_Row9_Pin|LED_Row11_Pin|LED_Row10_Pin|LED_Row8_Pin
                          |LED_Row6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Column11_Pin|LED_Column13_Pin|LED_Column14_Pin|LED_Column15_Pin
 800060e:	494f      	ldr	r1, [pc, #316]	@ (800074c <MX_GPIO_Init+0x1e8>)
 8000610:	4b4f      	ldr	r3, [pc, #316]	@ (8000750 <MX_GPIO_Init+0x1ec>)
 8000612:	2200      	movs	r2, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f001 ff55 	bl	80024c4 <HAL_GPIO_WritePin>
                          |LED_Row1_Pin|LED_Row3_Pin|LED_Row5_Pin|LED_Row7_Pin
                          |LED_Column5_Pin|LED_Column7_Pin|SPI2_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Row14_Pin|LED_Row12_Pin|LED_Row0_Pin|LED_Column0_Pin
 800061a:	494e      	ldr	r1, [pc, #312]	@ (8000754 <MX_GPIO_Init+0x1f0>)
 800061c:	4b4e      	ldr	r3, [pc, #312]	@ (8000758 <MX_GPIO_Init+0x1f4>)
 800061e:	2200      	movs	r2, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 ff4f 	bl	80024c4 <HAL_GPIO_WritePin>
                          |LED_Column1_Pin|LED_Column2_Pin|LED_Column4_Pin|LED_Column6_Pin
                          |LED_Column3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : MOTOR_NS_Pin */
  GPIO_InitStruct.Pin = MOTOR_NS_Pin;
 8000626:	193b      	adds	r3, r7, r4
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	0192      	lsls	r2, r2, #6
 800062c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_NS_GPIO_Port, &GPIO_InitStruct);
 8000640:	193b      	adds	r3, r7, r4
 8000642:	4a40      	ldr	r2, [pc, #256]	@ (8000744 <MX_GPIO_Init+0x1e0>)
 8000644:	0019      	movs	r1, r3
 8000646:	0010      	movs	r0, r2
 8000648:	f001 fdd8 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Column8_Pin LED_Column10_Pin LED_Column12_Pin LED_Column9_Pin
                           LED_Row9_Pin LED_Row11_Pin LED_Row10_Pin LED_Row8_Pin
                           LED_Row6_Pin */
  GPIO_InitStruct.Pin = LED_Column8_Pin|LED_Column10_Pin|LED_Column12_Pin|LED_Column9_Pin
 800064c:	193b      	adds	r3, r7, r4
 800064e:	4a3e      	ldr	r2, [pc, #248]	@ (8000748 <MX_GPIO_Init+0x1e4>)
 8000650:	601a      	str	r2, [r3, #0]
                          |LED_Row9_Pin|LED_Row11_Pin|LED_Row10_Pin|LED_Row8_Pin
                          |LED_Row6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2201      	movs	r2, #1
 8000656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2203      	movs	r2, #3
 8000662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	193a      	adds	r2, r7, r4
 8000666:	23a0      	movs	r3, #160	@ 0xa0
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fdc5 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Column11_Pin LED_Column13_Pin LED_Column14_Pin LED_Column15_Pin
                           LED_Row1_Pin LED_Row3_Pin LED_Row5_Pin LED_Row7_Pin
                           LED_Column5_Pin LED_Column7_Pin */
  GPIO_InitStruct.Pin = LED_Column11_Pin|LED_Column13_Pin|LED_Column14_Pin|LED_Column15_Pin
 8000672:	193b      	adds	r3, r7, r4
 8000674:	4a39      	ldr	r2, [pc, #228]	@ (800075c <MX_GPIO_Init+0x1f8>)
 8000676:	601a      	str	r2, [r3, #0]
                          |LED_Row1_Pin|LED_Row3_Pin|LED_Row5_Pin|LED_Row7_Pin
                          |LED_Column5_Pin|LED_Column7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2201      	movs	r2, #1
 800067c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	193b      	adds	r3, r7, r4
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	193b      	adds	r3, r7, r4
 8000686:	2203      	movs	r2, #3
 8000688:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	193b      	adds	r3, r7, r4
 800068c:	4a30      	ldr	r2, [pc, #192]	@ (8000750 <MX_GPIO_Init+0x1ec>)
 800068e:	0019      	movs	r1, r3
 8000690:	0010      	movs	r0, r2
 8000692:	f001 fdb3 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Row13_Pin LED_Row15_Pin LED_Row4_Pin LED_Row2_Pin */
  GPIO_InitStruct.Pin = LED_Row13_Pin|LED_Row15_Pin|LED_Row4_Pin|LED_Row2_Pin;
 8000696:	0021      	movs	r1, r4
 8000698:	187b      	adds	r3, r7, r1
 800069a:	22f0      	movs	r2, #240	@ 0xf0
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	000c      	movs	r4, r1
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2201      	movs	r2, #1
 80006a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	2203      	movs	r2, #3
 80006b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	4a23      	ldr	r2, [pc, #140]	@ (8000744 <MX_GPIO_Init+0x1e0>)
 80006b8:	0019      	movs	r1, r3
 80006ba:	0010      	movs	r0, r2
 80006bc:	f001 fd9e 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Row14_Pin LED_Row12_Pin LED_Row0_Pin LED_Column0_Pin
                           LED_Column1_Pin LED_Column2_Pin LED_Column4_Pin LED_Column6_Pin
                           LED_Column3_Pin */
  GPIO_InitStruct.Pin = LED_Row14_Pin|LED_Row12_Pin|LED_Row0_Pin|LED_Column0_Pin
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <MX_GPIO_Init+0x1f0>)
 80006c4:	601a      	str	r2, [r3, #0]
                          |LED_Column1_Pin|LED_Column2_Pin|LED_Column4_Pin|LED_Column6_Pin
                          |LED_Column3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2201      	movs	r2, #1
 80006ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d2:	193b      	adds	r3, r7, r4
 80006d4:	2203      	movs	r2, #3
 80006d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	4a1f      	ldr	r2, [pc, #124]	@ (8000758 <MX_GPIO_Init+0x1f4>)
 80006dc:	0019      	movs	r1, r3
 80006de:	0010      	movs	r0, r2
 80006e0:	f001 fd8c 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 80006e4:	0021      	movs	r1, r4
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	0052      	lsls	r2, r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2201      	movs	r2, #1
 80006f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2203      	movs	r2, #3
 80006fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000700:	187b      	adds	r3, r7, r1
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_GPIO_Init+0x1ec>)
 8000704:	0019      	movs	r1, r3
 8000706:	0010      	movs	r0, r2
 8000708:	f001 fd78 	bl	80021fc <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 800070c:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_GPIO_Init+0x1fc>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_GPIO_Init+0x1fc>)
 8000712:	2180      	movs	r1, #128	@ 0x80
 8000714:	03c9      	lsls	r1, r1, #15
 8000716:	430a      	orrs	r2, r1
 8000718:	601a      	str	r2, [r3, #0]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA10);
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_GPIO_Init+0x1fc>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_GPIO_Init+0x1fc>)
 8000720:	2180      	movs	r1, #128	@ 0x80
 8000722:	0409      	lsls	r1, r1, #16
 8000724:	430a      	orrs	r2, r1
 8000726:	601a      	str	r2, [r3, #0]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <MX_GPIO_Init+0x1fc>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_GPIO_Init+0x1fc>)
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	02c9      	lsls	r1, r1, #11
 8000732:	430a      	orrs	r2, r1
 8000734:	601a      	str	r2, [r3, #0]

}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b00b      	add	sp, #44	@ 0x2c
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	40021000 	.word	0x40021000
 8000744:	50000800 	.word	0x50000800
 8000748:	00008ff0 	.word	0x00008ff0
 800074c:	0000dd37 	.word	0x0000dd37
 8000750:	50000400 	.word	0x50000400
 8000754:	0000037f 	.word	0x0000037f
 8000758:	50000c00 	.word	0x50000c00
 800075c:	0000dc37 	.word	0x0000dc37
 8000760:	40010000 	.word	0x40010000

08000764 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <MX_I2C1_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <MX_I2C1_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fead 	bl	8002500 <HAL_I2C_Init>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 fb3d 	bl	8000e28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	0018      	movs	r0, r3
 80007b4:	f002 fda6 	bl	8003304 <HAL_I2CEx_ConfigAnalogFilter>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fb34 	bl	8000e28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <MX_I2C1_Init+0x74>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	0018      	movs	r0, r3
 80007c6:	f002 fde9 	bl	800339c <HAL_I2CEx_ConfigDigitalFilter>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fb2b 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000894 	.word	0x20000894
 80007dc:	40005400 	.word	0x40005400
 80007e0:	00503d58 	.word	0x00503d58

080007e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b091      	sub	sp, #68	@ 0x44
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	232c      	movs	r3, #44	@ 0x2c
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f00a faa8 	bl	800ad4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fc:	2410      	movs	r4, #16
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	231c      	movs	r3, #28
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f00a faa0 	bl	800ad4c <memset>
  if(i2cHandle->Instance==I2C1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a26      	ldr	r2, [pc, #152]	@ (80008ac <HAL_I2C_MspInit+0xc8>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d145      	bne.n	80008a2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2220      	movs	r2, #32
 800081a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	f003 fb35 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>
 800082a:	1e03      	subs	r3, r0, #0
 800082c:	d001      	beq.n	8000832 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800082e:	f000 fafb 	bl	8000e28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <HAL_I2C_MspInit+0xcc>)
 8000834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000836:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <HAL_I2C_MspInit+0xcc>)
 8000838:	2102      	movs	r1, #2
 800083a:	430a      	orrs	r2, r1
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <HAL_I2C_MspInit+0xcc>)
 8000840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000842:	2202      	movs	r2, #2
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800084a:	212c      	movs	r1, #44	@ 0x2c
 800084c:	187b      	adds	r3, r7, r1
 800084e:	22c0      	movs	r2, #192	@ 0xc0
 8000850:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2212      	movs	r2, #18
 8000856:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2201      	movs	r2, #1
 800085c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2203      	movs	r2, #3
 8000862:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000864:	187b      	adds	r3, r7, r1
 8000866:	2206      	movs	r2, #6
 8000868:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	187b      	adds	r3, r7, r1
 800086c:	4a11      	ldr	r2, [pc, #68]	@ (80008b4 <HAL_I2C_MspInit+0xd0>)
 800086e:	0019      	movs	r1, r3
 8000870:	0010      	movs	r0, r2
 8000872:	f001 fcc3 	bl	80021fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_I2C_MspInit+0xcc>)
 8000878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <HAL_I2C_MspInit+0xcc>)
 800087c:	2180      	movs	r1, #128	@ 0x80
 800087e:	0389      	lsls	r1, r1, #14
 8000880:	430a      	orrs	r2, r1
 8000882:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <HAL_I2C_MspInit+0xcc>)
 8000886:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	039b      	lsls	r3, r3, #14
 800088c:	4013      	ands	r3, r2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2103      	movs	r1, #3
 8000896:	2017      	movs	r0, #23
 8000898:	f001 fc14 	bl	80020c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800089c:	2017      	movs	r0, #23
 800089e:	f001 fc26 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b011      	add	sp, #68	@ 0x44
 80008a8:	bd90      	pop	{r4, r7, pc}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	40005400 	.word	0x40005400
 80008b0:	40021000 	.word	0x40021000
 80008b4:	50000400 	.word	0x50000400

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	4cb9      	ldr	r4, [pc, #740]	@ (8000ba0 <main+0x2e8>)
 80008bc:	44a5      	add	sp, r4
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f000 febe 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 fa30 	bl	8000d28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f7ff fe4c 	bl	8000564 <MX_GPIO_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80008cc:	f006 f8ea 	bl	8006aa4 <MX_FATFS_Init>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <main+0x20>
    Error_Handler();
 80008d4:	f000 faa8 	bl	8000e28 <Error_Handler>
  }
  MX_I2C1_Init();
 80008d8:	f7ff ff44 	bl	8000764 <MX_I2C1_Init>
  MX_ADC1_Init();
 80008dc:	f7ff fd94 	bl	8000408 <MX_ADC1_Init>
  MX_SPI2_Init();
 80008e0:	f000 faa8 	bl	8000e34 <MX_SPI2_Init>
  MX_TIM14_Init();
 80008e4:	f000 fce0 	bl	80012a8 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80008e8:	f000 fda8 	bl	800143c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80008ec:	f000 fc86 	bl	80011fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 80008f0:	4bac      	ldr	r3, [pc, #688]	@ (8000ba4 <main+0x2ec>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f004 fad2 	bl	8004e9c <HAL_TIM_Base_Start_IT>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <main+0x48>
	  Error_Handler();
 80008fc:	f000 fa94 	bl	8000e28 <Error_Handler>
  }

  //  SD card testing code

#ifdef TEST_SD
  for (uint8_t i = 0; i < 16; i++) {
 8000900:	4ba9      	ldr	r3, [pc, #676]	@ (8000ba8 <main+0x2f0>)
 8000902:	18fb      	adds	r3, r7, r3
 8000904:	2200      	movs	r2, #0
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	e013      	b.n	8000932 <main+0x7a>
	  HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_SET);
 800090a:	4ca7      	ldr	r4, [pc, #668]	@ (8000ba8 <main+0x2f0>)
 800090c:	193b      	adds	r3, r7, r4
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4ba6      	ldr	r3, [pc, #664]	@ (8000bac <main+0x2f4>)
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	58d0      	ldr	r0, [r2, r3]
 8000916:	193b      	adds	r3, r7, r4
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	4ba5      	ldr	r3, [pc, #660]	@ (8000bb0 <main+0x2f8>)
 800091c:	0052      	lsls	r2, r2, #1
 800091e:	5ad3      	ldrh	r3, [r2, r3]
 8000920:	2201      	movs	r2, #1
 8000922:	0019      	movs	r1, r3
 8000924:	f001 fdce 	bl	80024c4 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 16; i++) {
 8000928:	193b      	adds	r3, r7, r4
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	193b      	adds	r3, r7, r4
 800092e:	3201      	adds	r2, #1
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	4b9d      	ldr	r3, [pc, #628]	@ (8000ba8 <main+0x2f0>)
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d9e6      	bls.n	800090a <main+0x52>
  }
  for (i = 0; i < 16; i++) {
 800093c:	4b9d      	ldr	r3, [pc, #628]	@ (8000bb4 <main+0x2fc>)
 800093e:	2200      	movs	r2, #0
 8000940:	801a      	strh	r2, [r3, #0]
 8000942:	e015      	b.n	8000970 <main+0xb8>
	  HAL_GPIO_WritePin(led_column_ports[i], led_column_pins[i], GPIO_PIN_SET);
 8000944:	4b9b      	ldr	r3, [pc, #620]	@ (8000bb4 <main+0x2fc>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	001a      	movs	r2, r3
 800094a:	4b9b      	ldr	r3, [pc, #620]	@ (8000bb8 <main+0x300>)
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	58d0      	ldr	r0, [r2, r3]
 8000950:	4b98      	ldr	r3, [pc, #608]	@ (8000bb4 <main+0x2fc>)
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	001a      	movs	r2, r3
 8000956:	4b99      	ldr	r3, [pc, #612]	@ (8000bbc <main+0x304>)
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	5ad3      	ldrh	r3, [r2, r3]
 800095c:	2201      	movs	r2, #1
 800095e:	0019      	movs	r1, r3
 8000960:	f001 fdb0 	bl	80024c4 <HAL_GPIO_WritePin>
  for (i = 0; i < 16; i++) {
 8000964:	4b93      	ldr	r3, [pc, #588]	@ (8000bb4 <main+0x2fc>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b91      	ldr	r3, [pc, #580]	@ (8000bb4 <main+0x2fc>)
 800096e:	801a      	strh	r2, [r3, #0]
 8000970:	4b90      	ldr	r3, [pc, #576]	@ (8000bb4 <main+0x2fc>)
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d9e5      	bls.n	8000944 <main+0x8c>
  }
  HAL_GPIO_WritePin(led_row_ports[0], led_row_pins[0], GPIO_PIN_RESET);
 8000978:	4b8c      	ldr	r3, [pc, #560]	@ (8000bac <main+0x2f4>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	4b8c      	ldr	r3, [pc, #560]	@ (8000bb0 <main+0x2f8>)
 800097e:	881b      	ldrh	r3, [r3, #0]
 8000980:	2200      	movs	r2, #0
 8000982:	0019      	movs	r1, r3
 8000984:	f001 fd9e 	bl	80024c4 <HAL_GPIO_WritePin>
  FATFS FatFs; 	// Fatfs handle
  FIL fil; 		// File handle
  FRESULT fres; 	// Result after operations

  // open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000988:	4d8d      	ldr	r5, [pc, #564]	@ (8000bc0 <main+0x308>)
 800098a:	197c      	adds	r4, r7, r5
 800098c:	498d      	ldr	r1, [pc, #564]	@ (8000bc4 <main+0x30c>)
 800098e:	23b4      	movs	r3, #180	@ 0xb4
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	2201      	movs	r2, #1
 8000996:	0018      	movs	r0, r3
 8000998:	f009 f926 	bl	8009be8 <f_mount>
 800099c:	0003      	movs	r3, r0
 800099e:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 80009a0:	002c      	movs	r4, r5
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d014      	beq.n	80009d4 <main+0x11c>
	  HAL_GPIO_WritePin(led_row_ports[15], led_row_pins[15], GPIO_PIN_RESET);
 80009aa:	4b80      	ldr	r3, [pc, #512]	@ (8000bac <main+0x2f4>)
 80009ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80009ae:	4b80      	ldr	r3, [pc, #512]	@ (8000bb0 <main+0x2f8>)
 80009b0:	8bdb      	ldrh	r3, [r3, #30]
 80009b2:	2200      	movs	r2, #0
 80009b4:	0019      	movs	r1, r3
 80009b6:	f001 fd85 	bl	80024c4 <HAL_GPIO_WritePin>
	  sprintf((char *) OutputBuffer, "f_mount error (%i)\r\n", fres);
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4982      	ldr	r1, [pc, #520]	@ (8000bc8 <main+0x310>)
 80009c0:	4b82      	ldr	r3, [pc, #520]	@ (8000bcc <main+0x314>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f00a f9a2 	bl	800ad0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 80009c8:	4b80      	ldr	r3, [pc, #512]	@ (8000bcc <main+0x314>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fde6 	bl	800159c <PrintOutputBuffer>
	  while(1);
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	e7fd      	b.n	80009d0 <main+0x118>
  }
  HAL_GPIO_WritePin(led_row_ports[1], led_row_pins[1], GPIO_PIN_RESET);
 80009d4:	4b75      	ldr	r3, [pc, #468]	@ (8000bac <main+0x2f4>)
 80009d6:	6858      	ldr	r0, [r3, #4]
 80009d8:	4b75      	ldr	r3, [pc, #468]	@ (8000bb0 <main+0x2f8>)
 80009da:	885b      	ldrh	r3, [r3, #2]
 80009dc:	2200      	movs	r2, #0
 80009de:	0019      	movs	r1, r3
 80009e0:	f001 fd70 	bl	80024c4 <HAL_GPIO_WritePin>
  // gather statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 80009e4:	4d76      	ldr	r5, [pc, #472]	@ (8000bc0 <main+0x308>)
 80009e6:	197c      	adds	r4, r7, r5
 80009e8:	2398      	movs	r3, #152	@ 0x98
 80009ea:	18fa      	adds	r2, r7, r3
 80009ec:	239c      	movs	r3, #156	@ 0x9c
 80009ee:	18f9      	adds	r1, r7, r3
 80009f0:	4b74      	ldr	r3, [pc, #464]	@ (8000bc4 <main+0x30c>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f009 fd36 	bl	800a464 <f_getfree>
 80009f8:	0003      	movs	r3, r0
 80009fa:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 80009fc:	197b      	adds	r3, r7, r5
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00c      	beq.n	8000a1e <main+0x166>
	  sprintf((char *) OutputBuffer, "f_getfree error (%i)\r\n", fres);
 8000a04:	197b      	adds	r3, r7, r5
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4971      	ldr	r1, [pc, #452]	@ (8000bd0 <main+0x318>)
 8000a0a:	4b70      	ldr	r3, [pc, #448]	@ (8000bcc <main+0x314>)
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f00a f97d 	bl	800ad0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8000a12:	4b6e      	ldr	r3, [pc, #440]	@ (8000bcc <main+0x314>)
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fdc1 	bl	800159c <PrintOutputBuffer>
	  while(1);
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	e7fd      	b.n	8000a1a <main+0x162>
  }

  HAL_GPIO_WritePin(led_row_ports[2], led_row_pins[2], GPIO_PIN_RESET);
 8000a1e:	4b63      	ldr	r3, [pc, #396]	@ (8000bac <main+0x2f4>)
 8000a20:	6898      	ldr	r0, [r3, #8]
 8000a22:	4b63      	ldr	r3, [pc, #396]	@ (8000bb0 <main+0x2f8>)
 8000a24:	889b      	ldrh	r3, [r3, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	0019      	movs	r1, r3
 8000a2a:	f001 fd4b 	bl	80024c4 <HAL_GPIO_WritePin>

  // formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000a2e:	2198      	movs	r1, #152	@ 0x98
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	3b02      	subs	r3, #2
 8000a38:	187a      	adds	r2, r7, r1
 8000a3a:	6812      	ldr	r2, [r2, #0]
 8000a3c:	8952      	ldrh	r2, [r2, #10]
 8000a3e:	4353      	muls	r3, r2
 8000a40:	20a2      	movs	r0, #162	@ 0xa2
 8000a42:	00c0      	lsls	r0, r0, #3
 8000a44:	183a      	adds	r2, r7, r0
 8000a46:	6013      	str	r3, [r2, #0]
  free_sectors = free_clusters * getFreeFs->csize;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	895b      	ldrh	r3, [r3, #10]
 8000a4e:	001a      	movs	r2, r3
 8000a50:	239c      	movs	r3, #156	@ 0x9c
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4353      	muls	r3, r2
 8000a58:	4c5e      	ldr	r4, [pc, #376]	@ (8000bd4 <main+0x31c>)
 8000a5a:	193a      	adds	r2, r7, r4
 8000a5c:	6013      	str	r3, [r2, #0]

  sprintf((char *) OutputBuffer, "SD card stats:\r\n%10lu KiB total drive space.\r\n", total_sectors/2);
 8000a5e:	183b      	adds	r3, r7, r0
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	085a      	lsrs	r2, r3, #1
 8000a64:	495c      	ldr	r1, [pc, #368]	@ (8000bd8 <main+0x320>)
 8000a66:	4b59      	ldr	r3, [pc, #356]	@ (8000bcc <main+0x314>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f00a f94f 	bl	800ad0c <siprintf>
  PrintOutputBuffer(OutputBuffer);
 8000a6e:	4b57      	ldr	r3, [pc, #348]	@ (8000bcc <main+0x314>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f000 fd93 	bl	800159c <PrintOutputBuffer>
  sprintf((char *) OutputBuffer, "%10lu KiB available.\r\n", free_sectors/2);
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	085a      	lsrs	r2, r3, #1
 8000a7c:	4957      	ldr	r1, [pc, #348]	@ (8000bdc <main+0x324>)
 8000a7e:	4b53      	ldr	r3, [pc, #332]	@ (8000bcc <main+0x314>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f00a f943 	bl	800ad0c <siprintf>
  PrintOutputBuffer(OutputBuffer);
 8000a86:	4b51      	ldr	r3, [pc, #324]	@ (8000bcc <main+0x314>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 fd87 	bl	800159c <PrintOutputBuffer>
  HAL_GPIO_WritePin(led_row_ports[3], led_row_pins[3], GPIO_PIN_RESET);
 8000a8e:	4b47      	ldr	r3, [pc, #284]	@ (8000bac <main+0x2f4>)
 8000a90:	68d8      	ldr	r0, [r3, #12]
 8000a92:	4b47      	ldr	r3, [pc, #284]	@ (8000bb0 <main+0x2f8>)
 8000a94:	88db      	ldrh	r3, [r3, #6]
 8000a96:	2200      	movs	r2, #0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	f001 fd13 	bl	80024c4 <HAL_GPIO_WritePin>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "full_obj_output.txt", FA_READ);
 8000a9e:	4d48      	ldr	r5, [pc, #288]	@ (8000bc0 <main+0x308>)
 8000aa0:	197c      	adds	r4, r7, r5
 8000aa2:	494f      	ldr	r1, [pc, #316]	@ (8000be0 <main+0x328>)
 8000aa4:	23a0      	movs	r3, #160	@ 0xa0
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f009 f8e8 	bl	8009c80 <f_open>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 8000ab4:	002c      	movs	r4, r5
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d014      	beq.n	8000ae8 <main+0x230>
	  HAL_GPIO_WritePin(led_row_ports[15], led_row_pins[15], GPIO_PIN_RESET);
 8000abe:	4b3b      	ldr	r3, [pc, #236]	@ (8000bac <main+0x2f4>)
 8000ac0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb0 <main+0x2f8>)
 8000ac4:	8bdb      	ldrh	r3, [r3, #30]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	0019      	movs	r1, r3
 8000aca:	f001 fcfb 	bl	80024c4 <HAL_GPIO_WritePin>
	  sprintf((char *) OutputBuffer, "f_open error (%i)\r\n", fres);
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	4944      	ldr	r1, [pc, #272]	@ (8000be4 <main+0x32c>)
 8000ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8000bcc <main+0x314>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f00a f918 	bl	800ad0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8000adc:	4b3b      	ldr	r3, [pc, #236]	@ (8000bcc <main+0x314>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 fd5c 	bl	800159c <PrintOutputBuffer>
	  while(1);
 8000ae4:	46c0      	nop			@ (mov r8, r8)
 8000ae6:	e7fd      	b.n	8000ae4 <main+0x22c>
  }
  sprintf((char *) OutputBuffer, "I was able to open 'test.txt' for reading!\r\n");
 8000ae8:	4a3f      	ldr	r2, [pc, #252]	@ (8000be8 <main+0x330>)
 8000aea:	4b38      	ldr	r3, [pc, #224]	@ (8000bcc <main+0x314>)
 8000aec:	0011      	movs	r1, r2
 8000aee:	0018      	movs	r0, r3
 8000af0:	f00a f90c 	bl	800ad0c <siprintf>
  PrintOutputBuffer(OutputBuffer);
 8000af4:	4b35      	ldr	r3, [pc, #212]	@ (8000bcc <main+0x314>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fd50 	bl	800159c <PrintOutputBuffer>

  HAL_GPIO_WritePin(led_row_ports[4], led_row_pins[4], GPIO_PIN_RESET);
 8000afc:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <main+0x2f4>)
 8000afe:	6918      	ldr	r0, [r3, #16]
 8000b00:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb0 <main+0x2f8>)
 8000b02:	891b      	ldrh	r3, [r3, #8]
 8000b04:	2200      	movs	r2, #0
 8000b06:	0019      	movs	r1, r3
 8000b08:	f001 fcdc 	bl	80024c4 <HAL_GPIO_WritePin>



  BYTE readBuf[17];
  int x = -1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	425b      	negs	r3, r3
 8000b10:	22a5      	movs	r2, #165	@ 0xa5
 8000b12:	00d2      	lsls	r2, r2, #3
 8000b14:	18ba      	adds	r2, r7, r2
 8000b16:	6013      	str	r3, [r2, #0]
  int x3 = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	4a34      	ldr	r2, [pc, #208]	@ (8000bec <main+0x334>)
 8000b1c:	18ba      	adds	r2, r7, r2
 8000b1e:	6013      	str	r3, [r2, #0]
  int image = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	22a4      	movs	r2, #164	@ 0xa4
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	18ba      	adds	r2, r7, r2
 8000b28:	6013      	str	r3, [r2, #0]
  char fullText[128];
  unsigned int decimal_value = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	4a30      	ldr	r2, [pc, #192]	@ (8000bf0 <main+0x338>)
 8000b2e:	18ba      	adds	r2, r7, r2
 8000b30:	6013      	str	r3, [r2, #0]
  memset(fullText, 0, sizeof(fullText));
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2280      	movs	r2, #128	@ 0x80
 8000b36:	2100      	movs	r1, #0
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f00a f907 	bl	800ad4c <memset>
  TCHAR* rres3 = "4";
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <main+0x33c>)
 8000b40:	22a1      	movs	r2, #161	@ 0xa1
 8000b42:	00d2      	lsls	r2, r2, #3
 8000b44:	18b9      	adds	r1, r7, r2
 8000b46:	600b      	str	r3, [r1, #0]
  if(rres3 != 0) {
 8000b48:	18bb      	adds	r3, r7, r2
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d100      	bne.n	8000b52 <main+0x29a>
 8000b50:	e0b0      	b.n	8000cb4 <main+0x3fc>
	  while (x < 1760) { //this states limit of how big the txt is
 8000b52:	e09b      	b.n	8000c8c <main+0x3d4>
		  f_gets((TCHAR*)readBuf, 17, &fil);
 8000b54:	23a0      	movs	r3, #160	@ 0xa0
 8000b56:	18fa      	adds	r2, r7, r3
 8000b58:	2384      	movs	r3, #132	@ 0x84
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2111      	movs	r1, #17
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f009 fd3d 	bl	800a5de <f_gets>
		  x += 1;
 8000b64:	22a5      	movs	r2, #165	@ 0xa5
 8000b66:	00d2      	lsls	r2, r2, #3
 8000b68:	18bb      	adds	r3, r7, r2
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	18b9      	adds	r1, r7, r2
 8000b70:	600b      	str	r3, [r1, #0]
		  decimal_value = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	491e      	ldr	r1, [pc, #120]	@ (8000bf0 <main+0x338>)
 8000b76:	1879      	adds	r1, r7, r1
 8000b78:	600b      	str	r3, [r1, #0]
		  if ((x+1) % 2 == 1) {
 8000b7a:	18bb      	adds	r3, r7, r2
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <main+0x340>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	d504      	bpl.n	8000b90 <main+0x2d8>
 8000b86:	3b01      	subs	r3, #1
 8000b88:	2202      	movs	r2, #2
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	3301      	adds	r3, #1
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d16c      	bne.n	8000c6e <main+0x3b6>
			  // Concatenate the read line to the full text buffer
			  for (int i = 0; i < 16; i++) { // the 16 bits when running
 8000b94:	2300      	movs	r3, #0
 8000b96:	22a3      	movs	r2, #163	@ 0xa3
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	18ba      	adds	r2, r7, r2
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	e04a      	b.n	8000c36 <main+0x37e>
 8000ba0:	fffffad0 	.word	0xfffffad0
 8000ba4:	200009e4 	.word	0x200009e4
 8000ba8:	0000052f 	.word	0x0000052f
 8000bac:	20000060 	.word	0x20000060
 8000bb0:	200000a0 	.word	0x200000a0
 8000bb4:	2000092c 	.word	0x2000092c
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000040 	.word	0x20000040
 8000bc0:	00000517 	.word	0x00000517
 8000bc4:	0800b660 	.word	0x0800b660
 8000bc8:	0800b664 	.word	0x0800b664
 8000bcc:	200008ec 	.word	0x200008ec
 8000bd0:	0800b67c 	.word	0x0800b67c
 8000bd4:	0000050c 	.word	0x0000050c
 8000bd8:	0800b694 	.word	0x0800b694
 8000bdc:	0800b6c4 	.word	0x0800b6c4
 8000be0:	0800b6dc 	.word	0x0800b6dc
 8000be4:	0800b6f0 	.word	0x0800b6f0
 8000be8:	0800b704 	.word	0x0800b704
 8000bec:	00000524 	.word	0x00000524
 8000bf0:	0000051c 	.word	0x0000051c
 8000bf4:	0800b734 	.word	0x0800b734
 8000bf8:	80000001 	.word	0x80000001
				  // Convert '1' or '0' char to its integer value
				  int bit_value = readBuf[i] - '0'; // '1' - '0' = 1, '0' - '0' = 0
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <main+0x440>)
 8000bfe:	22a6      	movs	r2, #166	@ 0xa6
 8000c00:	00d2      	lsls	r2, r2, #3
 8000c02:	189b      	adds	r3, r3, r2
 8000c04:	19da      	adds	r2, r3, r7
 8000c06:	21a3      	movs	r1, #163	@ 0xa3
 8000c08:	00c9      	lsls	r1, r1, #3
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	18d3      	adds	r3, r2, r3
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	3b30      	subs	r3, #48	@ 0x30
 8000c14:	4839      	ldr	r0, [pc, #228]	@ (8000cfc <main+0x444>)
 8000c16:	183a      	adds	r2, r7, r0
 8000c18:	6013      	str	r3, [r2, #0]

				  // Update the decimal value
				  decimal_value = (decimal_value << 1) | bit_value; // Left-shift and add the current bit
 8000c1a:	4c39      	ldr	r4, [pc, #228]	@ (8000d00 <main+0x448>)
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	005a      	lsls	r2, r3, #1
 8000c22:	183b      	adds	r3, r7, r0
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	193a      	adds	r2, r7, r4
 8000c2a:	6013      	str	r3, [r2, #0]
			  for (int i = 0; i < 16; i++) { // the 16 bits when running
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	3301      	adds	r3, #1
 8000c32:	187a      	adds	r2, r7, r1
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	23a3      	movs	r3, #163	@ 0xa3
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	18fb      	adds	r3, r7, r3
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b0f      	cmp	r3, #15
 8000c40:	dddc      	ble.n	8000bfc <main+0x344>
			  }
			  image_leds[image][x3] = decimal_value;
 8000c42:	4b2f      	ldr	r3, [pc, #188]	@ (8000d00 <main+0x448>)
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	b298      	uxth	r0, r3
 8000c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d04 <main+0x44c>)
 8000c4c:	22a4      	movs	r2, #164	@ 0xa4
 8000c4e:	00d2      	lsls	r2, r2, #3
 8000c50:	18ba      	adds	r2, r7, r2
 8000c52:	6812      	ldr	r2, [r2, #0]
 8000c54:	0111      	lsls	r1, r2, #4
 8000c56:	4c2c      	ldr	r4, [pc, #176]	@ (8000d08 <main+0x450>)
 8000c58:	193a      	adds	r2, r7, r4
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	188a      	adds	r2, r1, r2
 8000c5e:	0052      	lsls	r2, r2, #1
 8000c60:	1c01      	adds	r1, r0, #0
 8000c62:	52d1      	strh	r1, [r2, r3]
			  x3 += 1;
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	193a      	adds	r2, r7, r4
 8000c6c:	6013      	str	r3, [r2, #0]
		  }
		  if (x3 > 15) {
 8000c6e:	4a26      	ldr	r2, [pc, #152]	@ (8000d08 <main+0x450>)
 8000c70:	18bb      	adds	r3, r7, r2
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	dd09      	ble.n	8000c8c <main+0x3d4>
			  image += 1;
 8000c78:	21a4      	movs	r1, #164	@ 0xa4
 8000c7a:	00c9      	lsls	r1, r1, #3
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	1879      	adds	r1, r7, r1
 8000c84:	600b      	str	r3, [r1, #0]
			  x3 = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	18ba      	adds	r2, r7, r2
 8000c8a:	6013      	str	r3, [r2, #0]
	  while (x < 1760) { //this states limit of how big the txt is
 8000c8c:	23a5      	movs	r3, #165	@ 0xa5
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	23dc      	movs	r3, #220	@ 0xdc
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	da00      	bge.n	8000c9e <main+0x3e6>
 8000c9c:	e75a      	b.n	8000b54 <main+0x29c>
		  }
	  }

	  sprintf((char *) OutputBuffer, "Read string from 'test.txt'");
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <main+0x454>)
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <main+0x458>)
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f00a f831 	bl	800ad0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8000caa:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <main+0x458>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f000 fc75 	bl	800159c <PrintOutputBuffer>
 8000cb2:	e00b      	b.n	8000ccc <main+0x414>
  } else {
	  sprintf((char *) OutputBuffer, "f_gets error (%i)\r\n", fres);
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <main+0x45c>)
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4917      	ldr	r1, [pc, #92]	@ (8000d18 <main+0x460>)
 8000cbc:	4b14      	ldr	r3, [pc, #80]	@ (8000d10 <main+0x458>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f00a f824 	bl	800ad0c <siprintf>
	  PrintOutputBuffer(OutputBuffer);
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <main+0x458>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f000 fc68 	bl	800159c <PrintOutputBuffer>
  }

  f_close(&fil);
 8000ccc:	23a0      	movs	r3, #160	@ 0xa0
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f009 fb93 	bl	800a3fc <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <main+0x464>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	0019      	movs	r1, r3
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f008 ff83 	bl	8009be8 <f_mount>

  HAL_GPIO_WritePin(led_row_ports[5], led_row_pins[5], GPIO_PIN_RESET);
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <main+0x468>)
 8000ce4:	6958      	ldr	r0, [r3, #20]
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <main+0x46c>)
 8000ce8:	895b      	ldrh	r3, [r3, #10]
 8000cea:	2200      	movs	r2, #0
 8000cec:	0019      	movs	r1, r3
 8000cee:	f001 fbe9 	bl	80024c4 <HAL_GPIO_WritePin>

  while (1);
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	e7fd      	b.n	8000cf2 <main+0x43a>
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	fffffb54 	.word	0xfffffb54
 8000cfc:	00000504 	.word	0x00000504
 8000d00:	0000051c 	.word	0x0000051c
 8000d04:	200001b4 	.word	0x200001b4
 8000d08:	00000524 	.word	0x00000524
 8000d0c:	0800b738 	.word	0x0800b738
 8000d10:	200008ec 	.word	0x200008ec
 8000d14:	00000517 	.word	0x00000517
 8000d18:	0800b754 	.word	0x0800b754
 8000d1c:	0800b660 	.word	0x0800b660
 8000d20:	20000060 	.word	0x20000060
 8000d24:	200000a0 	.word	0x200000a0

08000d28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b093      	sub	sp, #76	@ 0x4c
 8000d2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2e:	2414      	movs	r4, #20
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	0018      	movs	r0, r3
 8000d34:	2334      	movs	r3, #52	@ 0x34
 8000d36:	001a      	movs	r2, r3
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f00a f807 	bl	800ad4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	0018      	movs	r0, r3
 8000d42:	2310      	movs	r3, #16
 8000d44:	001a      	movs	r2, r3
 8000d46:	2100      	movs	r1, #0
 8000d48:	f00a f800 	bl	800ad4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f002 fb6f 	bl	8003434 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2202      	movs	r2, #2
 8000d5a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	2280      	movs	r2, #128	@ 0x80
 8000d60:	0052      	lsls	r2, r2, #1
 8000d62:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2240      	movs	r2, #64	@ 0x40
 8000d6e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f002 fba7 	bl	80034cc <HAL_RCC_OscConfig>
 8000d7e:	1e03      	subs	r3, r0, #0
 8000d80:	d001      	beq.n	8000d86 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000d82:	f000 f851 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2100      	movs	r1, #0
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 fea2 	bl	8003aec <HAL_RCC_ClockConfig>
 8000da8:	1e03      	subs	r3, r0, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000dac:	f000 f83c 	bl	8000e28 <Error_Handler>
  }
}
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b013      	add	sp, #76	@ 0x4c
 8000db6:	bd90      	pop	{r4, r7, pc}

08000db8 <HAL_I2C_ErrorCallback>:
    	HAL_I2C_Master_Receive_IT(&hi2c1, 0x70, rx_buffer, BUFFER_SIZE);
    }
}

// Error callback
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_I2C_ErrorCallback+0x20>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_I2C_ErrorCallback+0x16>
        // Handle I2C error
        Error_Handler();
 8000dca:	f000 f82d 	bl	8000e28 <Error_Handler>
    }
}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	40005400 	.word	0x40005400

08000ddc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM3) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d10a      	bne.n	8000e04 <HAL_TIM_PeriodElapsedCallback+0x28>
	current_frame = (current_frame + 1) % 55;
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	2137      	movs	r1, #55	@ 0x37
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff fb00 	bl	80003fc <__aeabi_idivmod>
 8000dfc:	000b      	movs	r3, r1
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e02:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_TIM_PeriodElapsedCallback+0x36>
    HAL_IncTick();
 8000e0e:	f000 fc37 	bl	8001680 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	40000400 	.word	0x40000400
 8000e20:	200008e8 	.word	0x200008e8
 8000e24:	40001000 	.word	0x40001000

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	e7fd      	b.n	8000e30 <Error_Handler+0x8>

08000e34 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000eac <MX_SPI2_Init+0x78>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e40:	2282      	movs	r2, #130	@ 0x82
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e4e:	22e0      	movs	r2, #224	@ 0xe0
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e54:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e60:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e62:	2280      	movs	r2, #128	@ 0x80
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e82:	2207      	movs	r2, #7
 8000e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e8e:	2208      	movs	r2, #8
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e92:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <MX_SPI2_Init+0x74>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f003 f931 	bl	80040fc <HAL_SPI_Init>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f7ff ffc3 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000930 	.word	0x20000930
 8000eac:	40003800 	.word	0x40003800

08000eb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	@ 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	2414      	movs	r4, #20
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2314      	movs	r3, #20
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f009 ff42 	bl	800ad4c <memset>
  if(spiHandle->Instance==SPI2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a30      	ldr	r2, [pc, #192]	@ (8000f90 <HAL_SPI_MspInit+0xe0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d159      	bne.n	8000f86 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ed2:	4b30      	ldr	r3, [pc, #192]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000ed4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000ed8:	2180      	movs	r1, #128	@ 0x80
 8000eda:	01c9      	lsls	r1, r1, #7
 8000edc:	430a      	orrs	r2, r1
 8000ede:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000ee2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ee4:	2380      	movs	r3, #128	@ 0x80
 8000ee6:	01db      	lsls	r3, r3, #7
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b29      	ldr	r3, [pc, #164]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ef2:	4b28      	ldr	r3, [pc, #160]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000efa:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000efe:	2204      	movs	r2, #4
 8000f00:	4013      	ands	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f0a:	4b22      	ldr	r3, [pc, #136]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f12:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <HAL_SPI_MspInit+0xe4>)
 8000f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f16:	2202      	movs	r2, #2
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f1e:	193b      	adds	r3, r7, r4
 8000f20:	220c      	movs	r2, #12
 8000f22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	2202      	movs	r2, #2
 8000f28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f30:	193b      	adds	r3, r7, r4
 8000f32:	2203      	movs	r2, #3
 8000f34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000f36:	193b      	adds	r3, r7, r4
 8000f38:	2201      	movs	r2, #1
 8000f3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	4a16      	ldr	r2, [pc, #88]	@ (8000f98 <HAL_SPI_MspInit+0xe8>)
 8000f40:	0019      	movs	r1, r3
 8000f42:	0010      	movs	r0, r2
 8000f44:	f001 f95a 	bl	80021fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f48:	0021      	movs	r1, r4
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	0192      	lsls	r2, r2, #6
 8000f50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2202      	movs	r2, #2
 8000f56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2203      	movs	r2, #3
 8000f62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <HAL_SPI_MspInit+0xec>)
 8000f6e:	0019      	movs	r1, r3
 8000f70:	0010      	movs	r0, r2
 8000f72:	f001 f943 	bl	80021fc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2103      	movs	r1, #3
 8000f7a:	201a      	movs	r0, #26
 8000f7c:	f001 f8a2 	bl	80020c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f80:	201a      	movs	r0, #26
 8000f82:	f001 f8b4 	bl	80020ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b00b      	add	sp, #44	@ 0x2c
 8000f8c:	bd90      	pop	{r4, r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	40003800 	.word	0x40003800
 8000f94:	40021000 	.word	0x40021000
 8000f98:	50000800 	.word	0x50000800
 8000f9c:	50000400 	.word	0x50000400

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_MspInit+0x50>)
 8000fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <HAL_MspInit+0x50>)
 8000fac:	2101      	movs	r1, #1
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_MspInit+0x50>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4013      	ands	r3, r2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_MspInit+0x50>)
 8000fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_MspInit+0x50>)
 8000fc4:	2180      	movs	r1, #128	@ 0x80
 8000fc6:	0549      	lsls	r1, r1, #21
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fcc:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_MspInit+0x50>)
 8000fce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	055b      	lsls	r3, r3, #21
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000fda:	2302      	movs	r3, #2
 8000fdc:	425b      	negs	r3, r3
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2103      	movs	r1, #3
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 f86e 	bl	80020c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000ffc:	232b      	movs	r3, #43	@ 0x2b
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001004:	4b37      	ldr	r3, [pc, #220]	@ (80010e4 <HAL_InitTick+0xf0>)
 8001006:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001008:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <HAL_InitTick+0xf0>)
 800100a:	2110      	movs	r1, #16
 800100c:	430a      	orrs	r2, r1
 800100e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001010:	4b34      	ldr	r3, [pc, #208]	@ (80010e4 <HAL_InitTick+0xf0>)
 8001012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001014:	2210      	movs	r2, #16
 8001016:	4013      	ands	r3, r2
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800101c:	230c      	movs	r3, #12
 800101e:	18fa      	adds	r2, r7, r3
 8001020:	2410      	movs	r4, #16
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0011      	movs	r1, r2
 8001026:	0018      	movs	r0, r3
 8001028:	f002 ff0a 	bl	8003e40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800102c:	193b      	adds	r3, r7, r4
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	2b00      	cmp	r3, #0
 8001036:	d104      	bne.n	8001042 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001038:	f002 feec 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 800103c:	0003      	movs	r3, r0
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001042:	f002 fee7 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8001046:	0003      	movs	r3, r0
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800104c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104e:	4926      	ldr	r1, [pc, #152]	@ (80010e8 <HAL_InitTick+0xf4>)
 8001050:	0018      	movs	r0, r3
 8001052:	f7ff f863 	bl	800011c <__udivsi3>
 8001056:	0003      	movs	r3, r0
 8001058:	3b01      	subs	r3, #1
 800105a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800105c:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <HAL_InitTick+0xf8>)
 800105e:	4a24      	ldr	r2, [pc, #144]	@ (80010f0 <HAL_InitTick+0xfc>)
 8001060:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001062:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <HAL_InitTick+0xf8>)
 8001064:	4a23      	ldr	r2, [pc, #140]	@ (80010f4 <HAL_InitTick+0x100>)
 8001066:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <HAL_InitTick+0xf8>)
 800106a:	6a3a      	ldr	r2, [r7, #32]
 800106c:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800106e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <HAL_InitTick+0xf8>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <HAL_InitTick+0xf8>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <HAL_InitTick+0xf8>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001080:	252b      	movs	r5, #43	@ 0x2b
 8001082:	197c      	adds	r4, r7, r5
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <HAL_InitTick+0xf8>)
 8001086:	0018      	movs	r0, r3
 8001088:	f003 feb0 	bl	8004dec <HAL_TIM_Base_Init>
 800108c:	0003      	movs	r3, r0
 800108e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001090:	197b      	adds	r3, r7, r5
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d11e      	bne.n	80010d6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001098:	197c      	adds	r4, r7, r5
 800109a:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <HAL_InitTick+0xf8>)
 800109c:	0018      	movs	r0, r3
 800109e:	f003 fefd 	bl	8004e9c <HAL_TIM_Base_Start_IT>
 80010a2:	0003      	movs	r3, r0
 80010a4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80010a6:	197b      	adds	r3, r7, r5
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d113      	bne.n	80010d6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80010ae:	2011      	movs	r0, #17
 80010b0:	f001 f81d 	bl	80020ee <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d809      	bhi.n	80010ce <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	0019      	movs	r1, r3
 80010c0:	2011      	movs	r0, #17
 80010c2:	f000 ffff 	bl	80020c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <HAL_InitTick+0x104>)
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e003      	b.n	80010d6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80010ce:	232b      	movs	r3, #43	@ 0x2b
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80010d6:	232b      	movs	r3, #43	@ 0x2b
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]
}
 80010dc:	0018      	movs	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	b00c      	add	sp, #48	@ 0x30
 80010e2:	bdb0      	pop	{r4, r5, r7, pc}
 80010e4:	40021000 	.word	0x40021000
 80010e8:	000f4240 	.word	0x000f4240
 80010ec:	20000994 	.word	0x20000994
 80010f0:	40001000 	.word	0x40001000
 80010f4:	000003e7 	.word	0x000003e7
 80010f8:	200000c4 	.word	0x200000c4

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	46c0      	nop			@ (mov r8, r8)
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <TIM3_IRQHandler+0x14>)
 8001112:	0018      	movs	r0, r3
 8001114:	f003 ff78 	bl	8005008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001118:	46c0      	nop			@ (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	200009e4 	.word	0x200009e4

08001124 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001128:	4b03      	ldr	r3, [pc, #12]	@ (8001138 <TIM6_IRQHandler+0x14>)
 800112a:	0018      	movs	r0, r3
 800112c:	f003 ff6c 	bl	8005008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001130:	46c0      	nop			@ (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	20000994 	.word	0x20000994

0800113c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <I2C1_IRQHandler+0x2c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	699a      	ldr	r2, [r3, #24]
 8001146:	23e0      	movs	r3, #224	@ 0xe0
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4013      	ands	r3, r2
 800114c:	d004      	beq.n	8001158 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <I2C1_IRQHandler+0x2c>)
 8001150:	0018      	movs	r0, r3
 8001152:	f001 fa95 	bl	8002680 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001156:	e003      	b.n	8001160 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <I2C1_IRQHandler+0x2c>)
 800115a:	0018      	movs	r0, r3
 800115c:	f001 fa76 	bl	800264c <HAL_I2C_EV_IRQHandler>
}
 8001160:	46c0      	nop			@ (mov r8, r8)
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			@ (mov r8, r8)
 8001168:	20000894 	.word	0x20000894

0800116c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001170:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <SPI2_IRQHandler+0x14>)
 8001172:	0018      	movs	r0, r3
 8001174:	f003 fbbc 	bl	80048f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	20000930 	.word	0x20000930

08001184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800118c:	4a14      	ldr	r2, [pc, #80]	@ (80011e0 <_sbrk+0x5c>)
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <_sbrk+0x60>)
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <_sbrk+0x64>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <_sbrk+0x68>)
 80011a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d207      	bcs.n	80011c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b4:	f009 fdd2 	bl	800ad5c <__errno>
 80011b8:	0003      	movs	r3, r0
 80011ba:	220c      	movs	r2, #12
 80011bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011be:	2301      	movs	r3, #1
 80011c0:	425b      	negs	r3, r3
 80011c2:	e009      	b.n	80011d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c4:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <_sbrk+0x64>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	18d2      	adds	r2, r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <_sbrk+0x64>)
 80011d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b006      	add	sp, #24
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20009000 	.word	0x20009000
 80011e4:	00000400 	.word	0x00000400
 80011e8:	200009e0 	.word	0x200009e0
 80011ec:	20001330 	.word	0x20001330

080011f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	46c0      	nop			@ (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	2310      	movs	r3, #16
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	0018      	movs	r0, r3
 8001208:	2310      	movs	r3, #16
 800120a:	001a      	movs	r2, r3
 800120c:	2100      	movs	r1, #0
 800120e:	f009 fd9d 	bl	800ad4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	0018      	movs	r0, r3
 8001216:	230c      	movs	r3, #12
 8001218:	001a      	movs	r2, r3
 800121a:	2100      	movs	r1, #0
 800121c:	f009 fd96 	bl	800ad4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <MX_TIM3_Init+0xa0>)
 8001222:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <MX_TIM3_Init+0xa4>)
 8001224:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <MX_TIM3_Init+0xa0>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <MX_TIM3_Init+0xa0>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36360-1;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_TIM3_Init+0xa0>)
 8001234:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <MX_TIM3_Init+0xa8>)
 8001236:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b18      	ldr	r3, [pc, #96]	@ (800129c <MX_TIM3_Init+0xa0>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b17      	ldr	r3, [pc, #92]	@ (800129c <MX_TIM3_Init+0xa0>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001244:	4b15      	ldr	r3, [pc, #84]	@ (800129c <MX_TIM3_Init+0xa0>)
 8001246:	0018      	movs	r0, r3
 8001248:	f003 fdd0 	bl	8004dec <HAL_TIM_Base_Init>
 800124c:	1e03      	subs	r3, r0, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001250:	f7ff fdea 	bl	8000e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001254:	2110      	movs	r1, #16
 8001256:	187b      	adds	r3, r7, r1
 8001258:	2280      	movs	r2, #128	@ 0x80
 800125a:	0152      	lsls	r2, r2, #5
 800125c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800125e:	187a      	adds	r2, r7, r1
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_TIM3_Init+0xa0>)
 8001262:	0011      	movs	r1, r2
 8001264:	0018      	movs	r0, r3
 8001266:	f004 f8d7 	bl	8005418 <HAL_TIM_ConfigClockSource>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800126e:	f7ff fddb 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	2220      	movs	r2, #32
 8001276:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800127e:	1d3a      	adds	r2, r7, #4
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_TIM3_Init+0xa0>)
 8001282:	0011      	movs	r1, r2
 8001284:	0018      	movs	r0, r3
 8001286:	f004 fda1 	bl	8005dcc <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	1e03      	subs	r3, r0, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800128e:	f7ff fdcb 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b008      	add	sp, #32
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	200009e4 	.word	0x200009e4
 80012a0:	40000400 	.word	0x40000400
 80012a4:	00008e07 	.word	0x00008e07

080012a8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	0018      	movs	r0, r3
 80012b2:	231c      	movs	r3, #28
 80012b4:	001a      	movs	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	f009 fd48 	bl	800ad4c <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_TIM14_Init+0x94>)
 80012be:	4a20      	ldr	r2, [pc, #128]	@ (8001340 <MX_TIM14_Init+0x98>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_TIM14_Init+0x94>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_TIM14_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <MX_TIM14_Init+0x94>)
 80012d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001344 <MX_TIM14_Init+0x9c>)
 80012d2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d4:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_TIM14_Init+0x94>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_TIM14_Init+0x94>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <MX_TIM14_Init+0x94>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f003 fd82 	bl	8004dec <HAL_TIM_Base_Init>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80012ec:	f7ff fd9c 	bl	8000e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_TIM14_Init+0x94>)
 80012f2:	0018      	movs	r0, r3
 80012f4:	f003 fe28 	bl	8004f48 <HAL_TIM_PWM_Init>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80012fc:	f7ff fd94 	bl	8000e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2260      	movs	r2, #96	@ 0x60
 8001304:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001318:	1d39      	adds	r1, r7, #4
 800131a:	4b08      	ldr	r3, [pc, #32]	@ (800133c <MX_TIM14_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	0018      	movs	r0, r3
 8001320:	f003 ff7a 	bl	8005218 <HAL_TIM_PWM_ConfigChannel>
 8001324:	1e03      	subs	r3, r0, #0
 8001326:	d001      	beq.n	800132c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001328:	f7ff fd7e 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <MX_TIM14_Init+0x94>)
 800132e:	0018      	movs	r0, r3
 8001330:	f000 f846 	bl	80013c0 <HAL_TIM_MspPostInit>

}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b008      	add	sp, #32
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000a30 	.word	0x20000a30
 8001340:	40002000 	.word	0x40002000
 8001344:	0000ffff 	.word	0x0000ffff

08001348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <HAL_TIM_Base_MspInit+0x6c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d114      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <HAL_TIM_Base_MspInit+0x70>)
 800135c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_TIM_Base_MspInit+0x70>)
 8001360:	2102      	movs	r1, #2
 8001362:	430a      	orrs	r2, r1
 8001364:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <HAL_TIM_Base_MspInit+0x70>)
 8001368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2103      	movs	r1, #3
 8001376:	2010      	movs	r0, #16
 8001378:	f000 fea4 	bl	80020c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800137c:	2010      	movs	r0, #16
 800137e:	f000 feb6 	bl	80020ee <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001382:	e012      	b.n	80013aa <HAL_TIM_Base_MspInit+0x62>
  else if(tim_baseHandle->Instance==TIM14)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <HAL_TIM_Base_MspInit+0x74>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10d      	bne.n	80013aa <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800138e:	4b0a      	ldr	r3, [pc, #40]	@ (80013b8 <HAL_TIM_Base_MspInit+0x70>)
 8001390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_TIM_Base_MspInit+0x70>)
 8001394:	2180      	movs	r1, #128	@ 0x80
 8001396:	0209      	lsls	r1, r1, #8
 8001398:	430a      	orrs	r2, r1
 800139a:	641a      	str	r2, [r3, #64]	@ 0x40
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_TIM_Base_MspInit+0x70>)
 800139e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013a0:	2380      	movs	r3, #128	@ 0x80
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
}
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b004      	add	sp, #16
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	40000400 	.word	0x40000400
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40002000 	.word	0x40002000

080013c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	240c      	movs	r4, #12
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	0018      	movs	r0, r3
 80013ce:	2314      	movs	r3, #20
 80013d0:	001a      	movs	r2, r3
 80013d2:	2100      	movs	r1, #0
 80013d4:	f009 fcba 	bl	800ad4c <memset>
  if(timHandle->Instance==TIM14)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a14      	ldr	r2, [pc, #80]	@ (8001430 <HAL_TIM_MspPostInit+0x70>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d122      	bne.n	8001428 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <HAL_TIM_MspPostInit+0x74>)
 80013e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_TIM_MspPostInit+0x74>)
 80013e8:	2104      	movs	r1, #4
 80013ea:	430a      	orrs	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <HAL_TIM_MspPostInit+0x74>)
 80013f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f2:	2204      	movs	r2, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013fa:	193b      	adds	r3, r7, r4
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	0152      	lsls	r2, r2, #5
 8001400:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	0021      	movs	r1, r4
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2202      	movs	r2, #2
 8001408:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2202      	movs	r2, #2
 800141a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141c:	187b      	adds	r3, r7, r1
 800141e:	4a06      	ldr	r2, [pc, #24]	@ (8001438 <HAL_TIM_MspPostInit+0x78>)
 8001420:	0019      	movs	r1, r3
 8001422:	0010      	movs	r0, r2
 8001424:	f000 feea 	bl	80021fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001428:	46c0      	nop			@ (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b009      	add	sp, #36	@ 0x24
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	40002000 	.word	0x40002000
 8001434:	40021000 	.word	0x40021000
 8001438:	50000800 	.word	0x50000800

0800143c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001440:	4b23      	ldr	r3, [pc, #140]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001442:	4a24      	ldr	r2, [pc, #144]	@ (80014d4 <MX_USART1_UART_Init+0x98>)
 8001444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001446:	4b22      	ldr	r3, [pc, #136]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001448:	22e1      	movs	r2, #225	@ 0xe1
 800144a:	0252      	lsls	r2, r2, #9
 800144c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145a:	4b1d      	ldr	r3, [pc, #116]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001486:	0018      	movs	r0, r3
 8001488:	f004 fd20 	bl	8005ecc <HAL_UART_Init>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d001      	beq.n	8001494 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001490:	f7ff fcca 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001494:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 8001496:	2100      	movs	r1, #0
 8001498:	0018      	movs	r0, r3
 800149a:	f005 fa23 	bl	80068e4 <HAL_UARTEx_SetTxFifoThreshold>
 800149e:	1e03      	subs	r3, r0, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014a2:	f7ff fcc1 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a6:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	0018      	movs	r0, r3
 80014ac:	f005 fa5a 	bl	8006964 <HAL_UARTEx_SetRxFifoThreshold>
 80014b0:	1e03      	subs	r3, r0, #0
 80014b2:	d001      	beq.n	80014b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014b4:	f7ff fcb8 	bl	8000e28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <MX_USART1_UART_Init+0x94>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f005 f9d8 	bl	8006870 <HAL_UARTEx_DisableFifoMode>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d001      	beq.n	80014c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014c4:	f7ff fcb0 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c8:	46c0      	nop			@ (mov r8, r8)
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			@ (mov r8, r8)
 80014d0:	20000a7c 	.word	0x20000a7c
 80014d4:	40013800 	.word	0x40013800

080014d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b091      	sub	sp, #68	@ 0x44
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	232c      	movs	r3, #44	@ 0x2c
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	0018      	movs	r0, r3
 80014e6:	2314      	movs	r3, #20
 80014e8:	001a      	movs	r2, r3
 80014ea:	2100      	movs	r1, #0
 80014ec:	f009 fc2e 	bl	800ad4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f0:	2410      	movs	r4, #16
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	0018      	movs	r0, r3
 80014f6:	231c      	movs	r3, #28
 80014f8:	001a      	movs	r2, r3
 80014fa:	2100      	movs	r1, #0
 80014fc:	f009 fc26 	bl	800ad4c <memset>
  if(uartHandle->Instance==USART1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <HAL_UART_MspInit+0xb8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d13d      	bne.n	8001586 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001516:	193b      	adds	r3, r7, r4
 8001518:	0018      	movs	r0, r3
 800151a:	f002 fcbb 	bl	8003e94 <HAL_RCCEx_PeriphCLKConfig>
 800151e:	1e03      	subs	r3, r0, #0
 8001520:	d001      	beq.n	8001526 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001522:	f7ff fc81 	bl	8000e28 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <HAL_UART_MspInit+0xbc>)
 8001528:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <HAL_UART_MspInit+0xbc>)
 800152c:	2180      	movs	r1, #128	@ 0x80
 800152e:	01c9      	lsls	r1, r1, #7
 8001530:	430a      	orrs	r2, r1
 8001532:	641a      	str	r2, [r3, #64]	@ 0x40
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <HAL_UART_MspInit+0xbc>)
 8001536:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	01db      	lsls	r3, r3, #7
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <HAL_UART_MspInit+0xbc>)
 8001544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001546:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <HAL_UART_MspInit+0xbc>)
 8001548:	2104      	movs	r1, #4
 800154a:	430a      	orrs	r2, r1
 800154c:	635a      	str	r2, [r3, #52]	@ 0x34
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_UART_MspInit+0xbc>)
 8001550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001552:	2204      	movs	r2, #4
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800155a:	212c      	movs	r1, #44	@ 0x2c
 800155c:	187b      	adds	r3, r7, r1
 800155e:	2230      	movs	r2, #48	@ 0x30
 8001560:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	187b      	adds	r3, r7, r1
 8001564:	2202      	movs	r2, #2
 8001566:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	187b      	adds	r3, r7, r1
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2201      	movs	r2, #1
 8001578:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	187b      	adds	r3, r7, r1
 800157c:	4a06      	ldr	r2, [pc, #24]	@ (8001598 <HAL_UART_MspInit+0xc0>)
 800157e:	0019      	movs	r1, r3
 8001580:	0010      	movs	r0, r2
 8001582:	f000 fe3b 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001586:	46c0      	nop			@ (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b011      	add	sp, #68	@ 0x44
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	40013800 	.word	0x40013800
 8001594:	40021000 	.word	0x40021000
 8001598:	50000800 	.word	0x50000800

0800159c <PrintOutputBuffer>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void PrintOutputBuffer(uint8_t *OutputBuffer){
 800159c:	b5b0      	push	{r4, r5, r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	uint32_t StringLength;
	HAL_StatusTypeDef HALStatus;

	for (StringLength = 0; *(OutputBuffer+StringLength); StringLength++);
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e002      	b.n	80015b0 <PrintOutputBuffer+0x14>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3301      	adds	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f6      	bne.n	80015aa <PrintOutputBuffer+0xe>

	HALStatus = HAL_UART_Transmit(&huart1, OutputBuffer, StringLength, HAL_MAX_DELAY);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	b29a      	uxth	r2, r3
 80015c0:	250b      	movs	r5, #11
 80015c2:	197c      	adds	r4, r7, r5
 80015c4:	2301      	movs	r3, #1
 80015c6:	425b      	negs	r3, r3
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4807      	ldr	r0, [pc, #28]	@ (80015e8 <PrintOutputBuffer+0x4c>)
 80015cc:	f004 fcd4 	bl	8005f78 <HAL_UART_Transmit>
 80015d0:	0003      	movs	r3, r0
 80015d2:	7023      	strb	r3, [r4, #0]

	if (HALStatus != HAL_OK){
 80015d4:	197b      	adds	r3, r7, r5
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <PrintOutputBuffer+0x44>
		Error_Handler();
 80015dc:	f7ff fc24 	bl	8000e28 <Error_Handler>
	}
}
 80015e0:	46c0      	nop			@ (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b004      	add	sp, #16
 80015e6:	bdb0      	pop	{r4, r5, r7, pc}
 80015e8:	20000a7c 	.word	0x20000a7c

080015ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015ec:	480d      	ldr	r0, [pc, #52]	@ (8001624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015f0:	f7ff fdfe 	bl	80011f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f4:	480c      	ldr	r0, [pc, #48]	@ (8001628 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f6:	490d      	ldr	r1, [pc, #52]	@ (800162c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001630 <LoopForever+0xe>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800160c:	4c0a      	ldr	r4, [pc, #40]	@ (8001638 <LoopForever+0x16>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800161a:	f009 fba5 	bl	800ad68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800161e:	f7ff f94b 	bl	80008b8 <main>

08001622 <LoopForever>:

LoopForever:
  b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   r0, =_estack
 8001624:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8001630:	0800bd2c 	.word	0x0800bd2c
  ldr r2, =_sbss
 8001634:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001638:	2000132c 	.word	0x2000132c

0800163c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_IRQHandler>
	...

08001640 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800164c:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_Init+0x3c>)
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_Init+0x3c>)
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	0049      	lsls	r1, r1, #1
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800165a:	2003      	movs	r0, #3
 800165c:	f7ff fcca 	bl	8000ff4 <HAL_InitTick>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d003      	beq.n	800166c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001664:	1dfb      	adds	r3, r7, #7
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e001      	b.n	8001670 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff fc98 	bl	8000fa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001670:	1dfb      	adds	r3, r7, #7
 8001672:	781b      	ldrb	r3, [r3, #0]
}
 8001674:	0018      	movs	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40022000 	.word	0x40022000

08001680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001684:	4b05      	ldr	r3, [pc, #20]	@ (800169c <HAL_IncTick+0x1c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	001a      	movs	r2, r3
 800168a:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_IncTick+0x20>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	18d2      	adds	r2, r2, r3
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <HAL_IncTick+0x20>)
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	46c0      	nop			@ (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	200000c8 	.word	0x200000c8
 80016a0:	20000b10 	.word	0x20000b10

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b02      	ldr	r3, [pc, #8]	@ (80016b4 <HAL_GetTick+0x10>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	20000b10 	.word	0x20000b10

080016b8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80016c8:	401a      	ands	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]
}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	fe3fffff 	.word	0xfe3fffff

080016e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	23e0      	movs	r3, #224	@ 0xe0
 80016ee:	045b      	lsls	r3, r3, #17
 80016f0:	4013      	ands	r3, r2
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}

080016fa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	2104      	movs	r1, #4
 800170e:	400a      	ands	r2, r1
 8001710:	2107      	movs	r1, #7
 8001712:	4091      	lsls	r1, r2
 8001714:	000a      	movs	r2, r1
 8001716:	43d2      	mvns	r2, r2
 8001718:	401a      	ands	r2, r3
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	2104      	movs	r1, #4
 800171e:	400b      	ands	r3, r1
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4099      	lsls	r1, r3
 8001724:	000b      	movs	r3, r1
 8001726:	431a      	orrs	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800172c:	46c0      	nop			@ (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b004      	add	sp, #16
 8001732:	bd80      	pop	{r7, pc}

08001734 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	2104      	movs	r1, #4
 8001746:	400a      	ands	r2, r1
 8001748:	2107      	movs	r1, #7
 800174a:	4091      	lsls	r1, r2
 800174c:	000a      	movs	r2, r1
 800174e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2104      	movs	r1, #4
 8001754:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001756:	40da      	lsrs	r2, r3
 8001758:	0013      	movs	r3, r2
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}

08001762 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	211f      	movs	r1, #31
 8001776:	400a      	ands	r2, r1
 8001778:	210f      	movs	r1, #15
 800177a:	4091      	lsls	r1, r2
 800177c:	000a      	movs	r2, r1
 800177e:	43d2      	mvns	r2, r2
 8001780:	401a      	ands	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0e9b      	lsrs	r3, r3, #26
 8001786:	210f      	movs	r1, #15
 8001788:	4019      	ands	r1, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	201f      	movs	r0, #31
 800178e:	4003      	ands	r3, r0
 8001790:	4099      	lsls	r1, r3
 8001792:	000b      	movs	r3, r1
 8001794:	431a      	orrs	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b004      	add	sp, #16
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	035b      	lsls	r3, r3, #13
 80017b4:	0b5b      	lsrs	r3, r3, #13
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	0352      	lsls	r2, r2, #13
 80017d6:	0b52      	lsrs	r2, r2, #13
 80017d8:	43d2      	mvns	r2, r2
 80017da:	401a      	ands	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017e0:	46c0      	nop			@ (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	b002      	add	sp, #8
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	0212      	lsls	r2, r2, #8
 80017fc:	43d2      	mvns	r2, r2
 80017fe:	401a      	ands	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	400b      	ands	r3, r1
 8001808:	4904      	ldr	r1, [pc, #16]	@ (800181c <LL_ADC_SetChannelSamplingTime+0x34>)
 800180a:	400b      	ands	r3, r1
 800180c:	431a      	orrs	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}
 800181a:	46c0      	nop			@ (mov r8, r8)
 800181c:	07ffff00 	.word	0x07ffff00

08001820 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <LL_ADC_EnableInternalRegulator+0x24>)
 800182e:	4013      	ands	r3, r2
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	0552      	lsls	r2, r2, #21
 8001834:	431a      	orrs	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	6fffffe8 	.word	0x6fffffe8

08001848 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	2380      	movs	r3, #128	@ 0x80
 8001856:	055b      	lsls	r3, r3, #21
 8001858:	401a      	ands	r2, r3
 800185a:	2380      	movs	r3, #128	@ 0x80
 800185c:	055b      	lsls	r3, r3, #21
 800185e:	429a      	cmp	r2, r3
 8001860:	d101      	bne.n	8001866 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001866:	2300      	movs	r3, #0
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <LL_ADC_IsEnabled+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <LL_ADC_IsEnabled+0x1a>
 8001888:	2300      	movs	r3, #0
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}

08001892 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2204      	movs	r2, #4
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d101      	bne.n	80018aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	0018      	movs	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	231f      	movs	r3, #31
 80018be:	18fb      	adds	r3, r7, r3
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e17f      	b.n	8001bda <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10a      	bne.n	80018f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7fe fdf9 	bl	80004dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2254      	movs	r2, #84	@ 0x54
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ffa3 	bl	8001848 <LL_ADC_IsInternalRegulatorEnabled>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d115      	bne.n	8001932 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	0018      	movs	r0, r3
 800190c:	f7ff ff88 	bl	8001820 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001910:	4bb4      	ldr	r3, [pc, #720]	@ (8001be4 <HAL_ADC_Init+0x330>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	49b4      	ldr	r1, [pc, #720]	@ (8001be8 <HAL_ADC_Init+0x334>)
 8001916:	0018      	movs	r0, r3
 8001918:	f7fe fc00 	bl	800011c <__udivsi3>
 800191c:	0003      	movs	r3, r0
 800191e:	3301      	adds	r3, #1
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001924:	e002      	b.n	800192c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3b01      	subs	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f9      	bne.n	8001926 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff ff86 	bl	8001848 <LL_ADC_IsInternalRegulatorEnabled>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d10f      	bne.n	8001960 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	2210      	movs	r2, #16
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001950:	2201      	movs	r2, #1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001958:	231f      	movs	r3, #31
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0018      	movs	r0, r3
 8001966:	f7ff ff94 	bl	8001892 <LL_ADC_REG_IsConversionOngoing>
 800196a:	0003      	movs	r3, r0
 800196c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001972:	2210      	movs	r2, #16
 8001974:	4013      	ands	r3, r2
 8001976:	d000      	beq.n	800197a <HAL_ADC_Init+0xc6>
 8001978:	e122      	b.n	8001bc0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d000      	beq.n	8001982 <HAL_ADC_Init+0xce>
 8001980:	e11e      	b.n	8001bc0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001986:	4a99      	ldr	r2, [pc, #612]	@ (8001bec <HAL_ADC_Init+0x338>)
 8001988:	4013      	ands	r3, r2
 800198a:	2202      	movs	r2, #2
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	0018      	movs	r0, r3
 8001998:	f7ff ff6a 	bl	8001870 <LL_ADC_IsEnabled>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d000      	beq.n	80019a2 <HAL_ADC_Init+0xee>
 80019a0:	e0ad      	b.n	8001afe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7e1b      	ldrb	r3, [r3, #24]
 80019aa:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019ac:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	7e5b      	ldrb	r3, [r3, #25]
 80019b2:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80019b4:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e9b      	ldrb	r3, [r3, #26]
 80019ba:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80019bc:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <HAL_ADC_Init+0x118>
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	015b      	lsls	r3, r3, #5
 80019ca:	e000      	b.n	80019ce <HAL_ADC_Init+0x11a>
 80019cc:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80019ce:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80019d4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da04      	bge.n	80019e8 <HAL_ADC_Init+0x134>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	085b      	lsrs	r3, r3, #1
 80019e6:	e001      	b.n	80019ec <HAL_ADC_Init+0x138>
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80019ec:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	212c      	movs	r1, #44	@ 0x2c
 80019f2:	5c5b      	ldrb	r3, [r3, r1]
 80019f4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019f6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2220      	movs	r2, #32
 8001a02:	5c9b      	ldrb	r3, [r3, r2]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d115      	bne.n	8001a34 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e9b      	ldrb	r3, [r3, #26]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	0252      	lsls	r2, r2, #9
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
 8001a1a:	e00b      	b.n	8001a34 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a20:	2220      	movs	r2, #32
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00a      	beq.n	8001a52 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a40:	23e0      	movs	r3, #224	@ 0xe0
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	4a65      	ldr	r2, [pc, #404]	@ (8001bf0 <HAL_ADC_Init+0x33c>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	0f9b      	lsrs	r3, r3, #30
 8001a6e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	223c      	movs	r2, #60	@ 0x3c
 8001a80:	5c9b      	ldrb	r3, [r3, r2]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d111      	bne.n	8001aaa <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	0f9b      	lsrs	r3, r3, #30
 8001a8c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a92:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001a98:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001a9e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	4a50      	ldr	r2, [pc, #320]	@ (8001bf4 <HAL_ADC_Init+0x340>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	23c0      	movs	r3, #192	@ 0xc0
 8001ac6:	061b      	lsls	r3, r3, #24
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d018      	beq.n	8001afe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	05db      	lsls	r3, r3, #23
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d012      	beq.n	8001afe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001adc:	2380      	movs	r3, #128	@ 0x80
 8001ade:	061b      	lsls	r3, r3, #24
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d00c      	beq.n	8001afe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001ae4:	4b44      	ldr	r3, [pc, #272]	@ (8001bf8 <HAL_ADC_Init+0x344>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a44      	ldr	r2, [pc, #272]	@ (8001bfc <HAL_ADC_Init+0x348>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	23f0      	movs	r3, #240	@ 0xf0
 8001af4:	039b      	lsls	r3, r3, #14
 8001af6:	401a      	ands	r2, r3
 8001af8:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf8 <HAL_ADC_Init+0x344>)
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b06:	001a      	movs	r2, r3
 8001b08:	2100      	movs	r1, #0
 8001b0a:	f7ff fdf6 	bl	80016fa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b16:	493a      	ldr	r1, [pc, #232]	@ (8001c00 <HAL_ADC_Init+0x34c>)
 8001b18:	001a      	movs	r2, r3
 8001b1a:	f7ff fdee 	bl	80016fa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2110      	movs	r1, #16
 8001b32:	4249      	negs	r1, r1
 8001b34:	430a      	orrs	r2, r1
 8001b36:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b38:	e018      	b.n	8001b6c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	039b      	lsls	r3, r3, #14
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d112      	bne.n	8001b6c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	221c      	movs	r2, #28
 8001b56:	4013      	ands	r3, r2
 8001b58:	2210      	movs	r2, #16
 8001b5a:	4252      	negs	r2, r2
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	0011      	movs	r1, r2
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2100      	movs	r1, #0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7ff fdde 	bl	8001734 <LL_ADC_GetSamplingTimeCommonChannels>
 8001b78:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d10b      	bne.n	8001b9a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	4393      	bics	r3, r2
 8001b90:	2201      	movs	r2, #1
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b98:	e01c      	b.n	8001bd4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	2212      	movs	r2, #18
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bae:	2201      	movs	r2, #1
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001bb6:	231f      	movs	r3, #31
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001bbe:	e009      	b.n	8001bd4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001bcc:	231f      	movs	r3, #31
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001bd4:	231f      	movs	r3, #31
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	781b      	ldrb	r3, [r3, #0]
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b008      	add	sp, #32
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	200000c0 	.word	0x200000c0
 8001be8:	00030d40 	.word	0x00030d40
 8001bec:	fffffefd 	.word	0xfffffefd
 8001bf0:	ffde0201 	.word	0xffde0201
 8001bf4:	1ffffc02 	.word	0x1ffffc02
 8001bf8:	40012708 	.word	0x40012708
 8001bfc:	ffc3ffff 	.word	0xffc3ffff
 8001c00:	07ffff04 	.word	0x07ffff04

08001c04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c0e:	2317      	movs	r3, #23
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2254      	movs	r2, #84	@ 0x54
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x24>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e1c0      	b.n	8001faa <HAL_ADC_ConfigChannel+0x3a6>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2254      	movs	r2, #84	@ 0x54
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff fe2c 	bl	8001892 <LL_ADC_REG_IsConversionOngoing>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d000      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0x3c>
 8001c3e:	e1a3      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d100      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x46>
 8001c48:	e143      	b.n	8001ed2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	2380      	movs	r3, #128	@ 0x80
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d004      	beq.n	8001c60 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c5a:	4ac1      	ldr	r2, [pc, #772]	@ (8001f60 <HAL_ADC_ConfigChannel+0x35c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d108      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	0019      	movs	r1, r3
 8001c6a:	0010      	movs	r0, r2
 8001c6c:	f7ff fd99 	bl	80017a2 <LL_ADC_REG_SetSequencerChAdd>
 8001c70:	e0c9      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	211f      	movs	r1, #31
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	210f      	movs	r1, #15
 8001c80:	4099      	lsls	r1, r3
 8001c82:	000b      	movs	r3, r1
 8001c84:	43db      	mvns	r3, r3
 8001c86:	4013      	ands	r3, r2
 8001c88:	0019      	movs	r1, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	035b      	lsls	r3, r3, #13
 8001c90:	0b5b      	lsrs	r3, r3, #13
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x9c>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0e9b      	lsrs	r3, r3, #26
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	e098      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d000      	beq.n	8001cac <HAL_ADC_ConfigChannel+0xa8>
 8001caa:	e091      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x1cc>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d000      	beq.n	8001cb8 <HAL_ADC_ConfigChannel+0xb4>
 8001cb6:	e089      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x1c8>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d000      	beq.n	8001cc4 <HAL_ADC_ConfigChannel+0xc0>
 8001cc2:	e081      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1c4>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2208      	movs	r2, #8
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d000      	beq.n	8001cd0 <HAL_ADC_ConfigChannel+0xcc>
 8001cce:	e079      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x1c0>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d000      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0xd8>
 8001cda:	e071      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x1bc>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d000      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0xe4>
 8001ce6:	e069      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1b8>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2240      	movs	r2, #64	@ 0x40
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d000      	beq.n	8001cf4 <HAL_ADC_ConfigChannel+0xf0>
 8001cf2:	e061      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x1b4>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2280      	movs	r2, #128	@ 0x80
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d000      	beq.n	8001d00 <HAL_ADC_ConfigChannel+0xfc>
 8001cfe:	e059      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x1b0>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d151      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x1ac>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d149      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1a8>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4013      	ands	r3, r2
 8001d22:	d141      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x1a4>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d139      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x1a0>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	015b      	lsls	r3, r3, #5
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d131      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x19c>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	019b      	lsls	r3, r3, #6
 8001d44:	4013      	ands	r3, r2
 8001d46:	d129      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x198>
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	01db      	lsls	r3, r3, #7
 8001d50:	4013      	ands	r3, r2
 8001d52:	d121      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x194>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	@ 0x80
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d119      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x190>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	2380      	movs	r3, #128	@ 0x80
 8001d66:	025b      	lsls	r3, r3, #9
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d111      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x18c>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	d109      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x188>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	02db      	lsls	r3, r3, #11
 8001d80:	4013      	ands	r3, r2
 8001d82:	d001      	beq.n	8001d88 <HAL_ADC_ConfigChannel+0x184>
 8001d84:	2312      	movs	r3, #18
 8001d86:	e024      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e022      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d8c:	2311      	movs	r3, #17
 8001d8e:	e020      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d90:	2310      	movs	r3, #16
 8001d92:	e01e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d94:	230f      	movs	r3, #15
 8001d96:	e01c      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d98:	230e      	movs	r3, #14
 8001d9a:	e01a      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001d9c:	230d      	movs	r3, #13
 8001d9e:	e018      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da0:	230c      	movs	r3, #12
 8001da2:	e016      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da4:	230b      	movs	r3, #11
 8001da6:	e014      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001da8:	230a      	movs	r3, #10
 8001daa:	e012      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dac:	2309      	movs	r3, #9
 8001dae:	e010      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001db0:	2308      	movs	r3, #8
 8001db2:	e00e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001db4:	2307      	movs	r3, #7
 8001db6:	e00c      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001db8:	2306      	movs	r3, #6
 8001dba:	e00a      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dbc:	2305      	movs	r3, #5
 8001dbe:	e008      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e006      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e004      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e002      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ce>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	6852      	ldr	r2, [r2, #4]
 8001dd6:	201f      	movs	r0, #31
 8001dd8:	4002      	ands	r2, r0
 8001dda:	4093      	lsls	r3, r2
 8001ddc:	000a      	movs	r2, r1
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d808      	bhi.n	8001e06 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	001a      	movs	r2, r3
 8001e02:	f7ff fcae 	bl	8001762 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6819      	ldr	r1, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	001a      	movs	r2, r3
 8001e14:	f7ff fce8 	bl	80017e8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db00      	blt.n	8001e22 <HAL_ADC_ConfigChannel+0x21e>
 8001e20:	e0bc      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e22:	4b50      	ldr	r3, [pc, #320]	@ (8001f64 <HAL_ADC_ConfigChannel+0x360>)
 8001e24:	0018      	movs	r0, r3
 8001e26:	f7ff fc5b 	bl	80016e0 <LL_ADC_GetCommonPathInternalCh>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a4d      	ldr	r2, [pc, #308]	@ (8001f68 <HAL_ADC_ConfigChannel+0x364>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d122      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	2380      	movs	r3, #128	@ 0x80
 8001e3c:	041b      	lsls	r3, r3, #16
 8001e3e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e40:	d11d      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2280      	movs	r2, #128	@ 0x80
 8001e46:	0412      	lsls	r2, r2, #16
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	4a46      	ldr	r2, [pc, #280]	@ (8001f64 <HAL_ADC_ConfigChannel+0x360>)
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	0010      	movs	r0, r2
 8001e50:	f7ff fc32 	bl	80016b8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e54:	4b45      	ldr	r3, [pc, #276]	@ (8001f6c <HAL_ADC_ConfigChannel+0x368>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4945      	ldr	r1, [pc, #276]	@ (8001f70 <HAL_ADC_ConfigChannel+0x36c>)
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f7fe f95e 	bl	800011c <__udivsi3>
 8001e60:	0003      	movs	r3, r0
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	0013      	movs	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	189b      	adds	r3, r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e6e:	e002      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f9      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e7c:	e08e      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a3c      	ldr	r2, [pc, #240]	@ (8001f74 <HAL_ADC_ConfigChannel+0x370>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d10e      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	045b      	lsls	r3, r3, #17
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d109      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	0452      	lsls	r2, r2, #17
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	4a32      	ldr	r2, [pc, #200]	@ (8001f64 <HAL_ADC_ConfigChannel+0x360>)
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	f7ff fc0a 	bl	80016b8 <LL_ADC_SetCommonPathInternalCh>
 8001ea4:	e07a      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a33      	ldr	r2, [pc, #204]	@ (8001f78 <HAL_ADC_ConfigChannel+0x374>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d000      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x2ae>
 8001eb0:	e074      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	2380      	movs	r3, #128	@ 0x80
 8001eb6:	03db      	lsls	r3, r3, #15
 8001eb8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001eba:	d000      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x2ba>
 8001ebc:	e06e      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	03d2      	lsls	r2, r2, #15
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	4a27      	ldr	r2, [pc, #156]	@ (8001f64 <HAL_ADC_ConfigChannel+0x360>)
 8001ec8:	0019      	movs	r1, r3
 8001eca:	0010      	movs	r0, r2
 8001ecc:	f7ff fbf4 	bl	80016b8 <LL_ADC_SetCommonPathInternalCh>
 8001ed0:	e064      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d004      	beq.n	8001ee8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_ADC_ConfigChannel+0x35c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d107      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	0010      	movs	r0, r2
 8001ef4:	f7ff fc66 	bl	80017c4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	da4d      	bge.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f00:	4b18      	ldr	r3, [pc, #96]	@ (8001f64 <HAL_ADC_ConfigChannel+0x360>)
 8001f02:	0018      	movs	r0, r3
 8001f04:	f7ff fbec 	bl	80016e0 <LL_ADC_GetCommonPathInternalCh>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a15      	ldr	r2, [pc, #84]	@ (8001f68 <HAL_ADC_ConfigChannel+0x364>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d108      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_ADC_ConfigChannel+0x378>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	4a11      	ldr	r2, [pc, #68]	@ (8001f64 <HAL_ADC_ConfigChannel+0x360>)
 8001f1e:	0019      	movs	r1, r3
 8001f20:	0010      	movs	r0, r2
 8001f22:	f7ff fbc9 	bl	80016b8 <LL_ADC_SetCommonPathInternalCh>
 8001f26:	e039      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <HAL_ADC_ConfigChannel+0x370>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d108      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4a12      	ldr	r2, [pc, #72]	@ (8001f80 <HAL_ADC_ConfigChannel+0x37c>)
 8001f36:	4013      	ands	r3, r2
 8001f38:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_ADC_ConfigChannel+0x360>)
 8001f3a:	0019      	movs	r1, r3
 8001f3c:	0010      	movs	r0, r2
 8001f3e:	f7ff fbbb 	bl	80016b8 <LL_ADC_SetCommonPathInternalCh>
 8001f42:	e02b      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a0b      	ldr	r2, [pc, #44]	@ (8001f78 <HAL_ADC_ConfigChannel+0x374>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d126      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4a0c      	ldr	r2, [pc, #48]	@ (8001f84 <HAL_ADC_ConfigChannel+0x380>)
 8001f52:	4013      	ands	r3, r2
 8001f54:	4a03      	ldr	r2, [pc, #12]	@ (8001f64 <HAL_ADC_ConfigChannel+0x360>)
 8001f56:	0019      	movs	r1, r3
 8001f58:	0010      	movs	r0, r2
 8001f5a:	f7ff fbad 	bl	80016b8 <LL_ADC_SetCommonPathInternalCh>
 8001f5e:	e01d      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x398>
 8001f60:	80000004 	.word	0x80000004
 8001f64:	40012708 	.word	0x40012708
 8001f68:	b0001000 	.word	0xb0001000
 8001f6c:	200000c0 	.word	0x200000c0
 8001f70:	00030d40 	.word	0x00030d40
 8001f74:	b8004000 	.word	0xb8004000
 8001f78:	b4002000 	.word	0xb4002000
 8001f7c:	ff7fffff 	.word	0xff7fffff
 8001f80:	feffffff 	.word	0xfeffffff
 8001f84:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f94:	2317      	movs	r3, #23
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2254      	movs	r2, #84	@ 0x54
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001fa4:	2317      	movs	r3, #23
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b006      	add	sp, #24
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			@ (mov r8, r8)

08001fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	0002      	movs	r2, r0
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	1dfb      	adds	r3, r7, #7
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fc6:	d809      	bhi.n	8001fdc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc8:	1dfb      	adds	r3, r7, #7
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	001a      	movs	r2, r3
 8001fce:	231f      	movs	r3, #31
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <__NVIC_EnableIRQ+0x30>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	4091      	lsls	r1, r2
 8001fd8:	000a      	movs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	e000e100 	.word	0xe000e100

08001fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fe8:	b590      	push	{r4, r7, lr}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	0002      	movs	r2, r0
 8001ff0:	6039      	str	r1, [r7, #0]
 8001ff2:	1dfb      	adds	r3, r7, #7
 8001ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ffc:	d828      	bhi.n	8002050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80020bc <__NVIC_SetPriority+0xd4>)
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	33c0      	adds	r3, #192	@ 0xc0
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	589b      	ldr	r3, [r3, r2]
 800200e:	1dfa      	adds	r2, r7, #7
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	0011      	movs	r1, r2
 8002014:	2203      	movs	r2, #3
 8002016:	400a      	ands	r2, r1
 8002018:	00d2      	lsls	r2, r2, #3
 800201a:	21ff      	movs	r1, #255	@ 0xff
 800201c:	4091      	lsls	r1, r2
 800201e:	000a      	movs	r2, r1
 8002020:	43d2      	mvns	r2, r2
 8002022:	401a      	ands	r2, r3
 8002024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	019b      	lsls	r3, r3, #6
 800202a:	22ff      	movs	r2, #255	@ 0xff
 800202c:	401a      	ands	r2, r3
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	2303      	movs	r3, #3
 8002036:	4003      	ands	r3, r0
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203c:	481f      	ldr	r0, [pc, #124]	@ (80020bc <__NVIC_SetPriority+0xd4>)
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b25b      	sxtb	r3, r3
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	430a      	orrs	r2, r1
 8002048:	33c0      	adds	r3, #192	@ 0xc0
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800204e:	e031      	b.n	80020b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <__NVIC_SetPriority+0xd8>)
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	0019      	movs	r1, r3
 8002058:	230f      	movs	r3, #15
 800205a:	400b      	ands	r3, r1
 800205c:	3b08      	subs	r3, #8
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3306      	adds	r3, #6
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	3304      	adds	r3, #4
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1dfa      	adds	r2, r7, #7
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	0011      	movs	r1, r2
 8002070:	2203      	movs	r2, #3
 8002072:	400a      	ands	r2, r1
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	21ff      	movs	r1, #255	@ 0xff
 8002078:	4091      	lsls	r1, r2
 800207a:	000a      	movs	r2, r1
 800207c:	43d2      	mvns	r2, r2
 800207e:	401a      	ands	r2, r3
 8002080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	22ff      	movs	r2, #255	@ 0xff
 8002088:	401a      	ands	r2, r3
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	0018      	movs	r0, r3
 8002090:	2303      	movs	r3, #3
 8002092:	4003      	ands	r3, r0
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002098:	4809      	ldr	r0, [pc, #36]	@ (80020c0 <__NVIC_SetPriority+0xd8>)
 800209a:	1dfb      	adds	r3, r7, #7
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	001c      	movs	r4, r3
 80020a0:	230f      	movs	r3, #15
 80020a2:	4023      	ands	r3, r4
 80020a4:	3b08      	subs	r3, #8
 80020a6:	089b      	lsrs	r3, r3, #2
 80020a8:	430a      	orrs	r2, r1
 80020aa:	3306      	adds	r3, #6
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	18c3      	adds	r3, r0, r3
 80020b0:	3304      	adds	r3, #4
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b003      	add	sp, #12
 80020ba:	bd90      	pop	{r4, r7, pc}
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	210f      	movs	r1, #15
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	1c02      	adds	r2, r0, #0
 80020d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	187b      	adds	r3, r7, r1
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	0011      	movs	r1, r2
 80020e0:	0018      	movs	r0, r3
 80020e2:	f7ff ff81 	bl	8001fe8 <__NVIC_SetPriority>
}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b004      	add	sp, #16
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	0002      	movs	r2, r0
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	b25b      	sxtb	r3, r3
 8002100:	0018      	movs	r0, r3
 8002102:	f7ff ff57 	bl	8001fb4 <__NVIC_EnableIRQ>
}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	210f      	movs	r1, #15
 800211a:	187b      	adds	r3, r7, r1
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2225      	movs	r2, #37	@ 0x25
 8002124:	5c9b      	ldrb	r3, [r3, r2]
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d006      	beq.n	800213a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2204      	movs	r2, #4
 8002130:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002132:	187b      	adds	r3, r7, r1
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e049      	b.n	80021ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	210e      	movs	r1, #14
 8002146:	438a      	bics	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	438a      	bics	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002164:	491d      	ldr	r1, [pc, #116]	@ (80021dc <HAL_DMA_Abort_IT+0xcc>)
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800216a:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <HAL_DMA_Abort_IT+0xd0>)
 800216c:	6859      	ldr	r1, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	221c      	movs	r2, #28
 8002174:	4013      	ands	r3, r2
 8002176:	2201      	movs	r2, #1
 8002178:	409a      	lsls	r2, r3
 800217a:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_DMA_Abort_IT+0xd0>)
 800217c:	430a      	orrs	r2, r1
 800217e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002188:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800219c:	490f      	ldr	r1, [pc, #60]	@ (80021dc <HAL_DMA_Abort_IT+0xcc>)
 800219e:	400a      	ands	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80021aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2225      	movs	r2, #37	@ 0x25
 80021b0:	2101      	movs	r1, #1
 80021b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	@ 0x24
 80021b8:	2100      	movs	r1, #0
 80021ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	0010      	movs	r0, r2
 80021cc:	4798      	blx	r3
    }
  }
  return status;
 80021ce:	230f      	movs	r3, #15
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	781b      	ldrb	r3, [r3, #0]
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b004      	add	sp, #16
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fffffeff 	.word	0xfffffeff
 80021e0:	40020000 	.word	0x40020000

080021e4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2225      	movs	r2, #37	@ 0x25
 80021f0:	5c9b      	ldrb	r3, [r3, r2]
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220a:	e147      	b.n	800249c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4091      	lsls	r1, r2
 8002216:	000a      	movs	r2, r1
 8002218:	4013      	ands	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d100      	bne.n	8002224 <HAL_GPIO_Init+0x28>
 8002222:	e138      	b.n	8002496 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2203      	movs	r2, #3
 800222a:	4013      	ands	r3, r2
 800222c:	2b01      	cmp	r3, #1
 800222e:	d005      	beq.n	800223c <HAL_GPIO_Init+0x40>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	4013      	ands	r3, r2
 8002238:	2b02      	cmp	r3, #2
 800223a:	d130      	bne.n	800229e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	409a      	lsls	r2, r3
 800224a:	0013      	movs	r3, r2
 800224c:	43da      	mvns	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	409a      	lsls	r2, r3
 800225e:	0013      	movs	r3, r2
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002272:	2201      	movs	r2, #1
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	43da      	mvns	r2, r3
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	2201      	movs	r2, #1
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
 8002290:	0013      	movs	r3, r2
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2203      	movs	r2, #3
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d017      	beq.n	80022da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	409a      	lsls	r2, r3
 80022b8:	0013      	movs	r3, r2
 80022ba:	43da      	mvns	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2203      	movs	r2, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d123      	bne.n	800232e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	08da      	lsrs	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3208      	adds	r2, #8
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	58d3      	ldr	r3, [r2, r3]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2207      	movs	r2, #7
 80022f8:	4013      	ands	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	220f      	movs	r2, #15
 80022fe:	409a      	lsls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	43da      	mvns	r2, r3
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2107      	movs	r1, #7
 8002312:	400b      	ands	r3, r1
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	6939      	ldr	r1, [r7, #16]
 800232c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	409a      	lsls	r2, r3
 800233c:	0013      	movs	r3, r2
 800233e:	43da      	mvns	r2, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	401a      	ands	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	409a      	lsls	r2, r3
 8002354:	0013      	movs	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	23c0      	movs	r3, #192	@ 0xc0
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	4013      	ands	r3, r2
 800236c:	d100      	bne.n	8002370 <HAL_GPIO_Init+0x174>
 800236e:	e092      	b.n	8002496 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002370:	4a50      	ldr	r2, [pc, #320]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3318      	adds	r3, #24
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	589b      	ldr	r3, [r3, r2]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2203      	movs	r2, #3
 8002382:	4013      	ands	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	220f      	movs	r2, #15
 8002388:	409a      	lsls	r2, r3
 800238a:	0013      	movs	r3, r2
 800238c:	43da      	mvns	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	23a0      	movs	r3, #160	@ 0xa0
 8002398:	05db      	lsls	r3, r3, #23
 800239a:	429a      	cmp	r2, r3
 800239c:	d013      	beq.n	80023c6 <HAL_GPIO_Init+0x1ca>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a45      	ldr	r2, [pc, #276]	@ (80024b8 <HAL_GPIO_Init+0x2bc>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00d      	beq.n	80023c2 <HAL_GPIO_Init+0x1c6>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a44      	ldr	r2, [pc, #272]	@ (80024bc <HAL_GPIO_Init+0x2c0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <HAL_GPIO_Init+0x1c2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a43      	ldr	r2, [pc, #268]	@ (80024c0 <HAL_GPIO_Init+0x2c4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_GPIO_Init+0x1be>
 80023b6:	2303      	movs	r3, #3
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x1cc>
 80023ba:	2305      	movs	r3, #5
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x1cc>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x1cc>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x1cc>
 80023c6:	2300      	movs	r3, #0
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	2103      	movs	r1, #3
 80023cc:	400a      	ands	r2, r1
 80023ce:	00d2      	lsls	r2, r2, #3
 80023d0:	4093      	lsls	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023d8:	4936      	ldr	r1, [pc, #216]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3318      	adds	r3, #24
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e6:	4b33      	ldr	r3, [pc, #204]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43da      	mvns	r2, r3
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	035b      	lsls	r3, r3, #13
 80023fe:	4013      	ands	r3, r2
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800240a:	4b2a      	ldr	r3, [pc, #168]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002410:	4b28      	ldr	r3, [pc, #160]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43da      	mvns	r2, r3
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	039b      	lsls	r3, r3, #14
 8002428:	4013      	ands	r3, r2
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002434:	4b1f      	ldr	r3, [pc, #124]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800243a:	4a1e      	ldr	r2, [pc, #120]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 800243c:	2384      	movs	r3, #132	@ 0x84
 800243e:	58d3      	ldr	r3, [r2, r3]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43da      	mvns	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	029b      	lsls	r3, r3, #10
 8002454:	4013      	ands	r3, r2
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002460:	4914      	ldr	r1, [pc, #80]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 8002462:	2284      	movs	r2, #132	@ 0x84
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 800246a:	2380      	movs	r3, #128	@ 0x80
 800246c:	58d3      	ldr	r3, [r2, r3]
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43da      	mvns	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	025b      	lsls	r3, r3, #9
 8002482:	4013      	ands	r3, r2
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800248e:	4909      	ldr	r1, [pc, #36]	@ (80024b4 <HAL_GPIO_Init+0x2b8>)
 8002490:	2280      	movs	r2, #128	@ 0x80
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	40da      	lsrs	r2, r3
 80024a4:	1e13      	subs	r3, r2, #0
 80024a6:	d000      	beq.n	80024aa <HAL_GPIO_Init+0x2ae>
 80024a8:	e6b0      	b.n	800220c <HAL_GPIO_Init+0x10>
  }
}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	46c0      	nop			@ (mov r8, r8)
 80024ae:	46bd      	mov	sp, r7
 80024b0:	b006      	add	sp, #24
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021800 	.word	0x40021800
 80024b8:	50000400 	.word	0x50000400
 80024bc:	50000800 	.word	0x50000800
 80024c0:	50000c00 	.word	0x50000c00

080024c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	0008      	movs	r0, r1
 80024ce:	0011      	movs	r1, r2
 80024d0:	1cbb      	adds	r3, r7, #2
 80024d2:	1c02      	adds	r2, r0, #0
 80024d4:	801a      	strh	r2, [r3, #0]
 80024d6:	1c7b      	adds	r3, r7, #1
 80024d8:	1c0a      	adds	r2, r1, #0
 80024da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024dc:	1c7b      	adds	r3, r7, #1
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d004      	beq.n	80024ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024e4:	1cbb      	adds	r3, r7, #2
 80024e6:	881a      	ldrh	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024ec:	e003      	b.n	80024f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024ee:	1cbb      	adds	r3, r7, #2
 80024f0:	881a      	ldrh	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b002      	add	sp, #8
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e08f      	b.n	8002632 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2241      	movs	r2, #65	@ 0x41
 8002516:	5c9b      	ldrb	r3, [r3, r2]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d107      	bne.n	800252e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	2100      	movs	r1, #0
 8002524:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0018      	movs	r0, r3
 800252a:	f7fe f95b 	bl	80007e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2241      	movs	r2, #65	@ 0x41
 8002532:	2124      	movs	r1, #36	@ 0x24
 8002534:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2101      	movs	r1, #1
 8002542:	438a      	bics	r2, r1
 8002544:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	493b      	ldr	r1, [pc, #236]	@ (800263c <HAL_I2C_Init+0x13c>)
 8002550:	400a      	ands	r2, r1
 8002552:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4938      	ldr	r1, [pc, #224]	@ (8002640 <HAL_I2C_Init+0x140>)
 8002560:	400a      	ands	r2, r1
 8002562:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d108      	bne.n	800257e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2180      	movs	r1, #128	@ 0x80
 8002576:	0209      	lsls	r1, r1, #8
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	e007      	b.n	800258e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2184      	movs	r1, #132	@ 0x84
 8002588:	0209      	lsls	r1, r1, #8
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d109      	bne.n	80025aa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2180      	movs	r1, #128	@ 0x80
 80025a2:	0109      	lsls	r1, r1, #4
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	e007      	b.n	80025ba <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4923      	ldr	r1, [pc, #140]	@ (8002644 <HAL_I2C_Init+0x144>)
 80025b6:	400a      	ands	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4920      	ldr	r1, [pc, #128]	@ (8002648 <HAL_I2C_Init+0x148>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	491a      	ldr	r1, [pc, #104]	@ (8002640 <HAL_I2C_Init+0x140>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69d9      	ldr	r1, [r3, #28]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1a      	ldr	r2, [r3, #32]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2101      	movs	r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2241      	movs	r2, #65	@ 0x41
 800261e:	2120      	movs	r1, #32
 8002620:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2242      	movs	r2, #66	@ 0x42
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b002      	add	sp, #8
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	f0ffffff 	.word	0xf0ffffff
 8002640:	ffff7fff 	.word	0xffff7fff
 8002644:	fffff7ff 	.word	0xfffff7ff
 8002648:	02008000 	.word	0x02008000

0800264c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002668:	2b00      	cmp	r3, #0
 800266a:	d005      	beq.n	8002678 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	4798      	blx	r3
  }
}
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4013      	ands	r3, r2
 80026a0:	d00e      	beq.n	80026c0 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2280      	movs	r2, #128	@ 0x80
 80026a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80026a8:	d00a      	beq.n	80026c0 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	2201      	movs	r2, #1
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2280      	movs	r2, #128	@ 0x80
 80026bc:	0052      	lsls	r2, r2, #1
 80026be:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4013      	ands	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2280      	movs	r2, #128	@ 0x80
 80026ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026d0:	d00a      	beq.n	80026e8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d6:	2208      	movs	r2, #8
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2280      	movs	r2, #128	@ 0x80
 80026e4:	00d2      	lsls	r2, r2, #3
 80026e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d00e      	beq.n	8002710 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2280      	movs	r2, #128	@ 0x80
 80026f6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026f8:	d00a      	beq.n	8002710 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	2202      	movs	r2, #2
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2280      	movs	r2, #128	@ 0x80
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	220b      	movs	r2, #11
 800271a:	4013      	ands	r3, r2
 800271c:	d005      	beq.n	800272a <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0011      	movs	r1, r2
 8002724:	0018      	movs	r0, r3
 8002726:	f000 fc1d 	bl	8002f64 <I2C_ITError>
  }
}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	b006      	add	sp, #24
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b002      	add	sp, #8
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800274a:	46c0      	nop			@ (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	0008      	movs	r0, r1
 800275c:	0011      	movs	r1, r2
 800275e:	1cfb      	adds	r3, r7, #3
 8002760:	1c02      	adds	r2, r0, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	003b      	movs	r3, r7
 8002766:	1c0a      	adds	r2, r1, #0
 8002768:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800276a:	46c0      	nop			@ (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b002      	add	sp, #8
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800277a:	46c0      	nop			@ (mov r8, r8)
 800277c:	46bd      	mov	sp, r7
 800277e:	b002      	add	sp, #8
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800278a:	46c0      	nop			@ (mov r8, r8)
 800278c:	46bd      	mov	sp, r7
 800278e:	b002      	add	sp, #8
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2240      	movs	r2, #64	@ 0x40
 80027ae:	5c9b      	ldrb	r3, [r3, r2]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <I2C_Slave_ISR_IT+0x24>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0e7      	b.n	8002988 <I2C_Slave_ISR_IT+0x1f4>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2240      	movs	r2, #64	@ 0x40
 80027bc:	2101      	movs	r1, #1
 80027be:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	2220      	movs	r2, #32
 80027c4:	4013      	ands	r3, r2
 80027c6:	d00a      	beq.n	80027de <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027ce:	d006      	beq.n	80027de <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	0011      	movs	r1, r2
 80027d6:	0018      	movs	r0, r3
 80027d8:	f000 f9e4 	bl	8002ba4 <I2C_ITSlaveCplt>
 80027dc:	e0cf      	b.n	800297e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2210      	movs	r2, #16
 80027e2:	4013      	ands	r3, r2
 80027e4:	d052      	beq.n	800288c <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2210      	movs	r2, #16
 80027ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027ec:	d04e      	beq.n	800288c <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d12d      	bne.n	8002854 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2241      	movs	r2, #65	@ 0x41
 80027fc:	5c9b      	ldrb	r3, [r3, r2]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b28      	cmp	r3, #40	@ 0x28
 8002802:	d10b      	bne.n	800281c <I2C_Slave_ISR_IT+0x88>
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	2380      	movs	r3, #128	@ 0x80
 8002808:	049b      	lsls	r3, r3, #18
 800280a:	429a      	cmp	r2, r3
 800280c:	d106      	bne.n	800281c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fb4d 	bl	8002eb4 <I2C_ITListenCplt>
 800281a:	e036      	b.n	800288a <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2241      	movs	r2, #65	@ 0x41
 8002820:	5c9b      	ldrb	r3, [r3, r2]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b29      	cmp	r3, #41	@ 0x29
 8002826:	d110      	bne.n	800284a <I2C_Slave_ISR_IT+0xb6>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4a59      	ldr	r2, [pc, #356]	@ (8002990 <I2C_Slave_ISR_IT+0x1fc>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00c      	beq.n	800284a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2210      	movs	r2, #16
 8002836:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	0018      	movs	r0, r3
 800283c:	f000 fcbd 	bl	80031ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	0018      	movs	r0, r3
 8002844:	f000 f94a 	bl	8002adc <I2C_ITSlaveSeqCplt>
 8002848:	e01f      	b.n	800288a <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2210      	movs	r2, #16
 8002850:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002852:	e091      	b.n	8002978 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2210      	movs	r2, #16
 800285a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002860:	2204      	movs	r2, #4
 8002862:	431a      	orrs	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d005      	beq.n	800287a <I2C_Slave_ISR_IT+0xe6>
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	2380      	movs	r3, #128	@ 0x80
 8002872:	045b      	lsls	r3, r3, #17
 8002874:	429a      	cmp	r2, r3
 8002876:	d000      	beq.n	800287a <I2C_Slave_ISR_IT+0xe6>
 8002878:	e07e      	b.n	8002978 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	0011      	movs	r1, r2
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fb6e 	bl	8002f64 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002888:	e076      	b.n	8002978 <I2C_Slave_ISR_IT+0x1e4>
 800288a:	e075      	b.n	8002978 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d02f      	beq.n	80028f4 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2204      	movs	r2, #4
 8002898:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800289a:	d02b      	beq.n	80028f4 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d14c      	bne.n	800297c <I2C_Slave_ISR_IT+0x1e8>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002990 <I2C_Slave_ISR_IT+0x1fc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d048      	beq.n	800297c <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 f8f5 	bl	8002adc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028f2:	e043      	b.n	800297c <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2208      	movs	r2, #8
 80028f8:	4013      	ands	r3, r2
 80028fa:	d00a      	beq.n	8002912 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2208      	movs	r2, #8
 8002900:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002902:	d006      	beq.n	8002912 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	0011      	movs	r1, r2
 800290a:	0018      	movs	r0, r3
 800290c:	f000 f842 	bl	8002994 <I2C_ITAddrCplt>
 8002910:	e035      	b.n	800297e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2202      	movs	r2, #2
 8002916:	4013      	ands	r3, r2
 8002918:	d031      	beq.n	800297e <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002920:	d02d      	beq.n	800297e <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d018      	beq.n	800295e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800295c:	e00f      	b.n	800297e <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	2380      	movs	r3, #128	@ 0x80
 8002962:	045b      	lsls	r3, r3, #17
 8002964:	429a      	cmp	r2, r3
 8002966:	d002      	beq.n	800296e <I2C_Slave_ISR_IT+0x1da>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d107      	bne.n	800297e <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	0018      	movs	r0, r3
 8002972:	f000 f8b3 	bl	8002adc <I2C_ITSlaveSeqCplt>
 8002976:	e002      	b.n	800297e <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	e000      	b.n	800297e <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 800297c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2240      	movs	r2, #64	@ 0x40
 8002982:	2100      	movs	r1, #0
 8002984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b006      	add	sp, #24
 800298e:	bd80      	pop	{r7, pc}
 8002990:	ffff0000 	.word	0xffff0000

08002994 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2241      	movs	r2, #65	@ 0x41
 80029a2:	5c9b      	ldrb	r3, [r3, r2]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	001a      	movs	r2, r3
 80029a8:	2328      	movs	r3, #40	@ 0x28
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b28      	cmp	r3, #40	@ 0x28
 80029ae:	d000      	beq.n	80029b2 <I2C_ITAddrCplt+0x1e>
 80029b0:	e088      	b.n	8002ac4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	250f      	movs	r5, #15
 80029be:	197b      	adds	r3, r7, r5
 80029c0:	2101      	movs	r1, #1
 80029c2:	400a      	ands	r2, r1
 80029c4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	200c      	movs	r0, #12
 80029d2:	183b      	adds	r3, r7, r0
 80029d4:	21fe      	movs	r1, #254	@ 0xfe
 80029d6:	400a      	ands	r2, r1
 80029d8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	240a      	movs	r4, #10
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	0592      	lsls	r2, r2, #22
 80029e8:	0d92      	lsrs	r2, r2, #22
 80029ea:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	2308      	movs	r3, #8
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	21fe      	movs	r1, #254	@ 0xfe
 80029fa:	400a      	ands	r2, r1
 80029fc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d148      	bne.n	8002a98 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002a06:	0021      	movs	r1, r4
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	09db      	lsrs	r3, r3, #7
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	183b      	adds	r3, r7, r0
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	4053      	eors	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	001a      	movs	r2, r3
 8002a1a:	2306      	movs	r3, #6
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d120      	bne.n	8002a62 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002a20:	183b      	adds	r3, r7, r0
 8002a22:	187a      	adds	r2, r7, r1
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d14c      	bne.n	8002ad4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2208      	movs	r2, #8
 8002a46:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2240      	movs	r2, #64	@ 0x40
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	197b      	adds	r3, r7, r5
 8002a56:	7819      	ldrb	r1, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff fe79 	bl	8002752 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a60:	e038      	b.n	8002ad4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002a62:	240c      	movs	r4, #12
 8002a64:	193b      	adds	r3, r7, r4
 8002a66:	2208      	movs	r2, #8
 8002a68:	18ba      	adds	r2, r7, r2
 8002a6a:	8812      	ldrh	r2, [r2, #0]
 8002a6c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0011      	movs	r1, r2
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 fbe0 	bl	800323c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2240      	movs	r2, #64	@ 0x40
 8002a80:	2100      	movs	r1, #0
 8002a82:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	881a      	ldrh	r2, [r3, #0]
 8002a88:	230f      	movs	r3, #15
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	7819      	ldrb	r1, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff fe5e 	bl	8002752 <HAL_I2C_AddrCallback>
}
 8002a96:	e01d      	b.n	8002ad4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	021a      	lsls	r2, r3, #8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0011      	movs	r1, r2
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f000 fbcb 	bl	800323c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2240      	movs	r2, #64	@ 0x40
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002aae:	230c      	movs	r3, #12
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	881a      	ldrh	r2, [r3, #0]
 8002ab4:	230f      	movs	r3, #15
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	7819      	ldrb	r1, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff fe48 	bl	8002752 <HAL_I2C_AddrCallback>
}
 8002ac2:	e007      	b.n	8002ad4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2208      	movs	r2, #8
 8002aca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2240      	movs	r2, #64	@ 0x40
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	5499      	strb	r1, [r3, r2]
}
 8002ad4:	46c0      	nop			@ (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b004      	add	sp, #16
 8002ada:	bdb0      	pop	{r4, r5, r7, pc}

08002adc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2242      	movs	r2, #66	@ 0x42
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	2380      	movs	r3, #128	@ 0x80
 8002af8:	01db      	lsls	r3, r3, #7
 8002afa:	4013      	ands	r3, r2
 8002afc:	d008      	beq.n	8002b10 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4924      	ldr	r1, [pc, #144]	@ (8002b9c <I2C_ITSlaveSeqCplt+0xc0>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e00c      	b.n	8002b2a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	4013      	ands	r3, r2
 8002b18:	d007      	beq.n	8002b2a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	491e      	ldr	r1, [pc, #120]	@ (8002ba0 <I2C_ITSlaveSeqCplt+0xc4>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2241      	movs	r2, #65	@ 0x41
 8002b2e:	5c9b      	ldrb	r3, [r3, r2]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b29      	cmp	r3, #41	@ 0x29
 8002b34:	d114      	bne.n	8002b60 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2241      	movs	r2, #65	@ 0x41
 8002b3a:	2128      	movs	r1, #40	@ 0x28
 8002b3c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2221      	movs	r2, #33	@ 0x21
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2101      	movs	r1, #1
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fb77 	bl	800323c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2240      	movs	r2, #64	@ 0x40
 8002b52:	2100      	movs	r1, #0
 8002b54:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f7ff fdea 	bl	8002732 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b5e:	e019      	b.n	8002b94 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2241      	movs	r2, #65	@ 0x41
 8002b64:	5c9b      	ldrb	r3, [r3, r2]
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b6a:	d113      	bne.n	8002b94 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2241      	movs	r2, #65	@ 0x41
 8002b70:	2128      	movs	r1, #40	@ 0x28
 8002b72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2222      	movs	r2, #34	@ 0x22
 8002b78:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 fb5c 	bl	800323c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2240      	movs	r2, #64	@ 0x40
 8002b88:	2100      	movs	r1, #0
 8002b8a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7ff fdd7 	bl	8002742 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	b004      	add	sp, #16
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	ffffbfff 	.word	0xffffbfff
 8002ba0:	ffff7fff 	.word	0xffff7fff

08002ba4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002bc0:	200b      	movs	r0, #11
 8002bc2:	183b      	adds	r3, r7, r0
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	2141      	movs	r1, #65	@ 0x41
 8002bc8:	5c52      	ldrb	r2, [r2, r1]
 8002bca:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bd4:	183b      	adds	r3, r7, r0
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b21      	cmp	r3, #33	@ 0x21
 8002bda:	d003      	beq.n	8002be4 <I2C_ITSlaveCplt+0x40>
 8002bdc:	183b      	adds	r3, r7, r0
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b29      	cmp	r3, #41	@ 0x29
 8002be2:	d109      	bne.n	8002bf8 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002be4:	4aac      	ldr	r2, [pc, #688]	@ (8002e98 <I2C_ITSlaveCplt+0x2f4>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0011      	movs	r1, r2
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 fb26 	bl	800323c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2221      	movs	r2, #33	@ 0x21
 8002bf4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bf6:	e020      	b.n	8002c3a <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bf8:	220b      	movs	r2, #11
 8002bfa:	18bb      	adds	r3, r7, r2
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b22      	cmp	r3, #34	@ 0x22
 8002c00:	d003      	beq.n	8002c0a <I2C_ITSlaveCplt+0x66>
 8002c02:	18bb      	adds	r3, r7, r2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c08:	d109      	bne.n	8002c1e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002c0a:	4aa4      	ldr	r2, [pc, #656]	@ (8002e9c <I2C_ITSlaveCplt+0x2f8>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0011      	movs	r1, r2
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 fb13 	bl	800323c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2222      	movs	r2, #34	@ 0x22
 8002c1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c1c:	e00d      	b.n	8002c3a <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002c1e:	230b      	movs	r3, #11
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b28      	cmp	r3, #40	@ 0x28
 8002c26:	d108      	bne.n	8002c3a <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002c28:	4a9d      	ldr	r2, [pc, #628]	@ (8002ea0 <I2C_ITSlaveCplt+0x2fc>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0011      	movs	r1, r2
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f000 fb04 	bl	800323c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	@ 0x80
 8002c46:	0209      	lsls	r1, r1, #8
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4993      	ldr	r1, [pc, #588]	@ (8002ea4 <I2C_ITSlaveCplt+0x300>)
 8002c58:	400a      	ands	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 faab 	bl	80031ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	2380      	movs	r3, #128	@ 0x80
 8002c68:	01db      	lsls	r3, r3, #7
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	498b      	ldr	r1, [pc, #556]	@ (8002ea8 <I2C_ITSlaveCplt+0x304>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01f      	beq.n	8002cc6 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c94:	e017      	b.n	8002cc6 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d012      	beq.n	8002cc6 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4980      	ldr	r1, [pc, #512]	@ (8002eac <I2C_ITSlaveCplt+0x308>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d006      	beq.n	8002cc6 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d020      	beq.n	8002d10 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	4393      	bics	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00c      	beq.n	8002d10 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	2204      	movs	r2, #4
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d04f      	beq.n	8002dce <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	2210      	movs	r2, #16
 8002d32:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d34:	d04b      	beq.n	8002dce <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d12d      	bne.n	8002d9c <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2241      	movs	r2, #65	@ 0x41
 8002d44:	5c9b      	ldrb	r3, [r3, r2]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b28      	cmp	r3, #40	@ 0x28
 8002d4a:	d10b      	bne.n	8002d64 <I2C_ITSlaveCplt+0x1c0>
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	049b      	lsls	r3, r3, #18
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d106      	bne.n	8002d64 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	0011      	movs	r1, r2
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f000 f8a9 	bl	8002eb4 <I2C_ITListenCplt>
 8002d62:	e034      	b.n	8002dce <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2241      	movs	r2, #65	@ 0x41
 8002d68:	5c9b      	ldrb	r3, [r3, r2]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b29      	cmp	r3, #41	@ 0x29
 8002d6e:	d110      	bne.n	8002d92 <I2C_ITSlaveCplt+0x1ee>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb0 <I2C_ITSlaveCplt+0x30c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00c      	beq.n	8002d92 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2210      	movs	r2, #16
 8002d7e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0018      	movs	r0, r3
 8002d84:	f000 fa19 	bl	80031ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f7ff fea6 	bl	8002adc <I2C_ITSlaveSeqCplt>
 8002d90:	e01d      	b.n	8002dce <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2210      	movs	r2, #16
 8002d98:	61da      	str	r2, [r3, #28]
 8002d9a:	e018      	b.n	8002dce <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2210      	movs	r2, #16
 8002da2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da8:	2204      	movs	r2, #4
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <I2C_ITSlaveCplt+0x21c>
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	045b      	lsls	r3, r3, #17
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d106      	bne.n	8002dce <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0011      	movs	r1, r2
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 f8cb 	bl	8002f64 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2242      	movs	r2, #66	@ 0x42
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0011      	movs	r1, r2
 8002dec:	0018      	movs	r0, r3
 8002dee:	f000 f8b9 	bl	8002f64 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2241      	movs	r2, #65	@ 0x41
 8002df6:	5c9b      	ldrb	r3, [r3, r2]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b28      	cmp	r3, #40	@ 0x28
 8002dfc:	d147      	bne.n	8002e8e <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	0011      	movs	r1, r2
 8002e04:	0018      	movs	r0, r3
 8002e06:	f000 f855 	bl	8002eb4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e0a:	e040      	b.n	8002e8e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	4a27      	ldr	r2, [pc, #156]	@ (8002eb0 <I2C_ITSlaveCplt+0x30c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d016      	beq.n	8002e44 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff fe5f 	bl	8002adc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <I2C_ITSlaveCplt+0x30c>)
 8002e22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2241      	movs	r2, #65	@ 0x41
 8002e28:	2120      	movs	r1, #32
 8002e2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2240      	movs	r2, #64	@ 0x40
 8002e36:	2100      	movs	r1, #0
 8002e38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f7ff fc98 	bl	8002772 <HAL_I2C_ListenCpltCallback>
}
 8002e42:	e024      	b.n	8002e8e <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2241      	movs	r2, #65	@ 0x41
 8002e48:	5c9b      	ldrb	r3, [r3, r2]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b22      	cmp	r3, #34	@ 0x22
 8002e4e:	d10f      	bne.n	8002e70 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2241      	movs	r2, #65	@ 0x41
 8002e54:	2120      	movs	r1, #32
 8002e56:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2240      	movs	r2, #64	@ 0x40
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff fc6a 	bl	8002742 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e6e:	e00e      	b.n	8002e8e <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2241      	movs	r2, #65	@ 0x41
 8002e74:	2120      	movs	r1, #32
 8002e76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2240      	movs	r2, #64	@ 0x40
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff fc52 	bl	8002732 <HAL_I2C_SlaveTxCpltCallback>
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b006      	add	sp, #24
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	00008001 	.word	0x00008001
 8002e9c:	00008002 	.word	0x00008002
 8002ea0:	00008003 	.word	0x00008003
 8002ea4:	fe00e800 	.word	0xfe00e800
 8002ea8:	ffffbfff 	.word	0xffffbfff
 8002eac:	ffff7fff 	.word	0xffff7fff
 8002eb0:	ffff0000 	.word	0xffff0000

08002eb4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a26      	ldr	r2, [pc, #152]	@ (8002f5c <I2C_ITListenCplt+0xa8>)
 8002ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2241      	movs	r2, #65	@ 0x41
 8002ece:	2120      	movs	r1, #32
 8002ed0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2242      	movs	r2, #66	@ 0x42
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d012      	beq.n	8002f2e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	2204      	movs	r2, #4
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f60 <I2C_ITListenCplt+0xac>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0011      	movs	r1, r2
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 f981 	bl	800323c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2210      	movs	r2, #16
 8002f40:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2240      	movs	r2, #64	@ 0x40
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff fc10 	bl	8002772 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			@ (mov r8, r8)
 8002f5c:	ffff0000 	.word	0xffff0000
 8002f60:	00008003 	.word	0x00008003

08002f64 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f6e:	200f      	movs	r0, #15
 8002f70:	183b      	adds	r3, r7, r0
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	2141      	movs	r1, #65	@ 0x41
 8002f76:	5c52      	ldrb	r2, [r2, r1]
 8002f78:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2242      	movs	r2, #66	@ 0x42
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a72      	ldr	r2, [pc, #456]	@ (8003150 <I2C_ITError+0x1ec>)
 8002f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f9a:	183b      	adds	r3, r7, r0
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b28      	cmp	r3, #40	@ 0x28
 8002fa0:	d007      	beq.n	8002fb2 <I2C_ITError+0x4e>
 8002fa2:	183b      	adds	r3, r7, r0
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b29      	cmp	r3, #41	@ 0x29
 8002fa8:	d003      	beq.n	8002fb2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002faa:	183b      	adds	r3, r7, r0
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fb0:	d10c      	bne.n	8002fcc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 f940 	bl	800323c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2241      	movs	r2, #65	@ 0x41
 8002fc0:	2128      	movs	r1, #40	@ 0x28
 8002fc2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a63      	ldr	r2, [pc, #396]	@ (8003154 <I2C_ITError+0x1f0>)
 8002fc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fca:	e032      	b.n	8003032 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fcc:	4a62      	ldr	r2, [pc, #392]	@ (8003158 <I2C_ITError+0x1f4>)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	0011      	movs	r1, r2
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 f932 	bl	800323c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 f8ed 	bl	80031ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2241      	movs	r2, #65	@ 0x41
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b60      	cmp	r3, #96	@ 0x60
 8002fea:	d01f      	beq.n	800302c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2241      	movs	r2, #65	@ 0x41
 8002ff0:	2120      	movs	r1, #32
 8002ff2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b20      	cmp	r3, #32
 8003000:	d114      	bne.n	800302c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2210      	movs	r2, #16
 800300a:	4013      	ands	r3, r2
 800300c:	2b10      	cmp	r3, #16
 800300e:	d109      	bne.n	8003024 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2210      	movs	r2, #16
 8003016:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301c:	2204      	movs	r2, #4
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2220      	movs	r2, #32
 800302a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	2b00      	cmp	r3, #0
 800303e:	d03b      	beq.n	80030b8 <I2C_ITError+0x154>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b11      	cmp	r3, #17
 8003044:	d002      	beq.n	800304c <I2C_ITError+0xe8>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b21      	cmp	r3, #33	@ 0x21
 800304a:	d135      	bne.n	80030b8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	01db      	lsls	r3, r3, #7
 8003056:	401a      	ands	r2, r3
 8003058:	2380      	movs	r3, #128	@ 0x80
 800305a:	01db      	lsls	r3, r3, #7
 800305c:	429a      	cmp	r2, r3
 800305e:	d107      	bne.n	8003070 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	493c      	ldr	r1, [pc, #240]	@ (800315c <I2C_ITError+0x1f8>)
 800306c:	400a      	ands	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff f8b5 	bl	80021e4 <HAL_DMA_GetState>
 800307a:	0003      	movs	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d016      	beq.n	80030ae <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003084:	4a36      	ldr	r2, [pc, #216]	@ (8003160 <I2C_ITError+0x1fc>)
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2240      	movs	r2, #64	@ 0x40
 800308c:	2100      	movs	r1, #0
 800308e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff f83b 	bl	8002110 <HAL_DMA_Abort_IT>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d051      	beq.n	8003142 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a8:	0018      	movs	r0, r3
 80030aa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030ac:	e049      	b.n	8003142 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 f859 	bl	8003168 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030b6:	e044      	b.n	8003142 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d03b      	beq.n	8003138 <I2C_ITError+0x1d4>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b12      	cmp	r3, #18
 80030c4:	d002      	beq.n	80030cc <I2C_ITError+0x168>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b22      	cmp	r3, #34	@ 0x22
 80030ca:	d135      	bne.n	8003138 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	401a      	ands	r2, r3
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	491e      	ldr	r1, [pc, #120]	@ (8003164 <I2C_ITError+0x200>)
 80030ec:	400a      	ands	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f4:	0018      	movs	r0, r3
 80030f6:	f7ff f875 	bl	80021e4 <HAL_DMA_GetState>
 80030fa:	0003      	movs	r3, r0
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d016      	beq.n	800312e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003104:	4a16      	ldr	r2, [pc, #88]	@ (8003160 <I2C_ITError+0x1fc>)
 8003106:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2240      	movs	r2, #64	@ 0x40
 800310c:	2100      	movs	r1, #0
 800310e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	0018      	movs	r0, r3
 8003116:	f7fe fffb 	bl	8002110 <HAL_DMA_Abort_IT>
 800311a:	1e03      	subs	r3, r0, #0
 800311c:	d013      	beq.n	8003146 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003128:	0018      	movs	r0, r3
 800312a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800312c:	e00b      	b.n	8003146 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f819 	bl	8003168 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003136:	e006      	b.n	8003146 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	0018      	movs	r0, r3
 800313c:	f000 f814 	bl	8003168 <I2C_TreatErrorCallback>
  }
}
 8003140:	e002      	b.n	8003148 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	e000      	b.n	8003148 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003146:	46c0      	nop			@ (mov r8, r8)
}
 8003148:	46c0      	nop			@ (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}
 8003150:	ffff0000 	.word	0xffff0000
 8003154:	08002795 	.word	0x08002795
 8003158:	00008003 	.word	0x00008003
 800315c:	ffffbfff 	.word	0xffffbfff
 8003160:	080031ff 	.word	0x080031ff
 8003164:	ffff7fff 	.word	0xffff7fff

08003168 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2241      	movs	r2, #65	@ 0x41
 8003174:	5c9b      	ldrb	r3, [r3, r2]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b60      	cmp	r3, #96	@ 0x60
 800317a:	d10f      	bne.n	800319c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2241      	movs	r2, #65	@ 0x41
 8003180:	2120      	movs	r1, #32
 8003182:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2240      	movs	r2, #64	@ 0x40
 800318e:	2100      	movs	r1, #0
 8003190:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0018      	movs	r0, r3
 8003196:	f7ff faf4 	bl	8002782 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800319a:	e00a      	b.n	80031b2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2240      	movs	r2, #64	@ 0x40
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7fd fe03 	bl	8000db8 <HAL_I2C_ErrorCallback>
}
 80031b2:	46c0      	nop			@ (mov r8, r8)
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b002      	add	sp, #8
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b082      	sub	sp, #8
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2202      	movs	r2, #2
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d103      	bne.n	80031d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2200      	movs	r2, #0
 80031d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2201      	movs	r2, #1
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d007      	beq.n	80031f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	430a      	orrs	r2, r1
 80031f4:	619a      	str	r2, [r3, #24]
  }
}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b002      	add	sp, #8
 80031fc:	bd80      	pop	{r7, pc}

080031fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003218:	2200      	movs	r2, #0
 800321a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003228:	2200      	movs	r2, #0
 800322a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	0018      	movs	r0, r3
 8003230:	f7ff ff9a 	bl	8003168 <I2C_TreatErrorCallback>
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	000a      	movs	r2, r1
 8003246:	1cbb      	adds	r3, r7, #2
 8003248:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800324e:	1cbb      	adds	r3, r7, #2
 8003250:	881b      	ldrh	r3, [r3, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	4013      	ands	r3, r2
 8003256:	d010      	beq.n	800327a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2242      	movs	r2, #66	@ 0x42
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2241      	movs	r2, #65	@ 0x41
 8003264:	5c9b      	ldrb	r3, [r3, r2]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	001a      	movs	r2, r3
 800326a:	2328      	movs	r3, #40	@ 0x28
 800326c:	4013      	ands	r3, r2
 800326e:	2b28      	cmp	r3, #40	@ 0x28
 8003270:	d003      	beq.n	800327a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	22b0      	movs	r2, #176	@ 0xb0
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800327a:	1cbb      	adds	r3, r7, #2
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	2202      	movs	r2, #2
 8003280:	4013      	ands	r3, r2
 8003282:	d010      	beq.n	80032a6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2244      	movs	r2, #68	@ 0x44
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2241      	movs	r2, #65	@ 0x41
 8003290:	5c9b      	ldrb	r3, [r3, r2]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	001a      	movs	r2, r3
 8003296:	2328      	movs	r3, #40	@ 0x28
 8003298:	4013      	ands	r3, r2
 800329a:	2b28      	cmp	r3, #40	@ 0x28
 800329c:	d003      	beq.n	80032a6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	22b0      	movs	r2, #176	@ 0xb0
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032a6:	1cbb      	adds	r3, r7, #2
 80032a8:	2200      	movs	r2, #0
 80032aa:	5e9b      	ldrsh	r3, [r3, r2]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	da03      	bge.n	80032b8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	22b8      	movs	r2, #184	@ 0xb8
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80032b8:	1cbb      	adds	r3, r7, #2
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	2b10      	cmp	r3, #16
 80032be:	d103      	bne.n	80032c8 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2290      	movs	r2, #144	@ 0x90
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032c8:	1cbb      	adds	r3, r7, #2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d103      	bne.n	80032d8 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032d8:	1cbb      	adds	r3, r7, #2
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	2b40      	cmp	r3, #64	@ 0x40
 80032de:	d103      	bne.n	80032e8 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2240      	movs	r2, #64	@ 0x40
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43d9      	mvns	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	400a      	ands	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b004      	add	sp, #16
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2241      	movs	r2, #65	@ 0x41
 8003312:	5c9b      	ldrb	r3, [r3, r2]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	d138      	bne.n	800338c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2240      	movs	r2, #64	@ 0x40
 800331e:	5c9b      	ldrb	r3, [r3, r2]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003324:	2302      	movs	r3, #2
 8003326:	e032      	b.n	800338e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2240      	movs	r2, #64	@ 0x40
 800332c:	2101      	movs	r1, #1
 800332e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2241      	movs	r2, #65	@ 0x41
 8003334:	2124      	movs	r1, #36	@ 0x24
 8003336:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2101      	movs	r1, #1
 8003344:	438a      	bics	r2, r1
 8003346:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4911      	ldr	r1, [pc, #68]	@ (8003398 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003354:	400a      	ands	r2, r1
 8003356:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2101      	movs	r1, #1
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2241      	movs	r2, #65	@ 0x41
 800337c:	2120      	movs	r1, #32
 800337e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2240      	movs	r2, #64	@ 0x40
 8003384:	2100      	movs	r1, #0
 8003386:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b002      	add	sp, #8
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	ffffefff 	.word	0xffffefff

0800339c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2241      	movs	r2, #65	@ 0x41
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b20      	cmp	r3, #32
 80033b0:	d139      	bne.n	8003426 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2240      	movs	r2, #64	@ 0x40
 80033b6:	5c9b      	ldrb	r3, [r3, r2]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033bc:	2302      	movs	r3, #2
 80033be:	e033      	b.n	8003428 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2240      	movs	r2, #64	@ 0x40
 80033c4:	2101      	movs	r1, #1
 80033c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2241      	movs	r2, #65	@ 0x41
 80033cc:	2124      	movs	r1, #36	@ 0x24
 80033ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2101      	movs	r1, #1
 80033dc:	438a      	bics	r2, r1
 80033de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a11      	ldr	r2, [pc, #68]	@ (8003430 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	430a      	orrs	r2, r1
 8003410:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2241      	movs	r2, #65	@ 0x41
 8003416:	2120      	movs	r1, #32
 8003418:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2240      	movs	r2, #64	@ 0x40
 800341e:	2100      	movs	r1, #0
 8003420:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
  }
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b004      	add	sp, #16
 800342e:	bd80      	pop	{r7, pc}
 8003430:	fffff0ff 	.word	0xfffff0ff

08003434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800343c:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a19      	ldr	r2, [pc, #100]	@ (80034a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	4b17      	ldr	r3, [pc, #92]	@ (80034a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	429a      	cmp	r2, r3
 8003456:	d11f      	bne.n	8003498 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003458:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	0013      	movs	r3, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	189b      	adds	r3, r3, r2
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4912      	ldr	r1, [pc, #72]	@ (80034b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003466:	0018      	movs	r0, r3
 8003468:	f7fc fe58 	bl	800011c <__udivsi3>
 800346c:	0003      	movs	r3, r0
 800346e:	3301      	adds	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003472:	e008      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	3b01      	subs	r3, #1
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e001      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e009      	b.n	800349a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003486:	4b07      	ldr	r3, [pc, #28]	@ (80034a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	2380      	movs	r3, #128	@ 0x80
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	401a      	ands	r2, r3
 8003490:	2380      	movs	r3, #128	@ 0x80
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	429a      	cmp	r2, r3
 8003496:	d0ed      	beq.n	8003474 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b004      	add	sp, #16
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	40007000 	.word	0x40007000
 80034a8:	fffff9ff 	.word	0xfffff9ff
 80034ac:	200000c0 	.word	0x200000c0
 80034b0:	000f4240 	.word	0x000f4240

080034b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80034b8:	4b03      	ldr	r3, [pc, #12]	@ (80034c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	23e0      	movs	r3, #224	@ 0xe0
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	4013      	ands	r3, r2
}
 80034c2:	0018      	movs	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40021000 	.word	0x40021000

080034cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e2f3      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	d100      	bne.n	80034ea <HAL_RCC_OscConfig+0x1e>
 80034e8:	e07c      	b.n	80035e4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ea:	4bc3      	ldr	r3, [pc, #780]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2238      	movs	r2, #56	@ 0x38
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f4:	4bc0      	ldr	r3, [pc, #768]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2203      	movs	r2, #3
 80034fa:	4013      	ands	r3, r2
 80034fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b10      	cmp	r3, #16
 8003502:	d102      	bne.n	800350a <HAL_RCC_OscConfig+0x3e>
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d002      	beq.n	8003510 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b08      	cmp	r3, #8
 800350e:	d10b      	bne.n	8003528 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	4bb9      	ldr	r3, [pc, #740]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	4013      	ands	r3, r2
 800351a:	d062      	beq.n	80035e2 <HAL_RCC_OscConfig+0x116>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d15e      	bne.n	80035e2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e2ce      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	2380      	movs	r3, #128	@ 0x80
 800352e:	025b      	lsls	r3, r3, #9
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x78>
 8003534:	4bb0      	ldr	r3, [pc, #704]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4baf      	ldr	r3, [pc, #700]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	0249      	lsls	r1, r1, #9
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e020      	b.n	8003586 <HAL_RCC_OscConfig+0xba>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	23a0      	movs	r3, #160	@ 0xa0
 800354a:	02db      	lsls	r3, r3, #11
 800354c:	429a      	cmp	r2, r3
 800354e:	d10e      	bne.n	800356e <HAL_RCC_OscConfig+0xa2>
 8003550:	4ba9      	ldr	r3, [pc, #676]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4ba8      	ldr	r3, [pc, #672]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003556:	2180      	movs	r1, #128	@ 0x80
 8003558:	02c9      	lsls	r1, r1, #11
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	4ba6      	ldr	r3, [pc, #664]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4ba5      	ldr	r3, [pc, #660]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003564:	2180      	movs	r1, #128	@ 0x80
 8003566:	0249      	lsls	r1, r1, #9
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e00b      	b.n	8003586 <HAL_RCC_OscConfig+0xba>
 800356e:	4ba2      	ldr	r3, [pc, #648]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4ba1      	ldr	r3, [pc, #644]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003574:	49a1      	ldr	r1, [pc, #644]	@ (80037fc <HAL_RCC_OscConfig+0x330>)
 8003576:	400a      	ands	r2, r1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	4b9f      	ldr	r3, [pc, #636]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b9e      	ldr	r3, [pc, #632]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003580:	499f      	ldr	r1, [pc, #636]	@ (8003800 <HAL_RCC_OscConfig+0x334>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d014      	beq.n	80035b8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fe f889 	bl	80016a4 <HAL_GetTick>
 8003592:	0003      	movs	r3, r0
 8003594:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fe f884 	bl	80016a4 <HAL_GetTick>
 800359c:	0002      	movs	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	@ 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e28d      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035aa:	4b93      	ldr	r3, [pc, #588]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	2380      	movs	r3, #128	@ 0x80
 80035b0:	029b      	lsls	r3, r3, #10
 80035b2:	4013      	ands	r3, r2
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xcc>
 80035b6:	e015      	b.n	80035e4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7fe f874 	bl	80016a4 <HAL_GetTick>
 80035bc:	0003      	movs	r3, r0
 80035be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c2:	f7fe f86f 	bl	80016a4 <HAL_GetTick>
 80035c6:	0002      	movs	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	@ 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e278      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035d4:	4b88      	ldr	r3, [pc, #544]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2380      	movs	r3, #128	@ 0x80
 80035da:	029b      	lsls	r3, r3, #10
 80035dc:	4013      	ands	r3, r2
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0xf6>
 80035e0:	e000      	b.n	80035e4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2202      	movs	r2, #2
 80035ea:	4013      	ands	r3, r2
 80035ec:	d100      	bne.n	80035f0 <HAL_RCC_OscConfig+0x124>
 80035ee:	e099      	b.n	8003724 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f0:	4b81      	ldr	r3, [pc, #516]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2238      	movs	r2, #56	@ 0x38
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035fa:	4b7f      	ldr	r3, [pc, #508]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2203      	movs	r2, #3
 8003600:	4013      	ands	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	2b10      	cmp	r3, #16
 8003608:	d102      	bne.n	8003610 <HAL_RCC_OscConfig+0x144>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b02      	cmp	r3, #2
 800360e:	d002      	beq.n	8003616 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d135      	bne.n	8003682 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003616:	4b78      	ldr	r3, [pc, #480]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	2380      	movs	r3, #128	@ 0x80
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4013      	ands	r3, r2
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x162>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e24b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b72      	ldr	r3, [pc, #456]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4a74      	ldr	r2, [pc, #464]	@ (8003804 <HAL_RCC_OscConfig+0x338>)
 8003634:	4013      	ands	r3, r2
 8003636:	0019      	movs	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	021a      	lsls	r2, r3, #8
 800363e:	4b6e      	ldr	r3, [pc, #440]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d112      	bne.n	8003670 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800364a:	4b6b      	ldr	r3, [pc, #428]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6e      	ldr	r2, [pc, #440]	@ (8003808 <HAL_RCC_OscConfig+0x33c>)
 8003650:	4013      	ands	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	4b67      	ldr	r3, [pc, #412]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800365e:	4b66      	ldr	r3, [pc, #408]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0adb      	lsrs	r3, r3, #11
 8003664:	2207      	movs	r2, #7
 8003666:	4013      	ands	r3, r2
 8003668:	4a68      	ldr	r2, [pc, #416]	@ (800380c <HAL_RCC_OscConfig+0x340>)
 800366a:	40da      	lsrs	r2, r3
 800366c:	4b68      	ldr	r3, [pc, #416]	@ (8003810 <HAL_RCC_OscConfig+0x344>)
 800366e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003670:	4b68      	ldr	r3, [pc, #416]	@ (8003814 <HAL_RCC_OscConfig+0x348>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0018      	movs	r0, r3
 8003676:	f7fd fcbd 	bl	8000ff4 <HAL_InitTick>
 800367a:	1e03      	subs	r3, r0, #0
 800367c:	d051      	beq.n	8003722 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e221      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d030      	beq.n	80036ec <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800368a:	4b5b      	ldr	r3, [pc, #364]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5e      	ldr	r2, [pc, #376]	@ (8003808 <HAL_RCC_OscConfig+0x33c>)
 8003690:	4013      	ands	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	4b57      	ldr	r3, [pc, #348]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800369a:	430a      	orrs	r2, r1
 800369c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800369e:	4b56      	ldr	r3, [pc, #344]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b55      	ldr	r3, [pc, #340]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80036a4:	2180      	movs	r1, #128	@ 0x80
 80036a6:	0049      	lsls	r1, r1, #1
 80036a8:	430a      	orrs	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fd fffa 	bl	80016a4 <HAL_GetTick>
 80036b0:	0003      	movs	r3, r0
 80036b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fd fff5 	bl	80016a4 <HAL_GetTick>
 80036ba:	0002      	movs	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1fe      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c8:	4b4b      	ldr	r3, [pc, #300]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4013      	ands	r3, r2
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b48      	ldr	r3, [pc, #288]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	4a4a      	ldr	r2, [pc, #296]	@ (8003804 <HAL_RCC_OscConfig+0x338>)
 80036da:	4013      	ands	r3, r2
 80036dc:	0019      	movs	r1, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	021a      	lsls	r2, r3, #8
 80036e4:	4b44      	ldr	r3, [pc, #272]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	e01b      	b.n	8003724 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80036ec:	4b42      	ldr	r3, [pc, #264]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b41      	ldr	r3, [pc, #260]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80036f2:	4949      	ldr	r1, [pc, #292]	@ (8003818 <HAL_RCC_OscConfig+0x34c>)
 80036f4:	400a      	ands	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fd ffd4 	bl	80016a4 <HAL_GetTick>
 80036fc:	0003      	movs	r3, r0
 80036fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd ffcf 	bl	80016a4 <HAL_GetTick>
 8003706:	0002      	movs	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1d8      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003714:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2380      	movs	r3, #128	@ 0x80
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4013      	ands	r3, r2
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x236>
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003722:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2208      	movs	r2, #8
 800372a:	4013      	ands	r3, r2
 800372c:	d047      	beq.n	80037be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800372e:	4b32      	ldr	r3, [pc, #200]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2238      	movs	r2, #56	@ 0x38
 8003734:	4013      	ands	r3, r2
 8003736:	2b18      	cmp	r3, #24
 8003738:	d10a      	bne.n	8003750 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800373a:	4b2f      	ldr	r3, [pc, #188]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	2202      	movs	r2, #2
 8003740:	4013      	ands	r3, r2
 8003742:	d03c      	beq.n	80037be <HAL_RCC_OscConfig+0x2f2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d138      	bne.n	80037be <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e1ba      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d019      	beq.n	800378c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003758:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800375a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800375c:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800375e:	2101      	movs	r1, #1
 8003760:	430a      	orrs	r2, r1
 8003762:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd ff9e 	bl	80016a4 <HAL_GetTick>
 8003768:	0003      	movs	r3, r0
 800376a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376e:	f7fd ff99 	bl	80016a4 <HAL_GetTick>
 8003772:	0002      	movs	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e1a2      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003780:	4b1d      	ldr	r3, [pc, #116]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003784:	2202      	movs	r2, #2
 8003786:	4013      	ands	r3, r2
 8003788:	d0f1      	beq.n	800376e <HAL_RCC_OscConfig+0x2a2>
 800378a:	e018      	b.n	80037be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800378c:	4b1a      	ldr	r3, [pc, #104]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 800378e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 8003792:	2101      	movs	r1, #1
 8003794:	438a      	bics	r2, r1
 8003796:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fd ff84 	bl	80016a4 <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a2:	f7fd ff7f 	bl	80016a4 <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e188      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037b4:	4b10      	ldr	r3, [pc, #64]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80037b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	d1f1      	bne.n	80037a2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2204      	movs	r2, #4
 80037c4:	4013      	ands	r3, r2
 80037c6:	d100      	bne.n	80037ca <HAL_RCC_OscConfig+0x2fe>
 80037c8:	e0c6      	b.n	8003958 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ca:	231f      	movs	r3, #31
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2238      	movs	r2, #56	@ 0x38
 80037d8:	4013      	ands	r3, r2
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d11e      	bne.n	800381c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_RCC_OscConfig+0x32c>)
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	2202      	movs	r2, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d100      	bne.n	80037ea <HAL_RCC_OscConfig+0x31e>
 80037e8:	e0b6      	b.n	8003958 <HAL_RCC_OscConfig+0x48c>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d000      	beq.n	80037f4 <HAL_RCC_OscConfig+0x328>
 80037f2:	e0b1      	b.n	8003958 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e166      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
 80037f8:	40021000 	.word	0x40021000
 80037fc:	fffeffff 	.word	0xfffeffff
 8003800:	fffbffff 	.word	0xfffbffff
 8003804:	ffff80ff 	.word	0xffff80ff
 8003808:	ffffc7ff 	.word	0xffffc7ff
 800380c:	00f42400 	.word	0x00f42400
 8003810:	200000c0 	.word	0x200000c0
 8003814:	200000c4 	.word	0x200000c4
 8003818:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800381c:	4bac      	ldr	r3, [pc, #688]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 800381e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	055b      	lsls	r3, r3, #21
 8003824:	4013      	ands	r3, r2
 8003826:	d101      	bne.n	800382c <HAL_RCC_OscConfig+0x360>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <HAL_RCC_OscConfig+0x362>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d011      	beq.n	8003856 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	4ba7      	ldr	r3, [pc, #668]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003834:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003836:	4ba6      	ldr	r3, [pc, #664]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003838:	2180      	movs	r1, #128	@ 0x80
 800383a:	0549      	lsls	r1, r1, #21
 800383c:	430a      	orrs	r2, r1
 800383e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003840:	4ba3      	ldr	r3, [pc, #652]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003842:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003844:	2380      	movs	r3, #128	@ 0x80
 8003846:	055b      	lsls	r3, r3, #21
 8003848:	4013      	ands	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800384e:	231f      	movs	r3, #31
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003856:	4b9f      	ldr	r3, [pc, #636]	@ (8003ad4 <HAL_RCC_OscConfig+0x608>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4013      	ands	r3, r2
 8003860:	d11a      	bne.n	8003898 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003862:	4b9c      	ldr	r3, [pc, #624]	@ (8003ad4 <HAL_RCC_OscConfig+0x608>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4b9b      	ldr	r3, [pc, #620]	@ (8003ad4 <HAL_RCC_OscConfig+0x608>)
 8003868:	2180      	movs	r1, #128	@ 0x80
 800386a:	0049      	lsls	r1, r1, #1
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003870:	f7fd ff18 	bl	80016a4 <HAL_GetTick>
 8003874:	0003      	movs	r3, r0
 8003876:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387a:	f7fd ff13 	bl	80016a4 <HAL_GetTick>
 800387e:	0002      	movs	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e11c      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388c:	4b91      	ldr	r3, [pc, #580]	@ (8003ad4 <HAL_RCC_OscConfig+0x608>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	4013      	ands	r3, r2
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x3e2>
 80038a0:	4b8b      	ldr	r3, [pc, #556]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038a4:	4b8a      	ldr	r3, [pc, #552]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	430a      	orrs	r2, r1
 80038aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038ac:	e01c      	b.n	80038e8 <HAL_RCC_OscConfig+0x41c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x404>
 80038b6:	4b86      	ldr	r3, [pc, #536]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038ba:	4b85      	ldr	r3, [pc, #532]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038bc:	2104      	movs	r1, #4
 80038be:	430a      	orrs	r2, r1
 80038c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038c2:	4b83      	ldr	r3, [pc, #524]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038c6:	4b82      	ldr	r3, [pc, #520]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038c8:	2101      	movs	r1, #1
 80038ca:	430a      	orrs	r2, r1
 80038cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0x41c>
 80038d0:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038d4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038d6:	2101      	movs	r1, #1
 80038d8:	438a      	bics	r2, r1
 80038da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038dc:	4b7c      	ldr	r3, [pc, #496]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80038e0:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80038e2:	2104      	movs	r1, #4
 80038e4:	438a      	bics	r2, r1
 80038e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d014      	beq.n	800391a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fd fed8 	bl	80016a4 <HAL_GetTick>
 80038f4:	0003      	movs	r3, r0
 80038f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038f8:	e009      	b.n	800390e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd fed3 	bl	80016a4 <HAL_GetTick>
 80038fe:	0002      	movs	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	4a74      	ldr	r2, [pc, #464]	@ (8003ad8 <HAL_RCC_OscConfig+0x60c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0db      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390e:	4b70      	ldr	r3, [pc, #448]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003912:	2202      	movs	r2, #2
 8003914:	4013      	ands	r3, r2
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x42e>
 8003918:	e013      	b.n	8003942 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fd fec3 	bl	80016a4 <HAL_GetTick>
 800391e:	0003      	movs	r3, r0
 8003920:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003922:	e009      	b.n	8003938 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fd febe 	bl	80016a4 <HAL_GetTick>
 8003928:	0002      	movs	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ad8 <HAL_RCC_OscConfig+0x60c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0c6      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003938:	4b65      	ldr	r3, [pc, #404]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 800393a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393c:	2202      	movs	r2, #2
 800393e:	4013      	ands	r3, r2
 8003940:	d1f0      	bne.n	8003924 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003942:	231f      	movs	r3, #31
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800394c:	4b60      	ldr	r3, [pc, #384]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 800394e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003950:	4b5f      	ldr	r3, [pc, #380]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003952:	4962      	ldr	r1, [pc, #392]	@ (8003adc <HAL_RCC_OscConfig+0x610>)
 8003954:	400a      	ands	r2, r1
 8003956:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d100      	bne.n	8003962 <HAL_RCC_OscConfig+0x496>
 8003960:	e0b0      	b.n	8003ac4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003962:	4b5b      	ldr	r3, [pc, #364]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2238      	movs	r2, #56	@ 0x38
 8003968:	4013      	ands	r3, r2
 800396a:	2b10      	cmp	r3, #16
 800396c:	d100      	bne.n	8003970 <HAL_RCC_OscConfig+0x4a4>
 800396e:	e078      	b.n	8003a62 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b02      	cmp	r3, #2
 8003976:	d153      	bne.n	8003a20 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003978:	4b55      	ldr	r3, [pc, #340]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b54      	ldr	r3, [pc, #336]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 800397e:	4958      	ldr	r1, [pc, #352]	@ (8003ae0 <HAL_RCC_OscConfig+0x614>)
 8003980:	400a      	ands	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003984:	f7fd fe8e 	bl	80016a4 <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fd fe89 	bl	80016a4 <HAL_GetTick>
 8003992:	0002      	movs	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e092      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	049b      	lsls	r3, r3, #18
 80039a8:	4013      	ands	r3, r2
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ac:	4b48      	ldr	r3, [pc, #288]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a4c      	ldr	r2, [pc, #304]	@ (8003ae4 <HAL_RCC_OscConfig+0x618>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1a      	ldr	r2, [r3, #32]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	431a      	orrs	r2, r3
 80039d4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80039d6:	430a      	orrs	r2, r1
 80039d8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039da:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b3c      	ldr	r3, [pc, #240]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80039e0:	2180      	movs	r1, #128	@ 0x80
 80039e2:	0449      	lsls	r1, r1, #17
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80039e8:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	4b38      	ldr	r3, [pc, #224]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 80039ee:	2180      	movs	r1, #128	@ 0x80
 80039f0:	0549      	lsls	r1, r1, #21
 80039f2:	430a      	orrs	r2, r1
 80039f4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fd fe55 	bl	80016a4 <HAL_GetTick>
 80039fa:	0003      	movs	r3, r0
 80039fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fd fe50 	bl	80016a4 <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e059      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a12:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	049b      	lsls	r3, r3, #18
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x534>
 8003a1e:	e051      	b.n	8003ac4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003a26:	492e      	ldr	r1, [pc, #184]	@ (8003ae0 <HAL_RCC_OscConfig+0x614>)
 8003a28:	400a      	ands	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fe3a 	bl	80016a4 <HAL_GetTick>
 8003a30:	0003      	movs	r3, r0
 8003a32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fd fe35 	bl	80016a4 <HAL_GetTick>
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e03e      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	049b      	lsls	r3, r3, #18
 8003a50:	4013      	ands	r3, r2
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003a54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003a5a:	4923      	ldr	r1, [pc, #140]	@ (8003ae8 <HAL_RCC_OscConfig+0x61c>)
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	60da      	str	r2, [r3, #12]
 8003a60:	e030      	b.n	8003ac4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e02b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a6e:	4b18      	ldr	r3, [pc, #96]	@ (8003ad0 <HAL_RCC_OscConfig+0x604>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2203      	movs	r2, #3
 8003a78:	401a      	ands	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d11e      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2270      	movs	r2, #112	@ 0x70
 8003a86:	401a      	ands	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d117      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	23fe      	movs	r3, #254	@ 0xfe
 8003a94:	01db      	lsls	r3, r3, #7
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d10e      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	23f8      	movs	r3, #248	@ 0xf8
 8003aa6:	039b      	lsls	r3, r3, #14
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d106      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	0f5b      	lsrs	r3, r3, #29
 8003ab6:	075a      	lsls	r2, r3, #29
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b008      	add	sp, #32
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			@ (mov r8, r8)
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	00001388 	.word	0x00001388
 8003adc:	efffffff 	.word	0xefffffff
 8003ae0:	feffffff 	.word	0xfeffffff
 8003ae4:	1fc1808c 	.word	0x1fc1808c
 8003ae8:	effefffc 	.word	0xeffefffc

08003aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0e9      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b76      	ldr	r3, [pc, #472]	@ (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2207      	movs	r2, #7
 8003b06:	4013      	ands	r3, r2
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d91e      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b73      	ldr	r3, [pc, #460]	@ (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2207      	movs	r2, #7
 8003b14:	4393      	bics	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	4b70      	ldr	r3, [pc, #448]	@ (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b20:	f7fd fdc0 	bl	80016a4 <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b28:	e009      	b.n	8003b3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2a:	f7fd fdbb 	bl	80016a4 <HAL_GetTick>
 8003b2e:	0002      	movs	r2, r0
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0ca      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b3e:	4b67      	ldr	r3, [pc, #412]	@ (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2207      	movs	r2, #7
 8003b44:	4013      	ands	r3, r2
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1ee      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2202      	movs	r2, #2
 8003b52:	4013      	ands	r3, r2
 8003b54:	d015      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d006      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b60:	4b60      	ldr	r3, [pc, #384]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	4b5f      	ldr	r3, [pc, #380]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b66:	21e0      	movs	r1, #224	@ 0xe0
 8003b68:	01c9      	lsls	r1, r1, #7
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	4a5d      	ldr	r2, [pc, #372]	@ (8003ce8 <HAL_RCC_ClockConfig+0x1fc>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	0019      	movs	r1, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	4b59      	ldr	r3, [pc, #356]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	d057      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b94:	4b53      	ldr	r3, [pc, #332]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	2380      	movs	r3, #128	@ 0x80
 8003b9a:	029b      	lsls	r3, r3, #10
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d12b      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e097      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bac:	4b4d      	ldr	r3, [pc, #308]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	@ 0x80
 8003bb2:	049b      	lsls	r3, r3, #18
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d11f      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e08b      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bc4:	4b47      	ldr	r3, [pc, #284]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	@ 0x80
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d113      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e07f      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bdc:	4b41      	ldr	r3, [pc, #260]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d108      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e074      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bea:	4b3e      	ldr	r3, [pc, #248]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bee:	2202      	movs	r2, #2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e06d      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	4393      	bics	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	4b37      	ldr	r3, [pc, #220]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0c:	f7fd fd4a 	bl	80016a4 <HAL_GetTick>
 8003c10:	0003      	movs	r3, r0
 8003c12:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c14:	e009      	b.n	8003c2a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c16:	f7fd fd45 	bl	80016a4 <HAL_GetTick>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e054      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2238      	movs	r2, #56	@ 0x38
 8003c30:	401a      	ands	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1ec      	bne.n	8003c16 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b27      	ldr	r3, [pc, #156]	@ (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2207      	movs	r2, #7
 8003c42:	4013      	ands	r3, r2
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d21e      	bcs.n	8003c88 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2207      	movs	r2, #7
 8003c50:	4393      	bics	r3, r2
 8003c52:	0019      	movs	r1, r3
 8003c54:	4b21      	ldr	r3, [pc, #132]	@ (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c5c:	f7fd fd22 	bl	80016a4 <HAL_GetTick>
 8003c60:	0003      	movs	r3, r0
 8003c62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c64:	e009      	b.n	8003c7a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c66:	f7fd fd1d 	bl	80016a4 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e02c      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c7a:	4b18      	ldr	r3, [pc, #96]	@ (8003cdc <HAL_RCC_ClockConfig+0x1f0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2207      	movs	r2, #7
 8003c80:	4013      	ands	r3, r2
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d1ee      	bne.n	8003c66 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d009      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c92:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	4a15      	ldr	r2, [pc, #84]	@ (8003cec <HAL_RCC_ClockConfig+0x200>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ca6:	f000 f829 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003caa:	0001      	movs	r1, r0
 8003cac:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	220f      	movs	r2, #15
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <HAL_RCC_ClockConfig+0x204>)
 8003cb8:	0092      	lsls	r2, r2, #2
 8003cba:	58d3      	ldr	r3, [r2, r3]
 8003cbc:	221f      	movs	r2, #31
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	000a      	movs	r2, r1
 8003cc2:	40da      	lsrs	r2, r3
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf4 <HAL_RCC_ClockConfig+0x208>)
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <HAL_RCC_ClockConfig+0x20c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7fd f991 	bl	8000ff4 <HAL_InitTick>
 8003cd2:	0003      	movs	r3, r0
}
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b004      	add	sp, #16
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40022000 	.word	0x40022000
 8003ce0:	00001388 	.word	0x00001388
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	fffff0ff 	.word	0xfffff0ff
 8003cec:	ffff8fff 	.word	0xffff8fff
 8003cf0:	0800b7b0 	.word	0x0800b7b0
 8003cf4:	200000c0 	.word	0x200000c0
 8003cf8:	200000c4 	.word	0x200000c4

08003cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d02:	4b3c      	ldr	r3, [pc, #240]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2238      	movs	r2, #56	@ 0x38
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d10f      	bne.n	8003d2c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003d0c:	4b39      	ldr	r3, [pc, #228]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	0adb      	lsrs	r3, r3, #11
 8003d12:	2207      	movs	r2, #7
 8003d14:	4013      	ands	r3, r2
 8003d16:	2201      	movs	r2, #1
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	4835      	ldr	r0, [pc, #212]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d22:	f7fc f9fb 	bl	800011c <__udivsi3>
 8003d26:	0003      	movs	r3, r0
 8003d28:	613b      	str	r3, [r7, #16]
 8003d2a:	e05d      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d2c:	4b31      	ldr	r3, [pc, #196]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2238      	movs	r2, #56	@ 0x38
 8003d32:	4013      	ands	r3, r2
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d102      	bne.n	8003d3e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d38:	4b30      	ldr	r3, [pc, #192]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x100>)
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e054      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2238      	movs	r2, #56	@ 0x38
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d138      	bne.n	8003dbc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2203      	movs	r2, #3
 8003d50:	4013      	ands	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d54:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	2207      	movs	r2, #7
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	3301      	adds	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d10d      	bne.n	8003d84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	4824      	ldr	r0, [pc, #144]	@ (8003dfc <HAL_RCC_GetSysClockFreq+0x100>)
 8003d6c:	f7fc f9d6 	bl	800011c <__udivsi3>
 8003d70:	0003      	movs	r3, r0
 8003d72:	0019      	movs	r1, r3
 8003d74:	4b1f      	ldr	r3, [pc, #124]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	227f      	movs	r2, #127	@ 0x7f
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	434b      	muls	r3, r1
 8003d80:	617b      	str	r3, [r7, #20]
        break;
 8003d82:	e00d      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	481c      	ldr	r0, [pc, #112]	@ (8003df8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d88:	f7fc f9c8 	bl	800011c <__udivsi3>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	0019      	movs	r1, r3
 8003d90:	4b18      	ldr	r3, [pc, #96]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	0a1b      	lsrs	r3, r3, #8
 8003d96:	227f      	movs	r2, #127	@ 0x7f
 8003d98:	4013      	ands	r3, r2
 8003d9a:	434b      	muls	r3, r1
 8003d9c:	617b      	str	r3, [r7, #20]
        break;
 8003d9e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003da0:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	0f5b      	lsrs	r3, r3, #29
 8003da6:	2207      	movs	r2, #7
 8003da8:	4013      	ands	r3, r2
 8003daa:	3301      	adds	r3, #1
 8003dac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	6978      	ldr	r0, [r7, #20]
 8003db2:	f7fc f9b3 	bl	800011c <__udivsi3>
 8003db6:	0003      	movs	r3, r0
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	e015      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2238      	movs	r2, #56	@ 0x38
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d103      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003dc8:	2380      	movs	r3, #128	@ 0x80
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	e00b      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003dd0:	4b08      	ldr	r3, [pc, #32]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2238      	movs	r2, #56	@ 0x38
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b18      	cmp	r3, #24
 8003dda:	d103      	bne.n	8003de4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ddc:	23fa      	movs	r3, #250	@ 0xfa
 8003dde:	01db      	lsls	r3, r3, #7
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	e001      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003de8:	693b      	ldr	r3, [r7, #16]
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b006      	add	sp, #24
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	40021000 	.word	0x40021000
 8003df8:	00f42400 	.word	0x00f42400
 8003dfc:	007a1200 	.word	0x007a1200

08003e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e04:	4b02      	ldr	r3, [pc, #8]	@ (8003e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	200000c0 	.word	0x200000c0

08003e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e14:	b5b0      	push	{r4, r5, r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003e18:	f7ff fff2 	bl	8003e00 <HAL_RCC_GetHCLKFreq>
 8003e1c:	0004      	movs	r4, r0
 8003e1e:	f7ff fb49 	bl	80034b4 <LL_RCC_GetAPB1Prescaler>
 8003e22:	0003      	movs	r3, r0
 8003e24:	0b1a      	lsrs	r2, r3, #12
 8003e26:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e28:	0092      	lsls	r2, r2, #2
 8003e2a:	58d3      	ldr	r3, [r2, r3]
 8003e2c:	221f      	movs	r2, #31
 8003e2e:	4013      	ands	r3, r2
 8003e30:	40dc      	lsrs	r4, r3
 8003e32:	0023      	movs	r3, r4
}
 8003e34:	0018      	movs	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bdb0      	pop	{r4, r5, r7, pc}
 8003e3a:	46c0      	nop			@ (mov r8, r8)
 8003e3c:	0800b7f0 	.word	0x0800b7f0

08003e40 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e50:	4b0e      	ldr	r3, [pc, #56]	@ (8003e8c <HAL_RCC_GetClockConfig+0x4c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2207      	movs	r2, #7
 8003e56:	401a      	ands	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_GetClockConfig+0x4c>)
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	23f0      	movs	r3, #240	@ 0xf0
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	401a      	ands	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003e6a:	4b08      	ldr	r3, [pc, #32]	@ (8003e8c <HAL_RCC_GetClockConfig+0x4c>)
 8003e6c:	689a      	ldr	r2, [r3, #8]
 8003e6e:	23e0      	movs	r3, #224	@ 0xe0
 8003e70:	01db      	lsls	r3, r3, #7
 8003e72:	401a      	ands	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_RCC_GetClockConfig+0x50>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	401a      	ands	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b002      	add	sp, #8
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40022000 	.word	0x40022000

08003e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e9c:	2313      	movs	r3, #19
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ea4:	2312      	movs	r3, #18
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	2380      	movs	r3, #128	@ 0x80
 8003eb2:	029b      	lsls	r3, r3, #10
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d100      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003eb8:	e0a3      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2011      	movs	r0, #17
 8003ebc:	183b      	adds	r3, r7, r0
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4b86      	ldr	r3, [pc, #536]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ec4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	055b      	lsls	r3, r3, #21
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d110      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4b83      	ldr	r3, [pc, #524]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ed0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ed2:	4b82      	ldr	r3, [pc, #520]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ed4:	2180      	movs	r1, #128	@ 0x80
 8003ed6:	0549      	lsls	r1, r1, #21
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003edc:	4b7f      	ldr	r3, [pc, #508]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ede:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ee0:	2380      	movs	r3, #128	@ 0x80
 8003ee2:	055b      	lsls	r3, r3, #21
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eea:	183b      	adds	r3, r7, r0
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef0:	4b7b      	ldr	r3, [pc, #492]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b7a      	ldr	r3, [pc, #488]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	0049      	lsls	r1, r1, #1
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003efe:	f7fd fbd1 	bl	80016a4 <HAL_GetTick>
 8003f02:	0003      	movs	r3, r0
 8003f04:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f06:	e00b      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fd fbcc 	bl	80016a4 <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d904      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003f16:	2313      	movs	r3, #19
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	2203      	movs	r2, #3
 8003f1c:	701a      	strb	r2, [r3, #0]
        break;
 8003f1e:	e005      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f20:	4b6f      	ldr	r3, [pc, #444]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2380      	movs	r3, #128	@ 0x80
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d0ed      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003f2c:	2313      	movs	r3, #19
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d154      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f36:	4b69      	ldr	r3, [pc, #420]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f3a:	23c0      	movs	r3, #192	@ 0xc0
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4013      	ands	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d019      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d014      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f52:	4b62      	ldr	r3, [pc, #392]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f56:	4a63      	ldr	r2, [pc, #396]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	4b5f      	ldr	r3, [pc, #380]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f60:	4b5e      	ldr	r3, [pc, #376]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f62:	2180      	movs	r1, #128	@ 0x80
 8003f64:	0249      	lsls	r1, r1, #9
 8003f66:	430a      	orrs	r2, r1
 8003f68:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f70:	495d      	ldr	r1, [pc, #372]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f76:	4b59      	ldr	r3, [pc, #356]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	4013      	ands	r3, r2
 8003f82:	d016      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fb8e 	bl	80016a4 <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8c:	e00c      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd fb89 	bl	80016a4 <HAL_GetTick>
 8003f92:	0002      	movs	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	4a54      	ldr	r2, [pc, #336]	@ (80040ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d904      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f9e:	2313      	movs	r3, #19
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	701a      	strb	r2, [r3, #0]
            break;
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fac:	2202      	movs	r2, #2
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d0ed      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003fb2:	2313      	movs	r3, #19
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbc:	4b47      	ldr	r3, [pc, #284]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc0:	4a48      	ldr	r2, [pc, #288]	@ (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	0019      	movs	r1, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	4b44      	ldr	r3, [pc, #272]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003fd0:	e00c      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd2:	2312      	movs	r3, #18
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2213      	movs	r2, #19
 8003fd8:	18ba      	adds	r2, r7, r2
 8003fda:	7812      	ldrb	r2, [r2, #0]
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	e005      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	2312      	movs	r3, #18
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	2213      	movs	r2, #19
 8003fe6:	18ba      	adds	r2, r7, r2
 8003fe8:	7812      	ldrb	r2, [r2, #0]
 8003fea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fec:	2311      	movs	r3, #17
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4b39      	ldr	r3, [pc, #228]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ffa:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ffc:	493c      	ldr	r1, [pc, #240]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2201      	movs	r2, #1
 8004008:	4013      	ands	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400c:	4b33      	ldr	r3, [pc, #204]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800400e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004010:	2203      	movs	r2, #3
 8004012:	4393      	bics	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4b30      	ldr	r3, [pc, #192]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800401c:	430a      	orrs	r2, r1
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2202      	movs	r2, #2
 8004026:	4013      	ands	r3, r2
 8004028:	d009      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800402a:	4b2c      	ldr	r3, [pc, #176]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800402c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402e:	220c      	movs	r2, #12
 8004030:	4393      	bics	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	4b28      	ldr	r3, [pc, #160]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800403a:	430a      	orrs	r2, r1
 800403c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2220      	movs	r2, #32
 8004044:	4013      	ands	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004048:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	4a29      	ldr	r2, [pc, #164]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404e:	4013      	ands	r3, r2
 8004050:	0019      	movs	r1, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004058:	430a      	orrs	r2, r1
 800405a:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	2380      	movs	r3, #128	@ 0x80
 8004062:	01db      	lsls	r3, r3, #7
 8004064:	4013      	ands	r3, r2
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004068:	4b1c      	ldr	r3, [pc, #112]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800406a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	0899      	lsrs	r1, r3, #2
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	4b19      	ldr	r3, [pc, #100]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004076:	430a      	orrs	r2, r1
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	2380      	movs	r3, #128	@ 0x80
 8004080:	05db      	lsls	r3, r3, #23
 8004082:	429a      	cmp	r2, r3
 8004084:	d106      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004086:	4b15      	ldr	r3, [pc, #84]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	4b14      	ldr	r3, [pc, #80]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800408c:	2180      	movs	r1, #128	@ 0x80
 800408e:	0249      	lsls	r1, r1, #9
 8004090:	430a      	orrs	r2, r1
 8004092:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	@ 0x80
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	4013      	ands	r3, r2
 800409e:	d016      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80040a0:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a4:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	0019      	movs	r1, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	4b0b      	ldr	r3, [pc, #44]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040b0:	430a      	orrs	r2, r1
 80040b2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	01db      	lsls	r3, r3, #7
 80040bc:	429a      	cmp	r2, r3
 80040be:	d106      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040c0:	4b06      	ldr	r3, [pc, #24]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040c6:	2180      	movs	r1, #128	@ 0x80
 80040c8:	0249      	lsls	r1, r1, #9
 80040ca:	430a      	orrs	r2, r1
 80040cc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80040ce:	2312      	movs	r3, #18
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	781b      	ldrb	r3, [r3, #0]
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b006      	add	sp, #24
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40007000 	.word	0x40007000
 80040e4:	fffffcff 	.word	0xfffffcff
 80040e8:	fffeffff 	.word	0xfffeffff
 80040ec:	00001388 	.word	0x00001388
 80040f0:	efffffff 	.word	0xefffffff
 80040f4:	ffffcfff 	.word	0xffffcfff
 80040f8:	ffff3fff 	.word	0xffff3fff

080040fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0a8      	b.n	8004260 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	2382      	movs	r3, #130	@ 0x82
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	429a      	cmp	r2, r3
 8004120:	d009      	beq.n	8004136 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	61da      	str	r2, [r3, #28]
 8004128:	e005      	b.n	8004136 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	225d      	movs	r2, #93	@ 0x5d
 8004140:	5c9b      	ldrb	r3, [r3, r2]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d107      	bne.n	8004158 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	225c      	movs	r2, #92	@ 0x5c
 800414c:	2100      	movs	r1, #0
 800414e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	0018      	movs	r0, r3
 8004154:	f7fc feac 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	225d      	movs	r2, #93	@ 0x5d
 800415c:	2102      	movs	r1, #2
 800415e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2140      	movs	r1, #64	@ 0x40
 800416c:	438a      	bics	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	23e0      	movs	r3, #224	@ 0xe0
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	429a      	cmp	r2, r3
 800417a:	d902      	bls.n	8004182 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e002      	b.n	8004188 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004182:	2380      	movs	r3, #128	@ 0x80
 8004184:	015b      	lsls	r3, r3, #5
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	23f0      	movs	r3, #240	@ 0xf0
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	429a      	cmp	r2, r3
 8004192:	d008      	beq.n	80041a6 <HAL_SPI_Init+0xaa>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	23e0      	movs	r3, #224	@ 0xe0
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	429a      	cmp	r2, r3
 800419e:	d002      	beq.n	80041a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	2382      	movs	r3, #130	@ 0x82
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	401a      	ands	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6899      	ldr	r1, [r3, #8]
 80041b4:	2384      	movs	r3, #132	@ 0x84
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	400b      	ands	r3, r1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2102      	movs	r1, #2
 80041c2:	400b      	ands	r3, r1
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2101      	movs	r1, #1
 80041cc:	400b      	ands	r3, r1
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6999      	ldr	r1, [r3, #24]
 80041d4:	2380      	movs	r3, #128	@ 0x80
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	400b      	ands	r3, r1
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	2138      	movs	r1, #56	@ 0x38
 80041e2:	400b      	ands	r3, r1
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	2180      	movs	r1, #128	@ 0x80
 80041ec:	400b      	ands	r3, r1
 80041ee:	431a      	orrs	r2, r3
 80041f0:	0011      	movs	r1, r2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041f6:	2380      	movs	r3, #128	@ 0x80
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	401a      	ands	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	2204      	movs	r2, #4
 800420c:	401a      	ands	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004212:	2110      	movs	r1, #16
 8004214:	400b      	ands	r3, r1
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421c:	2108      	movs	r1, #8
 800421e:	400b      	ands	r3, r1
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68d9      	ldr	r1, [r3, #12]
 8004226:	23f0      	movs	r3, #240	@ 0xf0
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	400b      	ands	r3, r1
 800422c:	431a      	orrs	r2, r3
 800422e:	0011      	movs	r1, r2
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	2380      	movs	r3, #128	@ 0x80
 8004234:	015b      	lsls	r3, r3, #5
 8004236:	401a      	ands	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	69da      	ldr	r2, [r3, #28]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4907      	ldr	r1, [pc, #28]	@ (8004268 <HAL_SPI_Init+0x16c>)
 800424c:	400a      	ands	r2, r1
 800424e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	225d      	movs	r2, #93	@ 0x5d
 800425a:	2101      	movs	r1, #1
 800425c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b004      	add	sp, #16
 8004266:	bd80      	pop	{r7, pc}
 8004268:	fffff7ff 	.word	0xfffff7ff

0800426c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	1dbb      	adds	r3, r7, #6
 800427a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800427c:	231f      	movs	r3, #31
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	225c      	movs	r2, #92	@ 0x5c
 8004288:	5c9b      	ldrb	r3, [r3, r2]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_SPI_Transmit+0x26>
 800428e:	2302      	movs	r3, #2
 8004290:	e147      	b.n	8004522 <HAL_SPI_Transmit+0x2b6>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	225c      	movs	r2, #92	@ 0x5c
 8004296:	2101      	movs	r1, #1
 8004298:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800429a:	f7fd fa03 	bl	80016a4 <HAL_GetTick>
 800429e:	0003      	movs	r3, r0
 80042a0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042a2:	2316      	movs	r3, #22
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	1dba      	adds	r2, r7, #6
 80042a8:	8812      	ldrh	r2, [r2, #0]
 80042aa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	225d      	movs	r2, #93	@ 0x5d
 80042b0:	5c9b      	ldrb	r3, [r3, r2]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d004      	beq.n	80042c2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80042b8:	231f      	movs	r3, #31
 80042ba:	18fb      	adds	r3, r7, r3
 80042bc:	2202      	movs	r2, #2
 80042be:	701a      	strb	r2, [r3, #0]
    goto error;
 80042c0:	e128      	b.n	8004514 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_SPI_Transmit+0x64>
 80042c8:	1dbb      	adds	r3, r7, #6
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80042d0:	231f      	movs	r3, #31
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80042d8:	e11c      	b.n	8004514 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	225d      	movs	r2, #93	@ 0x5d
 80042de:	2103      	movs	r1, #3
 80042e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1dba      	adds	r2, r7, #6
 80042f2:	8812      	ldrh	r2, [r2, #0]
 80042f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1dba      	adds	r2, r7, #6
 80042fa:	8812      	ldrh	r2, [r2, #0]
 80042fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2244      	movs	r2, #68	@ 0x44
 8004308:	2100      	movs	r1, #0
 800430a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2246      	movs	r2, #70	@ 0x46
 8004310:	2100      	movs	r1, #0
 8004312:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	2380      	movs	r3, #128	@ 0x80
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	429a      	cmp	r2, r3
 800432a:	d110      	bne.n	800434e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2140      	movs	r1, #64	@ 0x40
 8004338:	438a      	bics	r2, r1
 800433a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2180      	movs	r1, #128	@ 0x80
 8004348:	01c9      	lsls	r1, r1, #7
 800434a:	430a      	orrs	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2240      	movs	r2, #64	@ 0x40
 8004356:	4013      	ands	r3, r2
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d007      	beq.n	800436c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2140      	movs	r1, #64	@ 0x40
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	23e0      	movs	r3, #224	@ 0xe0
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	429a      	cmp	r2, r3
 8004376:	d952      	bls.n	800441e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d004      	beq.n	800438a <HAL_SPI_Transmit+0x11e>
 8004380:	2316      	movs	r3, #22
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d143      	bne.n	8004412 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	881a      	ldrh	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439a:	1c9a      	adds	r2, r3, #2
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043ae:	e030      	b.n	8004412 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2202      	movs	r2, #2
 80043b8:	4013      	ands	r3, r2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d112      	bne.n	80043e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c2:	881a      	ldrh	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ce:	1c9a      	adds	r2, r3, #2
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043e2:	e016      	b.n	8004412 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043e4:	f7fd f95e 	bl	80016a4 <HAL_GetTick>
 80043e8:	0002      	movs	r2, r0
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d802      	bhi.n	80043fa <HAL_SPI_Transmit+0x18e>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	3301      	adds	r3, #1
 80043f8:	d102      	bne.n	8004400 <HAL_SPI_Transmit+0x194>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8004400:	231f      	movs	r3, #31
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	2203      	movs	r2, #3
 8004406:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	225d      	movs	r2, #93	@ 0x5d
 800440c:	2101      	movs	r1, #1
 800440e:	5499      	strb	r1, [r3, r2]
          goto error;
 8004410:	e080      	b.n	8004514 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1c9      	bne.n	80043b0 <HAL_SPI_Transmit+0x144>
 800441c:	e053      	b.n	80044c6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <HAL_SPI_Transmit+0x1c4>
 8004426:	2316      	movs	r3, #22
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d145      	bne.n	80044bc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004456:	e031      	b.n	80044bc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2202      	movs	r2, #2
 8004460:	4013      	ands	r3, r2
 8004462:	2b02      	cmp	r3, #2
 8004464:	d113      	bne.n	800448e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	330c      	adds	r3, #12
 8004470:	7812      	ldrb	r2, [r2, #0]
 8004472:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800448c:	e016      	b.n	80044bc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448e:	f7fd f909 	bl	80016a4 <HAL_GetTick>
 8004492:	0002      	movs	r2, r0
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d802      	bhi.n	80044a4 <HAL_SPI_Transmit+0x238>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	3301      	adds	r3, #1
 80044a2:	d102      	bne.n	80044aa <HAL_SPI_Transmit+0x23e>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80044aa:	231f      	movs	r3, #31
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	2203      	movs	r2, #3
 80044b0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	225d      	movs	r2, #93	@ 0x5d
 80044b6:	2101      	movs	r1, #1
 80044b8:	5499      	strb	r1, [r3, r2]
          goto error;
 80044ba:	e02b      	b.n	8004514 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1c8      	bne.n	8004458 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 fc47 	bl	8004d60 <SPI_EndRxTxTransaction>
 80044d2:	1e03      	subs	r3, r0, #0
 80044d4:	d002      	beq.n	80044dc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8004502:	231f      	movs	r3, #31
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e003      	b.n	8004514 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	225d      	movs	r2, #93	@ 0x5d
 8004510:	2101      	movs	r1, #1
 8004512:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	225c      	movs	r2, #92	@ 0x5c
 8004518:	2100      	movs	r1, #0
 800451a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800451c:	231f      	movs	r3, #31
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	781b      	ldrb	r3, [r3, #0]
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b008      	add	sp, #32
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
 8004538:	001a      	movs	r2, r3
 800453a:	1cbb      	adds	r3, r7, #2
 800453c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800453e:	2301      	movs	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004542:	2323      	movs	r3, #35	@ 0x23
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	2200      	movs	r2, #0
 8004548:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	225c      	movs	r2, #92	@ 0x5c
 800454e:	5c9b      	ldrb	r3, [r3, r2]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x2c>
 8004554:	2302      	movs	r3, #2
 8004556:	e1c4      	b.n	80048e2 <HAL_SPI_TransmitReceive+0x3b6>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	225c      	movs	r2, #92	@ 0x5c
 800455c:	2101      	movs	r1, #1
 800455e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004560:	f7fd f8a0 	bl	80016a4 <HAL_GetTick>
 8004564:	0003      	movs	r3, r0
 8004566:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004568:	201b      	movs	r0, #27
 800456a:	183b      	adds	r3, r7, r0
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	215d      	movs	r1, #93	@ 0x5d
 8004570:	5c52      	ldrb	r2, [r2, r1]
 8004572:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800457a:	2312      	movs	r3, #18
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	1cba      	adds	r2, r7, #2
 8004580:	8812      	ldrh	r2, [r2, #0]
 8004582:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004584:	183b      	adds	r3, r7, r0
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d011      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x84>
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	2382      	movs	r3, #130	@ 0x82
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	429a      	cmp	r2, r3
 8004594:	d107      	bne.n	80045a6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <HAL_SPI_TransmitReceive+0x7a>
 800459e:	183b      	adds	r3, r7, r0
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d004      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80045a6:	2323      	movs	r3, #35	@ 0x23
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	2202      	movs	r2, #2
 80045ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80045ae:	e191      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <HAL_SPI_TransmitReceive+0x98>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_SPI_TransmitReceive+0x98>
 80045bc:	1cbb      	adds	r3, r7, #2
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80045c4:	2323      	movs	r3, #35	@ 0x23
 80045c6:	18fb      	adds	r3, r7, r3
 80045c8:	2201      	movs	r2, #1
 80045ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80045cc:	e182      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	225d      	movs	r2, #93	@ 0x5d
 80045d2:	5c9b      	ldrb	r3, [r3, r2]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d003      	beq.n	80045e2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	225d      	movs	r2, #93	@ 0x5d
 80045de:	2105      	movs	r1, #5
 80045e0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1cba      	adds	r2, r7, #2
 80045f2:	2146      	movs	r1, #70	@ 0x46
 80045f4:	8812      	ldrh	r2, [r2, #0]
 80045f6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1cba      	adds	r2, r7, #2
 80045fc:	2144      	movs	r1, #68	@ 0x44
 80045fe:	8812      	ldrh	r2, [r2, #0]
 8004600:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1cba      	adds	r2, r7, #2
 800460c:	8812      	ldrh	r2, [r2, #0]
 800460e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1cba      	adds	r2, r7, #2
 8004614:	8812      	ldrh	r2, [r2, #0]
 8004616:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68da      	ldr	r2, [r3, #12]
 8004628:	23e0      	movs	r3, #224	@ 0xe0
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	429a      	cmp	r2, r3
 800462e:	d908      	bls.n	8004642 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	49ac      	ldr	r1, [pc, #688]	@ (80048ec <HAL_SPI_TransmitReceive+0x3c0>)
 800463c:	400a      	ands	r2, r1
 800463e:	605a      	str	r2, [r3, #4]
 8004640:	e008      	b.n	8004654 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2180      	movs	r1, #128	@ 0x80
 800464e:	0149      	lsls	r1, r1, #5
 8004650:	430a      	orrs	r2, r1
 8004652:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2240      	movs	r2, #64	@ 0x40
 800465c:	4013      	ands	r3, r2
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	d007      	beq.n	8004672 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2140      	movs	r1, #64	@ 0x40
 800466e:	430a      	orrs	r2, r1
 8004670:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	23e0      	movs	r3, #224	@ 0xe0
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	429a      	cmp	r2, r3
 800467c:	d800      	bhi.n	8004680 <HAL_SPI_TransmitReceive+0x154>
 800467e:	e083      	b.n	8004788 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_SPI_TransmitReceive+0x168>
 8004688:	2312      	movs	r3, #18
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d000      	beq.n	8004694 <HAL_SPI_TransmitReceive+0x168>
 8004692:	e06d      	b.n	8004770 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046b8:	e05a      	b.n	8004770 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2202      	movs	r2, #2
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d11b      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x1d4>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d016      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x1d4>
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d113      	bne.n	8004700 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046dc:	881a      	ldrh	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	1c9a      	adds	r2, r3, #2
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2201      	movs	r2, #1
 8004708:	4013      	ands	r3, r2
 800470a:	2b01      	cmp	r3, #1
 800470c:	d11c      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x21c>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2246      	movs	r2, #70	@ 0x46
 8004712:	5a9b      	ldrh	r3, [r3, r2]
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	b292      	uxth	r2, r2
 8004726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	1c9a      	adds	r2, r3, #2
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2246      	movs	r2, #70	@ 0x46
 8004736:	5a9b      	ldrh	r3, [r3, r2]
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b299      	uxth	r1, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2246      	movs	r2, #70	@ 0x46
 8004742:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004744:	2301      	movs	r3, #1
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004748:	f7fc ffac 	bl	80016a4 <HAL_GetTick>
 800474c:	0002      	movs	r2, r0
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004754:	429a      	cmp	r2, r3
 8004756:	d80b      	bhi.n	8004770 <HAL_SPI_TransmitReceive+0x244>
 8004758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475a:	3301      	adds	r3, #1
 800475c:	d008      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800475e:	2323      	movs	r3, #35	@ 0x23
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	2203      	movs	r2, #3
 8004764:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	225d      	movs	r2, #93	@ 0x5d
 800476a:	2101      	movs	r1, #1
 800476c:	5499      	strb	r1, [r3, r2]
        goto error;
 800476e:	e0b1      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d19f      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x18e>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2246      	movs	r2, #70	@ 0x46
 800477e:	5a9b      	ldrh	r3, [r3, r2]
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d199      	bne.n	80046ba <HAL_SPI_TransmitReceive+0x18e>
 8004786:	e089      	b.n	800489c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_SPI_TransmitReceive+0x270>
 8004790:	2312      	movs	r3, #18
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d000      	beq.n	800479c <HAL_SPI_TransmitReceive+0x270>
 800479a:	e074      	b.n	8004886 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	7812      	ldrb	r2, [r2, #0]
 80047a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c2:	e060      	b.n	8004886 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	2202      	movs	r2, #2
 80047cc:	4013      	ands	r3, r2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d11c      	bne.n	800480c <HAL_SPI_TransmitReceive+0x2e0>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d017      	beq.n	800480c <HAL_SPI_TransmitReceive+0x2e0>
 80047dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d114      	bne.n	800480c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	7812      	ldrb	r2, [r2, #0]
 80047ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	2201      	movs	r2, #1
 8004814:	4013      	ands	r3, r2
 8004816:	2b01      	cmp	r3, #1
 8004818:	d11e      	bne.n	8004858 <HAL_SPI_TransmitReceive+0x32c>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2246      	movs	r2, #70	@ 0x46
 800481e:	5a9b      	ldrh	r3, [r3, r2]
 8004820:	b29b      	uxth	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d018      	beq.n	8004858 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	330c      	adds	r3, #12
 800482c:	001a      	movs	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	7812      	ldrb	r2, [r2, #0]
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2246      	movs	r2, #70	@ 0x46
 8004846:	5a9b      	ldrh	r3, [r3, r2]
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b299      	uxth	r1, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2246      	movs	r2, #70	@ 0x46
 8004852:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004854:	2301      	movs	r3, #1
 8004856:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004858:	f7fc ff24 	bl	80016a4 <HAL_GetTick>
 800485c:	0002      	movs	r2, r0
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004864:	429a      	cmp	r2, r3
 8004866:	d802      	bhi.n	800486e <HAL_SPI_TransmitReceive+0x342>
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	3301      	adds	r3, #1
 800486c:	d102      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x348>
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	2b00      	cmp	r3, #0
 8004872:	d108      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8004874:	2323      	movs	r3, #35	@ 0x23
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2203      	movs	r2, #3
 800487a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	225d      	movs	r2, #93	@ 0x5d
 8004880:	2101      	movs	r1, #1
 8004882:	5499      	strb	r1, [r3, r2]
        goto error;
 8004884:	e026      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800488a:	b29b      	uxth	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d199      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x298>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2246      	movs	r2, #70	@ 0x46
 8004894:	5a9b      	ldrh	r3, [r3, r2]
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d193      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	0018      	movs	r0, r3
 80048a4:	f000 fa5c 	bl	8004d60 <SPI_EndRxTxTransaction>
 80048a8:	1e03      	subs	r3, r0, #0
 80048aa:	d006      	beq.n	80048ba <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80048ac:	2323      	movs	r3, #35	@ 0x23
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d004      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80048c2:	2323      	movs	r3, #35	@ 0x23
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e003      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	225d      	movs	r2, #93	@ 0x5d
 80048d0:	2101      	movs	r1, #1
 80048d2:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	225c      	movs	r2, #92	@ 0x5c
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80048dc:	2323      	movs	r3, #35	@ 0x23
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	781b      	ldrb	r3, [r3, #0]
}
 80048e2:	0018      	movs	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b00a      	add	sp, #40	@ 0x28
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	46c0      	nop			@ (mov r8, r8)
 80048ec:	ffffefff 	.word	0xffffefff

080048f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2240      	movs	r2, #64	@ 0x40
 800490c:	4013      	ands	r3, r2
 800490e:	d10d      	bne.n	800492c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2201      	movs	r2, #1
 8004914:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004916:	d009      	beq.n	800492c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2240      	movs	r2, #64	@ 0x40
 800491c:	4013      	ands	r3, r2
 800491e:	d005      	beq.n	800492c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	0010      	movs	r0, r2
 8004928:	4798      	blx	r3
    return;
 800492a:	e0c5      	b.n	8004ab8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	2202      	movs	r2, #2
 8004930:	4013      	ands	r3, r2
 8004932:	d009      	beq.n	8004948 <HAL_SPI_IRQHandler+0x58>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2280      	movs	r2, #128	@ 0x80
 8004938:	4013      	ands	r3, r2
 800493a:	d005      	beq.n	8004948 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	0010      	movs	r0, r2
 8004944:	4798      	blx	r3
    return;
 8004946:	e0b7      	b.n	8004ab8 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2220      	movs	r2, #32
 800494c:	4013      	ands	r3, r2
 800494e:	d109      	bne.n	8004964 <HAL_SPI_IRQHandler+0x74>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2240      	movs	r2, #64	@ 0x40
 8004954:	4013      	ands	r3, r2
 8004956:	d105      	bne.n	8004964 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	2380      	movs	r3, #128	@ 0x80
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	4013      	ands	r3, r2
 8004960:	d100      	bne.n	8004964 <HAL_SPI_IRQHandler+0x74>
 8004962:	e0a9      	b.n	8004ab8 <HAL_SPI_IRQHandler+0x1c8>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2220      	movs	r2, #32
 8004968:	4013      	ands	r3, r2
 800496a:	d100      	bne.n	800496e <HAL_SPI_IRQHandler+0x7e>
 800496c:	e0a4      	b.n	8004ab8 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2240      	movs	r2, #64	@ 0x40
 8004972:	4013      	ands	r3, r2
 8004974:	d023      	beq.n	80049be <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	225d      	movs	r2, #93	@ 0x5d
 800497a:	5c9b      	ldrb	r3, [r3, r2]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d011      	beq.n	80049a6 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004986:	2204      	movs	r2, #4
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	e00b      	b.n	80049be <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	693b      	ldr	r3, [r7, #16]
        return;
 80049bc:	e07c      	b.n	8004ab8 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2220      	movs	r2, #32
 80049c2:	4013      	ands	r3, r2
 80049c4:	d014      	beq.n	80049f0 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ca:	2201      	movs	r2, #1
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2140      	movs	r1, #64	@ 0x40
 80049ea:	438a      	bics	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4013      	ands	r3, r2
 80049f8:	d00c      	beq.n	8004a14 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fe:	2208      	movs	r2, #8
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d04c      	beq.n	8004ab6 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	21e0      	movs	r1, #224	@ 0xe0
 8004a28:	438a      	bics	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	225d      	movs	r2, #93	@ 0x5d
 8004a30:	2101      	movs	r1, #1
 8004a32:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2202      	movs	r2, #2
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d103      	bne.n	8004a44 <HAL_SPI_IRQHandler+0x154>
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	4013      	ands	r3, r2
 8004a42:	d032      	beq.n	8004aaa <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2103      	movs	r1, #3
 8004a50:	438a      	bics	r2, r1
 8004a52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d010      	beq.n	8004a7e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a60:	4a17      	ldr	r2, [pc, #92]	@ (8004ac0 <HAL_SPI_IRQHandler+0x1d0>)
 8004a62:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7fd fb51 	bl	8002110 <HAL_DMA_Abort_IT>
 8004a6e:	1e03      	subs	r3, r0, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a76:	2240      	movs	r2, #64	@ 0x40
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac0 <HAL_SPI_IRQHandler+0x1d0>)
 8004a8c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7fd fb3c 	bl	8002110 <HAL_DMA_Abort_IT>
 8004a98:	1e03      	subs	r3, r0, #0
 8004a9a:	d00b      	beq.n	8004ab4 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa0:	2240      	movs	r2, #64	@ 0x40
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004aa8:	e004      	b.n	8004ab4 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f000 f809 	bl	8004ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ab2:	e000      	b.n	8004ab6 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8004ab4:	46c0      	nop			@ (mov r8, r8)
    return;
 8004ab6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b008      	add	sp, #32
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	08004ad5 	.word	0x08004ad5

08004ac4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004acc:	46c0      	nop			@ (mov r8, r8)
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b002      	add	sp, #8
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2246      	movs	r2, #70	@ 0x46
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	0018      	movs	r0, r3
 8004af4:	f7ff ffe6 	bl	8004ac4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004af8:	46c0      	nop			@ (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b004      	add	sp, #16
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	1dfb      	adds	r3, r7, #7
 8004b0e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b10:	f7fc fdc8 	bl	80016a4 <HAL_GetTick>
 8004b14:	0002      	movs	r2, r0
 8004b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	18d3      	adds	r3, r2, r3
 8004b1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b20:	f7fc fdc0 	bl	80016a4 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b28:	4b3a      	ldr	r3, [pc, #232]	@ (8004c14 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	015b      	lsls	r3, r3, #5
 8004b2e:	0d1b      	lsrs	r3, r3, #20
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	4353      	muls	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b36:	e058      	b.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	d055      	beq.n	8004bea <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b3e:	f7fc fdb1 	bl	80016a4 <HAL_GetTick>
 8004b42:	0002      	movs	r2, r0
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d902      	bls.n	8004b54 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d142      	bne.n	8004bda <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	21e0      	movs	r1, #224	@ 0xe0
 8004b60:	438a      	bics	r2, r1
 8004b62:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	2382      	movs	r3, #130	@ 0x82
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d113      	bne.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	2380      	movs	r3, #128	@ 0x80
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d005      	beq.n	8004b88 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	2380      	movs	r3, #128	@ 0x80
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d107      	bne.n	8004b98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2140      	movs	r1, #64	@ 0x40
 8004b94:	438a      	bics	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	019b      	lsls	r3, r3, #6
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d110      	bne.n	8004bc6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	491a      	ldr	r1, [pc, #104]	@ (8004c18 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004bb0:	400a      	ands	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2180      	movs	r1, #128	@ 0x80
 8004bc0:	0189      	lsls	r1, r1, #6
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	225d      	movs	r2, #93	@ 0x5d
 8004bca:	2101      	movs	r1, #1
 8004bcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	225c      	movs	r2, #92	@ 0x5c
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e017      	b.n	8004c0a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	425a      	negs	r2, r3
 8004bfa:	4153      	adcs	r3, r2
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	001a      	movs	r2, r3
 8004c00:	1dfb      	adds	r3, r7, #7
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d197      	bne.n	8004b38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b008      	add	sp, #32
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	200000c0 	.word	0x200000c0
 8004c18:	ffffdfff 	.word	0xffffdfff

08004c1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	@ 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c2a:	2317      	movs	r3, #23
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2200      	movs	r2, #0
 8004c30:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c32:	f7fc fd37 	bl	80016a4 <HAL_GetTick>
 8004c36:	0002      	movs	r2, r0
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	18d3      	adds	r3, r2, r3
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004c42:	f7fc fd2f 	bl	80016a4 <HAL_GetTick>
 8004c46:	0003      	movs	r3, r0
 8004c48:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004c52:	4b41      	ldr	r3, [pc, #260]	@ (8004d58 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	0013      	movs	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	189b      	adds	r3, r3, r2
 8004c5c:	00da      	lsls	r2, r3, #3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	0d1b      	lsrs	r3, r3, #20
 8004c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c64:	4353      	muls	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004c68:	e068      	b.n	8004d3c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	23c0      	movs	r3, #192	@ 0xc0
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d10a      	bne.n	8004c8a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d107      	bne.n	8004c8a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	2117      	movs	r1, #23
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004c86:	187b      	adds	r3, r7, r1
 8004c88:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	d055      	beq.n	8004d3c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c90:	f7fc fd08 	bl	80016a4 <HAL_GetTick>
 8004c94:	0002      	movs	r2, r0
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d902      	bls.n	8004ca6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d142      	bne.n	8004d2c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	21e0      	movs	r1, #224	@ 0xe0
 8004cb2:	438a      	bics	r2, r1
 8004cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	2382      	movs	r3, #130	@ 0x82
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d113      	bne.n	8004cea <SPI_WaitFifoStateUntilTimeout+0xce>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d005      	beq.n	8004cda <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	2380      	movs	r3, #128	@ 0x80
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d107      	bne.n	8004cea <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2140      	movs	r1, #64	@ 0x40
 8004ce6:	438a      	bics	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cee:	2380      	movs	r3, #128	@ 0x80
 8004cf0:	019b      	lsls	r3, r3, #6
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d110      	bne.n	8004d18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4916      	ldr	r1, [pc, #88]	@ (8004d5c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004d02:	400a      	ands	r2, r1
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2180      	movs	r1, #128	@ 0x80
 8004d12:	0189      	lsls	r1, r1, #6
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	225d      	movs	r2, #93	@ 0x5d
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	225c      	movs	r2, #92	@ 0x5c
 8004d24:	2100      	movs	r1, #0
 8004d26:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e010      	b.n	8004d4e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4013      	ands	r3, r2
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d18e      	bne.n	8004c6a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	0018      	movs	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	b00a      	add	sp, #40	@ 0x28
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	200000c0 	.word	0x200000c0
 8004d5c:	ffffdfff 	.word	0xffffdfff

08004d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af02      	add	r7, sp, #8
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	23c0      	movs	r3, #192	@ 0xc0
 8004d70:	0159      	lsls	r1, r3, #5
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	0013      	movs	r3, r2
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f7ff ff4e 	bl	8004c1c <SPI_WaitFifoStateUntilTimeout>
 8004d80:	1e03      	subs	r3, r0, #0
 8004d82:	d007      	beq.n	8004d94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d88:	2220      	movs	r2, #32
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e027      	b.n	8004de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	0013      	movs	r3, r2
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2180      	movs	r1, #128	@ 0x80
 8004da2:	f7ff fead 	bl	8004b00 <SPI_WaitFlagStateUntilTimeout>
 8004da6:	1e03      	subs	r3, r0, #0
 8004da8:	d007      	beq.n	8004dba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dae:	2220      	movs	r2, #32
 8004db0:	431a      	orrs	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e014      	b.n	8004de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	23c0      	movs	r3, #192	@ 0xc0
 8004dbe:	00d9      	lsls	r1, r3, #3
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	0013      	movs	r3, r2
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f7ff ff27 	bl	8004c1c <SPI_WaitFifoStateUntilTimeout>
 8004dce:	1e03      	subs	r3, r0, #0
 8004dd0:	d007      	beq.n	8004de2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e000      	b.n	8004de4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	0018      	movs	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b004      	add	sp, #16
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e04a      	b.n	8004e94 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	223d      	movs	r2, #61	@ 0x3d
 8004e02:	5c9b      	ldrb	r3, [r3, r2]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d107      	bne.n	8004e1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	223c      	movs	r2, #60	@ 0x3c
 8004e0e:	2100      	movs	r1, #0
 8004e10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f7fc fa97 	bl	8001348 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	223d      	movs	r2, #61	@ 0x3d
 8004e1e:	2102      	movs	r1, #2
 8004e20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	0010      	movs	r0, r2
 8004e2e:	f000 fbe9 	bl	8005604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2248      	movs	r2, #72	@ 0x48
 8004e36:	2101      	movs	r1, #1
 8004e38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	223e      	movs	r2, #62	@ 0x3e
 8004e3e:	2101      	movs	r1, #1
 8004e40:	5499      	strb	r1, [r3, r2]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	223f      	movs	r2, #63	@ 0x3f
 8004e46:	2101      	movs	r1, #1
 8004e48:	5499      	strb	r1, [r3, r2]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2240      	movs	r2, #64	@ 0x40
 8004e4e:	2101      	movs	r1, #1
 8004e50:	5499      	strb	r1, [r3, r2]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2241      	movs	r2, #65	@ 0x41
 8004e56:	2101      	movs	r1, #1
 8004e58:	5499      	strb	r1, [r3, r2]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2242      	movs	r2, #66	@ 0x42
 8004e5e:	2101      	movs	r1, #1
 8004e60:	5499      	strb	r1, [r3, r2]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2243      	movs	r2, #67	@ 0x43
 8004e66:	2101      	movs	r1, #1
 8004e68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2244      	movs	r2, #68	@ 0x44
 8004e6e:	2101      	movs	r1, #1
 8004e70:	5499      	strb	r1, [r3, r2]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2245      	movs	r2, #69	@ 0x45
 8004e76:	2101      	movs	r1, #1
 8004e78:	5499      	strb	r1, [r3, r2]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2246      	movs	r2, #70	@ 0x46
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2247      	movs	r2, #71	@ 0x47
 8004e86:	2101      	movs	r1, #1
 8004e88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	223d      	movs	r2, #61	@ 0x3d
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	0018      	movs	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b002      	add	sp, #8
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	223d      	movs	r2, #61	@ 0x3d
 8004ea8:	5c9b      	ldrb	r3, [r3, r2]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d001      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e03c      	b.n	8004f2e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	223d      	movs	r2, #61	@ 0x3d
 8004eb8:	2102      	movs	r1, #2
 8004eba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	@ (8004f38 <HAL_TIM_Base_Start_IT+0x9c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d009      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0x4e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <HAL_TIM_Base_Start_IT+0xa0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0x4e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a16      	ldr	r2, [pc, #88]	@ (8004f40 <HAL_TIM_Base_Start_IT+0xa4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d116      	bne.n	8004f18 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a14      	ldr	r2, [pc, #80]	@ (8004f44 <HAL_TIM_Base_Start_IT+0xa8>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b06      	cmp	r3, #6
 8004efa:	d016      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x8e>
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	2380      	movs	r3, #128	@ 0x80
 8004f00:	025b      	lsls	r3, r3, #9
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d011      	beq.n	8004f2a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2101      	movs	r1, #1
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	e008      	b.n	8004f2a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2101      	movs	r1, #1
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e000      	b.n	8004f2c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	0018      	movs	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b004      	add	sp, #16
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			@ (mov r8, r8)
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40014000 	.word	0x40014000
 8004f44:	00010007 	.word	0x00010007

08004f48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e04a      	b.n	8004ff0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	223d      	movs	r2, #61	@ 0x3d
 8004f5e:	5c9b      	ldrb	r3, [r3, r2]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d107      	bne.n	8004f76 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	223c      	movs	r2, #60	@ 0x3c
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 f841 	bl	8004ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	223d      	movs	r2, #61	@ 0x3d
 8004f7a:	2102      	movs	r1, #2
 8004f7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3304      	adds	r3, #4
 8004f86:	0019      	movs	r1, r3
 8004f88:	0010      	movs	r0, r2
 8004f8a:	f000 fb3b 	bl	8005604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2248      	movs	r2, #72	@ 0x48
 8004f92:	2101      	movs	r1, #1
 8004f94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	223e      	movs	r2, #62	@ 0x3e
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	5499      	strb	r1, [r3, r2]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	223f      	movs	r2, #63	@ 0x3f
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	5499      	strb	r1, [r3, r2]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2240      	movs	r2, #64	@ 0x40
 8004faa:	2101      	movs	r1, #1
 8004fac:	5499      	strb	r1, [r3, r2]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2241      	movs	r2, #65	@ 0x41
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5499      	strb	r1, [r3, r2]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2242      	movs	r2, #66	@ 0x42
 8004fba:	2101      	movs	r1, #1
 8004fbc:	5499      	strb	r1, [r3, r2]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2243      	movs	r2, #67	@ 0x43
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2244      	movs	r2, #68	@ 0x44
 8004fca:	2101      	movs	r1, #1
 8004fcc:	5499      	strb	r1, [r3, r2]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2245      	movs	r2, #69	@ 0x45
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	5499      	strb	r1, [r3, r2]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2246      	movs	r2, #70	@ 0x46
 8004fda:	2101      	movs	r1, #1
 8004fdc:	5499      	strb	r1, [r3, r2]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2247      	movs	r2, #71	@ 0x47
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	223d      	movs	r2, #61	@ 0x3d
 8004fea:	2101      	movs	r1, #1
 8004fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b002      	add	sp, #8
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	46bd      	mov	sp, r7
 8005004:	b002      	add	sp, #8
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2202      	movs	r2, #2
 8005024:	4013      	ands	r3, r2
 8005026:	d021      	beq.n	800506c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2202      	movs	r2, #2
 800502c:	4013      	ands	r3, r2
 800502e:	d01d      	beq.n	800506c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2203      	movs	r2, #3
 8005036:	4252      	negs	r2, r2
 8005038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2203      	movs	r2, #3
 8005048:	4013      	ands	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	0018      	movs	r0, r3
 8005050:	f000 fac0 	bl	80055d4 <HAL_TIM_IC_CaptureCallback>
 8005054:	e007      	b.n	8005066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f000 fab3 	bl	80055c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	0018      	movs	r0, r3
 8005062:	f000 fabf 	bl	80055e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2204      	movs	r2, #4
 8005070:	4013      	ands	r3, r2
 8005072:	d022      	beq.n	80050ba <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2204      	movs	r2, #4
 8005078:	4013      	ands	r3, r2
 800507a:	d01e      	beq.n	80050ba <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2205      	movs	r2, #5
 8005082:	4252      	negs	r2, r2
 8005084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699a      	ldr	r2, [r3, #24]
 8005092:	23c0      	movs	r3, #192	@ 0xc0
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4013      	ands	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 fa99 	bl	80055d4 <HAL_TIM_IC_CaptureCallback>
 80050a2:	e007      	b.n	80050b4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 fa8c 	bl	80055c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	0018      	movs	r0, r3
 80050b0:	f000 fa98 	bl	80055e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	2208      	movs	r2, #8
 80050be:	4013      	ands	r3, r2
 80050c0:	d021      	beq.n	8005106 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2208      	movs	r2, #8
 80050c6:	4013      	ands	r3, r2
 80050c8:	d01d      	beq.n	8005106 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2209      	movs	r2, #9
 80050d0:	4252      	negs	r2, r2
 80050d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2204      	movs	r2, #4
 80050d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	2203      	movs	r2, #3
 80050e2:	4013      	ands	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 fa73 	bl	80055d4 <HAL_TIM_IC_CaptureCallback>
 80050ee:	e007      	b.n	8005100 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	0018      	movs	r0, r3
 80050f4:	f000 fa66 	bl	80055c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f000 fa72 	bl	80055e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2210      	movs	r2, #16
 800510a:	4013      	ands	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2210      	movs	r2, #16
 8005112:	4013      	ands	r3, r2
 8005114:	d01e      	beq.n	8005154 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2211      	movs	r2, #17
 800511c:	4252      	negs	r2, r2
 800511e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2208      	movs	r2, #8
 8005124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	23c0      	movs	r3, #192	@ 0xc0
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4013      	ands	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	0018      	movs	r0, r3
 8005138:	f000 fa4c 	bl	80055d4 <HAL_TIM_IC_CaptureCallback>
 800513c:	e007      	b.n	800514e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fa3f 	bl	80055c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	0018      	movs	r0, r3
 800514a:	f000 fa4b 	bl	80055e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2201      	movs	r2, #1
 8005158:	4013      	ands	r3, r2
 800515a:	d00c      	beq.n	8005176 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	4013      	ands	r3, r2
 8005162:	d008      	beq.n	8005176 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2202      	movs	r2, #2
 800516a:	4252      	negs	r2, r2
 800516c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0018      	movs	r0, r3
 8005172:	f7fb fe33 	bl	8000ddc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2280      	movs	r2, #128	@ 0x80
 800517a:	4013      	ands	r3, r2
 800517c:	d104      	bne.n	8005188 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	2380      	movs	r3, #128	@ 0x80
 8005182:	019b      	lsls	r3, r3, #6
 8005184:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005186:	d00b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2280      	movs	r2, #128	@ 0x80
 800518c:	4013      	ands	r3, r2
 800518e:	d007      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1e      	ldr	r2, [pc, #120]	@ (8005210 <HAL_TIM_IRQHandler+0x208>)
 8005196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	0018      	movs	r0, r3
 800519c:	f000 fe86 	bl	8005eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	2380      	movs	r3, #128	@ 0x80
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2280      	movs	r2, #128	@ 0x80
 80051ae:	4013      	ands	r3, r2
 80051b0:	d007      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a17      	ldr	r2, [pc, #92]	@ (8005214 <HAL_TIM_IRQHandler+0x20c>)
 80051b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 fe7d 	bl	8005ebc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	2240      	movs	r2, #64	@ 0x40
 80051c6:	4013      	ands	r3, r2
 80051c8:	d00c      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2240      	movs	r2, #64	@ 0x40
 80051ce:	4013      	ands	r3, r2
 80051d0:	d008      	beq.n	80051e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2241      	movs	r2, #65	@ 0x41
 80051d8:	4252      	negs	r2, r2
 80051da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	0018      	movs	r0, r3
 80051e0:	f000 fa08 	bl	80055f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2220      	movs	r2, #32
 80051e8:	4013      	ands	r3, r2
 80051ea:	d00c      	beq.n	8005206 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	4013      	ands	r3, r2
 80051f2:	d008      	beq.n	8005206 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2221      	movs	r2, #33	@ 0x21
 80051fa:	4252      	negs	r2, r2
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	0018      	movs	r0, r3
 8005202:	f000 fe4b 	bl	8005e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}
 800520e:	46c0      	nop			@ (mov r8, r8)
 8005210:	ffffdf7f 	.word	0xffffdf7f
 8005214:	fffffeff 	.word	0xfffffeff

08005218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005224:	2317      	movs	r3, #23
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	223c      	movs	r2, #60	@ 0x3c
 8005230:	5c9b      	ldrb	r3, [r3, r2]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005236:	2302      	movs	r3, #2
 8005238:	e0e5      	b.n	8005406 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	223c      	movs	r2, #60	@ 0x3c
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b14      	cmp	r3, #20
 8005246:	d900      	bls.n	800524a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005248:	e0d1      	b.n	80053ee <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	009a      	lsls	r2, r3, #2
 800524e:	4b70      	ldr	r3, [pc, #448]	@ (8005410 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005250:	18d3      	adds	r3, r2, r3
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	0011      	movs	r1, r2
 800525e:	0018      	movs	r0, r3
 8005260:	f000 fa54 	bl	800570c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2108      	movs	r1, #8
 8005270:	430a      	orrs	r2, r1
 8005272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699a      	ldr	r2, [r3, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2104      	movs	r1, #4
 8005280:	438a      	bics	r2, r1
 8005282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6999      	ldr	r1, [r3, #24]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	619a      	str	r2, [r3, #24]
      break;
 8005296:	e0af      	b.n	80053f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	0011      	movs	r1, r2
 80052a0:	0018      	movs	r0, r3
 80052a2:	f000 fabd 	bl	8005820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2180      	movs	r1, #128	@ 0x80
 80052b2:	0109      	lsls	r1, r1, #4
 80052b4:	430a      	orrs	r2, r1
 80052b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4954      	ldr	r1, [pc, #336]	@ (8005414 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80052c4:	400a      	ands	r2, r1
 80052c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6999      	ldr	r1, [r3, #24]
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	021a      	lsls	r2, r3, #8
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	619a      	str	r2, [r3, #24]
      break;
 80052dc:	e08c      	b.n	80053f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	0011      	movs	r1, r2
 80052e6:	0018      	movs	r0, r3
 80052e8:	f000 fb1e 	bl	8005928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2108      	movs	r1, #8
 80052f8:	430a      	orrs	r2, r1
 80052fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	69da      	ldr	r2, [r3, #28]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2104      	movs	r1, #4
 8005308:	438a      	bics	r2, r1
 800530a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69d9      	ldr	r1, [r3, #28]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	61da      	str	r2, [r3, #28]
      break;
 800531e:	e06b      	b.n	80053f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	0011      	movs	r1, r2
 8005328:	0018      	movs	r0, r3
 800532a:	f000 fb85 	bl	8005a38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2180      	movs	r1, #128	@ 0x80
 800533a:	0109      	lsls	r1, r1, #4
 800533c:	430a      	orrs	r2, r1
 800533e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	69da      	ldr	r2, [r3, #28]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4932      	ldr	r1, [pc, #200]	@ (8005414 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800534c:	400a      	ands	r2, r1
 800534e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	69d9      	ldr	r1, [r3, #28]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	021a      	lsls	r2, r3, #8
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	61da      	str	r2, [r3, #28]
      break;
 8005364:	e048      	b.n	80053f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	0011      	movs	r1, r2
 800536e:	0018      	movs	r0, r3
 8005370:	f000 fbcc 	bl	8005b0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2108      	movs	r1, #8
 8005380:	430a      	orrs	r2, r1
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2104      	movs	r1, #4
 8005390:	438a      	bics	r2, r1
 8005392:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053a6:	e027      	b.n	80053f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	0011      	movs	r1, r2
 80053b0:	0018      	movs	r0, r3
 80053b2:	f000 fc0b 	bl	8005bcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2180      	movs	r1, #128	@ 0x80
 80053c2:	0109      	lsls	r1, r1, #4
 80053c4:	430a      	orrs	r2, r1
 80053c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4910      	ldr	r1, [pc, #64]	@ (8005414 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053d4:	400a      	ands	r2, r1
 80053d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053ec:	e004      	b.n	80053f8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80053ee:	2317      	movs	r3, #23
 80053f0:	18fb      	adds	r3, r7, r3
 80053f2:	2201      	movs	r2, #1
 80053f4:	701a      	strb	r2, [r3, #0]
      break;
 80053f6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	223c      	movs	r2, #60	@ 0x3c
 80053fc:	2100      	movs	r1, #0
 80053fe:	5499      	strb	r1, [r3, r2]

  return status;
 8005400:	2317      	movs	r3, #23
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	781b      	ldrb	r3, [r3, #0]
}
 8005406:	0018      	movs	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	b006      	add	sp, #24
 800540c:	bd80      	pop	{r7, pc}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	0800b810 	.word	0x0800b810
 8005414:	fffffbff 	.word	0xfffffbff

08005418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	230f      	movs	r3, #15
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	2200      	movs	r2, #0
 8005428:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	223c      	movs	r2, #60	@ 0x3c
 800542e:	5c9b      	ldrb	r3, [r3, r2]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_TIM_ConfigClockSource+0x20>
 8005434:	2302      	movs	r3, #2
 8005436:	e0bc      	b.n	80055b2 <HAL_TIM_ConfigClockSource+0x19a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	223c      	movs	r2, #60	@ 0x3c
 800543c:	2101      	movs	r1, #1
 800543e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	223d      	movs	r2, #61	@ 0x3d
 8005444:	2102      	movs	r1, #2
 8005446:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4a5a      	ldr	r2, [pc, #360]	@ (80055bc <HAL_TIM_ConfigClockSource+0x1a4>)
 8005454:	4013      	ands	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a59      	ldr	r2, [pc, #356]	@ (80055c0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800545c:	4013      	ands	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2280      	movs	r2, #128	@ 0x80
 800546e:	0192      	lsls	r2, r2, #6
 8005470:	4293      	cmp	r3, r2
 8005472:	d040      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0xde>
 8005474:	2280      	movs	r2, #128	@ 0x80
 8005476:	0192      	lsls	r2, r2, #6
 8005478:	4293      	cmp	r3, r2
 800547a:	d900      	bls.n	800547e <HAL_TIM_ConfigClockSource+0x66>
 800547c:	e088      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
 800547e:	2280      	movs	r2, #128	@ 0x80
 8005480:	0152      	lsls	r2, r2, #5
 8005482:	4293      	cmp	r3, r2
 8005484:	d100      	bne.n	8005488 <HAL_TIM_ConfigClockSource+0x70>
 8005486:	e088      	b.n	800559a <HAL_TIM_ConfigClockSource+0x182>
 8005488:	2280      	movs	r2, #128	@ 0x80
 800548a:	0152      	lsls	r2, r2, #5
 800548c:	4293      	cmp	r3, r2
 800548e:	d900      	bls.n	8005492 <HAL_TIM_ConfigClockSource+0x7a>
 8005490:	e07e      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
 8005492:	2b70      	cmp	r3, #112	@ 0x70
 8005494:	d018      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0xb0>
 8005496:	d900      	bls.n	800549a <HAL_TIM_ConfigClockSource+0x82>
 8005498:	e07a      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
 800549a:	2b60      	cmp	r3, #96	@ 0x60
 800549c:	d04f      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x126>
 800549e:	d900      	bls.n	80054a2 <HAL_TIM_ConfigClockSource+0x8a>
 80054a0:	e076      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
 80054a2:	2b50      	cmp	r3, #80	@ 0x50
 80054a4:	d03b      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x106>
 80054a6:	d900      	bls.n	80054aa <HAL_TIM_ConfigClockSource+0x92>
 80054a8:	e072      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
 80054aa:	2b40      	cmp	r3, #64	@ 0x40
 80054ac:	d057      	beq.n	800555e <HAL_TIM_ConfigClockSource+0x146>
 80054ae:	d900      	bls.n	80054b2 <HAL_TIM_ConfigClockSource+0x9a>
 80054b0:	e06e      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
 80054b2:	2b30      	cmp	r3, #48	@ 0x30
 80054b4:	d063      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x166>
 80054b6:	d86b      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
 80054b8:	2b20      	cmp	r3, #32
 80054ba:	d060      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x166>
 80054bc:	d868      	bhi.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d05d      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x166>
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d05b      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x166>
 80054c6:	e063      	b.n	8005590 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054d8:	f000 fc58 	bl	8005d8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2277      	movs	r2, #119	@ 0x77
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]
      break;
 80054f4:	e052      	b.n	800559c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005506:	f000 fc41 	bl	8005d8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2180      	movs	r1, #128	@ 0x80
 8005516:	01c9      	lsls	r1, r1, #7
 8005518:	430a      	orrs	r2, r1
 800551a:	609a      	str	r2, [r3, #8]
      break;
 800551c:	e03e      	b.n	800559c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	001a      	movs	r2, r3
 800552c:	f000 fbb2 	bl	8005c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2150      	movs	r1, #80	@ 0x50
 8005536:	0018      	movs	r0, r3
 8005538:	f000 fc0c 	bl	8005d54 <TIM_ITRx_SetConfig>
      break;
 800553c:	e02e      	b.n	800559c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800554a:	001a      	movs	r2, r3
 800554c:	f000 fbd0 	bl	8005cf0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2160      	movs	r1, #96	@ 0x60
 8005556:	0018      	movs	r0, r3
 8005558:	f000 fbfc 	bl	8005d54 <TIM_ITRx_SetConfig>
      break;
 800555c:	e01e      	b.n	800559c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556a:	001a      	movs	r2, r3
 800556c:	f000 fb92 	bl	8005c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2140      	movs	r1, #64	@ 0x40
 8005576:	0018      	movs	r0, r3
 8005578:	f000 fbec 	bl	8005d54 <TIM_ITRx_SetConfig>
      break;
 800557c:	e00e      	b.n	800559c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	0019      	movs	r1, r3
 8005588:	0010      	movs	r0, r2
 800558a:	f000 fbe3 	bl	8005d54 <TIM_ITRx_SetConfig>
      break;
 800558e:	e005      	b.n	800559c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005590:	230f      	movs	r3, #15
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]
      break;
 8005598:	e000      	b.n	800559c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800559a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	223d      	movs	r2, #61	@ 0x3d
 80055a0:	2101      	movs	r1, #1
 80055a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	223c      	movs	r2, #60	@ 0x3c
 80055a8:	2100      	movs	r1, #0
 80055aa:	5499      	strb	r1, [r3, r2]

  return status;
 80055ac:	230f      	movs	r3, #15
 80055ae:	18fb      	adds	r3, r7, r3
 80055b0:	781b      	ldrb	r3, [r3, #0]
}
 80055b2:	0018      	movs	r0, r3
 80055b4:	46bd      	mov	sp, r7
 80055b6:	b004      	add	sp, #16
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	ffceff88 	.word	0xffceff88
 80055c0:	ffff00ff 	.word	0xffff00ff

080055c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055cc:	46c0      	nop			@ (mov r8, r8)
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b002      	add	sp, #8
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055dc:	46c0      	nop			@ (mov r8, r8)
 80055de:	46bd      	mov	sp, r7
 80055e0:	b002      	add	sp, #8
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055ec:	46c0      	nop			@ (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b002      	add	sp, #8
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055fc:	46c0      	nop			@ (mov r8, r8)
 80055fe:	46bd      	mov	sp, r7
 8005600:	b002      	add	sp, #8
 8005602:	bd80      	pop	{r7, pc}

08005604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a36      	ldr	r2, [pc, #216]	@ (80056f0 <TIM_Base_SetConfig+0xec>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d003      	beq.n	8005624 <TIM_Base_SetConfig+0x20>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a35      	ldr	r2, [pc, #212]	@ (80056f4 <TIM_Base_SetConfig+0xf0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d108      	bne.n	8005636 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2270      	movs	r2, #112	@ 0x70
 8005628:	4393      	bics	r3, r2
 800562a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2d      	ldr	r2, [pc, #180]	@ (80056f0 <TIM_Base_SetConfig+0xec>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <TIM_Base_SetConfig+0x62>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2c      	ldr	r2, [pc, #176]	@ (80056f4 <TIM_Base_SetConfig+0xf0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <TIM_Base_SetConfig+0x62>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2b      	ldr	r2, [pc, #172]	@ (80056f8 <TIM_Base_SetConfig+0xf4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00b      	beq.n	8005666 <TIM_Base_SetConfig+0x62>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <TIM_Base_SetConfig+0xf8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d007      	beq.n	8005666 <TIM_Base_SetConfig+0x62>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a29      	ldr	r2, [pc, #164]	@ (8005700 <TIM_Base_SetConfig+0xfc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d003      	beq.n	8005666 <TIM_Base_SetConfig+0x62>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a28      	ldr	r2, [pc, #160]	@ (8005704 <TIM_Base_SetConfig+0x100>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d108      	bne.n	8005678 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	4a27      	ldr	r2, [pc, #156]	@ (8005708 <TIM_Base_SetConfig+0x104>)
 800566a:	4013      	ands	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2280      	movs	r2, #128	@ 0x80
 800567c:	4393      	bics	r3, r2
 800567e:	001a      	movs	r2, r3
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a13      	ldr	r2, [pc, #76]	@ (80056f0 <TIM_Base_SetConfig+0xec>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00b      	beq.n	80056be <TIM_Base_SetConfig+0xba>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <TIM_Base_SetConfig+0xf8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d007      	beq.n	80056be <TIM_Base_SetConfig+0xba>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a13      	ldr	r2, [pc, #76]	@ (8005700 <TIM_Base_SetConfig+0xfc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d003      	beq.n	80056be <TIM_Base_SetConfig+0xba>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a12      	ldr	r2, [pc, #72]	@ (8005704 <TIM_Base_SetConfig+0x100>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d103      	bne.n	80056c6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2201      	movs	r2, #1
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d106      	bne.n	80056e6 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2201      	movs	r2, #1
 80056de:	4393      	bics	r3, r2
 80056e0:	001a      	movs	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	611a      	str	r2, [r3, #16]
  }
}
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	46bd      	mov	sp, r7
 80056ea:	b004      	add	sp, #16
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	46c0      	nop			@ (mov r8, r8)
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40002000 	.word	0x40002000
 80056fc:	40014000 	.word	0x40014000
 8005700:	40014400 	.word	0x40014400
 8005704:	40014800 	.word	0x40014800
 8005708:	fffffcff 	.word	0xfffffcff

0800570c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	2201      	movs	r2, #1
 8005722:	4393      	bics	r3, r2
 8005724:	001a      	movs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a32      	ldr	r2, [pc, #200]	@ (8005804 <TIM_OC1_SetConfig+0xf8>)
 800573a:	4013      	ands	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2203      	movs	r2, #3
 8005742:	4393      	bics	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4313      	orrs	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2202      	movs	r2, #2
 8005754:	4393      	bics	r3, r2
 8005756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a28      	ldr	r2, [pc, #160]	@ (8005808 <TIM_OC1_SetConfig+0xfc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d00b      	beq.n	8005782 <TIM_OC1_SetConfig+0x76>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a27      	ldr	r2, [pc, #156]	@ (800580c <TIM_OC1_SetConfig+0x100>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d007      	beq.n	8005782 <TIM_OC1_SetConfig+0x76>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a26      	ldr	r2, [pc, #152]	@ (8005810 <TIM_OC1_SetConfig+0x104>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_OC1_SetConfig+0x76>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a25      	ldr	r2, [pc, #148]	@ (8005814 <TIM_OC1_SetConfig+0x108>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d10c      	bne.n	800579c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2208      	movs	r2, #8
 8005786:	4393      	bics	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2204      	movs	r2, #4
 8005798:	4393      	bics	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a1a      	ldr	r2, [pc, #104]	@ (8005808 <TIM_OC1_SetConfig+0xfc>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_OC1_SetConfig+0xb0>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a19      	ldr	r2, [pc, #100]	@ (800580c <TIM_OC1_SetConfig+0x100>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_OC1_SetConfig+0xb0>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a18      	ldr	r2, [pc, #96]	@ (8005810 <TIM_OC1_SetConfig+0x104>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC1_SetConfig+0xb0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a17      	ldr	r2, [pc, #92]	@ (8005814 <TIM_OC1_SetConfig+0x108>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d111      	bne.n	80057e0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4a16      	ldr	r2, [pc, #88]	@ (8005818 <TIM_OC1_SetConfig+0x10c>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4a15      	ldr	r2, [pc, #84]	@ (800581c <TIM_OC1_SetConfig+0x110>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	46c0      	nop			@ (mov r8, r8)
 80057fc:	46bd      	mov	sp, r7
 80057fe:	b006      	add	sp, #24
 8005800:	bd80      	pop	{r7, pc}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	fffeff8f 	.word	0xfffeff8f
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40014000 	.word	0x40014000
 8005810:	40014400 	.word	0x40014400
 8005814:	40014800 	.word	0x40014800
 8005818:	fffffeff 	.word	0xfffffeff
 800581c:	fffffdff 	.word	0xfffffdff

08005820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	2210      	movs	r2, #16
 8005836:	4393      	bics	r3, r2
 8005838:	001a      	movs	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a2e      	ldr	r2, [pc, #184]	@ (8005908 <TIM_OC2_SetConfig+0xe8>)
 800584e:	4013      	ands	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4a2d      	ldr	r2, [pc, #180]	@ (800590c <TIM_OC2_SetConfig+0xec>)
 8005856:	4013      	ands	r3, r2
 8005858:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2220      	movs	r2, #32
 800586a:	4393      	bics	r3, r2
 800586c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a24      	ldr	r2, [pc, #144]	@ (8005910 <TIM_OC2_SetConfig+0xf0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10d      	bne.n	800589e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2280      	movs	r2, #128	@ 0x80
 8005886:	4393      	bics	r3, r2
 8005888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	2240      	movs	r2, #64	@ 0x40
 800589a:	4393      	bics	r3, r2
 800589c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005910 <TIM_OC2_SetConfig+0xf0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00b      	beq.n	80058be <TIM_OC2_SetConfig+0x9e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005914 <TIM_OC2_SetConfig+0xf4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d007      	beq.n	80058be <TIM_OC2_SetConfig+0x9e>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a19      	ldr	r2, [pc, #100]	@ (8005918 <TIM_OC2_SetConfig+0xf8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_OC2_SetConfig+0x9e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a18      	ldr	r2, [pc, #96]	@ (800591c <TIM_OC2_SetConfig+0xfc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d113      	bne.n	80058e6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4a17      	ldr	r2, [pc, #92]	@ (8005920 <TIM_OC2_SetConfig+0x100>)
 80058c2:	4013      	ands	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4a16      	ldr	r2, [pc, #88]	@ (8005924 <TIM_OC2_SetConfig+0x104>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	46c0      	nop			@ (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	b006      	add	sp, #24
 8005906:	bd80      	pop	{r7, pc}
 8005908:	feff8fff 	.word	0xfeff8fff
 800590c:	fffffcff 	.word	0xfffffcff
 8005910:	40012c00 	.word	0x40012c00
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800
 8005920:	fffffbff 	.word	0xfffffbff
 8005924:	fffff7ff 	.word	0xfffff7ff

08005928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	4a33      	ldr	r2, [pc, #204]	@ (8005a0c <TIM_OC3_SetConfig+0xe4>)
 800593e:	401a      	ands	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4a2f      	ldr	r2, [pc, #188]	@ (8005a10 <TIM_OC3_SetConfig+0xe8>)
 8005954:	4013      	ands	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2203      	movs	r2, #3
 800595c:	4393      	bics	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	4a29      	ldr	r2, [pc, #164]	@ (8005a14 <TIM_OC3_SetConfig+0xec>)
 800596e:	4013      	ands	r3, r2
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a25      	ldr	r2, [pc, #148]	@ (8005a18 <TIM_OC3_SetConfig+0xf0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4a24      	ldr	r2, [pc, #144]	@ (8005a1c <TIM_OC3_SetConfig+0xf4>)
 800598a:	4013      	ands	r3, r2
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4a20      	ldr	r2, [pc, #128]	@ (8005a20 <TIM_OC3_SetConfig+0xf8>)
 800599e:	4013      	ands	r3, r2
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a18 <TIM_OC3_SetConfig+0xf0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_OC3_SetConfig+0x9a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005a24 <TIM_OC3_SetConfig+0xfc>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_OC3_SetConfig+0x9a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <TIM_OC3_SetConfig+0x100>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_OC3_SetConfig+0x9a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a2c <TIM_OC3_SetConfig+0x104>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d113      	bne.n	80059ea <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a30 <TIM_OC3_SetConfig+0x108>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4a19      	ldr	r2, [pc, #100]	@ (8005a34 <TIM_OC3_SetConfig+0x10c>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	621a      	str	r2, [r3, #32]
}
 8005a04:	46c0      	nop			@ (mov r8, r8)
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b006      	add	sp, #24
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	fffffeff 	.word	0xfffffeff
 8005a10:	fffeff8f 	.word	0xfffeff8f
 8005a14:	fffffdff 	.word	0xfffffdff
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	fffff7ff 	.word	0xfffff7ff
 8005a20:	fffffbff 	.word	0xfffffbff
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40014400 	.word	0x40014400
 8005a2c:	40014800 	.word	0x40014800
 8005a30:	ffffefff 	.word	0xffffefff
 8005a34:	ffffdfff 	.word	0xffffdfff

08005a38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ae8 <TIM_OC4_SetConfig+0xb0>)
 8005a4e:	401a      	ands	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4a22      	ldr	r2, [pc, #136]	@ (8005aec <TIM_OC4_SetConfig+0xb4>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a21      	ldr	r2, [pc, #132]	@ (8005af0 <TIM_OC4_SetConfig+0xb8>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8005af4 <TIM_OC4_SetConfig+0xbc>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	031b      	lsls	r3, r3, #12
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a19      	ldr	r2, [pc, #100]	@ (8005af8 <TIM_OC4_SetConfig+0xc0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00b      	beq.n	8005ab0 <TIM_OC4_SetConfig+0x78>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a18      	ldr	r2, [pc, #96]	@ (8005afc <TIM_OC4_SetConfig+0xc4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d007      	beq.n	8005ab0 <TIM_OC4_SetConfig+0x78>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a17      	ldr	r2, [pc, #92]	@ (8005b00 <TIM_OC4_SetConfig+0xc8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d003      	beq.n	8005ab0 <TIM_OC4_SetConfig+0x78>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a16      	ldr	r2, [pc, #88]	@ (8005b04 <TIM_OC4_SetConfig+0xcc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d109      	bne.n	8005ac4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	4a15      	ldr	r2, [pc, #84]	@ (8005b08 <TIM_OC4_SetConfig+0xd0>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	695b      	ldr	r3, [r3, #20]
 8005abc:	019b      	lsls	r3, r3, #6
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	621a      	str	r2, [r3, #32]
}
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b006      	add	sp, #24
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			@ (mov r8, r8)
 8005ae8:	ffffefff 	.word	0xffffefff
 8005aec:	feff8fff 	.word	0xfeff8fff
 8005af0:	fffffcff 	.word	0xfffffcff
 8005af4:	ffffdfff 	.word	0xffffdfff
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400
 8005b04:	40014800 	.word	0x40014800
 8005b08:	ffffbfff 	.word	0xffffbfff

08005b0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	4a23      	ldr	r2, [pc, #140]	@ (8005bb0 <TIM_OC5_SetConfig+0xa4>)
 8005b22:	401a      	ands	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <TIM_OC5_SetConfig+0xa8>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb8 <TIM_OC5_SetConfig+0xac>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a17      	ldr	r2, [pc, #92]	@ (8005bbc <TIM_OC5_SetConfig+0xb0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00b      	beq.n	8005b7a <TIM_OC5_SetConfig+0x6e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a16      	ldr	r2, [pc, #88]	@ (8005bc0 <TIM_OC5_SetConfig+0xb4>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <TIM_OC5_SetConfig+0x6e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <TIM_OC5_SetConfig+0xb8>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d003      	beq.n	8005b7a <TIM_OC5_SetConfig+0x6e>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <TIM_OC5_SetConfig+0xbc>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d109      	bne.n	8005b8e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb0 <TIM_OC5_SetConfig+0xa4>)
 8005b7e:	4013      	ands	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	46c0      	nop			@ (mov r8, r8)
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b006      	add	sp, #24
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	fffeffff 	.word	0xfffeffff
 8005bb4:	fffeff8f 	.word	0xfffeff8f
 8005bb8:	fffdffff 	.word	0xfffdffff
 8005bbc:	40012c00 	.word	0x40012c00
 8005bc0:	40014000 	.word	0x40014000
 8005bc4:	40014400 	.word	0x40014400
 8005bc8:	40014800 	.word	0x40014800

08005bcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	4a24      	ldr	r2, [pc, #144]	@ (8005c74 <TIM_OC6_SetConfig+0xa8>)
 8005be2:	401a      	ands	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4a20      	ldr	r2, [pc, #128]	@ (8005c78 <TIM_OC6_SetConfig+0xac>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005c7c <TIM_OC6_SetConfig+0xb0>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	051b      	lsls	r3, r3, #20
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a18      	ldr	r2, [pc, #96]	@ (8005c80 <TIM_OC6_SetConfig+0xb4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_OC6_SetConfig+0x70>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a17      	ldr	r2, [pc, #92]	@ (8005c84 <TIM_OC6_SetConfig+0xb8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC6_SetConfig+0x70>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a16      	ldr	r2, [pc, #88]	@ (8005c88 <TIM_OC6_SetConfig+0xbc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC6_SetConfig+0x70>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a15      	ldr	r2, [pc, #84]	@ (8005c8c <TIM_OC6_SetConfig+0xc0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d109      	bne.n	8005c50 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4a14      	ldr	r2, [pc, #80]	@ (8005c90 <TIM_OC6_SetConfig+0xc4>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	029b      	lsls	r3, r3, #10
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	46c0      	nop			@ (mov r8, r8)
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b006      	add	sp, #24
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	46c0      	nop			@ (mov r8, r8)
 8005c74:	ffefffff 	.word	0xffefffff
 8005c78:	feff8fff 	.word	0xfeff8fff
 8005c7c:	ffdfffff 	.word	0xffdfffff
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40014000 	.word	0x40014000
 8005c88:	40014400 	.word	0x40014400
 8005c8c:	40014800 	.word	0x40014800
 8005c90:	fffbffff 	.word	0xfffbffff

08005c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	2201      	movs	r2, #1
 8005cac:	4393      	bics	r3, r2
 8005cae:	001a      	movs	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	22f0      	movs	r2, #240	@ 0xf0
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	220a      	movs	r2, #10
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	46c0      	nop			@ (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b006      	add	sp, #24
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	2210      	movs	r2, #16
 8005d08:	4393      	bics	r3, r2
 8005d0a:	001a      	movs	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4a0d      	ldr	r2, [pc, #52]	@ (8005d50 <TIM_TI2_ConfigInputStage+0x60>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	031b      	lsls	r3, r3, #12
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	22a0      	movs	r2, #160	@ 0xa0
 8005d2c:	4393      	bics	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	46c0      	nop			@ (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b006      	add	sp, #24
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	46c0      	nop			@ (mov r8, r8)
 8005d50:	ffff0fff 	.word	0xffff0fff

08005d54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4a08      	ldr	r2, [pc, #32]	@ (8005d88 <TIM_ITRx_SetConfig+0x34>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	2207      	movs	r2, #7
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	609a      	str	r2, [r3, #8]
}
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	46bd      	mov	sp, r7
 8005d82:	b004      	add	sp, #16
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	ffcfff8f 	.word	0xffcfff8f

08005d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4a09      	ldr	r2, [pc, #36]	@ (8005dc8 <TIM_ETR_SetConfig+0x3c>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	021a      	lsls	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	609a      	str	r2, [r3, #8]
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b006      	add	sp, #24
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	ffff00ff 	.word	0xffff00ff

08005dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	223c      	movs	r2, #60	@ 0x3c
 8005dda:	5c9b      	ldrb	r3, [r3, r2]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e04f      	b.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	223c      	movs	r2, #60	@ 0x3c
 8005de8:	2101      	movs	r1, #1
 8005dea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	223d      	movs	r2, #61	@ 0x3d
 8005df0:	2102      	movs	r1, #2
 8005df2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a20      	ldr	r2, [pc, #128]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d108      	bne.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2270      	movs	r2, #112	@ 0x70
 8005e24:	4393      	bics	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a13      	ldr	r2, [pc, #76]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a12      	ldr	r2, [pc, #72]	@ (8005e94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a11      	ldr	r2, [pc, #68]	@ (8005e98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10c      	bne.n	8005e72 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2280      	movs	r2, #128	@ 0x80
 8005e5c:	4393      	bics	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	223d      	movs	r2, #61	@ 0x3d
 8005e76:	2101      	movs	r1, #1
 8005e78:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	223c      	movs	r2, #60	@ 0x3c
 8005e7e:	2100      	movs	r1, #0
 8005e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	0018      	movs	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	b004      	add	sp, #16
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	ff0fffff 	.word	0xff0fffff
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40014000 	.word	0x40014000

08005e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ea4:	46c0      	nop			@ (mov r8, r8)
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b002      	add	sp, #8
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eb4:	46c0      	nop			@ (mov r8, r8)
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	b002      	add	sp, #8
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b002      	add	sp, #8
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e046      	b.n	8005f6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2288      	movs	r2, #136	@ 0x88
 8005ee2:	589b      	ldr	r3, [r3, r2]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2284      	movs	r2, #132	@ 0x84
 8005eec:	2100      	movs	r1, #0
 8005eee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f7fb faf0 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2288      	movs	r2, #136	@ 0x88
 8005efc:	2124      	movs	r1, #36	@ 0x24
 8005efe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	438a      	bics	r2, r1
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d003      	beq.n	8005f20 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f000 fa74 	bl	8006408 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	0018      	movs	r0, r3
 8005f24:	f000 f8cc 	bl	80060c0 <UART_SetConfig>
 8005f28:	0003      	movs	r3, r0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e01c      	b.n	8005f6c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	490d      	ldr	r1, [pc, #52]	@ (8005f74 <HAL_UART_Init+0xa8>)
 8005f3e:	400a      	ands	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	212a      	movs	r1, #42	@ 0x2a
 8005f4e:	438a      	bics	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 fb03 	bl	8006570 <UART_CheckIdleState>
 8005f6a:	0003      	movs	r3, r0
}
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b002      	add	sp, #8
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	ffffb7ff 	.word	0xffffb7ff

08005f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	@ 0x28
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	603b      	str	r3, [r7, #0]
 8005f84:	1dbb      	adds	r3, r7, #6
 8005f86:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2288      	movs	r2, #136	@ 0x88
 8005f8c:	589b      	ldr	r3, [r3, r2]
 8005f8e:	2b20      	cmp	r3, #32
 8005f90:	d000      	beq.n	8005f94 <HAL_UART_Transmit+0x1c>
 8005f92:	e090      	b.n	80060b6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_UART_Transmit+0x2a>
 8005f9a:	1dbb      	adds	r3, r7, #6
 8005f9c:	881b      	ldrh	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e088      	b.n	80060b8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	2380      	movs	r3, #128	@ 0x80
 8005fac:	015b      	lsls	r3, r3, #5
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d109      	bne.n	8005fc6 <HAL_UART_Transmit+0x4e>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d105      	bne.n	8005fc6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d001      	beq.n	8005fc6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e078      	b.n	80060b8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2290      	movs	r2, #144	@ 0x90
 8005fca:	2100      	movs	r1, #0
 8005fcc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2288      	movs	r2, #136	@ 0x88
 8005fd2:	2121      	movs	r1, #33	@ 0x21
 8005fd4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fd6:	f7fb fb65 	bl	80016a4 <HAL_GetTick>
 8005fda:	0003      	movs	r3, r0
 8005fdc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1dba      	adds	r2, r7, #6
 8005fe2:	2154      	movs	r1, #84	@ 0x54
 8005fe4:	8812      	ldrh	r2, [r2, #0]
 8005fe6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	1dba      	adds	r2, r7, #6
 8005fec:	2156      	movs	r1, #86	@ 0x56
 8005fee:	8812      	ldrh	r2, [r2, #0]
 8005ff0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	2380      	movs	r3, #128	@ 0x80
 8005ff8:	015b      	lsls	r3, r3, #5
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d108      	bne.n	8006010 <HAL_UART_Transmit+0x98>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d104      	bne.n	8006010 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e003      	b.n	8006018 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006018:	e030      	b.n	800607c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	0013      	movs	r3, r2
 8006024:	2200      	movs	r2, #0
 8006026:	2180      	movs	r1, #128	@ 0x80
 8006028:	f000 fb4c 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 800602c:	1e03      	subs	r3, r0, #0
 800602e:	d005      	beq.n	800603c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2288      	movs	r2, #136	@ 0x88
 8006034:	2120      	movs	r1, #32
 8006036:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e03d      	b.n	80060b8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	001a      	movs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	05d2      	lsls	r2, r2, #23
 800604e:	0dd2      	lsrs	r2, r2, #23
 8006050:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	3302      	adds	r3, #2
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	e007      	b.n	800606a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	781a      	ldrb	r2, [r3, #0]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	3301      	adds	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2256      	movs	r2, #86	@ 0x56
 800606e:	5a9b      	ldrh	r3, [r3, r2]
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b299      	uxth	r1, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2256      	movs	r2, #86	@ 0x56
 800607a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2256      	movs	r2, #86	@ 0x56
 8006080:	5a9b      	ldrh	r3, [r3, r2]
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1c8      	bne.n	800601a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	0013      	movs	r3, r2
 8006092:	2200      	movs	r2, #0
 8006094:	2140      	movs	r1, #64	@ 0x40
 8006096:	f000 fb15 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 800609a:	1e03      	subs	r3, r0, #0
 800609c:	d005      	beq.n	80060aa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2288      	movs	r2, #136	@ 0x88
 80060a2:	2120      	movs	r1, #32
 80060a4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e006      	b.n	80060b8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2288      	movs	r2, #136	@ 0x88
 80060ae:	2120      	movs	r1, #32
 80060b0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e000      	b.n	80060b8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80060b6:	2302      	movs	r3, #2
  }
}
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b008      	add	sp, #32
 80060be:	bd80      	pop	{r7, pc}

080060c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060c8:	231a      	movs	r3, #26
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4abc      	ldr	r2, [pc, #752]	@ (80063e0 <UART_SetConfig+0x320>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	0019      	movs	r1, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4ab7      	ldr	r2, [pc, #732]	@ (80063e4 <UART_SetConfig+0x324>)
 8006106:	4013      	ands	r3, r2
 8006108:	0019      	movs	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	4313      	orrs	r3, r2
 8006124:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	4aae      	ldr	r2, [pc, #696]	@ (80063e8 <UART_SetConfig+0x328>)
 800612e:	4013      	ands	r3, r2
 8006130:	0019      	movs	r1, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	430a      	orrs	r2, r1
 800613a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006142:	220f      	movs	r2, #15
 8006144:	4393      	bics	r3, r2
 8006146:	0019      	movs	r1, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4aa4      	ldr	r2, [pc, #656]	@ (80063ec <UART_SetConfig+0x32c>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d127      	bne.n	80061ae <UART_SetConfig+0xee>
 800615e:	4ba4      	ldr	r3, [pc, #656]	@ (80063f0 <UART_SetConfig+0x330>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	2203      	movs	r2, #3
 8006164:	4013      	ands	r3, r2
 8006166:	2b03      	cmp	r3, #3
 8006168:	d017      	beq.n	800619a <UART_SetConfig+0xda>
 800616a:	d81b      	bhi.n	80061a4 <UART_SetConfig+0xe4>
 800616c:	2b02      	cmp	r3, #2
 800616e:	d00a      	beq.n	8006186 <UART_SetConfig+0xc6>
 8006170:	d818      	bhi.n	80061a4 <UART_SetConfig+0xe4>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <UART_SetConfig+0xbc>
 8006176:	2b01      	cmp	r3, #1
 8006178:	d00a      	beq.n	8006190 <UART_SetConfig+0xd0>
 800617a:	e013      	b.n	80061a4 <UART_SetConfig+0xe4>
 800617c:	231b      	movs	r3, #27
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	2200      	movs	r2, #0
 8006182:	701a      	strb	r2, [r3, #0]
 8006184:	e058      	b.n	8006238 <UART_SetConfig+0x178>
 8006186:	231b      	movs	r3, #27
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	2202      	movs	r2, #2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	e053      	b.n	8006238 <UART_SetConfig+0x178>
 8006190:	231b      	movs	r3, #27
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	2204      	movs	r2, #4
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	e04e      	b.n	8006238 <UART_SetConfig+0x178>
 800619a:	231b      	movs	r3, #27
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	2208      	movs	r2, #8
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e049      	b.n	8006238 <UART_SetConfig+0x178>
 80061a4:	231b      	movs	r3, #27
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	2210      	movs	r2, #16
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	e044      	b.n	8006238 <UART_SetConfig+0x178>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a90      	ldr	r2, [pc, #576]	@ (80063f4 <UART_SetConfig+0x334>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d127      	bne.n	8006208 <UART_SetConfig+0x148>
 80061b8:	4b8d      	ldr	r3, [pc, #564]	@ (80063f0 <UART_SetConfig+0x330>)
 80061ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061bc:	220c      	movs	r2, #12
 80061be:	4013      	ands	r3, r2
 80061c0:	2b0c      	cmp	r3, #12
 80061c2:	d017      	beq.n	80061f4 <UART_SetConfig+0x134>
 80061c4:	d81b      	bhi.n	80061fe <UART_SetConfig+0x13e>
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d00a      	beq.n	80061e0 <UART_SetConfig+0x120>
 80061ca:	d818      	bhi.n	80061fe <UART_SetConfig+0x13e>
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <UART_SetConfig+0x116>
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d00a      	beq.n	80061ea <UART_SetConfig+0x12a>
 80061d4:	e013      	b.n	80061fe <UART_SetConfig+0x13e>
 80061d6:	231b      	movs	r3, #27
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	e02b      	b.n	8006238 <UART_SetConfig+0x178>
 80061e0:	231b      	movs	r3, #27
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	2202      	movs	r2, #2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e026      	b.n	8006238 <UART_SetConfig+0x178>
 80061ea:	231b      	movs	r3, #27
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	2204      	movs	r2, #4
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	e021      	b.n	8006238 <UART_SetConfig+0x178>
 80061f4:	231b      	movs	r3, #27
 80061f6:	18fb      	adds	r3, r7, r3
 80061f8:	2208      	movs	r2, #8
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e01c      	b.n	8006238 <UART_SetConfig+0x178>
 80061fe:	231b      	movs	r3, #27
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	2210      	movs	r2, #16
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	e017      	b.n	8006238 <UART_SetConfig+0x178>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a7a      	ldr	r2, [pc, #488]	@ (80063f8 <UART_SetConfig+0x338>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d104      	bne.n	800621c <UART_SetConfig+0x15c>
 8006212:	231b      	movs	r3, #27
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	2200      	movs	r2, #0
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	e00d      	b.n	8006238 <UART_SetConfig+0x178>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a76      	ldr	r2, [pc, #472]	@ (80063fc <UART_SetConfig+0x33c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d104      	bne.n	8006230 <UART_SetConfig+0x170>
 8006226:	231b      	movs	r3, #27
 8006228:	18fb      	adds	r3, r7, r3
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	e003      	b.n	8006238 <UART_SetConfig+0x178>
 8006230:	231b      	movs	r3, #27
 8006232:	18fb      	adds	r3, r7, r3
 8006234:	2210      	movs	r2, #16
 8006236:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	69da      	ldr	r2, [r3, #28]
 800623c:	2380      	movs	r3, #128	@ 0x80
 800623e:	021b      	lsls	r3, r3, #8
 8006240:	429a      	cmp	r2, r3
 8006242:	d000      	beq.n	8006246 <UART_SetConfig+0x186>
 8006244:	e065      	b.n	8006312 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006246:	231b      	movs	r3, #27
 8006248:	18fb      	adds	r3, r7, r3
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	2b08      	cmp	r3, #8
 800624e:	d015      	beq.n	800627c <UART_SetConfig+0x1bc>
 8006250:	dc18      	bgt.n	8006284 <UART_SetConfig+0x1c4>
 8006252:	2b04      	cmp	r3, #4
 8006254:	d00d      	beq.n	8006272 <UART_SetConfig+0x1b2>
 8006256:	dc15      	bgt.n	8006284 <UART_SetConfig+0x1c4>
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <UART_SetConfig+0x1a2>
 800625c:	2b02      	cmp	r3, #2
 800625e:	d005      	beq.n	800626c <UART_SetConfig+0x1ac>
 8006260:	e010      	b.n	8006284 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006262:	f7fd fdd7 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8006266:	0003      	movs	r3, r0
 8006268:	617b      	str	r3, [r7, #20]
        break;
 800626a:	e012      	b.n	8006292 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800626c:	4b64      	ldr	r3, [pc, #400]	@ (8006400 <UART_SetConfig+0x340>)
 800626e:	617b      	str	r3, [r7, #20]
        break;
 8006270:	e00f      	b.n	8006292 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006272:	f7fd fd43 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8006276:	0003      	movs	r3, r0
 8006278:	617b      	str	r3, [r7, #20]
        break;
 800627a:	e00a      	b.n	8006292 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627c:	2380      	movs	r3, #128	@ 0x80
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	617b      	str	r3, [r7, #20]
        break;
 8006282:	e006      	b.n	8006292 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006288:	231a      	movs	r3, #26
 800628a:	18fb      	adds	r3, r7, r3
 800628c:	2201      	movs	r2, #1
 800628e:	701a      	strb	r2, [r3, #0]
        break;
 8006290:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d100      	bne.n	800629a <UART_SetConfig+0x1da>
 8006298:	e08d      	b.n	80063b6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800629e:	4b59      	ldr	r3, [pc, #356]	@ (8006404 <UART_SetConfig+0x344>)
 80062a0:	0052      	lsls	r2, r2, #1
 80062a2:	5ad3      	ldrh	r3, [r2, r3]
 80062a4:	0019      	movs	r1, r3
 80062a6:	6978      	ldr	r0, [r7, #20]
 80062a8:	f7f9 ff38 	bl	800011c <__udivsi3>
 80062ac:	0003      	movs	r3, r0
 80062ae:	005a      	lsls	r2, r3, #1
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	085b      	lsrs	r3, r3, #1
 80062b6:	18d2      	adds	r2, r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	0019      	movs	r1, r3
 80062be:	0010      	movs	r0, r2
 80062c0:	f7f9 ff2c 	bl	800011c <__udivsi3>
 80062c4:	0003      	movs	r3, r0
 80062c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b0f      	cmp	r3, #15
 80062cc:	d91c      	bls.n	8006308 <UART_SetConfig+0x248>
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	2380      	movs	r3, #128	@ 0x80
 80062d2:	025b      	lsls	r3, r3, #9
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d217      	bcs.n	8006308 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	b29a      	uxth	r2, r3
 80062dc:	200e      	movs	r0, #14
 80062de:	183b      	adds	r3, r7, r0
 80062e0:	210f      	movs	r1, #15
 80062e2:	438a      	bics	r2, r1
 80062e4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2207      	movs	r2, #7
 80062ee:	4013      	ands	r3, r2
 80062f0:	b299      	uxth	r1, r3
 80062f2:	183b      	adds	r3, r7, r0
 80062f4:	183a      	adds	r2, r7, r0
 80062f6:	8812      	ldrh	r2, [r2, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	183a      	adds	r2, r7, r0
 8006302:	8812      	ldrh	r2, [r2, #0]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	e056      	b.n	80063b6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006308:	231a      	movs	r3, #26
 800630a:	18fb      	adds	r3, r7, r3
 800630c:	2201      	movs	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e051      	b.n	80063b6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006312:	231b      	movs	r3, #27
 8006314:	18fb      	adds	r3, r7, r3
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d015      	beq.n	8006348 <UART_SetConfig+0x288>
 800631c:	dc18      	bgt.n	8006350 <UART_SetConfig+0x290>
 800631e:	2b04      	cmp	r3, #4
 8006320:	d00d      	beq.n	800633e <UART_SetConfig+0x27e>
 8006322:	dc15      	bgt.n	8006350 <UART_SetConfig+0x290>
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <UART_SetConfig+0x26e>
 8006328:	2b02      	cmp	r3, #2
 800632a:	d005      	beq.n	8006338 <UART_SetConfig+0x278>
 800632c:	e010      	b.n	8006350 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800632e:	f7fd fd71 	bl	8003e14 <HAL_RCC_GetPCLK1Freq>
 8006332:	0003      	movs	r3, r0
 8006334:	617b      	str	r3, [r7, #20]
        break;
 8006336:	e012      	b.n	800635e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006338:	4b31      	ldr	r3, [pc, #196]	@ (8006400 <UART_SetConfig+0x340>)
 800633a:	617b      	str	r3, [r7, #20]
        break;
 800633c:	e00f      	b.n	800635e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800633e:	f7fd fcdd 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8006342:	0003      	movs	r3, r0
 8006344:	617b      	str	r3, [r7, #20]
        break;
 8006346:	e00a      	b.n	800635e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006348:	2380      	movs	r3, #128	@ 0x80
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	617b      	str	r3, [r7, #20]
        break;
 800634e:	e006      	b.n	800635e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006354:	231a      	movs	r3, #26
 8006356:	18fb      	adds	r3, r7, r3
 8006358:	2201      	movs	r2, #1
 800635a:	701a      	strb	r2, [r3, #0]
        break;
 800635c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d028      	beq.n	80063b6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006368:	4b26      	ldr	r3, [pc, #152]	@ (8006404 <UART_SetConfig+0x344>)
 800636a:	0052      	lsls	r2, r2, #1
 800636c:	5ad3      	ldrh	r3, [r2, r3]
 800636e:	0019      	movs	r1, r3
 8006370:	6978      	ldr	r0, [r7, #20]
 8006372:	f7f9 fed3 	bl	800011c <__udivsi3>
 8006376:	0003      	movs	r3, r0
 8006378:	001a      	movs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	18d2      	adds	r2, r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	0019      	movs	r1, r3
 8006388:	0010      	movs	r0, r2
 800638a:	f7f9 fec7 	bl	800011c <__udivsi3>
 800638e:	0003      	movs	r3, r0
 8006390:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	2b0f      	cmp	r3, #15
 8006396:	d90a      	bls.n	80063ae <UART_SetConfig+0x2ee>
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	2380      	movs	r3, #128	@ 0x80
 800639c:	025b      	lsls	r3, r3, #9
 800639e:	429a      	cmp	r2, r3
 80063a0:	d205      	bcs.n	80063ae <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	60da      	str	r2, [r3, #12]
 80063ac:	e003      	b.n	80063b6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80063ae:	231a      	movs	r3, #26
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	226a      	movs	r2, #106	@ 0x6a
 80063ba:	2101      	movs	r1, #1
 80063bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2268      	movs	r2, #104	@ 0x68
 80063c2:	2101      	movs	r1, #1
 80063c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063d2:	231a      	movs	r3, #26
 80063d4:	18fb      	adds	r3, r7, r3
 80063d6:	781b      	ldrb	r3, [r3, #0]
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b008      	add	sp, #32
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	cfff69f3 	.word	0xcfff69f3
 80063e4:	ffffcfff 	.word	0xffffcfff
 80063e8:	11fff4ff 	.word	0x11fff4ff
 80063ec:	40013800 	.word	0x40013800
 80063f0:	40021000 	.word	0x40021000
 80063f4:	40004400 	.word	0x40004400
 80063f8:	40004800 	.word	0x40004800
 80063fc:	40004c00 	.word	0x40004c00
 8006400:	00f42400 	.word	0x00f42400
 8006404:	0800b864 	.word	0x0800b864

08006408 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	2208      	movs	r2, #8
 8006416:	4013      	ands	r3, r2
 8006418:	d00b      	beq.n	8006432 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	4a4a      	ldr	r2, [pc, #296]	@ (800654c <UART_AdvFeatureConfig+0x144>)
 8006422:	4013      	ands	r3, r2
 8006424:	0019      	movs	r1, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	430a      	orrs	r2, r1
 8006430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006436:	2201      	movs	r2, #1
 8006438:	4013      	ands	r3, r2
 800643a:	d00b      	beq.n	8006454 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	4a43      	ldr	r2, [pc, #268]	@ (8006550 <UART_AdvFeatureConfig+0x148>)
 8006444:	4013      	ands	r3, r2
 8006446:	0019      	movs	r1, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006458:	2202      	movs	r2, #2
 800645a:	4013      	ands	r3, r2
 800645c:	d00b      	beq.n	8006476 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a3b      	ldr	r2, [pc, #236]	@ (8006554 <UART_AdvFeatureConfig+0x14c>)
 8006466:	4013      	ands	r3, r2
 8006468:	0019      	movs	r1, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647a:	2204      	movs	r2, #4
 800647c:	4013      	ands	r3, r2
 800647e:	d00b      	beq.n	8006498 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4a34      	ldr	r2, [pc, #208]	@ (8006558 <UART_AdvFeatureConfig+0x150>)
 8006488:	4013      	ands	r3, r2
 800648a:	0019      	movs	r1, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800649c:	2210      	movs	r2, #16
 800649e:	4013      	ands	r3, r2
 80064a0:	d00b      	beq.n	80064ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	4a2c      	ldr	r2, [pc, #176]	@ (800655c <UART_AdvFeatureConfig+0x154>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	0019      	movs	r1, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064be:	2220      	movs	r2, #32
 80064c0:	4013      	ands	r3, r2
 80064c2:	d00b      	beq.n	80064dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	4a25      	ldr	r2, [pc, #148]	@ (8006560 <UART_AdvFeatureConfig+0x158>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	0019      	movs	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	2240      	movs	r2, #64	@ 0x40
 80064e2:	4013      	ands	r3, r2
 80064e4:	d01d      	beq.n	8006522 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006564 <UART_AdvFeatureConfig+0x15c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	0019      	movs	r1, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006502:	2380      	movs	r3, #128	@ 0x80
 8006504:	035b      	lsls	r3, r3, #13
 8006506:	429a      	cmp	r2, r3
 8006508:	d10b      	bne.n	8006522 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	4a15      	ldr	r2, [pc, #84]	@ (8006568 <UART_AdvFeatureConfig+0x160>)
 8006512:	4013      	ands	r3, r2
 8006514:	0019      	movs	r1, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006526:	2280      	movs	r2, #128	@ 0x80
 8006528:	4013      	ands	r3, r2
 800652a:	d00b      	beq.n	8006544 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4a0e      	ldr	r2, [pc, #56]	@ (800656c <UART_AdvFeatureConfig+0x164>)
 8006534:	4013      	ands	r3, r2
 8006536:	0019      	movs	r1, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }
}
 8006544:	46c0      	nop			@ (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b002      	add	sp, #8
 800654a:	bd80      	pop	{r7, pc}
 800654c:	ffff7fff 	.word	0xffff7fff
 8006550:	fffdffff 	.word	0xfffdffff
 8006554:	fffeffff 	.word	0xfffeffff
 8006558:	fffbffff 	.word	0xfffbffff
 800655c:	ffffefff 	.word	0xffffefff
 8006560:	ffffdfff 	.word	0xffffdfff
 8006564:	ffefffff 	.word	0xffefffff
 8006568:	ff9fffff 	.word	0xff9fffff
 800656c:	fff7ffff 	.word	0xfff7ffff

08006570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b092      	sub	sp, #72	@ 0x48
 8006574:	af02      	add	r7, sp, #8
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2290      	movs	r2, #144	@ 0x90
 800657c:	2100      	movs	r1, #0
 800657e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006580:	f7fb f890 	bl	80016a4 <HAL_GetTick>
 8006584:	0003      	movs	r3, r0
 8006586:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2208      	movs	r2, #8
 8006590:	4013      	ands	r3, r2
 8006592:	2b08      	cmp	r3, #8
 8006594:	d12d      	bne.n	80065f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006598:	2280      	movs	r2, #128	@ 0x80
 800659a:	0391      	lsls	r1, r2, #14
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4a47      	ldr	r2, [pc, #284]	@ (80066bc <UART_CheckIdleState+0x14c>)
 80065a0:	9200      	str	r2, [sp, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f000 f88e 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 80065a8:	1e03      	subs	r3, r0, #0
 80065aa:	d022      	beq.n	80065f2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ac:	f3ef 8310 	mrs	r3, PRIMASK
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80065b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065b6:	2301      	movs	r3, #1
 80065b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065bc:	f383 8810 	msr	PRIMASK, r3
}
 80065c0:	46c0      	nop			@ (mov r8, r8)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2180      	movs	r1, #128	@ 0x80
 80065ce:	438a      	bics	r2, r1
 80065d0:	601a      	str	r2, [r3, #0]
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d8:	f383 8810 	msr	PRIMASK, r3
}
 80065dc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2288      	movs	r2, #136	@ 0x88
 80065e2:	2120      	movs	r1, #32
 80065e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2284      	movs	r2, #132	@ 0x84
 80065ea:	2100      	movs	r1, #0
 80065ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e060      	b.n	80066b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2204      	movs	r2, #4
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d146      	bne.n	800668e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006602:	2280      	movs	r2, #128	@ 0x80
 8006604:	03d1      	lsls	r1, r2, #15
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4a2c      	ldr	r2, [pc, #176]	@ (80066bc <UART_CheckIdleState+0x14c>)
 800660a:	9200      	str	r2, [sp, #0]
 800660c:	2200      	movs	r2, #0
 800660e:	f000 f859 	bl	80066c4 <UART_WaitOnFlagUntilTimeout>
 8006612:	1e03      	subs	r3, r0, #0
 8006614:	d03b      	beq.n	800668e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006616:	f3ef 8310 	mrs	r3, PRIMASK
 800661a:	60fb      	str	r3, [r7, #12]
  return(result);
 800661c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800661e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006620:	2301      	movs	r3, #1
 8006622:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f383 8810 	msr	PRIMASK, r3
}
 800662a:	46c0      	nop			@ (mov r8, r8)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4922      	ldr	r1, [pc, #136]	@ (80066c0 <UART_CheckIdleState+0x150>)
 8006638:	400a      	ands	r2, r1
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f383 8810 	msr	PRIMASK, r3
}
 8006646:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006648:	f3ef 8310 	mrs	r3, PRIMASK
 800664c:	61bb      	str	r3, [r7, #24]
  return(result);
 800664e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006650:	633b      	str	r3, [r7, #48]	@ 0x30
 8006652:	2301      	movs	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f383 8810 	msr	PRIMASK, r3
}
 800665c:	46c0      	nop			@ (mov r8, r8)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2101      	movs	r1, #1
 800666a:	438a      	bics	r2, r1
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f383 8810 	msr	PRIMASK, r3
}
 8006678:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	228c      	movs	r2, #140	@ 0x8c
 800667e:	2120      	movs	r1, #32
 8006680:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2284      	movs	r2, #132	@ 0x84
 8006686:	2100      	movs	r1, #0
 8006688:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e012      	b.n	80066b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2288      	movs	r2, #136	@ 0x88
 8006692:	2120      	movs	r1, #32
 8006694:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	228c      	movs	r2, #140	@ 0x8c
 800669a:	2120      	movs	r1, #32
 800669c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2284      	movs	r2, #132	@ 0x84
 80066ae:	2100      	movs	r1, #0
 80066b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	0018      	movs	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b010      	add	sp, #64	@ 0x40
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	01ffffff 	.word	0x01ffffff
 80066c0:	fffffedf 	.word	0xfffffedf

080066c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	1dfb      	adds	r3, r7, #7
 80066d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d4:	e051      	b.n	800677a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	3301      	adds	r3, #1
 80066da:	d04e      	beq.n	800677a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066dc:	f7fa ffe2 	bl	80016a4 <HAL_GetTick>
 80066e0:	0002      	movs	r2, r0
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d302      	bcc.n	80066f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e051      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2204      	movs	r2, #4
 80066fe:	4013      	ands	r3, r2
 8006700:	d03b      	beq.n	800677a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	2b80      	cmp	r3, #128	@ 0x80
 8006706:	d038      	beq.n	800677a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2b40      	cmp	r3, #64	@ 0x40
 800670c:	d035      	beq.n	800677a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	2208      	movs	r2, #8
 8006716:	4013      	ands	r3, r2
 8006718:	2b08      	cmp	r3, #8
 800671a:	d111      	bne.n	8006740 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2208      	movs	r2, #8
 8006722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	0018      	movs	r0, r3
 8006728:	f000 f83c 	bl	80067a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2290      	movs	r2, #144	@ 0x90
 8006730:	2108      	movs	r1, #8
 8006732:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2284      	movs	r2, #132	@ 0x84
 8006738:	2100      	movs	r1, #0
 800673a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e02c      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69da      	ldr	r2, [r3, #28]
 8006746:	2380      	movs	r3, #128	@ 0x80
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	401a      	ands	r2, r3
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	429a      	cmp	r2, r3
 8006752:	d112      	bne.n	800677a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2280      	movs	r2, #128	@ 0x80
 800675a:	0112      	lsls	r2, r2, #4
 800675c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	0018      	movs	r0, r3
 8006762:	f000 f81f 	bl	80067a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2290      	movs	r2, #144	@ 0x90
 800676a:	2120      	movs	r1, #32
 800676c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2284      	movs	r2, #132	@ 0x84
 8006772:	2100      	movs	r1, #0
 8006774:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e00f      	b.n	800679a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	425a      	negs	r2, r3
 800678a:	4153      	adcs	r3, r2
 800678c:	b2db      	uxtb	r3, r3
 800678e:	001a      	movs	r2, r3
 8006790:	1dfb      	adds	r3, r7, #7
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	429a      	cmp	r2, r3
 8006796:	d09e      	beq.n	80066d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	0018      	movs	r0, r3
 800679c:	46bd      	mov	sp, r7
 800679e:	b004      	add	sp, #16
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08e      	sub	sp, #56	@ 0x38
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ac:	f3ef 8310 	mrs	r3, PRIMASK
 80067b0:	617b      	str	r3, [r7, #20]
  return(result);
 80067b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b6:	2301      	movs	r3, #1
 80067b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	f383 8810 	msr	PRIMASK, r3
}
 80067c0:	46c0      	nop			@ (mov r8, r8)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4926      	ldr	r1, [pc, #152]	@ (8006868 <UART_EndRxTransfer+0xc4>)
 80067ce:	400a      	ands	r2, r1
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	f383 8810 	msr	PRIMASK, r3
}
 80067dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067de:	f3ef 8310 	mrs	r3, PRIMASK
 80067e2:	623b      	str	r3, [r7, #32]
  return(result);
 80067e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e8:	2301      	movs	r3, #1
 80067ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	f383 8810 	msr	PRIMASK, r3
}
 80067f2:	46c0      	nop			@ (mov r8, r8)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	491b      	ldr	r1, [pc, #108]	@ (800686c <UART_EndRxTransfer+0xc8>)
 8006800:	400a      	ands	r2, r1
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	f383 8810 	msr	PRIMASK, r3
}
 800680e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006814:	2b01      	cmp	r3, #1
 8006816:	d118      	bne.n	800684a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006818:	f3ef 8310 	mrs	r3, PRIMASK
 800681c:	60bb      	str	r3, [r7, #8]
  return(result);
 800681e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006822:	2301      	movs	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f383 8810 	msr	PRIMASK, r3
}
 800682c:	46c0      	nop			@ (mov r8, r8)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2110      	movs	r1, #16
 800683a:	438a      	bics	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006840:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f383 8810 	msr	PRIMASK, r3
}
 8006848:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	228c      	movs	r2, #140	@ 0x8c
 800684e:	2120      	movs	r1, #32
 8006850:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800685e:	46c0      	nop			@ (mov r8, r8)
 8006860:	46bd      	mov	sp, r7
 8006862:	b00e      	add	sp, #56	@ 0x38
 8006864:	bd80      	pop	{r7, pc}
 8006866:	46c0      	nop			@ (mov r8, r8)
 8006868:	fffffedf 	.word	0xfffffedf
 800686c:	effffffe 	.word	0xeffffffe

08006870 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2284      	movs	r2, #132	@ 0x84
 800687c:	5c9b      	ldrb	r3, [r3, r2]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d101      	bne.n	8006886 <HAL_UARTEx_DisableFifoMode+0x16>
 8006882:	2302      	movs	r3, #2
 8006884:	e027      	b.n	80068d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2284      	movs	r2, #132	@ 0x84
 800688a:	2101      	movs	r1, #1
 800688c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2288      	movs	r2, #136	@ 0x88
 8006892:	2124      	movs	r1, #36	@ 0x24
 8006894:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2101      	movs	r1, #1
 80068aa:	438a      	bics	r2, r1
 80068ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4a0b      	ldr	r2, [pc, #44]	@ (80068e0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2288      	movs	r2, #136	@ 0x88
 80068c8:	2120      	movs	r1, #32
 80068ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2284      	movs	r2, #132	@ 0x84
 80068d0:	2100      	movs	r1, #0
 80068d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	0018      	movs	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	b004      	add	sp, #16
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	46c0      	nop			@ (mov r8, r8)
 80068e0:	dfffffff 	.word	0xdfffffff

080068e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2284      	movs	r2, #132	@ 0x84
 80068f2:	5c9b      	ldrb	r3, [r3, r2]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e02e      	b.n	800695a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2284      	movs	r2, #132	@ 0x84
 8006900:	2101      	movs	r1, #1
 8006902:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2288      	movs	r2, #136	@ 0x88
 8006908:	2124      	movs	r1, #36	@ 0x24
 800690a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2101      	movs	r1, #1
 8006920:	438a      	bics	r2, r1
 8006922:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	08d9      	lsrs	r1, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	0018      	movs	r0, r3
 800693c:	f000 f854 	bl	80069e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2288      	movs	r2, #136	@ 0x88
 800694c:	2120      	movs	r1, #32
 800694e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2284      	movs	r2, #132	@ 0x84
 8006954:	2100      	movs	r1, #0
 8006956:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	0018      	movs	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	b004      	add	sp, #16
 8006960:	bd80      	pop	{r7, pc}
	...

08006964 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2284      	movs	r2, #132	@ 0x84
 8006972:	5c9b      	ldrb	r3, [r3, r2]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006978:	2302      	movs	r3, #2
 800697a:	e02f      	b.n	80069dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2284      	movs	r2, #132	@ 0x84
 8006980:	2101      	movs	r1, #1
 8006982:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2288      	movs	r2, #136	@ 0x88
 8006988:	2124      	movs	r1, #36	@ 0x24
 800698a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2101      	movs	r1, #1
 80069a0:	438a      	bics	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	4a0e      	ldr	r2, [pc, #56]	@ (80069e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	0019      	movs	r1, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	683a      	ldr	r2, [r7, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0018      	movs	r0, r3
 80069be:	f000 f813 	bl	80069e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2288      	movs	r2, #136	@ 0x88
 80069ce:	2120      	movs	r1, #32
 80069d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2284      	movs	r2, #132	@ 0x84
 80069d6:	2100      	movs	r1, #0
 80069d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	0018      	movs	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	b004      	add	sp, #16
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	f1ffffff 	.word	0xf1ffffff

080069e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d108      	bne.n	8006a0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	226a      	movs	r2, #106	@ 0x6a
 80069fc:	2101      	movs	r1, #1
 80069fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2268      	movs	r2, #104	@ 0x68
 8006a04:	2101      	movs	r1, #1
 8006a06:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a08:	e043      	b.n	8006a92 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a0a:	260f      	movs	r6, #15
 8006a0c:	19bb      	adds	r3, r7, r6
 8006a0e:	2208      	movs	r2, #8
 8006a10:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a12:	200e      	movs	r0, #14
 8006a14:	183b      	adds	r3, r7, r0
 8006a16:	2208      	movs	r2, #8
 8006a18:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	0e5b      	lsrs	r3, r3, #25
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	240d      	movs	r4, #13
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	2107      	movs	r1, #7
 8006a2a:	400a      	ands	r2, r1
 8006a2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	0f5b      	lsrs	r3, r3, #29
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	250c      	movs	r5, #12
 8006a3a:	197b      	adds	r3, r7, r5
 8006a3c:	2107      	movs	r1, #7
 8006a3e:	400a      	ands	r2, r1
 8006a40:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a42:	183b      	adds	r3, r7, r0
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	197a      	adds	r2, r7, r5
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	4914      	ldr	r1, [pc, #80]	@ (8006a9c <UARTEx_SetNbDataToProcess+0xb4>)
 8006a4c:	5c8a      	ldrb	r2, [r1, r2]
 8006a4e:	435a      	muls	r2, r3
 8006a50:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a52:	197b      	adds	r3, r7, r5
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	4a12      	ldr	r2, [pc, #72]	@ (8006aa0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	f7f9 fbe8 	bl	8000230 <__divsi3>
 8006a60:	0003      	movs	r3, r0
 8006a62:	b299      	uxth	r1, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	226a      	movs	r2, #106	@ 0x6a
 8006a68:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a6a:	19bb      	adds	r3, r7, r6
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	193a      	adds	r2, r7, r4
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	490a      	ldr	r1, [pc, #40]	@ (8006a9c <UARTEx_SetNbDataToProcess+0xb4>)
 8006a74:	5c8a      	ldrb	r2, [r1, r2]
 8006a76:	435a      	muls	r2, r3
 8006a78:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a7a:	193b      	adds	r3, r7, r4
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	4a08      	ldr	r2, [pc, #32]	@ (8006aa0 <UARTEx_SetNbDataToProcess+0xb8>)
 8006a80:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a82:	0019      	movs	r1, r3
 8006a84:	f7f9 fbd4 	bl	8000230 <__divsi3>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	b299      	uxth	r1, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2268      	movs	r2, #104	@ 0x68
 8006a90:	5299      	strh	r1, [r3, r2]
}
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	46bd      	mov	sp, r7
 8006a96:	b005      	add	sp, #20
 8006a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	0800b87c 	.word	0x0800b87c
 8006aa0:	0800b884 	.word	0x0800b884

08006aa4 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006aa8:	4a08      	ldr	r2, [pc, #32]	@ (8006acc <MX_FATFS_Init+0x28>)
 8006aaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ad0 <MX_FATFS_Init+0x2c>)
 8006aac:	0011      	movs	r1, r2
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f003 fe2e 	bl	800a710 <FATFS_LinkDriver>
 8006ab4:	1e03      	subs	r3, r0, #0
 8006ab6:	d002      	beq.n	8006abe <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
	{
		return APP_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	425b      	negs	r3, r3
 8006abc:	e003      	b.n	8006ac6 <MX_FATFS_Init+0x22>
	}
	else
	{
		Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 8006abe:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <MX_FATFS_Init+0x30>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
		return APP_OK;
 8006ac4:	2300      	movs	r3, #0
	}
  /* USER CODE END FATFS_Init */
}
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000b14 	.word	0x20000b14
 8006ad0:	200000cc 	.word	0x200000cc
 8006ad4:	20000b18 	.word	0x20000b18

08006ad8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 8006adc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006ade:	0018      	movs	r0, r3
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	0002      	movs	r2, r0
 8006aec:	1dfb      	adds	r3, r7, #7
 8006aee:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006af0:	1dfb      	adds	r3, r7, #7
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 fa1d 	bl	8006f34 <USER_SPI_initialize>
 8006afa:	0003      	movs	r3, r0
  /* USER CODE END INIT */
}
 8006afc:	0018      	movs	r0, r3
 8006afe:	46bd      	mov	sp, r7
 8006b00:	b002      	add	sp, #8
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	0002      	movs	r2, r0
 8006b0c:	1dfb      	adds	r3, r7, #7
 8006b0e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006b10:	1dfb      	adds	r3, r7, #7
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	0018      	movs	r0, r3
 8006b16:	f000 fb25 	bl	8007164 <USER_SPI_status>
 8006b1a:	0003      	movs	r3, r0
  /* USER CODE END STATUS */
}
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	b002      	add	sp, #8
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b24:	b5b0      	push	{r4, r5, r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	250f      	movs	r5, #15
 8006b32:	197b      	adds	r3, r7, r5
 8006b34:	1c02      	adds	r2, r0, #0
 8006b36:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006b38:	683c      	ldr	r4, [r7, #0]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	197b      	adds	r3, r7, r5
 8006b40:	7818      	ldrb	r0, [r3, #0]
 8006b42:	0023      	movs	r3, r4
 8006b44:	f000 fb24 	bl	8007190 <USER_SPI_read>
 8006b48:	0003      	movs	r3, r0
  /* USER CODE END READ */
}
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b004      	add	sp, #16
 8006b50:	bdb0      	pop	{r4, r5, r7, pc}

08006b52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b52:	b5b0      	push	{r4, r5, r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	250f      	movs	r5, #15
 8006b60:	197b      	adds	r3, r7, r5
 8006b62:	1c02      	adds	r2, r0, #0
 8006b64:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006b66:	683c      	ldr	r4, [r7, #0]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	197b      	adds	r3, r7, r5
 8006b6e:	7818      	ldrb	r0, [r3, #0]
 8006b70:	0023      	movs	r3, r4
 8006b72:	f000 fb79 	bl	8007268 <USER_SPI_write>
 8006b76:	0003      	movs	r3, r0
  /* USER CODE END WRITE */
}
 8006b78:	0018      	movs	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b004      	add	sp, #16
 8006b7e:	bdb0      	pop	{r4, r5, r7, pc}

08006b80 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	603a      	str	r2, [r7, #0]
 8006b88:	1dfb      	adds	r3, r7, #7
 8006b8a:	1c02      	adds	r2, r0, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	1dbb      	adds	r3, r7, #6
 8006b90:	1c0a      	adds	r2, r1, #0
 8006b92:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	1dbb      	adds	r3, r7, #6
 8006b98:	7819      	ldrb	r1, [r3, #0]
 8006b9a:	1dfb      	adds	r3, r7, #7
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f000 fbe2 	bl	8007368 <USER_SPI_ioctl>
 8006ba4:	0003      	movs	r3, r0
  /* USER CODE END IOCTL */
}
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b002      	add	sp, #8
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 8006bb8:	f7fa fd74 	bl	80016a4 <HAL_GetTick>
 8006bbc:	0002      	movs	r2, r0
 8006bbe:	4b04      	ldr	r3, [pc, #16]	@ (8006bd0 <SPI_Timer_On+0x20>)
 8006bc0:	601a      	str	r2, [r3, #0]
	spiTimerTickDelay = waitTicks;
 8006bc2:	4b04      	ldr	r3, [pc, #16]	@ (8006bd4 <SPI_Timer_On+0x24>)
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]
}
 8006bc8:	46c0      	nop			@ (mov r8, r8)
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	b002      	add	sp, #8
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	20000b1c 	.word	0x20000b1c
 8006bd4:	20000b20 	.word	0x20000b20

08006bd8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006bdc:	f7fa fd62 	bl	80016a4 <HAL_GetTick>
 8006be0:	0002      	movs	r2, r0
 8006be2:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <SPI_Timer_Status+0x24>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	1ad2      	subs	r2, r2, r3
 8006be8:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <SPI_Timer_Status+0x28>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	419b      	sbcs	r3, r3
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	b2db      	uxtb	r3, r3
}
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	46c0      	nop			@ (mov r8, r8)
 8006bfc:	20000b1c 	.word	0x20000b1c
 8006c00:	20000b20 	.word	0x20000b20

08006c04 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
		BYTE dat	/* Data to send */
)
{
 8006c04:	b590      	push	{r4, r7, lr}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	0002      	movs	r2, r0
 8006c0c:	1dfb      	adds	r3, r7, #7
 8006c0e:	701a      	strb	r2, [r3, #0]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006c10:	240f      	movs	r4, #15
 8006c12:	193a      	adds	r2, r7, r4
 8006c14:	1df9      	adds	r1, r7, #7
 8006c16:	4806      	ldr	r0, [pc, #24]	@ (8006c30 <xchg_spi+0x2c>)
 8006c18:	2332      	movs	r3, #50	@ 0x32
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	f7fd fc85 	bl	800452c <HAL_SPI_TransmitReceive>
	return rxDat;
 8006c22:	193b      	adds	r3, r7, r4
 8006c24:	781b      	ldrb	r3, [r3, #0]
}
 8006c26:	0018      	movs	r0, r3
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b005      	add	sp, #20
 8006c2c:	bd90      	pop	{r4, r7, pc}
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	20000930 	.word	0x20000930

08006c34 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
		BYTE *buff,		/* Pointer to data buffer */
		UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006c34:	b590      	push	{r4, r7, lr}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	e00a      	b.n	8006c5a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	18d4      	adds	r4, r2, r3
 8006c4a:	20ff      	movs	r0, #255	@ 0xff
 8006c4c:	f7ff ffda 	bl	8006c04 <xchg_spi>
 8006c50:	0003      	movs	r3, r0
 8006c52:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d3f0      	bcc.n	8006c44 <rcvr_spi_multi+0x10>
	}
}
 8006c62:	46c0      	nop			@ (mov r8, r8)
 8006c64:	46c0      	nop			@ (mov r8, r8)
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b005      	add	sp, #20
 8006c6a:	bd90      	pop	{r4, r7, pc}

08006c6c <xmit_spi_multi>:
static
void xmit_spi_multi (
		const BYTE *buff,	/* Pointer to the data */
		UINT btx			/* Number of bytes to send (even number) */
)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	425b      	negs	r3, r3
 8006c7e:	6879      	ldr	r1, [r7, #4]
 8006c80:	4803      	ldr	r0, [pc, #12]	@ (8006c90 <xmit_spi_multi+0x24>)
 8006c82:	f7fd faf3 	bl	800426c <HAL_SPI_Transmit>
}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	b002      	add	sp, #8
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	46c0      	nop			@ (mov r8, r8)
 8006c90:	20000930 	.word	0x20000930

08006c94 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
		UINT wt			/* Timeout [ms] */
)
{
 8006c94:	b5b0      	push	{r4, r5, r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006c9c:	f7fa fd02 	bl	80016a4 <HAL_GetTick>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	617b      	str	r3, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006ca8:	250f      	movs	r5, #15
 8006caa:	197c      	adds	r4, r7, r5
 8006cac:	20ff      	movs	r0, #255	@ 0xff
 8006cae:	f7ff ffa9 	bl	8006c04 <xchg_spi>
 8006cb2:	0003      	movs	r3, r0
 8006cb4:	7023      	strb	r3, [r4, #0]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006cb6:	197b      	adds	r3, r7, r5
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2bff      	cmp	r3, #255	@ 0xff
 8006cbc:	d007      	beq.n	8006cce <wait_ready+0x3a>
 8006cbe:	f7fa fcf1 	bl	80016a4 <HAL_GetTick>
 8006cc2:	0002      	movs	r2, r0
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d8ec      	bhi.n	8006ca8 <wait_ready+0x14>

	return (d == 0xFF) ? 1 : 0;
 8006cce:	230f      	movs	r3, #15
 8006cd0:	18fb      	adds	r3, r7, r3
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	3bff      	subs	r3, #255	@ 0xff
 8006cd6:	425a      	negs	r2, r3
 8006cd8:	4153      	adcs	r3, r2
 8006cda:	b2db      	uxtb	r3, r3
}
 8006cdc:	0018      	movs	r0, r3
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	b006      	add	sp, #24
 8006ce2:	bdb0      	pop	{r4, r5, r7, pc}

08006ce4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006ce8:	2380      	movs	r3, #128	@ 0x80
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	4805      	ldr	r0, [pc, #20]	@ (8006d04 <despiselect+0x20>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	0019      	movs	r1, r3
 8006cf2:	f7fb fbe7 	bl	80024c4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006cf6:	20ff      	movs	r0, #255	@ 0xff
 8006cf8:	f7ff ff84 	bl	8006c04 <xchg_spi>

}
 8006cfc:	46c0      	nop			@ (mov r8, r8)
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	50000400 	.word	0x50000400

08006d08 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006d0c:	2380      	movs	r3, #128	@ 0x80
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	480b      	ldr	r0, [pc, #44]	@ (8006d40 <spiselect+0x38>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	0019      	movs	r1, r3
 8006d16:	f7fb fbd5 	bl	80024c4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006d1a:	20ff      	movs	r0, #255	@ 0xff
 8006d1c:	f7ff ff72 	bl	8006c04 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006d20:	23fa      	movs	r3, #250	@ 0xfa
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7ff ffb5 	bl	8006c94 <wait_ready>
 8006d2a:	1e03      	subs	r3, r0, #0
 8006d2c:	d001      	beq.n	8006d32 <spiselect+0x2a>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e002      	b.n	8006d38 <spiselect+0x30>

	despiselect();
 8006d32:	f7ff ffd7 	bl	8006ce4 <despiselect>
	return 0;	/* Timeout */
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	0018      	movs	r0, r3
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	50000400 	.word	0x50000400

08006d44 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
		BYTE *buff,			/* Data buffer */
		UINT btr			/* Data block length (byte) */
)
{
 8006d44:	b5b0      	push	{r4, r5, r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006d4e:	20c8      	movs	r0, #200	@ 0xc8
 8006d50:	f7ff ff2e 	bl	8006bb0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006d54:	250f      	movs	r5, #15
 8006d56:	197c      	adds	r4, r7, r5
 8006d58:	20ff      	movs	r0, #255	@ 0xff
 8006d5a:	f7ff ff53 	bl	8006c04 <xchg_spi>
 8006d5e:	0003      	movs	r3, r0
 8006d60:	7023      	strb	r3, [r4, #0]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006d62:	197b      	adds	r3, r7, r5
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2bff      	cmp	r3, #255	@ 0xff
 8006d68:	d103      	bne.n	8006d72 <rcvr_datablock+0x2e>
 8006d6a:	f7ff ff35 	bl	8006bd8 <SPI_Timer_Status>
 8006d6e:	1e03      	subs	r3, r0, #0
 8006d70:	d1f0      	bne.n	8006d54 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006d72:	230f      	movs	r3, #15
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2bfe      	cmp	r3, #254	@ 0xfe
 8006d7a:	d001      	beq.n	8006d80 <rcvr_datablock+0x3c>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e00c      	b.n	8006d9a <rcvr_datablock+0x56>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	0011      	movs	r1, r2
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7ff ff54 	bl	8006c34 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006d8c:	20ff      	movs	r0, #255	@ 0xff
 8006d8e:	f7ff ff39 	bl	8006c04 <xchg_spi>
 8006d92:	20ff      	movs	r0, #255	@ 0xff
 8006d94:	f7ff ff36 	bl	8006c04 <xchg_spi>

	return 1;						/* Function succeeded */
 8006d98:	2301      	movs	r3, #1
}
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b004      	add	sp, #16
 8006da0:	bdb0      	pop	{r4, r5, r7, pc}

08006da2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006da2:	b5b0      	push	{r4, r5, r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	000a      	movs	r2, r1
 8006dac:	1cfb      	adds	r3, r7, #3
 8006dae:	701a      	strb	r2, [r3, #0]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006db0:	23fa      	movs	r3, #250	@ 0xfa
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	0018      	movs	r0, r3
 8006db6:	f7ff ff6d 	bl	8006c94 <wait_ready>
 8006dba:	1e03      	subs	r3, r0, #0
 8006dbc:	d101      	bne.n	8006dc2 <xmit_datablock+0x20>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	e025      	b.n	8006e0e <xmit_datablock+0x6c>

	xchg_spi(token);					/* Send token */
 8006dc2:	1cfb      	adds	r3, r7, #3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f7ff ff1c 	bl	8006c04 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006dcc:	1cfb      	adds	r3, r7, #3
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2bfd      	cmp	r3, #253	@ 0xfd
 8006dd2:	d01b      	beq.n	8006e0c <xmit_datablock+0x6a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006dd4:	2380      	movs	r3, #128	@ 0x80
 8006dd6:	009a      	lsls	r2, r3, #2
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	0011      	movs	r1, r2
 8006ddc:	0018      	movs	r0, r3
 8006dde:	f7ff ff45 	bl	8006c6c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006de2:	20ff      	movs	r0, #255	@ 0xff
 8006de4:	f7ff ff0e 	bl	8006c04 <xchg_spi>
 8006de8:	20ff      	movs	r0, #255	@ 0xff
 8006dea:	f7ff ff0b 	bl	8006c04 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006dee:	250f      	movs	r5, #15
 8006df0:	197c      	adds	r4, r7, r5
 8006df2:	20ff      	movs	r0, #255	@ 0xff
 8006df4:	f7ff ff06 	bl	8006c04 <xchg_spi>
 8006df8:	0003      	movs	r3, r0
 8006dfa:	7023      	strb	r3, [r4, #0]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006dfc:	197b      	adds	r3, r7, r5
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	221f      	movs	r2, #31
 8006e02:	4013      	ands	r3, r2
 8006e04:	2b05      	cmp	r3, #5
 8006e06:	d001      	beq.n	8006e0c <xmit_datablock+0x6a>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e000      	b.n	8006e0e <xmit_datablock+0x6c>
	}
	return 1;
 8006e0c:	2301      	movs	r3, #1
}
 8006e0e:	0018      	movs	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	b004      	add	sp, #16
 8006e14:	bdb0      	pop	{r4, r5, r7, pc}

08006e16 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006e16:	b5b0      	push	{r4, r5, r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	0002      	movs	r2, r0
 8006e1e:	6039      	str	r1, [r7, #0]
 8006e20:	1dfb      	adds	r3, r7, #7
 8006e22:	701a      	strb	r2, [r3, #0]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006e24:	1dfb      	adds	r3, r7, #7
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	b25b      	sxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	da15      	bge.n	8006e5a <send_cmd+0x44>
		cmd &= 0x7F;
 8006e2e:	1dfb      	adds	r3, r7, #7
 8006e30:	1dfa      	adds	r2, r7, #7
 8006e32:	7812      	ldrb	r2, [r2, #0]
 8006e34:	217f      	movs	r1, #127	@ 0x7f
 8006e36:	400a      	ands	r2, r1
 8006e38:	701a      	strb	r2, [r3, #0]
		res = send_cmd(CMD55, 0);
 8006e3a:	250e      	movs	r5, #14
 8006e3c:	197c      	adds	r4, r7, r5
 8006e3e:	2100      	movs	r1, #0
 8006e40:	2037      	movs	r0, #55	@ 0x37
 8006e42:	f7ff ffe8 	bl	8006e16 <send_cmd>
 8006e46:	0003      	movs	r3, r0
 8006e48:	7023      	strb	r3, [r4, #0]
		if (res > 1) return res;
 8006e4a:	002a      	movs	r2, r5
 8006e4c:	18bb      	adds	r3, r7, r2
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d902      	bls.n	8006e5a <send_cmd+0x44>
 8006e54:	18bb      	adds	r3, r7, r2
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	e067      	b.n	8006f2a <send_cmd+0x114>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006e5a:	1dfb      	adds	r3, r7, #7
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b0c      	cmp	r3, #12
 8006e60:	d007      	beq.n	8006e72 <send_cmd+0x5c>
		despiselect();
 8006e62:	f7ff ff3f 	bl	8006ce4 <despiselect>
		if (!spiselect()) return 0xFF;
 8006e66:	f7ff ff4f 	bl	8006d08 <spiselect>
 8006e6a:	1e03      	subs	r3, r0, #0
 8006e6c:	d101      	bne.n	8006e72 <send_cmd+0x5c>
 8006e6e:	23ff      	movs	r3, #255	@ 0xff
 8006e70:	e05b      	b.n	8006f2a <send_cmd+0x114>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006e72:	1dfb      	adds	r3, r7, #7
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2240      	movs	r2, #64	@ 0x40
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f7ff fec1 	bl	8006c04 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	0e1b      	lsrs	r3, r3, #24
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7ff febb 	bl	8006c04 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	0c1b      	lsrs	r3, r3, #16
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	0018      	movs	r0, r3
 8006e96:	f7ff feb5 	bl	8006c04 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f7ff feaf 	bl	8006c04 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f7ff feaa 	bl	8006c04 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006eb0:	210f      	movs	r1, #15
 8006eb2:	187b      	adds	r3, r7, r1
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006eb8:	1dfb      	adds	r3, r7, #7
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <send_cmd+0xb0>
 8006ec0:	187b      	adds	r3, r7, r1
 8006ec2:	2295      	movs	r2, #149	@ 0x95
 8006ec4:	701a      	strb	r2, [r3, #0]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006ec6:	1dfb      	adds	r3, r7, #7
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d103      	bne.n	8006ed6 <send_cmd+0xc0>
 8006ece:	230f      	movs	r3, #15
 8006ed0:	18fb      	adds	r3, r7, r3
 8006ed2:	2287      	movs	r2, #135	@ 0x87
 8006ed4:	701a      	strb	r2, [r3, #0]
	xchg_spi(n);
 8006ed6:	230f      	movs	r3, #15
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	0018      	movs	r0, r3
 8006ede:	f7ff fe91 	bl	8006c04 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006ee2:	1dfb      	adds	r3, r7, #7
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	2b0c      	cmp	r3, #12
 8006ee8:	d102      	bne.n	8006ef0 <send_cmd+0xda>
 8006eea:	20ff      	movs	r0, #255	@ 0xff
 8006eec:	f7ff fe8a 	bl	8006c04 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006ef0:	230f      	movs	r3, #15
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	220a      	movs	r2, #10
 8006ef6:	701a      	strb	r2, [r3, #0]
	do {
		res = xchg_spi(0xFF);
 8006ef8:	250e      	movs	r5, #14
 8006efa:	197c      	adds	r4, r7, r5
 8006efc:	20ff      	movs	r0, #255	@ 0xff
 8006efe:	f7ff fe81 	bl	8006c04 <xchg_spi>
 8006f02:	0003      	movs	r3, r0
 8006f04:	7023      	strb	r3, [r4, #0]
	} while ((res & 0x80) && --n);
 8006f06:	197b      	adds	r3, r7, r5
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	b25b      	sxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	da09      	bge.n	8006f24 <send_cmd+0x10e>
 8006f10:	210f      	movs	r1, #15
 8006f12:	187b      	adds	r3, r7, r1
 8006f14:	187a      	adds	r2, r7, r1
 8006f16:	7812      	ldrb	r2, [r2, #0]
 8006f18:	3a01      	subs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]
 8006f1c:	187b      	adds	r3, r7, r1
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e9      	bne.n	8006ef8 <send_cmd+0xe2>

	return res;							/* Return received response */
 8006f24:	230e      	movs	r3, #14
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	781b      	ldrb	r3, [r3, #0]
}
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	b004      	add	sp, #16
 8006f30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f34 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
		BYTE drv		/* Physical drive number (0) */
)
{
 8006f34:	b5b0      	push	{r4, r5, r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	0002      	movs	r2, r0
 8006f3c:	1dfb      	adds	r3, r7, #7
 8006f3e:	701a      	strb	r2, [r3, #0]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006f40:	1dfb      	adds	r3, r7, #7
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <USER_SPI_initialize+0x18>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e100      	b.n	800714e <USER_SPI_initialize+0x21a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006f4c:	4b82      	ldr	r3, [pc, #520]	@ (8007158 <USER_SPI_initialize+0x224>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	001a      	movs	r2, r3
 8006f54:	2302      	movs	r3, #2
 8006f56:	4013      	ands	r3, r2
 8006f58:	d003      	beq.n	8006f62 <USER_SPI_initialize+0x2e>
 8006f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8007158 <USER_SPI_initialize+0x224>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	e0f5      	b.n	800714e <USER_SPI_initialize+0x21a>

	FCLK_SLOW();
 8006f62:	4b7e      	ldr	r3, [pc, #504]	@ (800715c <USER_SPI_initialize+0x228>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2238      	movs	r2, #56	@ 0x38
 8006f6a:	4393      	bics	r3, r2
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	4b7b      	ldr	r3, [pc, #492]	@ (800715c <USER_SPI_initialize+0x228>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2130      	movs	r1, #48	@ 0x30
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006f78:	230f      	movs	r3, #15
 8006f7a:	18fb      	adds	r3, r7, r3
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	701a      	strb	r2, [r3, #0]
 8006f80:	e008      	b.n	8006f94 <USER_SPI_initialize+0x60>
 8006f82:	20ff      	movs	r0, #255	@ 0xff
 8006f84:	f7ff fe3e 	bl	8006c04 <xchg_spi>
 8006f88:	210f      	movs	r1, #15
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	781a      	ldrb	r2, [r3, #0]
 8006f8e:	187b      	adds	r3, r7, r1
 8006f90:	3a01      	subs	r2, #1
 8006f92:	701a      	strb	r2, [r3, #0]
 8006f94:	240f      	movs	r4, #15
 8006f96:	193b      	adds	r3, r7, r4
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f1      	bne.n	8006f82 <USER_SPI_initialize+0x4e>

	ty = 0;
 8006f9e:	230d      	movs	r3, #13
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2000      	movs	r0, #0
 8006faa:	f7ff ff34 	bl	8006e16 <send_cmd>
 8006fae:	0003      	movs	r3, r0
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d000      	beq.n	8006fb6 <USER_SPI_initialize+0x82>
 8006fb4:	e0a6      	b.n	8007104 <USER_SPI_initialize+0x1d0>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006fb6:	23fa      	movs	r3, #250	@ 0xfa
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f7ff fdf8 	bl	8006bb0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006fc0:	23d5      	movs	r3, #213	@ 0xd5
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	2008      	movs	r0, #8
 8006fc8:	f7ff ff25 	bl	8006e16 <send_cmd>
 8006fcc:	0003      	movs	r3, r0
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d162      	bne.n	8007098 <USER_SPI_initialize+0x164>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006fd2:	193b      	adds	r3, r7, r4
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e00f      	b.n	8006ffa <USER_SPI_initialize+0xc6>
 8006fda:	250f      	movs	r5, #15
 8006fdc:	197b      	adds	r3, r7, r5
 8006fde:	781c      	ldrb	r4, [r3, #0]
 8006fe0:	20ff      	movs	r0, #255	@ 0xff
 8006fe2:	f7ff fe0f 	bl	8006c04 <xchg_spi>
 8006fe6:	0003      	movs	r3, r0
 8006fe8:	001a      	movs	r2, r3
 8006fea:	2308      	movs	r3, #8
 8006fec:	18fb      	adds	r3, r7, r3
 8006fee:	551a      	strb	r2, [r3, r4]
 8006ff0:	197b      	adds	r3, r7, r5
 8006ff2:	781a      	ldrb	r2, [r3, #0]
 8006ff4:	197b      	adds	r3, r7, r5
 8006ff6:	3201      	adds	r2, #1
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	230f      	movs	r3, #15
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b03      	cmp	r3, #3
 8007002:	d9ea      	bls.n	8006fda <USER_SPI_initialize+0xa6>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007004:	2208      	movs	r2, #8
 8007006:	18bb      	adds	r3, r7, r2
 8007008:	789b      	ldrb	r3, [r3, #2]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d000      	beq.n	8007010 <USER_SPI_initialize+0xdc>
 800700e:	e079      	b.n	8007104 <USER_SPI_initialize+0x1d0>
 8007010:	18bb      	adds	r3, r7, r2
 8007012:	78db      	ldrb	r3, [r3, #3]
 8007014:	2baa      	cmp	r3, #170	@ 0xaa
 8007016:	d000      	beq.n	800701a <USER_SPI_initialize+0xe6>
 8007018:	e074      	b.n	8007104 <USER_SPI_initialize+0x1d0>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800701a:	46c0      	nop			@ (mov r8, r8)
 800701c:	f7ff fddc 	bl	8006bd8 <SPI_Timer_Status>
 8007020:	1e03      	subs	r3, r0, #0
 8007022:	d007      	beq.n	8007034 <USER_SPI_initialize+0x100>
 8007024:	2380      	movs	r3, #128	@ 0x80
 8007026:	05db      	lsls	r3, r3, #23
 8007028:	0019      	movs	r1, r3
 800702a:	20a9      	movs	r0, #169	@ 0xa9
 800702c:	f7ff fef3 	bl	8006e16 <send_cmd>
 8007030:	1e03      	subs	r3, r0, #0
 8007032:	d1f3      	bne.n	800701c <USER_SPI_initialize+0xe8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007034:	f7ff fdd0 	bl	8006bd8 <SPI_Timer_Status>
 8007038:	1e03      	subs	r3, r0, #0
 800703a:	d063      	beq.n	8007104 <USER_SPI_initialize+0x1d0>
 800703c:	2100      	movs	r1, #0
 800703e:	203a      	movs	r0, #58	@ 0x3a
 8007040:	f7ff fee9 	bl	8006e16 <send_cmd>
 8007044:	1e03      	subs	r3, r0, #0
 8007046:	d15d      	bne.n	8007104 <USER_SPI_initialize+0x1d0>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007048:	230f      	movs	r3, #15
 800704a:	18fb      	adds	r3, r7, r3
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
 8007050:	e00f      	b.n	8007072 <USER_SPI_initialize+0x13e>
 8007052:	250f      	movs	r5, #15
 8007054:	197b      	adds	r3, r7, r5
 8007056:	781c      	ldrb	r4, [r3, #0]
 8007058:	20ff      	movs	r0, #255	@ 0xff
 800705a:	f7ff fdd3 	bl	8006c04 <xchg_spi>
 800705e:	0003      	movs	r3, r0
 8007060:	001a      	movs	r2, r3
 8007062:	2308      	movs	r3, #8
 8007064:	18fb      	adds	r3, r7, r3
 8007066:	551a      	strb	r2, [r3, r4]
 8007068:	197b      	adds	r3, r7, r5
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	197b      	adds	r3, r7, r5
 800706e:	3201      	adds	r2, #1
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	230f      	movs	r3, #15
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b03      	cmp	r3, #3
 800707a:	d9ea      	bls.n	8007052 <USER_SPI_initialize+0x11e>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800707c:	2308      	movs	r3, #8
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	001a      	movs	r2, r3
 8007084:	2340      	movs	r3, #64	@ 0x40
 8007086:	4013      	ands	r3, r2
 8007088:	d001      	beq.n	800708e <USER_SPI_initialize+0x15a>
 800708a:	220c      	movs	r2, #12
 800708c:	e000      	b.n	8007090 <USER_SPI_initialize+0x15c>
 800708e:	2204      	movs	r2, #4
 8007090:	230d      	movs	r3, #13
 8007092:	18fb      	adds	r3, r7, r3
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	e035      	b.n	8007104 <USER_SPI_initialize+0x1d0>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007098:	2100      	movs	r1, #0
 800709a:	20a9      	movs	r0, #169	@ 0xa9
 800709c:	f7ff febb 	bl	8006e16 <send_cmd>
 80070a0:	0003      	movs	r3, r0
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d808      	bhi.n	80070b8 <USER_SPI_initialize+0x184>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80070a6:	230d      	movs	r3, #13
 80070a8:	18fb      	adds	r3, r7, r3
 80070aa:	2202      	movs	r2, #2
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	230e      	movs	r3, #14
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	22a9      	movs	r2, #169	@ 0xa9
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	e007      	b.n	80070c8 <USER_SPI_initialize+0x194>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80070b8:	230d      	movs	r3, #13
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	2201      	movs	r2, #1
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	230e      	movs	r3, #14
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	2201      	movs	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80070c8:	46c0      	nop			@ (mov r8, r8)
 80070ca:	f7ff fd85 	bl	8006bd8 <SPI_Timer_Status>
 80070ce:	1e03      	subs	r3, r0, #0
 80070d0:	d008      	beq.n	80070e4 <USER_SPI_initialize+0x1b0>
 80070d2:	230e      	movs	r3, #14
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2100      	movs	r1, #0
 80070da:	0018      	movs	r0, r3
 80070dc:	f7ff fe9b 	bl	8006e16 <send_cmd>
 80070e0:	1e03      	subs	r3, r0, #0
 80070e2:	d1f2      	bne.n	80070ca <USER_SPI_initialize+0x196>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80070e4:	f7ff fd78 	bl	8006bd8 <SPI_Timer_Status>
 80070e8:	1e03      	subs	r3, r0, #0
 80070ea:	d007      	beq.n	80070fc <USER_SPI_initialize+0x1c8>
 80070ec:	2380      	movs	r3, #128	@ 0x80
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	0019      	movs	r1, r3
 80070f2:	2010      	movs	r0, #16
 80070f4:	f7ff fe8f 	bl	8006e16 <send_cmd>
 80070f8:	1e03      	subs	r3, r0, #0
 80070fa:	d003      	beq.n	8007104 <USER_SPI_initialize+0x1d0>
				ty = 0;
 80070fc:	230d      	movs	r3, #13
 80070fe:	18fb      	adds	r3, r7, r3
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
		}
	}
	CardType = ty;	/* Card type */
 8007104:	4b16      	ldr	r3, [pc, #88]	@ (8007160 <USER_SPI_initialize+0x22c>)
 8007106:	240d      	movs	r4, #13
 8007108:	193a      	adds	r2, r7, r4
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	701a      	strb	r2, [r3, #0]
	despiselect();
 800710e:	f7ff fde9 	bl	8006ce4 <despiselect>

	if (ty) {			/* OK */
 8007112:	193b      	adds	r3, r7, r4
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d013      	beq.n	8007142 <USER_SPI_initialize+0x20e>
		FCLK_FAST();			/* Set fast clock */
 800711a:	4b10      	ldr	r3, [pc, #64]	@ (800715c <USER_SPI_initialize+0x228>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2238      	movs	r2, #56	@ 0x38
 8007122:	4393      	bics	r3, r2
 8007124:	001a      	movs	r2, r3
 8007126:	4b0d      	ldr	r3, [pc, #52]	@ (800715c <USER_SPI_initialize+0x228>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2110      	movs	r1, #16
 800712c:	430a      	orrs	r2, r1
 800712e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007130:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <USER_SPI_initialize+0x224>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2201      	movs	r2, #1
 8007138:	4393      	bics	r3, r2
 800713a:	b2da      	uxtb	r2, r3
 800713c:	4b06      	ldr	r3, [pc, #24]	@ (8007158 <USER_SPI_initialize+0x224>)
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e002      	b.n	8007148 <USER_SPI_initialize+0x214>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007142:	4b05      	ldr	r3, [pc, #20]	@ (8007158 <USER_SPI_initialize+0x224>)
 8007144:	2201      	movs	r2, #1
 8007146:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007148:	4b03      	ldr	r3, [pc, #12]	@ (8007158 <USER_SPI_initialize+0x224>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	b2db      	uxtb	r3, r3
}
 800714e:	0018      	movs	r0, r3
 8007150:	46bd      	mov	sp, r7
 8007152:	b004      	add	sp, #16
 8007154:	bdb0      	pop	{r4, r5, r7, pc}
 8007156:	46c0      	nop			@ (mov r8, r8)
 8007158:	200000e0 	.word	0x200000e0
 800715c:	20000930 	.word	0x20000930
 8007160:	20000b19 	.word	0x20000b19

08007164 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
		BYTE drv		/* Physical drive number (0) */
)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	0002      	movs	r2, r0
 800716c:	1dfb      	adds	r3, r7, #7
 800716e:	701a      	strb	r2, [r3, #0]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007170:	1dfb      	adds	r3, r7, #7
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <USER_SPI_status+0x18>
 8007178:	2301      	movs	r3, #1
 800717a:	e002      	b.n	8007182 <USER_SPI_status+0x1e>

	return Stat;	/* Return disk status */
 800717c:	4b03      	ldr	r3, [pc, #12]	@ (800718c <USER_SPI_status+0x28>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	b2db      	uxtb	r3, r3
}
 8007182:	0018      	movs	r0, r3
 8007184:	46bd      	mov	sp, r7
 8007186:	b002      	add	sp, #8
 8007188:	bd80      	pop	{r7, pc}
 800718a:	46c0      	nop			@ (mov r8, r8)
 800718c:	200000e0 	.word	0x200000e0

08007190 <USER_SPI_read>:
		BYTE drv,		/* Physical drive number (0) */
		BYTE *buff,		/* Pointer to the data buffer to store read data */
		DWORD sector,	/* Start sector number (LBA) */
		UINT count		/* Number of sectors to read (1..128) */
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	60b9      	str	r1, [r7, #8]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	210f      	movs	r1, #15
 800719e:	187b      	adds	r3, r7, r1
 80071a0:	1c02      	adds	r2, r0, #0
 80071a2:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80071a4:	187b      	adds	r3, r7, r1
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <USER_SPI_read+0x22>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <USER_SPI_read+0x26>
 80071b2:	2304      	movs	r3, #4
 80071b4:	e04f      	b.n	8007256 <USER_SPI_read+0xc6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80071b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007260 <USER_SPI_read+0xd0>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	001a      	movs	r2, r3
 80071be:	2301      	movs	r3, #1
 80071c0:	4013      	ands	r3, r2
 80071c2:	d001      	beq.n	80071c8 <USER_SPI_read+0x38>
 80071c4:	2303      	movs	r3, #3
 80071c6:	e046      	b.n	8007256 <USER_SPI_read+0xc6>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80071c8:	4b26      	ldr	r3, [pc, #152]	@ (8007264 <USER_SPI_read+0xd4>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	001a      	movs	r2, r3
 80071ce:	2308      	movs	r3, #8
 80071d0:	4013      	ands	r3, r2
 80071d2:	d102      	bne.n	80071da <USER_SPI_read+0x4a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	025b      	lsls	r3, r3, #9
 80071d8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d112      	bne.n	8007206 <USER_SPI_read+0x76>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	0019      	movs	r1, r3
 80071e4:	2011      	movs	r0, #17
 80071e6:	f7ff fe16 	bl	8006e16 <send_cmd>
 80071ea:	1e03      	subs	r3, r0, #0
 80071ec:	d12d      	bne.n	800724a <USER_SPI_read+0xba>
				&& rcvr_datablock(buff, 512)) {
 80071ee:	2380      	movs	r3, #128	@ 0x80
 80071f0:	009a      	lsls	r2, r3, #2
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	0011      	movs	r1, r2
 80071f6:	0018      	movs	r0, r3
 80071f8:	f7ff fda4 	bl	8006d44 <rcvr_datablock>
 80071fc:	1e03      	subs	r3, r0, #0
 80071fe:	d024      	beq.n	800724a <USER_SPI_read+0xba>
			count = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	e021      	b.n	800724a <USER_SPI_read+0xba>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	0019      	movs	r1, r3
 800720a:	2012      	movs	r0, #18
 800720c:	f7ff fe03 	bl	8006e16 <send_cmd>
 8007210:	1e03      	subs	r3, r0, #0
 8007212:	d11a      	bne.n	800724a <USER_SPI_read+0xba>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007214:	2380      	movs	r3, #128	@ 0x80
 8007216:	009a      	lsls	r2, r3, #2
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	0011      	movs	r1, r2
 800721c:	0018      	movs	r0, r3
 800721e:	f7ff fd91 	bl	8006d44 <rcvr_datablock>
 8007222:	1e03      	subs	r3, r0, #0
 8007224:	d00c      	beq.n	8007240 <USER_SPI_read+0xb0>
				buff += 512;
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2280      	movs	r2, #128	@ 0x80
 800722a:	0092      	lsls	r2, r2, #2
 800722c:	4694      	mov	ip, r2
 800722e:	4463      	add	r3, ip
 8007230:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	3b01      	subs	r3, #1
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1ea      	bne.n	8007214 <USER_SPI_read+0x84>
 800723e:	e000      	b.n	8007242 <USER_SPI_read+0xb2>
				if (!rcvr_datablock(buff, 512)) break;
 8007240:	46c0      	nop			@ (mov r8, r8)
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007242:	2100      	movs	r1, #0
 8007244:	200c      	movs	r0, #12
 8007246:	f7ff fde6 	bl	8006e16 <send_cmd>
		}
	}
	despiselect();
 800724a:	f7ff fd4b 	bl	8006ce4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	1e5a      	subs	r2, r3, #1
 8007252:	4193      	sbcs	r3, r2
 8007254:	b2db      	uxtb	r3, r3
}
 8007256:	0018      	movs	r0, r3
 8007258:	46bd      	mov	sp, r7
 800725a:	b004      	add	sp, #16
 800725c:	bd80      	pop	{r7, pc}
 800725e:	46c0      	nop			@ (mov r8, r8)
 8007260:	200000e0 	.word	0x200000e0
 8007264:	20000b19 	.word	0x20000b19

08007268 <USER_SPI_write>:
		BYTE drv,			/* Physical drive number (0) */
		const BYTE *buff,	/* Ponter to the data to write */
		DWORD sector,		/* Start sector number (LBA) */
		UINT count			/* Number of sectors to write (1..128) */
)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	210f      	movs	r1, #15
 8007276:	187b      	adds	r3, r7, r1
 8007278:	1c02      	adds	r2, r0, #0
 800727a:	701a      	strb	r2, [r3, #0]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800727c:	187b      	adds	r3, r7, r1
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d102      	bne.n	800728a <USER_SPI_write+0x22>
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <USER_SPI_write+0x26>
 800728a:	2304      	movs	r3, #4
 800728c:	e063      	b.n	8007356 <USER_SPI_write+0xee>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800728e:	4b34      	ldr	r3, [pc, #208]	@ (8007360 <USER_SPI_write+0xf8>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	001a      	movs	r2, r3
 8007296:	2301      	movs	r3, #1
 8007298:	4013      	ands	r3, r2
 800729a:	d001      	beq.n	80072a0 <USER_SPI_write+0x38>
 800729c:	2303      	movs	r3, #3
 800729e:	e05a      	b.n	8007356 <USER_SPI_write+0xee>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80072a0:	4b2f      	ldr	r3, [pc, #188]	@ (8007360 <USER_SPI_write+0xf8>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	001a      	movs	r2, r3
 80072a8:	2304      	movs	r3, #4
 80072aa:	4013      	ands	r3, r2
 80072ac:	d001      	beq.n	80072b2 <USER_SPI_write+0x4a>
 80072ae:	2302      	movs	r3, #2
 80072b0:	e051      	b.n	8007356 <USER_SPI_write+0xee>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80072b2:	4b2c      	ldr	r3, [pc, #176]	@ (8007364 <USER_SPI_write+0xfc>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	001a      	movs	r2, r3
 80072b8:	2308      	movs	r3, #8
 80072ba:	4013      	ands	r3, r2
 80072bc:	d102      	bne.n	80072c4 <USER_SPI_write+0x5c>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	025b      	lsls	r3, r3, #9
 80072c2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d110      	bne.n	80072ec <USER_SPI_write+0x84>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	0019      	movs	r1, r3
 80072ce:	2018      	movs	r0, #24
 80072d0:	f7ff fda1 	bl	8006e16 <send_cmd>
 80072d4:	1e03      	subs	r3, r0, #0
 80072d6:	d138      	bne.n	800734a <USER_SPI_write+0xe2>
				&& xmit_datablock(buff, 0xFE)) {
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	21fe      	movs	r1, #254	@ 0xfe
 80072dc:	0018      	movs	r0, r3
 80072de:	f7ff fd60 	bl	8006da2 <xmit_datablock>
 80072e2:	1e03      	subs	r3, r0, #0
 80072e4:	d031      	beq.n	800734a <USER_SPI_write+0xe2>
			count = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	603b      	str	r3, [r7, #0]
 80072ea:	e02e      	b.n	800734a <USER_SPI_write+0xe2>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80072ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007364 <USER_SPI_write+0xfc>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	001a      	movs	r2, r3
 80072f2:	2306      	movs	r3, #6
 80072f4:	4013      	ands	r3, r2
 80072f6:	d004      	beq.n	8007302 <USER_SPI_write+0x9a>
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	0019      	movs	r1, r3
 80072fc:	2097      	movs	r0, #151	@ 0x97
 80072fe:	f7ff fd8a 	bl	8006e16 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	0019      	movs	r1, r3
 8007306:	2019      	movs	r0, #25
 8007308:	f7ff fd85 	bl	8006e16 <send_cmd>
 800730c:	1e03      	subs	r3, r0, #0
 800730e:	d11c      	bne.n	800734a <USER_SPI_write+0xe2>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	21fc      	movs	r1, #252	@ 0xfc
 8007314:	0018      	movs	r0, r3
 8007316:	f7ff fd44 	bl	8006da2 <xmit_datablock>
 800731a:	1e03      	subs	r3, r0, #0
 800731c:	d00c      	beq.n	8007338 <USER_SPI_write+0xd0>
				buff += 512;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2280      	movs	r2, #128	@ 0x80
 8007322:	0092      	lsls	r2, r2, #2
 8007324:	4694      	mov	ip, r2
 8007326:	4463      	add	r3, ip
 8007328:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	3b01      	subs	r3, #1
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1ec      	bne.n	8007310 <USER_SPI_write+0xa8>
 8007336:	e000      	b.n	800733a <USER_SPI_write+0xd2>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007338:	46c0      	nop			@ (mov r8, r8)
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800733a:	21fd      	movs	r1, #253	@ 0xfd
 800733c:	2000      	movs	r0, #0
 800733e:	f7ff fd30 	bl	8006da2 <xmit_datablock>
 8007342:	1e03      	subs	r3, r0, #0
 8007344:	d101      	bne.n	800734a <USER_SPI_write+0xe2>
 8007346:	2301      	movs	r3, #1
 8007348:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800734a:	f7ff fccb 	bl	8006ce4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	1e5a      	subs	r2, r3, #1
 8007352:	4193      	sbcs	r3, r2
 8007354:	b2db      	uxtb	r3, r3
}
 8007356:	0018      	movs	r0, r3
 8007358:	46bd      	mov	sp, r7
 800735a:	b004      	add	sp, #16
 800735c:	bd80      	pop	{r7, pc}
 800735e:	46c0      	nop			@ (mov r8, r8)
 8007360:	200000e0 	.word	0x200000e0
 8007364:	20000b19 	.word	0x20000b19

08007368 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
		BYTE drv,		/* Physical drive number (0) */
		BYTE cmd,		/* Control command code */
		void *buff		/* Pointer to the conrtol data */
)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b08d      	sub	sp, #52	@ 0x34
 800736c:	af00      	add	r7, sp, #0
 800736e:	603a      	str	r2, [r7, #0]
 8007370:	1dfb      	adds	r3, r7, #7
 8007372:	1c02      	adds	r2, r0, #0
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	1dbb      	adds	r3, r7, #6
 8007378:	1c0a      	adds	r2, r1, #0
 800737a:	701a      	strb	r2, [r3, #0]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800737c:	1dfb      	adds	r3, r7, #7
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <USER_SPI_ioctl+0x20>
 8007384:	2304      	movs	r3, #4
 8007386:	e178      	b.n	800767a <USER_SPI_ioctl+0x312>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007388:	4bbe      	ldr	r3, [pc, #760]	@ (8007684 <USER_SPI_ioctl+0x31c>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	001a      	movs	r2, r3
 8007390:	2301      	movs	r3, #1
 8007392:	4013      	ands	r3, r2
 8007394:	d001      	beq.n	800739a <USER_SPI_ioctl+0x32>
 8007396:	2303      	movs	r3, #3
 8007398:	e16f      	b.n	800767a <USER_SPI_ioctl+0x312>

	res = RES_ERROR;
 800739a:	232f      	movs	r3, #47	@ 0x2f
 800739c:	18fb      	adds	r3, r7, r3
 800739e:	2201      	movs	r2, #1
 80073a0:	701a      	strb	r2, [r3, #0]

	switch (cmd) {
 80073a2:	1dbb      	adds	r3, r7, #6
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d100      	bne.n	80073ac <USER_SPI_ioctl+0x44>
 80073aa:	e100      	b.n	80075ae <USER_SPI_ioctl+0x246>
 80073ac:	dd00      	ble.n	80073b0 <USER_SPI_ioctl+0x48>
 80073ae:	e14d      	b.n	800764c <USER_SPI_ioctl+0x2e4>
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d100      	bne.n	80073b6 <USER_SPI_ioctl+0x4e>
 80073b4:	e074      	b.n	80074a0 <USER_SPI_ioctl+0x138>
 80073b6:	dd00      	ble.n	80073ba <USER_SPI_ioctl+0x52>
 80073b8:	e148      	b.n	800764c <USER_SPI_ioctl+0x2e4>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <USER_SPI_ioctl+0x5c>
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d00a      	beq.n	80073d8 <USER_SPI_ioctl+0x70>
 80073c2:	e143      	b.n	800764c <USER_SPI_ioctl+0x2e4>
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80073c4:	f7ff fca0 	bl	8006d08 <spiselect>
 80073c8:	1e03      	subs	r3, r0, #0
 80073ca:	d100      	bne.n	80073ce <USER_SPI_ioctl+0x66>
 80073cc:	e143      	b.n	8007656 <USER_SPI_ioctl+0x2ee>
 80073ce:	232f      	movs	r3, #47	@ 0x2f
 80073d0:	18fb      	adds	r3, r7, r3
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
		break;
 80073d6:	e13e      	b.n	8007656 <USER_SPI_ioctl+0x2ee>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80073d8:	2100      	movs	r1, #0
 80073da:	2009      	movs	r0, #9
 80073dc:	f7ff fd1b 	bl	8006e16 <send_cmd>
 80073e0:	1e03      	subs	r3, r0, #0
 80073e2:	d000      	beq.n	80073e6 <USER_SPI_ioctl+0x7e>
 80073e4:	e139      	b.n	800765a <USER_SPI_ioctl+0x2f2>
 80073e6:	240c      	movs	r4, #12
 80073e8:	193b      	adds	r3, r7, r4
 80073ea:	2110      	movs	r1, #16
 80073ec:	0018      	movs	r0, r3
 80073ee:	f7ff fca9 	bl	8006d44 <rcvr_datablock>
 80073f2:	1e03      	subs	r3, r0, #0
 80073f4:	d100      	bne.n	80073f8 <USER_SPI_ioctl+0x90>
 80073f6:	e130      	b.n	800765a <USER_SPI_ioctl+0x2f2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80073f8:	0020      	movs	r0, r4
 80073fa:	183b      	adds	r3, r7, r0
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	099b      	lsrs	r3, r3, #6
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b01      	cmp	r3, #1
 8007404:	d115      	bne.n	8007432 <USER_SPI_ioctl+0xca>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007406:	183b      	adds	r3, r7, r0
 8007408:	7a5b      	ldrb	r3, [r3, #9]
 800740a:	001a      	movs	r2, r3
 800740c:	183b      	adds	r3, r7, r0
 800740e:	7a1b      	ldrb	r3, [r3, #8]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	18d3      	adds	r3, r2, r3
 8007414:	0019      	movs	r1, r3
 8007416:	183b      	adds	r3, r7, r0
 8007418:	79db      	ldrb	r3, [r3, #7]
 800741a:	041a      	lsls	r2, r3, #16
 800741c:	23fc      	movs	r3, #252	@ 0xfc
 800741e:	039b      	lsls	r3, r3, #14
 8007420:	4013      	ands	r3, r2
 8007422:	18cb      	adds	r3, r1, r3
 8007424:	3301      	adds	r3, #1
 8007426:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	029a      	lsls	r2, r3, #10
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e031      	b.n	8007496 <USER_SPI_ioctl+0x12e>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007432:	200c      	movs	r0, #12
 8007434:	183b      	adds	r3, r7, r0
 8007436:	795b      	ldrb	r3, [r3, #5]
 8007438:	220f      	movs	r2, #15
 800743a:	4013      	ands	r3, r2
 800743c:	b2da      	uxtb	r2, r3
 800743e:	183b      	adds	r3, r7, r0
 8007440:	7a9b      	ldrb	r3, [r3, #10]
 8007442:	09db      	lsrs	r3, r3, #7
 8007444:	b2db      	uxtb	r3, r3
 8007446:	18d3      	adds	r3, r2, r3
 8007448:	b2da      	uxtb	r2, r3
 800744a:	183b      	adds	r3, r7, r0
 800744c:	7a5b      	ldrb	r3, [r3, #9]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2106      	movs	r1, #6
 8007454:	400b      	ands	r3, r1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	18d3      	adds	r3, r2, r3
 800745a:	b2da      	uxtb	r2, r3
 800745c:	242e      	movs	r4, #46	@ 0x2e
 800745e:	193b      	adds	r3, r7, r4
 8007460:	3202      	adds	r2, #2
 8007462:	701a      	strb	r2, [r3, #0]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007464:	183b      	adds	r3, r7, r0
 8007466:	7a1b      	ldrb	r3, [r3, #8]
 8007468:	099b      	lsrs	r3, r3, #6
 800746a:	b2db      	uxtb	r3, r3
 800746c:	001a      	movs	r2, r3
 800746e:	183b      	adds	r3, r7, r0
 8007470:	79db      	ldrb	r3, [r3, #7]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	18d2      	adds	r2, r2, r3
 8007476:	183b      	adds	r3, r7, r0
 8007478:	799b      	ldrb	r3, [r3, #6]
 800747a:	0299      	lsls	r1, r3, #10
 800747c:	23c0      	movs	r3, #192	@ 0xc0
 800747e:	011b      	lsls	r3, r3, #4
 8007480:	400b      	ands	r3, r1
 8007482:	18d3      	adds	r3, r2, r3
 8007484:	3301      	adds	r3, #1
 8007486:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007488:	193b      	adds	r3, r7, r4
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	3b09      	subs	r3, #9
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	409a      	lsls	r2, r3
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007496:	232f      	movs	r3, #47	@ 0x2f
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800749e:	e0dc      	b.n	800765a <USER_SPI_ioctl+0x2f2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80074a0:	4b79      	ldr	r3, [pc, #484]	@ (8007688 <USER_SPI_ioctl+0x320>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	001a      	movs	r2, r3
 80074a6:	2304      	movs	r3, #4
 80074a8:	4013      	ands	r3, r2
 80074aa:	d035      	beq.n	8007518 <USER_SPI_ioctl+0x1b0>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80074ac:	2100      	movs	r1, #0
 80074ae:	208d      	movs	r0, #141	@ 0x8d
 80074b0:	f7ff fcb1 	bl	8006e16 <send_cmd>
 80074b4:	1e03      	subs	r3, r0, #0
 80074b6:	d000      	beq.n	80074ba <USER_SPI_ioctl+0x152>
 80074b8:	e0d1      	b.n	800765e <USER_SPI_ioctl+0x2f6>
				xchg_spi(0xFF);
 80074ba:	20ff      	movs	r0, #255	@ 0xff
 80074bc:	f7ff fba2 	bl	8006c04 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80074c0:	230c      	movs	r3, #12
 80074c2:	18fb      	adds	r3, r7, r3
 80074c4:	2110      	movs	r1, #16
 80074c6:	0018      	movs	r0, r3
 80074c8:	f7ff fc3c 	bl	8006d44 <rcvr_datablock>
 80074cc:	1e03      	subs	r3, r0, #0
 80074ce:	d100      	bne.n	80074d2 <USER_SPI_ioctl+0x16a>
 80074d0:	e0c5      	b.n	800765e <USER_SPI_ioctl+0x2f6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80074d2:	232e      	movs	r3, #46	@ 0x2e
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	2230      	movs	r2, #48	@ 0x30
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	e008      	b.n	80074ee <USER_SPI_ioctl+0x186>
 80074dc:	20ff      	movs	r0, #255	@ 0xff
 80074de:	f7ff fb91 	bl	8006c04 <xchg_spi>
 80074e2:	212e      	movs	r1, #46	@ 0x2e
 80074e4:	187b      	adds	r3, r7, r1
 80074e6:	781a      	ldrb	r2, [r3, #0]
 80074e8:	187b      	adds	r3, r7, r1
 80074ea:	3a01      	subs	r2, #1
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	232e      	movs	r3, #46	@ 0x2e
 80074f0:	18fb      	adds	r3, r7, r3
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1f1      	bne.n	80074dc <USER_SPI_ioctl+0x174>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80074f8:	230c      	movs	r3, #12
 80074fa:	18fb      	adds	r3, r7, r3
 80074fc:	7a9b      	ldrb	r3, [r3, #10]
 80074fe:	091b      	lsrs	r3, r3, #4
 8007500:	b2db      	uxtb	r3, r3
 8007502:	001a      	movs	r2, r3
 8007504:	2310      	movs	r3, #16
 8007506:	4093      	lsls	r3, r2
 8007508:	001a      	movs	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800750e:	232f      	movs	r3, #47	@ 0x2f
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007516:	e0a2      	b.n	800765e <USER_SPI_ioctl+0x2f6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007518:	2100      	movs	r1, #0
 800751a:	2009      	movs	r0, #9
 800751c:	f7ff fc7b 	bl	8006e16 <send_cmd>
 8007520:	1e03      	subs	r3, r0, #0
 8007522:	d000      	beq.n	8007526 <USER_SPI_ioctl+0x1be>
 8007524:	e09b      	b.n	800765e <USER_SPI_ioctl+0x2f6>
 8007526:	240c      	movs	r4, #12
 8007528:	193b      	adds	r3, r7, r4
 800752a:	2110      	movs	r1, #16
 800752c:	0018      	movs	r0, r3
 800752e:	f7ff fc09 	bl	8006d44 <rcvr_datablock>
 8007532:	1e03      	subs	r3, r0, #0
 8007534:	d100      	bne.n	8007538 <USER_SPI_ioctl+0x1d0>
 8007536:	e092      	b.n	800765e <USER_SPI_ioctl+0x2f6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007538:	4b53      	ldr	r3, [pc, #332]	@ (8007688 <USER_SPI_ioctl+0x320>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	001a      	movs	r2, r3
 800753e:	2302      	movs	r3, #2
 8007540:	4013      	ands	r3, r2
 8007542:	d016      	beq.n	8007572 <USER_SPI_ioctl+0x20a>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007544:	0021      	movs	r1, r4
 8007546:	187b      	adds	r3, r7, r1
 8007548:	7a9b      	ldrb	r3, [r3, #10]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	227e      	movs	r2, #126	@ 0x7e
 800754e:	4013      	ands	r3, r2
 8007550:	187a      	adds	r2, r7, r1
 8007552:	7ad2      	ldrb	r2, [r2, #11]
 8007554:	09d2      	lsrs	r2, r2, #7
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	189b      	adds	r3, r3, r2
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	187b      	adds	r3, r7, r1
 800755e:	7b5b      	ldrb	r3, [r3, #13]
 8007560:	099b      	lsrs	r3, r3, #6
 8007562:	b2db      	uxtb	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	409a      	lsls	r2, r3
 8007568:	0013      	movs	r3, r2
 800756a:	001a      	movs	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	e018      	b.n	80075a4 <USER_SPI_ioctl+0x23c>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007572:	210c      	movs	r1, #12
 8007574:	187b      	adds	r3, r7, r1
 8007576:	7a9b      	ldrb	r3, [r3, #10]
 8007578:	109b      	asrs	r3, r3, #2
 800757a:	b29b      	uxth	r3, r3
 800757c:	001a      	movs	r2, r3
 800757e:	231f      	movs	r3, #31
 8007580:	4013      	ands	r3, r2
 8007582:	3301      	adds	r3, #1
 8007584:	0008      	movs	r0, r1
 8007586:	187a      	adds	r2, r7, r1
 8007588:	7ad2      	ldrb	r2, [r2, #11]
 800758a:	00d2      	lsls	r2, r2, #3
 800758c:	2118      	movs	r1, #24
 800758e:	400a      	ands	r2, r1
 8007590:	1839      	adds	r1, r7, r0
 8007592:	7ac9      	ldrb	r1, [r1, #11]
 8007594:	0949      	lsrs	r1, r1, #5
 8007596:	b2c9      	uxtb	r1, r1
 8007598:	1852      	adds	r2, r2, r1
 800759a:	3201      	adds	r2, #1
 800759c:	4353      	muls	r3, r2
 800759e:	001a      	movs	r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80075a4:	232f      	movs	r3, #47	@ 0x2f
 80075a6:	18fb      	adds	r3, r7, r3
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]
		break;
 80075ac:	e057      	b.n	800765e <USER_SPI_ioctl+0x2f6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80075ae:	4b36      	ldr	r3, [pc, #216]	@ (8007688 <USER_SPI_ioctl+0x320>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	001a      	movs	r2, r3
 80075b4:	2306      	movs	r3, #6
 80075b6:	4013      	ands	r3, r2
 80075b8:	d053      	beq.n	8007662 <USER_SPI_ioctl+0x2fa>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80075ba:	240c      	movs	r4, #12
 80075bc:	193a      	adds	r2, r7, r4
 80075be:	1dfb      	adds	r3, r7, #7
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	210b      	movs	r1, #11
 80075c4:	0018      	movs	r0, r3
 80075c6:	f7ff fecf 	bl	8007368 <USER_SPI_ioctl>
 80075ca:	1e03      	subs	r3, r0, #0
 80075cc:	d14b      	bne.n	8007666 <USER_SPI_ioctl+0x2fe>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80075ce:	193b      	adds	r3, r7, r4
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	099b      	lsrs	r3, r3, #6
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <USER_SPI_ioctl+0x27e>
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	7a9b      	ldrb	r3, [r3, #10]
 80075de:	001a      	movs	r2, r3
 80075e0:	2340      	movs	r3, #64	@ 0x40
 80075e2:	4013      	ands	r3, r2
 80075e4:	d041      	beq.n	800766a <USER_SPI_ioctl+0x302>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	623b      	str	r3, [r7, #32]
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075f0:	6a3b      	ldr	r3, [r7, #32]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80075f6:	4b24      	ldr	r3, [pc, #144]	@ (8007688 <USER_SPI_ioctl+0x320>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	001a      	movs	r2, r3
 80075fc:	2308      	movs	r3, #8
 80075fe:	4013      	ands	r3, r2
 8007600:	d105      	bne.n	800760e <USER_SPI_ioctl+0x2a6>
			st *= 512; ed *= 512;
 8007602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007604:	025b      	lsls	r3, r3, #9
 8007606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	025b      	lsls	r3, r3, #9
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800760e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007610:	0019      	movs	r1, r3
 8007612:	2020      	movs	r0, #32
 8007614:	f7ff fbff 	bl	8006e16 <send_cmd>
 8007618:	1e03      	subs	r3, r0, #0
 800761a:	d128      	bne.n	800766e <USER_SPI_ioctl+0x306>
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	0019      	movs	r1, r3
 8007620:	2021      	movs	r0, #33	@ 0x21
 8007622:	f7ff fbf8 	bl	8006e16 <send_cmd>
 8007626:	1e03      	subs	r3, r0, #0
 8007628:	d121      	bne.n	800766e <USER_SPI_ioctl+0x306>
 800762a:	2100      	movs	r1, #0
 800762c:	2026      	movs	r0, #38	@ 0x26
 800762e:	f7ff fbf2 	bl	8006e16 <send_cmd>
 8007632:	1e03      	subs	r3, r0, #0
 8007634:	d11b      	bne.n	800766e <USER_SPI_ioctl+0x306>
 8007636:	4b15      	ldr	r3, [pc, #84]	@ (800768c <USER_SPI_ioctl+0x324>)
 8007638:	0018      	movs	r0, r3
 800763a:	f7ff fb2b 	bl	8006c94 <wait_ready>
 800763e:	1e03      	subs	r3, r0, #0
 8007640:	d015      	beq.n	800766e <USER_SPI_ioctl+0x306>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007642:	232f      	movs	r3, #47	@ 0x2f
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	2200      	movs	r2, #0
 8007648:	701a      	strb	r2, [r3, #0]
		}
		break;
 800764a:	e010      	b.n	800766e <USER_SPI_ioctl+0x306>

	default:
		res = RES_PARERR;
 800764c:	232f      	movs	r3, #47	@ 0x2f
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	2204      	movs	r2, #4
 8007652:	701a      	strb	r2, [r3, #0]
 8007654:	e00c      	b.n	8007670 <USER_SPI_ioctl+0x308>
		break;
 8007656:	46c0      	nop			@ (mov r8, r8)
 8007658:	e00a      	b.n	8007670 <USER_SPI_ioctl+0x308>
		break;
 800765a:	46c0      	nop			@ (mov r8, r8)
 800765c:	e008      	b.n	8007670 <USER_SPI_ioctl+0x308>
		break;
 800765e:	46c0      	nop			@ (mov r8, r8)
 8007660:	e006      	b.n	8007670 <USER_SPI_ioctl+0x308>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007662:	46c0      	nop			@ (mov r8, r8)
 8007664:	e004      	b.n	8007670 <USER_SPI_ioctl+0x308>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007666:	46c0      	nop			@ (mov r8, r8)
 8007668:	e002      	b.n	8007670 <USER_SPI_ioctl+0x308>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800766a:	46c0      	nop			@ (mov r8, r8)
 800766c:	e000      	b.n	8007670 <USER_SPI_ioctl+0x308>
		break;
 800766e:	46c0      	nop			@ (mov r8, r8)
	}

	despiselect();
 8007670:	f7ff fb38 	bl	8006ce4 <despiselect>

	return res;
 8007674:	232f      	movs	r3, #47	@ 0x2f
 8007676:	18fb      	adds	r3, r7, r3
 8007678:	781b      	ldrb	r3, [r3, #0]
}
 800767a:	0018      	movs	r0, r3
 800767c:	46bd      	mov	sp, r7
 800767e:	b00d      	add	sp, #52	@ 0x34
 8007680:	bd90      	pop	{r4, r7, pc}
 8007682:	46c0      	nop			@ (mov r8, r8)
 8007684:	200000e0 	.word	0x200000e0
 8007688:	20000b19 	.word	0x20000b19
 800768c:	00007530 	.word	0x00007530

08007690 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007690:	b5b0      	push	{r4, r5, r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	0002      	movs	r2, r0
 8007698:	1dfb      	adds	r3, r7, #7
 800769a:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800769c:	1dfb      	adds	r3, r7, #7
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	4a0b      	ldr	r2, [pc, #44]	@ (80076d0 <disk_status+0x40>)
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	18d3      	adds	r3, r2, r3
 80076a6:	3304      	adds	r3, #4
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	1dfa      	adds	r2, r7, #7
 80076ae:	7812      	ldrb	r2, [r2, #0]
 80076b0:	4907      	ldr	r1, [pc, #28]	@ (80076d0 <disk_status+0x40>)
 80076b2:	188a      	adds	r2, r1, r2
 80076b4:	7a12      	ldrb	r2, [r2, #8]
 80076b6:	250f      	movs	r5, #15
 80076b8:	197c      	adds	r4, r7, r5
 80076ba:	0010      	movs	r0, r2
 80076bc:	4798      	blx	r3
 80076be:	0003      	movs	r3, r0
 80076c0:	7023      	strb	r3, [r4, #0]
  return stat;
 80076c2:	197b      	adds	r3, r7, r5
 80076c4:	781b      	ldrb	r3, [r3, #0]
}
 80076c6:	0018      	movs	r0, r3
 80076c8:	46bd      	mov	sp, r7
 80076ca:	b004      	add	sp, #16
 80076cc:	bdb0      	pop	{r4, r5, r7, pc}
 80076ce:	46c0      	nop			@ (mov r8, r8)
 80076d0:	20000d4c 	.word	0x20000d4c

080076d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80076d4:	b590      	push	{r4, r7, lr}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	0002      	movs	r2, r0
 80076dc:	1dfb      	adds	r3, r7, #7
 80076de:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80076e0:	200f      	movs	r0, #15
 80076e2:	183b      	adds	r3, r7, r0
 80076e4:	2200      	movs	r2, #0
 80076e6:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80076e8:	1dfb      	adds	r3, r7, #7
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	4a10      	ldr	r2, [pc, #64]	@ (8007730 <disk_initialize+0x5c>)
 80076ee:	5cd3      	ldrb	r3, [r2, r3]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d116      	bne.n	8007722 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80076f4:	1dfb      	adds	r3, r7, #7
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	4a0d      	ldr	r2, [pc, #52]	@ (8007730 <disk_initialize+0x5c>)
 80076fa:	2101      	movs	r1, #1
 80076fc:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80076fe:	1dfb      	adds	r3, r7, #7
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4a0b      	ldr	r2, [pc, #44]	@ (8007730 <disk_initialize+0x5c>)
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	18d3      	adds	r3, r2, r3
 8007708:	3304      	adds	r3, #4
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	1dfa      	adds	r2, r7, #7
 8007710:	7812      	ldrb	r2, [r2, #0]
 8007712:	4907      	ldr	r1, [pc, #28]	@ (8007730 <disk_initialize+0x5c>)
 8007714:	188a      	adds	r2, r1, r2
 8007716:	7a12      	ldrb	r2, [r2, #8]
 8007718:	183c      	adds	r4, r7, r0
 800771a:	0010      	movs	r0, r2
 800771c:	4798      	blx	r3
 800771e:	0003      	movs	r3, r0
 8007720:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8007722:	230f      	movs	r3, #15
 8007724:	18fb      	adds	r3, r7, r3
 8007726:	781b      	ldrb	r3, [r3, #0]
}
 8007728:	0018      	movs	r0, r3
 800772a:	46bd      	mov	sp, r7
 800772c:	b005      	add	sp, #20
 800772e:	bd90      	pop	{r4, r7, pc}
 8007730:	20000d4c 	.word	0x20000d4c

08007734 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	210f      	movs	r1, #15
 8007742:	187b      	adds	r3, r7, r1
 8007744:	1c02      	adds	r2, r0, #0
 8007746:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007748:	187b      	adds	r3, r7, r1
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	4a0c      	ldr	r2, [pc, #48]	@ (8007780 <disk_read+0x4c>)
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	18d3      	adds	r3, r2, r3
 8007752:	3304      	adds	r3, #4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	689d      	ldr	r5, [r3, #8]
 8007758:	187b      	adds	r3, r7, r1
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	4a08      	ldr	r2, [pc, #32]	@ (8007780 <disk_read+0x4c>)
 800775e:	18d3      	adds	r3, r2, r3
 8007760:	7a18      	ldrb	r0, [r3, #8]
 8007762:	2617      	movs	r6, #23
 8007764:	19bc      	adds	r4, r7, r6
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	68b9      	ldr	r1, [r7, #8]
 800776c:	47a8      	blx	r5
 800776e:	0003      	movs	r3, r0
 8007770:	7023      	strb	r3, [r4, #0]
  return res;
 8007772:	19bb      	adds	r3, r7, r6
 8007774:	781b      	ldrb	r3, [r3, #0]
}
 8007776:	0018      	movs	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	b007      	add	sp, #28
 800777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800777e:	46c0      	nop			@ (mov r8, r8)
 8007780:	20000d4c 	.word	0x20000d4c

08007784 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60b9      	str	r1, [r7, #8]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	210f      	movs	r1, #15
 8007792:	187b      	adds	r3, r7, r1
 8007794:	1c02      	adds	r2, r0, #0
 8007796:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007798:	187b      	adds	r3, r7, r1
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	4a0c      	ldr	r2, [pc, #48]	@ (80077d0 <disk_write+0x4c>)
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	18d3      	adds	r3, r2, r3
 80077a2:	3304      	adds	r3, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	68dd      	ldr	r5, [r3, #12]
 80077a8:	187b      	adds	r3, r7, r1
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	4a08      	ldr	r2, [pc, #32]	@ (80077d0 <disk_write+0x4c>)
 80077ae:	18d3      	adds	r3, r2, r3
 80077b0:	7a18      	ldrb	r0, [r3, #8]
 80077b2:	2617      	movs	r6, #23
 80077b4:	19bc      	adds	r4, r7, r6
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	47a8      	blx	r5
 80077be:	0003      	movs	r3, r0
 80077c0:	7023      	strb	r3, [r4, #0]
  return res;
 80077c2:	19bb      	adds	r3, r7, r6
 80077c4:	781b      	ldrb	r3, [r3, #0]
}
 80077c6:	0018      	movs	r0, r3
 80077c8:	46bd      	mov	sp, r7
 80077ca:	b007      	add	sp, #28
 80077cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ce:	46c0      	nop			@ (mov r8, r8)
 80077d0:	20000d4c 	.word	0x20000d4c

080077d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80077d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	603a      	str	r2, [r7, #0]
 80077dc:	1dfb      	adds	r3, r7, #7
 80077de:	1c02      	adds	r2, r0, #0
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	1dbb      	adds	r3, r7, #6
 80077e4:	1c0a      	adds	r2, r1, #0
 80077e6:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80077e8:	1dfb      	adds	r3, r7, #7
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007820 <disk_ioctl+0x4c>)
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	18d3      	adds	r3, r2, r3
 80077f2:	3304      	adds	r3, #4
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	1dfa      	adds	r2, r7, #7
 80077fa:	7812      	ldrb	r2, [r2, #0]
 80077fc:	4908      	ldr	r1, [pc, #32]	@ (8007820 <disk_ioctl+0x4c>)
 80077fe:	188a      	adds	r2, r1, r2
 8007800:	7a10      	ldrb	r0, [r2, #8]
 8007802:	260f      	movs	r6, #15
 8007804:	19bc      	adds	r4, r7, r6
 8007806:	683d      	ldr	r5, [r7, #0]
 8007808:	1dba      	adds	r2, r7, #6
 800780a:	7811      	ldrb	r1, [r2, #0]
 800780c:	002a      	movs	r2, r5
 800780e:	4798      	blx	r3
 8007810:	0003      	movs	r3, r0
 8007812:	7023      	strb	r3, [r4, #0]
  return res;
 8007814:	19bb      	adds	r3, r7, r6
 8007816:	781b      	ldrb	r3, [r3, #0]
}
 8007818:	0018      	movs	r0, r3
 800781a:	46bd      	mov	sp, r7
 800781c:	b005      	add	sp, #20
 800781e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007820:	20000d4c 	.word	0x20000d4c

08007824 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3301      	adds	r3, #1
 8007830:	781a      	ldrb	r2, [r3, #0]
 8007832:	210e      	movs	r1, #14
 8007834:	187b      	adds	r3, r7, r1
 8007836:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 8007838:	187b      	adds	r3, r7, r1
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	b21a      	sxth	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	b21b      	sxth	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	b21a      	sxth	r2, r3
 800784a:	187b      	adds	r3, r7, r1
 800784c:	801a      	strh	r2, [r3, #0]
	return rv;
 800784e:	187b      	adds	r3, r7, r1
 8007850:	881b      	ldrh	r3, [r3, #0]
}
 8007852:	0018      	movs	r0, r3
 8007854:	46bd      	mov	sp, r7
 8007856:	b004      	add	sp, #16
 8007858:	bd80      	pop	{r7, pc}

0800785a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	3303      	adds	r3, #3
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	3202      	adds	r2, #2
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	3201      	adds	r2, #1
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	7812      	ldrb	r2, [r2, #0]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
	return rv;
 8007892:	68fb      	ldr	r3, [r7, #12]
}
 8007894:	0018      	movs	r0, r3
 8007896:	46bd      	mov	sp, r7
 8007898:	b004      	add	sp, #16
 800789a:	bd80      	pop	{r7, pc}

0800789c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	000a      	movs	r2, r1
 80078a6:	1cbb      	adds	r3, r7, #2
 80078a8:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	1c5a      	adds	r2, r3, #1
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	1cba      	adds	r2, r7, #2
 80078b2:	8812      	ldrh	r2, [r2, #0]
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	701a      	strb	r2, [r3, #0]
 80078b8:	1cbb      	adds	r3, r7, #2
 80078ba:	1cba      	adds	r2, r7, #2
 80078bc:	8812      	ldrh	r2, [r2, #0]
 80078be:	0a12      	lsrs	r2, r2, #8
 80078c0:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	1cba      	adds	r2, r7, #2
 80078ca:	8812      	ldrh	r2, [r2, #0]
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]
}
 80078d0:	46c0      	nop			@ (mov r8, r8)
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b002      	add	sp, #8
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	0a1b      	lsrs	r3, r3, #8
 80078f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	607a      	str	r2, [r7, #4]
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	0a1b      	lsrs	r3, r3, #8
 8007904:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	1c5a      	adds	r2, r3, #1
 800790a:	607a      	str	r2, [r7, #4]
 800790c:	683a      	ldr	r2, [r7, #0]
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	0a1b      	lsrs	r3, r3, #8
 8007916:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	701a      	strb	r2, [r3, #0]
}
 8007924:	46c0      	nop			@ (mov r8, r8)
 8007926:	46bd      	mov	sp, r7
 8007928:	b002      	add	sp, #8
 800792a:	bd80      	pop	{r7, pc}

0800792c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00d      	beq.n	8007962 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	1c53      	adds	r3, r2, #1
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	1c59      	adds	r1, r3, #1
 8007950:	6179      	str	r1, [r7, #20]
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3b01      	subs	r3, #1
 800795a:	607b      	str	r3, [r7, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f1      	bne.n	8007946 <mem_cpy+0x1a>
	}
}
 8007962:	46c0      	nop			@ (mov r8, r8)
 8007964:	46bd      	mov	sp, r7
 8007966:	b006      	add	sp, #24
 8007968:	bd80      	pop	{r7, pc}

0800796a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800796a:	b580      	push	{r7, lr}
 800796c:	b086      	sub	sp, #24
 800796e:	af00      	add	r7, sp, #0
 8007970:	60f8      	str	r0, [r7, #12]
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	617a      	str	r2, [r7, #20]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3b01      	subs	r3, #1
 800798a:	607b      	str	r3, [r7, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1f3      	bne.n	800797a <mem_set+0x10>
}
 8007992:	46c0      	nop			@ (mov r8, r8)
 8007994:	46c0      	nop			@ (mov r8, r8)
 8007996:	46bd      	mov	sp, r7
 8007998:	b006      	add	sp, #24
 800799a:	bd80      	pop	{r7, pc}

0800799c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800799c:	b580      	push	{r7, lr}
 800799e:	b088      	sub	sp, #32
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	61fb      	str	r3, [r7, #28]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	61fa      	str	r2, [r7, #28]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	0019      	movs	r1, r3
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	61ba      	str	r2, [r7, #24]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	1acb      	subs	r3, r1, r3
 80079c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	607b      	str	r3, [r7, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d002      	beq.n	80079dc <mem_cmp+0x40>
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d0eb      	beq.n	80079b4 <mem_cmp+0x18>

	return r;
 80079dc:	697b      	ldr	r3, [r7, #20]
}
 80079de:	0018      	movs	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b008      	add	sp, #32
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b082      	sub	sp, #8
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80079f0:	e002      	b.n	80079f8 <chk_chr+0x12>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3301      	adds	r3, #1
 80079f6:	607b      	str	r3, [r7, #4]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d005      	beq.n	8007a0c <chk_chr+0x26>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	001a      	movs	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d1f2      	bne.n	80079f2 <chk_chr+0xc>
	return *str;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
}
 8007a10:	0018      	movs	r0, r3
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b002      	add	sp, #8
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a22:	2300      	movs	r3, #0
 8007a24:	60bb      	str	r3, [r7, #8]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	60fb      	str	r3, [r7, #12]
 8007a2a:	e027      	b.n	8007a7c <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8007a2c:	4b25      	ldr	r3, [pc, #148]	@ (8007ac4 <chk_lock+0xac>)
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	0112      	lsls	r2, r2, #4
 8007a32:	58d3      	ldr	r3, [r2, r3]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d01c      	beq.n	8007a72 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007a38:	4b22      	ldr	r3, [pc, #136]	@ (8007ac4 <chk_lock+0xac>)
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	0112      	lsls	r2, r2, #4
 8007a3e:	58d2      	ldr	r2, [r2, r3]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d116      	bne.n	8007a76 <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 8007a48:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac4 <chk_lock+0xac>)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	18d3      	adds	r3, r2, r3
 8007a50:	3304      	adds	r3, #4
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d10c      	bne.n	8007a76 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8007a5c:	4a19      	ldr	r2, [pc, #100]	@ (8007ac4 <chk_lock+0xac>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	18d3      	adds	r3, r2, r3
 8007a64:	3308      	adds	r3, #8
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d102      	bne.n	8007a76 <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8007a70:	e007      	b.n	8007a82 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8007a72:	2301      	movs	r3, #1
 8007a74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d9d4      	bls.n	8007a2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d109      	bne.n	8007a9c <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <chk_lock+0x7c>
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d101      	bne.n	8007a98 <chk_lock+0x80>
 8007a94:	2300      	movs	r3, #0
 8007a96:	e011      	b.n	8007abc <chk_lock+0xa4>
 8007a98:	2312      	movs	r3, #18
 8007a9a:	e00f      	b.n	8007abc <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d109      	bne.n	8007ab6 <chk_lock+0x9e>
 8007aa2:	4a08      	ldr	r2, [pc, #32]	@ (8007ac4 <chk_lock+0xac>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	18d3      	adds	r3, r2, r3
 8007aaa:	330c      	adds	r3, #12
 8007aac:	881a      	ldrh	r2, [r3, #0]
 8007aae:	2380      	movs	r3, #128	@ 0x80
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d101      	bne.n	8007aba <chk_lock+0xa2>
 8007ab6:	2310      	movs	r3, #16
 8007ab8:	e000      	b.n	8007abc <chk_lock+0xa4>
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	0018      	movs	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b004      	add	sp, #16
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20000b2c 	.word	0x20000b2c

08007ac8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	607b      	str	r3, [r7, #4]
 8007ad2:	e002      	b.n	8007ada <enq_lock+0x12>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	607b      	str	r3, [r7, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d805      	bhi.n	8007aec <enq_lock+0x24>
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <enq_lock+0x38>)
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	0112      	lsls	r2, r2, #4
 8007ae6:	58d3      	ldr	r3, [r2, r3]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1f3      	bne.n	8007ad4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3b02      	subs	r3, #2
 8007af0:	1e5a      	subs	r2, r3, #1
 8007af2:	4193      	sbcs	r3, r2
 8007af4:	b2db      	uxtb	r3, r3
}
 8007af6:	0018      	movs	r0, r3
 8007af8:	46bd      	mov	sp, r7
 8007afa:	b002      	add	sp, #8
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	46c0      	nop			@ (mov r8, r8)
 8007b00:	20000b2c 	.word	0x20000b2c

08007b04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e01e      	b.n	8007b52 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8007b14:	4b3f      	ldr	r3, [pc, #252]	@ (8007c14 <inc_lock+0x110>)
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	0112      	lsls	r2, r2, #4
 8007b1a:	58d2      	ldr	r2, [r2, r3]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d113      	bne.n	8007b4c <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8007b24:	4a3b      	ldr	r2, [pc, #236]	@ (8007c14 <inc_lock+0x110>)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	18d3      	adds	r3, r2, r3
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d109      	bne.n	8007b4c <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 8007b38:	4a36      	ldr	r2, [pc, #216]	@ (8007c14 <inc_lock+0x110>)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	18d3      	adds	r3, r2, r3
 8007b40:	3308      	adds	r3, #8
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d006      	beq.n	8007b5a <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d9dd      	bls.n	8007b14 <inc_lock+0x10>
 8007b58:	e000      	b.n	8007b5c <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 8007b5a:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d130      	bne.n	8007bc4 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
 8007b66:	e002      	b.n	8007b6e <inc_lock+0x6a>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d805      	bhi.n	8007b80 <inc_lock+0x7c>
 8007b74:	4b27      	ldr	r3, [pc, #156]	@ (8007c14 <inc_lock+0x110>)
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	0112      	lsls	r2, r2, #4
 8007b7a:	58d3      	ldr	r3, [r2, r3]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1f3      	bne.n	8007b68 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d101      	bne.n	8007b8a <inc_lock+0x86>
 8007b86:	2300      	movs	r3, #0
 8007b88:	e03f      	b.n	8007c0a <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6819      	ldr	r1, [r3, #0]
 8007b8e:	4b21      	ldr	r3, [pc, #132]	@ (8007c14 <inc_lock+0x110>)
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	0112      	lsls	r2, r2, #4
 8007b94:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	491e      	ldr	r1, [pc, #120]	@ (8007c14 <inc_lock+0x110>)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	18cb      	adds	r3, r1, r3
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695a      	ldr	r2, [r3, #20]
 8007baa:	491a      	ldr	r1, [pc, #104]	@ (8007c14 <inc_lock+0x110>)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	18cb      	adds	r3, r1, r3
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007bb6:	4a17      	ldr	r2, [pc, #92]	@ (8007c14 <inc_lock+0x110>)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	18d3      	adds	r3, r2, r3
 8007bbe:	330c      	adds	r3, #12
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <inc_lock+0xda>
 8007bca:	4a12      	ldr	r2, [pc, #72]	@ (8007c14 <inc_lock+0x110>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	011b      	lsls	r3, r3, #4
 8007bd0:	18d3      	adds	r3, r2, r3
 8007bd2:	330c      	adds	r3, #12
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <inc_lock+0xda>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	e015      	b.n	8007c0a <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d108      	bne.n	8007bf6 <inc_lock+0xf2>
 8007be4:	4a0b      	ldr	r2, [pc, #44]	@ (8007c14 <inc_lock+0x110>)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	011b      	lsls	r3, r3, #4
 8007bea:	18d3      	adds	r3, r2, r3
 8007bec:	330c      	adds	r3, #12
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	e001      	b.n	8007bfa <inc_lock+0xf6>
 8007bf6:	2380      	movs	r3, #128	@ 0x80
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	4906      	ldr	r1, [pc, #24]	@ (8007c14 <inc_lock+0x110>)
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	0112      	lsls	r2, r2, #4
 8007c00:	188a      	adds	r2, r1, r2
 8007c02:	320c      	adds	r2, #12
 8007c04:	8013      	strh	r3, [r2, #0]

	return i + 1;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3301      	adds	r3, #1
}
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	46c0      	nop			@ (mov r8, r8)
 8007c14:	20000b2c 	.word	0x20000b2c

08007c18 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	607b      	str	r3, [r7, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d832      	bhi.n	8007c92 <dec_lock+0x7a>
		n = Files[i].ctr;
 8007c2c:	200e      	movs	r0, #14
 8007c2e:	183b      	adds	r3, r7, r0
 8007c30:	491d      	ldr	r1, [pc, #116]	@ (8007ca8 <dec_lock+0x90>)
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	0112      	lsls	r2, r2, #4
 8007c36:	188a      	adds	r2, r1, r2
 8007c38:	320c      	adds	r2, #12
 8007c3a:	8812      	ldrh	r2, [r2, #0]
 8007c3c:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007c3e:	183b      	adds	r3, r7, r0
 8007c40:	881a      	ldrh	r2, [r3, #0]
 8007c42:	2380      	movs	r3, #128	@ 0x80
 8007c44:	005b      	lsls	r3, r3, #1
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d102      	bne.n	8007c50 <dec_lock+0x38>
 8007c4a:	183b      	adds	r3, r7, r0
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007c50:	210e      	movs	r1, #14
 8007c52:	187b      	adds	r3, r7, r1
 8007c54:	881b      	ldrh	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <dec_lock+0x4c>
 8007c5a:	187b      	adds	r3, r7, r1
 8007c5c:	881a      	ldrh	r2, [r3, #0]
 8007c5e:	187b      	adds	r3, r7, r1
 8007c60:	3a01      	subs	r2, #1
 8007c62:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8007c64:	4a10      	ldr	r2, [pc, #64]	@ (8007ca8 <dec_lock+0x90>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	011b      	lsls	r3, r3, #4
 8007c6a:	18d3      	adds	r3, r2, r3
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	210e      	movs	r1, #14
 8007c70:	187a      	adds	r2, r7, r1
 8007c72:	8812      	ldrh	r2, [r2, #0]
 8007c74:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007c76:	187b      	adds	r3, r7, r1
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d104      	bne.n	8007c88 <dec_lock+0x70>
 8007c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca8 <dec_lock+0x90>)
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	0112      	lsls	r2, r2, #4
 8007c84:	2100      	movs	r1, #0
 8007c86:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 8007c88:	230d      	movs	r3, #13
 8007c8a:	18fb      	adds	r3, r7, r3
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	701a      	strb	r2, [r3, #0]
 8007c90:	e003      	b.n	8007c9a <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007c92:	230d      	movs	r3, #13
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	2202      	movs	r2, #2
 8007c98:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8007c9a:	230d      	movs	r3, #13
 8007c9c:	18fb      	adds	r3, r7, r3
 8007c9e:	781b      	ldrb	r3, [r3, #0]
}
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b004      	add	sp, #16
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20000b2c 	.word	0x20000b2c

08007cac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e00e      	b.n	8007cd8 <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007cba:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce8 <clear_lock+0x3c>)
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	0112      	lsls	r2, r2, #4
 8007cc0:	58d3      	ldr	r3, [r2, r3]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d104      	bne.n	8007cd2 <clear_lock+0x26>
 8007cc8:	4b07      	ldr	r3, [pc, #28]	@ (8007ce8 <clear_lock+0x3c>)
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	0112      	lsls	r2, r2, #4
 8007cce:	2100      	movs	r1, #0
 8007cd0:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d9ed      	bls.n	8007cba <clear_lock+0xe>
	}
}
 8007cde:	46c0      	nop			@ (mov r8, r8)
 8007ce0:	46c0      	nop			@ (mov r8, r8)
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	b004      	add	sp, #16
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000b2c 	.word	0x20000b2c

08007cec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007cec:	b590      	push	{r4, r7, lr}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007cf4:	240f      	movs	r4, #15
 8007cf6:	193b      	adds	r3, r7, r4
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	78db      	ldrb	r3, [r3, #3]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d034      	beq.n	8007d6e <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7858      	ldrb	r0, [r3, #1]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3334      	adds	r3, #52	@ 0x34
 8007d12:	0019      	movs	r1, r3
 8007d14:	697a      	ldr	r2, [r7, #20]
 8007d16:	2301      	movs	r3, #1
 8007d18:	f7ff fd34 	bl	8007784 <disk_write>
 8007d1c:	1e03      	subs	r3, r0, #0
 8007d1e:	d003      	beq.n	8007d28 <sync_window+0x3c>
			res = FR_DISK_ERR;
 8007d20:	193b      	adds	r3, r7, r4
 8007d22:	2201      	movs	r2, #1
 8007d24:	701a      	strb	r2, [r3, #0]
 8007d26:	e022      	b.n	8007d6e <sync_window+0x82>
		} else {
			fs->wflag = 0;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	1ad2      	subs	r2, r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d217      	bcs.n	8007d6e <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	789b      	ldrb	r3, [r3, #2]
 8007d42:	613b      	str	r3, [r7, #16]
 8007d44:	e010      	b.n	8007d68 <sync_window+0x7c>
					wsect += fs->fsize;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	18d3      	adds	r3, r2, r3
 8007d4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	7858      	ldrb	r0, [r3, #1]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3334      	adds	r3, #52	@ 0x34
 8007d58:	0019      	movs	r1, r3
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f7ff fd11 	bl	8007784 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d8eb      	bhi.n	8007d46 <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8007d6e:	230f      	movs	r3, #15
 8007d70:	18fb      	adds	r3, r7, r3
 8007d72:	781b      	ldrb	r3, [r3, #0]
}
 8007d74:	0018      	movs	r0, r3
 8007d76:	46bd      	mov	sp, r7
 8007d78:	b007      	add	sp, #28
 8007d7a:	bd90      	pop	{r4, r7, pc}

08007d7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007d7c:	b5b0      	push	{r4, r5, r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007d86:	250f      	movs	r5, #15
 8007d88:	197b      	adds	r3, r7, r5
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d01f      	beq.n	8007dd8 <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007d98:	197c      	adds	r4, r7, r5
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	f7ff ffa5 	bl	8007cec <sync_window>
 8007da2:	0003      	movs	r3, r0
 8007da4:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007da6:	002c      	movs	r4, r5
 8007da8:	193b      	adds	r3, r7, r4
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d113      	bne.n	8007dd8 <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7858      	ldrb	r0, [r3, #1]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3334      	adds	r3, #52	@ 0x34
 8007db8:	0019      	movs	r1, r3
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	f7ff fcb9 	bl	8007734 <disk_read>
 8007dc2:	1e03      	subs	r3, r0, #0
 8007dc4:	d005      	beq.n	8007dd2 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	425b      	negs	r3, r3
 8007dca:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007dcc:	193b      	adds	r3, r7, r4
 8007dce:	2201      	movs	r2, #1
 8007dd0:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8007dd8:	230f      	movs	r3, #15
 8007dda:	18fb      	adds	r3, r7, r3
 8007ddc:	781b      	ldrb	r3, [r3, #0]
}
 8007dde:	0018      	movs	r0, r3
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b004      	add	sp, #16
 8007de4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007de8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007de8:	b5b0      	push	{r4, r5, r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007df0:	250f      	movs	r5, #15
 8007df2:	197c      	adds	r4, r7, r5
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	0018      	movs	r0, r3
 8007df8:	f7ff ff78 	bl	8007cec <sync_window>
 8007dfc:	0003      	movs	r3, r0
 8007dfe:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007e00:	197b      	adds	r3, r7, r5
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d15d      	bne.n	8007ec4 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d14c      	bne.n	8007eaa <sync_fs+0xc2>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	791b      	ldrb	r3, [r3, #4]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d148      	bne.n	8007eaa <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3334      	adds	r3, #52	@ 0x34
 8007e1c:	2280      	movs	r2, #128	@ 0x80
 8007e1e:	0092      	lsls	r2, r2, #2
 8007e20:	2100      	movs	r1, #0
 8007e22:	0018      	movs	r0, r3
 8007e24:	f7ff fda1 	bl	800796a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3334      	adds	r3, #52	@ 0x34
 8007e2c:	33ff      	adds	r3, #255	@ 0xff
 8007e2e:	33ff      	adds	r3, #255	@ 0xff
 8007e30:	4a28      	ldr	r2, [pc, #160]	@ (8007ed4 <sync_fs+0xec>)
 8007e32:	0011      	movs	r1, r2
 8007e34:	0018      	movs	r0, r3
 8007e36:	f7ff fd31 	bl	800789c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3334      	adds	r3, #52	@ 0x34
 8007e3e:	4a26      	ldr	r2, [pc, #152]	@ (8007ed8 <sync_fs+0xf0>)
 8007e40:	0011      	movs	r1, r2
 8007e42:	0018      	movs	r0, r3
 8007e44:	f7ff fd48 	bl	80078d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	3334      	adds	r3, #52	@ 0x34
 8007e4c:	33e5      	adds	r3, #229	@ 0xe5
 8007e4e:	33ff      	adds	r3, #255	@ 0xff
 8007e50:	4a22      	ldr	r2, [pc, #136]	@ (8007edc <sync_fs+0xf4>)
 8007e52:	0011      	movs	r1, r2
 8007e54:	0018      	movs	r0, r3
 8007e56:	f7ff fd3f 	bl	80078d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3334      	adds	r3, #52	@ 0x34
 8007e5e:	33e9      	adds	r3, #233	@ 0xe9
 8007e60:	33ff      	adds	r3, #255	@ 0xff
 8007e62:	001a      	movs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	695b      	ldr	r3, [r3, #20]
 8007e68:	0019      	movs	r1, r3
 8007e6a:	0010      	movs	r0, r2
 8007e6c:	f7ff fd34 	bl	80078d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3334      	adds	r3, #52	@ 0x34
 8007e74:	33ed      	adds	r3, #237	@ 0xed
 8007e76:	33ff      	adds	r3, #255	@ 0xff
 8007e78:	001a      	movs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	0019      	movs	r1, r3
 8007e80:	0010      	movs	r0, r2
 8007e82:	f7ff fd29 	bl	80078d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a1b      	ldr	r3, [r3, #32]
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7858      	ldrb	r0, [r3, #1]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3334      	adds	r3, #52	@ 0x34
 8007e98:	0019      	movs	r1, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f7ff fc70 	bl	8007784 <disk_write>
			fs->fsi_flag = 0;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f7ff fc8e 	bl	80077d4 <disk_ioctl>
 8007eb8:	1e03      	subs	r3, r0, #0
 8007eba:	d003      	beq.n	8007ec4 <sync_fs+0xdc>
 8007ebc:	230f      	movs	r3, #15
 8007ebe:	18fb      	adds	r3, r7, r3
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	701a      	strb	r2, [r3, #0]
	}

	return res;
 8007ec4:	230f      	movs	r3, #15
 8007ec6:	18fb      	adds	r3, r7, r3
 8007ec8:	781b      	ldrb	r3, [r3, #0]
}
 8007eca:	0018      	movs	r0, r3
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b004      	add	sp, #16
 8007ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8007ed2:	46c0      	nop			@ (mov r8, r8)
 8007ed4:	0000aa55 	.word	0x0000aa55
 8007ed8:	41615252 	.word	0x41615252
 8007edc:	61417272 	.word	0x61417272

08007ee0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	3b02      	subs	r3, #2
 8007eee:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	3b02      	subs	r3, #2
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d301      	bcc.n	8007f00 <clust2sect+0x20>
 8007efc:	2300      	movs	r3, #0
 8007efe:	e007      	b.n	8007f10 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	895b      	ldrh	r3, [r3, #10]
 8007f04:	001a      	movs	r2, r3
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	435a      	muls	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0e:	18d3      	adds	r3, r2, r3
}
 8007f10:	0018      	movs	r0, r3
 8007f12:	46bd      	mov	sp, r7
 8007f14:	b002      	add	sp, #8
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d904      	bls.n	8007f38 <get_fat+0x20>
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d302      	bcc.n	8007f3e <get_fat+0x26>
		val = 1;	/* Internal error */
 8007f38:	2301      	movs	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e091      	b.n	8008062 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007f3e:	2301      	movs	r3, #1
 8007f40:	425b      	negs	r3, r3
 8007f42:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d063      	beq.n	8008014 <get_fat+0xfc>
 8007f4c:	dd00      	ble.n	8007f50 <get_fat+0x38>
 8007f4e:	e07e      	b.n	800804e <get_fat+0x136>
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d002      	beq.n	8007f5a <get_fat+0x42>
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d042      	beq.n	8007fde <get_fat+0xc6>
 8007f58:	e079      	b.n	800804e <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	085b      	lsrs	r3, r3, #1
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	18d3      	adds	r3, r2, r3
 8007f66:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	0a5b      	lsrs	r3, r3, #9
 8007f70:	18d2      	adds	r2, r2, r3
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	0011      	movs	r1, r2
 8007f76:	0018      	movs	r0, r3
 8007f78:	f7ff ff00 	bl	8007d7c <move_window>
 8007f7c:	1e03      	subs	r3, r0, #0
 8007f7e:	d169      	bne.n	8008054 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	60fa      	str	r2, [r7, #12]
 8007f86:	05db      	lsls	r3, r3, #23
 8007f88:	0ddb      	lsrs	r3, r3, #23
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	2134      	movs	r1, #52	@ 0x34
 8007f8e:	18d3      	adds	r3, r2, r3
 8007f90:	185b      	adds	r3, r3, r1
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	0a5b      	lsrs	r3, r3, #9
 8007f9e:	18d2      	adds	r2, r2, r3
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	0011      	movs	r1, r2
 8007fa4:	0018      	movs	r0, r3
 8007fa6:	f7ff fee9 	bl	8007d7c <move_window>
 8007faa:	1e03      	subs	r3, r0, #0
 8007fac:	d154      	bne.n	8008058 <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	05db      	lsls	r3, r3, #23
 8007fb2:	0ddb      	lsrs	r3, r3, #23
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	2134      	movs	r1, #52	@ 0x34
 8007fb8:	18d3      	adds	r3, r2, r3
 8007fba:	185b      	adds	r3, r3, r1
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	4013      	ands	r3, r2
 8007fcc:	d002      	beq.n	8007fd4 <get_fat+0xbc>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	091b      	lsrs	r3, r3, #4
 8007fd2:	e002      	b.n	8007fda <get_fat+0xc2>
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	051b      	lsls	r3, r3, #20
 8007fd8:	0d1b      	lsrs	r3, r3, #20
 8007fda:	617b      	str	r3, [r7, #20]
			break;
 8007fdc:	e041      	b.n	8008062 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	0a1b      	lsrs	r3, r3, #8
 8007fe6:	18d2      	adds	r2, r2, r3
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	0011      	movs	r1, r2
 8007fec:	0018      	movs	r0, r3
 8007fee:	f7ff fec5 	bl	8007d7c <move_window>
 8007ff2:	1e03      	subs	r3, r0, #0
 8007ff4:	d132      	bne.n	800805c <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	3334      	adds	r3, #52	@ 0x34
 8007ffa:	001a      	movs	r2, r3
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	0059      	lsls	r1, r3, #1
 8008000:	23ff      	movs	r3, #255	@ 0xff
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	400b      	ands	r3, r1
 8008006:	18d3      	adds	r3, r2, r3
 8008008:	0018      	movs	r0, r3
 800800a:	f7ff fc0b 	bl	8007824 <ld_word>
 800800e:	0003      	movs	r3, r0
 8008010:	617b      	str	r3, [r7, #20]
			break;
 8008012:	e026      	b.n	8008062 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	09db      	lsrs	r3, r3, #7
 800801c:	18d2      	adds	r2, r2, r3
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	0011      	movs	r1, r2
 8008022:	0018      	movs	r0, r3
 8008024:	f7ff feaa 	bl	8007d7c <move_window>
 8008028:	1e03      	subs	r3, r0, #0
 800802a:	d119      	bne.n	8008060 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	3334      	adds	r3, #52	@ 0x34
 8008030:	001a      	movs	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	0099      	lsls	r1, r3, #2
 8008036:	23fe      	movs	r3, #254	@ 0xfe
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	400b      	ands	r3, r1
 800803c:	18d3      	adds	r3, r2, r3
 800803e:	0018      	movs	r0, r3
 8008040:	f7ff fc0b 	bl	800785a <ld_dword>
 8008044:	0003      	movs	r3, r0
 8008046:	011b      	lsls	r3, r3, #4
 8008048:	091b      	lsrs	r3, r3, #4
 800804a:	617b      	str	r3, [r7, #20]
			break;
 800804c:	e009      	b.n	8008062 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800804e:	2301      	movs	r3, #1
 8008050:	617b      	str	r3, [r7, #20]
 8008052:	e006      	b.n	8008062 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008054:	46c0      	nop			@ (mov r8, r8)
 8008056:	e004      	b.n	8008062 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008058:	46c0      	nop			@ (mov r8, r8)
 800805a:	e002      	b.n	8008062 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800805c:	46c0      	nop			@ (mov r8, r8)
 800805e:	e000      	b.n	8008062 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008060:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8008062:	697b      	ldr	r3, [r7, #20]
}
 8008064:	0018      	movs	r0, r3
 8008066:	46bd      	mov	sp, r7
 8008068:	b006      	add	sp, #24
 800806a:	bd80      	pop	{r7, pc}

0800806c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800806c:	b5b0      	push	{r4, r5, r7, lr}
 800806e:	b088      	sub	sp, #32
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008078:	231f      	movs	r3, #31
 800807a:	18fb      	adds	r3, r7, r3
 800807c:	2202      	movs	r2, #2
 800807e:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d800      	bhi.n	8008088 <put_fat+0x1c>
 8008086:	e0eb      	b.n	8008260 <put_fat+0x1f4>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	429a      	cmp	r2, r3
 8008090:	d300      	bcc.n	8008094 <put_fat+0x28>
 8008092:	e0e5      	b.n	8008260 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d100      	bne.n	800809e <put_fat+0x32>
 800809c:	e0a1      	b.n	80081e2 <put_fat+0x176>
 800809e:	dd00      	ble.n	80080a2 <put_fat+0x36>
 80080a0:	e0de      	b.n	8008260 <put_fat+0x1f4>
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d003      	beq.n	80080ae <put_fat+0x42>
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d100      	bne.n	80080ac <put_fat+0x40>
 80080aa:	e075      	b.n	8008198 <put_fat+0x12c>
 80080ac:	e0d8      	b.n	8008260 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	61bb      	str	r3, [r7, #24]
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	085b      	lsrs	r3, r3, #1
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	18d3      	adds	r3, r2, r3
 80080ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	0a5b      	lsrs	r3, r3, #9
 80080c4:	18d2      	adds	r2, r2, r3
 80080c6:	251f      	movs	r5, #31
 80080c8:	197c      	adds	r4, r7, r5
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	0011      	movs	r1, r2
 80080ce:	0018      	movs	r0, r3
 80080d0:	f7ff fe54 	bl	8007d7c <move_window>
 80080d4:	0003      	movs	r3, r0
 80080d6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80080d8:	197b      	adds	r3, r7, r5
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d000      	beq.n	80080e2 <put_fat+0x76>
 80080e0:	e0b7      	b.n	8008252 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3334      	adds	r3, #52	@ 0x34
 80080e6:	001a      	movs	r2, r3
 80080e8:	69bb      	ldr	r3, [r7, #24]
 80080ea:	1c59      	adds	r1, r3, #1
 80080ec:	61b9      	str	r1, [r7, #24]
 80080ee:	05db      	lsls	r3, r3, #23
 80080f0:	0ddb      	lsrs	r3, r3, #23
 80080f2:	18d3      	adds	r3, r2, r3
 80080f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2201      	movs	r2, #1
 80080fa:	4013      	ands	r3, r2
 80080fc:	d00d      	beq.n	800811a <put_fat+0xae>
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	b25b      	sxtb	r3, r3
 8008104:	220f      	movs	r2, #15
 8008106:	4013      	ands	r3, r2
 8008108:	b25a      	sxtb	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	011b      	lsls	r3, r3, #4
 8008110:	b25b      	sxtb	r3, r3
 8008112:	4313      	orrs	r3, r2
 8008114:	b25b      	sxtb	r3, r3
 8008116:	b2db      	uxtb	r3, r3
 8008118:	e001      	b.n	800811e <put_fat+0xb2>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	0a5b      	lsrs	r3, r3, #9
 8008130:	18d2      	adds	r2, r2, r3
 8008132:	251f      	movs	r5, #31
 8008134:	197c      	adds	r4, r7, r5
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	0011      	movs	r1, r2
 800813a:	0018      	movs	r0, r3
 800813c:	f7ff fe1e 	bl	8007d7c <move_window>
 8008140:	0003      	movs	r3, r0
 8008142:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008144:	197b      	adds	r3, r7, r5
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d000      	beq.n	800814e <put_fat+0xe2>
 800814c:	e083      	b.n	8008256 <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3334      	adds	r3, #52	@ 0x34
 8008152:	001a      	movs	r2, r3
 8008154:	69bb      	ldr	r3, [r7, #24]
 8008156:	05db      	lsls	r3, r3, #23
 8008158:	0ddb      	lsrs	r3, r3, #23
 800815a:	18d3      	adds	r3, r2, r3
 800815c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2201      	movs	r2, #1
 8008162:	4013      	ands	r3, r2
 8008164:	d003      	beq.n	800816e <put_fat+0x102>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	091b      	lsrs	r3, r3, #4
 800816a:	b2db      	uxtb	r3, r3
 800816c:	e00e      	b.n	800818c <put_fat+0x120>
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	b25b      	sxtb	r3, r3
 8008174:	220f      	movs	r2, #15
 8008176:	4393      	bics	r3, r2
 8008178:	b25a      	sxtb	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	0a1b      	lsrs	r3, r3, #8
 800817e:	b25b      	sxtb	r3, r3
 8008180:	210f      	movs	r1, #15
 8008182:	400b      	ands	r3, r1
 8008184:	b25b      	sxtb	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b25b      	sxtb	r3, r3
 800818a:	b2db      	uxtb	r3, r3
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	70da      	strb	r2, [r3, #3]
			break;
 8008196:	e063      	b.n	8008260 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	18d2      	adds	r2, r2, r3
 80081a2:	251f      	movs	r5, #31
 80081a4:	197c      	adds	r4, r7, r5
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	0011      	movs	r1, r2
 80081aa:	0018      	movs	r0, r3
 80081ac:	f7ff fde6 	bl	8007d7c <move_window>
 80081b0:	0003      	movs	r3, r0
 80081b2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80081b4:	197b      	adds	r3, r7, r5
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d14e      	bne.n	800825a <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3334      	adds	r3, #52	@ 0x34
 80081c0:	001a      	movs	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	0059      	lsls	r1, r3, #1
 80081c6:	23ff      	movs	r3, #255	@ 0xff
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	400b      	ands	r3, r1
 80081cc:	18d3      	adds	r3, r2, r3
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	b292      	uxth	r2, r2
 80081d2:	0011      	movs	r1, r2
 80081d4:	0018      	movs	r0, r3
 80081d6:	f7ff fb61 	bl	800789c <st_word>
			fs->wflag = 1;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2201      	movs	r2, #1
 80081de:	70da      	strb	r2, [r3, #3]
			break;
 80081e0:	e03e      	b.n	8008260 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	09db      	lsrs	r3, r3, #7
 80081ea:	18d2      	adds	r2, r2, r3
 80081ec:	251f      	movs	r5, #31
 80081ee:	197c      	adds	r4, r7, r5
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	0011      	movs	r1, r2
 80081f4:	0018      	movs	r0, r3
 80081f6:	f7ff fdc1 	bl	8007d7c <move_window>
 80081fa:	0003      	movs	r3, r0
 80081fc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80081fe:	197b      	adds	r3, r7, r5
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d12b      	bne.n	800825e <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	011b      	lsls	r3, r3, #4
 800820a:	091c      	lsrs	r4, r3, #4
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3334      	adds	r3, #52	@ 0x34
 8008210:	001a      	movs	r2, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	0099      	lsls	r1, r3, #2
 8008216:	23fe      	movs	r3, #254	@ 0xfe
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	400b      	ands	r3, r1
 800821c:	18d3      	adds	r3, r2, r3
 800821e:	0018      	movs	r0, r3
 8008220:	f7ff fb1b 	bl	800785a <ld_dword>
 8008224:	0003      	movs	r3, r0
 8008226:	0f1b      	lsrs	r3, r3, #28
 8008228:	071b      	lsls	r3, r3, #28
 800822a:	4323      	orrs	r3, r4
 800822c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	3334      	adds	r3, #52	@ 0x34
 8008232:	001a      	movs	r2, r3
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	0099      	lsls	r1, r3, #2
 8008238:	23fe      	movs	r3, #254	@ 0xfe
 800823a:	005b      	lsls	r3, r3, #1
 800823c:	400b      	ands	r3, r1
 800823e:	18d3      	adds	r3, r2, r3
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	0011      	movs	r1, r2
 8008244:	0018      	movs	r0, r3
 8008246:	f7ff fb47 	bl	80078d8 <st_dword>
			fs->wflag = 1;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	70da      	strb	r2, [r3, #3]
			break;
 8008250:	e006      	b.n	8008260 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8008252:	46c0      	nop			@ (mov r8, r8)
 8008254:	e004      	b.n	8008260 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8008256:	46c0      	nop			@ (mov r8, r8)
 8008258:	e002      	b.n	8008260 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800825a:	46c0      	nop			@ (mov r8, r8)
 800825c:	e000      	b.n	8008260 <put_fat+0x1f4>
			if (res != FR_OK) break;
 800825e:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8008260:	231f      	movs	r3, #31
 8008262:	18fb      	adds	r3, r7, r3
 8008264:	781b      	ldrb	r3, [r3, #0]
}
 8008266:	0018      	movs	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	b008      	add	sp, #32
 800826c:	bdb0      	pop	{r4, r5, r7, pc}

0800826e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800826e:	b5b0      	push	{r4, r5, r7, lr}
 8008270:	b088      	sub	sp, #32
 8008272:	af00      	add	r7, sp, #0
 8008274:	60f8      	str	r0, [r7, #12]
 8008276:	60b9      	str	r1, [r7, #8]
 8008278:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800827a:	231f      	movs	r3, #31
 800827c:	18fb      	adds	r3, r7, r3
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d904      	bls.n	8008298 <remove_chain+0x2a>
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	429a      	cmp	r2, r3
 8008296:	d301      	bcc.n	800829c <remove_chain+0x2e>
 8008298:	2302      	movs	r3, #2
 800829a:	e057      	b.n	800834c <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d011      	beq.n	80082c6 <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80082a2:	251f      	movs	r5, #31
 80082a4:	197c      	adds	r4, r7, r5
 80082a6:	2301      	movs	r3, #1
 80082a8:	425a      	negs	r2, r3
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	0018      	movs	r0, r3
 80082b0:	f7ff fedc 	bl	800806c <put_fat>
 80082b4:	0003      	movs	r3, r0
 80082b6:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 80082b8:	197b      	adds	r3, r7, r5
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <remove_chain+0x58>
 80082c0:	197b      	adds	r3, r7, r5
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	e042      	b.n	800834c <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	0011      	movs	r1, r2
 80082cc:	0018      	movs	r0, r3
 80082ce:	f7ff fe23 	bl	8007f18 <get_fat>
 80082d2:	0003      	movs	r3, r0
 80082d4:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d035      	beq.n	8008348 <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d101      	bne.n	80082e6 <remove_chain+0x78>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e032      	b.n	800834c <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	3301      	adds	r3, #1
 80082ea:	d101      	bne.n	80082f0 <remove_chain+0x82>
 80082ec:	2301      	movs	r3, #1
 80082ee:	e02d      	b.n	800834c <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80082f0:	251f      	movs	r5, #31
 80082f2:	197c      	adds	r4, r7, r5
 80082f4:	68b9      	ldr	r1, [r7, #8]
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2200      	movs	r2, #0
 80082fa:	0018      	movs	r0, r3
 80082fc:	f7ff feb6 	bl	800806c <put_fat>
 8008300:	0003      	movs	r3, r0
 8008302:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8008304:	197b      	adds	r3, r7, r5
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <remove_chain+0xa4>
 800830c:	197b      	adds	r3, r7, r5
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	e01c      	b.n	800834c <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	695a      	ldr	r2, [r3, #20]
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	3b02      	subs	r3, #2
 800831c:	429a      	cmp	r2, r3
 800831e:	d20b      	bcs.n	8008338 <remove_chain+0xca>
			fs->free_clst++;
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	791b      	ldrb	r3, [r3, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	4313      	orrs	r3, r2
 8008332:	b2da      	uxtb	r2, r3
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	429a      	cmp	r2, r3
 8008344:	d3bf      	bcc.n	80082c6 <remove_chain+0x58>
 8008346:	e000      	b.n	800834a <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8008348:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	0018      	movs	r0, r3
 800834e:	46bd      	mov	sp, r7
 8008350:	b008      	add	sp, #32
 8008352:	bdb0      	pop	{r4, r5, r7, pc}

08008354 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008354:	b5b0      	push	{r4, r5, r7, lr}
 8008356:	b088      	sub	sp, #32
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10d      	bne.n	8008386 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d004      	beq.n	8008380 <create_chain+0x2c>
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	429a      	cmp	r2, r3
 800837e:	d31d      	bcc.n	80083bc <create_chain+0x68>
 8008380:	2301      	movs	r3, #1
 8008382:	61bb      	str	r3, [r7, #24]
 8008384:	e01a      	b.n	80083bc <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	0011      	movs	r1, r2
 800838c:	0018      	movs	r0, r3
 800838e:	f7ff fdc3 	bl	8007f18 <get_fat>
 8008392:	0003      	movs	r3, r0
 8008394:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d801      	bhi.n	80083a0 <create_chain+0x4c>
 800839c:	2301      	movs	r3, #1
 800839e:	e07b      	b.n	8008498 <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3301      	adds	r3, #1
 80083a4:	d101      	bne.n	80083aa <create_chain+0x56>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	e076      	b.n	8008498 <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d201      	bcs.n	80083b8 <create_chain+0x64>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	e06f      	b.n	8008498 <create_chain+0x144>
		scl = clst;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3301      	adds	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d307      	bcc.n	80083e0 <create_chain+0x8c>
				ncl = 2;
 80083d0:	2302      	movs	r3, #2
 80083d2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80083d4:	69fa      	ldr	r2, [r7, #28]
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d901      	bls.n	80083e0 <create_chain+0x8c>
 80083dc:	2300      	movs	r3, #0
 80083de:	e05b      	b.n	8008498 <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80083e0:	69fa      	ldr	r2, [r7, #28]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	0011      	movs	r1, r2
 80083e6:	0018      	movs	r0, r3
 80083e8:	f7ff fd96 	bl	8007f18 <get_fat>
 80083ec:	0003      	movs	r3, r0
 80083ee:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00d      	beq.n	8008412 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d002      	beq.n	8008402 <create_chain+0xae>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	3301      	adds	r3, #1
 8008400:	d101      	bne.n	8008406 <create_chain+0xb2>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	e048      	b.n	8008498 <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8008406:	69fa      	ldr	r2, [r7, #28]
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	429a      	cmp	r2, r3
 800840c:	d1d8      	bne.n	80083c0 <create_chain+0x6c>
 800840e:	2300      	movs	r3, #0
 8008410:	e042      	b.n	8008498 <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8008412:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008414:	2517      	movs	r5, #23
 8008416:	197c      	adds	r4, r7, r5
 8008418:	2301      	movs	r3, #1
 800841a:	425a      	negs	r2, r3
 800841c:	69f9      	ldr	r1, [r7, #28]
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	0018      	movs	r0, r3
 8008422:	f7ff fe23 	bl	800806c <put_fat>
 8008426:	0003      	movs	r3, r0
 8008428:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 800842a:	197b      	adds	r3, r7, r5
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10b      	bne.n	800844a <create_chain+0xf6>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d008      	beq.n	800844a <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008438:	197c      	adds	r4, r7, r5
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	6839      	ldr	r1, [r7, #0]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	0018      	movs	r0, r3
 8008442:	f7ff fe13 	bl	800806c <put_fat>
 8008446:	0003      	movs	r3, r0
 8008448:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800844a:	2317      	movs	r3, #23
 800844c:	18fb      	adds	r3, r7, r3
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d116      	bne.n	8008482 <create_chain+0x12e>
		fs->last_clst = ncl;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	69fa      	ldr	r2, [r7, #28]
 8008458:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	695a      	ldr	r2, [r3, #20]
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	3b02      	subs	r3, #2
 8008464:	429a      	cmp	r2, r3
 8008466:	d804      	bhi.n	8008472 <create_chain+0x11e>
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	1e5a      	subs	r2, r3, #1
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	791b      	ldrb	r3, [r3, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	4313      	orrs	r3, r2
 800847a:	b2da      	uxtb	r2, r3
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	711a      	strb	r2, [r3, #4]
 8008480:	e009      	b.n	8008496 <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008482:	2317      	movs	r3, #23
 8008484:	18fb      	adds	r3, r7, r3
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d102      	bne.n	8008492 <create_chain+0x13e>
 800848c:	2301      	movs	r3, #1
 800848e:	425b      	negs	r3, r3
 8008490:	e000      	b.n	8008494 <create_chain+0x140>
 8008492:	2301      	movs	r3, #1
 8008494:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008496:	69fb      	ldr	r3, [r7, #28]
}
 8008498:	0018      	movs	r0, r3
 800849a:	46bd      	mov	sp, r7
 800849c:	b008      	add	sp, #32
 800849e:	bdb0      	pop	{r4, r5, r7, pc}

080084a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b4:	3304      	adds	r3, #4
 80084b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	0a5a      	lsrs	r2, r3, #9
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	895b      	ldrh	r3, [r3, #10]
 80084c0:	0019      	movs	r1, r3
 80084c2:	0010      	movs	r0, r2
 80084c4:	f7f7 fe2a 	bl	800011c <__udivsi3>
 80084c8:	0003      	movs	r3, r0
 80084ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	1d1a      	adds	r2, r3, #4
 80084d0:	613a      	str	r2, [r7, #16]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <clmt_clust+0x40>
 80084dc:	2300      	movs	r3, #0
 80084de:	e010      	b.n	8008502 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d307      	bcc.n	80084f8 <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	3304      	adds	r3, #4
 80084f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80084f6:	e7e9      	b.n	80084cc <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 80084f8:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	18d3      	adds	r3, r2, r3
}
 8008502:	0018      	movs	r0, r3
 8008504:	46bd      	mov	sp, r7
 8008506:	b006      	add	sp, #24
 8008508:	bd80      	pop	{r7, pc}

0800850a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	2380      	movs	r3, #128	@ 0x80
 800851e:	039b      	lsls	r3, r3, #14
 8008520:	429a      	cmp	r2, r3
 8008522:	d203      	bcs.n	800852c <dir_sdi+0x22>
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	221f      	movs	r2, #31
 8008528:	4013      	ands	r3, r2
 800852a:	d001      	beq.n	8008530 <dir_sdi+0x26>
		return FR_INT_ERR;
 800852c:	2302      	movs	r3, #2
 800852e:	e066      	b.n	80085fe <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d106      	bne.n	8008550 <dir_sdi+0x46>
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d902      	bls.n	8008550 <dir_sdi+0x46>
		clst = fs->dirbase;
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800854e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10c      	bne.n	8008570 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	095b      	lsrs	r3, r3, #5
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	8912      	ldrh	r2, [r2, #8]
 800855e:	4293      	cmp	r3, r2
 8008560:	d301      	bcc.n	8008566 <dir_sdi+0x5c>
 8008562:	2302      	movs	r3, #2
 8008564:	e04b      	b.n	80085fe <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	61da      	str	r2, [r3, #28]
 800856e:	e02c      	b.n	80085ca <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	895b      	ldrh	r3, [r3, #10]
 8008574:	025b      	lsls	r3, r3, #9
 8008576:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008578:	e01a      	b.n	80085b0 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	0011      	movs	r1, r2
 8008580:	0018      	movs	r0, r3
 8008582:	f7ff fcc9 	bl	8007f18 <get_fat>
 8008586:	0003      	movs	r3, r0
 8008588:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	3301      	adds	r3, #1
 800858e:	d101      	bne.n	8008594 <dir_sdi+0x8a>
 8008590:	2301      	movs	r3, #1
 8008592:	e034      	b.n	80085fe <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d904      	bls.n	80085a4 <dir_sdi+0x9a>
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d301      	bcc.n	80085a8 <dir_sdi+0x9e>
 80085a4:	2302      	movs	r3, #2
 80085a6:	e02a      	b.n	80085fe <dir_sdi+0xf4>
			ofs -= csz;
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d2e0      	bcs.n	800857a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	0011      	movs	r1, r2
 80085be:	0018      	movs	r0, r3
 80085c0:	f7ff fc8e 	bl	8007ee0 <clust2sect>
 80085c4:	0002      	movs	r2, r0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	69db      	ldr	r3, [r3, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <dir_sdi+0xd2>
 80085d8:	2302      	movs	r3, #2
 80085da:	e010      	b.n	80085fe <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	69da      	ldr	r2, [r3, #28]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	0a5b      	lsrs	r3, r3, #9
 80085e4:	18d2      	adds	r2, r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	3334      	adds	r3, #52	@ 0x34
 80085ee:	001a      	movs	r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	05db      	lsls	r3, r3, #23
 80085f4:	0ddb      	lsrs	r3, r3, #23
 80085f6:	18d2      	adds	r2, r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	0018      	movs	r0, r3
 8008600:	46bd      	mov	sp, r7
 8008602:	b006      	add	sp, #24
 8008604:	bd80      	pop	{r7, pc}

08008606 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	3320      	adds	r3, #32
 800861c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d004      	beq.n	8008630 <dir_next+0x2a>
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	2380      	movs	r3, #128	@ 0x80
 800862a:	039b      	lsls	r3, r3, #14
 800862c:	429a      	cmp	r2, r3
 800862e:	d301      	bcc.n	8008634 <dir_next+0x2e>
 8008630:	2304      	movs	r3, #4
 8008632:	e0ad      	b.n	8008790 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	05db      	lsls	r3, r3, #23
 8008638:	0ddb      	lsrs	r3, r3, #23
 800863a:	d000      	beq.n	800863e <dir_next+0x38>
 800863c:	e09b      	b.n	8008776 <dir_next+0x170>
		dp->sect++;				/* Next sector */
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10b      	bne.n	8008668 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	095b      	lsrs	r3, r3, #5
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	8912      	ldrh	r2, [r2, #8]
 8008658:	4293      	cmp	r3, r2
 800865a:	d200      	bcs.n	800865e <dir_next+0x58>
 800865c:	e08b      	b.n	8008776 <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	61da      	str	r2, [r3, #28]
 8008664:	2304      	movs	r3, #4
 8008666:	e093      	b.n	8008790 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	0a5b      	lsrs	r3, r3, #9
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	8952      	ldrh	r2, [r2, #10]
 8008670:	3a01      	subs	r2, #1
 8008672:	4013      	ands	r3, r2
 8008674:	d000      	beq.n	8008678 <dir_next+0x72>
 8008676:	e07e      	b.n	8008776 <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	0019      	movs	r1, r3
 8008680:	0010      	movs	r0, r2
 8008682:	f7ff fc49 	bl	8007f18 <get_fat>
 8008686:	0003      	movs	r3, r0
 8008688:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d801      	bhi.n	8008694 <dir_next+0x8e>
 8008690:	2302      	movs	r3, #2
 8008692:	e07d      	b.n	8008790 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	3301      	adds	r3, #1
 8008698:	d101      	bne.n	800869e <dir_next+0x98>
 800869a:	2301      	movs	r3, #1
 800869c:	e078      	b.n	8008790 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d35a      	bcc.n	800875e <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d104      	bne.n	80086b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	61da      	str	r2, [r3, #28]
 80086b4:	2304      	movs	r3, #4
 80086b6:	e06b      	b.n	8008790 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	699b      	ldr	r3, [r3, #24]
 80086be:	0019      	movs	r1, r3
 80086c0:	0010      	movs	r0, r2
 80086c2:	f7ff fe47 	bl	8008354 <create_chain>
 80086c6:	0003      	movs	r3, r0
 80086c8:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <dir_next+0xce>
 80086d0:	2307      	movs	r3, #7
 80086d2:	e05d      	b.n	8008790 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d101      	bne.n	80086de <dir_next+0xd8>
 80086da:	2302      	movs	r3, #2
 80086dc:	e058      	b.n	8008790 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	3301      	adds	r3, #1
 80086e2:	d101      	bne.n	80086e8 <dir_next+0xe2>
 80086e4:	2301      	movs	r3, #1
 80086e6:	e053      	b.n	8008790 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	0018      	movs	r0, r3
 80086ec:	f7ff fafe 	bl	8007cec <sync_window>
 80086f0:	1e03      	subs	r3, r0, #0
 80086f2:	d001      	beq.n	80086f8 <dir_next+0xf2>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e04b      	b.n	8008790 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3334      	adds	r3, #52	@ 0x34
 80086fc:	2280      	movs	r2, #128	@ 0x80
 80086fe:	0092      	lsls	r2, r2, #2
 8008700:	2100      	movs	r1, #0
 8008702:	0018      	movs	r0, r3
 8008704:	f7ff f931 	bl	800796a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008708:	2300      	movs	r3, #0
 800870a:	613b      	str	r3, [r7, #16]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	0011      	movs	r1, r2
 8008712:	0018      	movs	r0, r3
 8008714:	f7ff fbe4 	bl	8007ee0 <clust2sect>
 8008718:	0002      	movs	r2, r0
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	631a      	str	r2, [r3, #48]	@ 0x30
 800871e:	e012      	b.n	8008746 <dir_next+0x140>
						fs->wflag = 1;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	0018      	movs	r0, r3
 800872a:	f7ff fadf 	bl	8007cec <sync_window>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d001      	beq.n	8008736 <dir_next+0x130>
 8008732:	2301      	movs	r3, #1
 8008734:	e02c      	b.n	8008790 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	631a      	str	r2, [r3, #48]	@ 0x30
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	895b      	ldrh	r3, [r3, #10]
 800874a:	001a      	movs	r2, r3
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	4293      	cmp	r3, r2
 8008750:	d3e6      	bcc.n	8008720 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	1ad2      	subs	r2, r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	0011      	movs	r1, r2
 800876a:	0018      	movs	r0, r3
 800876c:	f7ff fbb8 	bl	8007ee0 <clust2sect>
 8008770:	0002      	movs	r2, r0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3334      	adds	r3, #52	@ 0x34
 8008780:	001a      	movs	r2, r3
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	05db      	lsls	r3, r3, #23
 8008786:	0ddb      	lsrs	r3, r3, #23
 8008788:	18d2      	adds	r2, r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	0018      	movs	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	b006      	add	sp, #24
 8008796:	bd80      	pop	{r7, pc}

08008798 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008798:	b5b0      	push	{r4, r5, r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80087a8:	2517      	movs	r5, #23
 80087aa:	197c      	adds	r4, r7, r5
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2100      	movs	r1, #0
 80087b0:	0018      	movs	r0, r3
 80087b2:	f7ff feaa 	bl	800850a <dir_sdi>
 80087b6:	0003      	movs	r3, r0
 80087b8:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80087ba:	197b      	adds	r3, r7, r5
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d133      	bne.n	800882a <dir_alloc+0x92>
		n = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	69da      	ldr	r2, [r3, #28]
 80087ca:	2517      	movs	r5, #23
 80087cc:	197c      	adds	r4, r7, r5
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	0011      	movs	r1, r2
 80087d2:	0018      	movs	r0, r3
 80087d4:	f7ff fad2 	bl	8007d7c <move_window>
 80087d8:	0003      	movs	r3, r0
 80087da:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80087dc:	197b      	adds	r3, r7, r5
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d121      	bne.n	8008828 <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2be5      	cmp	r3, #229	@ 0xe5
 80087ec:	d004      	beq.n	80087f8 <dir_alloc+0x60>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d107      	bne.n	8008808 <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	3301      	adds	r3, #1
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	429a      	cmp	r2, r3
 8008804:	d102      	bne.n	800880c <dir_alloc+0x74>
 8008806:	e010      	b.n	800882a <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008808:	2300      	movs	r3, #0
 800880a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800880c:	2517      	movs	r5, #23
 800880e:	197c      	adds	r4, r7, r5
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2101      	movs	r1, #1
 8008814:	0018      	movs	r0, r3
 8008816:	f7ff fef6 	bl	8008606 <dir_next>
 800881a:	0003      	movs	r3, r0
 800881c:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800881e:	197b      	adds	r3, r7, r5
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0cf      	beq.n	80087c6 <dir_alloc+0x2e>
 8008826:	e000      	b.n	800882a <dir_alloc+0x92>
			if (res != FR_OK) break;
 8008828:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800882a:	2217      	movs	r2, #23
 800882c:	18bb      	adds	r3, r7, r2
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b04      	cmp	r3, #4
 8008832:	d102      	bne.n	800883a <dir_alloc+0xa2>
 8008834:	18bb      	adds	r3, r7, r2
 8008836:	2207      	movs	r2, #7
 8008838:	701a      	strb	r2, [r3, #0]
	return res;
 800883a:	2317      	movs	r3, #23
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	781b      	ldrb	r3, [r3, #0]
}
 8008840:	0018      	movs	r0, r3
 8008842:	46bd      	mov	sp, r7
 8008844:	b006      	add	sp, #24
 8008846:	bdb0      	pop	{r4, r5, r7, pc}

08008848 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	331a      	adds	r3, #26
 8008856:	0018      	movs	r0, r3
 8008858:	f7fe ffe4 	bl	8007824 <ld_word>
 800885c:	0003      	movs	r3, r0
 800885e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b03      	cmp	r3, #3
 8008866:	d109      	bne.n	800887c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	3314      	adds	r3, #20
 800886c:	0018      	movs	r0, r3
 800886e:	f7fe ffd9 	bl	8007824 <ld_word>
 8008872:	0003      	movs	r3, r0
 8008874:	041b      	lsls	r3, r3, #16
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800887c:	68fb      	ldr	r3, [r7, #12]
}
 800887e:	0018      	movs	r0, r3
 8008880:	46bd      	mov	sp, r7
 8008882:	b004      	add	sp, #16
 8008884:	bd80      	pop	{r7, pc}

08008886 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	331a      	adds	r3, #26
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	b292      	uxth	r2, r2
 800889a:	0011      	movs	r1, r2
 800889c:	0018      	movs	r0, r3
 800889e:	f7fe fffd 	bl	800789c <st_word>
	if (fs->fs_type == FS_FAT32) {
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d109      	bne.n	80088be <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	3314      	adds	r3, #20
 80088ae:	001a      	movs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	0c1b      	lsrs	r3, r3, #16
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	0019      	movs	r1, r3
 80088b8:	0010      	movs	r0, r2
 80088ba:	f7fe ffef 	bl	800789c <st_word>
	}
}
 80088be:	46c0      	nop			@ (mov r8, r8)
 80088c0:	46bd      	mov	sp, r7
 80088c2:	b004      	add	sp, #16
 80088c4:	bd80      	pop	{r7, pc}
	...

080088c8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80088c8:	b5b0      	push	{r4, r5, r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	331a      	adds	r3, #26
 80088d6:	0018      	movs	r0, r3
 80088d8:	f7fe ffa4 	bl	8007824 <ld_word>
 80088dc:	1e03      	subs	r3, r0, #0
 80088de:	d001      	beq.n	80088e4 <cmp_lfn+0x1c>
 80088e0:	2300      	movs	r3, #0
 80088e2:	e068      	b.n	80089b6 <cmp_lfn+0xee>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	001a      	movs	r2, r3
 80088ea:	233f      	movs	r3, #63	@ 0x3f
 80088ec:	4013      	ands	r3, r2
 80088ee:	1e5a      	subs	r2, r3, #1
 80088f0:	0013      	movs	r3, r2
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	189b      	adds	r3, r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	189b      	adds	r3, r3, r2
 80088fa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80088fc:	230e      	movs	r3, #14
 80088fe:	18fb      	adds	r3, r7, r3
 8008900:	2201      	movs	r2, #1
 8008902:	801a      	strh	r2, [r3, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	613b      	str	r3, [r7, #16]
 8008908:	e03d      	b.n	8008986 <cmp_lfn+0xbe>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800890a:	4a2d      	ldr	r2, [pc, #180]	@ (80089c0 <cmp_lfn+0xf8>)
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	18d3      	adds	r3, r2, r3
 8008910:	781b      	ldrb	r3, [r3, #0]
 8008912:	001a      	movs	r2, r3
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	189b      	adds	r3, r3, r2
 8008918:	250c      	movs	r5, #12
 800891a:	197c      	adds	r4, r7, r5
 800891c:	0018      	movs	r0, r3
 800891e:	f7fe ff81 	bl	8007824 <ld_word>
 8008922:	0003      	movs	r3, r0
 8008924:	8023      	strh	r3, [r4, #0]
		if (wc) {
 8008926:	230e      	movs	r3, #14
 8008928:	18fb      	adds	r3, r7, r3
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01f      	beq.n	8008970 <cmp_lfn+0xa8>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2bfe      	cmp	r3, #254	@ 0xfe
 8008934:	d813      	bhi.n	800895e <cmp_lfn+0x96>
 8008936:	197b      	adds	r3, r7, r5
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	0018      	movs	r0, r3
 800893c:	f001 ff4a 	bl	800a7d4 <ff_wtoupper>
 8008940:	0003      	movs	r3, r0
 8008942:	001c      	movs	r4, r3
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	617a      	str	r2, [r7, #20]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	18d3      	adds	r3, r2, r3
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	0018      	movs	r0, r3
 8008954:	f001 ff3e 	bl	800a7d4 <ff_wtoupper>
 8008958:	0003      	movs	r3, r0
 800895a:	429c      	cmp	r4, r3
 800895c:	d001      	beq.n	8008962 <cmp_lfn+0x9a>
				return 0;					/* Not matched */
 800895e:	2300      	movs	r3, #0
 8008960:	e029      	b.n	80089b6 <cmp_lfn+0xee>
			}
			wc = uc;
 8008962:	230e      	movs	r3, #14
 8008964:	18fb      	adds	r3, r7, r3
 8008966:	220c      	movs	r2, #12
 8008968:	18ba      	adds	r2, r7, r2
 800896a:	8812      	ldrh	r2, [r2, #0]
 800896c:	801a      	strh	r2, [r3, #0]
 800896e:	e007      	b.n	8008980 <cmp_lfn+0xb8>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8008970:	230c      	movs	r3, #12
 8008972:	18fb      	adds	r3, r7, r3
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	4a13      	ldr	r2, [pc, #76]	@ (80089c4 <cmp_lfn+0xfc>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d001      	beq.n	8008980 <cmp_lfn+0xb8>
 800897c:	2300      	movs	r3, #0
 800897e:	e01a      	b.n	80089b6 <cmp_lfn+0xee>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	3301      	adds	r3, #1
 8008984:	613b      	str	r3, [r7, #16]
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2b0c      	cmp	r3, #12
 800898a:	d9be      	bls.n	800890a <cmp_lfn+0x42>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	001a      	movs	r2, r3
 8008992:	2340      	movs	r3, #64	@ 0x40
 8008994:	4013      	ands	r3, r2
 8008996:	d00d      	beq.n	80089b4 <cmp_lfn+0xec>
 8008998:	230e      	movs	r3, #14
 800899a:	18fb      	adds	r3, r7, r3
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d008      	beq.n	80089b4 <cmp_lfn+0xec>
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	005b      	lsls	r3, r3, #1
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	18d3      	adds	r3, r2, r3
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <cmp_lfn+0xec>
 80089b0:	2300      	movs	r3, #0
 80089b2:	e000      	b.n	80089b6 <cmp_lfn+0xee>

	return 1;		/* The part of LFN matched */
 80089b4:	2301      	movs	r3, #1
}
 80089b6:	0018      	movs	r0, r3
 80089b8:	46bd      	mov	sp, r7
 80089ba:	b006      	add	sp, #24
 80089bc:	bdb0      	pop	{r4, r5, r7, pc}
 80089be:	46c0      	nop			@ (mov r8, r8)
 80089c0:	0800b90c 	.word	0x0800b90c
 80089c4:	0000ffff 	.word	0x0000ffff

080089c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b089      	sub	sp, #36	@ 0x24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	0019      	movs	r1, r3
 80089d4:	1dfb      	adds	r3, r7, #7
 80089d6:	701a      	strb	r2, [r3, #0]
 80089d8:	1dbb      	adds	r3, r7, #6
 80089da:	1c0a      	adds	r2, r1, #0
 80089dc:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	330d      	adds	r3, #13
 80089e2:	1dba      	adds	r2, r7, #6
 80089e4:	7812      	ldrb	r2, [r2, #0]
 80089e6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	330b      	adds	r3, #11
 80089ec:	220f      	movs	r2, #15
 80089ee:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	330c      	adds	r3, #12
 80089f4:	2200      	movs	r2, #0
 80089f6:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	331a      	adds	r3, #26
 80089fc:	2100      	movs	r1, #0
 80089fe:	0018      	movs	r0, r3
 8008a00:	f7fe ff4c 	bl	800789c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008a04:	1dfb      	adds	r3, r7, #7
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	1e5a      	subs	r2, r3, #1
 8008a0a:	0013      	movs	r3, r2
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	189b      	adds	r3, r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	189b      	adds	r3, r3, r2
 8008a14:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008a16:	2316      	movs	r3, #22
 8008a18:	18fb      	adds	r3, r7, r3
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	801a      	strh	r2, [r3, #0]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008a22:	2116      	movs	r1, #22
 8008a24:	187b      	adds	r3, r7, r1
 8008a26:	881b      	ldrh	r3, [r3, #0]
 8008a28:	4a21      	ldr	r2, [pc, #132]	@ (8008ab0 <put_lfn+0xe8>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d008      	beq.n	8008a40 <put_lfn+0x78>
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	61fa      	str	r2, [r7, #28]
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	18d2      	adds	r2, r2, r3
 8008a3a:	187b      	adds	r3, r7, r1
 8008a3c:	8812      	ldrh	r2, [r2, #0]
 8008a3e:	801a      	strh	r2, [r3, #0]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008a40:	4a1c      	ldr	r2, [pc, #112]	@ (8008ab4 <put_lfn+0xec>)
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	18d3      	adds	r3, r2, r3
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	001a      	movs	r2, r3
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	189a      	adds	r2, r3, r2
 8008a4e:	2416      	movs	r4, #22
 8008a50:	193b      	adds	r3, r7, r4
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	0019      	movs	r1, r3
 8008a56:	0010      	movs	r0, r2
 8008a58:	f7fe ff20 	bl	800789c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008a5c:	0022      	movs	r2, r4
 8008a5e:	18bb      	adds	r3, r7, r2
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d103      	bne.n	8008a6e <put_lfn+0xa6>
 8008a66:	18bb      	adds	r3, r7, r2
 8008a68:	2201      	movs	r2, #1
 8008a6a:	4252      	negs	r2, r2
 8008a6c:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	3301      	adds	r3, #1
 8008a72:	61bb      	str	r3, [r7, #24]
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b0c      	cmp	r3, #12
 8008a78:	d9d3      	bls.n	8008a22 <put_lfn+0x5a>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008a7a:	2316      	movs	r3, #22
 8008a7c:	18fb      	adds	r3, r7, r3
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab0 <put_lfn+0xe8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d006      	beq.n	8008a94 <put_lfn+0xcc>
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	18d3      	adds	r3, r2, r3
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d105      	bne.n	8008aa0 <put_lfn+0xd8>
 8008a94:	1dfb      	adds	r3, r7, #7
 8008a96:	1dfa      	adds	r2, r7, #7
 8008a98:	7812      	ldrb	r2, [r2, #0]
 8008a9a:	2140      	movs	r1, #64	@ 0x40
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	1dfa      	adds	r2, r7, #7
 8008aa4:	7812      	ldrb	r2, [r2, #0]
 8008aa6:	701a      	strb	r2, [r3, #0]
}
 8008aa8:	46c0      	nop			@ (mov r8, r8)
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	b009      	add	sp, #36	@ 0x24
 8008aae:	bd90      	pop	{r4, r7, pc}
 8008ab0:	0000ffff 	.word	0x0000ffff
 8008ab4:	0800b90c 	.word	0x0800b90c

08008ab8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08c      	sub	sp, #48	@ 0x30
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	220b      	movs	r2, #11
 8008acc:	0018      	movs	r0, r3
 8008ace:	f7fe ff2d 	bl	800792c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	d92f      	bls.n	8008b38 <gen_numname+0x80>
		sr = seq;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008adc:	e026      	b.n	8008b2c <gen_numname+0x74>
			wc = *lfn++;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	1c9a      	adds	r2, r3, #2
 8008ae2:	607a      	str	r2, [r7, #4]
 8008ae4:	2222      	movs	r2, #34	@ 0x22
 8008ae6:	18ba      	adds	r2, r7, r2
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	8013      	strh	r3, [r2, #0]
			for (i = 0; i < 16; i++) {
 8008aec:	2300      	movs	r3, #0
 8008aee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008af0:	e019      	b.n	8008b26 <gen_numname+0x6e>
				sr = (sr << 1) + (wc & 1);
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	005a      	lsls	r2, r3, #1
 8008af6:	2022      	movs	r0, #34	@ 0x22
 8008af8:	183b      	adds	r3, r7, r0
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	2101      	movs	r1, #1
 8008afe:	400b      	ands	r3, r1
 8008b00:	18d3      	adds	r3, r2, r3
 8008b02:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008b04:	183b      	adds	r3, r7, r0
 8008b06:	183a      	adds	r2, r7, r0
 8008b08:	8812      	ldrh	r2, [r2, #0]
 8008b0a:	0852      	lsrs	r2, r2, #1
 8008b0c:	801a      	strh	r2, [r3, #0]
				if (sr & 0x10000) sr ^= 0x11021;
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	2380      	movs	r3, #128	@ 0x80
 8008b12:	025b      	lsls	r3, r3, #9
 8008b14:	4013      	ands	r3, r2
 8008b16:	d003      	beq.n	8008b20 <gen_numname+0x68>
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	4a30      	ldr	r2, [pc, #192]	@ (8008bdc <gen_numname+0x124>)
 8008b1c:	4053      	eors	r3, r2
 8008b1e:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	3301      	adds	r3, #1
 8008b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b28:	2b0f      	cmp	r3, #15
 8008b2a:	d9e2      	bls.n	8008af2 <gen_numname+0x3a>
		while (*lfn) {	/* Create a CRC */
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	881b      	ldrh	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1d4      	bne.n	8008ade <gen_numname+0x26>
			}
		}
		seq = (UINT)sr;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008b38:	2307      	movs	r3, #7
 8008b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	220f      	movs	r2, #15
 8008b42:	4013      	ands	r3, r2
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	212f      	movs	r1, #47	@ 0x2f
 8008b48:	187b      	adds	r3, r7, r1
 8008b4a:	3230      	adds	r2, #48	@ 0x30
 8008b4c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
 8008b4e:	187b      	adds	r3, r7, r1
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b39      	cmp	r3, #57	@ 0x39
 8008b54:	d904      	bls.n	8008b60 <gen_numname+0xa8>
 8008b56:	187b      	adds	r3, r7, r1
 8008b58:	187a      	adds	r2, r7, r1
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	3207      	adds	r2, #7
 8008b5e:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
 8008b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b62:	1e5a      	subs	r2, r3, #1
 8008b64:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b66:	2014      	movs	r0, #20
 8008b68:	183a      	adds	r2, r7, r0
 8008b6a:	212f      	movs	r1, #47	@ 0x2f
 8008b6c:	1879      	adds	r1, r7, r1
 8008b6e:	7809      	ldrb	r1, [r1, #0]
 8008b70:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	091b      	lsrs	r3, r3, #4
 8008b76:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1de      	bne.n	8008b3c <gen_numname+0x84>
	ns[i] = '~';
 8008b7e:	183a      	adds	r2, r7, r0
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	18d3      	adds	r3, r2, r3
 8008b84:	227e      	movs	r2, #126	@ 0x7e
 8008b86:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008b88:	2300      	movs	r3, #0
 8008b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b8c:	e002      	b.n	8008b94 <gen_numname+0xdc>
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	3301      	adds	r3, #1
 8008b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d205      	bcs.n	8008ba8 <gen_numname+0xf0>
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	18d3      	adds	r3, r2, r3
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b20      	cmp	r3, #32
 8008ba6:	d1f2      	bne.n	8008b8e <gen_numname+0xd6>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008baa:	2b07      	cmp	r3, #7
 8008bac:	d806      	bhi.n	8008bbc <gen_numname+0x104>
 8008bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb0:	1c5a      	adds	r2, r3, #1
 8008bb2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008bb4:	2214      	movs	r2, #20
 8008bb6:	18ba      	adds	r2, r7, r2
 8008bb8:	5cd1      	ldrb	r1, [r2, r3]
 8008bba:	e000      	b.n	8008bbe <gen_numname+0x106>
 8008bbc:	2120      	movs	r1, #32
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008bc4:	68fa      	ldr	r2, [r7, #12]
 8008bc6:	18d3      	adds	r3, r2, r3
 8008bc8:	1c0a      	adds	r2, r1, #0
 8008bca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	2b07      	cmp	r3, #7
 8008bd0:	d9ea      	bls.n	8008ba8 <gen_numname+0xf0>
}
 8008bd2:	46c0      	nop			@ (mov r8, r8)
 8008bd4:	46c0      	nop			@ (mov r8, r8)
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b00c      	add	sp, #48	@ 0x30
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	00011021 	.word	0x00011021

08008be0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008be8:	230f      	movs	r3, #15
 8008bea:	18fb      	adds	r3, r7, r3
 8008bec:	2200      	movs	r2, #0
 8008bee:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
 8008bf0:	230b      	movs	r3, #11
 8008bf2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8008bf4:	200f      	movs	r0, #15
 8008bf6:	183b      	adds	r3, r7, r0
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	0852      	lsrs	r2, r2, #1
 8008bfe:	01db      	lsls	r3, r3, #7
 8008c00:	4313      	orrs	r3, r2
 8008c02:	b2d9      	uxtb	r1, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	607a      	str	r2, [r7, #4]
 8008c0a:	781a      	ldrb	r2, [r3, #0]
 8008c0c:	183b      	adds	r3, r7, r0
 8008c0e:	188a      	adds	r2, r1, r2
 8008c10:	701a      	strb	r2, [r3, #0]
	} while (--n);
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	60bb      	str	r3, [r7, #8]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1ea      	bne.n	8008bf4 <sum_sfn+0x14>
	return sum;
 8008c1e:	183b      	adds	r3, r7, r0
 8008c20:	781b      	ldrb	r3, [r3, #0]
}
 8008c22:	0018      	movs	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	b004      	add	sp, #16
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008c2a:	b5b0      	push	{r4, r5, r7, lr}
 8008c2c:	b086      	sub	sp, #24
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008c38:	2517      	movs	r5, #23
 8008c3a:	197c      	adds	r4, r7, r5
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2100      	movs	r1, #0
 8008c40:	0018      	movs	r0, r3
 8008c42:	f7ff fc62 	bl	800850a <dir_sdi>
 8008c46:	0003      	movs	r3, r0
 8008c48:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 8008c4a:	197b      	adds	r3, r7, r5
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d002      	beq.n	8008c58 <dir_find+0x2e>
 8008c52:	197b      	adds	r3, r7, r5
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	e0df      	b.n	8008e18 <dir_find+0x1ee>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008c58:	2114      	movs	r1, #20
 8008c5a:	187b      	adds	r3, r7, r1
 8008c5c:	22ff      	movs	r2, #255	@ 0xff
 8008c5e:	701a      	strb	r2, [r3, #0]
 8008c60:	2315      	movs	r3, #21
 8008c62:	18fb      	adds	r3, r7, r3
 8008c64:	187a      	adds	r2, r7, r1
 8008c66:	7812      	ldrb	r2, [r2, #0]
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	4252      	negs	r2, r2
 8008c70:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69da      	ldr	r2, [r3, #28]
 8008c76:	2517      	movs	r5, #23
 8008c78:	197c      	adds	r4, r7, r5
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	0011      	movs	r1, r2
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f7ff f87c 	bl	8007d7c <move_window>
 8008c84:	0003      	movs	r3, r0
 8008c86:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 8008c88:	0029      	movs	r1, r5
 8008c8a:	187b      	adds	r3, r7, r1
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d000      	beq.n	8008c94 <dir_find+0x6a>
 8008c92:	e0b9      	b.n	8008e08 <dir_find+0x1de>
		c = dp->dir[DIR_Name];
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1a      	ldr	r2, [r3, #32]
 8008c98:	2016      	movs	r0, #22
 8008c9a:	183b      	adds	r3, r7, r0
 8008c9c:	7812      	ldrb	r2, [r2, #0]
 8008c9e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008ca0:	183b      	adds	r3, r7, r0
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d103      	bne.n	8008cb0 <dir_find+0x86>
 8008ca8:	187b      	adds	r3, r7, r1
 8008caa:	2204      	movs	r2, #4
 8008cac:	701a      	strb	r2, [r3, #0]
 8008cae:	e0b0      	b.n	8008e12 <dir_find+0x1e8>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a1b      	ldr	r3, [r3, #32]
 8008cb4:	330b      	adds	r3, #11
 8008cb6:	781a      	ldrb	r2, [r3, #0]
 8008cb8:	200f      	movs	r0, #15
 8008cba:	183b      	adds	r3, r7, r0
 8008cbc:	213f      	movs	r1, #63	@ 0x3f
 8008cbe:	400a      	ands	r2, r1
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	0001      	movs	r1, r0
 8008cc6:	187a      	adds	r2, r7, r1
 8008cc8:	7812      	ldrb	r2, [r2, #0]
 8008cca:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008ccc:	2316      	movs	r3, #22
 8008cce:	18fb      	adds	r3, r7, r3
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	2be5      	cmp	r3, #229	@ 0xe5
 8008cd4:	d008      	beq.n	8008ce8 <dir_find+0xbe>
 8008cd6:	187b      	adds	r3, r7, r1
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2208      	movs	r2, #8
 8008cdc:	4013      	ands	r3, r2
 8008cde:	d00c      	beq.n	8008cfa <dir_find+0xd0>
 8008ce0:	187b      	adds	r3, r7, r1
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b0f      	cmp	r3, #15
 8008ce6:	d008      	beq.n	8008cfa <dir_find+0xd0>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ce8:	2315      	movs	r3, #21
 8008cea:	18fb      	adds	r3, r7, r3
 8008cec:	22ff      	movs	r2, #255	@ 0xff
 8008cee:	701a      	strb	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	4252      	negs	r2, r2
 8008cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cf8:	e077      	b.n	8008dea <dir_find+0x1c0>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008cfa:	230f      	movs	r3, #15
 8008cfc:	18fb      	adds	r3, r7, r3
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b0f      	cmp	r3, #15
 8008d02:	d148      	bne.n	8008d96 <dir_find+0x16c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	222f      	movs	r2, #47	@ 0x2f
 8008d08:	5c9b      	ldrb	r3, [r3, r2]
 8008d0a:	001a      	movs	r2, r3
 8008d0c:	2340      	movs	r3, #64	@ 0x40
 8008d0e:	4013      	ands	r3, r2
 8008d10:	d000      	beq.n	8008d14 <dir_find+0xea>
 8008d12:	e06a      	b.n	8008dea <dir_find+0x1c0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008d14:	2116      	movs	r1, #22
 8008d16:	187b      	adds	r3, r7, r1
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	2240      	movs	r2, #64	@ 0x40
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d015      	beq.n	8008d4c <dir_find+0x122>
						sum = dp->dir[LDIR_Chksum];
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a1a      	ldr	r2, [r3, #32]
 8008d24:	2314      	movs	r3, #20
 8008d26:	18fb      	adds	r3, r7, r3
 8008d28:	7b52      	ldrb	r2, [r2, #13]
 8008d2a:	701a      	strb	r2, [r3, #0]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008d2c:	187b      	adds	r3, r7, r1
 8008d2e:	0008      	movs	r0, r1
 8008d30:	187a      	adds	r2, r7, r1
 8008d32:	7812      	ldrb	r2, [r2, #0]
 8008d34:	2140      	movs	r1, #64	@ 0x40
 8008d36:	438a      	bics	r2, r1
 8008d38:	701a      	strb	r2, [r3, #0]
 8008d3a:	2315      	movs	r3, #21
 8008d3c:	18fb      	adds	r3, r7, r3
 8008d3e:	183a      	adds	r2, r7, r0
 8008d40:	7812      	ldrb	r2, [r2, #0]
 8008d42:	701a      	strb	r2, [r3, #0]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695a      	ldr	r2, [r3, #20]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008d4c:	2316      	movs	r3, #22
 8008d4e:	18fa      	adds	r2, r7, r3
 8008d50:	2415      	movs	r4, #21
 8008d52:	193b      	adds	r3, r7, r4
 8008d54:	7812      	ldrb	r2, [r2, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d117      	bne.n	8008d8c <dir_find+0x162>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	330d      	adds	r3, #13
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2214      	movs	r2, #20
 8008d66:	18ba      	adds	r2, r7, r2
 8008d68:	7812      	ldrb	r2, [r2, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d10e      	bne.n	8008d8c <dir_find+0x162>
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	0019      	movs	r1, r3
 8008d78:	0010      	movs	r0, r2
 8008d7a:	f7ff fda5 	bl	80088c8 <cmp_lfn>
 8008d7e:	1e03      	subs	r3, r0, #0
 8008d80:	d004      	beq.n	8008d8c <dir_find+0x162>
 8008d82:	193b      	adds	r3, r7, r4
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	e000      	b.n	8008d8e <dir_find+0x164>
 8008d8c:	22ff      	movs	r2, #255	@ 0xff
 8008d8e:	2315      	movs	r3, #21
 8008d90:	18fb      	adds	r3, r7, r3
 8008d92:	701a      	strb	r2, [r3, #0]
 8008d94:	e029      	b.n	8008dea <dir_find+0x1c0>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008d96:	2315      	movs	r3, #21
 8008d98:	18fb      	adds	r3, r7, r3
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10b      	bne.n	8008db8 <dir_find+0x18e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	0018      	movs	r0, r3
 8008da6:	f7ff ff1b 	bl	8008be0 <sum_sfn>
 8008daa:	0003      	movs	r3, r0
 8008dac:	001a      	movs	r2, r3
 8008dae:	2314      	movs	r3, #20
 8008db0:	18fb      	adds	r3, r7, r3
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d029      	beq.n	8008e0c <dir_find+0x1e2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	222f      	movs	r2, #47	@ 0x2f
 8008dbc:	5c9b      	ldrb	r3, [r3, r2]
 8008dbe:	001a      	movs	r2, r3
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	d109      	bne.n	8008dda <dir_find+0x1b0>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a18      	ldr	r0, [r3, #32]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	3324      	adds	r3, #36	@ 0x24
 8008dce:	220b      	movs	r2, #11
 8008dd0:	0019      	movs	r1, r3
 8008dd2:	f7fe fde3 	bl	800799c <mem_cmp>
 8008dd6:	1e03      	subs	r3, r0, #0
 8008dd8:	d01a      	beq.n	8008e10 <dir_find+0x1e6>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008dda:	2315      	movs	r3, #21
 8008ddc:	18fb      	adds	r3, r7, r3
 8008dde:	22ff      	movs	r2, #255	@ 0xff
 8008de0:	701a      	strb	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	4252      	negs	r2, r2
 8008de8:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008dea:	2517      	movs	r5, #23
 8008dec:	197c      	adds	r4, r7, r5
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2100      	movs	r1, #0
 8008df2:	0018      	movs	r0, r3
 8008df4:	f7ff fc07 	bl	8008606 <dir_next>
 8008df8:	0003      	movs	r3, r0
 8008dfa:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 8008dfc:	197b      	adds	r3, r7, r5
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d100      	bne.n	8008e06 <dir_find+0x1dc>
 8008e04:	e735      	b.n	8008c72 <dir_find+0x48>
 8008e06:	e004      	b.n	8008e12 <dir_find+0x1e8>
		if (res != FR_OK) break;
 8008e08:	46c0      	nop			@ (mov r8, r8)
 8008e0a:	e002      	b.n	8008e12 <dir_find+0x1e8>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008e0c:	46c0      	nop			@ (mov r8, r8)
 8008e0e:	e000      	b.n	8008e12 <dir_find+0x1e8>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008e10:	46c0      	nop			@ (mov r8, r8)

	return res;
 8008e12:	2317      	movs	r3, #23
 8008e14:	18fb      	adds	r3, r7, r3
 8008e16:	781b      	ldrb	r3, [r3, #0]
}
 8008e18:	0018      	movs	r0, r3
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	b006      	add	sp, #24
 8008e1e:	bdb0      	pop	{r4, r5, r7, pc}

08008e20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008e20:	b5b0      	push	{r4, r5, r7, lr}
 8008e22:	b08c      	sub	sp, #48	@ 0x30
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	222f      	movs	r2, #47	@ 0x2f
 8008e32:	5c9b      	ldrb	r3, [r3, r2]
 8008e34:	001a      	movs	r2, r3
 8008e36:	23a0      	movs	r3, #160	@ 0xa0
 8008e38:	4013      	ands	r3, r2
 8008e3a:	d001      	beq.n	8008e40 <dir_register+0x20>
 8008e3c:	2306      	movs	r3, #6
 8008e3e:	e0fb      	b.n	8009038 <dir_register+0x218>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008e40:	2300      	movs	r3, #0
 8008e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e44:	e002      	b.n	8008e4c <dir_register+0x2c>
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	3301      	adds	r3, #1
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	68da      	ldr	r2, [r3, #12]
 8008e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	18d3      	adds	r3, r2, r3
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f4      	bne.n	8008e46 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3324      	adds	r3, #36	@ 0x24
 8008e60:	0019      	movs	r1, r3
 8008e62:	240c      	movs	r4, #12
 8008e64:	193b      	adds	r3, r7, r4
 8008e66:	220c      	movs	r2, #12
 8008e68:	0018      	movs	r0, r3
 8008e6a:	f7fe fd5f 	bl	800792c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008e6e:	193b      	adds	r3, r7, r4
 8008e70:	7adb      	ldrb	r3, [r3, #11]
 8008e72:	001a      	movs	r2, r3
 8008e74:	2301      	movs	r3, #1
 8008e76:	4013      	ands	r3, r2
 8008e78:	d037      	beq.n	8008eea <dir_register+0xca>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	222f      	movs	r2, #47	@ 0x2f
 8008e7e:	2140      	movs	r1, #64	@ 0x40
 8008e80:	5499      	strb	r1, [r3, r2]
		for (n = 1; n < 100; n++) {
 8008e82:	2301      	movs	r3, #1
 8008e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e86:	e018      	b.n	8008eba <dir_register+0x9a>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3324      	adds	r3, #36	@ 0x24
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	68da      	ldr	r2, [r3, #12]
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	210c      	movs	r1, #12
 8008e96:	1879      	adds	r1, r7, r1
 8008e98:	f7ff fe0e 	bl	8008ab8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008e9c:	252f      	movs	r5, #47	@ 0x2f
 8008e9e:	197c      	adds	r4, r7, r5
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7ff fec1 	bl	8008c2a <dir_find>
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8008eac:	197b      	adds	r3, r7, r5
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d106      	bne.n	8008ec2 <dir_register+0xa2>
		for (n = 1; n < 100; n++) {
 8008eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebc:	2b63      	cmp	r3, #99	@ 0x63
 8008ebe:	d9e3      	bls.n	8008e88 <dir_register+0x68>
 8008ec0:	e000      	b.n	8008ec4 <dir_register+0xa4>
			if (res != FR_OK) break;
 8008ec2:	46c0      	nop			@ (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	2b64      	cmp	r3, #100	@ 0x64
 8008ec8:	d101      	bne.n	8008ece <dir_register+0xae>
 8008eca:	2307      	movs	r3, #7
 8008ecc:	e0b4      	b.n	8009038 <dir_register+0x218>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008ece:	222f      	movs	r2, #47	@ 0x2f
 8008ed0:	18bb      	adds	r3, r7, r2
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	d002      	beq.n	8008ede <dir_register+0xbe>
 8008ed8:	18bb      	adds	r3, r7, r2
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	e0ac      	b.n	8009038 <dir_register+0x218>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008ede:	230c      	movs	r3, #12
 8008ee0:	18fb      	adds	r3, r7, r3
 8008ee2:	7ad9      	ldrb	r1, [r3, #11]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	222f      	movs	r2, #47	@ 0x2f
 8008ee8:	5499      	strb	r1, [r3, r2]
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008eea:	230c      	movs	r3, #12
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	7adb      	ldrb	r3, [r3, #11]
 8008ef0:	001a      	movs	r2, r3
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	d008      	beq.n	8008f0a <dir_register+0xea>
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efa:	330c      	adds	r3, #12
 8008efc:	210d      	movs	r1, #13
 8008efe:	0018      	movs	r0, r3
 8008f00:	f7f7 f90c 	bl	800011c <__udivsi3>
 8008f04:	0003      	movs	r3, r0
 8008f06:	3301      	adds	r3, #1
 8008f08:	e000      	b.n	8008f0c <dir_register+0xec>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008f0e:	252f      	movs	r5, #47	@ 0x2f
 8008f10:	197c      	adds	r4, r7, r5
 8008f12:	6a3a      	ldr	r2, [r7, #32]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	0011      	movs	r1, r2
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f7ff fc3d 	bl	8008798 <dir_alloc>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008f22:	0029      	movs	r1, r5
 8008f24:	187b      	adds	r3, r7, r1
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d153      	bne.n	8008fd4 <dir_register+0x1b4>
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	623b      	str	r3, [r7, #32]
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d04d      	beq.n	8008fd4 <dir_register+0x1b4>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	015b      	lsls	r3, r3, #5
 8008f40:	1ad2      	subs	r2, r2, r3
 8008f42:	000d      	movs	r5, r1
 8008f44:	187c      	adds	r4, r7, r1
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	0011      	movs	r1, r2
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	f7ff fadd 	bl	800850a <dir_sdi>
 8008f50:	0003      	movs	r3, r0
 8008f52:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008f54:	197b      	adds	r3, r7, r5
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d13b      	bne.n	8008fd4 <dir_register+0x1b4>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3324      	adds	r3, #36	@ 0x24
 8008f60:	221b      	movs	r2, #27
 8008f62:	18bc      	adds	r4, r7, r2
 8008f64:	0018      	movs	r0, r3
 8008f66:	f7ff fe3b 	bl	8008be0 <sum_sfn>
 8008f6a:	0003      	movs	r3, r0
 8008f6c:	7023      	strb	r3, [r4, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	69da      	ldr	r2, [r3, #28]
 8008f72:	252f      	movs	r5, #47	@ 0x2f
 8008f74:	197c      	adds	r4, r7, r5
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	0011      	movs	r1, r2
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	f7fe fefe 	bl	8007d7c <move_window>
 8008f80:	0003      	movs	r3, r0
 8008f82:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
 8008f84:	002c      	movs	r4, r5
 8008f86:	193b      	adds	r3, r7, r4
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d121      	bne.n	8008fd2 <dir_register+0x1b2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	68d8      	ldr	r0, [r3, #12]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a19      	ldr	r1, [r3, #32]
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	231b      	movs	r3, #27
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f7ff fd12 	bl	80089c8 <put_lfn>
				fs->wflag = 1;
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008faa:	0025      	movs	r5, r4
 8008fac:	193c      	adds	r4, r7, r4
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f7ff fb27 	bl	8008606 <dir_next>
 8008fb8:	0003      	movs	r3, r0
 8008fba:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --nent);
 8008fbc:	197b      	adds	r3, r7, r5
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d107      	bne.n	8008fd4 <dir_register+0x1b4>
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	623b      	str	r3, [r7, #32]
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1ce      	bne.n	8008f6e <dir_register+0x14e>
 8008fd0:	e000      	b.n	8008fd4 <dir_register+0x1b4>
				if (res != FR_OK) break;
 8008fd2:	46c0      	nop			@ (mov r8, r8)
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008fd4:	252f      	movs	r5, #47	@ 0x2f
 8008fd6:	197b      	adds	r3, r7, r5
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d129      	bne.n	8009032 <dir_register+0x212>
		res = move_window(fs, dp->sect);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69da      	ldr	r2, [r3, #28]
 8008fe2:	197c      	adds	r4, r7, r5
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	0011      	movs	r1, r2
 8008fe8:	0018      	movs	r0, r3
 8008fea:	f7fe fec7 	bl	8007d7c <move_window>
 8008fee:	0003      	movs	r3, r0
 8008ff0:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008ff2:	197b      	adds	r3, r7, r5
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d11b      	bne.n	8009032 <dir_register+0x212>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a1b      	ldr	r3, [r3, #32]
 8008ffe:	2220      	movs	r2, #32
 8009000:	2100      	movs	r1, #0
 8009002:	0018      	movs	r0, r3
 8009004:	f7fe fcb1 	bl	800796a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6a18      	ldr	r0, [r3, #32]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3324      	adds	r3, #36	@ 0x24
 8009010:	220b      	movs	r2, #11
 8009012:	0019      	movs	r1, r3
 8009014:	f7fe fc8a 	bl	800792c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	222f      	movs	r2, #47	@ 0x2f
 800901c:	5c9a      	ldrb	r2, [r3, r2]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	330c      	adds	r3, #12
 8009024:	2118      	movs	r1, #24
 8009026:	400a      	ands	r2, r1
 8009028:	b2d2      	uxtb	r2, r2
 800902a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	2201      	movs	r2, #1
 8009030:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009032:	232f      	movs	r3, #47	@ 0x2f
 8009034:	18fb      	adds	r3, r7, r3
 8009036:	781b      	ldrb	r3, [r3, #0]
}
 8009038:	0018      	movs	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	b00c      	add	sp, #48	@ 0x30
 800903e:	bdb0      	pop	{r4, r5, r7, pc}

08009040 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009040:	b5b0      	push	{r4, r5, r7, lr}
 8009042:	b08a      	sub	sp, #40	@ 0x28
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	613b      	str	r3, [r7, #16]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	2300      	movs	r3, #0
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	61ba      	str	r2, [r7, #24]
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	18d3      	adds	r3, r2, r3
 800906a:	781a      	ldrb	r2, [r3, #0]
 800906c:	2124      	movs	r1, #36	@ 0x24
 800906e:	187b      	adds	r3, r7, r1
 8009070:	801a      	strh	r2, [r3, #0]
		if (w < ' ') break;				/* Break if end of the path name */
 8009072:	000a      	movs	r2, r1
 8009074:	18bb      	adds	r3, r7, r2
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	2b1f      	cmp	r3, #31
 800907a:	d94e      	bls.n	800911a <create_name+0xda>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800907c:	18bb      	adds	r3, r7, r2
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	2b2f      	cmp	r3, #47	@ 0x2f
 8009082:	d007      	beq.n	8009094 <create_name+0x54>
 8009084:	18bb      	adds	r3, r7, r2
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	2b5c      	cmp	r3, #92	@ 0x5c
 800908a:	d110      	bne.n	80090ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800908c:	e002      	b.n	8009094 <create_name+0x54>
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	3301      	adds	r3, #1
 8009092:	61bb      	str	r3, [r7, #24]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	18d3      	adds	r3, r2, r3
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	2b2f      	cmp	r3, #47	@ 0x2f
 800909e:	d0f6      	beq.n	800908e <create_name+0x4e>
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	18d3      	adds	r3, r2, r3
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80090aa:	d0f0      	beq.n	800908e <create_name+0x4e>
			break;
 80090ac:	e036      	b.n	800911c <create_name+0xdc>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80090b2:	d901      	bls.n	80090b8 <create_name+0x78>
 80090b4:	2306      	movs	r3, #6
 80090b6:	e1c2      	b.n	800943e <create_name+0x3fe>
#if !_LFN_UNICODE
		w &= 0xFF;
 80090b8:	2524      	movs	r5, #36	@ 0x24
 80090ba:	197b      	adds	r3, r7, r5
 80090bc:	197a      	adds	r2, r7, r5
 80090be:	8812      	ldrh	r2, [r2, #0]
 80090c0:	21ff      	movs	r1, #255	@ 0xff
 80090c2:	400a      	ands	r2, r1
 80090c4:	801a      	strh	r2, [r3, #0]
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80090c6:	197c      	adds	r4, r7, r5
 80090c8:	197b      	adds	r3, r7, r5
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	2101      	movs	r1, #1
 80090ce:	0018      	movs	r0, r3
 80090d0:	f001 fb2e 	bl	800a730 <ff_convert>
 80090d4:	0003      	movs	r3, r0
 80090d6:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80090d8:	197b      	adds	r3, r7, r5
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <create_name+0xa4>
 80090e0:	2306      	movs	r3, #6
 80090e2:	e1ac      	b.n	800943e <create_name+0x3fe>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80090e4:	2224      	movs	r2, #36	@ 0x24
 80090e6:	18bb      	adds	r3, r7, r2
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80090ec:	d80a      	bhi.n	8009104 <create_name+0xc4>
 80090ee:	18bb      	adds	r3, r7, r2
 80090f0:	881a      	ldrh	r2, [r3, #0]
 80090f2:	4ba7      	ldr	r3, [pc, #668]	@ (8009390 <create_name+0x350>)
 80090f4:	0011      	movs	r1, r2
 80090f6:	0018      	movs	r0, r3
 80090f8:	f7fe fc75 	bl	80079e6 <chk_chr>
 80090fc:	1e03      	subs	r3, r0, #0
 80090fe:	d001      	beq.n	8009104 <create_name+0xc4>
 8009100:	2306      	movs	r3, #6
 8009102:	e19c      	b.n	800943e <create_name+0x3fe>
		lfn[di++] = w;					/* Store the Unicode character */
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	1c5a      	adds	r2, r3, #1
 8009108:	617a      	str	r2, [r7, #20]
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	18d3      	adds	r3, r2, r3
 8009110:	2224      	movs	r2, #36	@ 0x24
 8009112:	18ba      	adds	r2, r7, r2
 8009114:	8812      	ldrh	r2, [r2, #0]
 8009116:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8009118:	e7a2      	b.n	8009060 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800911a:	46c0      	nop			@ (mov r8, r8)
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	18d2      	adds	r2, r2, r3
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009126:	2324      	movs	r3, #36	@ 0x24
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	2b1f      	cmp	r3, #31
 800912e:	d801      	bhi.n	8009134 <create_name+0xf4>
 8009130:	2204      	movs	r2, #4
 8009132:	e000      	b.n	8009136 <create_name+0xf6>
 8009134:	2200      	movs	r2, #0
 8009136:	2327      	movs	r3, #39	@ 0x27
 8009138:	18fb      	adds	r3, r7, r3
 800913a:	701a      	strb	r2, [r3, #0]
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800913c:	e016      	b.n	800916c <create_name+0x12c>
		w = lfn[di - 1];
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	4a94      	ldr	r2, [pc, #592]	@ (8009394 <create_name+0x354>)
 8009142:	4694      	mov	ip, r2
 8009144:	4463      	add	r3, ip
 8009146:	005b      	lsls	r3, r3, #1
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	18d2      	adds	r2, r2, r3
 800914c:	2124      	movs	r1, #36	@ 0x24
 800914e:	187b      	adds	r3, r7, r1
 8009150:	8812      	ldrh	r2, [r2, #0]
 8009152:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
 8009154:	000a      	movs	r2, r1
 8009156:	18bb      	adds	r3, r7, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	2b20      	cmp	r3, #32
 800915c:	d003      	beq.n	8009166 <create_name+0x126>
 800915e:	18bb      	adds	r3, r7, r2
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	2b2e      	cmp	r3, #46	@ 0x2e
 8009164:	d106      	bne.n	8009174 <create_name+0x134>
		di--;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	3b01      	subs	r3, #1
 800916a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e5      	bne.n	800913e <create_name+0xfe>
 8009172:	e000      	b.n	8009176 <create_name+0x136>
		if (w != ' ' && w != '.') break;
 8009174:	46c0      	nop			@ (mov r8, r8)
	}
	lfn[di] = 0;						/* LFN is created */
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	005b      	lsls	r3, r3, #1
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	18d3      	adds	r3, r2, r3
 800917e:	2200      	movs	r2, #0
 8009180:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <create_name+0x14c>
 8009188:	2306      	movs	r3, #6
 800918a:	e158      	b.n	800943e <create_name+0x3fe>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3324      	adds	r3, #36	@ 0x24
 8009190:	220b      	movs	r2, #11
 8009192:	2120      	movs	r1, #32
 8009194:	0018      	movs	r0, r3
 8009196:	f7fe fbe8 	bl	800796a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800919a:	2300      	movs	r3, #0
 800919c:	61bb      	str	r3, [r7, #24]
 800919e:	e002      	b.n	80091a6 <create_name+0x166>
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	3301      	adds	r3, #1
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	18d3      	adds	r3, r2, r3
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	d0f5      	beq.n	80091a0 <create_name+0x160>
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	18d3      	adds	r3, r2, r3
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	2b2e      	cmp	r3, #46	@ 0x2e
 80091c0:	d0ee      	beq.n	80091a0 <create_name+0x160>
	if (si) cf |= NS_LOSS | NS_LFN;
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00a      	beq.n	80091de <create_name+0x19e>
 80091c8:	2227      	movs	r2, #39	@ 0x27
 80091ca:	18bb      	adds	r3, r7, r2
 80091cc:	18ba      	adds	r2, r7, r2
 80091ce:	7812      	ldrb	r2, [r2, #0]
 80091d0:	2103      	movs	r1, #3
 80091d2:	430a      	orrs	r2, r1
 80091d4:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80091d6:	e002      	b.n	80091de <create_name+0x19e>
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	3b01      	subs	r3, #1
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <create_name+0x1b8>
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	4a6b      	ldr	r2, [pc, #428]	@ (8009394 <create_name+0x354>)
 80091e8:	4694      	mov	ip, r2
 80091ea:	4463      	add	r3, ip
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	18d3      	adds	r3, r2, r3
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80091f6:	d1ef      	bne.n	80091d8 <create_name+0x198>

	i = b = 0; ni = 8;
 80091f8:	2326      	movs	r3, #38	@ 0x26
 80091fa:	18fb      	adds	r3, r7, r3
 80091fc:	2200      	movs	r2, #0
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	2300      	movs	r3, #0
 8009202:	623b      	str	r3, [r7, #32]
 8009204:	2308      	movs	r3, #8
 8009206:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	61ba      	str	r2, [r7, #24]
 800920e:	005b      	lsls	r3, r3, #1
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	18d2      	adds	r2, r2, r3
 8009214:	2124      	movs	r1, #36	@ 0x24
 8009216:	187b      	adds	r3, r7, r1
 8009218:	8812      	ldrh	r2, [r2, #0]
 800921a:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
 800921c:	000a      	movs	r2, r1
 800921e:	18bb      	adds	r3, r7, r2
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d100      	bne.n	8009228 <create_name+0x1e8>
 8009226:	e0b1      	b.n	800938c <create_name+0x34c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8009228:	18bb      	adds	r3, r7, r2
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	2b20      	cmp	r3, #32
 800922e:	d007      	beq.n	8009240 <create_name+0x200>
 8009230:	18bb      	adds	r3, r7, r2
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	2b2e      	cmp	r3, #46	@ 0x2e
 8009236:	d10b      	bne.n	8009250 <create_name+0x210>
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	429a      	cmp	r2, r3
 800923e:	d007      	beq.n	8009250 <create_name+0x210>
			cf |= NS_LOSS | NS_LFN; continue;
 8009240:	2227      	movs	r2, #39	@ 0x27
 8009242:	18bb      	adds	r3, r7, r2
 8009244:	18ba      	adds	r2, r7, r2
 8009246:	7812      	ldrb	r2, [r2, #0]
 8009248:	2103      	movs	r1, #3
 800924a:	430a      	orrs	r2, r1
 800924c:	701a      	strb	r2, [r3, #0]
 800924e:	e09c      	b.n	800938a <create_name+0x34a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009250:	6a3a      	ldr	r2, [r7, #32]
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	429a      	cmp	r2, r3
 8009256:	d203      	bcs.n	8009260 <create_name+0x220>
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	429a      	cmp	r2, r3
 800925e:	d127      	bne.n	80092b0 <create_name+0x270>
			if (ni == 11) {				/* Long extension */
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	2b0b      	cmp	r3, #11
 8009264:	d107      	bne.n	8009276 <create_name+0x236>
				cf |= NS_LOSS | NS_LFN; break;
 8009266:	2227      	movs	r2, #39	@ 0x27
 8009268:	18bb      	adds	r3, r7, r2
 800926a:	18ba      	adds	r2, r7, r2
 800926c:	7812      	ldrb	r2, [r2, #0]
 800926e:	2103      	movs	r1, #3
 8009270:	430a      	orrs	r2, r1
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	e095      	b.n	80093a2 <create_name+0x362>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	429a      	cmp	r2, r3
 800927c:	d006      	beq.n	800928c <create_name+0x24c>
 800927e:	2227      	movs	r2, #39	@ 0x27
 8009280:	18bb      	adds	r3, r7, r2
 8009282:	18ba      	adds	r2, r7, r2
 8009284:	7812      	ldrb	r2, [r2, #0]
 8009286:	2103      	movs	r1, #3
 8009288:	430a      	orrs	r2, r1
 800928a:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	429a      	cmp	r2, r3
 8009292:	d900      	bls.n	8009296 <create_name+0x256>
 8009294:	e084      	b.n	80093a0 <create_name+0x360>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	61bb      	str	r3, [r7, #24]
 800929a:	2308      	movs	r3, #8
 800929c:	623b      	str	r3, [r7, #32]
 800929e:	230b      	movs	r3, #11
 80092a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80092a2:	2226      	movs	r2, #38	@ 0x26
 80092a4:	18bb      	adds	r3, r7, r2
 80092a6:	18ba      	adds	r2, r7, r2
 80092a8:	7812      	ldrb	r2, [r2, #0]
 80092aa:	0092      	lsls	r2, r2, #2
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	e06c      	b.n	800938a <create_name+0x34a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80092b0:	2524      	movs	r5, #36	@ 0x24
 80092b2:	197b      	adds	r3, r7, r5
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80092b8:	d91a      	bls.n	80092f0 <create_name+0x2b0>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80092ba:	197c      	adds	r4, r7, r5
 80092bc:	197b      	adds	r3, r7, r5
 80092be:	881b      	ldrh	r3, [r3, #0]
 80092c0:	2100      	movs	r1, #0
 80092c2:	0018      	movs	r0, r3
 80092c4:	f001 fa34 	bl	800a730 <ff_convert>
 80092c8:	0003      	movs	r3, r0
 80092ca:	8023      	strh	r3, [r4, #0]
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80092cc:	197b      	adds	r3, r7, r5
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d006      	beq.n	80092e2 <create_name+0x2a2>
 80092d4:	197b      	adds	r3, r7, r5
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	3b80      	subs	r3, #128	@ 0x80
 80092da:	4a2f      	ldr	r2, [pc, #188]	@ (8009398 <create_name+0x358>)
 80092dc:	5cd2      	ldrb	r2, [r2, r3]
 80092de:	197b      	adds	r3, r7, r5
 80092e0:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80092e2:	2227      	movs	r2, #39	@ 0x27
 80092e4:	18bb      	adds	r3, r7, r2
 80092e6:	18ba      	adds	r2, r7, r2
 80092e8:	7812      	ldrb	r2, [r2, #0]
 80092ea:	2102      	movs	r1, #2
 80092ec:	430a      	orrs	r2, r1
 80092ee:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80092f0:	2224      	movs	r2, #36	@ 0x24
 80092f2:	18bb      	adds	r3, r7, r2
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d008      	beq.n	800930c <create_name+0x2cc>
 80092fa:	18bb      	adds	r3, r7, r2
 80092fc:	881a      	ldrh	r2, [r3, #0]
 80092fe:	4b27      	ldr	r3, [pc, #156]	@ (800939c <create_name+0x35c>)
 8009300:	0011      	movs	r1, r2
 8009302:	0018      	movs	r0, r3
 8009304:	f7fe fb6f 	bl	80079e6 <chk_chr>
 8009308:	1e03      	subs	r3, r0, #0
 800930a:	d00b      	beq.n	8009324 <create_name+0x2e4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800930c:	2324      	movs	r3, #36	@ 0x24
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	225f      	movs	r2, #95	@ 0x5f
 8009312:	801a      	strh	r2, [r3, #0]
 8009314:	2227      	movs	r2, #39	@ 0x27
 8009316:	18bb      	adds	r3, r7, r2
 8009318:	18ba      	adds	r2, r7, r2
 800931a:	7812      	ldrb	r2, [r2, #0]
 800931c:	2103      	movs	r1, #3
 800931e:	430a      	orrs	r2, r1
 8009320:	701a      	strb	r2, [r3, #0]
 8009322:	e025      	b.n	8009370 <create_name+0x330>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8009324:	2224      	movs	r2, #36	@ 0x24
 8009326:	18bb      	adds	r3, r7, r2
 8009328:	881b      	ldrh	r3, [r3, #0]
 800932a:	2b40      	cmp	r3, #64	@ 0x40
 800932c:	d90b      	bls.n	8009346 <create_name+0x306>
 800932e:	18bb      	adds	r3, r7, r2
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	2b5a      	cmp	r3, #90	@ 0x5a
 8009334:	d807      	bhi.n	8009346 <create_name+0x306>
					b |= 2;
 8009336:	2226      	movs	r2, #38	@ 0x26
 8009338:	18bb      	adds	r3, r7, r2
 800933a:	18ba      	adds	r2, r7, r2
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	2102      	movs	r1, #2
 8009340:	430a      	orrs	r2, r1
 8009342:	701a      	strb	r2, [r3, #0]
 8009344:	e014      	b.n	8009370 <create_name+0x330>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8009346:	2024      	movs	r0, #36	@ 0x24
 8009348:	183b      	adds	r3, r7, r0
 800934a:	881b      	ldrh	r3, [r3, #0]
 800934c:	2b60      	cmp	r3, #96	@ 0x60
 800934e:	d90f      	bls.n	8009370 <create_name+0x330>
 8009350:	183b      	adds	r3, r7, r0
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	2b7a      	cmp	r3, #122	@ 0x7a
 8009356:	d80b      	bhi.n	8009370 <create_name+0x330>
						b |= 1; w -= 0x20;
 8009358:	2226      	movs	r2, #38	@ 0x26
 800935a:	18bb      	adds	r3, r7, r2
 800935c:	18ba      	adds	r2, r7, r2
 800935e:	7812      	ldrb	r2, [r2, #0]
 8009360:	2101      	movs	r1, #1
 8009362:	430a      	orrs	r2, r1
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	183b      	adds	r3, r7, r0
 8009368:	183a      	adds	r2, r7, r0
 800936a:	8812      	ldrh	r2, [r2, #0]
 800936c:	3a20      	subs	r2, #32
 800936e:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8009370:	6a3b      	ldr	r3, [r7, #32]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	623a      	str	r2, [r7, #32]
 8009376:	2224      	movs	r2, #36	@ 0x24
 8009378:	18ba      	adds	r2, r7, r2
 800937a:	8812      	ldrh	r2, [r2, #0]
 800937c:	b2d0      	uxtb	r0, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	2124      	movs	r1, #36	@ 0x24
 8009382:	18d3      	adds	r3, r2, r3
 8009384:	185b      	adds	r3, r3, r1
 8009386:	1c02      	adds	r2, r0, #0
 8009388:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800938a:	e73d      	b.n	8009208 <create_name+0x1c8>
		if (!w) break;					/* Break on end of the LFN */
 800938c:	46c0      	nop			@ (mov r8, r8)
 800938e:	e008      	b.n	80093a2 <create_name+0x362>
 8009390:	0800b768 	.word	0x0800b768
 8009394:	7fffffff 	.word	0x7fffffff
 8009398:	0800b88c 	.word	0x0800b88c
 800939c:	0800b774 	.word	0x0800b774
			if (si > di) break;			/* No extension */
 80093a0:	46c0      	nop			@ (mov r8, r8)
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2224      	movs	r2, #36	@ 0x24
 80093a6:	5c9b      	ldrb	r3, [r3, r2]
 80093a8:	2be5      	cmp	r3, #229	@ 0xe5
 80093aa:	d103      	bne.n	80093b4 <create_name+0x374>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2224      	movs	r2, #36	@ 0x24
 80093b0:	2105      	movs	r1, #5
 80093b2:	5499      	strb	r1, [r3, r2]

	if (ni == 8) b <<= 2;
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	d105      	bne.n	80093c6 <create_name+0x386>
 80093ba:	2226      	movs	r2, #38	@ 0x26
 80093bc:	18bb      	adds	r3, r7, r2
 80093be:	18ba      	adds	r2, r7, r2
 80093c0:	7812      	ldrb	r2, [r2, #0]
 80093c2:	0092      	lsls	r2, r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80093c6:	2126      	movs	r1, #38	@ 0x26
 80093c8:	187b      	adds	r3, r7, r1
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	220c      	movs	r2, #12
 80093ce:	4013      	ands	r3, r2
 80093d0:	2b0c      	cmp	r3, #12
 80093d2:	d005      	beq.n	80093e0 <create_name+0x3a0>
 80093d4:	187b      	adds	r3, r7, r1
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2203      	movs	r2, #3
 80093da:	4013      	ands	r3, r2
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d106      	bne.n	80093ee <create_name+0x3ae>
 80093e0:	2227      	movs	r2, #39	@ 0x27
 80093e2:	18bb      	adds	r3, r7, r2
 80093e4:	18ba      	adds	r2, r7, r2
 80093e6:	7812      	ldrb	r2, [r2, #0]
 80093e8:	2102      	movs	r1, #2
 80093ea:	430a      	orrs	r2, r1
 80093ec:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80093ee:	2127      	movs	r1, #39	@ 0x27
 80093f0:	187b      	adds	r3, r7, r1
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	2202      	movs	r2, #2
 80093f6:	4013      	ands	r3, r2
 80093f8:	d11a      	bne.n	8009430 <create_name+0x3f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80093fa:	2326      	movs	r3, #38	@ 0x26
 80093fc:	18fb      	adds	r3, r7, r3
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	2203      	movs	r2, #3
 8009402:	4013      	ands	r3, r2
 8009404:	2b01      	cmp	r3, #1
 8009406:	d105      	bne.n	8009414 <create_name+0x3d4>
 8009408:	187b      	adds	r3, r7, r1
 800940a:	187a      	adds	r2, r7, r1
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	2110      	movs	r1, #16
 8009410:	430a      	orrs	r2, r1
 8009412:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8009414:	2326      	movs	r3, #38	@ 0x26
 8009416:	18fb      	adds	r3, r7, r3
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	220c      	movs	r2, #12
 800941c:	4013      	ands	r3, r2
 800941e:	2b04      	cmp	r3, #4
 8009420:	d106      	bne.n	8009430 <create_name+0x3f0>
 8009422:	2227      	movs	r2, #39	@ 0x27
 8009424:	18bb      	adds	r3, r7, r2
 8009426:	18ba      	adds	r2, r7, r2
 8009428:	7812      	ldrb	r2, [r2, #0]
 800942a:	2108      	movs	r1, #8
 800942c:	430a      	orrs	r2, r1
 800942e:	701a      	strb	r2, [r3, #0]
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2227      	movs	r2, #39	@ 0x27
 8009434:	18ba      	adds	r2, r7, r2
 8009436:	212f      	movs	r1, #47	@ 0x2f
 8009438:	7812      	ldrb	r2, [r2, #0]
 800943a:	545a      	strb	r2, [r3, r1]

	return FR_OK;
 800943c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800943e:	0018      	movs	r0, r3
 8009440:	46bd      	mov	sp, r7
 8009442:	b00a      	add	sp, #40	@ 0x28
 8009444:	bdb0      	pop	{r4, r5, r7, pc}
 8009446:	46c0      	nop			@ (mov r8, r8)

08009448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009448:	b5b0      	push	{r4, r5, r7, lr}
 800944a:	b086      	sub	sp, #24
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800945c:	e002      	b.n	8009464 <follow_path+0x1c>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	3301      	adds	r3, #1
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2b2f      	cmp	r3, #47	@ 0x2f
 800946a:	d0f8      	beq.n	800945e <follow_path+0x16>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b5c      	cmp	r3, #92	@ 0x5c
 8009472:	d0f4      	beq.n	800945e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2200      	movs	r2, #0
 8009478:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b1f      	cmp	r3, #31
 8009480:	d80d      	bhi.n	800949e <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	222f      	movs	r2, #47	@ 0x2f
 8009486:	2180      	movs	r1, #128	@ 0x80
 8009488:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 800948a:	2317      	movs	r3, #23
 800948c:	18fc      	adds	r4, r7, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2100      	movs	r1, #0
 8009492:	0018      	movs	r0, r3
 8009494:	f7ff f839 	bl	800850a <dir_sdi>
 8009498:	0003      	movs	r3, r0
 800949a:	7023      	strb	r3, [r4, #0]
 800949c:	e052      	b.n	8009544 <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800949e:	2517      	movs	r5, #23
 80094a0:	197c      	adds	r4, r7, r5
 80094a2:	003a      	movs	r2, r7
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	0011      	movs	r1, r2
 80094a8:	0018      	movs	r0, r3
 80094aa:	f7ff fdc9 	bl	8009040 <create_name>
 80094ae:	0003      	movs	r3, r0
 80094b0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80094b2:	197b      	adds	r3, r7, r5
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d13f      	bne.n	800953a <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 80094ba:	197c      	adds	r4, r7, r5
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	0018      	movs	r0, r3
 80094c0:	f7ff fbb3 	bl	8008c2a <dir_find>
 80094c4:	0003      	movs	r3, r0
 80094c6:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80094c8:	200b      	movs	r0, #11
 80094ca:	183b      	adds	r3, r7, r0
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	212f      	movs	r1, #47	@ 0x2f
 80094d0:	5c52      	ldrb	r2, [r2, r1]
 80094d2:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80094d4:	197b      	adds	r3, r7, r5
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80094dc:	197b      	adds	r3, r7, r5
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	2b04      	cmp	r3, #4
 80094e2:	d12c      	bne.n	800953e <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80094e4:	183b      	adds	r3, r7, r0
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2204      	movs	r2, #4
 80094ea:	4013      	ands	r3, r2
 80094ec:	d127      	bne.n	800953e <follow_path+0xf6>
 80094ee:	197b      	adds	r3, r7, r5
 80094f0:	2205      	movs	r2, #5
 80094f2:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 80094f4:	e023      	b.n	800953e <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80094f6:	230b      	movs	r3, #11
 80094f8:	18fb      	adds	r3, r7, r3
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2204      	movs	r2, #4
 80094fe:	4013      	ands	r3, r2
 8009500:	d11f      	bne.n	8009542 <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	799b      	ldrb	r3, [r3, #6]
 8009506:	001a      	movs	r2, r3
 8009508:	2310      	movs	r3, #16
 800950a:	4013      	ands	r3, r2
 800950c:	d104      	bne.n	8009518 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 800950e:	2317      	movs	r3, #23
 8009510:	18fb      	adds	r3, r7, r3
 8009512:	2205      	movs	r2, #5
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	e015      	b.n	8009544 <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3334      	adds	r3, #52	@ 0x34
 800951c:	001a      	movs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	05db      	lsls	r3, r3, #23
 8009524:	0ddb      	lsrs	r3, r3, #23
 8009526:	18d2      	adds	r2, r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	0011      	movs	r1, r2
 800952c:	0018      	movs	r0, r3
 800952e:	f7ff f98b 	bl	8008848 <ld_clust>
 8009532:	0002      	movs	r2, r0
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009538:	e7b1      	b.n	800949e <follow_path+0x56>
			if (res != FR_OK) break;
 800953a:	46c0      	nop			@ (mov r8, r8)
 800953c:	e002      	b.n	8009544 <follow_path+0xfc>
				break;
 800953e:	46c0      	nop			@ (mov r8, r8)
 8009540:	e000      	b.n	8009544 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009542:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 8009544:	2317      	movs	r3, #23
 8009546:	18fb      	adds	r3, r7, r3
 8009548:	781b      	ldrb	r3, [r3, #0]
}
 800954a:	0018      	movs	r0, r3
 800954c:	46bd      	mov	sp, r7
 800954e:	b006      	add	sp, #24
 8009550:	bdb0      	pop	{r4, r5, r7, pc}

08009552 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b086      	sub	sp, #24
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800955a:	2301      	movs	r3, #1
 800955c:	425b      	negs	r3, r3
 800955e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d031      	beq.n	80095cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	e002      	b.n	8009576 <get_ldnumber+0x24>
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	3301      	adds	r3, #1
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	2b1f      	cmp	r3, #31
 800957c:	d903      	bls.n	8009586 <get_ldnumber+0x34>
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b3a      	cmp	r3, #58	@ 0x3a
 8009584:	d1f4      	bne.n	8009570 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	2b3a      	cmp	r3, #58	@ 0x3a
 800958c:	d11c      	bne.n	80095c8 <get_ldnumber+0x76>
			tp = *path;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	1c5a      	adds	r2, r3, #1
 8009598:	60fa      	str	r2, [r7, #12]
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	3b30      	subs	r3, #48	@ 0x30
 800959e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2b09      	cmp	r3, #9
 80095a4:	d80e      	bhi.n	80095c4 <get_ldnumber+0x72>
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d10a      	bne.n	80095c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d107      	bne.n	80095c4 <get_ldnumber+0x72>
					vol = (int)i;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	3301      	adds	r3, #1
 80095bc:	617b      	str	r3, [r7, #20]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	e002      	b.n	80095ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80095c8:	2300      	movs	r3, #0
 80095ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80095cc:	693b      	ldr	r3, [r7, #16]
}
 80095ce:	0018      	movs	r0, r3
 80095d0:	46bd      	mov	sp, r7
 80095d2:	b006      	add	sp, #24
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	70da      	strb	r2, [r3, #3]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	4252      	negs	r2, r2
 80095ee:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80095f0:	683a      	ldr	r2, [r7, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	0011      	movs	r1, r2
 80095f6:	0018      	movs	r0, r3
 80095f8:	f7fe fbc0 	bl	8007d7c <move_window>
 80095fc:	1e03      	subs	r3, r0, #0
 80095fe:	d001      	beq.n	8009604 <check_fs+0x2c>
 8009600:	2304      	movs	r3, #4
 8009602:	e037      	b.n	8009674 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3334      	adds	r3, #52	@ 0x34
 8009608:	33ff      	adds	r3, #255	@ 0xff
 800960a:	33ff      	adds	r3, #255	@ 0xff
 800960c:	0018      	movs	r0, r3
 800960e:	f7fe f909 	bl	8007824 <ld_word>
 8009612:	0003      	movs	r3, r0
 8009614:	001a      	movs	r2, r3
 8009616:	4b19      	ldr	r3, [pc, #100]	@ (800967c <check_fs+0xa4>)
 8009618:	429a      	cmp	r2, r3
 800961a:	d001      	beq.n	8009620 <check_fs+0x48>
 800961c:	2303      	movs	r3, #3
 800961e:	e029      	b.n	8009674 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2234      	movs	r2, #52	@ 0x34
 8009624:	5c9b      	ldrb	r3, [r3, r2]
 8009626:	2be9      	cmp	r3, #233	@ 0xe9
 8009628:	d009      	beq.n	800963e <check_fs+0x66>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2234      	movs	r2, #52	@ 0x34
 800962e:	5c9b      	ldrb	r3, [r3, r2]
 8009630:	2beb      	cmp	r3, #235	@ 0xeb
 8009632:	d11e      	bne.n	8009672 <check_fs+0x9a>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2236      	movs	r2, #54	@ 0x36
 8009638:	5c9b      	ldrb	r3, [r3, r2]
 800963a:	2b90      	cmp	r3, #144	@ 0x90
 800963c:	d119      	bne.n	8009672 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	3334      	adds	r3, #52	@ 0x34
 8009642:	3336      	adds	r3, #54	@ 0x36
 8009644:	0018      	movs	r0, r3
 8009646:	f7fe f908 	bl	800785a <ld_dword>
 800964a:	0003      	movs	r3, r0
 800964c:	021b      	lsls	r3, r3, #8
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	4a0b      	ldr	r2, [pc, #44]	@ (8009680 <check_fs+0xa8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d101      	bne.n	800965a <check_fs+0x82>
 8009656:	2300      	movs	r3, #0
 8009658:	e00c      	b.n	8009674 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3334      	adds	r3, #52	@ 0x34
 800965e:	3352      	adds	r3, #82	@ 0x52
 8009660:	0018      	movs	r0, r3
 8009662:	f7fe f8fa 	bl	800785a <ld_dword>
 8009666:	0003      	movs	r3, r0
 8009668:	4a06      	ldr	r2, [pc, #24]	@ (8009684 <check_fs+0xac>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d101      	bne.n	8009672 <check_fs+0x9a>
 800966e:	2300      	movs	r3, #0
 8009670:	e000      	b.n	8009674 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009672:	2302      	movs	r3, #2
}
 8009674:	0018      	movs	r0, r3
 8009676:	46bd      	mov	sp, r7
 8009678:	b002      	add	sp, #8
 800967a:	bd80      	pop	{r7, pc}
 800967c:	0000aa55 	.word	0x0000aa55
 8009680:	00544146 	.word	0x00544146
 8009684:	33544146 	.word	0x33544146

08009688 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009688:	b5b0      	push	{r4, r5, r7, lr}
 800968a:	b096      	sub	sp, #88	@ 0x58
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	1dfb      	adds	r3, r7, #7
 8009694:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	0018      	movs	r0, r3
 80096a0:	f7ff ff57 	bl	8009552 <get_ldnumber>
 80096a4:	0003      	movs	r3, r0
 80096a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80096a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	da01      	bge.n	80096b2 <find_volume+0x2a>
 80096ae:	230b      	movs	r3, #11
 80096b0:	e24e      	b.n	8009b50 <find_volume+0x4c8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80096b2:	4bcc      	ldr	r3, [pc, #816]	@ (80099e4 <find_volume+0x35c>)
 80096b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80096b6:	0092      	lsls	r2, r2, #2
 80096b8:	58d3      	ldr	r3, [r2, r3]
 80096ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80096bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <find_volume+0x3e>
 80096c2:	230c      	movs	r3, #12
 80096c4:	e244      	b.n	8009b50 <find_volume+0x4c8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80096cc:	1dfb      	adds	r3, r7, #7
 80096ce:	1dfa      	adds	r2, r7, #7
 80096d0:	7812      	ldrb	r2, [r2, #0]
 80096d2:	2101      	movs	r1, #1
 80096d4:	438a      	bics	r2, r1
 80096d6:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80096d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01b      	beq.n	8009718 <find_volume+0x90>
		stat = disk_status(fs->drv);
 80096e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e2:	785b      	ldrb	r3, [r3, #1]
 80096e4:	2537      	movs	r5, #55	@ 0x37
 80096e6:	197c      	adds	r4, r7, r5
 80096e8:	0018      	movs	r0, r3
 80096ea:	f7fd ffd1 	bl	8007690 <disk_status>
 80096ee:	0003      	movs	r3, r0
 80096f0:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80096f2:	0029      	movs	r1, r5
 80096f4:	187b      	adds	r3, r7, r1
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	2201      	movs	r2, #1
 80096fa:	4013      	ands	r3, r2
 80096fc:	d10c      	bne.n	8009718 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80096fe:	1dfb      	adds	r3, r7, #7
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d006      	beq.n	8009714 <find_volume+0x8c>
 8009706:	187b      	adds	r3, r7, r1
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	2204      	movs	r2, #4
 800970c:	4013      	ands	r3, r2
 800970e:	d001      	beq.n	8009714 <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8009710:	230a      	movs	r3, #10
 8009712:	e21d      	b.n	8009b50 <find_volume+0x4c8>
			}
			return FR_OK;				/* The file system object is valid */
 8009714:	2300      	movs	r3, #0
 8009716:	e21b      	b.n	8009b50 <find_volume+0x4c8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800971a:	2200      	movs	r2, #0
 800971c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800971e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009720:	b2da      	uxtb	r2, r3
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	785b      	ldrb	r3, [r3, #1]
 800972a:	2537      	movs	r5, #55	@ 0x37
 800972c:	197c      	adds	r4, r7, r5
 800972e:	0018      	movs	r0, r3
 8009730:	f7fd ffd0 	bl	80076d4 <disk_initialize>
 8009734:	0003      	movs	r3, r0
 8009736:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009738:	197b      	adds	r3, r7, r5
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2201      	movs	r2, #1
 800973e:	4013      	ands	r3, r2
 8009740:	d001      	beq.n	8009746 <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009742:	2303      	movs	r3, #3
 8009744:	e204      	b.n	8009b50 <find_volume+0x4c8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009746:	1dfb      	adds	r3, r7, #7
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d007      	beq.n	800975e <find_volume+0xd6>
 800974e:	2337      	movs	r3, #55	@ 0x37
 8009750:	18fb      	adds	r3, r7, r3
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2204      	movs	r2, #4
 8009756:	4013      	ands	r3, r2
 8009758:	d001      	beq.n	800975e <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800975a:	230a      	movs	r3, #10
 800975c:	e1f8      	b.n	8009b50 <find_volume+0x4c8>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800975e:	2300      	movs	r3, #0
 8009760:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009762:	2557      	movs	r5, #87	@ 0x57
 8009764:	197c      	adds	r4, r7, r5
 8009766:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800976a:	0011      	movs	r1, r2
 800976c:	0018      	movs	r0, r3
 800976e:	f7ff ff33 	bl	80095d8 <check_fs>
 8009772:	0003      	movs	r3, r0
 8009774:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009776:	197b      	adds	r3, r7, r5
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	2b02      	cmp	r3, #2
 800977c:	d14b      	bne.n	8009816 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800977e:	2300      	movs	r3, #0
 8009780:	643b      	str	r3, [r7, #64]	@ 0x40
 8009782:	e01d      	b.n	80097c0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009786:	3334      	adds	r3, #52	@ 0x34
 8009788:	001a      	movs	r2, r3
 800978a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800978c:	011b      	lsls	r3, r3, #4
 800978e:	33bf      	adds	r3, #191	@ 0xbf
 8009790:	33ff      	adds	r3, #255	@ 0xff
 8009792:	18d3      	adds	r3, r2, r3
 8009794:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009798:	3304      	adds	r3, #4
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d006      	beq.n	80097ae <find_volume+0x126>
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	3308      	adds	r3, #8
 80097a4:	0018      	movs	r0, r3
 80097a6:	f7fe f858 	bl	800785a <ld_dword>
 80097aa:	0003      	movs	r3, r0
 80097ac:	e000      	b.n	80097b0 <find_volume+0x128>
 80097ae:	2300      	movs	r3, #0
 80097b0:	2214      	movs	r2, #20
 80097b2:	18ba      	adds	r2, r7, r2
 80097b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097b6:	0089      	lsls	r1, r1, #2
 80097b8:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097bc:	3301      	adds	r3, #1
 80097be:	643b      	str	r3, [r7, #64]	@ 0x40
 80097c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097c2:	2b03      	cmp	r3, #3
 80097c4:	d9de      	bls.n	8009784 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80097c6:	2300      	movs	r3, #0
 80097c8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80097ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <find_volume+0x14e>
 80097d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097d2:	3b01      	subs	r3, #1
 80097d4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80097d6:	2314      	movs	r3, #20
 80097d8:	18fb      	adds	r3, r7, r3
 80097da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097dc:	0092      	lsls	r2, r2, #2
 80097de:	58d3      	ldr	r3, [r2, r3]
 80097e0:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80097e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d008      	beq.n	80097fa <find_volume+0x172>
 80097e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80097ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ec:	0011      	movs	r1, r2
 80097ee:	0018      	movs	r0, r3
 80097f0:	f7ff fef2 	bl	80095d8 <check_fs>
 80097f4:	0003      	movs	r3, r0
 80097f6:	001a      	movs	r2, r3
 80097f8:	e000      	b.n	80097fc <find_volume+0x174>
 80097fa:	2203      	movs	r2, #3
 80097fc:	2157      	movs	r1, #87	@ 0x57
 80097fe:	187b      	adds	r3, r7, r1
 8009800:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009802:	187b      	adds	r3, r7, r1
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d905      	bls.n	8009816 <find_volume+0x18e>
 800980a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800980c:	3301      	adds	r3, #1
 800980e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009812:	2b03      	cmp	r3, #3
 8009814:	d9df      	bls.n	80097d6 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009816:	2357      	movs	r3, #87	@ 0x57
 8009818:	18fb      	adds	r3, r7, r3
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	2b04      	cmp	r3, #4
 800981e:	d101      	bne.n	8009824 <find_volume+0x19c>
 8009820:	2301      	movs	r3, #1
 8009822:	e195      	b.n	8009b50 <find_volume+0x4c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009824:	2357      	movs	r3, #87	@ 0x57
 8009826:	18fb      	adds	r3, r7, r3
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d901      	bls.n	8009832 <find_volume+0x1aa>
 800982e:	230d      	movs	r3, #13
 8009830:	e18e      	b.n	8009b50 <find_volume+0x4c8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	3334      	adds	r3, #52	@ 0x34
 8009836:	330b      	adds	r3, #11
 8009838:	0018      	movs	r0, r3
 800983a:	f7fd fff3 	bl	8007824 <ld_word>
 800983e:	0003      	movs	r3, r0
 8009840:	001a      	movs	r2, r3
 8009842:	2380      	movs	r3, #128	@ 0x80
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	429a      	cmp	r2, r3
 8009848:	d001      	beq.n	800984e <find_volume+0x1c6>
 800984a:	230d      	movs	r3, #13
 800984c:	e180      	b.n	8009b50 <find_volume+0x4c8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800984e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009850:	3334      	adds	r3, #52	@ 0x34
 8009852:	3316      	adds	r3, #22
 8009854:	0018      	movs	r0, r3
 8009856:	f7fd ffe5 	bl	8007824 <ld_word>
 800985a:	0003      	movs	r3, r0
 800985c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800985e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009860:	2b00      	cmp	r3, #0
 8009862:	d107      	bne.n	8009874 <find_volume+0x1ec>
 8009864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009866:	3334      	adds	r3, #52	@ 0x34
 8009868:	3324      	adds	r3, #36	@ 0x24
 800986a:	0018      	movs	r0, r3
 800986c:	f7fd fff5 	bl	800785a <ld_dword>
 8009870:	0003      	movs	r3, r0
 8009872:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009876:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009878:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800987a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987c:	2244      	movs	r2, #68	@ 0x44
 800987e:	5c9a      	ldrb	r2, [r3, r2]
 8009880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009882:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	789b      	ldrb	r3, [r3, #2]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d005      	beq.n	8009898 <find_volume+0x210>
 800988c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988e:	789b      	ldrb	r3, [r3, #2]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d001      	beq.n	8009898 <find_volume+0x210>
 8009894:	230d      	movs	r3, #13
 8009896:	e15b      	b.n	8009b50 <find_volume+0x4c8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989a:	789b      	ldrb	r3, [r3, #2]
 800989c:	001a      	movs	r2, r3
 800989e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098a0:	4353      	muls	r3, r2
 80098a2:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	2241      	movs	r2, #65	@ 0x41
 80098a8:	5c9b      	ldrb	r3, [r3, r2]
 80098aa:	001a      	movs	r2, r3
 80098ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ae:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80098b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b2:	895b      	ldrh	r3, [r3, #10]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d007      	beq.n	80098c8 <find_volume+0x240>
 80098b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ba:	895b      	ldrh	r3, [r3, #10]
 80098bc:	001a      	movs	r2, r3
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	895b      	ldrh	r3, [r3, #10]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	4013      	ands	r3, r2
 80098c6:	d001      	beq.n	80098cc <find_volume+0x244>
 80098c8:	230d      	movs	r3, #13
 80098ca:	e141      	b.n	8009b50 <find_volume+0x4c8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80098cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ce:	3334      	adds	r3, #52	@ 0x34
 80098d0:	3311      	adds	r3, #17
 80098d2:	0018      	movs	r0, r3
 80098d4:	f7fd ffa6 	bl	8007824 <ld_word>
 80098d8:	0003      	movs	r3, r0
 80098da:	001a      	movs	r2, r3
 80098dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	891b      	ldrh	r3, [r3, #8]
 80098e4:	220f      	movs	r2, #15
 80098e6:	4013      	ands	r3, r2
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <find_volume+0x26a>
 80098ee:	230d      	movs	r3, #13
 80098f0:	e12e      	b.n	8009b50 <find_volume+0x4c8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80098f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f4:	3334      	adds	r3, #52	@ 0x34
 80098f6:	3313      	adds	r3, #19
 80098f8:	0018      	movs	r0, r3
 80098fa:	f7fd ff93 	bl	8007824 <ld_word>
 80098fe:	0003      	movs	r3, r0
 8009900:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009904:	2b00      	cmp	r3, #0
 8009906:	d107      	bne.n	8009918 <find_volume+0x290>
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	3334      	adds	r3, #52	@ 0x34
 800990c:	3320      	adds	r3, #32
 800990e:	0018      	movs	r0, r3
 8009910:	f7fd ffa3 	bl	800785a <ld_dword>
 8009914:	0003      	movs	r3, r0
 8009916:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	3334      	adds	r3, #52	@ 0x34
 800991c:	330e      	adds	r3, #14
 800991e:	252e      	movs	r5, #46	@ 0x2e
 8009920:	197c      	adds	r4, r7, r5
 8009922:	0018      	movs	r0, r3
 8009924:	f7fd ff7e 	bl	8007824 <ld_word>
 8009928:	0003      	movs	r3, r0
 800992a:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800992c:	197b      	adds	r3, r7, r5
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <find_volume+0x2b0>
 8009934:	230d      	movs	r3, #13
 8009936:	e10b      	b.n	8009b50 <find_volume+0x4c8>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009938:	232e      	movs	r3, #46	@ 0x2e
 800993a:	18fb      	adds	r3, r7, r3
 800993c:	881a      	ldrh	r2, [r3, #0]
 800993e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009940:	18d3      	adds	r3, r2, r3
 8009942:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009944:	8912      	ldrh	r2, [r2, #8]
 8009946:	0912      	lsrs	r2, r2, #4
 8009948:	b292      	uxth	r2, r2
 800994a:	189b      	adds	r3, r3, r2
 800994c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800994e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009952:	429a      	cmp	r2, r3
 8009954:	d201      	bcs.n	800995a <find_volume+0x2d2>
 8009956:	230d      	movs	r3, #13
 8009958:	e0fa      	b.n	8009b50 <find_volume+0x4c8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800995a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800995c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800995e:	1ad2      	subs	r2, r2, r3
 8009960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009962:	895b      	ldrh	r3, [r3, #10]
 8009964:	0019      	movs	r1, r3
 8009966:	0010      	movs	r0, r2
 8009968:	f7f6 fbd8 	bl	800011c <__udivsi3>
 800996c:	0003      	movs	r3, r0
 800996e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <find_volume+0x2f2>
 8009976:	230d      	movs	r3, #13
 8009978:	e0ea      	b.n	8009b50 <find_volume+0x4c8>
		fmt = FS_FAT32;
 800997a:	2157      	movs	r1, #87	@ 0x57
 800997c:	187b      	adds	r3, r7, r1
 800997e:	2203      	movs	r2, #3
 8009980:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009984:	4a18      	ldr	r2, [pc, #96]	@ (80099e8 <find_volume+0x360>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d802      	bhi.n	8009990 <find_volume+0x308>
 800998a:	187b      	adds	r3, r7, r1
 800998c:	2202      	movs	r2, #2
 800998e:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	4a16      	ldr	r2, [pc, #88]	@ (80099ec <find_volume+0x364>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d803      	bhi.n	80099a0 <find_volume+0x318>
 8009998:	2357      	movs	r3, #87	@ 0x57
 800999a:	18fb      	adds	r3, r7, r3
 800999c:	2201      	movs	r2, #1
 800999e:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80099a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a2:	1c9a      	adds	r2, r3, #2
 80099a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80099a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099ac:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80099ae:	232e      	movs	r3, #46	@ 0x2e
 80099b0:	18fb      	adds	r3, r7, r3
 80099b2:	881a      	ldrh	r2, [r3, #0]
 80099b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099b6:	18d2      	adds	r2, r2, r3
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80099bc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	18d2      	adds	r2, r2, r3
 80099c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c4:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 80099c6:	2357      	movs	r3, #87	@ 0x57
 80099c8:	18fb      	adds	r3, r7, r3
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d123      	bne.n	8009a18 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80099d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d2:	3334      	adds	r3, #52	@ 0x34
 80099d4:	332a      	adds	r3, #42	@ 0x2a
 80099d6:	0018      	movs	r0, r3
 80099d8:	f7fd ff24 	bl	8007824 <ld_word>
 80099dc:	1e03      	subs	r3, r0, #0
 80099de:	d007      	beq.n	80099f0 <find_volume+0x368>
 80099e0:	230d      	movs	r3, #13
 80099e2:	e0b5      	b.n	8009b50 <find_volume+0x4c8>
 80099e4:	20000b24 	.word	0x20000b24
 80099e8:	0000fff5 	.word	0x0000fff5
 80099ec:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80099f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f2:	891b      	ldrh	r3, [r3, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <find_volume+0x374>
 80099f8:	230d      	movs	r3, #13
 80099fa:	e0a9      	b.n	8009b50 <find_volume+0x4c8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80099fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fe:	3334      	adds	r3, #52	@ 0x34
 8009a00:	332c      	adds	r3, #44	@ 0x2c
 8009a02:	0018      	movs	r0, r3
 8009a04:	f7fd ff29 	bl	800785a <ld_dword>
 8009a08:	0002      	movs	r2, r0
 8009a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a16:	e020      	b.n	8009a5a <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1a:	891b      	ldrh	r3, [r3, #8]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <find_volume+0x39c>
 8009a20:	230d      	movs	r3, #13
 8009a22:	e095      	b.n	8009b50 <find_volume+0x4c8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a2a:	18d2      	adds	r2, r2, r3
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a30:	2357      	movs	r3, #87	@ 0x57
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d103      	bne.n	8009a42 <find_volume+0x3ba>
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	005b      	lsls	r3, r3, #1
 8009a40:	e00a      	b.n	8009a58 <find_volume+0x3d0>
 8009a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a44:	699a      	ldr	r2, [r3, #24]
 8009a46:	0013      	movs	r3, r2
 8009a48:	005b      	lsls	r3, r3, #1
 8009a4a:	189b      	adds	r3, r3, r2
 8009a4c:	085a      	lsrs	r2, r3, #1
 8009a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	2101      	movs	r1, #1
 8009a54:	400b      	ands	r3, r1
 8009a56:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009a58:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5c:	69da      	ldr	r2, [r3, #28]
 8009a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a60:	493d      	ldr	r1, [pc, #244]	@ (8009b58 <find_volume+0x4d0>)
 8009a62:	468c      	mov	ip, r1
 8009a64:	4463      	add	r3, ip
 8009a66:	0a5b      	lsrs	r3, r3, #9
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d201      	bcs.n	8009a70 <find_volume+0x3e8>
 8009a6c:	230d      	movs	r3, #13
 8009a6e:	e06f      	b.n	8009b50 <find_volume+0x4c8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a72:	2201      	movs	r2, #1
 8009a74:	4252      	negs	r2, r2
 8009a76:	615a      	str	r2, [r3, #20]
 8009a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7a:	695a      	ldr	r2, [r3, #20]
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a7e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8009a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a82:	2280      	movs	r2, #128	@ 0x80
 8009a84:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009a86:	2357      	movs	r3, #87	@ 0x57
 8009a88:	18fb      	adds	r3, r7, r3
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	2b03      	cmp	r3, #3
 8009a8e:	d148      	bne.n	8009b22 <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a92:	3334      	adds	r3, #52	@ 0x34
 8009a94:	3330      	adds	r3, #48	@ 0x30
 8009a96:	0018      	movs	r0, r3
 8009a98:	f7fd fec4 	bl	8007824 <ld_word>
 8009a9c:	0003      	movs	r3, r0
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d13f      	bne.n	8009b22 <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	0011      	movs	r1, r2
 8009aaa:	0018      	movs	r0, r3
 8009aac:	f7fe f966 	bl	8007d7c <move_window>
 8009ab0:	1e03      	subs	r3, r0, #0
 8009ab2:	d136      	bne.n	8009b22 <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abc:	3334      	adds	r3, #52	@ 0x34
 8009abe:	33ff      	adds	r3, #255	@ 0xff
 8009ac0:	33ff      	adds	r3, #255	@ 0xff
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	f7fd feae 	bl	8007824 <ld_word>
 8009ac8:	0003      	movs	r3, r0
 8009aca:	001a      	movs	r2, r3
 8009acc:	4b23      	ldr	r3, [pc, #140]	@ (8009b5c <find_volume+0x4d4>)
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d127      	bne.n	8009b22 <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad4:	3334      	adds	r3, #52	@ 0x34
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	f7fd febf 	bl	800785a <ld_dword>
 8009adc:	0003      	movs	r3, r0
 8009ade:	4a20      	ldr	r2, [pc, #128]	@ (8009b60 <find_volume+0x4d8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d11e      	bne.n	8009b22 <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	3334      	adds	r3, #52	@ 0x34
 8009ae8:	33e5      	adds	r3, #229	@ 0xe5
 8009aea:	33ff      	adds	r3, #255	@ 0xff
 8009aec:	0018      	movs	r0, r3
 8009aee:	f7fd feb4 	bl	800785a <ld_dword>
 8009af2:	0003      	movs	r3, r0
 8009af4:	4a1b      	ldr	r2, [pc, #108]	@ (8009b64 <find_volume+0x4dc>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d113      	bne.n	8009b22 <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009afc:	3334      	adds	r3, #52	@ 0x34
 8009afe:	33e9      	adds	r3, #233	@ 0xe9
 8009b00:	33ff      	adds	r3, #255	@ 0xff
 8009b02:	0018      	movs	r0, r3
 8009b04:	f7fd fea9 	bl	800785a <ld_dword>
 8009b08:	0002      	movs	r2, r0
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b10:	3334      	adds	r3, #52	@ 0x34
 8009b12:	33ed      	adds	r3, #237	@ 0xed
 8009b14:	33ff      	adds	r3, #255	@ 0xff
 8009b16:	0018      	movs	r0, r3
 8009b18:	f7fd fe9f 	bl	800785a <ld_dword>
 8009b1c:	0002      	movs	r2, r0
 8009b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b20:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b24:	2257      	movs	r2, #87	@ 0x57
 8009b26:	18ba      	adds	r2, r7, r2
 8009b28:	7812      	ldrb	r2, [r2, #0]
 8009b2a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8009b68 <find_volume+0x4e0>)
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	3301      	adds	r3, #1
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	4b0c      	ldr	r3, [pc, #48]	@ (8009b68 <find_volume+0x4e0>)
 8009b36:	801a      	strh	r2, [r3, #0]
 8009b38:	4b0b      	ldr	r3, [pc, #44]	@ (8009b68 <find_volume+0x4e0>)
 8009b3a:	881a      	ldrh	r2, [r3, #0]
 8009b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8009b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b42:	4a0a      	ldr	r2, [pc, #40]	@ (8009b6c <find_volume+0x4e4>)
 8009b44:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b48:	0018      	movs	r0, r3
 8009b4a:	f7fe f8af 	bl	8007cac <clear_lock>
#endif
	return FR_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	0018      	movs	r0, r3
 8009b52:	46bd      	mov	sp, r7
 8009b54:	b016      	add	sp, #88	@ 0x58
 8009b56:	bdb0      	pop	{r4, r5, r7, pc}
 8009b58:	000001ff 	.word	0x000001ff
 8009b5c:	0000aa55 	.word	0x0000aa55
 8009b60:	41615252 	.word	0x41615252
 8009b64:	61417272 	.word	0x61417272
 8009b68:	20000b28 	.word	0x20000b28
 8009b6c:	20000b4c 	.word	0x20000b4c

08009b70 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009b70:	b590      	push	{r4, r7, lr}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009b7a:	240f      	movs	r4, #15
 8009b7c:	193b      	adds	r3, r7, r4
 8009b7e:	2209      	movs	r2, #9
 8009b80:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01d      	beq.n	8009bc4 <validate+0x54>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d019      	beq.n	8009bc4 <validate+0x54>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d014      	beq.n	8009bc4 <validate+0x54>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	889a      	ldrh	r2, [r3, #4]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	88db      	ldrh	r3, [r3, #6]
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d10d      	bne.n	8009bc4 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	785b      	ldrb	r3, [r3, #1]
 8009bae:	0018      	movs	r0, r3
 8009bb0:	f7fd fd6e 	bl	8007690 <disk_status>
 8009bb4:	0003      	movs	r3, r0
 8009bb6:	001a      	movs	r2, r3
 8009bb8:	2301      	movs	r3, #1
 8009bba:	4013      	ands	r3, r2
 8009bbc:	d102      	bne.n	8009bc4 <validate+0x54>
			res = FR_OK;
 8009bbe:	193b      	adds	r3, r7, r4
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009bc4:	230f      	movs	r3, #15
 8009bc6:	18fb      	adds	r3, r7, r3
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d102      	bne.n	8009bd4 <validate+0x64>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	e000      	b.n	8009bd6 <validate+0x66>
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	601a      	str	r2, [r3, #0]
	return res;
 8009bda:	230f      	movs	r3, #15
 8009bdc:	18fb      	adds	r3, r7, r3
 8009bde:	781b      	ldrb	r3, [r3, #0]
}
 8009be0:	0018      	movs	r0, r3
 8009be2:	46bd      	mov	sp, r7
 8009be4:	b005      	add	sp, #20
 8009be6:	bd90      	pop	{r4, r7, pc}

08009be8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009be8:	b5b0      	push	{r4, r5, r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	1dfb      	adds	r3, r7, #7
 8009bf4:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009bfa:	2310      	movs	r3, #16
 8009bfc:	18fb      	adds	r3, r7, r3
 8009bfe:	0018      	movs	r0, r3
 8009c00:	f7ff fca7 	bl	8009552 <get_ldnumber>
 8009c04:	0003      	movs	r3, r0
 8009c06:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009c08:	69fb      	ldr	r3, [r7, #28]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da01      	bge.n	8009c12 <f_mount+0x2a>
 8009c0e:	230b      	movs	r3, #11
 8009c10:	e030      	b.n	8009c74 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009c12:	4b1a      	ldr	r3, [pc, #104]	@ (8009c7c <f_mount+0x94>)
 8009c14:	69fa      	ldr	r2, [r7, #28]
 8009c16:	0092      	lsls	r2, r2, #2
 8009c18:	58d3      	ldr	r3, [r2, r3]
 8009c1a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d006      	beq.n	8009c30 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	0018      	movs	r0, r3
 8009c26:	f7fe f841 	bl	8007cac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009c3c:	68f9      	ldr	r1, [r7, #12]
 8009c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009c7c <f_mount+0x94>)
 8009c40:	69fa      	ldr	r2, [r7, #28]
 8009c42:	0092      	lsls	r2, r2, #2
 8009c44:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <f_mount+0x6c>
 8009c4c:	1dfb      	adds	r3, r7, #7
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d001      	beq.n	8009c58 <f_mount+0x70>
 8009c54:	2300      	movs	r3, #0
 8009c56:	e00d      	b.n	8009c74 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009c58:	2517      	movs	r5, #23
 8009c5a:	197c      	adds	r4, r7, r5
 8009c5c:	230c      	movs	r3, #12
 8009c5e:	18f9      	adds	r1, r7, r3
 8009c60:	2308      	movs	r3, #8
 8009c62:	18fb      	adds	r3, r7, r3
 8009c64:	2200      	movs	r2, #0
 8009c66:	0018      	movs	r0, r3
 8009c68:	f7ff fd0e 	bl	8009688 <find_volume>
 8009c6c:	0003      	movs	r3, r0
 8009c6e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8009c70:	197b      	adds	r3, r7, r5
 8009c72:	781b      	ldrb	r3, [r3, #0]
}
 8009c74:	0018      	movs	r0, r3
 8009c76:	46bd      	mov	sp, r7
 8009c78:	b008      	add	sp, #32
 8009c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8009c7c:	20000b24 	.word	0x20000b24

08009c80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c82:	b09b      	sub	sp, #108	@ 0x6c
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	1dfb      	adds	r3, r7, #7
 8009c8c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <f_open+0x18>
 8009c94:	2309      	movs	r3, #9
 8009c96:	e1e3      	b.n	800a060 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009c98:	1dfb      	adds	r3, r7, #7
 8009c9a:	1dfa      	adds	r2, r7, #7
 8009c9c:	7812      	ldrb	r2, [r2, #0]
 8009c9e:	213f      	movs	r1, #63	@ 0x3f
 8009ca0:	400a      	ands	r2, r1
 8009ca2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8009ca4:	2567      	movs	r5, #103	@ 0x67
 8009ca6:	197c      	adds	r4, r7, r5
 8009ca8:	1dfb      	adds	r3, r7, #7
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	2314      	movs	r3, #20
 8009cae:	18f9      	adds	r1, r7, r3
 8009cb0:	2308      	movs	r3, #8
 8009cb2:	18fb      	adds	r3, r7, r3
 8009cb4:	0018      	movs	r0, r3
 8009cb6:	f7ff fce7 	bl	8009688 <find_volume>
 8009cba:	0003      	movs	r3, r0
 8009cbc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8009cbe:	197b      	adds	r3, r7, r5
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d000      	beq.n	8009cc8 <f_open+0x48>
 8009cc6:	e1c0      	b.n	800a04a <f_open+0x3ca>
		dj.obj.fs = fs;
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	2618      	movs	r6, #24
 8009ccc:	19bb      	adds	r3, r7, r6
 8009cce:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	197c      	adds	r4, r7, r5
 8009cd4:	19bb      	adds	r3, r7, r6
 8009cd6:	0011      	movs	r1, r2
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f7ff fbb5 	bl	8009448 <follow_path>
 8009cde:	0003      	movs	r3, r0
 8009ce0:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009ce2:	0029      	movs	r1, r5
 8009ce4:	197b      	adds	r3, r7, r5
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d11b      	bne.n	8009d24 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009cec:	19bb      	adds	r3, r7, r6
 8009cee:	222f      	movs	r2, #47	@ 0x2f
 8009cf0:	5c9b      	ldrb	r3, [r3, r2]
 8009cf2:	b25b      	sxtb	r3, r3
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	da03      	bge.n	8009d00 <f_open+0x80>
				res = FR_INVALID_NAME;
 8009cf8:	187b      	adds	r3, r7, r1
 8009cfa:	2206      	movs	r2, #6
 8009cfc:	701a      	strb	r2, [r3, #0]
 8009cfe:	e011      	b.n	8009d24 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009d00:	1dfb      	adds	r3, r7, #7
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	2201      	movs	r2, #1
 8009d06:	429a      	cmp	r2, r3
 8009d08:	419b      	sbcs	r3, r3
 8009d0a:	425b      	negs	r3, r3
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	001a      	movs	r2, r3
 8009d10:	2367      	movs	r3, #103	@ 0x67
 8009d12:	18fc      	adds	r4, r7, r3
 8009d14:	2318      	movs	r3, #24
 8009d16:	18fb      	adds	r3, r7, r3
 8009d18:	0011      	movs	r1, r2
 8009d1a:	0018      	movs	r0, r3
 8009d1c:	f7fd fe7c 	bl	8007a18 <chk_lock>
 8009d20:	0003      	movs	r3, r0
 8009d22:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009d24:	1dfb      	adds	r3, r7, #7
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	221c      	movs	r2, #28
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	d100      	bne.n	8009d30 <f_open+0xb0>
 8009d2e:	e096      	b.n	8009e5e <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8009d30:	2267      	movs	r2, #103	@ 0x67
 8009d32:	18bb      	adds	r3, r7, r2
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01a      	beq.n	8009d70 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009d3a:	18bb      	adds	r3, r7, r2
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d10f      	bne.n	8009d62 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d42:	f7fd fec1 	bl	8007ac8 <enq_lock>
 8009d46:	1e03      	subs	r3, r0, #0
 8009d48:	d007      	beq.n	8009d5a <f_open+0xda>
 8009d4a:	2318      	movs	r3, #24
 8009d4c:	18fb      	adds	r3, r7, r3
 8009d4e:	0018      	movs	r0, r3
 8009d50:	f7ff f866 	bl	8008e20 <dir_register>
 8009d54:	0003      	movs	r3, r0
 8009d56:	001a      	movs	r2, r3
 8009d58:	e000      	b.n	8009d5c <f_open+0xdc>
 8009d5a:	2212      	movs	r2, #18
 8009d5c:	2367      	movs	r3, #103	@ 0x67
 8009d5e:	18fb      	adds	r3, r7, r3
 8009d60:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d62:	1dfb      	adds	r3, r7, #7
 8009d64:	1dfa      	adds	r2, r7, #7
 8009d66:	7812      	ldrb	r2, [r2, #0]
 8009d68:	2108      	movs	r1, #8
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	701a      	strb	r2, [r3, #0]
 8009d6e:	e014      	b.n	8009d9a <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009d70:	2318      	movs	r3, #24
 8009d72:	18fb      	adds	r3, r7, r3
 8009d74:	799b      	ldrb	r3, [r3, #6]
 8009d76:	001a      	movs	r2, r3
 8009d78:	2311      	movs	r3, #17
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	d004      	beq.n	8009d88 <f_open+0x108>
					res = FR_DENIED;
 8009d7e:	2367      	movs	r3, #103	@ 0x67
 8009d80:	18fb      	adds	r3, r7, r3
 8009d82:	2207      	movs	r2, #7
 8009d84:	701a      	strb	r2, [r3, #0]
 8009d86:	e008      	b.n	8009d9a <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009d88:	1dfb      	adds	r3, r7, #7
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2204      	movs	r2, #4
 8009d8e:	4013      	ands	r3, r2
 8009d90:	d003      	beq.n	8009d9a <f_open+0x11a>
 8009d92:	2367      	movs	r3, #103	@ 0x67
 8009d94:	18fb      	adds	r3, r7, r3
 8009d96:	2208      	movs	r2, #8
 8009d98:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009d9a:	2467      	movs	r4, #103	@ 0x67
 8009d9c:	193b      	adds	r3, r7, r4
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d000      	beq.n	8009da6 <f_open+0x126>
 8009da4:	e07b      	b.n	8009e9e <f_open+0x21e>
 8009da6:	1dfb      	adds	r3, r7, #7
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	2208      	movs	r2, #8
 8009dac:	4013      	ands	r3, r2
 8009dae:	d100      	bne.n	8009db2 <f_open+0x132>
 8009db0:	e075      	b.n	8009e9e <f_open+0x21e>
				dw = GET_FATTIME();
 8009db2:	f7fc fe91 	bl	8006ad8 <get_fattime>
 8009db6:	0003      	movs	r3, r0
 8009db8:	65bb      	str	r3, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009dba:	2518      	movs	r5, #24
 8009dbc:	197b      	adds	r3, r7, r5
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	330e      	adds	r3, #14
 8009dc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dc4:	0011      	movs	r1, r2
 8009dc6:	0018      	movs	r0, r3
 8009dc8:	f7fd fd86 	bl	80078d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009dcc:	197b      	adds	r3, r7, r5
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	3316      	adds	r3, #22
 8009dd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009dd4:	0011      	movs	r1, r2
 8009dd6:	0018      	movs	r0, r3
 8009dd8:	f7fd fd7e 	bl	80078d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009ddc:	197b      	adds	r3, r7, r5
 8009dde:	6a1b      	ldr	r3, [r3, #32]
 8009de0:	330b      	adds	r3, #11
 8009de2:	2220      	movs	r2, #32
 8009de4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	197b      	adds	r3, r7, r5
 8009dea:	6a1b      	ldr	r3, [r3, #32]
 8009dec:	0019      	movs	r1, r3
 8009dee:	0010      	movs	r0, r2
 8009df0:	f7fe fd2a 	bl	8008848 <ld_clust>
 8009df4:	0003      	movs	r3, r0
 8009df6:	657b      	str	r3, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009df8:	6978      	ldr	r0, [r7, #20]
 8009dfa:	197b      	adds	r3, r7, r5
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	0019      	movs	r1, r3
 8009e02:	f7fe fd40 	bl	8008886 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009e06:	197b      	adds	r3, r7, r5
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	331c      	adds	r3, #28
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f7fd fd62 	bl	80078d8 <st_dword>
					fs->wflag = 1;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	2201      	movs	r2, #1
 8009e18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d03e      	beq.n	8009e9e <f_open+0x21e>
						dw = fs->winsect;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e24:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009e26:	0026      	movs	r6, r4
 8009e28:	193c      	adds	r4, r7, r4
 8009e2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e2c:	197b      	adds	r3, r7, r5
 8009e2e:	2200      	movs	r2, #0
 8009e30:	0018      	movs	r0, r3
 8009e32:	f7fe fa1c 	bl	800826e <remove_chain>
 8009e36:	0003      	movs	r3, r0
 8009e38:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 8009e3a:	19bb      	adds	r3, r7, r6
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d12d      	bne.n	8009e9e <f_open+0x21e>
							res = move_window(fs, dw);
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	19bc      	adds	r4, r7, r6
 8009e46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e48:	0011      	movs	r1, r2
 8009e4a:	0018      	movs	r0, r3
 8009e4c:	f7fd ff96 	bl	8007d7c <move_window>
 8009e50:	0003      	movs	r3, r0
 8009e52:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e58:	3a01      	subs	r2, #1
 8009e5a:	611a      	str	r2, [r3, #16]
 8009e5c:	e01f      	b.n	8009e9e <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009e5e:	2167      	movs	r1, #103	@ 0x67
 8009e60:	187b      	adds	r3, r7, r1
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d11a      	bne.n	8009e9e <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009e68:	2318      	movs	r3, #24
 8009e6a:	18fb      	adds	r3, r7, r3
 8009e6c:	799b      	ldrb	r3, [r3, #6]
 8009e6e:	001a      	movs	r2, r3
 8009e70:	2310      	movs	r3, #16
 8009e72:	4013      	ands	r3, r2
 8009e74:	d003      	beq.n	8009e7e <f_open+0x1fe>
					res = FR_NO_FILE;
 8009e76:	187b      	adds	r3, r7, r1
 8009e78:	2204      	movs	r2, #4
 8009e7a:	701a      	strb	r2, [r3, #0]
 8009e7c:	e00f      	b.n	8009e9e <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009e7e:	1dfb      	adds	r3, r7, #7
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2202      	movs	r2, #2
 8009e84:	4013      	ands	r3, r2
 8009e86:	d00a      	beq.n	8009e9e <f_open+0x21e>
 8009e88:	2318      	movs	r3, #24
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	799b      	ldrb	r3, [r3, #6]
 8009e8e:	001a      	movs	r2, r3
 8009e90:	2301      	movs	r3, #1
 8009e92:	4013      	ands	r3, r2
 8009e94:	d003      	beq.n	8009e9e <f_open+0x21e>
						res = FR_DENIED;
 8009e96:	2367      	movs	r3, #103	@ 0x67
 8009e98:	18fb      	adds	r3, r7, r3
 8009e9a:	2207      	movs	r2, #7
 8009e9c:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8009e9e:	2367      	movs	r3, #103	@ 0x67
 8009ea0:	18fb      	adds	r3, r7, r3
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d12b      	bne.n	8009f00 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ea8:	1dfb      	adds	r3, r7, #7
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	2208      	movs	r2, #8
 8009eae:	4013      	ands	r3, r2
 8009eb0:	d005      	beq.n	8009ebe <f_open+0x23e>
				mode |= FA_MODIFIED;
 8009eb2:	1dfb      	adds	r3, r7, #7
 8009eb4:	1dfa      	adds	r2, r7, #7
 8009eb6:	7812      	ldrb	r2, [r2, #0]
 8009eb8:	2140      	movs	r1, #64	@ 0x40
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8009ec6:	2118      	movs	r1, #24
 8009ec8:	187b      	adds	r3, r7, r1
 8009eca:	6a1a      	ldr	r2, [r3, #32]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ed0:	1dfb      	adds	r3, r7, #7
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	419b      	sbcs	r3, r3
 8009eda:	425b      	negs	r3, r3
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	001a      	movs	r2, r3
 8009ee0:	187b      	adds	r3, r7, r1
 8009ee2:	0011      	movs	r1, r2
 8009ee4:	0018      	movs	r0, r3
 8009ee6:	f7fd fe0d 	bl	8007b04 <inc_lock>
 8009eea:	0002      	movs	r2, r0
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d103      	bne.n	8009f00 <f_open+0x280>
 8009ef8:	2367      	movs	r3, #103	@ 0x67
 8009efa:	18fb      	adds	r3, r7, r3
 8009efc:	2202      	movs	r2, #2
 8009efe:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009f00:	2367      	movs	r3, #103	@ 0x67
 8009f02:	18fb      	adds	r3, r7, r3
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d000      	beq.n	8009f0c <f_open+0x28c>
 8009f0a:	e09e      	b.n	800a04a <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	2418      	movs	r4, #24
 8009f10:	193b      	adds	r3, r7, r4
 8009f12:	6a1b      	ldr	r3, [r3, #32]
 8009f14:	0019      	movs	r1, r3
 8009f16:	0010      	movs	r0, r2
 8009f18:	f7fe fc96 	bl	8008848 <ld_clust>
 8009f1c:	0002      	movs	r2, r0
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009f22:	193b      	adds	r3, r7, r4
 8009f24:	6a1b      	ldr	r3, [r3, #32]
 8009f26:	331c      	adds	r3, #28
 8009f28:	0018      	movs	r0, r3
 8009f2a:	f7fd fc96 	bl	800785a <ld_dword>
 8009f2e:	0002      	movs	r2, r0
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	88da      	ldrh	r2, [r3, #6]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	1dfa      	adds	r2, r7, #7
 8009f4c:	7812      	ldrb	r2, [r2, #0]
 8009f4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3330      	adds	r3, #48	@ 0x30
 8009f66:	2280      	movs	r2, #128	@ 0x80
 8009f68:	0092      	lsls	r2, r2, #2
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	f7fd fcfc 	bl	800796a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009f72:	1dfb      	adds	r3, r7, #7
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2220      	movs	r2, #32
 8009f78:	4013      	ands	r3, r2
 8009f7a:	d066      	beq.n	800a04a <f_open+0x3ca>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d062      	beq.n	800a04a <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	895b      	ldrh	r3, [r3, #10]
 8009f90:	025b      	lsls	r3, r3, #9
 8009f92:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fa0:	e019      	b.n	8009fd6 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fa6:	0011      	movs	r1, r2
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f7fd ffb5 	bl	8007f18 <get_fat>
 8009fae:	0003      	movs	r3, r0
 8009fb0:	663b      	str	r3, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009fb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d803      	bhi.n	8009fc0 <f_open+0x340>
 8009fb8:	2367      	movs	r3, #103	@ 0x67
 8009fba:	18fb      	adds	r3, r7, r3
 8009fbc:	2202      	movs	r2, #2
 8009fbe:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009fc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	d103      	bne.n	8009fce <f_open+0x34e>
 8009fc6:	2367      	movs	r3, #103	@ 0x67
 8009fc8:	18fb      	adds	r3, r7, r3
 8009fca:	2201      	movs	r2, #1
 8009fcc:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009fce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fd6:	2367      	movs	r3, #103	@ 0x67
 8009fd8:	18fb      	adds	r3, r7, r3
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d103      	bne.n	8009fe8 <f_open+0x368>
 8009fe0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d8dc      	bhi.n	8009fa2 <f_open+0x322>
				}
				fp->clust = clst;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009fec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009fee:	2467      	movs	r4, #103	@ 0x67
 8009ff0:	193b      	adds	r3, r7, r4
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d128      	bne.n	800a04a <f_open+0x3ca>
 8009ff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ffa:	05db      	lsls	r3, r3, #23
 8009ffc:	0ddb      	lsrs	r3, r3, #23
 8009ffe:	d024      	beq.n	800a04a <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a004:	0011      	movs	r1, r2
 800a006:	0018      	movs	r0, r3
 800a008:	f7fd ff6a 	bl	8007ee0 <clust2sect>
 800a00c:	0003      	movs	r3, r0
 800a00e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d103      	bne.n	800a01e <f_open+0x39e>
						res = FR_INT_ERR;
 800a016:	193b      	adds	r3, r7, r4
 800a018:	2202      	movs	r2, #2
 800a01a:	701a      	strb	r2, [r3, #0]
 800a01c:	e015      	b.n	800a04a <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a01e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a020:	0a5a      	lsrs	r2, r3, #9
 800a022:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a024:	18d2      	adds	r2, r2, r3
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	7858      	ldrb	r0, [r3, #1]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3330      	adds	r3, #48	@ 0x30
 800a032:	0019      	movs	r1, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6a1a      	ldr	r2, [r3, #32]
 800a038:	2301      	movs	r3, #1
 800a03a:	f7fd fb7b 	bl	8007734 <disk_read>
 800a03e:	1e03      	subs	r3, r0, #0
 800a040:	d003      	beq.n	800a04a <f_open+0x3ca>
 800a042:	2367      	movs	r3, #103	@ 0x67
 800a044:	18fb      	adds	r3, r7, r3
 800a046:	2201      	movs	r2, #1
 800a048:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a04a:	2367      	movs	r3, #103	@ 0x67
 800a04c:	18fb      	adds	r3, r7, r3
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <f_open+0x3da>
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a05a:	2367      	movs	r3, #103	@ 0x67
 800a05c:	18fb      	adds	r3, r7, r3
 800a05e:	781b      	ldrb	r3, [r3, #0]
}
 800a060:	0018      	movs	r0, r3
 800a062:	46bd      	mov	sp, r7
 800a064:	b01b      	add	sp, #108	@ 0x6c
 800a066:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a068 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a068:	b5b0      	push	{r4, r5, r7, lr}
 800a06a:	b08e      	sub	sp, #56	@ 0x38
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
 800a074:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2537      	movs	r5, #55	@ 0x37
 800a084:	197c      	adds	r4, r7, r5
 800a086:	2214      	movs	r2, #20
 800a088:	18ba      	adds	r2, r7, r2
 800a08a:	0011      	movs	r1, r2
 800a08c:	0018      	movs	r0, r3
 800a08e:	f7ff fd6f 	bl	8009b70 <validate>
 800a092:	0003      	movs	r3, r0
 800a094:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a096:	197b      	adds	r3, r7, r5
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d107      	bne.n	800a0ae <f_read+0x46>
 800a09e:	197b      	adds	r3, r7, r5
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	7d52      	ldrb	r2, [r2, #21]
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	197b      	adds	r3, r7, r5
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <f_read+0x4e>
 800a0ae:	2337      	movs	r3, #55	@ 0x37
 800a0b0:	18fb      	adds	r3, r7, r3
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	e115      	b.n	800a2e2 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	7d1b      	ldrb	r3, [r3, #20]
 800a0ba:	001a      	movs	r2, r3
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4013      	ands	r3, r2
 800a0c0:	d101      	bne.n	800a0c6 <f_read+0x5e>
 800a0c2:	2307      	movs	r3, #7
 800a0c4:	e10d      	b.n	800a2e2 <f_read+0x27a>
	remain = fp->obj.objsize - fp->fptr;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	1ad3      	subs	r3, r2, r3
 800a0d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d800      	bhi.n	800a0dc <f_read+0x74>
 800a0da:	e0fd      	b.n	800a2d8 <f_read+0x270>
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a0e0:	e0fa      	b.n	800a2d8 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	05db      	lsls	r3, r3, #23
 800a0e8:	0ddb      	lsrs	r3, r3, #23
 800a0ea:	d000      	beq.n	800a0ee <f_read+0x86>
 800a0ec:	e0c5      	b.n	800a27a <f_read+0x212>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	0a5b      	lsrs	r3, r3, #9
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	8952      	ldrh	r2, [r2, #10]
 800a0f8:	3a01      	subs	r2, #1
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d131      	bne.n	800a168 <f_read+0x100>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d103      	bne.n	800a114 <f_read+0xac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	633b      	str	r3, [r7, #48]	@ 0x30
 800a112:	e016      	b.n	800a142 <f_read+0xda>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d009      	beq.n	800a130 <f_read+0xc8>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	699a      	ldr	r2, [r3, #24]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	0011      	movs	r1, r2
 800a124:	0018      	movs	r0, r3
 800a126:	f7fe f9bb 	bl	80084a0 <clmt_clust>
 800a12a:	0003      	movs	r3, r0
 800a12c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a12e:	e008      	b.n	800a142 <f_read+0xda>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a130:	68fa      	ldr	r2, [r7, #12]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	69db      	ldr	r3, [r3, #28]
 800a136:	0019      	movs	r1, r3
 800a138:	0010      	movs	r0, r2
 800a13a:	f7fd feed 	bl	8007f18 <get_fat>
 800a13e:	0003      	movs	r3, r0
 800a140:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a144:	2b01      	cmp	r3, #1
 800a146:	d804      	bhi.n	800a152 <f_read+0xea>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2202      	movs	r2, #2
 800a14c:	755a      	strb	r2, [r3, #21]
 800a14e:	2302      	movs	r3, #2
 800a150:	e0c7      	b.n	800a2e2 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a154:	3301      	adds	r3, #1
 800a156:	d104      	bne.n	800a162 <f_read+0xfa>
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2201      	movs	r2, #1
 800a15c:	755a      	strb	r2, [r3, #21]
 800a15e:	2301      	movs	r3, #1
 800a160:	e0bf      	b.n	800a2e2 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a166:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	0019      	movs	r1, r3
 800a170:	0010      	movs	r0, r2
 800a172:	f7fd feb5 	bl	8007ee0 <clust2sect>
 800a176:	0003      	movs	r3, r0
 800a178:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d104      	bne.n	800a18a <f_read+0x122>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2202      	movs	r2, #2
 800a184:	755a      	strb	r2, [r3, #21]
 800a186:	2302      	movs	r3, #2
 800a188:	e0ab      	b.n	800a2e2 <f_read+0x27a>
			sect += csect;
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	18d3      	adds	r3, r2, r3
 800a190:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	0a5b      	lsrs	r3, r3, #9
 800a196:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d038      	beq.n	800a210 <f_read+0x1a8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a19e:	69fa      	ldr	r2, [r7, #28]
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	18d3      	adds	r3, r2, r3
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	8952      	ldrh	r2, [r2, #10]
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d905      	bls.n	800a1b8 <f_read+0x150>
					cc = fs->csize - csect;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	895b      	ldrh	r3, [r3, #10]
 800a1b0:	001a      	movs	r2, r3
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	7858      	ldrb	r0, [r3, #1]
 800a1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1be:	69ba      	ldr	r2, [r7, #24]
 800a1c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1c2:	f7fd fab7 	bl	8007734 <disk_read>
 800a1c6:	1e03      	subs	r3, r0, #0
 800a1c8:	d004      	beq.n	800a1d4 <f_read+0x16c>
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	755a      	strb	r2, [r3, #21]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e086      	b.n	800a2e2 <f_read+0x27a>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	7d1b      	ldrb	r3, [r3, #20]
 800a1d8:	b25b      	sxtb	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da14      	bge.n	800a208 <f_read+0x1a0>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6a1a      	ldr	r2, [r3, #32]
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d90d      	bls.n	800a208 <f_read+0x1a0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6a1a      	ldr	r2, [r3, #32]
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	025b      	lsls	r3, r3, #9
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1f8:	18d0      	adds	r0, r2, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3330      	adds	r3, #48	@ 0x30
 800a1fe:	2280      	movs	r2, #128	@ 0x80
 800a200:	0092      	lsls	r2, r2, #2
 800a202:	0019      	movs	r1, r3
 800a204:	f7fd fb92 	bl	800792c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20a:	025b      	lsls	r3, r3, #9
 800a20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a20e:	e04f      	b.n	800a2b0 <f_read+0x248>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	429a      	cmp	r2, r3
 800a218:	d02c      	beq.n	800a274 <f_read+0x20c>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	7d1b      	ldrb	r3, [r3, #20]
 800a21e:	b25b      	sxtb	r3, r3
 800a220:	2b00      	cmp	r3, #0
 800a222:	da17      	bge.n	800a254 <f_read+0x1ec>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	7858      	ldrb	r0, [r3, #1]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	3330      	adds	r3, #48	@ 0x30
 800a22c:	0019      	movs	r1, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a1a      	ldr	r2, [r3, #32]
 800a232:	2301      	movs	r3, #1
 800a234:	f7fd faa6 	bl	8007784 <disk_write>
 800a238:	1e03      	subs	r3, r0, #0
 800a23a:	d004      	beq.n	800a246 <f_read+0x1de>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2201      	movs	r2, #1
 800a240:	755a      	strb	r2, [r3, #21]
 800a242:	2301      	movs	r3, #1
 800a244:	e04d      	b.n	800a2e2 <f_read+0x27a>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	7d1b      	ldrb	r3, [r3, #20]
 800a24a:	227f      	movs	r2, #127	@ 0x7f
 800a24c:	4013      	ands	r3, r2
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	7858      	ldrb	r0, [r3, #1]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	3330      	adds	r3, #48	@ 0x30
 800a25c:	0019      	movs	r1, r3
 800a25e:	69ba      	ldr	r2, [r7, #24]
 800a260:	2301      	movs	r3, #1
 800a262:	f7fd fa67 	bl	8007734 <disk_read>
 800a266:	1e03      	subs	r3, r0, #0
 800a268:	d004      	beq.n	800a274 <f_read+0x20c>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2201      	movs	r2, #1
 800a26e:	755a      	strb	r2, [r3, #21]
 800a270:	2301      	movs	r3, #1
 800a272:	e036      	b.n	800a2e2 <f_read+0x27a>
			}
#endif
			fp->sect = sect;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	69ba      	ldr	r2, [r7, #24]
 800a278:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	05db      	lsls	r3, r3, #23
 800a280:	0ddb      	lsrs	r3, r3, #23
 800a282:	2280      	movs	r2, #128	@ 0x80
 800a284:	0092      	lsls	r2, r2, #2
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a28a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d901      	bls.n	800a296 <f_read+0x22e>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3330      	adds	r3, #48	@ 0x30
 800a29a:	001a      	movs	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	05db      	lsls	r3, r3, #23
 800a2a2:	0ddb      	lsrs	r3, r3, #23
 800a2a4:	18d1      	adds	r1, r2, r3
 800a2a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2aa:	0018      	movs	r0, r3
 800a2ac:	f7fd fb3e 	bl	800792c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a2b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b4:	18d3      	adds	r3, r2, r3
 800a2b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	699a      	ldr	r2, [r3, #24]
 800a2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2be:	18d2      	adds	r2, r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	619a      	str	r2, [r3, #24]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ca:	18d2      	adds	r2, r2, r3
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d000      	beq.n	800a2e0 <f_read+0x278>
 800a2de:	e700      	b.n	800a0e2 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b00e      	add	sp, #56	@ 0x38
 800a2e8:	bdb0      	pop	{r4, r5, r7, pc}

0800a2ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a2ea:	b5b0      	push	{r4, r5, r7, lr}
 800a2ec:	b086      	sub	sp, #24
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2517      	movs	r5, #23
 800a2f6:	197c      	adds	r4, r7, r5
 800a2f8:	2208      	movs	r2, #8
 800a2fa:	18ba      	adds	r2, r7, r2
 800a2fc:	0011      	movs	r1, r2
 800a2fe:	0018      	movs	r0, r3
 800a300:	f7ff fc36 	bl	8009b70 <validate>
 800a304:	0003      	movs	r3, r0
 800a306:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a308:	197b      	adds	r3, r7, r5
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d16e      	bne.n	800a3ee <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	7d1b      	ldrb	r3, [r3, #20]
 800a314:	001a      	movs	r2, r3
 800a316:	2340      	movs	r3, #64	@ 0x40
 800a318:	4013      	ands	r3, r2
 800a31a:	d068      	beq.n	800a3ee <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	7d1b      	ldrb	r3, [r3, #20]
 800a320:	b25b      	sxtb	r3, r3
 800a322:	2b00      	cmp	r3, #0
 800a324:	da14      	bge.n	800a350 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	7858      	ldrb	r0, [r3, #1]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3330      	adds	r3, #48	@ 0x30
 800a32e:	0019      	movs	r1, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a1a      	ldr	r2, [r3, #32]
 800a334:	2301      	movs	r3, #1
 800a336:	f7fd fa25 	bl	8007784 <disk_write>
 800a33a:	1e03      	subs	r3, r0, #0
 800a33c:	d001      	beq.n	800a342 <f_sync+0x58>
 800a33e:	2301      	movs	r3, #1
 800a340:	e058      	b.n	800a3f4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	7d1b      	ldrb	r3, [r3, #20]
 800a346:	227f      	movs	r2, #127	@ 0x7f
 800a348:	4013      	ands	r3, r2
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a350:	f7fc fbc2 	bl	8006ad8 <get_fattime>
 800a354:	0003      	movs	r3, r0
 800a356:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35e:	2517      	movs	r5, #23
 800a360:	197c      	adds	r4, r7, r5
 800a362:	0019      	movs	r1, r3
 800a364:	0010      	movs	r0, r2
 800a366:	f7fd fd09 	bl	8007d7c <move_window>
 800a36a:	0003      	movs	r3, r0
 800a36c:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800a36e:	002c      	movs	r4, r5
 800a370:	193b      	adds	r3, r7, r4
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d13a      	bne.n	800a3ee <f_sync+0x104>
					dir = fp->dir_ptr;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	330b      	adds	r3, #11
 800a382:	781a      	ldrb	r2, [r3, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	330b      	adds	r3, #11
 800a388:	2120      	movs	r1, #32
 800a38a:	430a      	orrs	r2, r1
 800a38c:	b2d2      	uxtb	r2, r2
 800a38e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689a      	ldr	r2, [r3, #8]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	0019      	movs	r1, r3
 800a39c:	f7fe fa73 	bl	8008886 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	331c      	adds	r3, #28
 800a3a4:	001a      	movs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68db      	ldr	r3, [r3, #12]
 800a3aa:	0019      	movs	r1, r3
 800a3ac:	0010      	movs	r0, r2
 800a3ae:	f7fd fa93 	bl	80078d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	3316      	adds	r3, #22
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	0011      	movs	r1, r2
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f7fd fa8c 	bl	80078d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3312      	adds	r3, #18
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	0018      	movs	r0, r3
 800a3c8:	f7fd fa68 	bl	800789c <st_word>
					fs->wflag = 1;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	193c      	adds	r4, r7, r4
 800a3d6:	0018      	movs	r0, r3
 800a3d8:	f7fd fd06 	bl	8007de8 <sync_fs>
 800a3dc:	0003      	movs	r3, r0
 800a3de:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	7d1b      	ldrb	r3, [r3, #20]
 800a3e4:	2240      	movs	r2, #64	@ 0x40
 800a3e6:	4393      	bics	r3, r2
 800a3e8:	b2da      	uxtb	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a3ee:	2317      	movs	r3, #23
 800a3f0:	18fb      	adds	r3, r7, r3
 800a3f2:	781b      	ldrb	r3, [r3, #0]
}
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	b006      	add	sp, #24
 800a3fa:	bdb0      	pop	{r4, r5, r7, pc}

0800a3fc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a3fc:	b5b0      	push	{r4, r5, r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a404:	250f      	movs	r5, #15
 800a406:	197c      	adds	r4, r7, r5
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	0018      	movs	r0, r3
 800a40c:	f7ff ff6d 	bl	800a2ea <f_sync>
 800a410:	0003      	movs	r3, r0
 800a412:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 800a414:	197b      	adds	r3, r7, r5
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d11c      	bne.n	800a456 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	197c      	adds	r4, r7, r5
 800a420:	2208      	movs	r2, #8
 800a422:	18ba      	adds	r2, r7, r2
 800a424:	0011      	movs	r1, r2
 800a426:	0018      	movs	r0, r3
 800a428:	f7ff fba2 	bl	8009b70 <validate>
 800a42c:	0003      	movs	r3, r0
 800a42e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 800a430:	197b      	adds	r3, r7, r5
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10e      	bne.n	800a456 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	197c      	adds	r4, r7, r5
 800a43e:	0018      	movs	r0, r3
 800a440:	f7fd fbea 	bl	8007c18 <dec_lock>
 800a444:	0003      	movs	r3, r0
 800a446:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 800a448:	197b      	adds	r3, r7, r5
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2200      	movs	r2, #0
 800a454:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a456:	230f      	movs	r3, #15
 800a458:	18fb      	adds	r3, r7, r3
 800a45a:	781b      	ldrb	r3, [r3, #0]
}
 800a45c:	0018      	movs	r0, r3
 800a45e:	46bd      	mov	sp, r7
 800a460:	b004      	add	sp, #16
 800a462:	bdb0      	pop	{r4, r5, r7, pc}

0800a464 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a464:	b5b0      	push	{r4, r5, r7, lr}
 800a466:	b092      	sub	sp, #72	@ 0x48
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	60b9      	str	r1, [r7, #8]
 800a46e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a470:	2547      	movs	r5, #71	@ 0x47
 800a472:	197c      	adds	r4, r7, r5
 800a474:	2328      	movs	r3, #40	@ 0x28
 800a476:	18f9      	adds	r1, r7, r3
 800a478:	230c      	movs	r3, #12
 800a47a:	18fb      	adds	r3, r7, r3
 800a47c:	2200      	movs	r2, #0
 800a47e:	0018      	movs	r0, r3
 800a480:	f7ff f902 	bl	8009688 <find_volume>
 800a484:	0003      	movs	r3, r0
 800a486:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 800a488:	197b      	adds	r3, r7, r5
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d000      	beq.n	800a492 <f_getfree+0x2e>
 800a490:	e09e      	b.n	800a5d0 <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49a:	695a      	ldr	r2, [r3, #20]
 800a49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	3b02      	subs	r3, #2
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d804      	bhi.n	800a4b0 <f_getfree+0x4c>
			*nclst = fs->free_clst;
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	695a      	ldr	r2, [r3, #20]
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	e08f      	b.n	800a5d0 <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a4b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d12d      	bne.n	800a518 <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4c2:	2314      	movs	r3, #20
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 800a4c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a4ca:	2314      	movs	r3, #20
 800a4cc:	18fb      	adds	r3, r7, r3
 800a4ce:	0011      	movs	r1, r2
 800a4d0:	0018      	movs	r0, r3
 800a4d2:	f7fd fd21 	bl	8007f18 <get_fat>
 800a4d6:	0003      	movs	r3, r0
 800a4d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4dc:	3301      	adds	r3, #1
 800a4de:	d104      	bne.n	800a4ea <f_getfree+0x86>
 800a4e0:	2347      	movs	r3, #71	@ 0x47
 800a4e2:	18fb      	adds	r3, r7, r3
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	701a      	strb	r2, [r3, #0]
 800a4e8:	e065      	b.n	800a5b6 <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d104      	bne.n	800a4fa <f_getfree+0x96>
 800a4f0:	2347      	movs	r3, #71	@ 0x47
 800a4f2:	18fb      	adds	r3, r7, r3
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	701a      	strb	r2, [r3, #0]
 800a4f8:	e05d      	b.n	800a5b6 <f_getfree+0x152>
					if (stat == 0) nfree++;
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d102      	bne.n	800a506 <f_getfree+0xa2>
 800a500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a502:	3301      	adds	r3, #1
 800a504:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a508:	3301      	adds	r3, #1
 800a50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a512:	429a      	cmp	r2, r3
 800a514:	d3d8      	bcc.n	800a4c8 <f_getfree+0x64>
 800a516:	e04e      	b.n	800a5b6 <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a522:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	637b      	str	r3, [r7, #52]	@ 0x34
 800a528:	2300      	movs	r3, #0
 800a52a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d114      	bne.n	800a55c <f_getfree+0xf8>
							res = move_window(fs, sect++);
 800a532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a53a:	2547      	movs	r5, #71	@ 0x47
 800a53c:	197c      	adds	r4, r7, r5
 800a53e:	0019      	movs	r1, r3
 800a540:	f7fd fc1c 	bl	8007d7c <move_window>
 800a544:	0003      	movs	r3, r0
 800a546:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 800a548:	197b      	adds	r3, r7, r5
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d131      	bne.n	800a5b4 <f_getfree+0x150>
							p = fs->win;
 800a550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a552:	3334      	adds	r3, #52	@ 0x34
 800a554:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a556:	2380      	movs	r3, #128	@ 0x80
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a55c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b02      	cmp	r3, #2
 800a562:	d10f      	bne.n	800a584 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 800a564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a566:	0018      	movs	r0, r3
 800a568:	f7fd f95c 	bl	8007824 <ld_word>
 800a56c:	1e03      	subs	r3, r0, #0
 800a56e:	d102      	bne.n	800a576 <f_getfree+0x112>
 800a570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a572:	3301      	adds	r3, #1
 800a574:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a578:	3302      	adds	r3, #2
 800a57a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a57c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a57e:	3b02      	subs	r3, #2
 800a580:	637b      	str	r3, [r7, #52]	@ 0x34
 800a582:	e010      	b.n	800a5a6 <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a586:	0018      	movs	r0, r3
 800a588:	f7fd f967 	bl	800785a <ld_dword>
 800a58c:	0003      	movs	r3, r0
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	091b      	lsrs	r3, r3, #4
 800a592:	d102      	bne.n	800a59a <f_getfree+0x136>
 800a594:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a596:	3301      	adds	r3, #1
 800a598:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	3304      	adds	r3, #4
 800a59e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5a2:	3b04      	subs	r3, #4
 800a5a4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1bc      	bne.n	800a52c <f_getfree+0xc8>
 800a5b2:	e000      	b.n	800a5b6 <f_getfree+0x152>
							if (res != FR_OK) break;
 800a5b4:	46c0      	nop			@ (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5ba:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c4:	791a      	ldrb	r2, [r3, #4]
 800a5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	b2d2      	uxtb	r2, r2
 800a5ce:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a5d0:	2347      	movs	r3, #71	@ 0x47
 800a5d2:	18fb      	adds	r3, r7, r3
 800a5d4:	781b      	ldrb	r3, [r3, #0]
}
 800a5d6:	0018      	movs	r0, r3
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	b012      	add	sp, #72	@ 0x48
 800a5dc:	bdb0      	pop	{r4, r5, r7, pc}

0800a5de <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800a5de:	b590      	push	{r4, r7, lr}
 800a5e0:	b089      	sub	sp, #36	@ 0x24
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	60f8      	str	r0, [r7, #12]
 800a5e6:	60b9      	str	r1, [r7, #8]
 800a5e8:	607a      	str	r2, [r7, #4]
	int n = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a5f2:	e022      	b.n	800a63a <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800a5f4:	2310      	movs	r3, #16
 800a5f6:	18fb      	adds	r3, r7, r3
 800a5f8:	2414      	movs	r4, #20
 800a5fa:	1939      	adds	r1, r7, r4
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f7ff fd32 	bl	800a068 <f_read>
		if (rc != 1) break;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d11d      	bne.n	800a646 <f_gets+0x68>
		c = s[0];
 800a60a:	2117      	movs	r1, #23
 800a60c:	187b      	adds	r3, r7, r1
 800a60e:	193a      	adds	r2, r7, r4
 800a610:	7812      	ldrb	r2, [r2, #0]
 800a612:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a614:	187b      	adds	r3, r7, r1
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b0d      	cmp	r3, #13
 800a61a:	d00d      	beq.n	800a638 <f_gets+0x5a>
		*p++ = c;
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	61ba      	str	r2, [r7, #24]
 800a622:	187a      	adds	r2, r7, r1
 800a624:	7812      	ldrb	r2, [r2, #0]
 800a626:	701a      	strb	r2, [r3, #0]
		n++;
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	3301      	adds	r3, #1
 800a62c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800a62e:	187b      	adds	r3, r7, r1
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b0a      	cmp	r3, #10
 800a634:	d009      	beq.n	800a64a <f_gets+0x6c>
 800a636:	e000      	b.n	800a63a <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800a638:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	69fa      	ldr	r2, [r7, #28]
 800a640:	429a      	cmp	r2, r3
 800a642:	dbd7      	blt.n	800a5f4 <f_gets+0x16>
 800a644:	e002      	b.n	800a64c <f_gets+0x6e>
		if (rc != 1) break;
 800a646:	46c0      	nop			@ (mov r8, r8)
 800a648:	e000      	b.n	800a64c <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 800a64a:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <f_gets+0x7e>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	e000      	b.n	800a65e <f_gets+0x80>
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	0018      	movs	r0, r3
 800a660:	46bd      	mov	sp, r7
 800a662:	b009      	add	sp, #36	@ 0x24
 800a664:	bd90      	pop	{r4, r7, pc}
	...

0800a668 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	1dfb      	adds	r3, r7, #7
 800a674:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 800a676:	2417      	movs	r4, #23
 800a678:	193b      	adds	r3, r7, r4
 800a67a:	2201      	movs	r2, #1
 800a67c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800a67e:	2016      	movs	r0, #22
 800a680:	183b      	adds	r3, r7, r0
 800a682:	2200      	movs	r2, #0
 800a684:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 800a686:	4b21      	ldr	r3, [pc, #132]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a688:	7a5b      	ldrb	r3, [r3, #9]
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d136      	bne.n	800a6fe <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a690:	4b1e      	ldr	r3, [pc, #120]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a692:	7a5b      	ldrb	r3, [r3, #9]
 800a694:	b2db      	uxtb	r3, r3
 800a696:	001a      	movs	r2, r3
 800a698:	4b1c      	ldr	r3, [pc, #112]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a69a:	2100      	movs	r1, #0
 800a69c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a69e:	4b1b      	ldr	r3, [pc, #108]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a6a0:	7a5b      	ldrb	r3, [r3, #9]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	4a19      	ldr	r2, [pc, #100]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	18d3      	adds	r3, r2, r3
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 800a6b0:	4b16      	ldr	r3, [pc, #88]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a6b2:	7a5b      	ldrb	r3, [r3, #9]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	001a      	movs	r2, r3
 800a6b8:	4b14      	ldr	r3, [pc, #80]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a6ba:	189b      	adds	r3, r3, r2
 800a6bc:	1dfa      	adds	r2, r7, #7
 800a6be:	7812      	ldrb	r2, [r2, #0]
 800a6c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a6c2:	4b12      	ldr	r3, [pc, #72]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a6c4:	7a5b      	ldrb	r3, [r3, #9]
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	1c5a      	adds	r2, r3, #1
 800a6ca:	b2d1      	uxtb	r1, r2
 800a6cc:	4a0f      	ldr	r2, [pc, #60]	@ (800a70c <FATFS_LinkDriverEx+0xa4>)
 800a6ce:	7251      	strb	r1, [r2, #9]
 800a6d0:	183a      	adds	r2, r7, r0
 800a6d2:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 800a6d4:	183b      	adds	r3, r7, r0
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	3330      	adds	r3, #48	@ 0x30
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	223a      	movs	r2, #58	@ 0x3a
 800a6e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	3302      	adds	r3, #2
 800a6ec:	222f      	movs	r2, #47	@ 0x2f
 800a6ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	3303      	adds	r3, #3
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a6f8:	193b      	adds	r3, r7, r4
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a6fe:	2317      	movs	r3, #23
 800a700:	18fb      	adds	r3, r7, r3
 800a702:	781b      	ldrb	r3, [r3, #0]
}
 800a704:	0018      	movs	r0, r3
 800a706:	46bd      	mov	sp, r7
 800a708:	b007      	add	sp, #28
 800a70a:	bd90      	pop	{r4, r7, pc}
 800a70c:	20000d4c 	.word	0x20000d4c

0800a710 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a71a:	6839      	ldr	r1, [r7, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	0018      	movs	r0, r3
 800a722:	f7ff ffa1 	bl	800a668 <FATFS_LinkDriverEx>
 800a726:	0003      	movs	r3, r0
}
 800a728:	0018      	movs	r0, r3
 800a72a:	46bd      	mov	sp, r7
 800a72c:	b002      	add	sp, #8
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	0002      	movs	r2, r0
 800a738:	6039      	str	r1, [r7, #0]
 800a73a:	1dbb      	adds	r3, r7, #6
 800a73c:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a73e:	1dbb      	adds	r3, r7, #6
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	2b7f      	cmp	r3, #127	@ 0x7f
 800a744:	d805      	bhi.n	800a752 <ff_convert+0x22>
		c = chr;
 800a746:	230e      	movs	r3, #14
 800a748:	18fb      	adds	r3, r7, r3
 800a74a:	1dba      	adds	r2, r7, #6
 800a74c:	8812      	ldrh	r2, [r2, #0]
 800a74e:	801a      	strh	r2, [r3, #0]
 800a750:	e037      	b.n	800a7c2 <ff_convert+0x92>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d010      	beq.n	800a77a <ff_convert+0x4a>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a758:	1dbb      	adds	r3, r7, #6
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	2bff      	cmp	r3, #255	@ 0xff
 800a75e:	d807      	bhi.n	800a770 <ff_convert+0x40>
 800a760:	1dbb      	adds	r3, r7, #6
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	3b80      	subs	r3, #128	@ 0x80
 800a766:	001a      	movs	r2, r3
 800a768:	4b19      	ldr	r3, [pc, #100]	@ (800a7d0 <ff_convert+0xa0>)
 800a76a:	0052      	lsls	r2, r2, #1
 800a76c:	5ad2      	ldrh	r2, [r2, r3]
 800a76e:	e000      	b.n	800a772 <ff_convert+0x42>
 800a770:	2200      	movs	r2, #0
 800a772:	230e      	movs	r3, #14
 800a774:	18fb      	adds	r3, r7, r3
 800a776:	801a      	strh	r2, [r3, #0]
 800a778:	e023      	b.n	800a7c2 <ff_convert+0x92>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a77a:	230e      	movs	r3, #14
 800a77c:	18fb      	adds	r3, r7, r3
 800a77e:	2200      	movs	r2, #0
 800a780:	801a      	strh	r2, [r3, #0]
 800a782:	e00e      	b.n	800a7a2 <ff_convert+0x72>
				if (chr == Tbl[c]) break;
 800a784:	210e      	movs	r1, #14
 800a786:	187b      	adds	r3, r7, r1
 800a788:	881a      	ldrh	r2, [r3, #0]
 800a78a:	4b11      	ldr	r3, [pc, #68]	@ (800a7d0 <ff_convert+0xa0>)
 800a78c:	0052      	lsls	r2, r2, #1
 800a78e:	5ad3      	ldrh	r3, [r2, r3]
 800a790:	1dba      	adds	r2, r7, #6
 800a792:	8812      	ldrh	r2, [r2, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d00a      	beq.n	800a7ae <ff_convert+0x7e>
			for (c = 0; c < 0x80; c++) {
 800a798:	187b      	adds	r3, r7, r1
 800a79a:	881a      	ldrh	r2, [r3, #0]
 800a79c:	187b      	adds	r3, r7, r1
 800a79e:	3201      	adds	r2, #1
 800a7a0:	801a      	strh	r2, [r3, #0]
 800a7a2:	230e      	movs	r3, #14
 800a7a4:	18fb      	adds	r3, r7, r3
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7aa:	d9eb      	bls.n	800a784 <ff_convert+0x54>
 800a7ac:	e000      	b.n	800a7b0 <ff_convert+0x80>
				if (chr == Tbl[c]) break;
 800a7ae:	46c0      	nop			@ (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
 800a7b0:	210e      	movs	r1, #14
 800a7b2:	187b      	adds	r3, r7, r1
 800a7b4:	881b      	ldrh	r3, [r3, #0]
 800a7b6:	3380      	adds	r3, #128	@ 0x80
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	187b      	adds	r3, r7, r1
 800a7bc:	21ff      	movs	r1, #255	@ 0xff
 800a7be:	400a      	ands	r2, r1
 800a7c0:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
 800a7c2:	230e      	movs	r3, #14
 800a7c4:	18fb      	adds	r3, r7, r3
 800a7c6:	881b      	ldrh	r3, [r3, #0]
}
 800a7c8:	0018      	movs	r0, r3
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	b004      	add	sp, #16
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	0800b91c 	.word	0x0800b91c

0800a7d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a7d4:	b5b0      	push	{r4, r5, r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	0002      	movs	r2, r0
 800a7dc:	1dbb      	adds	r3, r7, #6
 800a7de:	801a      	strh	r2, [r3, #0]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a7e0:	1dbb      	adds	r3, r7, #6
 800a7e2:	881a      	ldrh	r2, [r3, #0]
 800a7e4:	2380      	movs	r3, #128	@ 0x80
 800a7e6:	015b      	lsls	r3, r3, #5
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d201      	bcs.n	800a7f0 <ff_wtoupper+0x1c>
 800a7ec:	4b4d      	ldr	r3, [pc, #308]	@ (800a924 <ff_wtoupper+0x150>)
 800a7ee:	e000      	b.n	800a7f2 <ff_wtoupper+0x1e>
 800a7f0:	4b4d      	ldr	r3, [pc, #308]	@ (800a928 <ff_wtoupper+0x154>)
 800a7f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	1c9a      	adds	r2, r3, #2
 800a7f8:	617a      	str	r2, [r7, #20]
 800a7fa:	2412      	movs	r4, #18
 800a7fc:	193a      	adds	r2, r7, r4
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	8013      	strh	r3, [r2, #0]
		if (!bc || chr < bc) break;
 800a802:	193b      	adds	r3, r7, r4
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d100      	bne.n	800a80c <ff_wtoupper+0x38>
 800a80a:	e084      	b.n	800a916 <ff_wtoupper+0x142>
 800a80c:	1dba      	adds	r2, r7, #6
 800a80e:	193b      	adds	r3, r7, r4
 800a810:	8812      	ldrh	r2, [r2, #0]
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d200      	bcs.n	800a81a <ff_wtoupper+0x46>
 800a818:	e07d      	b.n	800a916 <ff_wtoupper+0x142>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	1c9a      	adds	r2, r3, #2
 800a81e:	617a      	str	r2, [r7, #20]
 800a820:	2010      	movs	r0, #16
 800a822:	183a      	adds	r2, r7, r0
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	8013      	strh	r3, [r2, #0]
 800a828:	250e      	movs	r5, #14
 800a82a:	197b      	adds	r3, r7, r5
 800a82c:	183a      	adds	r2, r7, r0
 800a82e:	8812      	ldrh	r2, [r2, #0]
 800a830:	0a12      	lsrs	r2, r2, #8
 800a832:	801a      	strh	r2, [r3, #0]
 800a834:	183b      	adds	r3, r7, r0
 800a836:	183a      	adds	r2, r7, r0
 800a838:	8812      	ldrh	r2, [r2, #0]
 800a83a:	21ff      	movs	r1, #255	@ 0xff
 800a83c:	400a      	ands	r2, r1
 800a83e:	801a      	strh	r2, [r3, #0]
		if (chr < bc + nc) {	/* In the block? */
 800a840:	1dbb      	adds	r3, r7, #6
 800a842:	881a      	ldrh	r2, [r3, #0]
 800a844:	193b      	adds	r3, r7, r4
 800a846:	8819      	ldrh	r1, [r3, #0]
 800a848:	183b      	adds	r3, r7, r0
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	18cb      	adds	r3, r1, r3
 800a84e:	429a      	cmp	r2, r3
 800a850:	da52      	bge.n	800a8f8 <ff_wtoupper+0x124>
			switch (cmd) {
 800a852:	197b      	adds	r3, r7, r5
 800a854:	881b      	ldrh	r3, [r3, #0]
 800a856:	2b08      	cmp	r3, #8
 800a858:	d85c      	bhi.n	800a914 <ff_wtoupper+0x140>
 800a85a:	009a      	lsls	r2, r3, #2
 800a85c:	4b33      	ldr	r3, [pc, #204]	@ (800a92c <ff_wtoupper+0x158>)
 800a85e:	18d3      	adds	r3, r2, r3
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	469f      	mov	pc, r3
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a864:	1dbb      	adds	r3, r7, #6
 800a866:	881a      	ldrh	r2, [r3, #0]
 800a868:	2312      	movs	r3, #18
 800a86a:	18fb      	adds	r3, r7, r3
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	697a      	ldr	r2, [r7, #20]
 800a874:	18d2      	adds	r2, r2, r3
 800a876:	1dbb      	adds	r3, r7, #6
 800a878:	8812      	ldrh	r2, [r2, #0]
 800a87a:	801a      	strh	r2, [r3, #0]
 800a87c:	e03b      	b.n	800a8f6 <ff_wtoupper+0x122>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a87e:	1dba      	adds	r2, r7, #6
 800a880:	2312      	movs	r3, #18
 800a882:	18fb      	adds	r3, r7, r3
 800a884:	8812      	ldrh	r2, [r2, #0]
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	2201      	movs	r2, #1
 800a88e:	4013      	ands	r3, r2
 800a890:	b29a      	uxth	r2, r3
 800a892:	1dbb      	adds	r3, r7, #6
 800a894:	1db9      	adds	r1, r7, #6
 800a896:	8809      	ldrh	r1, [r1, #0]
 800a898:	1a8a      	subs	r2, r1, r2
 800a89a:	801a      	strh	r2, [r3, #0]
 800a89c:	e02b      	b.n	800a8f6 <ff_wtoupper+0x122>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a89e:	1dbb      	adds	r3, r7, #6
 800a8a0:	1dba      	adds	r2, r7, #6
 800a8a2:	8812      	ldrh	r2, [r2, #0]
 800a8a4:	3a10      	subs	r2, #16
 800a8a6:	801a      	strh	r2, [r3, #0]
 800a8a8:	e025      	b.n	800a8f6 <ff_wtoupper+0x122>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a8aa:	1dbb      	adds	r3, r7, #6
 800a8ac:	1dba      	adds	r2, r7, #6
 800a8ae:	8812      	ldrh	r2, [r2, #0]
 800a8b0:	3a20      	subs	r2, #32
 800a8b2:	801a      	strh	r2, [r3, #0]
 800a8b4:	e01f      	b.n	800a8f6 <ff_wtoupper+0x122>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a8b6:	1dbb      	adds	r3, r7, #6
 800a8b8:	1dba      	adds	r2, r7, #6
 800a8ba:	8812      	ldrh	r2, [r2, #0]
 800a8bc:	3a30      	subs	r2, #48	@ 0x30
 800a8be:	801a      	strh	r2, [r3, #0]
 800a8c0:	e019      	b.n	800a8f6 <ff_wtoupper+0x122>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a8c2:	1dbb      	adds	r3, r7, #6
 800a8c4:	1dba      	adds	r2, r7, #6
 800a8c6:	8812      	ldrh	r2, [r2, #0]
 800a8c8:	3a1a      	subs	r2, #26
 800a8ca:	801a      	strh	r2, [r3, #0]
 800a8cc:	e013      	b.n	800a8f6 <ff_wtoupper+0x122>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a8ce:	1dbb      	adds	r3, r7, #6
 800a8d0:	1dba      	adds	r2, r7, #6
 800a8d2:	8812      	ldrh	r2, [r2, #0]
 800a8d4:	3208      	adds	r2, #8
 800a8d6:	801a      	strh	r2, [r3, #0]
 800a8d8:	e00d      	b.n	800a8f6 <ff_wtoupper+0x122>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a8da:	1dbb      	adds	r3, r7, #6
 800a8dc:	1dba      	adds	r2, r7, #6
 800a8de:	8812      	ldrh	r2, [r2, #0]
 800a8e0:	3a50      	subs	r2, #80	@ 0x50
 800a8e2:	801a      	strh	r2, [r3, #0]
 800a8e4:	e007      	b.n	800a8f6 <ff_wtoupper+0x122>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a8e6:	1dbb      	adds	r3, r7, #6
 800a8e8:	1dba      	adds	r2, r7, #6
 800a8ea:	8812      	ldrh	r2, [r2, #0]
 800a8ec:	4910      	ldr	r1, [pc, #64]	@ (800a930 <ff_wtoupper+0x15c>)
 800a8ee:	468c      	mov	ip, r1
 800a8f0:	4462      	add	r2, ip
 800a8f2:	801a      	strh	r2, [r3, #0]
 800a8f4:	46c0      	nop			@ (mov r8, r8)
			}
			break;
 800a8f6:	e00d      	b.n	800a914 <ff_wtoupper+0x140>
		}
		if (!cmd) p += nc;
 800a8f8:	230e      	movs	r3, #14
 800a8fa:	18fb      	adds	r3, r7, r3
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d000      	beq.n	800a904 <ff_wtoupper+0x130>
 800a902:	e777      	b.n	800a7f4 <ff_wtoupper+0x20>
 800a904:	2310      	movs	r3, #16
 800a906:	18fb      	adds	r3, r7, r3
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	18d3      	adds	r3, r2, r3
 800a910:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a912:	e76f      	b.n	800a7f4 <ff_wtoupper+0x20>
			break;
 800a914:	46c0      	nop			@ (mov r8, r8)
	}

	return chr;
 800a916:	1dbb      	adds	r3, r7, #6
 800a918:	881b      	ldrh	r3, [r3, #0]
}
 800a91a:	0018      	movs	r0, r3
 800a91c:	46bd      	mov	sp, r7
 800a91e:	b006      	add	sp, #24
 800a920:	bdb0      	pop	{r4, r5, r7, pc}
 800a922:	46c0      	nop			@ (mov r8, r8)
 800a924:	0800ba40 	.word	0x0800ba40
 800a928:	0800bc34 	.word	0x0800bc34
 800a92c:	0800ba1c 	.word	0x0800ba1c
 800a930:	ffffe3a0 	.word	0xffffe3a0

0800a934 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a934:	b580      	push	{r7, lr}
 800a936:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a938:	4b05      	ldr	r3, [pc, #20]	@ (800a950 <SysTick_Handler+0x1c>)
 800a93a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a93c:	f000 f97c 	bl	800ac38 <xTaskGetSchedulerState>
 800a940:	0003      	movs	r3, r0
 800a942:	2b01      	cmp	r3, #1
 800a944:	d001      	beq.n	800a94a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a946:	f000 f9c7 	bl	800acd8 <xPortSysTickHandler>
  }
}
 800a94a:	46c0      	nop			@ (mov r8, r8)
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	e000e010 	.word	0xe000e010

0800a954 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	689a      	ldr	r2, [r3, #8]
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	683a      	ldr	r2, [r7, #0]
 800a978:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	601a      	str	r2, [r3, #0]
}
 800a990:	46c0      	nop			@ (mov r8, r8)
 800a992:	46bd      	mov	sp, r7
 800a994:	b004      	add	sp, #16
 800a996:	bd80      	pop	{r7, pc}

0800a998 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	6892      	ldr	r2, [r2, #8]
 800a9ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	6852      	ldr	r2, [r2, #4]
 800a9b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d103      	bne.n	800a9cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	1e5a      	subs	r2, r3, #1
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
}
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	b004      	add	sp, #16
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9f2:	4b4a      	ldr	r3, [pc, #296]	@ (800ab1c <xTaskIncrementTick+0x134>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d000      	beq.n	800a9fc <xTaskIncrementTick+0x14>
 800a9fa:	e085      	b.n	800ab08 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9fc:	4b48      	ldr	r3, [pc, #288]	@ (800ab20 <xTaskIncrementTick+0x138>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	3301      	adds	r3, #1
 800aa02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa04:	4b46      	ldr	r3, [pc, #280]	@ (800ab20 <xTaskIncrementTick+0x138>)
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d118      	bne.n	800aa42 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa10:	4b44      	ldr	r3, [pc, #272]	@ (800ab24 <xTaskIncrementTick+0x13c>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <xTaskIncrementTick+0x38>
 800aa1a:	b672      	cpsid	i
 800aa1c:	46c0      	nop			@ (mov r8, r8)
 800aa1e:	e7fd      	b.n	800aa1c <xTaskIncrementTick+0x34>
 800aa20:	4b40      	ldr	r3, [pc, #256]	@ (800ab24 <xTaskIncrementTick+0x13c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	4b40      	ldr	r3, [pc, #256]	@ (800ab28 <xTaskIncrementTick+0x140>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b3e      	ldr	r3, [pc, #248]	@ (800ab24 <xTaskIncrementTick+0x13c>)
 800aa2c:	601a      	str	r2, [r3, #0]
 800aa2e:	4b3e      	ldr	r3, [pc, #248]	@ (800ab28 <xTaskIncrementTick+0x140>)
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	4b3d      	ldr	r3, [pc, #244]	@ (800ab2c <xTaskIncrementTick+0x144>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	4b3c      	ldr	r3, [pc, #240]	@ (800ab2c <xTaskIncrementTick+0x144>)
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	f000 f8dd 	bl	800abfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa42:	4b3b      	ldr	r3, [pc, #236]	@ (800ab30 <xTaskIncrementTick+0x148>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	693a      	ldr	r2, [r7, #16]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d349      	bcc.n	800aae0 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa4c:	4b35      	ldr	r3, [pc, #212]	@ (800ab24 <xTaskIncrementTick+0x13c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d104      	bne.n	800aa60 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa56:	4b36      	ldr	r3, [pc, #216]	@ (800ab30 <xTaskIncrementTick+0x148>)
 800aa58:	2201      	movs	r2, #1
 800aa5a:	4252      	negs	r2, r2
 800aa5c:	601a      	str	r2, [r3, #0]
					break;
 800aa5e:	e03f      	b.n	800aae0 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa60:	4b30      	ldr	r3, [pc, #192]	@ (800ab24 <xTaskIncrementTick+0x13c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d203      	bcs.n	800aa80 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa78:	4b2d      	ldr	r3, [pc, #180]	@ (800ab30 <xTaskIncrementTick+0x148>)
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa7e:	e02f      	b.n	800aae0 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	3304      	adds	r3, #4
 800aa84:	0018      	movs	r0, r3
 800aa86:	f7ff ff87 	bl	800a998 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	3318      	adds	r3, #24
 800aa96:	0018      	movs	r0, r3
 800aa98:	f7ff ff7e 	bl	800a998 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaa0:	4b24      	ldr	r3, [pc, #144]	@ (800ab34 <xTaskIncrementTick+0x14c>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d903      	bls.n	800aab0 <xTaskIncrementTick+0xc8>
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaac:	4b21      	ldr	r3, [pc, #132]	@ (800ab34 <xTaskIncrementTick+0x14c>)
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab4:	0013      	movs	r3, r2
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	189b      	adds	r3, r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4a1e      	ldr	r2, [pc, #120]	@ (800ab38 <xTaskIncrementTick+0x150>)
 800aabe:	189a      	adds	r2, r3, r2
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	3304      	adds	r3, #4
 800aac4:	0019      	movs	r1, r3
 800aac6:	0010      	movs	r0, r2
 800aac8:	f7ff ff44 	bl	800a954 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aad0:	4b1a      	ldr	r3, [pc, #104]	@ (800ab3c <xTaskIncrementTick+0x154>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d3b8      	bcc.n	800aa4c <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800aada:	2301      	movs	r3, #1
 800aadc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aade:	e7b5      	b.n	800aa4c <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aae0:	4b16      	ldr	r3, [pc, #88]	@ (800ab3c <xTaskIncrementTick+0x154>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae6:	4914      	ldr	r1, [pc, #80]	@ (800ab38 <xTaskIncrementTick+0x150>)
 800aae8:	0013      	movs	r3, r2
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	189b      	adds	r3, r3, r2
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	585b      	ldr	r3, [r3, r1]
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d901      	bls.n	800aafa <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aafa:	4b11      	ldr	r3, [pc, #68]	@ (800ab40 <xTaskIncrementTick+0x158>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 800ab02:	2301      	movs	r3, #1
 800ab04:	617b      	str	r3, [r7, #20]
 800ab06:	e004      	b.n	800ab12 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ab08:	4b0e      	ldr	r3, [pc, #56]	@ (800ab44 <xTaskIncrementTick+0x15c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	1c5a      	adds	r2, r3, #1
 800ab0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab44 <xTaskIncrementTick+0x15c>)
 800ab10:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ab12:	697b      	ldr	r3, [r7, #20]
}
 800ab14:	0018      	movs	r0, r3
 800ab16:	46bd      	mov	sp, r7
 800ab18:	b006      	add	sp, #24
 800ab1a:	bd80      	pop	{r7, pc}
 800ab1c:	200011e0 	.word	0x200011e0
 800ab20:	200011c4 	.word	0x200011c4
 800ab24:	200011bc 	.word	0x200011bc
 800ab28:	200011c0 	.word	0x200011c0
 800ab2c:	200011d8 	.word	0x200011d8
 800ab30:	200011dc 	.word	0x200011dc
 800ab34:	200011c8 	.word	0x200011c8
 800ab38:	20000d5c 	.word	0x20000d5c
 800ab3c:	20000d58 	.word	0x20000d58
 800ab40:	200011d4 	.word	0x200011d4
 800ab44:	200011d0 	.word	0x200011d0

0800ab48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab4e:	4b25      	ldr	r3, [pc, #148]	@ (800abe4 <vTaskSwitchContext+0x9c>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab56:	4b24      	ldr	r3, [pc, #144]	@ (800abe8 <vTaskSwitchContext+0xa0>)
 800ab58:	2201      	movs	r2, #1
 800ab5a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab5c:	e03e      	b.n	800abdc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800ab5e:	4b22      	ldr	r3, [pc, #136]	@ (800abe8 <vTaskSwitchContext+0xa0>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab64:	4b21      	ldr	r3, [pc, #132]	@ (800abec <vTaskSwitchContext+0xa4>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	607b      	str	r3, [r7, #4]
 800ab6a:	e008      	b.n	800ab7e <vTaskSwitchContext+0x36>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <vTaskSwitchContext+0x30>
 800ab72:	b672      	cpsid	i
 800ab74:	46c0      	nop			@ (mov r8, r8)
 800ab76:	e7fd      	b.n	800ab74 <vTaskSwitchContext+0x2c>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	607b      	str	r3, [r7, #4]
 800ab7e:	491c      	ldr	r1, [pc, #112]	@ (800abf0 <vTaskSwitchContext+0xa8>)
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	0013      	movs	r3, r2
 800ab84:	009b      	lsls	r3, r3, #2
 800ab86:	189b      	adds	r3, r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	585b      	ldr	r3, [r3, r1]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0ed      	beq.n	800ab6c <vTaskSwitchContext+0x24>
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	0013      	movs	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	189b      	adds	r3, r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4a15      	ldr	r2, [pc, #84]	@ (800abf0 <vTaskSwitchContext+0xa8>)
 800ab9c:	189b      	adds	r3, r3, r2
 800ab9e:	603b      	str	r3, [r7, #0]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	685a      	ldr	r2, [r3, #4]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	605a      	str	r2, [r3, #4]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	685a      	ldr	r2, [r3, #4]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	3308      	adds	r3, #8
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d104      	bne.n	800abc0 <vTaskSwitchContext+0x78>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	605a      	str	r2, [r3, #4]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	68da      	ldr	r2, [r3, #12]
 800abc6:	4b0b      	ldr	r3, [pc, #44]	@ (800abf4 <vTaskSwitchContext+0xac>)
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	4b08      	ldr	r3, [pc, #32]	@ (800abec <vTaskSwitchContext+0xa4>)
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800abd0:	4b08      	ldr	r3, [pc, #32]	@ (800abf4 <vTaskSwitchContext+0xac>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3354      	adds	r3, #84	@ 0x54
 800abd6:	001a      	movs	r2, r3
 800abd8:	4b07      	ldr	r3, [pc, #28]	@ (800abf8 <vTaskSwitchContext+0xb0>)
 800abda:	601a      	str	r2, [r3, #0]
}
 800abdc:	46c0      	nop			@ (mov r8, r8)
 800abde:	46bd      	mov	sp, r7
 800abe0:	b002      	add	sp, #8
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	200011e0 	.word	0x200011e0
 800abe8:	200011d4 	.word	0x200011d4
 800abec:	200011c8 	.word	0x200011c8
 800abf0:	20000d5c 	.word	0x20000d5c
 800abf4:	20000d58 	.word	0x20000d58
 800abf8:	200000e4 	.word	0x200000e4

0800abfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac02:	4b0b      	ldr	r3, [pc, #44]	@ (800ac30 <prvResetNextTaskUnblockTime+0x34>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d104      	bne.n	800ac16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac0c:	4b09      	ldr	r3, [pc, #36]	@ (800ac34 <prvResetNextTaskUnblockTime+0x38>)
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4252      	negs	r2, r2
 800ac12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac14:	e008      	b.n	800ac28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac16:	4b06      	ldr	r3, [pc, #24]	@ (800ac30 <prvResetNextTaskUnblockTime+0x34>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	68db      	ldr	r3, [r3, #12]
 800ac1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685a      	ldr	r2, [r3, #4]
 800ac24:	4b03      	ldr	r3, [pc, #12]	@ (800ac34 <prvResetNextTaskUnblockTime+0x38>)
 800ac26:	601a      	str	r2, [r3, #0]
}
 800ac28:	46c0      	nop			@ (mov r8, r8)
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	b002      	add	sp, #8
 800ac2e:	bd80      	pop	{r7, pc}
 800ac30:	200011bc 	.word	0x200011bc
 800ac34:	200011dc 	.word	0x200011dc

0800ac38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac68 <xTaskGetSchedulerState+0x30>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d102      	bne.n	800ac4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac46:	2301      	movs	r3, #1
 800ac48:	607b      	str	r3, [r7, #4]
 800ac4a:	e008      	b.n	800ac5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac4c:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <xTaskGetSchedulerState+0x34>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d102      	bne.n	800ac5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac54:	2302      	movs	r3, #2
 800ac56:	607b      	str	r3, [r7, #4]
 800ac58:	e001      	b.n	800ac5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac5e:	687b      	ldr	r3, [r7, #4]
	}
 800ac60:	0018      	movs	r0, r3
 800ac62:	46bd      	mov	sp, r7
 800ac64:	b002      	add	sp, #8
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	200011cc 	.word	0x200011cc
 800ac6c:	200011e0 	.word	0x200011e0

0800ac70 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800ac74:	46c0      	nop			@ (mov r8, r8)
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <ulSetInterruptMaskFromISR>:
}
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800ac7a:	f3ef 8010 	mrs	r0, PRIMASK
 800ac7e:	b672      	cpsid	i
 800ac80:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800ac82:	46c0      	nop			@ (mov r8, r8)
 800ac84:	0018      	movs	r0, r3

0800ac86 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800ac86:	f380 8810 	msr	PRIMASK, r0
 800ac8a:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800ac8c:	46c0      	nop			@ (mov r8, r8)
	...

0800ac90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac90:	f3ef 8009 	mrs	r0, PSP
 800ac94:	4b0e      	ldr	r3, [pc, #56]	@ (800acd0 <pxCurrentTCBConst>)
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	3820      	subs	r0, #32
 800ac9a:	6010      	str	r0, [r2, #0]
 800ac9c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ac9e:	4644      	mov	r4, r8
 800aca0:	464d      	mov	r5, r9
 800aca2:	4656      	mov	r6, sl
 800aca4:	465f      	mov	r7, fp
 800aca6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800aca8:	b508      	push	{r3, lr}
 800acaa:	b672      	cpsid	i
 800acac:	f7ff ff4c 	bl	800ab48 <vTaskSwitchContext>
 800acb0:	b662      	cpsie	i
 800acb2:	bc0c      	pop	{r2, r3}
 800acb4:	6811      	ldr	r1, [r2, #0]
 800acb6:	6808      	ldr	r0, [r1, #0]
 800acb8:	3010      	adds	r0, #16
 800acba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800acbc:	46a0      	mov	r8, r4
 800acbe:	46a9      	mov	r9, r5
 800acc0:	46b2      	mov	sl, r6
 800acc2:	46bb      	mov	fp, r7
 800acc4:	f380 8809 	msr	PSP, r0
 800acc8:	3820      	subs	r0, #32
 800acca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800accc:	4718      	bx	r3
 800acce:	46c0      	nop			@ (mov r8, r8)

0800acd0 <pxCurrentTCBConst>:
 800acd0:	20000d58 	.word	0x20000d58
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800acd4:	46c0      	nop			@ (mov r8, r8)
 800acd6:	46c0      	nop			@ (mov r8, r8)

0800acd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800acde:	f7ff ffcc 	bl	800ac7a <ulSetInterruptMaskFromISR>
 800ace2:	0003      	movs	r3, r0
 800ace4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ace6:	f7ff fe7f 	bl	800a9e8 <xTaskIncrementTick>
 800acea:	1e03      	subs	r3, r0, #0
 800acec:	d003      	beq.n	800acf6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acee:	4b06      	ldr	r3, [pc, #24]	@ (800ad08 <xPortSysTickHandler+0x30>)
 800acf0:	2280      	movs	r2, #128	@ 0x80
 800acf2:	0552      	lsls	r2, r2, #21
 800acf4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	0018      	movs	r0, r3
 800acfa:	f7ff ffc4 	bl	800ac86 <vClearInterruptMaskFromISR>
}
 800acfe:	46c0      	nop			@ (mov r8, r8)
 800ad00:	46bd      	mov	sp, r7
 800ad02:	b002      	add	sp, #8
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	46c0      	nop			@ (mov r8, r8)
 800ad08:	e000ed04 	.word	0xe000ed04

0800ad0c <siprintf>:
 800ad0c:	b40e      	push	{r1, r2, r3}
 800ad0e:	b500      	push	{lr}
 800ad10:	490b      	ldr	r1, [pc, #44]	@ (800ad40 <siprintf+0x34>)
 800ad12:	b09c      	sub	sp, #112	@ 0x70
 800ad14:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad16:	9002      	str	r0, [sp, #8]
 800ad18:	9006      	str	r0, [sp, #24]
 800ad1a:	9107      	str	r1, [sp, #28]
 800ad1c:	9104      	str	r1, [sp, #16]
 800ad1e:	4809      	ldr	r0, [pc, #36]	@ (800ad44 <siprintf+0x38>)
 800ad20:	4909      	ldr	r1, [pc, #36]	@ (800ad48 <siprintf+0x3c>)
 800ad22:	cb04      	ldmia	r3!, {r2}
 800ad24:	9105      	str	r1, [sp, #20]
 800ad26:	6800      	ldr	r0, [r0, #0]
 800ad28:	a902      	add	r1, sp, #8
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	f000 f8f6 	bl	800af1c <_svfiprintf_r>
 800ad30:	2200      	movs	r2, #0
 800ad32:	9b02      	ldr	r3, [sp, #8]
 800ad34:	701a      	strb	r2, [r3, #0]
 800ad36:	b01c      	add	sp, #112	@ 0x70
 800ad38:	bc08      	pop	{r3}
 800ad3a:	b003      	add	sp, #12
 800ad3c:	4718      	bx	r3
 800ad3e:	46c0      	nop			@ (mov r8, r8)
 800ad40:	7fffffff 	.word	0x7fffffff
 800ad44:	200000e4 	.word	0x200000e4
 800ad48:	ffff0208 	.word	0xffff0208

0800ad4c <memset>:
 800ad4c:	0003      	movs	r3, r0
 800ad4e:	1882      	adds	r2, r0, r2
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d100      	bne.n	800ad56 <memset+0xa>
 800ad54:	4770      	bx	lr
 800ad56:	7019      	strb	r1, [r3, #0]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	e7f9      	b.n	800ad50 <memset+0x4>

0800ad5c <__errno>:
 800ad5c:	4b01      	ldr	r3, [pc, #4]	@ (800ad64 <__errno+0x8>)
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	4770      	bx	lr
 800ad62:	46c0      	nop			@ (mov r8, r8)
 800ad64:	200000e4 	.word	0x200000e4

0800ad68 <__libc_init_array>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	2600      	movs	r6, #0
 800ad6c:	4c0c      	ldr	r4, [pc, #48]	@ (800ada0 <__libc_init_array+0x38>)
 800ad6e:	4d0d      	ldr	r5, [pc, #52]	@ (800ada4 <__libc_init_array+0x3c>)
 800ad70:	1b64      	subs	r4, r4, r5
 800ad72:	10a4      	asrs	r4, r4, #2
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	d109      	bne.n	800ad8c <__libc_init_array+0x24>
 800ad78:	2600      	movs	r6, #0
 800ad7a:	f000 fc65 	bl	800b648 <_init>
 800ad7e:	4c0a      	ldr	r4, [pc, #40]	@ (800ada8 <__libc_init_array+0x40>)
 800ad80:	4d0a      	ldr	r5, [pc, #40]	@ (800adac <__libc_init_array+0x44>)
 800ad82:	1b64      	subs	r4, r4, r5
 800ad84:	10a4      	asrs	r4, r4, #2
 800ad86:	42a6      	cmp	r6, r4
 800ad88:	d105      	bne.n	800ad96 <__libc_init_array+0x2e>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	00b3      	lsls	r3, r6, #2
 800ad8e:	58eb      	ldr	r3, [r5, r3]
 800ad90:	4798      	blx	r3
 800ad92:	3601      	adds	r6, #1
 800ad94:	e7ee      	b.n	800ad74 <__libc_init_array+0xc>
 800ad96:	00b3      	lsls	r3, r6, #2
 800ad98:	58eb      	ldr	r3, [r5, r3]
 800ad9a:	4798      	blx	r3
 800ad9c:	3601      	adds	r6, #1
 800ad9e:	e7f2      	b.n	800ad86 <__libc_init_array+0x1e>
 800ada0:	0800bd24 	.word	0x0800bd24
 800ada4:	0800bd24 	.word	0x0800bd24
 800ada8:	0800bd28 	.word	0x0800bd28
 800adac:	0800bd24 	.word	0x0800bd24

0800adb0 <__retarget_lock_acquire_recursive>:
 800adb0:	4770      	bx	lr

0800adb2 <__retarget_lock_release_recursive>:
 800adb2:	4770      	bx	lr

0800adb4 <memcpy>:
 800adb4:	2300      	movs	r3, #0
 800adb6:	b510      	push	{r4, lr}
 800adb8:	429a      	cmp	r2, r3
 800adba:	d100      	bne.n	800adbe <memcpy+0xa>
 800adbc:	bd10      	pop	{r4, pc}
 800adbe:	5ccc      	ldrb	r4, [r1, r3]
 800adc0:	54c4      	strb	r4, [r0, r3]
 800adc2:	3301      	adds	r3, #1
 800adc4:	e7f8      	b.n	800adb8 <memcpy+0x4>
	...

0800adc8 <_free_r>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	0005      	movs	r5, r0
 800adcc:	1e0c      	subs	r4, r1, #0
 800adce:	d010      	beq.n	800adf2 <_free_r+0x2a>
 800add0:	3c04      	subs	r4, #4
 800add2:	6823      	ldr	r3, [r4, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	da00      	bge.n	800adda <_free_r+0x12>
 800add8:	18e4      	adds	r4, r4, r3
 800adda:	0028      	movs	r0, r5
 800addc:	f000 fbbc 	bl	800b558 <__malloc_lock>
 800ade0:	4a1d      	ldr	r2, [pc, #116]	@ (800ae58 <_free_r+0x90>)
 800ade2:	6813      	ldr	r3, [r2, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d105      	bne.n	800adf4 <_free_r+0x2c>
 800ade8:	6063      	str	r3, [r4, #4]
 800adea:	6014      	str	r4, [r2, #0]
 800adec:	0028      	movs	r0, r5
 800adee:	f000 fbbb 	bl	800b568 <__malloc_unlock>
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	42a3      	cmp	r3, r4
 800adf6:	d908      	bls.n	800ae0a <_free_r+0x42>
 800adf8:	6820      	ldr	r0, [r4, #0]
 800adfa:	1821      	adds	r1, r4, r0
 800adfc:	428b      	cmp	r3, r1
 800adfe:	d1f3      	bne.n	800ade8 <_free_r+0x20>
 800ae00:	6819      	ldr	r1, [r3, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	1809      	adds	r1, r1, r0
 800ae06:	6021      	str	r1, [r4, #0]
 800ae08:	e7ee      	b.n	800ade8 <_free_r+0x20>
 800ae0a:	001a      	movs	r2, r3
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <_free_r+0x4e>
 800ae12:	42a3      	cmp	r3, r4
 800ae14:	d9f9      	bls.n	800ae0a <_free_r+0x42>
 800ae16:	6811      	ldr	r1, [r2, #0]
 800ae18:	1850      	adds	r0, r2, r1
 800ae1a:	42a0      	cmp	r0, r4
 800ae1c:	d10b      	bne.n	800ae36 <_free_r+0x6e>
 800ae1e:	6820      	ldr	r0, [r4, #0]
 800ae20:	1809      	adds	r1, r1, r0
 800ae22:	1850      	adds	r0, r2, r1
 800ae24:	6011      	str	r1, [r2, #0]
 800ae26:	4283      	cmp	r3, r0
 800ae28:	d1e0      	bne.n	800adec <_free_r+0x24>
 800ae2a:	6818      	ldr	r0, [r3, #0]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	1841      	adds	r1, r0, r1
 800ae30:	6011      	str	r1, [r2, #0]
 800ae32:	6053      	str	r3, [r2, #4]
 800ae34:	e7da      	b.n	800adec <_free_r+0x24>
 800ae36:	42a0      	cmp	r0, r4
 800ae38:	d902      	bls.n	800ae40 <_free_r+0x78>
 800ae3a:	230c      	movs	r3, #12
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	e7d5      	b.n	800adec <_free_r+0x24>
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	1821      	adds	r1, r4, r0
 800ae44:	428b      	cmp	r3, r1
 800ae46:	d103      	bne.n	800ae50 <_free_r+0x88>
 800ae48:	6819      	ldr	r1, [r3, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	1809      	adds	r1, r1, r0
 800ae4e:	6021      	str	r1, [r4, #0]
 800ae50:	6063      	str	r3, [r4, #4]
 800ae52:	6054      	str	r4, [r2, #4]
 800ae54:	e7ca      	b.n	800adec <_free_r+0x24>
 800ae56:	46c0      	nop			@ (mov r8, r8)
 800ae58:	20001328 	.word	0x20001328

0800ae5c <__ssputs_r>:
 800ae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae5e:	688e      	ldr	r6, [r1, #8]
 800ae60:	b085      	sub	sp, #20
 800ae62:	001f      	movs	r7, r3
 800ae64:	000c      	movs	r4, r1
 800ae66:	680b      	ldr	r3, [r1, #0]
 800ae68:	9002      	str	r0, [sp, #8]
 800ae6a:	9203      	str	r2, [sp, #12]
 800ae6c:	42be      	cmp	r6, r7
 800ae6e:	d830      	bhi.n	800aed2 <__ssputs_r+0x76>
 800ae70:	210c      	movs	r1, #12
 800ae72:	5e62      	ldrsh	r2, [r4, r1]
 800ae74:	2190      	movs	r1, #144	@ 0x90
 800ae76:	00c9      	lsls	r1, r1, #3
 800ae78:	420a      	tst	r2, r1
 800ae7a:	d028      	beq.n	800aece <__ssputs_r+0x72>
 800ae7c:	2003      	movs	r0, #3
 800ae7e:	6921      	ldr	r1, [r4, #16]
 800ae80:	1a5b      	subs	r3, r3, r1
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	6963      	ldr	r3, [r4, #20]
 800ae86:	4343      	muls	r3, r0
 800ae88:	9801      	ldr	r0, [sp, #4]
 800ae8a:	0fdd      	lsrs	r5, r3, #31
 800ae8c:	18ed      	adds	r5, r5, r3
 800ae8e:	1c7b      	adds	r3, r7, #1
 800ae90:	181b      	adds	r3, r3, r0
 800ae92:	106d      	asrs	r5, r5, #1
 800ae94:	42ab      	cmp	r3, r5
 800ae96:	d900      	bls.n	800ae9a <__ssputs_r+0x3e>
 800ae98:	001d      	movs	r5, r3
 800ae9a:	0552      	lsls	r2, r2, #21
 800ae9c:	d528      	bpl.n	800aef0 <__ssputs_r+0x94>
 800ae9e:	0029      	movs	r1, r5
 800aea0:	9802      	ldr	r0, [sp, #8]
 800aea2:	f000 f95b 	bl	800b15c <_malloc_r>
 800aea6:	1e06      	subs	r6, r0, #0
 800aea8:	d02c      	beq.n	800af04 <__ssputs_r+0xa8>
 800aeaa:	9a01      	ldr	r2, [sp, #4]
 800aeac:	6921      	ldr	r1, [r4, #16]
 800aeae:	f7ff ff81 	bl	800adb4 <memcpy>
 800aeb2:	89a2      	ldrh	r2, [r4, #12]
 800aeb4:	4b18      	ldr	r3, [pc, #96]	@ (800af18 <__ssputs_r+0xbc>)
 800aeb6:	401a      	ands	r2, r3
 800aeb8:	2380      	movs	r3, #128	@ 0x80
 800aeba:	4313      	orrs	r3, r2
 800aebc:	81a3      	strh	r3, [r4, #12]
 800aebe:	9b01      	ldr	r3, [sp, #4]
 800aec0:	6126      	str	r6, [r4, #16]
 800aec2:	18f6      	adds	r6, r6, r3
 800aec4:	6026      	str	r6, [r4, #0]
 800aec6:	003e      	movs	r6, r7
 800aec8:	6165      	str	r5, [r4, #20]
 800aeca:	1aed      	subs	r5, r5, r3
 800aecc:	60a5      	str	r5, [r4, #8]
 800aece:	42be      	cmp	r6, r7
 800aed0:	d900      	bls.n	800aed4 <__ssputs_r+0x78>
 800aed2:	003e      	movs	r6, r7
 800aed4:	0032      	movs	r2, r6
 800aed6:	9903      	ldr	r1, [sp, #12]
 800aed8:	6820      	ldr	r0, [r4, #0]
 800aeda:	f000 fb7c 	bl	800b5d6 <memmove>
 800aede:	2000      	movs	r0, #0
 800aee0:	68a3      	ldr	r3, [r4, #8]
 800aee2:	1b9b      	subs	r3, r3, r6
 800aee4:	60a3      	str	r3, [r4, #8]
 800aee6:	6823      	ldr	r3, [r4, #0]
 800aee8:	199b      	adds	r3, r3, r6
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	b005      	add	sp, #20
 800aeee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aef0:	002a      	movs	r2, r5
 800aef2:	9802      	ldr	r0, [sp, #8]
 800aef4:	f000 fb40 	bl	800b578 <_realloc_r>
 800aef8:	1e06      	subs	r6, r0, #0
 800aefa:	d1e0      	bne.n	800aebe <__ssputs_r+0x62>
 800aefc:	6921      	ldr	r1, [r4, #16]
 800aefe:	9802      	ldr	r0, [sp, #8]
 800af00:	f7ff ff62 	bl	800adc8 <_free_r>
 800af04:	230c      	movs	r3, #12
 800af06:	2001      	movs	r0, #1
 800af08:	9a02      	ldr	r2, [sp, #8]
 800af0a:	4240      	negs	r0, r0
 800af0c:	6013      	str	r3, [r2, #0]
 800af0e:	89a2      	ldrh	r2, [r4, #12]
 800af10:	3334      	adds	r3, #52	@ 0x34
 800af12:	4313      	orrs	r3, r2
 800af14:	81a3      	strh	r3, [r4, #12]
 800af16:	e7e9      	b.n	800aeec <__ssputs_r+0x90>
 800af18:	fffffb7f 	.word	0xfffffb7f

0800af1c <_svfiprintf_r>:
 800af1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af1e:	b0a1      	sub	sp, #132	@ 0x84
 800af20:	9003      	str	r0, [sp, #12]
 800af22:	001d      	movs	r5, r3
 800af24:	898b      	ldrh	r3, [r1, #12]
 800af26:	000f      	movs	r7, r1
 800af28:	0016      	movs	r6, r2
 800af2a:	061b      	lsls	r3, r3, #24
 800af2c:	d511      	bpl.n	800af52 <_svfiprintf_r+0x36>
 800af2e:	690b      	ldr	r3, [r1, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10e      	bne.n	800af52 <_svfiprintf_r+0x36>
 800af34:	2140      	movs	r1, #64	@ 0x40
 800af36:	f000 f911 	bl	800b15c <_malloc_r>
 800af3a:	6038      	str	r0, [r7, #0]
 800af3c:	6138      	str	r0, [r7, #16]
 800af3e:	2800      	cmp	r0, #0
 800af40:	d105      	bne.n	800af4e <_svfiprintf_r+0x32>
 800af42:	230c      	movs	r3, #12
 800af44:	9a03      	ldr	r2, [sp, #12]
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	2001      	movs	r0, #1
 800af4a:	4240      	negs	r0, r0
 800af4c:	e0cf      	b.n	800b0ee <_svfiprintf_r+0x1d2>
 800af4e:	2340      	movs	r3, #64	@ 0x40
 800af50:	617b      	str	r3, [r7, #20]
 800af52:	2300      	movs	r3, #0
 800af54:	ac08      	add	r4, sp, #32
 800af56:	6163      	str	r3, [r4, #20]
 800af58:	3320      	adds	r3, #32
 800af5a:	7663      	strb	r3, [r4, #25]
 800af5c:	3310      	adds	r3, #16
 800af5e:	76a3      	strb	r3, [r4, #26]
 800af60:	9507      	str	r5, [sp, #28]
 800af62:	0035      	movs	r5, r6
 800af64:	782b      	ldrb	r3, [r5, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <_svfiprintf_r+0x52>
 800af6a:	2b25      	cmp	r3, #37	@ 0x25
 800af6c:	d148      	bne.n	800b000 <_svfiprintf_r+0xe4>
 800af6e:	1bab      	subs	r3, r5, r6
 800af70:	9305      	str	r3, [sp, #20]
 800af72:	42b5      	cmp	r5, r6
 800af74:	d00b      	beq.n	800af8e <_svfiprintf_r+0x72>
 800af76:	0032      	movs	r2, r6
 800af78:	0039      	movs	r1, r7
 800af7a:	9803      	ldr	r0, [sp, #12]
 800af7c:	f7ff ff6e 	bl	800ae5c <__ssputs_r>
 800af80:	3001      	adds	r0, #1
 800af82:	d100      	bne.n	800af86 <_svfiprintf_r+0x6a>
 800af84:	e0ae      	b.n	800b0e4 <_svfiprintf_r+0x1c8>
 800af86:	6963      	ldr	r3, [r4, #20]
 800af88:	9a05      	ldr	r2, [sp, #20]
 800af8a:	189b      	adds	r3, r3, r2
 800af8c:	6163      	str	r3, [r4, #20]
 800af8e:	782b      	ldrb	r3, [r5, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d100      	bne.n	800af96 <_svfiprintf_r+0x7a>
 800af94:	e0a6      	b.n	800b0e4 <_svfiprintf_r+0x1c8>
 800af96:	2201      	movs	r2, #1
 800af98:	2300      	movs	r3, #0
 800af9a:	4252      	negs	r2, r2
 800af9c:	6062      	str	r2, [r4, #4]
 800af9e:	a904      	add	r1, sp, #16
 800afa0:	3254      	adds	r2, #84	@ 0x54
 800afa2:	1852      	adds	r2, r2, r1
 800afa4:	1c6e      	adds	r6, r5, #1
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	60e3      	str	r3, [r4, #12]
 800afaa:	60a3      	str	r3, [r4, #8]
 800afac:	7013      	strb	r3, [r2, #0]
 800afae:	65a3      	str	r3, [r4, #88]	@ 0x58
 800afb0:	4b54      	ldr	r3, [pc, #336]	@ (800b104 <_svfiprintf_r+0x1e8>)
 800afb2:	2205      	movs	r2, #5
 800afb4:	0018      	movs	r0, r3
 800afb6:	7831      	ldrb	r1, [r6, #0]
 800afb8:	9305      	str	r3, [sp, #20]
 800afba:	f000 fb31 	bl	800b620 <memchr>
 800afbe:	1c75      	adds	r5, r6, #1
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d11f      	bne.n	800b004 <_svfiprintf_r+0xe8>
 800afc4:	6822      	ldr	r2, [r4, #0]
 800afc6:	06d3      	lsls	r3, r2, #27
 800afc8:	d504      	bpl.n	800afd4 <_svfiprintf_r+0xb8>
 800afca:	2353      	movs	r3, #83	@ 0x53
 800afcc:	a904      	add	r1, sp, #16
 800afce:	185b      	adds	r3, r3, r1
 800afd0:	2120      	movs	r1, #32
 800afd2:	7019      	strb	r1, [r3, #0]
 800afd4:	0713      	lsls	r3, r2, #28
 800afd6:	d504      	bpl.n	800afe2 <_svfiprintf_r+0xc6>
 800afd8:	2353      	movs	r3, #83	@ 0x53
 800afda:	a904      	add	r1, sp, #16
 800afdc:	185b      	adds	r3, r3, r1
 800afde:	212b      	movs	r1, #43	@ 0x2b
 800afe0:	7019      	strb	r1, [r3, #0]
 800afe2:	7833      	ldrb	r3, [r6, #0]
 800afe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800afe6:	d016      	beq.n	800b016 <_svfiprintf_r+0xfa>
 800afe8:	0035      	movs	r5, r6
 800afea:	2100      	movs	r1, #0
 800afec:	200a      	movs	r0, #10
 800afee:	68e3      	ldr	r3, [r4, #12]
 800aff0:	782a      	ldrb	r2, [r5, #0]
 800aff2:	1c6e      	adds	r6, r5, #1
 800aff4:	3a30      	subs	r2, #48	@ 0x30
 800aff6:	2a09      	cmp	r2, #9
 800aff8:	d950      	bls.n	800b09c <_svfiprintf_r+0x180>
 800affa:	2900      	cmp	r1, #0
 800affc:	d111      	bne.n	800b022 <_svfiprintf_r+0x106>
 800affe:	e017      	b.n	800b030 <_svfiprintf_r+0x114>
 800b000:	3501      	adds	r5, #1
 800b002:	e7af      	b.n	800af64 <_svfiprintf_r+0x48>
 800b004:	9b05      	ldr	r3, [sp, #20]
 800b006:	6822      	ldr	r2, [r4, #0]
 800b008:	1ac0      	subs	r0, r0, r3
 800b00a:	2301      	movs	r3, #1
 800b00c:	4083      	lsls	r3, r0
 800b00e:	4313      	orrs	r3, r2
 800b010:	002e      	movs	r6, r5
 800b012:	6023      	str	r3, [r4, #0]
 800b014:	e7cc      	b.n	800afb0 <_svfiprintf_r+0x94>
 800b016:	9b07      	ldr	r3, [sp, #28]
 800b018:	1d19      	adds	r1, r3, #4
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	9107      	str	r1, [sp, #28]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	db01      	blt.n	800b026 <_svfiprintf_r+0x10a>
 800b022:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b024:	e004      	b.n	800b030 <_svfiprintf_r+0x114>
 800b026:	425b      	negs	r3, r3
 800b028:	60e3      	str	r3, [r4, #12]
 800b02a:	2302      	movs	r3, #2
 800b02c:	4313      	orrs	r3, r2
 800b02e:	6023      	str	r3, [r4, #0]
 800b030:	782b      	ldrb	r3, [r5, #0]
 800b032:	2b2e      	cmp	r3, #46	@ 0x2e
 800b034:	d10c      	bne.n	800b050 <_svfiprintf_r+0x134>
 800b036:	786b      	ldrb	r3, [r5, #1]
 800b038:	2b2a      	cmp	r3, #42	@ 0x2a
 800b03a:	d134      	bne.n	800b0a6 <_svfiprintf_r+0x18a>
 800b03c:	9b07      	ldr	r3, [sp, #28]
 800b03e:	3502      	adds	r5, #2
 800b040:	1d1a      	adds	r2, r3, #4
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	9207      	str	r2, [sp, #28]
 800b046:	2b00      	cmp	r3, #0
 800b048:	da01      	bge.n	800b04e <_svfiprintf_r+0x132>
 800b04a:	2301      	movs	r3, #1
 800b04c:	425b      	negs	r3, r3
 800b04e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b050:	4e2d      	ldr	r6, [pc, #180]	@ (800b108 <_svfiprintf_r+0x1ec>)
 800b052:	2203      	movs	r2, #3
 800b054:	0030      	movs	r0, r6
 800b056:	7829      	ldrb	r1, [r5, #0]
 800b058:	f000 fae2 	bl	800b620 <memchr>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d006      	beq.n	800b06e <_svfiprintf_r+0x152>
 800b060:	2340      	movs	r3, #64	@ 0x40
 800b062:	1b80      	subs	r0, r0, r6
 800b064:	4083      	lsls	r3, r0
 800b066:	6822      	ldr	r2, [r4, #0]
 800b068:	3501      	adds	r5, #1
 800b06a:	4313      	orrs	r3, r2
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	7829      	ldrb	r1, [r5, #0]
 800b070:	2206      	movs	r2, #6
 800b072:	4826      	ldr	r0, [pc, #152]	@ (800b10c <_svfiprintf_r+0x1f0>)
 800b074:	1c6e      	adds	r6, r5, #1
 800b076:	7621      	strb	r1, [r4, #24]
 800b078:	f000 fad2 	bl	800b620 <memchr>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	d038      	beq.n	800b0f2 <_svfiprintf_r+0x1d6>
 800b080:	4b23      	ldr	r3, [pc, #140]	@ (800b110 <_svfiprintf_r+0x1f4>)
 800b082:	2b00      	cmp	r3, #0
 800b084:	d122      	bne.n	800b0cc <_svfiprintf_r+0x1b0>
 800b086:	2207      	movs	r2, #7
 800b088:	9b07      	ldr	r3, [sp, #28]
 800b08a:	3307      	adds	r3, #7
 800b08c:	4393      	bics	r3, r2
 800b08e:	3308      	adds	r3, #8
 800b090:	9307      	str	r3, [sp, #28]
 800b092:	6963      	ldr	r3, [r4, #20]
 800b094:	9a04      	ldr	r2, [sp, #16]
 800b096:	189b      	adds	r3, r3, r2
 800b098:	6163      	str	r3, [r4, #20]
 800b09a:	e762      	b.n	800af62 <_svfiprintf_r+0x46>
 800b09c:	4343      	muls	r3, r0
 800b09e:	0035      	movs	r5, r6
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	189b      	adds	r3, r3, r2
 800b0a4:	e7a4      	b.n	800aff0 <_svfiprintf_r+0xd4>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	200a      	movs	r0, #10
 800b0aa:	0019      	movs	r1, r3
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	6063      	str	r3, [r4, #4]
 800b0b0:	782a      	ldrb	r2, [r5, #0]
 800b0b2:	1c6e      	adds	r6, r5, #1
 800b0b4:	3a30      	subs	r2, #48	@ 0x30
 800b0b6:	2a09      	cmp	r2, #9
 800b0b8:	d903      	bls.n	800b0c2 <_svfiprintf_r+0x1a6>
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0c8      	beq.n	800b050 <_svfiprintf_r+0x134>
 800b0be:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0c0:	e7c6      	b.n	800b050 <_svfiprintf_r+0x134>
 800b0c2:	4341      	muls	r1, r0
 800b0c4:	0035      	movs	r5, r6
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	1889      	adds	r1, r1, r2
 800b0ca:	e7f1      	b.n	800b0b0 <_svfiprintf_r+0x194>
 800b0cc:	aa07      	add	r2, sp, #28
 800b0ce:	9200      	str	r2, [sp, #0]
 800b0d0:	0021      	movs	r1, r4
 800b0d2:	003a      	movs	r2, r7
 800b0d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b114 <_svfiprintf_r+0x1f8>)
 800b0d6:	9803      	ldr	r0, [sp, #12]
 800b0d8:	e000      	b.n	800b0dc <_svfiprintf_r+0x1c0>
 800b0da:	bf00      	nop
 800b0dc:	9004      	str	r0, [sp, #16]
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	d1d6      	bne.n	800b092 <_svfiprintf_r+0x176>
 800b0e4:	89bb      	ldrh	r3, [r7, #12]
 800b0e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b0e8:	065b      	lsls	r3, r3, #25
 800b0ea:	d500      	bpl.n	800b0ee <_svfiprintf_r+0x1d2>
 800b0ec:	e72c      	b.n	800af48 <_svfiprintf_r+0x2c>
 800b0ee:	b021      	add	sp, #132	@ 0x84
 800b0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f2:	aa07      	add	r2, sp, #28
 800b0f4:	9200      	str	r2, [sp, #0]
 800b0f6:	0021      	movs	r1, r4
 800b0f8:	003a      	movs	r2, r7
 800b0fa:	4b06      	ldr	r3, [pc, #24]	@ (800b114 <_svfiprintf_r+0x1f8>)
 800b0fc:	9803      	ldr	r0, [sp, #12]
 800b0fe:	f000 f91d 	bl	800b33c <_printf_i>
 800b102:	e7eb      	b.n	800b0dc <_svfiprintf_r+0x1c0>
 800b104:	0800bcf0 	.word	0x0800bcf0
 800b108:	0800bcf6 	.word	0x0800bcf6
 800b10c:	0800bcfa 	.word	0x0800bcfa
 800b110:	00000000 	.word	0x00000000
 800b114:	0800ae5d 	.word	0x0800ae5d

0800b118 <sbrk_aligned>:
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	4e0f      	ldr	r6, [pc, #60]	@ (800b158 <sbrk_aligned+0x40>)
 800b11c:	000d      	movs	r5, r1
 800b11e:	6831      	ldr	r1, [r6, #0]
 800b120:	0004      	movs	r4, r0
 800b122:	2900      	cmp	r1, #0
 800b124:	d102      	bne.n	800b12c <sbrk_aligned+0x14>
 800b126:	f000 fa69 	bl	800b5fc <_sbrk_r>
 800b12a:	6030      	str	r0, [r6, #0]
 800b12c:	0029      	movs	r1, r5
 800b12e:	0020      	movs	r0, r4
 800b130:	f000 fa64 	bl	800b5fc <_sbrk_r>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d103      	bne.n	800b140 <sbrk_aligned+0x28>
 800b138:	2501      	movs	r5, #1
 800b13a:	426d      	negs	r5, r5
 800b13c:	0028      	movs	r0, r5
 800b13e:	bd70      	pop	{r4, r5, r6, pc}
 800b140:	2303      	movs	r3, #3
 800b142:	1cc5      	adds	r5, r0, #3
 800b144:	439d      	bics	r5, r3
 800b146:	42a8      	cmp	r0, r5
 800b148:	d0f8      	beq.n	800b13c <sbrk_aligned+0x24>
 800b14a:	1a29      	subs	r1, r5, r0
 800b14c:	0020      	movs	r0, r4
 800b14e:	f000 fa55 	bl	800b5fc <_sbrk_r>
 800b152:	3001      	adds	r0, #1
 800b154:	d1f2      	bne.n	800b13c <sbrk_aligned+0x24>
 800b156:	e7ef      	b.n	800b138 <sbrk_aligned+0x20>
 800b158:	20001324 	.word	0x20001324

0800b15c <_malloc_r>:
 800b15c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b15e:	2203      	movs	r2, #3
 800b160:	1ccb      	adds	r3, r1, #3
 800b162:	4393      	bics	r3, r2
 800b164:	3308      	adds	r3, #8
 800b166:	0005      	movs	r5, r0
 800b168:	001f      	movs	r7, r3
 800b16a:	2b0c      	cmp	r3, #12
 800b16c:	d234      	bcs.n	800b1d8 <_malloc_r+0x7c>
 800b16e:	270c      	movs	r7, #12
 800b170:	42b9      	cmp	r1, r7
 800b172:	d833      	bhi.n	800b1dc <_malloc_r+0x80>
 800b174:	0028      	movs	r0, r5
 800b176:	f000 f9ef 	bl	800b558 <__malloc_lock>
 800b17a:	4e37      	ldr	r6, [pc, #220]	@ (800b258 <_malloc_r+0xfc>)
 800b17c:	6833      	ldr	r3, [r6, #0]
 800b17e:	001c      	movs	r4, r3
 800b180:	2c00      	cmp	r4, #0
 800b182:	d12f      	bne.n	800b1e4 <_malloc_r+0x88>
 800b184:	0039      	movs	r1, r7
 800b186:	0028      	movs	r0, r5
 800b188:	f7ff ffc6 	bl	800b118 <sbrk_aligned>
 800b18c:	0004      	movs	r4, r0
 800b18e:	1c43      	adds	r3, r0, #1
 800b190:	d15f      	bne.n	800b252 <_malloc_r+0xf6>
 800b192:	6834      	ldr	r4, [r6, #0]
 800b194:	9400      	str	r4, [sp, #0]
 800b196:	9b00      	ldr	r3, [sp, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d14a      	bne.n	800b232 <_malloc_r+0xd6>
 800b19c:	2c00      	cmp	r4, #0
 800b19e:	d052      	beq.n	800b246 <_malloc_r+0xea>
 800b1a0:	6823      	ldr	r3, [r4, #0]
 800b1a2:	0028      	movs	r0, r5
 800b1a4:	18e3      	adds	r3, r4, r3
 800b1a6:	9900      	ldr	r1, [sp, #0]
 800b1a8:	9301      	str	r3, [sp, #4]
 800b1aa:	f000 fa27 	bl	800b5fc <_sbrk_r>
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	4283      	cmp	r3, r0
 800b1b2:	d148      	bne.n	800b246 <_malloc_r+0xea>
 800b1b4:	6823      	ldr	r3, [r4, #0]
 800b1b6:	0028      	movs	r0, r5
 800b1b8:	1aff      	subs	r7, r7, r3
 800b1ba:	0039      	movs	r1, r7
 800b1bc:	f7ff ffac 	bl	800b118 <sbrk_aligned>
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d040      	beq.n	800b246 <_malloc_r+0xea>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	19db      	adds	r3, r3, r7
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	6833      	ldr	r3, [r6, #0]
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	d133      	bne.n	800b23a <_malloc_r+0xde>
 800b1d2:	9b00      	ldr	r3, [sp, #0]
 800b1d4:	6033      	str	r3, [r6, #0]
 800b1d6:	e019      	b.n	800b20c <_malloc_r+0xb0>
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	dac9      	bge.n	800b170 <_malloc_r+0x14>
 800b1dc:	230c      	movs	r3, #12
 800b1de:	602b      	str	r3, [r5, #0]
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1e4:	6821      	ldr	r1, [r4, #0]
 800b1e6:	1bc9      	subs	r1, r1, r7
 800b1e8:	d420      	bmi.n	800b22c <_malloc_r+0xd0>
 800b1ea:	290b      	cmp	r1, #11
 800b1ec:	d90a      	bls.n	800b204 <_malloc_r+0xa8>
 800b1ee:	19e2      	adds	r2, r4, r7
 800b1f0:	6027      	str	r7, [r4, #0]
 800b1f2:	42a3      	cmp	r3, r4
 800b1f4:	d104      	bne.n	800b200 <_malloc_r+0xa4>
 800b1f6:	6032      	str	r2, [r6, #0]
 800b1f8:	6863      	ldr	r3, [r4, #4]
 800b1fa:	6011      	str	r1, [r2, #0]
 800b1fc:	6053      	str	r3, [r2, #4]
 800b1fe:	e005      	b.n	800b20c <_malloc_r+0xb0>
 800b200:	605a      	str	r2, [r3, #4]
 800b202:	e7f9      	b.n	800b1f8 <_malloc_r+0x9c>
 800b204:	6862      	ldr	r2, [r4, #4]
 800b206:	42a3      	cmp	r3, r4
 800b208:	d10e      	bne.n	800b228 <_malloc_r+0xcc>
 800b20a:	6032      	str	r2, [r6, #0]
 800b20c:	0028      	movs	r0, r5
 800b20e:	f000 f9ab 	bl	800b568 <__malloc_unlock>
 800b212:	0020      	movs	r0, r4
 800b214:	2207      	movs	r2, #7
 800b216:	300b      	adds	r0, #11
 800b218:	1d23      	adds	r3, r4, #4
 800b21a:	4390      	bics	r0, r2
 800b21c:	1ac2      	subs	r2, r0, r3
 800b21e:	4298      	cmp	r0, r3
 800b220:	d0df      	beq.n	800b1e2 <_malloc_r+0x86>
 800b222:	1a1b      	subs	r3, r3, r0
 800b224:	50a3      	str	r3, [r4, r2]
 800b226:	e7dc      	b.n	800b1e2 <_malloc_r+0x86>
 800b228:	605a      	str	r2, [r3, #4]
 800b22a:	e7ef      	b.n	800b20c <_malloc_r+0xb0>
 800b22c:	0023      	movs	r3, r4
 800b22e:	6864      	ldr	r4, [r4, #4]
 800b230:	e7a6      	b.n	800b180 <_malloc_r+0x24>
 800b232:	9c00      	ldr	r4, [sp, #0]
 800b234:	6863      	ldr	r3, [r4, #4]
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	e7ad      	b.n	800b196 <_malloc_r+0x3a>
 800b23a:	001a      	movs	r2, r3
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	42a3      	cmp	r3, r4
 800b240:	d1fb      	bne.n	800b23a <_malloc_r+0xde>
 800b242:	2300      	movs	r3, #0
 800b244:	e7da      	b.n	800b1fc <_malloc_r+0xa0>
 800b246:	230c      	movs	r3, #12
 800b248:	0028      	movs	r0, r5
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	f000 f98c 	bl	800b568 <__malloc_unlock>
 800b250:	e7c6      	b.n	800b1e0 <_malloc_r+0x84>
 800b252:	6007      	str	r7, [r0, #0]
 800b254:	e7da      	b.n	800b20c <_malloc_r+0xb0>
 800b256:	46c0      	nop			@ (mov r8, r8)
 800b258:	20001328 	.word	0x20001328

0800b25c <_printf_common>:
 800b25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b25e:	0016      	movs	r6, r2
 800b260:	9301      	str	r3, [sp, #4]
 800b262:	688a      	ldr	r2, [r1, #8]
 800b264:	690b      	ldr	r3, [r1, #16]
 800b266:	000c      	movs	r4, r1
 800b268:	9000      	str	r0, [sp, #0]
 800b26a:	4293      	cmp	r3, r2
 800b26c:	da00      	bge.n	800b270 <_printf_common+0x14>
 800b26e:	0013      	movs	r3, r2
 800b270:	0022      	movs	r2, r4
 800b272:	6033      	str	r3, [r6, #0]
 800b274:	3243      	adds	r2, #67	@ 0x43
 800b276:	7812      	ldrb	r2, [r2, #0]
 800b278:	2a00      	cmp	r2, #0
 800b27a:	d001      	beq.n	800b280 <_printf_common+0x24>
 800b27c:	3301      	adds	r3, #1
 800b27e:	6033      	str	r3, [r6, #0]
 800b280:	6823      	ldr	r3, [r4, #0]
 800b282:	069b      	lsls	r3, r3, #26
 800b284:	d502      	bpl.n	800b28c <_printf_common+0x30>
 800b286:	6833      	ldr	r3, [r6, #0]
 800b288:	3302      	adds	r3, #2
 800b28a:	6033      	str	r3, [r6, #0]
 800b28c:	6822      	ldr	r2, [r4, #0]
 800b28e:	2306      	movs	r3, #6
 800b290:	0015      	movs	r5, r2
 800b292:	401d      	ands	r5, r3
 800b294:	421a      	tst	r2, r3
 800b296:	d027      	beq.n	800b2e8 <_printf_common+0x8c>
 800b298:	0023      	movs	r3, r4
 800b29a:	3343      	adds	r3, #67	@ 0x43
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	1e5a      	subs	r2, r3, #1
 800b2a0:	4193      	sbcs	r3, r2
 800b2a2:	6822      	ldr	r2, [r4, #0]
 800b2a4:	0692      	lsls	r2, r2, #26
 800b2a6:	d430      	bmi.n	800b30a <_printf_common+0xae>
 800b2a8:	0022      	movs	r2, r4
 800b2aa:	9901      	ldr	r1, [sp, #4]
 800b2ac:	9800      	ldr	r0, [sp, #0]
 800b2ae:	9d08      	ldr	r5, [sp, #32]
 800b2b0:	3243      	adds	r2, #67	@ 0x43
 800b2b2:	47a8      	blx	r5
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d025      	beq.n	800b304 <_printf_common+0xa8>
 800b2b8:	2206      	movs	r2, #6
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	2500      	movs	r5, #0
 800b2be:	4013      	ands	r3, r2
 800b2c0:	2b04      	cmp	r3, #4
 800b2c2:	d105      	bne.n	800b2d0 <_printf_common+0x74>
 800b2c4:	6833      	ldr	r3, [r6, #0]
 800b2c6:	68e5      	ldr	r5, [r4, #12]
 800b2c8:	1aed      	subs	r5, r5, r3
 800b2ca:	43eb      	mvns	r3, r5
 800b2cc:	17db      	asrs	r3, r3, #31
 800b2ce:	401d      	ands	r5, r3
 800b2d0:	68a3      	ldr	r3, [r4, #8]
 800b2d2:	6922      	ldr	r2, [r4, #16]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	dd01      	ble.n	800b2dc <_printf_common+0x80>
 800b2d8:	1a9b      	subs	r3, r3, r2
 800b2da:	18ed      	adds	r5, r5, r3
 800b2dc:	2600      	movs	r6, #0
 800b2de:	42b5      	cmp	r5, r6
 800b2e0:	d120      	bne.n	800b324 <_printf_common+0xc8>
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	e010      	b.n	800b308 <_printf_common+0xac>
 800b2e6:	3501      	adds	r5, #1
 800b2e8:	68e3      	ldr	r3, [r4, #12]
 800b2ea:	6832      	ldr	r2, [r6, #0]
 800b2ec:	1a9b      	subs	r3, r3, r2
 800b2ee:	42ab      	cmp	r3, r5
 800b2f0:	ddd2      	ble.n	800b298 <_printf_common+0x3c>
 800b2f2:	0022      	movs	r2, r4
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	9901      	ldr	r1, [sp, #4]
 800b2f8:	9800      	ldr	r0, [sp, #0]
 800b2fa:	9f08      	ldr	r7, [sp, #32]
 800b2fc:	3219      	adds	r2, #25
 800b2fe:	47b8      	blx	r7
 800b300:	3001      	adds	r0, #1
 800b302:	d1f0      	bne.n	800b2e6 <_printf_common+0x8a>
 800b304:	2001      	movs	r0, #1
 800b306:	4240      	negs	r0, r0
 800b308:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b30a:	2030      	movs	r0, #48	@ 0x30
 800b30c:	18e1      	adds	r1, r4, r3
 800b30e:	3143      	adds	r1, #67	@ 0x43
 800b310:	7008      	strb	r0, [r1, #0]
 800b312:	0021      	movs	r1, r4
 800b314:	1c5a      	adds	r2, r3, #1
 800b316:	3145      	adds	r1, #69	@ 0x45
 800b318:	7809      	ldrb	r1, [r1, #0]
 800b31a:	18a2      	adds	r2, r4, r2
 800b31c:	3243      	adds	r2, #67	@ 0x43
 800b31e:	3302      	adds	r3, #2
 800b320:	7011      	strb	r1, [r2, #0]
 800b322:	e7c1      	b.n	800b2a8 <_printf_common+0x4c>
 800b324:	0022      	movs	r2, r4
 800b326:	2301      	movs	r3, #1
 800b328:	9901      	ldr	r1, [sp, #4]
 800b32a:	9800      	ldr	r0, [sp, #0]
 800b32c:	9f08      	ldr	r7, [sp, #32]
 800b32e:	321a      	adds	r2, #26
 800b330:	47b8      	blx	r7
 800b332:	3001      	adds	r0, #1
 800b334:	d0e6      	beq.n	800b304 <_printf_common+0xa8>
 800b336:	3601      	adds	r6, #1
 800b338:	e7d1      	b.n	800b2de <_printf_common+0x82>
	...

0800b33c <_printf_i>:
 800b33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33e:	b08b      	sub	sp, #44	@ 0x2c
 800b340:	9206      	str	r2, [sp, #24]
 800b342:	000a      	movs	r2, r1
 800b344:	3243      	adds	r2, #67	@ 0x43
 800b346:	9307      	str	r3, [sp, #28]
 800b348:	9005      	str	r0, [sp, #20]
 800b34a:	9203      	str	r2, [sp, #12]
 800b34c:	7e0a      	ldrb	r2, [r1, #24]
 800b34e:	000c      	movs	r4, r1
 800b350:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b352:	2a78      	cmp	r2, #120	@ 0x78
 800b354:	d809      	bhi.n	800b36a <_printf_i+0x2e>
 800b356:	2a62      	cmp	r2, #98	@ 0x62
 800b358:	d80b      	bhi.n	800b372 <_printf_i+0x36>
 800b35a:	2a00      	cmp	r2, #0
 800b35c:	d100      	bne.n	800b360 <_printf_i+0x24>
 800b35e:	e0bc      	b.n	800b4da <_printf_i+0x19e>
 800b360:	497b      	ldr	r1, [pc, #492]	@ (800b550 <_printf_i+0x214>)
 800b362:	9104      	str	r1, [sp, #16]
 800b364:	2a58      	cmp	r2, #88	@ 0x58
 800b366:	d100      	bne.n	800b36a <_printf_i+0x2e>
 800b368:	e090      	b.n	800b48c <_printf_i+0x150>
 800b36a:	0025      	movs	r5, r4
 800b36c:	3542      	adds	r5, #66	@ 0x42
 800b36e:	702a      	strb	r2, [r5, #0]
 800b370:	e022      	b.n	800b3b8 <_printf_i+0x7c>
 800b372:	0010      	movs	r0, r2
 800b374:	3863      	subs	r0, #99	@ 0x63
 800b376:	2815      	cmp	r0, #21
 800b378:	d8f7      	bhi.n	800b36a <_printf_i+0x2e>
 800b37a:	f7f4 fec5 	bl	8000108 <__gnu_thumb1_case_shi>
 800b37e:	0016      	.short	0x0016
 800b380:	fff6001f 	.word	0xfff6001f
 800b384:	fff6fff6 	.word	0xfff6fff6
 800b388:	001ffff6 	.word	0x001ffff6
 800b38c:	fff6fff6 	.word	0xfff6fff6
 800b390:	fff6fff6 	.word	0xfff6fff6
 800b394:	003600a1 	.word	0x003600a1
 800b398:	fff60080 	.word	0xfff60080
 800b39c:	00b2fff6 	.word	0x00b2fff6
 800b3a0:	0036fff6 	.word	0x0036fff6
 800b3a4:	fff6fff6 	.word	0xfff6fff6
 800b3a8:	0084      	.short	0x0084
 800b3aa:	0025      	movs	r5, r4
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	3542      	adds	r5, #66	@ 0x42
 800b3b0:	1d11      	adds	r1, r2, #4
 800b3b2:	6019      	str	r1, [r3, #0]
 800b3b4:	6813      	ldr	r3, [r2, #0]
 800b3b6:	702b      	strb	r3, [r5, #0]
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e0a0      	b.n	800b4fe <_printf_i+0x1c2>
 800b3bc:	6818      	ldr	r0, [r3, #0]
 800b3be:	6809      	ldr	r1, [r1, #0]
 800b3c0:	1d02      	adds	r2, r0, #4
 800b3c2:	060d      	lsls	r5, r1, #24
 800b3c4:	d50b      	bpl.n	800b3de <_printf_i+0xa2>
 800b3c6:	6806      	ldr	r6, [r0, #0]
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	2e00      	cmp	r6, #0
 800b3cc:	da03      	bge.n	800b3d6 <_printf_i+0x9a>
 800b3ce:	232d      	movs	r3, #45	@ 0x2d
 800b3d0:	9a03      	ldr	r2, [sp, #12]
 800b3d2:	4276      	negs	r6, r6
 800b3d4:	7013      	strb	r3, [r2, #0]
 800b3d6:	4b5e      	ldr	r3, [pc, #376]	@ (800b550 <_printf_i+0x214>)
 800b3d8:	270a      	movs	r7, #10
 800b3da:	9304      	str	r3, [sp, #16]
 800b3dc:	e018      	b.n	800b410 <_printf_i+0xd4>
 800b3de:	6806      	ldr	r6, [r0, #0]
 800b3e0:	601a      	str	r2, [r3, #0]
 800b3e2:	0649      	lsls	r1, r1, #25
 800b3e4:	d5f1      	bpl.n	800b3ca <_printf_i+0x8e>
 800b3e6:	b236      	sxth	r6, r6
 800b3e8:	e7ef      	b.n	800b3ca <_printf_i+0x8e>
 800b3ea:	6808      	ldr	r0, [r1, #0]
 800b3ec:	6819      	ldr	r1, [r3, #0]
 800b3ee:	c940      	ldmia	r1!, {r6}
 800b3f0:	0605      	lsls	r5, r0, #24
 800b3f2:	d402      	bmi.n	800b3fa <_printf_i+0xbe>
 800b3f4:	0640      	lsls	r0, r0, #25
 800b3f6:	d500      	bpl.n	800b3fa <_printf_i+0xbe>
 800b3f8:	b2b6      	uxth	r6, r6
 800b3fa:	6019      	str	r1, [r3, #0]
 800b3fc:	4b54      	ldr	r3, [pc, #336]	@ (800b550 <_printf_i+0x214>)
 800b3fe:	270a      	movs	r7, #10
 800b400:	9304      	str	r3, [sp, #16]
 800b402:	2a6f      	cmp	r2, #111	@ 0x6f
 800b404:	d100      	bne.n	800b408 <_printf_i+0xcc>
 800b406:	3f02      	subs	r7, #2
 800b408:	0023      	movs	r3, r4
 800b40a:	2200      	movs	r2, #0
 800b40c:	3343      	adds	r3, #67	@ 0x43
 800b40e:	701a      	strb	r2, [r3, #0]
 800b410:	6863      	ldr	r3, [r4, #4]
 800b412:	60a3      	str	r3, [r4, #8]
 800b414:	2b00      	cmp	r3, #0
 800b416:	db03      	blt.n	800b420 <_printf_i+0xe4>
 800b418:	2104      	movs	r1, #4
 800b41a:	6822      	ldr	r2, [r4, #0]
 800b41c:	438a      	bics	r2, r1
 800b41e:	6022      	str	r2, [r4, #0]
 800b420:	2e00      	cmp	r6, #0
 800b422:	d102      	bne.n	800b42a <_printf_i+0xee>
 800b424:	9d03      	ldr	r5, [sp, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d00c      	beq.n	800b444 <_printf_i+0x108>
 800b42a:	9d03      	ldr	r5, [sp, #12]
 800b42c:	0030      	movs	r0, r6
 800b42e:	0039      	movs	r1, r7
 800b430:	f7f4 fefa 	bl	8000228 <__aeabi_uidivmod>
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	3d01      	subs	r5, #1
 800b438:	5c5b      	ldrb	r3, [r3, r1]
 800b43a:	702b      	strb	r3, [r5, #0]
 800b43c:	0033      	movs	r3, r6
 800b43e:	0006      	movs	r6, r0
 800b440:	429f      	cmp	r7, r3
 800b442:	d9f3      	bls.n	800b42c <_printf_i+0xf0>
 800b444:	2f08      	cmp	r7, #8
 800b446:	d109      	bne.n	800b45c <_printf_i+0x120>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	07db      	lsls	r3, r3, #31
 800b44c:	d506      	bpl.n	800b45c <_printf_i+0x120>
 800b44e:	6862      	ldr	r2, [r4, #4]
 800b450:	6923      	ldr	r3, [r4, #16]
 800b452:	429a      	cmp	r2, r3
 800b454:	dc02      	bgt.n	800b45c <_printf_i+0x120>
 800b456:	2330      	movs	r3, #48	@ 0x30
 800b458:	3d01      	subs	r5, #1
 800b45a:	702b      	strb	r3, [r5, #0]
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	1b5b      	subs	r3, r3, r5
 800b460:	6123      	str	r3, [r4, #16]
 800b462:	9b07      	ldr	r3, [sp, #28]
 800b464:	0021      	movs	r1, r4
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	9805      	ldr	r0, [sp, #20]
 800b46a:	9b06      	ldr	r3, [sp, #24]
 800b46c:	aa09      	add	r2, sp, #36	@ 0x24
 800b46e:	f7ff fef5 	bl	800b25c <_printf_common>
 800b472:	3001      	adds	r0, #1
 800b474:	d148      	bne.n	800b508 <_printf_i+0x1cc>
 800b476:	2001      	movs	r0, #1
 800b478:	4240      	negs	r0, r0
 800b47a:	b00b      	add	sp, #44	@ 0x2c
 800b47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47e:	2220      	movs	r2, #32
 800b480:	6809      	ldr	r1, [r1, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	6022      	str	r2, [r4, #0]
 800b486:	2278      	movs	r2, #120	@ 0x78
 800b488:	4932      	ldr	r1, [pc, #200]	@ (800b554 <_printf_i+0x218>)
 800b48a:	9104      	str	r1, [sp, #16]
 800b48c:	0021      	movs	r1, r4
 800b48e:	3145      	adds	r1, #69	@ 0x45
 800b490:	700a      	strb	r2, [r1, #0]
 800b492:	6819      	ldr	r1, [r3, #0]
 800b494:	6822      	ldr	r2, [r4, #0]
 800b496:	c940      	ldmia	r1!, {r6}
 800b498:	0610      	lsls	r0, r2, #24
 800b49a:	d402      	bmi.n	800b4a2 <_printf_i+0x166>
 800b49c:	0650      	lsls	r0, r2, #25
 800b49e:	d500      	bpl.n	800b4a2 <_printf_i+0x166>
 800b4a0:	b2b6      	uxth	r6, r6
 800b4a2:	6019      	str	r1, [r3, #0]
 800b4a4:	07d3      	lsls	r3, r2, #31
 800b4a6:	d502      	bpl.n	800b4ae <_printf_i+0x172>
 800b4a8:	2320      	movs	r3, #32
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	d001      	beq.n	800b4b6 <_printf_i+0x17a>
 800b4b2:	2710      	movs	r7, #16
 800b4b4:	e7a8      	b.n	800b408 <_printf_i+0xcc>
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	4393      	bics	r3, r2
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	e7f8      	b.n	800b4b2 <_printf_i+0x176>
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	680d      	ldr	r5, [r1, #0]
 800b4c4:	1d10      	adds	r0, r2, #4
 800b4c6:	6949      	ldr	r1, [r1, #20]
 800b4c8:	6018      	str	r0, [r3, #0]
 800b4ca:	6813      	ldr	r3, [r2, #0]
 800b4cc:	062e      	lsls	r6, r5, #24
 800b4ce:	d501      	bpl.n	800b4d4 <_printf_i+0x198>
 800b4d0:	6019      	str	r1, [r3, #0]
 800b4d2:	e002      	b.n	800b4da <_printf_i+0x19e>
 800b4d4:	066d      	lsls	r5, r5, #25
 800b4d6:	d5fb      	bpl.n	800b4d0 <_printf_i+0x194>
 800b4d8:	8019      	strh	r1, [r3, #0]
 800b4da:	2300      	movs	r3, #0
 800b4dc:	9d03      	ldr	r5, [sp, #12]
 800b4de:	6123      	str	r3, [r4, #16]
 800b4e0:	e7bf      	b.n	800b462 <_printf_i+0x126>
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	1d11      	adds	r1, r2, #4
 800b4e6:	6019      	str	r1, [r3, #0]
 800b4e8:	6815      	ldr	r5, [r2, #0]
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	0028      	movs	r0, r5
 800b4ee:	6862      	ldr	r2, [r4, #4]
 800b4f0:	f000 f896 	bl	800b620 <memchr>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d001      	beq.n	800b4fc <_printf_i+0x1c0>
 800b4f8:	1b40      	subs	r0, r0, r5
 800b4fa:	6060      	str	r0, [r4, #4]
 800b4fc:	6863      	ldr	r3, [r4, #4]
 800b4fe:	6123      	str	r3, [r4, #16]
 800b500:	2300      	movs	r3, #0
 800b502:	9a03      	ldr	r2, [sp, #12]
 800b504:	7013      	strb	r3, [r2, #0]
 800b506:	e7ac      	b.n	800b462 <_printf_i+0x126>
 800b508:	002a      	movs	r2, r5
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	9906      	ldr	r1, [sp, #24]
 800b50e:	9805      	ldr	r0, [sp, #20]
 800b510:	9d07      	ldr	r5, [sp, #28]
 800b512:	47a8      	blx	r5
 800b514:	3001      	adds	r0, #1
 800b516:	d0ae      	beq.n	800b476 <_printf_i+0x13a>
 800b518:	6823      	ldr	r3, [r4, #0]
 800b51a:	079b      	lsls	r3, r3, #30
 800b51c:	d415      	bmi.n	800b54a <_printf_i+0x20e>
 800b51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b520:	68e0      	ldr	r0, [r4, #12]
 800b522:	4298      	cmp	r0, r3
 800b524:	daa9      	bge.n	800b47a <_printf_i+0x13e>
 800b526:	0018      	movs	r0, r3
 800b528:	e7a7      	b.n	800b47a <_printf_i+0x13e>
 800b52a:	0022      	movs	r2, r4
 800b52c:	2301      	movs	r3, #1
 800b52e:	9906      	ldr	r1, [sp, #24]
 800b530:	9805      	ldr	r0, [sp, #20]
 800b532:	9e07      	ldr	r6, [sp, #28]
 800b534:	3219      	adds	r2, #25
 800b536:	47b0      	blx	r6
 800b538:	3001      	adds	r0, #1
 800b53a:	d09c      	beq.n	800b476 <_printf_i+0x13a>
 800b53c:	3501      	adds	r5, #1
 800b53e:	68e3      	ldr	r3, [r4, #12]
 800b540:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b542:	1a9b      	subs	r3, r3, r2
 800b544:	42ab      	cmp	r3, r5
 800b546:	dcf0      	bgt.n	800b52a <_printf_i+0x1ee>
 800b548:	e7e9      	b.n	800b51e <_printf_i+0x1e2>
 800b54a:	2500      	movs	r5, #0
 800b54c:	e7f7      	b.n	800b53e <_printf_i+0x202>
 800b54e:	46c0      	nop			@ (mov r8, r8)
 800b550:	0800bd01 	.word	0x0800bd01
 800b554:	0800bd12 	.word	0x0800bd12

0800b558 <__malloc_lock>:
 800b558:	b510      	push	{r4, lr}
 800b55a:	4802      	ldr	r0, [pc, #8]	@ (800b564 <__malloc_lock+0xc>)
 800b55c:	f7ff fc28 	bl	800adb0 <__retarget_lock_acquire_recursive>
 800b560:	bd10      	pop	{r4, pc}
 800b562:	46c0      	nop			@ (mov r8, r8)
 800b564:	20001320 	.word	0x20001320

0800b568 <__malloc_unlock>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	4802      	ldr	r0, [pc, #8]	@ (800b574 <__malloc_unlock+0xc>)
 800b56c:	f7ff fc21 	bl	800adb2 <__retarget_lock_release_recursive>
 800b570:	bd10      	pop	{r4, pc}
 800b572:	46c0      	nop			@ (mov r8, r8)
 800b574:	20001320 	.word	0x20001320

0800b578 <_realloc_r>:
 800b578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b57a:	0006      	movs	r6, r0
 800b57c:	000c      	movs	r4, r1
 800b57e:	0015      	movs	r5, r2
 800b580:	2900      	cmp	r1, #0
 800b582:	d105      	bne.n	800b590 <_realloc_r+0x18>
 800b584:	0011      	movs	r1, r2
 800b586:	f7ff fde9 	bl	800b15c <_malloc_r>
 800b58a:	0004      	movs	r4, r0
 800b58c:	0020      	movs	r0, r4
 800b58e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b590:	2a00      	cmp	r2, #0
 800b592:	d103      	bne.n	800b59c <_realloc_r+0x24>
 800b594:	f7ff fc18 	bl	800adc8 <_free_r>
 800b598:	2400      	movs	r4, #0
 800b59a:	e7f7      	b.n	800b58c <_realloc_r+0x14>
 800b59c:	f000 f84b 	bl	800b636 <_malloc_usable_size_r>
 800b5a0:	0007      	movs	r7, r0
 800b5a2:	4285      	cmp	r5, r0
 800b5a4:	d802      	bhi.n	800b5ac <_realloc_r+0x34>
 800b5a6:	0843      	lsrs	r3, r0, #1
 800b5a8:	42ab      	cmp	r3, r5
 800b5aa:	d3ef      	bcc.n	800b58c <_realloc_r+0x14>
 800b5ac:	0029      	movs	r1, r5
 800b5ae:	0030      	movs	r0, r6
 800b5b0:	f7ff fdd4 	bl	800b15c <_malloc_r>
 800b5b4:	9001      	str	r0, [sp, #4]
 800b5b6:	2800      	cmp	r0, #0
 800b5b8:	d0ee      	beq.n	800b598 <_realloc_r+0x20>
 800b5ba:	002a      	movs	r2, r5
 800b5bc:	42bd      	cmp	r5, r7
 800b5be:	d900      	bls.n	800b5c2 <_realloc_r+0x4a>
 800b5c0:	003a      	movs	r2, r7
 800b5c2:	0021      	movs	r1, r4
 800b5c4:	9801      	ldr	r0, [sp, #4]
 800b5c6:	f7ff fbf5 	bl	800adb4 <memcpy>
 800b5ca:	0021      	movs	r1, r4
 800b5cc:	0030      	movs	r0, r6
 800b5ce:	f7ff fbfb 	bl	800adc8 <_free_r>
 800b5d2:	9c01      	ldr	r4, [sp, #4]
 800b5d4:	e7da      	b.n	800b58c <_realloc_r+0x14>

0800b5d6 <memmove>:
 800b5d6:	b510      	push	{r4, lr}
 800b5d8:	4288      	cmp	r0, r1
 800b5da:	d806      	bhi.n	800b5ea <memmove+0x14>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d008      	beq.n	800b5f4 <memmove+0x1e>
 800b5e2:	5ccc      	ldrb	r4, [r1, r3]
 800b5e4:	54c4      	strb	r4, [r0, r3]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	e7f9      	b.n	800b5de <memmove+0x8>
 800b5ea:	188b      	adds	r3, r1, r2
 800b5ec:	4298      	cmp	r0, r3
 800b5ee:	d2f5      	bcs.n	800b5dc <memmove+0x6>
 800b5f0:	3a01      	subs	r2, #1
 800b5f2:	d200      	bcs.n	800b5f6 <memmove+0x20>
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	5c8b      	ldrb	r3, [r1, r2]
 800b5f8:	5483      	strb	r3, [r0, r2]
 800b5fa:	e7f9      	b.n	800b5f0 <memmove+0x1a>

0800b5fc <_sbrk_r>:
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	b570      	push	{r4, r5, r6, lr}
 800b600:	4d06      	ldr	r5, [pc, #24]	@ (800b61c <_sbrk_r+0x20>)
 800b602:	0004      	movs	r4, r0
 800b604:	0008      	movs	r0, r1
 800b606:	602b      	str	r3, [r5, #0]
 800b608:	f7f5 fdbc 	bl	8001184 <_sbrk>
 800b60c:	1c43      	adds	r3, r0, #1
 800b60e:	d103      	bne.n	800b618 <_sbrk_r+0x1c>
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d000      	beq.n	800b618 <_sbrk_r+0x1c>
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	bd70      	pop	{r4, r5, r6, pc}
 800b61a:	46c0      	nop			@ (mov r8, r8)
 800b61c:	2000131c 	.word	0x2000131c

0800b620 <memchr>:
 800b620:	b2c9      	uxtb	r1, r1
 800b622:	1882      	adds	r2, r0, r2
 800b624:	4290      	cmp	r0, r2
 800b626:	d101      	bne.n	800b62c <memchr+0xc>
 800b628:	2000      	movs	r0, #0
 800b62a:	4770      	bx	lr
 800b62c:	7803      	ldrb	r3, [r0, #0]
 800b62e:	428b      	cmp	r3, r1
 800b630:	d0fb      	beq.n	800b62a <memchr+0xa>
 800b632:	3001      	adds	r0, #1
 800b634:	e7f6      	b.n	800b624 <memchr+0x4>

0800b636 <_malloc_usable_size_r>:
 800b636:	1f0b      	subs	r3, r1, #4
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	1f18      	subs	r0, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	da01      	bge.n	800b644 <_malloc_usable_size_r+0xe>
 800b640:	580b      	ldr	r3, [r1, r0]
 800b642:	18c0      	adds	r0, r0, r3
 800b644:	4770      	bx	lr
	...

0800b648 <_init>:
 800b648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b64a:	46c0      	nop			@ (mov r8, r8)
 800b64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64e:	bc08      	pop	{r3}
 800b650:	469e      	mov	lr, r3
 800b652:	4770      	bx	lr

0800b654 <_fini>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	46c0      	nop			@ (mov r8, r8)
 800b658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b65a:	bc08      	pop	{r3}
 800b65c:	469e      	mov	lr, r3
 800b65e:	4770      	bx	lr
