
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afcc  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800b08c  0800b08c  0000c08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2c4  0800b2c4  0000d134  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2c4  0800b2c4  0000d134  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2c4  0800b2c4  0000d134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c4  0800b2c4  0000c2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b2c8  0800b2c8  0000c2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  0800b2cc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024f8  20000134  0800b400  0000d134  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000262c  0800b400  0000d62c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d134  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027422  00000000  00000000  0000d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057f8  00000000  00000000  0003457e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002118  00000000  00000000  00039d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019cd  00000000  00000000  0003be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d6b2  00000000  00000000  0003d85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b5e2  00000000  00000000  0005af0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa0bf  00000000  00000000  000864f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001305b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ab8  00000000  00000000  001305f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001380ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000134 	.word	0x20000134
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b074 	.word	0x0800b074

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000138 	.word	0x20000138
 8000104:	0800b074 	.word	0x0800b074

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	0018      	movs	r0, r3
 80003fe:	230c      	movs	r3, #12
 8000400:	001a      	movs	r2, r3
 8000402:	2100      	movs	r1, #0
 8000404:	f00a fd44 	bl	800ae90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000408:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800040a:	4a2e      	ldr	r2, [pc, #184]	@ (80004c4 <MX_ADC1_Init+0xd0>)
 800040c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800040e:	4b2c      	ldr	r3, [pc, #176]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000410:	2280      	movs	r2, #128	@ 0x80
 8000412:	05d2      	lsls	r2, r2, #23
 8000414:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000416:	4b2a      	ldr	r3, [pc, #168]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000418:	2200      	movs	r2, #0
 800041a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800041c:	4b28      	ldr	r3, [pc, #160]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000422:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000424:	2200      	movs	r2, #0
 8000426:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000428:	4b25      	ldr	r3, [pc, #148]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800042a:	2204      	movs	r2, #4
 800042c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800042e:	4b24      	ldr	r3, [pc, #144]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000430:	2200      	movs	r2, #0
 8000432:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000434:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000436:	2200      	movs	r2, #0
 8000438:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800043a:	4b21      	ldr	r3, [pc, #132]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800043c:	2200      	movs	r2, #0
 800043e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000442:	2201      	movs	r2, #1
 8000444:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b1e      	ldr	r3, [pc, #120]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000448:	2220      	movs	r2, #32
 800044a:	2100      	movs	r1, #0
 800044c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800044e:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000456:	2200      	movs	r2, #0
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800045c:	222c      	movs	r2, #44	@ 0x2c
 800045e:	2100      	movs	r1, #0
 8000460:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000464:	2200      	movs	r2, #0
 8000466:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000468:	4b15      	ldr	r3, [pc, #84]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800046a:	2200      	movs	r2, #0
 800046c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800046e:	4b14      	ldr	r3, [pc, #80]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000470:	2200      	movs	r2, #0
 8000472:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000474:	4b12      	ldr	r3, [pc, #72]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000476:	223c      	movs	r2, #60	@ 0x3c
 8000478:	2100      	movs	r1, #0
 800047a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800047c:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 800047e:	2200      	movs	r2, #0
 8000480:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 f9eb 	bl	8001860 <HAL_ADC_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800048e:	f000 fcdb 	bl	8000e48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2201      	movs	r2, #1
 8000496:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004a4:	1d3a      	adds	r2, r7, #4
 80004a6:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <MX_ADC1_Init+0xcc>)
 80004a8:	0011      	movs	r1, r2
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fb80 	bl	8001bb0 <HAL_ADC_ConfigChannel>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004b4:	f000 fcc8 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004b8:	46c0      	nop			@ (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	b004      	add	sp, #16
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000150 	.word	0x20000150
 80004c4:	40012400 	.word	0x40012400

080004c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b08b      	sub	sp, #44	@ 0x2c
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d0:	2414      	movs	r4, #20
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2314      	movs	r3, #20
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f00a fcd8 	bl	800ae90 <memset>
  if(adcHandle->Instance==ADC1)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a18      	ldr	r2, [pc, #96]	@ (8000548 <HAL_ADC_MspInit+0x80>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d129      	bne.n	800053e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80004ea:	4b18      	ldr	r3, [pc, #96]	@ (800054c <HAL_ADC_MspInit+0x84>)
 80004ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004ee:	4b17      	ldr	r3, [pc, #92]	@ (800054c <HAL_ADC_MspInit+0x84>)
 80004f0:	2180      	movs	r1, #128	@ 0x80
 80004f2:	0349      	lsls	r1, r1, #13
 80004f4:	430a      	orrs	r2, r1
 80004f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <HAL_ADC_MspInit+0x84>)
 80004fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80004fc:	2380      	movs	r3, #128	@ 0x80
 80004fe:	035b      	lsls	r3, r3, #13
 8000500:	4013      	ands	r3, r2
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b11      	ldr	r3, [pc, #68]	@ (800054c <HAL_ADC_MspInit+0x84>)
 8000508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <HAL_ADC_MspInit+0x84>)
 800050c:	2101      	movs	r1, #1
 800050e:	430a      	orrs	r2, r1
 8000510:	635a      	str	r2, [r3, #52]	@ 0x34
 8000512:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <HAL_ADC_MspInit+0x84>)
 8000514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000516:	2201      	movs	r2, #1
 8000518:	4013      	ands	r3, r2
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2201      	movs	r2, #1
 8000522:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2203      	movs	r2, #3
 8000528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	193a      	adds	r2, r7, r4
 8000532:	23a0      	movs	r3, #160	@ 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fe35 	bl	80021a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b00b      	add	sp, #44	@ 0x2c
 8000544:	bd90      	pop	{r4, r7, pc}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	40012400 	.word	0x40012400
 800054c:	40021000 	.word	0x40021000

08000550 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of driveLED */
  driveLEDHandle = osThreadNew(StartDriveLED, NULL, &driveLED_attributes);
 8000554:	4a05      	ldr	r2, [pc, #20]	@ (800056c <MX_FREERTOS_Init+0x1c>)
 8000556:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <MX_FREERTOS_Init+0x20>)
 8000558:	2100      	movs	r1, #0
 800055a:	0018      	movs	r0, r3
 800055c:	f008 fa42 	bl	80089e4 <osThreadNew>
 8000560:	0002      	movs	r2, r0
 8000562:	4b04      	ldr	r3, [pc, #16]	@ (8000574 <MX_FREERTOS_Init+0x24>)
 8000564:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	0800b11c 	.word	0x0800b11c
 8000570:	08000579 	.word	0x08000579
 8000574:	20000894 	.word	0x20000894

08000578 <StartDriveLED>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDriveLED */
void StartDriveLED(void *argument)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDriveLED */
  /* Infinite loop */
  for(;;)
  {
	  for (uint8_t i = 0; i < 16; i++) {
 8000580:	230f      	movs	r3, #15
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	2200      	movs	r2, #0
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e069      	b.n	800065e <StartDriveLED+0xe6>
		  // set columns
		  for (uint8_t j = 0; j < 16; j++) {
 800058a:	230e      	movs	r3, #14
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e03a      	b.n	800060a <StartDriveLED+0x92>
			  if (image_leds[current_frame][i] & (0x1 << (15-j))) {
 8000594:	4b35      	ldr	r3, [pc, #212]	@ (800066c <StartDriveLED+0xf4>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	0019      	movs	r1, r3
 800059a:	230f      	movs	r3, #15
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	4b33      	ldr	r3, [pc, #204]	@ (8000670 <StartDriveLED+0xf8>)
 80005a2:	0109      	lsls	r1, r1, #4
 80005a4:	188a      	adds	r2, r1, r2
 80005a6:	0052      	lsls	r2, r2, #1
 80005a8:	5ad3      	ldrh	r3, [r2, r3]
 80005aa:	0019      	movs	r1, r3
 80005ac:	200e      	movs	r0, #14
 80005ae:	183b      	adds	r3, r7, r0
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	220f      	movs	r2, #15
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	4119      	asrs	r1, r3
 80005b8:	000b      	movs	r3, r1
 80005ba:	2201      	movs	r2, #1
 80005bc:	4013      	ands	r3, r2
 80005be:	d00f      	beq.n	80005e0 <StartDriveLED+0x68>
				  HAL_GPIO_WritePin(led_column_ports[j], led_column_pins[j], GPIO_PIN_SET);
 80005c0:	0001      	movs	r1, r0
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	781a      	ldrb	r2, [r3, #0]
 80005c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000674 <StartDriveLED+0xfc>)
 80005c8:	0092      	lsls	r2, r2, #2
 80005ca:	58d0      	ldr	r0, [r2, r3]
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <StartDriveLED+0x100>)
 80005d2:	0052      	lsls	r2, r2, #1
 80005d4:	5ad3      	ldrh	r3, [r2, r3]
 80005d6:	2201      	movs	r2, #1
 80005d8:	0019      	movs	r1, r3
 80005da:	f001 ff49 	bl	8002470 <HAL_GPIO_WritePin>
 80005de:	e00e      	b.n	80005fe <StartDriveLED+0x86>
			  } else {
				  HAL_GPIO_WritePin(led_column_ports[j], led_column_pins[j], GPIO_PIN_RESET);
 80005e0:	210e      	movs	r1, #14
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	781a      	ldrb	r2, [r3, #0]
 80005e6:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <StartDriveLED+0xfc>)
 80005e8:	0092      	lsls	r2, r2, #2
 80005ea:	58d0      	ldr	r0, [r2, r3]
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b21      	ldr	r3, [pc, #132]	@ (8000678 <StartDriveLED+0x100>)
 80005f2:	0052      	lsls	r2, r2, #1
 80005f4:	5ad3      	ldrh	r3, [r2, r3]
 80005f6:	2200      	movs	r2, #0
 80005f8:	0019      	movs	r1, r3
 80005fa:	f001 ff39 	bl	8002470 <HAL_GPIO_WritePin>
		  for (uint8_t j = 0; j < 16; j++) {
 80005fe:	210e      	movs	r1, #14
 8000600:	187b      	adds	r3, r7, r1
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	187b      	adds	r3, r7, r1
 8000606:	3201      	adds	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	230e      	movs	r3, #14
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b0f      	cmp	r3, #15
 8000612:	d9bf      	bls.n	8000594 <StartDriveLED+0x1c>
			  }
		  }
		  // turn on row (active low)
		  HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_RESET);
 8000614:	240f      	movs	r4, #15
 8000616:	193b      	adds	r3, r7, r4
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	4b18      	ldr	r3, [pc, #96]	@ (800067c <StartDriveLED+0x104>)
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	58d0      	ldr	r0, [r2, r3]
 8000620:	193b      	adds	r3, r7, r4
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <StartDriveLED+0x108>)
 8000626:	0052      	lsls	r2, r2, #1
 8000628:	5ad3      	ldrh	r3, [r2, r3]
 800062a:	2200      	movs	r2, #0
 800062c:	0019      	movs	r1, r3
 800062e:	f001 ff1f 	bl	8002470 <HAL_GPIO_WritePin>
		  osDelay(20);
 8000632:	2014      	movs	r0, #20
 8000634:	f008 fa6c 	bl	8008b10 <osDelay>

		  // turn off row
		  HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_SET);
 8000638:	193b      	adds	r3, r7, r4
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <StartDriveLED+0x104>)
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	58d0      	ldr	r0, [r2, r3]
 8000642:	193b      	adds	r3, r7, r4
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <StartDriveLED+0x108>)
 8000648:	0052      	lsls	r2, r2, #1
 800064a:	5ad3      	ldrh	r3, [r2, r3]
 800064c:	2201      	movs	r2, #1
 800064e:	0019      	movs	r1, r3
 8000650:	f001 ff0e 	bl	8002470 <HAL_GPIO_WritePin>
	  for (uint8_t i = 0; i < 16; i++) {
 8000654:	193b      	adds	r3, r7, r4
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	193b      	adds	r3, r7, r4
 800065a:	3201      	adds	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
 800065e:	230f      	movs	r3, #15
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d990      	bls.n	800058a <StartDriveLED+0x12>
 8000668:	e78a      	b.n	8000580 <StartDriveLED+0x8>
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	200008ec 	.word	0x200008ec
 8000670:	200001b4 	.word	0x200001b4
 8000674:	20000000 	.word	0x20000000
 8000678:	20000040 	.word	0x20000040
 800067c:	20000060 	.word	0x20000060
 8000680:	200000a0 	.word	0x200000a0

08000684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b08b      	sub	sp, #44	@ 0x2c
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	2414      	movs	r4, #20
 800068c:	193b      	adds	r3, r7, r4
 800068e:	0018      	movs	r0, r3
 8000690:	2314      	movs	r3, #20
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f00a fbfb 	bl	800ae90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b71      	ldr	r3, [pc, #452]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 800069c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800069e:	4b70      	ldr	r3, [pc, #448]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006a0:	2104      	movs	r1, #4
 80006a2:	430a      	orrs	r2, r1
 80006a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006a6:	4b6e      	ldr	r3, [pc, #440]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006aa:	2204      	movs	r2, #4
 80006ac:	4013      	ands	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b2:	4b6b      	ldr	r3, [pc, #428]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b6:	4b6a      	ldr	r3, [pc, #424]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006b8:	2120      	movs	r1, #32
 80006ba:	430a      	orrs	r2, r1
 80006bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006be:	4b68      	ldr	r3, [pc, #416]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006c2:	2220      	movs	r2, #32
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b65      	ldr	r3, [pc, #404]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ce:	4b64      	ldr	r3, [pc, #400]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d6:	4b62      	ldr	r3, [pc, #392]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006da:	2201      	movs	r2, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b5f      	ldr	r3, [pc, #380]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e6:	4b5e      	ldr	r3, [pc, #376]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f2:	2202      	movs	r2, #2
 80006f4:	4013      	ands	r3, r2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006fa:	4b59      	ldr	r3, [pc, #356]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 80006fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006fe:	4b58      	ldr	r3, [pc, #352]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 8000700:	2108      	movs	r1, #8
 8000702:	430a      	orrs	r2, r1
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
 8000706:	4b56      	ldr	r3, [pc, #344]	@ (8000860 <MX_GPIO_Init+0x1dc>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800070a:	2208      	movs	r2, #8
 800070c:	4013      	ands	r3, r2
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_NS_Pin|LED_Row13_Pin|LED_Row15_Pin|LED_Row4_Pin
 8000712:	238f      	movs	r3, #143	@ 0x8f
 8000714:	019b      	lsls	r3, r3, #6
 8000716:	4853      	ldr	r0, [pc, #332]	@ (8000864 <MX_GPIO_Init+0x1e0>)
 8000718:	2200      	movs	r2, #0
 800071a:	0019      	movs	r1, r3
 800071c:	f001 fea8 	bl	8002470 <HAL_GPIO_WritePin>
                          |LED_Row2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Column8_Pin|LED_Column10_Pin|LED_Column12_Pin|LED_Column9_Pin
 8000720:	4951      	ldr	r1, [pc, #324]	@ (8000868 <MX_GPIO_Init+0x1e4>)
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2200      	movs	r2, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f001 fea1 	bl	8002470 <HAL_GPIO_WritePin>
                          |LED_Row9_Pin|LED_Row11_Pin|LED_Row10_Pin|LED_Row8_Pin
                          |LED_Row6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Column11_Pin|LED_Column13_Pin|LED_Column14_Pin|LED_Column15_Pin
 800072e:	494f      	ldr	r1, [pc, #316]	@ (800086c <MX_GPIO_Init+0x1e8>)
 8000730:	4b4f      	ldr	r3, [pc, #316]	@ (8000870 <MX_GPIO_Init+0x1ec>)
 8000732:	2200      	movs	r2, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fe9b 	bl	8002470 <HAL_GPIO_WritePin>
                          |LED_Row1_Pin|LED_Row3_Pin|LED_Row5_Pin|LED_Row7_Pin
                          |LED_Column5_Pin|LED_Column7_Pin|SPI2_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Row14_Pin|LED_Row12_Pin|LED_Row0_Pin|LED_Column0_Pin
 800073a:	494e      	ldr	r1, [pc, #312]	@ (8000874 <MX_GPIO_Init+0x1f0>)
 800073c:	4b4e      	ldr	r3, [pc, #312]	@ (8000878 <MX_GPIO_Init+0x1f4>)
 800073e:	2200      	movs	r2, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fe95 	bl	8002470 <HAL_GPIO_WritePin>
                          |LED_Column1_Pin|LED_Column2_Pin|LED_Column4_Pin|LED_Column6_Pin
                          |LED_Column3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : MOTOR_NS_Pin */
  GPIO_InitStruct.Pin = MOTOR_NS_Pin;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	0192      	lsls	r2, r2, #6
 800074c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2201      	movs	r2, #1
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MOTOR_NS_GPIO_Port, &GPIO_InitStruct);
 8000760:	193b      	adds	r3, r7, r4
 8000762:	4a40      	ldr	r2, [pc, #256]	@ (8000864 <MX_GPIO_Init+0x1e0>)
 8000764:	0019      	movs	r1, r3
 8000766:	0010      	movs	r0, r2
 8000768:	f001 fd1e 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Column8_Pin LED_Column10_Pin LED_Column12_Pin LED_Column9_Pin
                           LED_Row9_Pin LED_Row11_Pin LED_Row10_Pin LED_Row8_Pin
                           LED_Row6_Pin */
  GPIO_InitStruct.Pin = LED_Column8_Pin|LED_Column10_Pin|LED_Column12_Pin|LED_Column9_Pin
 800076c:	193b      	adds	r3, r7, r4
 800076e:	4a3e      	ldr	r2, [pc, #248]	@ (8000868 <MX_GPIO_Init+0x1e4>)
 8000770:	601a      	str	r2, [r3, #0]
                          |LED_Row9_Pin|LED_Row11_Pin|LED_Row10_Pin|LED_Row8_Pin
                          |LED_Row6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2201      	movs	r2, #1
 8000776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2203      	movs	r2, #3
 8000782:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	193a      	adds	r2, r7, r4
 8000786:	23a0      	movs	r3, #160	@ 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	0011      	movs	r1, r2
 800078c:	0018      	movs	r0, r3
 800078e:	f001 fd0b 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Column11_Pin LED_Column13_Pin LED_Column14_Pin LED_Column15_Pin
                           LED_Row1_Pin LED_Row3_Pin LED_Row5_Pin LED_Row7_Pin
                           LED_Column5_Pin LED_Column7_Pin */
  GPIO_InitStruct.Pin = LED_Column11_Pin|LED_Column13_Pin|LED_Column14_Pin|LED_Column15_Pin
 8000792:	193b      	adds	r3, r7, r4
 8000794:	4a39      	ldr	r2, [pc, #228]	@ (800087c <MX_GPIO_Init+0x1f8>)
 8000796:	601a      	str	r2, [r3, #0]
                          |LED_Row1_Pin|LED_Row3_Pin|LED_Row5_Pin|LED_Row7_Pin
                          |LED_Column5_Pin|LED_Column7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2201      	movs	r2, #1
 800079c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2203      	movs	r2, #3
 80007a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	4a30      	ldr	r2, [pc, #192]	@ (8000870 <MX_GPIO_Init+0x1ec>)
 80007ae:	0019      	movs	r1, r3
 80007b0:	0010      	movs	r0, r2
 80007b2:	f001 fcf9 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Row13_Pin LED_Row15_Pin LED_Row4_Pin LED_Row2_Pin */
  GPIO_InitStruct.Pin = LED_Row13_Pin|LED_Row15_Pin|LED_Row4_Pin|LED_Row2_Pin;
 80007b6:	0021      	movs	r1, r4
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	22f0      	movs	r2, #240	@ 0xf0
 80007bc:	0092      	lsls	r2, r2, #2
 80007be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	000c      	movs	r4, r1
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2203      	movs	r2, #3
 80007d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	4a23      	ldr	r2, [pc, #140]	@ (8000864 <MX_GPIO_Init+0x1e0>)
 80007d8:	0019      	movs	r1, r3
 80007da:	0010      	movs	r0, r2
 80007dc:	f001 fce4 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Row14_Pin LED_Row12_Pin LED_Row0_Pin LED_Column0_Pin
                           LED_Column1_Pin LED_Column2_Pin LED_Column4_Pin LED_Column6_Pin
                           LED_Column3_Pin */
  GPIO_InitStruct.Pin = LED_Row14_Pin|LED_Row12_Pin|LED_Row0_Pin|LED_Column0_Pin
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	4a24      	ldr	r2, [pc, #144]	@ (8000874 <MX_GPIO_Init+0x1f0>)
 80007e4:	601a      	str	r2, [r3, #0]
                          |LED_Column1_Pin|LED_Column2_Pin|LED_Column4_Pin|LED_Column6_Pin
                          |LED_Column3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2201      	movs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2203      	movs	r2, #3
 80007f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000878 <MX_GPIO_Init+0x1f4>)
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f001 fcd2 	bl	80021a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8000804:	0021      	movs	r1, r4
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	0052      	lsls	r2, r2, #1
 800080c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2201      	movs	r2, #1
 8000812:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2201      	movs	r2, #1
 8000818:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2203      	movs	r2, #3
 800081e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000820:	187b      	adds	r3, r7, r1
 8000822:	4a13      	ldr	r2, [pc, #76]	@ (8000870 <MX_GPIO_Init+0x1ec>)
 8000824:	0019      	movs	r1, r3
 8000826:	0010      	movs	r0, r2
 8000828:	f001 fcbe 	bl	80021a8 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_GPIO_Init+0x1fc>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_GPIO_Init+0x1fc>)
 8000832:	2180      	movs	r1, #128	@ 0x80
 8000834:	03c9      	lsls	r1, r1, #15
 8000836:	430a      	orrs	r2, r1
 8000838:	601a      	str	r2, [r3, #0]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA10);
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_GPIO_Init+0x1fc>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <MX_GPIO_Init+0x1fc>)
 8000840:	2180      	movs	r1, #128	@ 0x80
 8000842:	0409      	lsls	r1, r1, #16
 8000844:	430a      	orrs	r2, r1
 8000846:	601a      	str	r2, [r3, #0]

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <MX_GPIO_Init+0x1fc>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_GPIO_Init+0x1fc>)
 800084e:	2180      	movs	r1, #128	@ 0x80
 8000850:	02c9      	lsls	r1, r1, #11
 8000852:	430a      	orrs	r2, r1
 8000854:	601a      	str	r2, [r3, #0]

}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b00b      	add	sp, #44	@ 0x2c
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	40021000 	.word	0x40021000
 8000864:	50000800 	.word	0x50000800
 8000868:	00008ff0 	.word	0x00008ff0
 800086c:	0000dd37 	.word	0x0000dd37
 8000870:	50000400 	.word	0x50000400
 8000874:	0000037f 	.word	0x0000037f
 8000878:	50000c00 	.word	0x50000c00
 800087c:	0000dc37 	.word	0x0000dc37
 8000880:	40010000 	.word	0x40010000

08000884 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_I2C1_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <MX_I2C1_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60101017;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_I2C1_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <MX_I2C1_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_I2C1_Init+0x74>)
 800089c:	2201      	movs	r2, #1
 800089e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a6:	4b14      	ldr	r3, [pc, #80]	@ (80008f8 <MX_I2C1_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b2:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_I2C1_Init+0x74>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fdf3 	bl	80024ac <HAL_I2C_Init>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ca:	f000 fabd 	bl	8000e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ce:	4b0a      	ldr	r3, [pc, #40]	@ (80008f8 <MX_I2C1_Init+0x74>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	0018      	movs	r0, r3
 80008d4:	f002 fcec 	bl	80032b0 <HAL_I2CEx_ConfigAnalogFilter>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008dc:	f000 fab4 	bl	8000e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <MX_I2C1_Init+0x74>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	0018      	movs	r0, r3
 80008e6:	f002 fd2f 	bl	8003348 <HAL_I2CEx_ConfigDigitalFilter>
 80008ea:	1e03      	subs	r3, r0, #0
 80008ec:	d001      	beq.n	80008f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ee:	f000 faab 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000898 	.word	0x20000898
 80008fc:	40005400 	.word	0x40005400
 8000900:	60101017 	.word	0x60101017

08000904 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b091      	sub	sp, #68	@ 0x44
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	232c      	movs	r3, #44	@ 0x2c
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	0018      	movs	r0, r3
 8000912:	2314      	movs	r3, #20
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f00a faba 	bl	800ae90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800091c:	2410      	movs	r4, #16
 800091e:	193b      	adds	r3, r7, r4
 8000920:	0018      	movs	r0, r3
 8000922:	231c      	movs	r3, #28
 8000924:	001a      	movs	r2, r3
 8000926:	2100      	movs	r1, #0
 8000928:	f00a fab2 	bl	800ae90 <memset>
  if(i2cHandle->Instance==I2C1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a26      	ldr	r2, [pc, #152]	@ (80009cc <HAL_I2C_MspInit+0xc8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d145      	bne.n	80009c2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000936:	193b      	adds	r3, r7, r4
 8000938:	2220      	movs	r2, #32
 800093a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000942:	193b      	adds	r3, r7, r4
 8000944:	0018      	movs	r0, r3
 8000946:	f003 fa7b 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d001      	beq.n	8000952 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800094e:	f000 fa7b 	bl	8000e48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <HAL_I2C_MspInit+0xcc>)
 8000954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <HAL_I2C_MspInit+0xcc>)
 8000958:	2102      	movs	r1, #2
 800095a:	430a      	orrs	r2, r1
 800095c:	635a      	str	r2, [r3, #52]	@ 0x34
 800095e:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <HAL_I2C_MspInit+0xcc>)
 8000960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000962:	2202      	movs	r2, #2
 8000964:	4013      	ands	r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800096a:	212c      	movs	r1, #44	@ 0x2c
 800096c:	187b      	adds	r3, r7, r1
 800096e:	22c0      	movs	r2, #192	@ 0xc0
 8000970:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000972:	187b      	adds	r3, r7, r1
 8000974:	2212      	movs	r2, #18
 8000976:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2201      	movs	r2, #1
 800097c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2203      	movs	r2, #3
 8000982:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2206      	movs	r2, #6
 8000988:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	187b      	adds	r3, r7, r1
 800098c:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <HAL_I2C_MspInit+0xd0>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f001 fc09 	bl	80021a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_I2C_MspInit+0xcc>)
 8000998:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <HAL_I2C_MspInit+0xcc>)
 800099c:	2180      	movs	r1, #128	@ 0x80
 800099e:	0389      	lsls	r1, r1, #14
 80009a0:	430a      	orrs	r2, r1
 80009a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <HAL_I2C_MspInit+0xcc>)
 80009a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009a8:	2380      	movs	r3, #128	@ 0x80
 80009aa:	039b      	lsls	r3, r3, #14
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 3, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2103      	movs	r1, #3
 80009b6:	2017      	movs	r0, #23
 80009b8:	f001 fb5a 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80009bc:	2017      	movs	r0, #23
 80009be:	f001 fb6c 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b011      	add	sp, #68	@ 0x44
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	40005400 	.word	0x40005400
 80009d0:	40021000 	.word	0x40021000
 80009d4:	50000400 	.word	0x50000400

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	4ccc      	ldr	r4, [pc, #816]	@ (8000d0c <main+0x334>)
 80009dc:	44a5      	add	sp, r4
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f000 fde0 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f9b6 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e8:	f7ff fe4c 	bl	8000684 <MX_GPIO_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80009ec:	f005 fad4 	bl	8005f98 <MX_FATFS_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <main+0x20>
    Error_Handler();
 80009f4:	f000 fa28 	bl	8000e48 <Error_Handler>
  }
  MX_I2C1_Init();
 80009f8:	f7ff ff44 	bl	8000884 <MX_I2C1_Init>
  MX_ADC1_Init();
 80009fc:	f7ff fcfa 	bl	80003f4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000a00:	f000 fa28 	bl	8000e54 <MX_SPI2_Init>
  MX_TIM14_Init();
 8000a04:	f000 fc2a 	bl	800125c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8000a08:	f000 fcf2 	bl	80013f0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000a0c:	f000 fbd0 	bl	80011b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8000a10:	4bbf      	ldr	r3, [pc, #764]	@ (8000d10 <main+0x338>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f003 fd60 	bl	80044d8 <HAL_TIM_Base_Start_IT>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <main+0x48>
	  Error_Handler();
 8000a1c:	f000 fa14 	bl	8000e48 <Error_Handler>
  }

//  SD card testing code
#ifdef TEST_SD
  for (uint8_t i = 0; i < 16; i++) {
 8000a20:	4bbc      	ldr	r3, [pc, #752]	@ (8000d14 <main+0x33c>)
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
 8000a28:	e013      	b.n	8000a52 <main+0x7a>
	  HAL_GPIO_WritePin(led_row_ports[i], led_row_pins[i], GPIO_PIN_SET);
 8000a2a:	4cba      	ldr	r4, [pc, #744]	@ (8000d14 <main+0x33c>)
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	781a      	ldrb	r2, [r3, #0]
 8000a30:	4bb9      	ldr	r3, [pc, #740]	@ (8000d18 <main+0x340>)
 8000a32:	0092      	lsls	r2, r2, #2
 8000a34:	58d0      	ldr	r0, [r2, r3]
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4bb8      	ldr	r3, [pc, #736]	@ (8000d1c <main+0x344>)
 8000a3c:	0052      	lsls	r2, r2, #1
 8000a3e:	5ad3      	ldrh	r3, [r2, r3]
 8000a40:	2201      	movs	r2, #1
 8000a42:	0019      	movs	r1, r3
 8000a44:	f001 fd14 	bl	8002470 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 16; i++) {
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	3201      	adds	r2, #1
 8000a50:	701a      	strb	r2, [r3, #0]
 8000a52:	4bb0      	ldr	r3, [pc, #704]	@ (8000d14 <main+0x33c>)
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d9e6      	bls.n	8000a2a <main+0x52>
  }
  for (i = 0; i < 16; i++) {
 8000a5c:	4bb0      	ldr	r3, [pc, #704]	@ (8000d20 <main+0x348>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	801a      	strh	r2, [r3, #0]
 8000a62:	e015      	b.n	8000a90 <main+0xb8>
	  HAL_GPIO_WritePin(led_column_ports[i], led_column_pins[i], GPIO_PIN_SET);
 8000a64:	4bae      	ldr	r3, [pc, #696]	@ (8000d20 <main+0x348>)
 8000a66:	881b      	ldrh	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	4bae      	ldr	r3, [pc, #696]	@ (8000d24 <main+0x34c>)
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	58d0      	ldr	r0, [r2, r3]
 8000a70:	4bab      	ldr	r3, [pc, #684]	@ (8000d20 <main+0x348>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	001a      	movs	r2, r3
 8000a76:	4bac      	ldr	r3, [pc, #688]	@ (8000d28 <main+0x350>)
 8000a78:	0052      	lsls	r2, r2, #1
 8000a7a:	5ad3      	ldrh	r3, [r2, r3]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	0019      	movs	r1, r3
 8000a80:	f001 fcf6 	bl	8002470 <HAL_GPIO_WritePin>
  for (i = 0; i < 16; i++) {
 8000a84:	4ba6      	ldr	r3, [pc, #664]	@ (8000d20 <main+0x348>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	4ba4      	ldr	r3, [pc, #656]	@ (8000d20 <main+0x348>)
 8000a8e:	801a      	strh	r2, [r3, #0]
 8000a90:	4ba3      	ldr	r3, [pc, #652]	@ (8000d20 <main+0x348>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d9e5      	bls.n	8000a64 <main+0x8c>
  }
  HAL_GPIO_WritePin(led_row_ports[0], led_row_pins[0], GPIO_PIN_RESET);
 8000a98:	4b9f      	ldr	r3, [pc, #636]	@ (8000d18 <main+0x340>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	4b9f      	ldr	r3, [pc, #636]	@ (8000d1c <main+0x344>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	0019      	movs	r1, r3
 8000aa4:	f001 fce4 	bl	8002470 <HAL_GPIO_WritePin>


  HAL_Delay(1000); // short delay to let the SD card settle
 8000aa8:	23fa      	movs	r3, #250	@ 0xfa
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fdb5 	bl	800161c <HAL_Delay>
  FATFS FatFs; 	// Fatfs handle
  FIL fil; 		// File handle
  FRESULT fres; 	// Result after operations

  // open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 8000ab2:	4d9e      	ldr	r5, [pc, #632]	@ (8000d2c <main+0x354>)
 8000ab4:	197c      	adds	r4, r7, r5
 8000ab6:	499e      	ldr	r1, [pc, #632]	@ (8000d30 <main+0x358>)
 8000ab8:	23b3      	movs	r3, #179	@ 0xb3
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	2201      	movs	r2, #1
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f007 f919 	bl	8007cf8 <f_mount>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 8000aca:	197b      	adds	r3, r7, r5
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d009      	beq.n	8000ae6 <main+0x10e>
	  HAL_GPIO_WritePin(led_row_ports[15], led_row_pins[15], GPIO_PIN_RESET);
 8000ad2:	4b91      	ldr	r3, [pc, #580]	@ (8000d18 <main+0x340>)
 8000ad4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000ad6:	4b91      	ldr	r3, [pc, #580]	@ (8000d1c <main+0x344>)
 8000ad8:	8bdb      	ldrh	r3, [r3, #30]
 8000ada:	2200      	movs	r2, #0
 8000adc:	0019      	movs	r1, r3
 8000ade:	f001 fcc7 	bl	8002470 <HAL_GPIO_WritePin>
	  while(1);
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	e7fd      	b.n	8000ae2 <main+0x10a>
  }
  HAL_GPIO_WritePin(led_row_ports[1], led_row_pins[1], GPIO_PIN_RESET);
 8000ae6:	4b8c      	ldr	r3, [pc, #560]	@ (8000d18 <main+0x340>)
 8000ae8:	6858      	ldr	r0, [r3, #4]
 8000aea:	4b8c      	ldr	r3, [pc, #560]	@ (8000d1c <main+0x344>)
 8000aec:	885b      	ldrh	r3, [r3, #2]
 8000aee:	2200      	movs	r2, #0
 8000af0:	0019      	movs	r1, r3
 8000af2:	f001 fcbd 	bl	8002470 <HAL_GPIO_WritePin>
  // gather statistics from the SD card
  DWORD free_clusters;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000af6:	4d8d      	ldr	r5, [pc, #564]	@ (8000d2c <main+0x354>)
 8000af8:	197c      	adds	r4, r7, r5
 8000afa:	2394      	movs	r3, #148	@ 0x94
 8000afc:	18fa      	adds	r2, r7, r3
 8000afe:	2398      	movs	r3, #152	@ 0x98
 8000b00:	18f9      	adds	r1, r7, r3
 8000b02:	4b8b      	ldr	r3, [pc, #556]	@ (8000d30 <main+0x358>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f007 fd35 	bl	8008574 <f_getfree>
 8000b0a:	0003      	movs	r3, r0
 8000b0c:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 8000b0e:	197b      	adds	r3, r7, r5
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <main+0x142>
	  while(1);
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	e7fd      	b.n	8000b16 <main+0x13e>
  }

  HAL_GPIO_WritePin(led_row_ports[2], led_row_pins[2], GPIO_PIN_RESET);
 8000b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d18 <main+0x340>)
 8000b1c:	6898      	ldr	r0, [r3, #8]
 8000b1e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d1c <main+0x344>)
 8000b20:	889b      	ldrh	r3, [r3, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	0019      	movs	r1, r3
 8000b26:	f001 fca3 	bl	8002470 <HAL_GPIO_WritePin>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 8000b2a:	4d80      	ldr	r5, [pc, #512]	@ (8000d2c <main+0x354>)
 8000b2c:	197c      	adds	r4, r7, r5
 8000b2e:	4981      	ldr	r1, [pc, #516]	@ (8000d34 <main+0x35c>)
 8000b30:	239c      	movs	r3, #156	@ 0x9c
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	2201      	movs	r2, #1
 8000b36:	0018      	movs	r0, r3
 8000b38:	f007 f92a 	bl	8007d90 <f_open>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	7023      	strb	r3, [r4, #0]
  if (fres != FR_OK) {
 8000b40:	197b      	adds	r3, r7, r5
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d009      	beq.n	8000b5c <main+0x184>
	  HAL_GPIO_WritePin(led_row_ports[15], led_row_pins[15], GPIO_PIN_RESET);
 8000b48:	4b73      	ldr	r3, [pc, #460]	@ (8000d18 <main+0x340>)
 8000b4a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000b4c:	4b73      	ldr	r3, [pc, #460]	@ (8000d1c <main+0x344>)
 8000b4e:	8bdb      	ldrh	r3, [r3, #30]
 8000b50:	2200      	movs	r2, #0
 8000b52:	0019      	movs	r1, r3
 8000b54:	f001 fc8c 	bl	8002470 <HAL_GPIO_WritePin>
	  while(1);
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	e7fd      	b.n	8000b58 <main+0x180>
  }

  HAL_GPIO_WritePin(led_row_ports[3], led_row_pins[3], GPIO_PIN_RESET);
 8000b5c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d18 <main+0x340>)
 8000b5e:	68d8      	ldr	r0, [r3, #12]
 8000b60:	4b6e      	ldr	r3, [pc, #440]	@ (8000d1c <main+0x344>)
 8000b62:	88db      	ldrh	r3, [r3, #6]
 8000b64:	2200      	movs	r2, #0
 8000b66:	0019      	movs	r1, r3
 8000b68:	f001 fc82 	bl	8002470 <HAL_GPIO_WritePin>



  BYTE readBuf[17];
  int x = -1;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	425b      	negs	r3, r3
 8000b70:	22a3      	movs	r2, #163	@ 0xa3
 8000b72:	00d2      	lsls	r2, r2, #3
 8000b74:	18ba      	adds	r2, r7, r2
 8000b76:	6013      	str	r3, [r2, #0]
  int x3 = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	4a6f      	ldr	r2, [pc, #444]	@ (8000d38 <main+0x360>)
 8000b7c:	18ba      	adds	r2, r7, r2
 8000b7e:	6013      	str	r3, [r2, #0]
  int image = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	22a2      	movs	r2, #162	@ 0xa2
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	18ba      	adds	r2, r7, r2
 8000b88:	6013      	str	r3, [r2, #0]
  char fullText[128];
  unsigned int decimal_value = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8000d3c <main+0x364>)
 8000b8e:	18ba      	adds	r2, r7, r2
 8000b90:	6013      	str	r3, [r2, #0]
  memset(fullText, 0, sizeof(fullText));
 8000b92:	003b      	movs	r3, r7
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	2100      	movs	r1, #0
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f00a f979 	bl	800ae90 <memset>
  TCHAR* rres3 = "4";
 8000b9e:	4b68      	ldr	r3, [pc, #416]	@ (8000d40 <main+0x368>)
 8000ba0:	22a0      	movs	r2, #160	@ 0xa0
 8000ba2:	00d2      	lsls	r2, r2, #3
 8000ba4:	18b9      	adds	r1, r7, r2
 8000ba6:	600b      	str	r3, [r1, #0]
  if(rres3 != 0) {
 8000ba8:	18bb      	adds	r3, r7, r2
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d100      	bne.n	8000bb2 <main+0x1da>
 8000bb0:	e077      	b.n	8000ca2 <main+0x2ca>
	  while (x < 1760) { //this states limit of how big the txt is
 8000bb2:	e06d      	b.n	8000c90 <main+0x2b8>
		  f_gets((TCHAR*)readBuf, 17, &fil);
 8000bb4:	239c      	movs	r3, #156	@ 0x9c
 8000bb6:	18fa      	adds	r2, r7, r3
 8000bb8:	2380      	movs	r3, #128	@ 0x80
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	2111      	movs	r1, #17
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f007 fd95 	bl	80086ee <f_gets>
		  x += 1;
 8000bc4:	22a3      	movs	r2, #163	@ 0xa3
 8000bc6:	00d2      	lsls	r2, r2, #3
 8000bc8:	18bb      	adds	r3, r7, r2
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	18b9      	adds	r1, r7, r2
 8000bd0:	600b      	str	r3, [r1, #0]
		  decimal_value = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	4959      	ldr	r1, [pc, #356]	@ (8000d3c <main+0x364>)
 8000bd6:	1879      	adds	r1, r7, r1
 8000bd8:	600b      	str	r3, [r1, #0]
		  if ((x+1) % 2 == 1) {
 8000bda:	18bb      	adds	r3, r7, r2
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	4a58      	ldr	r2, [pc, #352]	@ (8000d44 <main+0x36c>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	d504      	bpl.n	8000bf0 <main+0x218>
 8000be6:	3b01      	subs	r3, #1
 8000be8:	2202      	movs	r2, #2
 8000bea:	4252      	negs	r2, r2
 8000bec:	4313      	orrs	r3, r2
 8000bee:	3301      	adds	r3, #1
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d13e      	bne.n	8000c72 <main+0x29a>
			  // Concatenate the read line to the full text buffer
			  for (int i = 0; i < 16; i++) { // the 16 bits when running
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	22a1      	movs	r2, #161	@ 0xa1
 8000bf8:	00d2      	lsls	r2, r2, #3
 8000bfa:	18ba      	adds	r2, r7, r2
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e01c      	b.n	8000c3a <main+0x262>
				  // Convert '1' or '0' char to its integer value
				  int bit_value = readBuf[i] - '0'; // '1' - '0' = 1, '0' - '0' = 0
 8000c00:	4b51      	ldr	r3, [pc, #324]	@ (8000d48 <main+0x370>)
 8000c02:	22a4      	movs	r2, #164	@ 0xa4
 8000c04:	00d2      	lsls	r2, r2, #3
 8000c06:	189b      	adds	r3, r3, r2
 8000c08:	19da      	adds	r2, r3, r7
 8000c0a:	21a1      	movs	r1, #161	@ 0xa1
 8000c0c:	00c9      	lsls	r1, r1, #3
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	18d3      	adds	r3, r2, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	3b30      	subs	r3, #48	@ 0x30
 8000c18:	484c      	ldr	r0, [pc, #304]	@ (8000d4c <main+0x374>)
 8000c1a:	183a      	adds	r2, r7, r0
 8000c1c:	6013      	str	r3, [r2, #0]

				  // Update the decimal value
				  decimal_value = (decimal_value << 1) | bit_value; // Left-shift and add the current bit
 8000c1e:	4c47      	ldr	r4, [pc, #284]	@ (8000d3c <main+0x364>)
 8000c20:	193b      	adds	r3, r7, r4
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	005a      	lsls	r2, r3, #1
 8000c26:	183b      	adds	r3, r7, r0
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	193a      	adds	r2, r7, r4
 8000c2e:	6013      	str	r3, [r2, #0]
			  for (int i = 0; i < 16; i++) { // the 16 bits when running
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	187a      	adds	r2, r7, r1
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	23a1      	movs	r3, #161	@ 0xa1
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	dddc      	ble.n	8000c00 <main+0x228>
			  }
			  image_leds[image][x3] = decimal_value;
 8000c46:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <main+0x364>)
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	b298      	uxth	r0, r3
 8000c4e:	4b40      	ldr	r3, [pc, #256]	@ (8000d50 <main+0x378>)
 8000c50:	22a2      	movs	r2, #162	@ 0xa2
 8000c52:	00d2      	lsls	r2, r2, #3
 8000c54:	18ba      	adds	r2, r7, r2
 8000c56:	6812      	ldr	r2, [r2, #0]
 8000c58:	0111      	lsls	r1, r2, #4
 8000c5a:	4c37      	ldr	r4, [pc, #220]	@ (8000d38 <main+0x360>)
 8000c5c:	193a      	adds	r2, r7, r4
 8000c5e:	6812      	ldr	r2, [r2, #0]
 8000c60:	188a      	adds	r2, r1, r2
 8000c62:	0052      	lsls	r2, r2, #1
 8000c64:	1c01      	adds	r1, r0, #0
 8000c66:	52d1      	strh	r1, [r2, r3]
			  x3 += 1;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	193a      	adds	r2, r7, r4
 8000c70:	6013      	str	r3, [r2, #0]
		  }
		  if (x3 > 15) {
 8000c72:	4a31      	ldr	r2, [pc, #196]	@ (8000d38 <main+0x360>)
 8000c74:	18bb      	adds	r3, r7, r2
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	dd09      	ble.n	8000c90 <main+0x2b8>
			  image += 1;
 8000c7c:	21a2      	movs	r1, #162	@ 0xa2
 8000c7e:	00c9      	lsls	r1, r1, #3
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	1879      	adds	r1, r7, r1
 8000c88:	600b      	str	r3, [r1, #0]
			  x3 = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	18ba      	adds	r2, r7, r2
 8000c8e:	6013      	str	r3, [r2, #0]
	  while (x < 1760) { //this states limit of how big the txt is
 8000c90:	23a3      	movs	r3, #163	@ 0xa3
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	23dc      	movs	r3, #220	@ 0xdc
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	db89      	blt.n	8000bb4 <main+0x1dc>
 8000ca0:	e009      	b.n	8000cb6 <main+0x2de>
		  }
	  }
  } else {
	  HAL_GPIO_WritePin(led_row_ports[15], led_row_pins[15], GPIO_PIN_RESET);
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <main+0x340>)
 8000ca4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d1c <main+0x344>)
 8000ca8:	8bdb      	ldrh	r3, [r3, #30]
 8000caa:	2200      	movs	r2, #0
 8000cac:	0019      	movs	r1, r3
 8000cae:	f001 fbdf 	bl	8002470 <HAL_GPIO_WritePin>
	  while (1);
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	e7fd      	b.n	8000cb2 <main+0x2da>
  }

  HAL_GPIO_WritePin(led_row_ports[4], led_row_pins[4], GPIO_PIN_RESET);
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <main+0x340>)
 8000cb8:	6918      	ldr	r0, [r3, #16]
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <main+0x344>)
 8000cbc:	891b      	ldrh	r3, [r3, #8]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	f001 fbd5 	bl	8002470 <HAL_GPIO_WritePin>

  f_close(&fil);
 8000cc6:	239c      	movs	r3, #156	@ 0x9c
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f007 fc1e 	bl	800850c <f_close>

  HAL_GPIO_WritePin(led_row_ports[5], led_row_pins[5], GPIO_PIN_RESET);
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <main+0x340>)
 8000cd2:	6958      	ldr	r0, [r3, #20]
 8000cd4:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <main+0x344>)
 8000cd6:	895b      	ldrh	r3, [r3, #10]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	0019      	movs	r1, r3
 8000cdc:	f001 fbc8 	bl	8002470 <HAL_GPIO_WritePin>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8000ce0:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <main+0x358>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f007 f806 	bl	8007cf8 <f_mount>

  HAL_GPIO_WritePin(led_row_ports[6], led_row_pins[6], GPIO_PIN_RESET);
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <main+0x340>)
 8000cee:	6998      	ldr	r0, [r3, #24]
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <main+0x344>)
 8000cf2:	899b      	ldrh	r3, [r3, #12]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	f001 fbba 	bl	8002470 <HAL_GPIO_WritePin>
  }
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cfc:	f007 fe2a 	bl	8008954 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000d00:	f7ff fc26 	bl	8000550 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d04:	f007 fe48 	bl	8008998 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	e7fd      	b.n	8000d08 <main+0x330>
 8000d0c:	fffffae0 	.word	0xfffffae0
 8000d10:	200009a0 	.word	0x200009a0
 8000d14:	0000051f 	.word	0x0000051f
 8000d18:	20000060 	.word	0x20000060
 8000d1c:	200000a0 	.word	0x200000a0
 8000d20:	200008ee 	.word	0x200008ee
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000040 	.word	0x20000040
 8000d2c:	00000507 	.word	0x00000507
 8000d30:	0800b098 	.word	0x0800b098
 8000d34:	0800b09c 	.word	0x0800b09c
 8000d38:	00000514 	.word	0x00000514
 8000d3c:	0000050c 	.word	0x0000050c
 8000d40:	0800b0a8 	.word	0x0800b0a8
 8000d44:	80000001 	.word	0x80000001
 8000d48:	fffffb60 	.word	0xfffffb60
 8000d4c:	000004fc 	.word	0x000004fc
 8000d50:	200001b4 	.word	0x200001b4

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b590      	push	{r4, r7, lr}
 8000d56:	b093      	sub	sp, #76	@ 0x4c
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	2414      	movs	r4, #20
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2334      	movs	r3, #52	@ 0x34
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f00a f893 	bl	800ae90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2310      	movs	r3, #16
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f00a f88c 	bl	800ae90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f002 fb2f 	bl	80033e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2201      	movs	r2, #1
 8000d86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	0252      	lsls	r2, r2, #9
 8000d8e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f002 fb6d 	bl	8003478 <HAL_RCC_OscConfig>
 8000d9e:	1e03      	subs	r3, r0, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000da2:	f000 f851 	bl	8000e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2207      	movs	r2, #7
 8000daa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2201      	movs	r2, #1
 8000db0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f002 fe68 	bl	8003a98 <HAL_RCC_ClockConfig>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000dcc:	f000 f83c 	bl	8000e48 <Error_Handler>
  }
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b013      	add	sp, #76	@ 0x4c
 8000dd6:	bd90      	pop	{r4, r7, pc}

08000dd8 <HAL_I2C_ErrorCallback>:
    	HAL_I2C_Master_Receive_IT(&hi2c1, 0x70, rx_buffer, BUFFER_SIZE);
    }
}

// Error callback
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	@ (8000df8 <HAL_I2C_ErrorCallback+0x20>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_I2C_ErrorCallback+0x16>
        // Handle I2C error
        Error_Handler();
 8000dea:	f000 f82d 	bl	8000e48 <Error_Handler>
    }
}
 8000dee:	46c0      	nop			@ (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b002      	add	sp, #8
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	40005400 	.word	0x40005400

08000dfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim->Instance == TIM3) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0c      	ldr	r2, [pc, #48]	@ (8000e3c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d10a      	bne.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x28>
	current_frame = (current_frame + 1) % 55;
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	2137      	movs	r1, #55	@ 0x37
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff fae6 	bl	80003e8 <__aeabi_idivmod>
 8000e1c:	000b      	movs	r3, r1
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e22:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a06      	ldr	r2, [pc, #24]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x36>
    HAL_IncTick();
 8000e2e:	f000 fbd9 	bl	80015e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	40000400 	.word	0x40000400
 8000e40:	200008ec 	.word	0x200008ec
 8000e44:	40001000 	.word	0x40001000

08000e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4c:	b672      	cpsid	i
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	e7fd      	b.n	8000e50 <Error_Handler+0x8>

08000e54 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ecc <MX_SPI2_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e60:	2282      	movs	r2, #130	@ 0x82
 8000e62:	0052      	lsls	r2, r2, #1
 8000e64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e6e:	22e0      	movs	r2, #224	@ 0xe0
 8000e70:	00d2      	lsls	r2, r2, #3
 8000e72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e74:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e82:	2280      	movs	r2, #128	@ 0x80
 8000e84:	0092      	lsls	r2, r2, #2
 8000e86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e8a:	2210      	movs	r2, #16
 8000e8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000ea2:	2207      	movs	r2, #7
 8000ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000eae:	2208      	movs	r2, #8
 8000eb0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eb2:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <MX_SPI2_Init+0x74>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f003 f8f7 	bl	80040a8 <HAL_SPI_Init>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ebe:	f7ff ffc3 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200008f0 	.word	0x200008f0
 8000ecc:	40003800 	.word	0x40003800

08000ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b08b      	sub	sp, #44	@ 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	2414      	movs	r4, #20
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f009 ffd4 	bl	800ae90 <memset>
  if(spiHandle->Instance==SPI2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a30      	ldr	r2, [pc, #192]	@ (8000fb0 <HAL_SPI_MspInit+0xe0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d159      	bne.n	8000fa6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ef2:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000ef4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	01c9      	lsls	r1, r1, #7
 8000efc:	430a      	orrs	r2, r1
 8000efe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f00:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000f02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f04:	2380      	movs	r3, #128	@ 0x80
 8000f06:	01db      	lsls	r3, r3, #7
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f12:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000f14:	2104      	movs	r1, #4
 8000f16:	430a      	orrs	r2, r1
 8000f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f1e:	2204      	movs	r2, #4
 8000f20:	4013      	ands	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f2a:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f32:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <HAL_SPI_MspInit+0xe4>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	220c      	movs	r2, #12
 8000f42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	193b      	adds	r3, r7, r4
 8000f46:	2202      	movs	r2, #2
 8000f48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4a:	193b      	adds	r3, r7, r4
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	2203      	movs	r2, #3
 8000f54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	2201      	movs	r2, #1
 8000f5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <HAL_SPI_MspInit+0xe8>)
 8000f60:	0019      	movs	r1, r3
 8000f62:	0010      	movs	r0, r2
 8000f64:	f001 f920 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f68:	0021      	movs	r1, r4
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2280      	movs	r2, #128	@ 0x80
 8000f6e:	0192      	lsls	r2, r2, #6
 8000f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2202      	movs	r2, #2
 8000f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2203      	movs	r2, #3
 8000f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fbc <HAL_SPI_MspInit+0xec>)
 8000f8e:	0019      	movs	r1, r3
 8000f90:	0010      	movs	r0, r2
 8000f92:	f001 f909 	bl	80021a8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2103      	movs	r1, #3
 8000f9a:	201a      	movs	r0, #26
 8000f9c:	f001 f868 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000fa0:	201a      	movs	r0, #26
 8000fa2:	f001 f87a 	bl	800209a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b00b      	add	sp, #44	@ 0x2c
 8000fac:	bd90      	pop	{r4, r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	40003800 	.word	0x40003800
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	50000800 	.word	0x50000800
 8000fbc:	50000400 	.word	0x50000400

08000fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_MspInit+0x50>)
 8000fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <HAL_MspInit+0x50>)
 8000fcc:	2101      	movs	r1, #1
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_MspInit+0x50>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_MspInit+0x50>)
 8000fe0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <HAL_MspInit+0x50>)
 8000fe4:	2180      	movs	r1, #128	@ 0x80
 8000fe6:	0549      	lsls	r1, r1, #21
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_MspInit+0x50>)
 8000fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	055b      	lsls	r3, r3, #21
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	2200      	movs	r2, #0
 8001000:	2103      	movs	r1, #3
 8001002:	0018      	movs	r0, r3
 8001004:	f001 f834 	bl	8002070 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b002      	add	sp, #8
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	b08c      	sub	sp, #48	@ 0x30
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800101c:	232b      	movs	r3, #43	@ 0x2b
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001024:	4b37      	ldr	r3, [pc, #220]	@ (8001104 <HAL_InitTick+0xf0>)
 8001026:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001028:	4b36      	ldr	r3, [pc, #216]	@ (8001104 <HAL_InitTick+0xf0>)
 800102a:	2110      	movs	r1, #16
 800102c:	430a      	orrs	r2, r1
 800102e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001030:	4b34      	ldr	r3, [pc, #208]	@ (8001104 <HAL_InitTick+0xf0>)
 8001032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001034:	2210      	movs	r2, #16
 8001036:	4013      	ands	r3, r2
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800103c:	230c      	movs	r3, #12
 800103e:	18fa      	adds	r2, r7, r3
 8001040:	2410      	movs	r4, #16
 8001042:	193b      	adds	r3, r7, r4
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f002 fed0 	bl	8003dec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800104c:	193b      	adds	r3, r7, r4
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	2b00      	cmp	r3, #0
 8001056:	d104      	bne.n	8001062 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001058:	f002 feb2 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 800105c:	0003      	movs	r3, r0
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001060:	e004      	b.n	800106c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001062:	f002 fead 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8001066:	0003      	movs	r3, r0
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800106c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800106e:	4926      	ldr	r1, [pc, #152]	@ (8001108 <HAL_InitTick+0xf4>)
 8001070:	0018      	movs	r0, r3
 8001072:	f7ff f849 	bl	8000108 <__udivsi3>
 8001076:	0003      	movs	r3, r0
 8001078:	3b01      	subs	r3, #1
 800107a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <HAL_InitTick+0xf8>)
 800107e:	4a24      	ldr	r2, [pc, #144]	@ (8001110 <HAL_InitTick+0xfc>)
 8001080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001082:	4b22      	ldr	r3, [pc, #136]	@ (800110c <HAL_InitTick+0xf8>)
 8001084:	4a23      	ldr	r2, [pc, #140]	@ (8001114 <HAL_InitTick+0x100>)
 8001086:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001088:	4b20      	ldr	r3, [pc, #128]	@ (800110c <HAL_InitTick+0xf8>)
 800108a:	6a3a      	ldr	r2, [r7, #32]
 800108c:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 800108e:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <HAL_InitTick+0xf8>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <HAL_InitTick+0xf8>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <HAL_InitTick+0xf8>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80010a0:	252b      	movs	r5, #43	@ 0x2b
 80010a2:	197c      	adds	r4, r7, r5
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <HAL_InitTick+0xf8>)
 80010a6:	0018      	movs	r0, r3
 80010a8:	f003 f9be 	bl	8004428 <HAL_TIM_Base_Init>
 80010ac:	0003      	movs	r3, r0
 80010ae:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80010b0:	197b      	adds	r3, r7, r5
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d11e      	bne.n	80010f6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010b8:	197c      	adds	r4, r7, r5
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <HAL_InitTick+0xf8>)
 80010bc:	0018      	movs	r0, r3
 80010be:	f003 fa0b 	bl	80044d8 <HAL_TIM_Base_Start_IT>
 80010c2:	0003      	movs	r3, r0
 80010c4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80010c6:	197b      	adds	r3, r7, r5
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d113      	bne.n	80010f6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80010ce:	2011      	movs	r0, #17
 80010d0:	f000 ffe3 	bl	800209a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d809      	bhi.n	80010ee <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	0019      	movs	r1, r3
 80010e0:	2011      	movs	r0, #17
 80010e2:	f000 ffc5 	bl	8002070 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_InitTick+0x104>)
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	e003      	b.n	80010f6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80010ee:	232b      	movs	r3, #43	@ 0x2b
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80010f6:	232b      	movs	r3, #43	@ 0x2b
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b00c      	add	sp, #48	@ 0x30
 8001102:	bdb0      	pop	{r4, r5, r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	000f4240 	.word	0x000f4240
 800110c:	20000954 	.word	0x20000954
 8001110:	40001000 	.word	0x40001000
 8001114:	000003e7 	.word	0x000003e7
 8001118:	200000c4 	.word	0x200000c4

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <TIM3_IRQHandler+0x14>)
 8001132:	0018      	movs	r0, r3
 8001134:	f003 fa86 	bl	8004644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	200009a0 	.word	0x200009a0

08001144 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <TIM6_IRQHandler+0x14>)
 800114a:	0018      	movs	r0, r3
 800114c:	f003 fa7a 	bl	8004644 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001150:	46c0      	nop			@ (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	20000954 	.word	0x20000954

0800115c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <I2C1_IRQHandler+0x2c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	699a      	ldr	r2, [r3, #24]
 8001166:	23e0      	movs	r3, #224	@ 0xe0
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	4013      	ands	r3, r2
 800116c:	d004      	beq.n	8001178 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <I2C1_IRQHandler+0x2c>)
 8001170:	0018      	movs	r0, r3
 8001172:	f001 fa5b 	bl	800262c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001176:	e003      	b.n	8001180 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001178:	4b03      	ldr	r3, [pc, #12]	@ (8001188 <I2C1_IRQHandler+0x2c>)
 800117a:	0018      	movs	r0, r3
 800117c:	f001 fa3c 	bl	80025f8 <HAL_I2C_EV_IRQHandler>
}
 8001180:	46c0      	nop			@ (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			@ (mov r8, r8)
 8001188:	20000898 	.word	0x20000898

0800118c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <SPI2_IRQHandler+0x14>)
 8001192:	0018      	movs	r0, r3
 8001194:	f003 f840 	bl	8004218 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	200008f0 	.word	0x200008f0

080011a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	2310      	movs	r3, #16
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	0018      	movs	r0, r3
 80011bc:	2310      	movs	r3, #16
 80011be:	001a      	movs	r2, r3
 80011c0:	2100      	movs	r1, #0
 80011c2:	f009 fe65 	bl	800ae90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	0018      	movs	r0, r3
 80011ca:	230c      	movs	r3, #12
 80011cc:	001a      	movs	r2, r3
 80011ce:	2100      	movs	r1, #0
 80011d0:	f009 fe5e 	bl	800ae90 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_TIM3_Init+0xa0>)
 80011d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001254 <MX_TIM3_Init+0xa4>)
 80011d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <MX_TIM3_Init+0xa0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_TIM3_Init+0xa0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 36360-1;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_TIM3_Init+0xa0>)
 80011e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <MX_TIM3_Init+0xa8>)
 80011ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_TIM3_Init+0xa0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_TIM3_Init+0xa0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_TIM3_Init+0xa0>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f003 f914 	bl	8004428 <HAL_TIM_Base_Init>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001204:	f7ff fe20 	bl	8000e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	2110      	movs	r1, #16
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2280      	movs	r2, #128	@ 0x80
 800120e:	0152      	lsls	r2, r2, #5
 8001210:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001212:	187a      	adds	r2, r7, r1
 8001214:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_TIM3_Init+0xa0>)
 8001216:	0011      	movs	r1, r2
 8001218:	0018      	movs	r0, r3
 800121a:	f003 fc1b 	bl	8004a54 <HAL_TIM_ConfigClockSource>
 800121e:	1e03      	subs	r3, r0, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001222:	f7ff fe11 	bl	8000e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2220      	movs	r2, #32
 800122a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001232:	1d3a      	adds	r2, r7, #4
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_TIM3_Init+0xa0>)
 8001236:	0011      	movs	r1, r2
 8001238:	0018      	movs	r0, r3
 800123a:	f004 f8e5 	bl	8005408 <HAL_TIMEx_MasterConfigSynchronization>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001242:	f7ff fe01 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b008      	add	sp, #32
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	200009a0 	.word	0x200009a0
 8001254:	40000400 	.word	0x40000400
 8001258:	00008e07 	.word	0x00008e07

0800125c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	0018      	movs	r0, r3
 8001266:	231c      	movs	r3, #28
 8001268:	001a      	movs	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	f009 fe10 	bl	800ae90 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <MX_TIM14_Init+0x94>)
 8001272:	4a20      	ldr	r2, [pc, #128]	@ (80012f4 <MX_TIM14_Init+0x98>)
 8001274:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001276:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <MX_TIM14_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <MX_TIM14_Init+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001282:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_TIM14_Init+0x94>)
 8001284:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <MX_TIM14_Init+0x9c>)
 8001286:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <MX_TIM14_Init+0x94>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128e:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <MX_TIM14_Init+0x94>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <MX_TIM14_Init+0x94>)
 8001296:	0018      	movs	r0, r3
 8001298:	f003 f8c6 	bl	8004428 <HAL_TIM_Base_Init>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80012a0:	f7ff fdd2 	bl	8000e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_TIM14_Init+0x94>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 f96c 	bl	8004584 <HAL_TIM_PWM_Init>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80012b0:	f7ff fdca 	bl	8000e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2260      	movs	r2, #96	@ 0x60
 80012b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	1d39      	adds	r1, r7, #4
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <MX_TIM14_Init+0x94>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	0018      	movs	r0, r3
 80012d4:	f003 fabe 	bl	8004854 <HAL_TIM_PWM_ConfigChannel>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80012dc:	f7ff fdb4 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80012e0:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <MX_TIM14_Init+0x94>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 f846 	bl	8001374 <HAL_TIM_MspPostInit>

}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b008      	add	sp, #32
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200009ec 	.word	0x200009ec
 80012f4:	40002000 	.word	0x40002000
 80012f8:	0000ffff 	.word	0x0000ffff

080012fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a17      	ldr	r2, [pc, #92]	@ (8001368 <HAL_TIM_Base_MspInit+0x6c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d114      	bne.n	8001338 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <HAL_TIM_Base_MspInit+0x70>)
 8001310:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <HAL_TIM_Base_MspInit+0x70>)
 8001314:	2102      	movs	r1, #2
 8001316:	430a      	orrs	r2, r1
 8001318:	63da      	str	r2, [r3, #60]	@ 0x3c
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HAL_TIM_Base_MspInit+0x70>)
 800131c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131e:	2202      	movs	r2, #2
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2103      	movs	r1, #3
 800132a:	2010      	movs	r0, #16
 800132c:	f000 fea0 	bl	8002070 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001330:	2010      	movs	r0, #16
 8001332:	f000 feb2 	bl	800209a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001336:	e012      	b.n	800135e <HAL_TIM_Base_MspInit+0x62>
  else if(tim_baseHandle->Instance==TIM14)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0c      	ldr	r2, [pc, #48]	@ (8001370 <HAL_TIM_Base_MspInit+0x74>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10d      	bne.n	800135e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_TIM_Base_MspInit+0x70>)
 8001344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001346:	4b09      	ldr	r3, [pc, #36]	@ (800136c <HAL_TIM_Base_MspInit+0x70>)
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	0209      	lsls	r1, r1, #8
 800134c:	430a      	orrs	r2, r1
 800134e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <HAL_TIM_Base_MspInit+0x70>)
 8001352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	40000400 	.word	0x40000400
 800136c:	40021000 	.word	0x40021000
 8001370:	40002000 	.word	0x40002000

08001374 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	240c      	movs	r4, #12
 800137e:	193b      	adds	r3, r7, r4
 8001380:	0018      	movs	r0, r3
 8001382:	2314      	movs	r3, #20
 8001384:	001a      	movs	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	f009 fd82 	bl	800ae90 <memset>
  if(timHandle->Instance==TIM14)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <HAL_TIM_MspPostInit+0x70>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d122      	bne.n	80013dc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <HAL_TIM_MspPostInit+0x74>)
 8001398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800139a:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <HAL_TIM_MspPostInit+0x74>)
 800139c:	2104      	movs	r1, #4
 800139e:	430a      	orrs	r2, r1
 80013a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <HAL_TIM_MspPostInit+0x74>)
 80013a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a6:	2204      	movs	r2, #4
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	2280      	movs	r2, #128	@ 0x80
 80013b2:	0152      	lsls	r2, r2, #5
 80013b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	0021      	movs	r1, r4
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2202      	movs	r2, #2
 80013bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2202      	movs	r2, #2
 80013ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	4a06      	ldr	r2, [pc, #24]	@ (80013ec <HAL_TIM_MspPostInit+0x78>)
 80013d4:	0019      	movs	r1, r3
 80013d6:	0010      	movs	r0, r2
 80013d8:	f000 fee6 	bl	80021a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 80013dc:	46c0      	nop			@ (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b009      	add	sp, #36	@ 0x24
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	40002000 	.word	0x40002000
 80013e8:	40021000 	.word	0x40021000
 80013ec:	50000800 	.word	0x50000800

080013f0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013f4:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 80013f6:	4a24      	ldr	r2, [pc, #144]	@ (8001488 <MX_USART1_UART_Init+0x98>)
 80013f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013fa:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 80013fc:	22e1      	movs	r2, #225	@ 0xe1
 80013fe:	0252      	lsls	r2, r2, #9
 8001400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001408:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001414:	4b1b      	ldr	r3, [pc, #108]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 8001416:	220c      	movs	r2, #12
 8001418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141a:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001426:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001432:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 8001434:	2200      	movs	r2, #0
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001438:	4b12      	ldr	r3, [pc, #72]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 800143a:	0018      	movs	r0, r3
 800143c:	f004 f864 	bl	8005508 <HAL_UART_Init>
 8001440:	1e03      	subs	r3, r0, #0
 8001442:	d001      	beq.n	8001448 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001444:	f7ff fd00 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001448:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 800144a:	2100      	movs	r1, #0
 800144c:	0018      	movs	r0, r3
 800144e:	f004 fcc3 	bl	8005dd8 <HAL_UARTEx_SetTxFifoThreshold>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d001      	beq.n	800145a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001456:	f7ff fcf7 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 800145c:	2100      	movs	r1, #0
 800145e:	0018      	movs	r0, r3
 8001460:	f004 fcfa 	bl	8005e58 <HAL_UARTEx_SetRxFifoThreshold>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d001      	beq.n	800146c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001468:	f7ff fcee 	bl	8000e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800146c:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <MX_USART1_UART_Init+0x94>)
 800146e:	0018      	movs	r0, r3
 8001470:	f004 fc78 	bl	8005d64 <HAL_UARTEx_DisableFifoMode>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d001      	beq.n	800147c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001478:	f7ff fce6 	bl	8000e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800147c:	46c0      	nop			@ (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	20000a38 	.word	0x20000a38
 8001488:	40013800 	.word	0x40013800

0800148c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b091      	sub	sp, #68	@ 0x44
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	232c      	movs	r3, #44	@ 0x2c
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	0018      	movs	r0, r3
 800149a:	2314      	movs	r3, #20
 800149c:	001a      	movs	r2, r3
 800149e:	2100      	movs	r1, #0
 80014a0:	f009 fcf6 	bl	800ae90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	2410      	movs	r4, #16
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	0018      	movs	r0, r3
 80014aa:	231c      	movs	r3, #28
 80014ac:	001a      	movs	r2, r3
 80014ae:	2100      	movs	r1, #0
 80014b0:	f009 fcee 	bl	800ae90 <memset>
  if(uartHandle->Instance==USART1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a22      	ldr	r2, [pc, #136]	@ (8001544 <HAL_UART_MspInit+0xb8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d13d      	bne.n	800153a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ca:	193b      	adds	r3, r7, r4
 80014cc:	0018      	movs	r0, r3
 80014ce:	f002 fcb7 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d001      	beq.n	80014da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014d6:	f7ff fcb7 	bl	8000e48 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014da:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014e0:	2180      	movs	r1, #128	@ 0x80
 80014e2:	01c9      	lsls	r1, r1, #7
 80014e4:	430a      	orrs	r2, r1
 80014e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80014ec:	2380      	movs	r3, #128	@ 0x80
 80014ee:	01db      	lsls	r3, r3, #7
 80014f0:	4013      	ands	r3, r2
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014fa:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 80014fc:	2104      	movs	r1, #4
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	@ 0x34
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_UART_MspInit+0xbc>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001506:	2204      	movs	r2, #4
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800150e:	212c      	movs	r1, #44	@ 0x2c
 8001510:	187b      	adds	r3, r7, r1
 8001512:	2230      	movs	r2, #48	@ 0x30
 8001514:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2202      	movs	r2, #2
 800151a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2201      	movs	r2, #1
 800152c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800152e:	187b      	adds	r3, r7, r1
 8001530:	4a06      	ldr	r2, [pc, #24]	@ (800154c <HAL_UART_MspInit+0xc0>)
 8001532:	0019      	movs	r1, r3
 8001534:	0010      	movs	r0, r2
 8001536:	f000 fe37 	bl	80021a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b011      	add	sp, #68	@ 0x44
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	40013800 	.word	0x40013800
 8001548:	40021000 	.word	0x40021000
 800154c:	50000800 	.word	0x50000800

08001550 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001550:	480d      	ldr	r0, [pc, #52]	@ (8001588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001552:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001554:	f7ff fe26 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <LoopForever+0x6>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	@ (8001590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <LoopForever+0xe>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	@ (8001598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	@ (800159c <LoopForever+0x16>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800157e:	f009 fcef 	bl	800af60 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001582:	f7ff fa29 	bl	80009d8 <main>

08001586 <LoopForever>:

LoopForever:
  b LoopForever
 8001586:	e7fe      	b.n	8001586 <LoopForever>
  ldr   r0, =_estack
 8001588:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8001594:	0800b2cc 	.word	0x0800b2cc
  ldr r2, =_sbss
 8001598:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 800159c:	2000262c 	.word	0x2000262c

080015a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <HAL_Init+0x3c>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_Init+0x3c>)
 80015b6:	2180      	movs	r1, #128	@ 0x80
 80015b8:	0049      	lsls	r1, r1, #1
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015be:	2002      	movs	r0, #2
 80015c0:	f7ff fd28 	bl	8001014 <HAL_InitTick>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e001      	b.n	80015d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80015d0:	f7ff fcf6 	bl	8000fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	001a      	movs	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	18d2      	adds	r2, r2, r3
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_IncTick+0x20>)
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	46c0      	nop			@ (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			@ (mov r8, r8)
 8001600:	200000c8 	.word	0x200000c8
 8001604:	20000acc 	.word	0x20000acc

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	@ (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	20000acc 	.word	0x20000acc

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fff0 	bl	8001608 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	001a      	movs	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	189b      	adds	r3, r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	f7ff ffe0 	bl	8001608 <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	46c0      	nop			@ (mov r8, r8)
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b004      	add	sp, #16
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	200000c8 	.word	0x200000c8

08001664 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001674:	401a      	ands	r2, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	46bd      	mov	sp, r7
 8001682:	b002      	add	sp, #8
 8001684:	bd80      	pop	{r7, pc}
 8001686:	46c0      	nop			@ (mov r8, r8)
 8001688:	fe3fffff 	.word	0xfe3fffff

0800168c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	23e0      	movs	r3, #224	@ 0xe0
 800169a:	045b      	lsls	r3, r3, #17
 800169c:	4013      	ands	r3, r2
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	2104      	movs	r1, #4
 80016ba:	400a      	ands	r2, r1
 80016bc:	2107      	movs	r1, #7
 80016be:	4091      	lsls	r1, r2
 80016c0:	000a      	movs	r2, r1
 80016c2:	43d2      	mvns	r2, r2
 80016c4:	401a      	ands	r2, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2104      	movs	r1, #4
 80016ca:	400b      	ands	r3, r1
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4099      	lsls	r1, r3
 80016d0:	000b      	movs	r3, r1
 80016d2:	431a      	orrs	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b004      	add	sp, #16
 80016de:	bd80      	pop	{r7, pc}

080016e0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	2104      	movs	r1, #4
 80016f2:	400a      	ands	r2, r1
 80016f4:	2107      	movs	r1, #7
 80016f6:	4091      	lsls	r1, r2
 80016f8:	000a      	movs	r2, r1
 80016fa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2104      	movs	r1, #4
 8001700:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001702:	40da      	lsrs	r2, r3
 8001704:	0013      	movs	r3, r2
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}

0800170e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	211f      	movs	r1, #31
 8001722:	400a      	ands	r2, r1
 8001724:	210f      	movs	r1, #15
 8001726:	4091      	lsls	r1, r2
 8001728:	000a      	movs	r2, r1
 800172a:	43d2      	mvns	r2, r2
 800172c:	401a      	ands	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0e9b      	lsrs	r3, r3, #26
 8001732:	210f      	movs	r1, #15
 8001734:	4019      	ands	r1, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	201f      	movs	r0, #31
 800173a:	4003      	ands	r3, r0
 800173c:	4099      	lsls	r1, r3
 800173e:	000b      	movs	r3, r1
 8001740:	431a      	orrs	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b004      	add	sp, #16
 800174c:	bd80      	pop	{r7, pc}

0800174e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	035b      	lsls	r3, r3, #13
 8001760:	0b5b      	lsrs	r3, r3, #13
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001768:	46c0      	nop			@ (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	0352      	lsls	r2, r2, #13
 8001782:	0b52      	lsrs	r2, r2, #13
 8001784:	43d2      	mvns	r2, r2
 8001786:	401a      	ands	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800178c:	46c0      	nop			@ (mov r8, r8)
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	0212      	lsls	r2, r2, #8
 80017a8:	43d2      	mvns	r2, r2
 80017aa:	401a      	ands	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	400b      	ands	r3, r1
 80017b4:	4904      	ldr	r1, [pc, #16]	@ (80017c8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80017b6:	400b      	ands	r3, r1
 80017b8:	431a      	orrs	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b004      	add	sp, #16
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	07ffff00 	.word	0x07ffff00

080017cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80017da:	4013      	ands	r3, r2
 80017dc:	2280      	movs	r2, #128	@ 0x80
 80017de:	0552      	lsls	r2, r2, #21
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			@ (mov r8, r8)
 80017f0:	6fffffe8 	.word	0x6fffffe8

080017f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	055b      	lsls	r3, r3, #21
 8001804:	401a      	ands	r2, r3
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	055b      	lsls	r3, r3, #21
 800180a:	429a      	cmp	r2, r3
 800180c:	d101      	bne.n	8001812 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001812:	2300      	movs	r3, #0
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b002      	add	sp, #8
 800181a:	bd80      	pop	{r7, pc}

0800181c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2201      	movs	r2, #1
 800182a:	4013      	ands	r3, r2
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <LL_ADC_IsEnabled+0x18>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_ADC_IsEnabled+0x1a>
 8001834:	2300      	movs	r3, #0
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}

0800183e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2204      	movs	r2, #4
 800184c:	4013      	ands	r3, r2
 800184e:	2b04      	cmp	r3, #4
 8001850:	d101      	bne.n	8001856 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001868:	231f      	movs	r3, #31
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e17f      	b.n	8001b86 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10a      	bne.n	80018a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	0018      	movs	r0, r3
 8001892:	f7fe fe19 	bl	80004c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2254      	movs	r2, #84	@ 0x54
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff ffa3 	bl	80017f4 <LL_ADC_IsInternalRegulatorEnabled>
 80018ae:	1e03      	subs	r3, r0, #0
 80018b0:	d115      	bne.n	80018de <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff ff88 	bl	80017cc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018bc:	4bb4      	ldr	r3, [pc, #720]	@ (8001b90 <HAL_ADC_Init+0x330>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	49b4      	ldr	r1, [pc, #720]	@ (8001b94 <HAL_ADC_Init+0x334>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7fe fc20 	bl	8000108 <__udivsi3>
 80018c8:	0003      	movs	r3, r0
 80018ca:	3301      	adds	r3, #1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018d0:	e002      	b.n	80018d8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff ff86 	bl	80017f4 <LL_ADC_IsInternalRegulatorEnabled>
 80018e8:	1e03      	subs	r3, r0, #0
 80018ea:	d10f      	bne.n	800190c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f0:	2210      	movs	r2, #16
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fc:	2201      	movs	r2, #1
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001904:	231f      	movs	r3, #31
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff ff94 	bl	800183e <LL_ADC_REG_IsConversionOngoing>
 8001916:	0003      	movs	r3, r0
 8001918:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191e:	2210      	movs	r2, #16
 8001920:	4013      	ands	r3, r2
 8001922:	d000      	beq.n	8001926 <HAL_ADC_Init+0xc6>
 8001924:	e122      	b.n	8001b6c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d000      	beq.n	800192e <HAL_ADC_Init+0xce>
 800192c:	e11e      	b.n	8001b6c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	4a99      	ldr	r2, [pc, #612]	@ (8001b98 <HAL_ADC_Init+0x338>)
 8001934:	4013      	ands	r3, r2
 8001936:	2202      	movs	r2, #2
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff ff6a 	bl	800181c <LL_ADC_IsEnabled>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d000      	beq.n	800194e <HAL_ADC_Init+0xee>
 800194c:	e0ad      	b.n	8001aaa <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7e1b      	ldrb	r3, [r3, #24]
 8001956:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001958:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7e5b      	ldrb	r3, [r3, #25]
 800195e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001960:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7e9b      	ldrb	r3, [r3, #26]
 8001966:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001968:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_ADC_Init+0x118>
 8001972:	2380      	movs	r3, #128	@ 0x80
 8001974:	015b      	lsls	r3, r3, #5
 8001976:	e000      	b.n	800197a <HAL_ADC_Init+0x11a>
 8001978:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800197a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001980:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	da04      	bge.n	8001994 <HAL_ADC_Init+0x134>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	085b      	lsrs	r3, r3, #1
 8001992:	e001      	b.n	8001998 <HAL_ADC_Init+0x138>
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001998:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	212c      	movs	r1, #44	@ 0x2c
 800199e:	5c5b      	ldrb	r3, [r3, r1]
 80019a0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019a2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2220      	movs	r2, #32
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d115      	bne.n	80019e0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7e9b      	ldrb	r3, [r3, #26]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	0252      	lsls	r2, r2, #9
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	e00b      	b.n	80019e0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	2220      	movs	r2, #32
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d8:	2201      	movs	r2, #1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019ec:	23e0      	movs	r3, #224	@ 0xe0
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019f6:	4313      	orrs	r3, r2
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4a65      	ldr	r2, [pc, #404]	@ (8001b9c <HAL_ADC_Init+0x33c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	0019      	movs	r1, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	0f9b      	lsrs	r3, r3, #30
 8001a1a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a20:	4313      	orrs	r3, r2
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	223c      	movs	r2, #60	@ 0x3c
 8001a2c:	5c9b      	ldrb	r3, [r3, r2]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d111      	bne.n	8001a56 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	0f9b      	lsrs	r3, r3, #30
 8001a38:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001a3e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001a44:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001a4a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	2201      	movs	r2, #1
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	4a50      	ldr	r2, [pc, #320]	@ (8001ba0 <HAL_ADC_Init+0x340>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	23c0      	movs	r3, #192	@ 0xc0
 8001a72:	061b      	lsls	r3, r3, #24
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d018      	beq.n	8001aaa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	05db      	lsls	r3, r3, #23
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d012      	beq.n	8001aaa <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d00c      	beq.n	8001aaa <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001a90:	4b44      	ldr	r3, [pc, #272]	@ (8001ba4 <HAL_ADC_Init+0x344>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a44      	ldr	r2, [pc, #272]	@ (8001ba8 <HAL_ADC_Init+0x348>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	23f0      	movs	r3, #240	@ 0xf0
 8001aa0:	039b      	lsls	r3, r3, #14
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba4 <HAL_ADC_Init+0x344>)
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6818      	ldr	r0, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab2:	001a      	movs	r2, r3
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	f7ff fdf6 	bl	80016a6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ac2:	493a      	ldr	r1, [pc, #232]	@ (8001bac <HAL_ADC_Init+0x34c>)
 8001ac4:	001a      	movs	r2, r3
 8001ac6:	f7ff fdee 	bl	80016a6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2110      	movs	r1, #16
 8001ade:	4249      	negs	r1, r1
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ae4:	e018      	b.n	8001b18 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691a      	ldr	r2, [r3, #16]
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	039b      	lsls	r3, r3, #14
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d112      	bne.n	8001b18 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	221c      	movs	r2, #28
 8001b02:	4013      	ands	r3, r2
 8001b04:	2210      	movs	r2, #16
 8001b06:	4252      	negs	r2, r2
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff fdde 	bl	80016e0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001b24:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d10b      	bne.n	8001b46 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b38:	2203      	movs	r2, #3
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b44:	e01c      	b.n	8001b80 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	2212      	movs	r2, #18
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	2210      	movs	r2, #16
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001b62:	231f      	movs	r3, #31
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001b6a:	e009      	b.n	8001b80 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	2210      	movs	r2, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b78:	231f      	movs	r3, #31
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001b80:	231f      	movs	r3, #31
 8001b82:	18fb      	adds	r3, r7, r3
 8001b84:	781b      	ldrb	r3, [r3, #0]
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b008      	add	sp, #32
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	200000c0 	.word	0x200000c0
 8001b94:	00030d40 	.word	0x00030d40
 8001b98:	fffffefd 	.word	0xfffffefd
 8001b9c:	ffde0201 	.word	0xffde0201
 8001ba0:	1ffffc02 	.word	0x1ffffc02
 8001ba4:	40012708 	.word	0x40012708
 8001ba8:	ffc3ffff 	.word	0xffc3ffff
 8001bac:	07ffff04 	.word	0x07ffff04

08001bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bba:	2317      	movs	r3, #23
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2254      	movs	r2, #84	@ 0x54
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x24>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e1c0      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x3a6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2254      	movs	r2, #84	@ 0x54
 8001bd8:	2101      	movs	r1, #1
 8001bda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff fe2c 	bl	800183e <LL_ADC_REG_IsConversionOngoing>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d000      	beq.n	8001bec <HAL_ADC_ConfigChannel+0x3c>
 8001bea:	e1a3      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d100      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x46>
 8001bf4:	e143      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d004      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c06:	4ac1      	ldr	r2, [pc, #772]	@ (8001f0c <HAL_ADC_ConfigChannel+0x35c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d108      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0019      	movs	r1, r3
 8001c16:	0010      	movs	r0, r2
 8001c18:	f7ff fd99 	bl	800174e <LL_ADC_REG_SetSequencerChAdd>
 8001c1c:	e0c9      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	211f      	movs	r1, #31
 8001c28:	400b      	ands	r3, r1
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	4099      	lsls	r1, r3
 8001c2e:	000b      	movs	r3, r1
 8001c30:	43db      	mvns	r3, r3
 8001c32:	4013      	ands	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	035b      	lsls	r3, r3, #13
 8001c3c:	0b5b      	lsrs	r3, r3, #13
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x9c>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0e9b      	lsrs	r3, r3, #26
 8001c46:	221f      	movs	r2, #31
 8001c48:	4013      	ands	r3, r2
 8001c4a:	e098      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2201      	movs	r2, #1
 8001c52:	4013      	ands	r3, r2
 8001c54:	d000      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0xa8>
 8001c56:	e091      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x1cc>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d000      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0xb4>
 8001c62:	e089      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x1c8>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d000      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0xc0>
 8001c6e:	e081      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x1c4>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2208      	movs	r2, #8
 8001c76:	4013      	ands	r3, r2
 8001c78:	d000      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0xcc>
 8001c7a:	e079      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x1c0>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2210      	movs	r2, #16
 8001c82:	4013      	ands	r3, r2
 8001c84:	d000      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0xd8>
 8001c86:	e071      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1bc>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d000      	beq.n	8001c94 <HAL_ADC_ConfigChannel+0xe4>
 8001c92:	e069      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x1b8>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2240      	movs	r2, #64	@ 0x40
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d000      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0xf0>
 8001c9e:	e061      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x1b4>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2280      	movs	r2, #128	@ 0x80
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d000      	beq.n	8001cac <HAL_ADC_ConfigChannel+0xfc>
 8001caa:	e059      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x1b0>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	@ 0x80
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d151      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1ac>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d149      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x1a8>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d141      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x1a4>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d139      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1a0>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	015b      	lsls	r3, r3, #5
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d131      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x19c>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	019b      	lsls	r3, r3, #6
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d129      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x198>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	01db      	lsls	r3, r3, #7
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d121      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x194>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	@ 0x80
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d119      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x190>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	025b      	lsls	r3, r3, #9
 8001d14:	4013      	ands	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x18c>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	029b      	lsls	r3, r3, #10
 8001d20:	4013      	ands	r3, r2
 8001d22:	d109      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x188>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	02db      	lsls	r3, r3, #11
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d001      	beq.n	8001d34 <HAL_ADC_ConfigChannel+0x184>
 8001d30:	2312      	movs	r3, #18
 8001d32:	e024      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d34:	2300      	movs	r3, #0
 8001d36:	e022      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d38:	2311      	movs	r3, #17
 8001d3a:	e020      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d3c:	2310      	movs	r3, #16
 8001d3e:	e01e      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d40:	230f      	movs	r3, #15
 8001d42:	e01c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d44:	230e      	movs	r3, #14
 8001d46:	e01a      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d48:	230d      	movs	r3, #13
 8001d4a:	e018      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	e016      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d50:	230b      	movs	r3, #11
 8001d52:	e014      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d54:	230a      	movs	r3, #10
 8001d56:	e012      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d58:	2309      	movs	r3, #9
 8001d5a:	e010      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	e00e      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d60:	2307      	movs	r3, #7
 8001d62:	e00c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d64:	2306      	movs	r3, #6
 8001d66:	e00a      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d68:	2305      	movs	r3, #5
 8001d6a:	e008      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e006      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d70:	2303      	movs	r3, #3
 8001d72:	e004      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e002      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1ce>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	6852      	ldr	r2, [r2, #4]
 8001d82:	201f      	movs	r0, #31
 8001d84:	4002      	ands	r2, r0
 8001d86:	4093      	lsls	r3, r2
 8001d88:	000a      	movs	r2, r1
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d808      	bhi.n	8001db2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6818      	ldr	r0, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	001a      	movs	r2, r3
 8001dae:	f7ff fcae 	bl	800170e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	f7ff fce8 	bl	8001794 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db00      	blt.n	8001dce <HAL_ADC_ConfigChannel+0x21e>
 8001dcc:	e0bc      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dce:	4b50      	ldr	r3, [pc, #320]	@ (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff fc5b 	bl	800168c <LL_ADC_GetCommonPathInternalCh>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_ADC_ConfigChannel+0x364>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d122      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	2380      	movs	r3, #128	@ 0x80
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dec:	d11d      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2280      	movs	r2, #128	@ 0x80
 8001df2:	0412      	lsls	r2, r2, #16
 8001df4:	4313      	orrs	r3, r2
 8001df6:	4a46      	ldr	r2, [pc, #280]	@ (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001df8:	0019      	movs	r1, r3
 8001dfa:	0010      	movs	r0, r2
 8001dfc:	f7ff fc32 	bl	8001664 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e00:	4b45      	ldr	r3, [pc, #276]	@ (8001f18 <HAL_ADC_ConfigChannel+0x368>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4945      	ldr	r1, [pc, #276]	@ (8001f1c <HAL_ADC_ConfigChannel+0x36c>)
 8001e06:	0018      	movs	r0, r3
 8001e08:	f7fe f97e 	bl	8000108 <__udivsi3>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	0013      	movs	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	189b      	adds	r3, r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e1a:	e002      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f9      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e28:	e08e      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8001f20 <HAL_ADC_ConfigChannel+0x370>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d10e      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	2380      	movs	r3, #128	@ 0x80
 8001e38:	045b      	lsls	r3, r3, #17
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d109      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2280      	movs	r2, #128	@ 0x80
 8001e42:	0452      	lsls	r2, r2, #17
 8001e44:	4313      	orrs	r3, r2
 8001e46:	4a32      	ldr	r2, [pc, #200]	@ (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001e48:	0019      	movs	r1, r3
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	f7ff fc0a 	bl	8001664 <LL_ADC_SetCommonPathInternalCh>
 8001e50:	e07a      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a33      	ldr	r2, [pc, #204]	@ (8001f24 <HAL_ADC_ConfigChannel+0x374>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d000      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x2ae>
 8001e5c:	e074      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	2380      	movs	r3, #128	@ 0x80
 8001e62:	03db      	lsls	r3, r3, #15
 8001e64:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e66:	d000      	beq.n	8001e6a <HAL_ADC_ConfigChannel+0x2ba>
 8001e68:	e06e      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	03d2      	lsls	r2, r2, #15
 8001e70:	4313      	orrs	r3, r2
 8001e72:	4a27      	ldr	r2, [pc, #156]	@ (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001e74:	0019      	movs	r1, r3
 8001e76:	0010      	movs	r0, r2
 8001e78:	f7ff fbf4 	bl	8001664 <LL_ADC_SetCommonPathInternalCh>
 8001e7c:	e064      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d004      	beq.n	8001e94 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_ADC_ConfigChannel+0x35c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d107      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	f7ff fc66 	bl	8001770 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	da4d      	bge.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001eac:	4b18      	ldr	r3, [pc, #96]	@ (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f7ff fbec 	bl	800168c <LL_ADC_GetCommonPathInternalCh>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a15      	ldr	r2, [pc, #84]	@ (8001f14 <HAL_ADC_ConfigChannel+0x364>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d108      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4a18      	ldr	r2, [pc, #96]	@ (8001f28 <HAL_ADC_ConfigChannel+0x378>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	4a11      	ldr	r2, [pc, #68]	@ (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001eca:	0019      	movs	r1, r3
 8001ecc:	0010      	movs	r0, r2
 8001ece:	f7ff fbc9 	bl	8001664 <LL_ADC_SetCommonPathInternalCh>
 8001ed2:	e039      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a11      	ldr	r2, [pc, #68]	@ (8001f20 <HAL_ADC_ConfigChannel+0x370>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d108      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <HAL_ADC_ConfigChannel+0x37c>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	0010      	movs	r0, r2
 8001eea:	f7ff fbbb 	bl	8001664 <LL_ADC_SetCommonPathInternalCh>
 8001eee:	e02b      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8001f24 <HAL_ADC_ConfigChannel+0x374>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d126      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4a0c      	ldr	r2, [pc, #48]	@ (8001f30 <HAL_ADC_ConfigChannel+0x380>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	4a03      	ldr	r2, [pc, #12]	@ (8001f10 <HAL_ADC_ConfigChannel+0x360>)
 8001f02:	0019      	movs	r1, r3
 8001f04:	0010      	movs	r0, r2
 8001f06:	f7ff fbad 	bl	8001664 <LL_ADC_SetCommonPathInternalCh>
 8001f0a:	e01d      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x398>
 8001f0c:	80000004 	.word	0x80000004
 8001f10:	40012708 	.word	0x40012708
 8001f14:	b0001000 	.word	0xb0001000
 8001f18:	200000c0 	.word	0x200000c0
 8001f1c:	00030d40 	.word	0x00030d40
 8001f20:	b8004000 	.word	0xb8004000
 8001f24:	b4002000 	.word	0xb4002000
 8001f28:	ff7fffff 	.word	0xff7fffff
 8001f2c:	feffffff 	.word	0xfeffffff
 8001f30:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	2220      	movs	r2, #32
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001f40:	2317      	movs	r3, #23
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2254      	movs	r2, #84	@ 0x54
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001f50:	2317      	movs	r3, #23
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	781b      	ldrb	r3, [r3, #0]
}
 8001f56:	0018      	movs	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b006      	add	sp, #24
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	46c0      	nop			@ (mov r8, r8)

08001f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	0002      	movs	r2, r0
 8001f68:	1dfb      	adds	r3, r7, #7
 8001f6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f72:	d809      	bhi.n	8001f88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	001a      	movs	r2, r3
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <__NVIC_EnableIRQ+0x30>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	4091      	lsls	r1, r2
 8001f84:	000a      	movs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f88:	46c0      	nop			@ (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fa2:	1dfb      	adds	r3, r7, #7
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fa8:	d828      	bhi.n	8001ffc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001faa:	4a2f      	ldr	r2, [pc, #188]	@ (8002068 <__NVIC_SetPriority+0xd4>)
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	33c0      	adds	r3, #192	@ 0xc0
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	589b      	ldr	r3, [r3, r2]
 8001fba:	1dfa      	adds	r2, r7, #7
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	00d2      	lsls	r2, r2, #3
 8001fc6:	21ff      	movs	r1, #255	@ 0xff
 8001fc8:	4091      	lsls	r1, r2
 8001fca:	000a      	movs	r2, r1
 8001fcc:	43d2      	mvns	r2, r2
 8001fce:	401a      	ands	r2, r3
 8001fd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	019b      	lsls	r3, r3, #6
 8001fd6:	22ff      	movs	r2, #255	@ 0xff
 8001fd8:	401a      	ands	r2, r3
 8001fda:	1dfb      	adds	r3, r7, #7
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	4003      	ands	r3, r0
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe8:	481f      	ldr	r0, [pc, #124]	@ (8002068 <__NVIC_SetPriority+0xd4>)
 8001fea:	1dfb      	adds	r3, r7, #7
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	33c0      	adds	r3, #192	@ 0xc0
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ffa:	e031      	b.n	8002060 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <__NVIC_SetPriority+0xd8>)
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	0019      	movs	r1, r3
 8002004:	230f      	movs	r3, #15
 8002006:	400b      	ands	r3, r1
 8002008:	3b08      	subs	r3, #8
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3306      	adds	r3, #6
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	18d3      	adds	r3, r2, r3
 8002012:	3304      	adds	r3, #4
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1dfa      	adds	r2, r7, #7
 8002018:	7812      	ldrb	r2, [r2, #0]
 800201a:	0011      	movs	r1, r2
 800201c:	2203      	movs	r2, #3
 800201e:	400a      	ands	r2, r1
 8002020:	00d2      	lsls	r2, r2, #3
 8002022:	21ff      	movs	r1, #255	@ 0xff
 8002024:	4091      	lsls	r1, r2
 8002026:	000a      	movs	r2, r1
 8002028:	43d2      	mvns	r2, r2
 800202a:	401a      	ands	r2, r3
 800202c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	019b      	lsls	r3, r3, #6
 8002032:	22ff      	movs	r2, #255	@ 0xff
 8002034:	401a      	ands	r2, r3
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	0018      	movs	r0, r3
 800203c:	2303      	movs	r3, #3
 800203e:	4003      	ands	r3, r0
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002044:	4809      	ldr	r0, [pc, #36]	@ (800206c <__NVIC_SetPriority+0xd8>)
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	001c      	movs	r4, r3
 800204c:	230f      	movs	r3, #15
 800204e:	4023      	ands	r3, r4
 8002050:	3b08      	subs	r3, #8
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	430a      	orrs	r2, r1
 8002056:	3306      	adds	r3, #6
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	18c3      	adds	r3, r0, r3
 800205c:	3304      	adds	r3, #4
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	46c0      	nop			@ (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b003      	add	sp, #12
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	210f      	movs	r1, #15
 800207c:	187b      	adds	r3, r7, r1
 800207e:	1c02      	adds	r2, r0, #0
 8002080:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	187b      	adds	r3, r7, r1
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b25b      	sxtb	r3, r3
 800208a:	0011      	movs	r1, r2
 800208c:	0018      	movs	r0, r3
 800208e:	f7ff ff81 	bl	8001f94 <__NVIC_SetPriority>
}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	46bd      	mov	sp, r7
 8002096:	b004      	add	sp, #16
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	0002      	movs	r2, r0
 80020a2:	1dfb      	adds	r3, r7, #7
 80020a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7ff ff57 	bl	8001f60 <__NVIC_EnableIRQ>
}
 80020b2:	46c0      	nop			@ (mov r8, r8)
 80020b4:	46bd      	mov	sp, r7
 80020b6:	b002      	add	sp, #8
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	210f      	movs	r1, #15
 80020c6:	187b      	adds	r3, r7, r1
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2225      	movs	r2, #37	@ 0x25
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d006      	beq.n	80020e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2204      	movs	r2, #4
 80020dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020de:	187b      	adds	r3, r7, r1
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	e049      	b.n	800217a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	210e      	movs	r1, #14
 80020f2:	438a      	bics	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	438a      	bics	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	491d      	ldr	r1, [pc, #116]	@ (8002188 <HAL_DMA_Abort_IT+0xcc>)
 8002112:	400a      	ands	r2, r1
 8002114:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002116:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <HAL_DMA_Abort_IT+0xd0>)
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	221c      	movs	r2, #28
 8002120:	4013      	ands	r3, r2
 8002122:	2201      	movs	r2, #1
 8002124:	409a      	lsls	r2, r3
 8002126:	4b19      	ldr	r3, [pc, #100]	@ (800218c <HAL_DMA_Abort_IT+0xd0>)
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002134:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002148:	490f      	ldr	r1, [pc, #60]	@ (8002188 <HAL_DMA_Abort_IT+0xcc>)
 800214a:	400a      	ands	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002156:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2225      	movs	r2, #37	@ 0x25
 800215c:	2101      	movs	r1, #1
 800215e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	@ 0x24
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	0010      	movs	r0, r2
 8002178:	4798      	blx	r3
    }
  }
  return status;
 800217a:	230f      	movs	r3, #15
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b004      	add	sp, #16
 8002186:	bd80      	pop	{r7, pc}
 8002188:	fffffeff 	.word	0xfffffeff
 800218c:	40020000 	.word	0x40020000

08002190 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2225      	movs	r2, #37	@ 0x25
 800219c:	5c9b      	ldrb	r3, [r3, r2]
 800219e:	b2db      	uxtb	r3, r3
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021b6:	e147      	b.n	8002448 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4091      	lsls	r1, r2
 80021c2:	000a      	movs	r2, r1
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d100      	bne.n	80021d0 <HAL_GPIO_Init+0x28>
 80021ce:	e138      	b.n	8002442 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2203      	movs	r2, #3
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d005      	beq.n	80021e8 <HAL_GPIO_Init+0x40>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2203      	movs	r2, #3
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d130      	bne.n	800224a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0013      	movs	r3, r2
 80021f8:	43da      	mvns	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	409a      	lsls	r2, r3
 800220a:	0013      	movs	r3, r2
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800221e:	2201      	movs	r2, #1
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	43da      	mvns	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	2201      	movs	r2, #1
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2203      	movs	r2, #3
 8002250:	4013      	ands	r3, r2
 8002252:	2b03      	cmp	r3, #3
 8002254:	d017      	beq.n	8002286 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	2203      	movs	r2, #3
 8002262:	409a      	lsls	r2, r3
 8002264:	0013      	movs	r3, r2
 8002266:	43da      	mvns	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2203      	movs	r2, #3
 800228c:	4013      	ands	r3, r2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d123      	bne.n	80022da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	58d3      	ldr	r3, [r2, r3]
 800229e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2207      	movs	r2, #7
 80022a4:	4013      	ands	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	409a      	lsls	r2, r3
 80022ac:	0013      	movs	r3, r2
 80022ae:	43da      	mvns	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2107      	movs	r1, #7
 80022be:	400b      	ands	r3, r1
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	0092      	lsls	r2, r2, #2
 80022d6:	6939      	ldr	r1, [r7, #16]
 80022d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	409a      	lsls	r2, r3
 80022e8:	0013      	movs	r3, r2
 80022ea:	43da      	mvns	r2, r3
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	401a      	ands	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	409a      	lsls	r2, r3
 8002300:	0013      	movs	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	23c0      	movs	r3, #192	@ 0xc0
 8002314:	029b      	lsls	r3, r3, #10
 8002316:	4013      	ands	r3, r2
 8002318:	d100      	bne.n	800231c <HAL_GPIO_Init+0x174>
 800231a:	e092      	b.n	8002442 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800231c:	4a50      	ldr	r2, [pc, #320]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3318      	adds	r3, #24
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	589b      	ldr	r3, [r3, r2]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2203      	movs	r2, #3
 800232e:	4013      	ands	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	220f      	movs	r2, #15
 8002334:	409a      	lsls	r2, r3
 8002336:	0013      	movs	r3, r2
 8002338:	43da      	mvns	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	23a0      	movs	r3, #160	@ 0xa0
 8002344:	05db      	lsls	r3, r3, #23
 8002346:	429a      	cmp	r2, r3
 8002348:	d013      	beq.n	8002372 <HAL_GPIO_Init+0x1ca>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a45      	ldr	r2, [pc, #276]	@ (8002464 <HAL_GPIO_Init+0x2bc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d00d      	beq.n	800236e <HAL_GPIO_Init+0x1c6>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a44      	ldr	r2, [pc, #272]	@ (8002468 <HAL_GPIO_Init+0x2c0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <HAL_GPIO_Init+0x1c2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a43      	ldr	r2, [pc, #268]	@ (800246c <HAL_GPIO_Init+0x2c4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d101      	bne.n	8002366 <HAL_GPIO_Init+0x1be>
 8002362:	2303      	movs	r3, #3
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x1cc>
 8002366:	2305      	movs	r3, #5
 8002368:	e004      	b.n	8002374 <HAL_GPIO_Init+0x1cc>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <HAL_GPIO_Init+0x1cc>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_GPIO_Init+0x1cc>
 8002372:	2300      	movs	r3, #0
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	2103      	movs	r1, #3
 8002378:	400a      	ands	r2, r1
 800237a:	00d2      	lsls	r2, r2, #3
 800237c:	4093      	lsls	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002384:	4936      	ldr	r1, [pc, #216]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3318      	adds	r3, #24
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002392:	4b33      	ldr	r3, [pc, #204]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43da      	mvns	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	035b      	lsls	r3, r3, #13
 80023aa:	4013      	ands	r3, r2
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80023bc:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	43da      	mvns	r2, r3
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4013      	ands	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	039b      	lsls	r3, r3, #14
 80023d4:	4013      	ands	r3, r2
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 80023e8:	2384      	movs	r3, #132	@ 0x84
 80023ea:	58d3      	ldr	r3, [r2, r3]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43da      	mvns	r2, r3
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	2380      	movs	r3, #128	@ 0x80
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	4013      	ands	r3, r2
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800240c:	4914      	ldr	r1, [pc, #80]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 800240e:	2284      	movs	r2, #132	@ 0x84
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002414:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 8002416:	2380      	movs	r3, #128	@ 0x80
 8002418:	58d3      	ldr	r3, [r2, r3]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	4013      	ands	r3, r2
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800243a:	4909      	ldr	r1, [pc, #36]	@ (8002460 <HAL_GPIO_Init+0x2b8>)
 800243c:	2280      	movs	r2, #128	@ 0x80
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	3301      	adds	r3, #1
 8002446:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	40da      	lsrs	r2, r3
 8002450:	1e13      	subs	r3, r2, #0
 8002452:	d000      	beq.n	8002456 <HAL_GPIO_Init+0x2ae>
 8002454:	e6b0      	b.n	80021b8 <HAL_GPIO_Init+0x10>
  }
}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b006      	add	sp, #24
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021800 	.word	0x40021800
 8002464:	50000400 	.word	0x50000400
 8002468:	50000800 	.word	0x50000800
 800246c:	50000c00 	.word	0x50000c00

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	0008      	movs	r0, r1
 800247a:	0011      	movs	r1, r2
 800247c:	1cbb      	adds	r3, r7, #2
 800247e:	1c02      	adds	r2, r0, #0
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	1c7b      	adds	r3, r7, #1
 8002484:	1c0a      	adds	r2, r1, #0
 8002486:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002488:	1c7b      	adds	r3, r7, #1
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002490:	1cbb      	adds	r3, r7, #2
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002498:	e003      	b.n	80024a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249a:	1cbb      	adds	r3, r7, #2
 800249c:	881a      	ldrh	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e08f      	b.n	80025de <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2241      	movs	r2, #65	@ 0x41
 80024c2:	5c9b      	ldrb	r3, [r3, r2]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2240      	movs	r2, #64	@ 0x40
 80024ce:	2100      	movs	r1, #0
 80024d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fe fa15 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2241      	movs	r2, #65	@ 0x41
 80024de:	2124      	movs	r1, #36	@ 0x24
 80024e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2101      	movs	r1, #1
 80024ee:	438a      	bics	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	493b      	ldr	r1, [pc, #236]	@ (80025e8 <HAL_I2C_Init+0x13c>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4938      	ldr	r1, [pc, #224]	@ (80025ec <HAL_I2C_Init+0x140>)
 800250c:	400a      	ands	r2, r1
 800250e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d108      	bne.n	800252a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2180      	movs	r1, #128	@ 0x80
 8002522:	0209      	lsls	r1, r1, #8
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e007      	b.n	800253a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2184      	movs	r1, #132	@ 0x84
 8002534:	0209      	lsls	r1, r1, #8
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d109      	bne.n	8002556 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	0109      	lsls	r1, r1, #4
 8002550:	430a      	orrs	r2, r1
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	e007      	b.n	8002566 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4923      	ldr	r1, [pc, #140]	@ (80025f0 <HAL_I2C_Init+0x144>)
 8002562:	400a      	ands	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4920      	ldr	r1, [pc, #128]	@ (80025f4 <HAL_I2C_Init+0x148>)
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	491a      	ldr	r1, [pc, #104]	@ (80025ec <HAL_I2C_Init+0x140>)
 8002582:	400a      	ands	r2, r1
 8002584:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	431a      	orrs	r2, r3
 8002590:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2101      	movs	r1, #1
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2241      	movs	r2, #65	@ 0x41
 80025ca:	2120      	movs	r1, #32
 80025cc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2242      	movs	r2, #66	@ 0x42
 80025d8:	2100      	movs	r1, #0
 80025da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	f0ffffff 	.word	0xf0ffffff
 80025ec:	ffff7fff 	.word	0xffff7fff
 80025f0:	fffff7ff 	.word	0xfffff7ff
 80025f4:	02008000 	.word	0x02008000

080025f8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	68f9      	ldr	r1, [r7, #12]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
  }
}
 8002624:	46c0      	nop			@ (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b004      	add	sp, #16
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4013      	ands	r3, r2
 800264c:	d00e      	beq.n	800266c <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2280      	movs	r2, #128	@ 0x80
 8002652:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002654:	d00a      	beq.n	800266c <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800265a:	2201      	movs	r2, #1
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2280      	movs	r2, #128	@ 0x80
 8002668:	0052      	lsls	r2, r2, #1
 800266a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	2380      	movs	r3, #128	@ 0x80
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4013      	ands	r3, r2
 8002674:	d00e      	beq.n	8002694 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2280      	movs	r2, #128	@ 0x80
 800267a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800267c:	d00a      	beq.n	8002694 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	2208      	movs	r2, #8
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2280      	movs	r2, #128	@ 0x80
 8002690:	00d2      	lsls	r2, r2, #3
 8002692:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	2380      	movs	r3, #128	@ 0x80
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4013      	ands	r3, r2
 800269c:	d00e      	beq.n	80026bc <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2280      	movs	r2, #128	@ 0x80
 80026a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026a4:	d00a      	beq.n	80026bc <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	2202      	movs	r2, #2
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2280      	movs	r2, #128	@ 0x80
 80026b8:	0092      	lsls	r2, r2, #2
 80026ba:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	220b      	movs	r2, #11
 80026c6:	4013      	ands	r3, r2
 80026c8:	d005      	beq.n	80026d6 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 fc1d 	bl	8002f10 <I2C_ITError>
  }
}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b006      	add	sp, #24
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b002      	add	sp, #8
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	0008      	movs	r0, r1
 8002708:	0011      	movs	r1, r2
 800270a:	1cfb      	adds	r3, r7, #3
 800270c:	1c02      	adds	r2, r0, #0
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	003b      	movs	r3, r7
 8002712:	1c0a      	adds	r2, r1, #0
 8002714:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002716:	46c0      	nop			@ (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b002      	add	sp, #8
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002726:	46c0      	nop			@ (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002736:	46c0      	nop			@ (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b002      	add	sp, #8
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2240      	movs	r2, #64	@ 0x40
 800275a:	5c9b      	ldrb	r3, [r3, r2]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <I2C_Slave_ISR_IT+0x24>
 8002760:	2302      	movs	r3, #2
 8002762:	e0e7      	b.n	8002934 <I2C_Slave_ISR_IT+0x1f4>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2240      	movs	r2, #64	@ 0x40
 8002768:	2101      	movs	r1, #1
 800276a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	2220      	movs	r2, #32
 8002770:	4013      	ands	r3, r2
 8002772:	d00a      	beq.n	800278a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800277a:	d006      	beq.n	800278a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	0011      	movs	r1, r2
 8002782:	0018      	movs	r0, r3
 8002784:	f000 f9e4 	bl	8002b50 <I2C_ITSlaveCplt>
 8002788:	e0cf      	b.n	800292a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2210      	movs	r2, #16
 800278e:	4013      	ands	r3, r2
 8002790:	d052      	beq.n	8002838 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2210      	movs	r2, #16
 8002796:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002798:	d04e      	beq.n	8002838 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d12d      	bne.n	8002800 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2241      	movs	r2, #65	@ 0x41
 80027a8:	5c9b      	ldrb	r3, [r3, r2]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b28      	cmp	r3, #40	@ 0x28
 80027ae:	d10b      	bne.n	80027c8 <I2C_Slave_ISR_IT+0x88>
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	049b      	lsls	r3, r3, #18
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d106      	bne.n	80027c8 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 fb4d 	bl	8002e60 <I2C_ITListenCplt>
 80027c6:	e036      	b.n	8002836 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2241      	movs	r2, #65	@ 0x41
 80027cc:	5c9b      	ldrb	r3, [r3, r2]
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b29      	cmp	r3, #41	@ 0x29
 80027d2:	d110      	bne.n	80027f6 <I2C_Slave_ISR_IT+0xb6>
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	4a59      	ldr	r2, [pc, #356]	@ (800293c <I2C_Slave_ISR_IT+0x1fc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00c      	beq.n	80027f6 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2210      	movs	r2, #16
 80027e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 fcbd 	bl	8003166 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 f94a 	bl	8002a88 <I2C_ITSlaveSeqCplt>
 80027f4:	e01f      	b.n	8002836 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2210      	movs	r2, #16
 80027fc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80027fe:	e091      	b.n	8002924 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2210      	movs	r2, #16
 8002806:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280c:	2204      	movs	r2, #4
 800280e:	431a      	orrs	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <I2C_Slave_ISR_IT+0xe6>
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	2380      	movs	r3, #128	@ 0x80
 800281e:	045b      	lsls	r3, r3, #17
 8002820:	429a      	cmp	r2, r3
 8002822:	d000      	beq.n	8002826 <I2C_Slave_ISR_IT+0xe6>
 8002824:	e07e      	b.n	8002924 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f000 fb6e 	bl	8002f10 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002834:	e076      	b.n	8002924 <I2C_Slave_ISR_IT+0x1e4>
 8002836:	e075      	b.n	8002924 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2204      	movs	r2, #4
 800283c:	4013      	ands	r3, r2
 800283e:	d02f      	beq.n	80028a0 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2204      	movs	r2, #4
 8002844:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002846:	d02b      	beq.n	80028a0 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d018      	beq.n	8002884 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d14c      	bne.n	8002928 <I2C_Slave_ISR_IT+0x1e8>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	4a2a      	ldr	r2, [pc, #168]	@ (800293c <I2C_Slave_ISR_IT+0x1fc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d048      	beq.n	8002928 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f8f5 	bl	8002a88 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800289e:	e043      	b.n	8002928 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2208      	movs	r2, #8
 80028a4:	4013      	ands	r3, r2
 80028a6:	d00a      	beq.n	80028be <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2208      	movs	r2, #8
 80028ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028ae:	d006      	beq.n	80028be <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	0011      	movs	r1, r2
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f842 	bl	8002940 <I2C_ITAddrCplt>
 80028bc:	e035      	b.n	800292a <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2202      	movs	r2, #2
 80028c2:	4013      	ands	r3, r2
 80028c4:	d031      	beq.n	800292a <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028cc:	d02d      	beq.n	800292a <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d018      	beq.n	800290a <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	781a      	ldrb	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002908:	e00f      	b.n	800292a <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	2380      	movs	r3, #128	@ 0x80
 800290e:	045b      	lsls	r3, r3, #17
 8002910:	429a      	cmp	r2, r3
 8002912:	d002      	beq.n	800291a <I2C_Slave_ISR_IT+0x1da>
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f8b3 	bl	8002a88 <I2C_ITSlaveSeqCplt>
 8002922:	e002      	b.n	800292a <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8002924:	46c0      	nop			@ (mov r8, r8)
 8002926:	e000      	b.n	800292a <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8002928:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2240      	movs	r2, #64	@ 0x40
 800292e:	2100      	movs	r1, #0
 8002930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b006      	add	sp, #24
 800293a:	bd80      	pop	{r7, pc}
 800293c:	ffff0000 	.word	0xffff0000

08002940 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2241      	movs	r2, #65	@ 0x41
 800294e:	5c9b      	ldrb	r3, [r3, r2]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	001a      	movs	r2, r3
 8002954:	2328      	movs	r3, #40	@ 0x28
 8002956:	4013      	ands	r3, r2
 8002958:	2b28      	cmp	r3, #40	@ 0x28
 800295a:	d000      	beq.n	800295e <I2C_ITAddrCplt+0x1e>
 800295c:	e088      	b.n	8002a70 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	b2da      	uxtb	r2, r3
 8002968:	250f      	movs	r5, #15
 800296a:	197b      	adds	r3, r7, r5
 800296c:	2101      	movs	r1, #1
 800296e:	400a      	ands	r2, r1
 8002970:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	b29a      	uxth	r2, r3
 800297c:	200c      	movs	r0, #12
 800297e:	183b      	adds	r3, r7, r0
 8002980:	21fe      	movs	r1, #254	@ 0xfe
 8002982:	400a      	ands	r2, r1
 8002984:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	b29a      	uxth	r2, r3
 800298e:	240a      	movs	r4, #10
 8002990:	193b      	adds	r3, r7, r4
 8002992:	0592      	lsls	r2, r2, #22
 8002994:	0d92      	lsrs	r2, r2, #22
 8002996:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	2308      	movs	r3, #8
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	21fe      	movs	r1, #254	@ 0xfe
 80029a6:	400a      	ands	r2, r1
 80029a8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d148      	bne.n	8002a44 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80029b2:	0021      	movs	r1, r4
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	09db      	lsrs	r3, r3, #7
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	183b      	adds	r3, r7, r0
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	4053      	eors	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	001a      	movs	r2, r3
 80029c6:	2306      	movs	r3, #6
 80029c8:	4013      	ands	r3, r2
 80029ca:	d120      	bne.n	8002a0e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80029cc:	183b      	adds	r3, r7, r0
 80029ce:	187a      	adds	r2, r7, r1
 80029d0:	8812      	ldrh	r2, [r2, #0]
 80029d2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d14c      	bne.n	8002a80 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2208      	movs	r2, #8
 80029f2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2240      	movs	r2, #64	@ 0x40
 80029f8:	2100      	movs	r1, #0
 80029fa:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029fc:	183b      	adds	r3, r7, r0
 80029fe:	881a      	ldrh	r2, [r3, #0]
 8002a00:	197b      	adds	r3, r7, r5
 8002a02:	7819      	ldrb	r1, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7ff fe79 	bl	80026fe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002a0c:	e038      	b.n	8002a80 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002a0e:	240c      	movs	r4, #12
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	2208      	movs	r2, #8
 8002a14:	18ba      	adds	r2, r7, r2
 8002a16:	8812      	ldrh	r2, [r2, #0]
 8002a18:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a1a:	2380      	movs	r3, #128	@ 0x80
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0011      	movs	r1, r2
 8002a22:	0018      	movs	r0, r3
 8002a24:	f000 fbe0 	bl	80031e8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2240      	movs	r2, #64	@ 0x40
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a30:	193b      	adds	r3, r7, r4
 8002a32:	881a      	ldrh	r2, [r3, #0]
 8002a34:	230f      	movs	r3, #15
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	7819      	ldrb	r1, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7ff fe5e 	bl	80026fe <HAL_I2C_AddrCallback>
}
 8002a42:	e01d      	b.n	8002a80 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	021a      	lsls	r2, r3, #8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 fbcb 	bl	80031e8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2240      	movs	r2, #64	@ 0x40
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a5a:	230c      	movs	r3, #12
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	881a      	ldrh	r2, [r3, #0]
 8002a60:	230f      	movs	r3, #15
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	7819      	ldrb	r1, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff fe48 	bl	80026fe <HAL_I2C_AddrCallback>
}
 8002a6e:	e007      	b.n	8002a80 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2208      	movs	r2, #8
 8002a76:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2240      	movs	r2, #64	@ 0x40
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]
}
 8002a80:	46c0      	nop			@ (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b004      	add	sp, #16
 8002a86:	bdb0      	pop	{r4, r5, r7, pc}

08002a88 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2242      	movs	r2, #66	@ 0x42
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	01db      	lsls	r3, r3, #7
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d008      	beq.n	8002abc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4924      	ldr	r1, [pc, #144]	@ (8002b48 <I2C_ITSlaveSeqCplt+0xc0>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e00c      	b.n	8002ad6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	491e      	ldr	r1, [pc, #120]	@ (8002b4c <I2C_ITSlaveSeqCplt+0xc4>)
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2241      	movs	r2, #65	@ 0x41
 8002ada:	5c9b      	ldrb	r3, [r3, r2]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b29      	cmp	r3, #41	@ 0x29
 8002ae0:	d114      	bne.n	8002b0c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2241      	movs	r2, #65	@ 0x41
 8002ae6:	2128      	movs	r1, #40	@ 0x28
 8002ae8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2221      	movs	r2, #33	@ 0x21
 8002aee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2101      	movs	r1, #1
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 fb77 	bl	80031e8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2240      	movs	r2, #64	@ 0x40
 8002afe:	2100      	movs	r1, #0
 8002b00:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7ff fdea 	bl	80026de <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b0a:	e019      	b.n	8002b40 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2241      	movs	r2, #65	@ 0x41
 8002b10:	5c9b      	ldrb	r3, [r3, r2]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b16:	d113      	bne.n	8002b40 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2241      	movs	r2, #65	@ 0x41
 8002b1c:	2128      	movs	r1, #40	@ 0x28
 8002b1e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2222      	movs	r2, #34	@ 0x22
 8002b24:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2102      	movs	r1, #2
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 fb5c 	bl	80031e8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2240      	movs	r2, #64	@ 0x40
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f7ff fdd7 	bl	80026ee <HAL_I2C_SlaveRxCpltCallback>
}
 8002b40:	46c0      	nop			@ (mov r8, r8)
 8002b42:	46bd      	mov	sp, r7
 8002b44:	b004      	add	sp, #16
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	ffffbfff 	.word	0xffffbfff
 8002b4c:	ffff7fff 	.word	0xffff7fff

08002b50 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b6c:	200b      	movs	r0, #11
 8002b6e:	183b      	adds	r3, r7, r0
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	2141      	movs	r1, #65	@ 0x41
 8002b74:	5c52      	ldrb	r2, [r2, r1]
 8002b76:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b80:	183b      	adds	r3, r7, r0
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b21      	cmp	r3, #33	@ 0x21
 8002b86:	d003      	beq.n	8002b90 <I2C_ITSlaveCplt+0x40>
 8002b88:	183b      	adds	r3, r7, r0
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b29      	cmp	r3, #41	@ 0x29
 8002b8e:	d109      	bne.n	8002ba4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002b90:	4aac      	ldr	r2, [pc, #688]	@ (8002e44 <I2C_ITSlaveCplt+0x2f4>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0011      	movs	r1, r2
 8002b96:	0018      	movs	r0, r3
 8002b98:	f000 fb26 	bl	80031e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2221      	movs	r2, #33	@ 0x21
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ba2:	e020      	b.n	8002be6 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ba4:	220b      	movs	r2, #11
 8002ba6:	18bb      	adds	r3, r7, r2
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b22      	cmp	r3, #34	@ 0x22
 8002bac:	d003      	beq.n	8002bb6 <I2C_ITSlaveCplt+0x66>
 8002bae:	18bb      	adds	r3, r7, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bb4:	d109      	bne.n	8002bca <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002bb6:	4aa4      	ldr	r2, [pc, #656]	@ (8002e48 <I2C_ITSlaveCplt+0x2f8>)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0011      	movs	r1, r2
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 fb13 	bl	80031e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2222      	movs	r2, #34	@ 0x22
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc8:	e00d      	b.n	8002be6 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002bca:	230b      	movs	r3, #11
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b28      	cmp	r3, #40	@ 0x28
 8002bd2:	d108      	bne.n	8002be6 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002bd4:	4a9d      	ldr	r2, [pc, #628]	@ (8002e4c <I2C_ITSlaveCplt+0x2fc>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	0011      	movs	r1, r2
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 fb04 	bl	80031e8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2180      	movs	r1, #128	@ 0x80
 8002bf2:	0209      	lsls	r1, r1, #8
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4993      	ldr	r1, [pc, #588]	@ (8002e50 <I2C_ITSlaveCplt+0x300>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 faab 	bl	8003166 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	2380      	movs	r3, #128	@ 0x80
 8002c14:	01db      	lsls	r3, r3, #7
 8002c16:	4013      	ands	r3, r2
 8002c18:	d013      	beq.n	8002c42 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	498b      	ldr	r1, [pc, #556]	@ (8002e54 <I2C_ITSlaveCplt+0x304>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d01f      	beq.n	8002c72 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c40:	e017      	b.n	8002c72 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	2380      	movs	r3, #128	@ 0x80
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d012      	beq.n	8002c72 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4980      	ldr	r1, [pc, #512]	@ (8002e58 <I2C_ITSlaveCplt+0x308>)
 8002c58:	400a      	ands	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d006      	beq.n	8002c72 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2204      	movs	r2, #4
 8002c76:	4013      	ands	r3, r2
 8002c78:	d020      	beq.n	8002cbc <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	4393      	bics	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	2204      	movs	r2, #4
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d04f      	beq.n	8002d7a <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2210      	movs	r2, #16
 8002cde:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ce0:	d04b      	beq.n	8002d7a <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d12d      	bne.n	8002d48 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2241      	movs	r2, #65	@ 0x41
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b28      	cmp	r3, #40	@ 0x28
 8002cf6:	d10b      	bne.n	8002d10 <I2C_ITSlaveCplt+0x1c0>
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	049b      	lsls	r3, r3, #18
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d106      	bne.n	8002d10 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0011      	movs	r1, r2
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 f8a9 	bl	8002e60 <I2C_ITListenCplt>
 8002d0e:	e034      	b.n	8002d7a <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2241      	movs	r2, #65	@ 0x41
 8002d14:	5c9b      	ldrb	r3, [r3, r2]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b29      	cmp	r3, #41	@ 0x29
 8002d1a:	d110      	bne.n	8002d3e <I2C_ITSlaveCplt+0x1ee>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a4f      	ldr	r2, [pc, #316]	@ (8002e5c <I2C_ITSlaveCplt+0x30c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00c      	beq.n	8002d3e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2210      	movs	r2, #16
 8002d2a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fa19 	bl	8003166 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7ff fea6 	bl	8002a88 <I2C_ITSlaveSeqCplt>
 8002d3c:	e01d      	b.n	8002d7a <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2210      	movs	r2, #16
 8002d44:	61da      	str	r2, [r3, #28]
 8002d46:	e018      	b.n	8002d7a <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d54:	2204      	movs	r2, #4
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d004      	beq.n	8002d6c <I2C_ITSlaveCplt+0x21c>
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	045b      	lsls	r3, r3, #17
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d106      	bne.n	8002d7a <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0011      	movs	r1, r2
 8002d74:	0018      	movs	r0, r3
 8002d76:	f000 f8cb 	bl	8002f10 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2242      	movs	r2, #66	@ 0x42
 8002d7e:	2100      	movs	r1, #0
 8002d80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d013      	beq.n	8002db8 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0011      	movs	r1, r2
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 f8b9 	bl	8002f10 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2241      	movs	r2, #65	@ 0x41
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b28      	cmp	r3, #40	@ 0x28
 8002da8:	d147      	bne.n	8002e3a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	0011      	movs	r1, r2
 8002db0:	0018      	movs	r0, r3
 8002db2:	f000 f855 	bl	8002e60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002db6:	e040      	b.n	8002e3a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbc:	4a27      	ldr	r2, [pc, #156]	@ (8002e5c <I2C_ITSlaveCplt+0x30c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d016      	beq.n	8002df0 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f7ff fe5f 	bl	8002a88 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	@ (8002e5c <I2C_ITSlaveCplt+0x30c>)
 8002dce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2241      	movs	r2, #65	@ 0x41
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2240      	movs	r2, #64	@ 0x40
 8002de2:	2100      	movs	r1, #0
 8002de4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff fc98 	bl	800271e <HAL_I2C_ListenCpltCallback>
}
 8002dee:	e024      	b.n	8002e3a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2241      	movs	r2, #65	@ 0x41
 8002df4:	5c9b      	ldrb	r3, [r3, r2]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b22      	cmp	r3, #34	@ 0x22
 8002dfa:	d10f      	bne.n	8002e1c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2241      	movs	r2, #65	@ 0x41
 8002e00:	2120      	movs	r1, #32
 8002e02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2240      	movs	r2, #64	@ 0x40
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff fc6a 	bl	80026ee <HAL_I2C_SlaveRxCpltCallback>
}
 8002e1a:	e00e      	b.n	8002e3a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2241      	movs	r2, #65	@ 0x41
 8002e20:	2120      	movs	r1, #32
 8002e22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2240      	movs	r2, #64	@ 0x40
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f7ff fc52 	bl	80026de <HAL_I2C_SlaveTxCpltCallback>
}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b006      	add	sp, #24
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	00008001 	.word	0x00008001
 8002e48:	00008002 	.word	0x00008002
 8002e4c:	00008003 	.word	0x00008003
 8002e50:	fe00e800 	.word	0xfe00e800
 8002e54:	ffffbfff 	.word	0xffffbfff
 8002e58:	ffff7fff 	.word	0xffff7fff
 8002e5c:	ffff0000 	.word	0xffff0000

08002e60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a26      	ldr	r2, [pc, #152]	@ (8002f08 <I2C_ITListenCplt+0xa8>)
 8002e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2241      	movs	r2, #65	@ 0x41
 8002e7a:	2120      	movs	r1, #32
 8002e7c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2242      	movs	r2, #66	@ 0x42
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2204      	movs	r2, #4
 8002e90:	4013      	ands	r3, r2
 8002e92:	d022      	beq.n	8002eda <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d012      	beq.n	8002eda <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002eda:	4a0c      	ldr	r2, [pc, #48]	@ (8002f0c <I2C_ITListenCplt+0xac>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	0011      	movs	r1, r2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 f981 	bl	80031e8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2210      	movs	r2, #16
 8002eec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2240      	movs	r2, #64	@ 0x40
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff fc10 	bl	800271e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	ffff0000 	.word	0xffff0000
 8002f0c:	00008003 	.word	0x00008003

08002f10 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f1a:	200f      	movs	r0, #15
 8002f1c:	183b      	adds	r3, r7, r0
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	2141      	movs	r1, #65	@ 0x41
 8002f22:	5c52      	ldrb	r2, [r2, r1]
 8002f24:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2242      	movs	r2, #66	@ 0x42
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a72      	ldr	r2, [pc, #456]	@ (80030fc <I2C_ITError+0x1ec>)
 8002f32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f46:	183b      	adds	r3, r7, r0
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b28      	cmp	r3, #40	@ 0x28
 8002f4c:	d007      	beq.n	8002f5e <I2C_ITError+0x4e>
 8002f4e:	183b      	adds	r3, r7, r0
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b29      	cmp	r3, #41	@ 0x29
 8002f54:	d003      	beq.n	8002f5e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002f56:	183b      	adds	r3, r7, r0
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f5c:	d10c      	bne.n	8002f78 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2103      	movs	r1, #3
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f940 	bl	80031e8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2241      	movs	r2, #65	@ 0x41
 8002f6c:	2128      	movs	r1, #40	@ 0x28
 8002f6e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a63      	ldr	r2, [pc, #396]	@ (8003100 <I2C_ITError+0x1f0>)
 8002f74:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f76:	e032      	b.n	8002fde <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f78:	4a62      	ldr	r2, [pc, #392]	@ (8003104 <I2C_ITError+0x1f4>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0011      	movs	r1, r2
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f000 f932 	bl	80031e8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 f8ed 	bl	8003166 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2241      	movs	r2, #65	@ 0x41
 8002f90:	5c9b      	ldrb	r3, [r3, r2]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b60      	cmp	r3, #96	@ 0x60
 8002f96:	d01f      	beq.n	8002fd8 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2241      	movs	r2, #65	@ 0x41
 8002f9c:	2120      	movs	r1, #32
 8002f9e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	d114      	bne.n	8002fd8 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d109      	bne.n	8002fd0 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2210      	movs	r2, #16
 8002fc2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc8:	2204      	movs	r2, #4
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d03b      	beq.n	8003064 <I2C_ITError+0x154>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b11      	cmp	r3, #17
 8002ff0:	d002      	beq.n	8002ff8 <I2C_ITError+0xe8>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b21      	cmp	r3, #33	@ 0x21
 8002ff6:	d135      	bne.n	8003064 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	01db      	lsls	r3, r3, #7
 8003002:	401a      	ands	r2, r3
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	01db      	lsls	r3, r3, #7
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	493c      	ldr	r1, [pc, #240]	@ (8003108 <I2C_ITError+0x1f8>)
 8003018:	400a      	ands	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff f8b5 	bl	8002190 <HAL_DMA_GetState>
 8003026:	0003      	movs	r3, r0
 8003028:	2b01      	cmp	r3, #1
 800302a:	d016      	beq.n	800305a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003030:	4a36      	ldr	r2, [pc, #216]	@ (800310c <I2C_ITError+0x1fc>)
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2240      	movs	r2, #64	@ 0x40
 8003038:	2100      	movs	r1, #0
 800303a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	0018      	movs	r0, r3
 8003042:	f7ff f83b 	bl	80020bc <HAL_DMA_Abort_IT>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d051      	beq.n	80030ee <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	0018      	movs	r0, r3
 8003056:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003058:	e049      	b.n	80030ee <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f000 f859 	bl	8003114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003062:	e044      	b.n	80030ee <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d03b      	beq.n	80030e4 <I2C_ITError+0x1d4>
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2b12      	cmp	r3, #18
 8003070:	d002      	beq.n	8003078 <I2C_ITError+0x168>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b22      	cmp	r3, #34	@ 0x22
 8003076:	d135      	bne.n	80030e4 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	401a      	ands	r2, r3
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	429a      	cmp	r2, r3
 800308a:	d107      	bne.n	800309c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	491e      	ldr	r1, [pc, #120]	@ (8003110 <I2C_ITError+0x200>)
 8003098:	400a      	ands	r2, r1
 800309a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff f875 	bl	8002190 <HAL_DMA_GetState>
 80030a6:	0003      	movs	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d016      	beq.n	80030da <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b0:	4a16      	ldr	r2, [pc, #88]	@ (800310c <I2C_ITError+0x1fc>)
 80030b2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2240      	movs	r2, #64	@ 0x40
 80030b8:	2100      	movs	r1, #0
 80030ba:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7fe fffb 	bl	80020bc <HAL_DMA_Abort_IT>
 80030c6:	1e03      	subs	r3, r0, #0
 80030c8:	d013      	beq.n	80030f2 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d4:	0018      	movs	r0, r3
 80030d6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030d8:	e00b      	b.n	80030f2 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	0018      	movs	r0, r3
 80030de:	f000 f819 	bl	8003114 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030e2:	e006      	b.n	80030f2 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 f814 	bl	8003114 <I2C_TreatErrorCallback>
  }
}
 80030ec:	e002      	b.n	80030f4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	e000      	b.n	80030f4 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030f2:	46c0      	nop			@ (mov r8, r8)
}
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b004      	add	sp, #16
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	ffff0000 	.word	0xffff0000
 8003100:	08002741 	.word	0x08002741
 8003104:	00008003 	.word	0x00008003
 8003108:	ffffbfff 	.word	0xffffbfff
 800310c:	080031ab 	.word	0x080031ab
 8003110:	ffff7fff 	.word	0xffff7fff

08003114 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2241      	movs	r2, #65	@ 0x41
 8003120:	5c9b      	ldrb	r3, [r3, r2]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b60      	cmp	r3, #96	@ 0x60
 8003126:	d10f      	bne.n	8003148 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2241      	movs	r2, #65	@ 0x41
 800312c:	2120      	movs	r1, #32
 800312e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2240      	movs	r2, #64	@ 0x40
 800313a:	2100      	movs	r1, #0
 800313c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0018      	movs	r0, r3
 8003142:	f7ff faf4 	bl	800272e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003146:	e00a      	b.n	800315e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	2100      	movs	r1, #0
 8003154:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	0018      	movs	r0, r3
 800315a:	f7fd fe3d 	bl	8000dd8 <HAL_I2C_ErrorCallback>
}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b002      	add	sp, #8
 8003164:	bd80      	pop	{r7, pc}

08003166 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2202      	movs	r2, #2
 8003176:	4013      	ands	r3, r2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d103      	bne.n	8003184 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2200      	movs	r2, #0
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2201      	movs	r2, #1
 800318c:	4013      	ands	r3, r2
 800318e:	2b01      	cmp	r3, #1
 8003190:	d007      	beq.n	80031a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699a      	ldr	r2, [r3, #24]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	430a      	orrs	r2, r1
 80031a0:	619a      	str	r2, [r3, #24]
  }
}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b002      	add	sp, #8
 80031a8:	bd80      	pop	{r7, pc}

080031aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031c4:	2200      	movs	r2, #0
 80031c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d4:	2200      	movs	r2, #0
 80031d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	0018      	movs	r0, r3
 80031dc:	f7ff ff9a 	bl	8003114 <I2C_TreatErrorCallback>
}
 80031e0:	46c0      	nop			@ (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b004      	add	sp, #16
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	000a      	movs	r2, r1
 80031f2:	1cbb      	adds	r3, r7, #2
 80031f4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80031fa:	1cbb      	adds	r3, r7, #2
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	2201      	movs	r2, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d010      	beq.n	8003226 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2242      	movs	r2, #66	@ 0x42
 8003208:	4313      	orrs	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2241      	movs	r2, #65	@ 0x41
 8003210:	5c9b      	ldrb	r3, [r3, r2]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	001a      	movs	r2, r3
 8003216:	2328      	movs	r3, #40	@ 0x28
 8003218:	4013      	ands	r3, r2
 800321a:	2b28      	cmp	r3, #40	@ 0x28
 800321c:	d003      	beq.n	8003226 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	22b0      	movs	r2, #176	@ 0xb0
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003226:	1cbb      	adds	r3, r7, #2
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	2202      	movs	r2, #2
 800322c:	4013      	ands	r3, r2
 800322e:	d010      	beq.n	8003252 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2244      	movs	r2, #68	@ 0x44
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2241      	movs	r2, #65	@ 0x41
 800323c:	5c9b      	ldrb	r3, [r3, r2]
 800323e:	b2db      	uxtb	r3, r3
 8003240:	001a      	movs	r2, r3
 8003242:	2328      	movs	r3, #40	@ 0x28
 8003244:	4013      	ands	r3, r2
 8003246:	2b28      	cmp	r3, #40	@ 0x28
 8003248:	d003      	beq.n	8003252 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	22b0      	movs	r2, #176	@ 0xb0
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003252:	1cbb      	adds	r3, r7, #2
 8003254:	2200      	movs	r2, #0
 8003256:	5e9b      	ldrsh	r3, [r3, r2]
 8003258:	2b00      	cmp	r3, #0
 800325a:	da03      	bge.n	8003264 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	22b8      	movs	r2, #184	@ 0xb8
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003264:	1cbb      	adds	r3, r7, #2
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	2b10      	cmp	r3, #16
 800326a:	d103      	bne.n	8003274 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2290      	movs	r2, #144	@ 0x90
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003274:	1cbb      	adds	r3, r7, #2
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	2b20      	cmp	r3, #32
 800327a:	d103      	bne.n	8003284 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003284:	1cbb      	adds	r3, r7, #2
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	2b40      	cmp	r3, #64	@ 0x40
 800328a:	d103      	bne.n	8003294 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2240      	movs	r2, #64	@ 0x40
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	43d9      	mvns	r1, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	400a      	ands	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b004      	add	sp, #16
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2241      	movs	r2, #65	@ 0x41
 80032be:	5c9b      	ldrb	r3, [r3, r2]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d138      	bne.n	8003338 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2240      	movs	r2, #64	@ 0x40
 80032ca:	5c9b      	ldrb	r3, [r3, r2]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e032      	b.n	800333a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2240      	movs	r2, #64	@ 0x40
 80032d8:	2101      	movs	r1, #1
 80032da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2241      	movs	r2, #65	@ 0x41
 80032e0:	2124      	movs	r1, #36	@ 0x24
 80032e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2101      	movs	r1, #1
 80032f0:	438a      	bics	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4911      	ldr	r1, [pc, #68]	@ (8003344 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003300:	400a      	ands	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6819      	ldr	r1, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2101      	movs	r1, #1
 8003320:	430a      	orrs	r2, r1
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2241      	movs	r2, #65	@ 0x41
 8003328:	2120      	movs	r1, #32
 800332a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2240      	movs	r2, #64	@ 0x40
 8003330:	2100      	movs	r1, #0
 8003332:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	0018      	movs	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	ffffefff 	.word	0xffffefff

08003348 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2241      	movs	r2, #65	@ 0x41
 8003356:	5c9b      	ldrb	r3, [r3, r2]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b20      	cmp	r3, #32
 800335c:	d139      	bne.n	80033d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2240      	movs	r2, #64	@ 0x40
 8003362:	5c9b      	ldrb	r3, [r3, r2]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003368:	2302      	movs	r3, #2
 800336a:	e033      	b.n	80033d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2240      	movs	r2, #64	@ 0x40
 8003370:	2101      	movs	r1, #1
 8003372:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2241      	movs	r2, #65	@ 0x41
 8003378:	2124      	movs	r1, #36	@ 0x24
 800337a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	438a      	bics	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4a11      	ldr	r2, [pc, #68]	@ (80033dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003398:	4013      	ands	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	430a      	orrs	r2, r1
 80033bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2241      	movs	r2, #65	@ 0x41
 80033c2:	2120      	movs	r1, #32
 80033c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2240      	movs	r2, #64	@ 0x40
 80033ca:	2100      	movs	r1, #0
 80033cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	0018      	movs	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b004      	add	sp, #16
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	fffff0ff 	.word	0xfffff0ff

080033e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80033e8:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	@ (8003454 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	0019      	movs	r1, r3
 80033f2:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	429a      	cmp	r2, r3
 8003402:	d11f      	bne.n	8003444 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003404:	4b14      	ldr	r3, [pc, #80]	@ (8003458 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	0013      	movs	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	189b      	adds	r3, r3, r2
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	4912      	ldr	r1, [pc, #72]	@ (800345c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003412:	0018      	movs	r0, r3
 8003414:	f7fc fe78 	bl	8000108 <__udivsi3>
 8003418:	0003      	movs	r3, r0
 800341a:	3301      	adds	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800341e:	e008      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3b01      	subs	r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e001      	b.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e009      	b.n	8003446 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003432:	4b07      	ldr	r3, [pc, #28]	@ (8003450 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	401a      	ands	r2, r3
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	429a      	cmp	r2, r3
 8003442:	d0ed      	beq.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b004      	add	sp, #16
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	40007000 	.word	0x40007000
 8003454:	fffff9ff 	.word	0xfffff9ff
 8003458:	200000c0 	.word	0x200000c0
 800345c:	000f4240 	.word	0x000f4240

08003460 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003464:	4b03      	ldr	r3, [pc, #12]	@ (8003474 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	23e0      	movs	r3, #224	@ 0xe0
 800346a:	01db      	lsls	r3, r3, #7
 800346c:	4013      	ands	r3, r2
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000

08003478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e2f3      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2201      	movs	r2, #1
 8003490:	4013      	ands	r3, r2
 8003492:	d100      	bne.n	8003496 <HAL_RCC_OscConfig+0x1e>
 8003494:	e07c      	b.n	8003590 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003496:	4bc3      	ldr	r3, [pc, #780]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2238      	movs	r2, #56	@ 0x38
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a0:	4bc0      	ldr	r3, [pc, #768]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2203      	movs	r2, #3
 80034a6:	4013      	ands	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3e>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d10b      	bne.n	80034d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	4bb9      	ldr	r3, [pc, #740]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	2380      	movs	r3, #128	@ 0x80
 80034c2:	029b      	lsls	r3, r3, #10
 80034c4:	4013      	ands	r3, r2
 80034c6:	d062      	beq.n	800358e <HAL_RCC_OscConfig+0x116>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d15e      	bne.n	800358e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e2ce      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	025b      	lsls	r3, r3, #9
 80034dc:	429a      	cmp	r2, r3
 80034de:	d107      	bne.n	80034f0 <HAL_RCC_OscConfig+0x78>
 80034e0:	4bb0      	ldr	r3, [pc, #704]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	4baf      	ldr	r3, [pc, #700]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80034e6:	2180      	movs	r1, #128	@ 0x80
 80034e8:	0249      	lsls	r1, r1, #9
 80034ea:	430a      	orrs	r2, r1
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e020      	b.n	8003532 <HAL_RCC_OscConfig+0xba>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	23a0      	movs	r3, #160	@ 0xa0
 80034f6:	02db      	lsls	r3, r3, #11
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d10e      	bne.n	800351a <HAL_RCC_OscConfig+0xa2>
 80034fc:	4ba9      	ldr	r3, [pc, #676]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4ba8      	ldr	r3, [pc, #672]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003502:	2180      	movs	r1, #128	@ 0x80
 8003504:	02c9      	lsls	r1, r1, #11
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	4ba6      	ldr	r3, [pc, #664]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4ba5      	ldr	r3, [pc, #660]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	0249      	lsls	r1, r1, #9
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	e00b      	b.n	8003532 <HAL_RCC_OscConfig+0xba>
 800351a:	4ba2      	ldr	r3, [pc, #648]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4ba1      	ldr	r3, [pc, #644]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003520:	49a1      	ldr	r1, [pc, #644]	@ (80037a8 <HAL_RCC_OscConfig+0x330>)
 8003522:	400a      	ands	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	4b9f      	ldr	r3, [pc, #636]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	4b9e      	ldr	r3, [pc, #632]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800352c:	499f      	ldr	r1, [pc, #636]	@ (80037ac <HAL_RCC_OscConfig+0x334>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d014      	beq.n	8003564 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353a:	f7fe f865 	bl	8001608 <HAL_GetTick>
 800353e:	0003      	movs	r3, r0
 8003540:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7fe f860 	bl	8001608 <HAL_GetTick>
 8003548:	0002      	movs	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	@ 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e28d      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003556:	4b93      	ldr	r3, [pc, #588]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	2380      	movs	r3, #128	@ 0x80
 800355c:	029b      	lsls	r3, r3, #10
 800355e:	4013      	ands	r3, r2
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0xcc>
 8003562:	e015      	b.n	8003590 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe f850 	bl	8001608 <HAL_GetTick>
 8003568:	0003      	movs	r3, r0
 800356a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356e:	f7fe f84b 	bl	8001608 <HAL_GetTick>
 8003572:	0002      	movs	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b64      	cmp	r3, #100	@ 0x64
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e278      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003580:	4b88      	ldr	r3, [pc, #544]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	@ 0x80
 8003586:	029b      	lsls	r3, r3, #10
 8003588:	4013      	ands	r3, r2
 800358a:	d1f0      	bne.n	800356e <HAL_RCC_OscConfig+0xf6>
 800358c:	e000      	b.n	8003590 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	d100      	bne.n	800359c <HAL_RCC_OscConfig+0x124>
 800359a:	e099      	b.n	80036d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800359c:	4b81      	ldr	r3, [pc, #516]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	2238      	movs	r2, #56	@ 0x38
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a6:	4b7f      	ldr	r3, [pc, #508]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2203      	movs	r2, #3
 80035ac:	4013      	ands	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d102      	bne.n	80035bc <HAL_RCC_OscConfig+0x144>
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d002      	beq.n	80035c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d135      	bne.n	800362e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c2:	4b78      	ldr	r3, [pc, #480]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4013      	ands	r3, r2
 80035cc:	d005      	beq.n	80035da <HAL_RCC_OscConfig+0x162>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e24b      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035da:	4b72      	ldr	r3, [pc, #456]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4a74      	ldr	r2, [pc, #464]	@ (80037b0 <HAL_RCC_OscConfig+0x338>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	021a      	lsls	r2, r3, #8
 80035ea:	4b6e      	ldr	r3, [pc, #440]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d112      	bne.n	800361c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035f6:	4b6b      	ldr	r3, [pc, #428]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a6e      	ldr	r2, [pc, #440]	@ (80037b4 <HAL_RCC_OscConfig+0x33c>)
 80035fc:	4013      	ands	r3, r2
 80035fe:	0019      	movs	r1, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	4b67      	ldr	r3, [pc, #412]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003606:	430a      	orrs	r2, r1
 8003608:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800360a:	4b66      	ldr	r3, [pc, #408]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0adb      	lsrs	r3, r3, #11
 8003610:	2207      	movs	r2, #7
 8003612:	4013      	ands	r3, r2
 8003614:	4a68      	ldr	r2, [pc, #416]	@ (80037b8 <HAL_RCC_OscConfig+0x340>)
 8003616:	40da      	lsrs	r2, r3
 8003618:	4b68      	ldr	r3, [pc, #416]	@ (80037bc <HAL_RCC_OscConfig+0x344>)
 800361a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800361c:	4b68      	ldr	r3, [pc, #416]	@ (80037c0 <HAL_RCC_OscConfig+0x348>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0018      	movs	r0, r3
 8003622:	f7fd fcf7 	bl	8001014 <HAL_InitTick>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d051      	beq.n	80036ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e221      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d030      	beq.n	8003698 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003636:	4b5b      	ldr	r3, [pc, #364]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5e      	ldr	r2, [pc, #376]	@ (80037b4 <HAL_RCC_OscConfig+0x33c>)
 800363c:	4013      	ands	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	4b57      	ldr	r3, [pc, #348]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003646:	430a      	orrs	r2, r1
 8003648:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800364a:	4b56      	ldr	r3, [pc, #344]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b55      	ldr	r3, [pc, #340]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003650:	2180      	movs	r1, #128	@ 0x80
 8003652:	0049      	lsls	r1, r1, #1
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd ffd6 	bl	8001608 <HAL_GetTick>
 800365c:	0003      	movs	r3, r0
 800365e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003662:	f7fd ffd1 	bl	8001608 <HAL_GetTick>
 8003666:	0002      	movs	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e1fe      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003674:	4b4b      	ldr	r3, [pc, #300]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	@ 0x80
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4013      	ands	r3, r2
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003680:	4b48      	ldr	r3, [pc, #288]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a4a      	ldr	r2, [pc, #296]	@ (80037b0 <HAL_RCC_OscConfig+0x338>)
 8003686:	4013      	ands	r3, r2
 8003688:	0019      	movs	r1, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	021a      	lsls	r2, r3, #8
 8003690:	4b44      	ldr	r3, [pc, #272]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	e01b      	b.n	80036d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003698:	4b42      	ldr	r3, [pc, #264]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b41      	ldr	r3, [pc, #260]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800369e:	4949      	ldr	r1, [pc, #292]	@ (80037c4 <HAL_RCC_OscConfig+0x34c>)
 80036a0:	400a      	ands	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd ffb0 	bl	8001608 <HAL_GetTick>
 80036a8:	0003      	movs	r3, r0
 80036aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ae:	f7fd ffab 	bl	8001608 <HAL_GetTick>
 80036b2:	0002      	movs	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1d8      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c0:	4b38      	ldr	r3, [pc, #224]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4013      	ands	r3, r2
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCC_OscConfig+0x236>
 80036cc:	e000      	b.n	80036d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2208      	movs	r2, #8
 80036d6:	4013      	ands	r3, r2
 80036d8:	d047      	beq.n	800376a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036da:	4b32      	ldr	r3, [pc, #200]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2238      	movs	r2, #56	@ 0x38
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b18      	cmp	r3, #24
 80036e4:	d10a      	bne.n	80036fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80036e6:	4b2f      	ldr	r3, [pc, #188]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 80036e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ea:	2202      	movs	r2, #2
 80036ec:	4013      	ands	r3, r2
 80036ee:	d03c      	beq.n	800376a <HAL_RCC_OscConfig+0x2f2>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d138      	bne.n	800376a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e1ba      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d019      	beq.n	8003738 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003704:	4b27      	ldr	r3, [pc, #156]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003706:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003708:	4b26      	ldr	r3, [pc, #152]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800370a:	2101      	movs	r1, #1
 800370c:	430a      	orrs	r2, r1
 800370e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7fd ff7a 	bl	8001608 <HAL_GetTick>
 8003714:	0003      	movs	r3, r0
 8003716:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371a:	f7fd ff75 	bl	8001608 <HAL_GetTick>
 800371e:	0002      	movs	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e1a2      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800372c:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800372e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003730:	2202      	movs	r2, #2
 8003732:	4013      	ands	r3, r2
 8003734:	d0f1      	beq.n	800371a <HAL_RCC_OscConfig+0x2a2>
 8003736:	e018      	b.n	800376a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003738:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800373a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800373c:	4b19      	ldr	r3, [pc, #100]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800373e:	2101      	movs	r1, #1
 8003740:	438a      	bics	r2, r1
 8003742:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd ff60 	bl	8001608 <HAL_GetTick>
 8003748:	0003      	movs	r3, r0
 800374a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374e:	f7fd ff5b 	bl	8001608 <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e188      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003760:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003764:	2202      	movs	r2, #2
 8003766:	4013      	ands	r3, r2
 8003768:	d1f1      	bne.n	800374e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2204      	movs	r2, #4
 8003770:	4013      	ands	r3, r2
 8003772:	d100      	bne.n	8003776 <HAL_RCC_OscConfig+0x2fe>
 8003774:	e0c6      	b.n	8003904 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	231f      	movs	r3, #31
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800377e:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2238      	movs	r2, #56	@ 0x38
 8003784:	4013      	ands	r3, r2
 8003786:	2b20      	cmp	r3, #32
 8003788:	d11e      	bne.n	80037c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_OscConfig+0x32c>)
 800378c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378e:	2202      	movs	r2, #2
 8003790:	4013      	ands	r3, r2
 8003792:	d100      	bne.n	8003796 <HAL_RCC_OscConfig+0x31e>
 8003794:	e0b6      	b.n	8003904 <HAL_RCC_OscConfig+0x48c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d000      	beq.n	80037a0 <HAL_RCC_OscConfig+0x328>
 800379e:	e0b1      	b.n	8003904 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e166      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
 80037a4:	40021000 	.word	0x40021000
 80037a8:	fffeffff 	.word	0xfffeffff
 80037ac:	fffbffff 	.word	0xfffbffff
 80037b0:	ffff80ff 	.word	0xffff80ff
 80037b4:	ffffc7ff 	.word	0xffffc7ff
 80037b8:	00f42400 	.word	0x00f42400
 80037bc:	200000c0 	.word	0x200000c0
 80037c0:	200000c4 	.word	0x200000c4
 80037c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037c8:	4bac      	ldr	r3, [pc, #688]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80037ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	055b      	lsls	r3, r3, #21
 80037d0:	4013      	ands	r3, r2
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_OscConfig+0x360>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_RCC_OscConfig+0x362>
 80037d8:	2300      	movs	r3, #0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d011      	beq.n	8003802 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80037de:	4ba7      	ldr	r3, [pc, #668]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80037e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037e2:	4ba6      	ldr	r3, [pc, #664]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80037e4:	2180      	movs	r1, #128	@ 0x80
 80037e6:	0549      	lsls	r1, r1, #21
 80037e8:	430a      	orrs	r2, r1
 80037ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037ec:	4ba3      	ldr	r3, [pc, #652]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80037ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	055b      	lsls	r3, r3, #21
 80037f4:	4013      	ands	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80037fa:	231f      	movs	r3, #31
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003802:	4b9f      	ldr	r3, [pc, #636]	@ (8003a80 <HAL_RCC_OscConfig+0x608>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4013      	ands	r3, r2
 800380c:	d11a      	bne.n	8003844 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380e:	4b9c      	ldr	r3, [pc, #624]	@ (8003a80 <HAL_RCC_OscConfig+0x608>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b9b      	ldr	r3, [pc, #620]	@ (8003a80 <HAL_RCC_OscConfig+0x608>)
 8003814:	2180      	movs	r1, #128	@ 0x80
 8003816:	0049      	lsls	r1, r1, #1
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800381c:	f7fd fef4 	bl	8001608 <HAL_GetTick>
 8003820:	0003      	movs	r3, r0
 8003822:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fd feef 	bl	8001608 <HAL_GetTick>
 800382a:	0002      	movs	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e11c      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003838:	4b91      	ldr	r3, [pc, #580]	@ (8003a80 <HAL_RCC_OscConfig+0x608>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4013      	ands	r3, r2
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x3e2>
 800384c:	4b8b      	ldr	r3, [pc, #556]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800384e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003850:	4b8a      	ldr	r3, [pc, #552]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003852:	2101      	movs	r1, #1
 8003854:	430a      	orrs	r2, r1
 8003856:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x41c>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x404>
 8003862:	4b86      	ldr	r3, [pc, #536]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003864:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003866:	4b85      	ldr	r3, [pc, #532]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003868:	2104      	movs	r1, #4
 800386a:	430a      	orrs	r2, r1
 800386c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800386e:	4b83      	ldr	r3, [pc, #524]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003870:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003872:	4b82      	ldr	r3, [pc, #520]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003874:	2101      	movs	r1, #1
 8003876:	430a      	orrs	r2, r1
 8003878:	65da      	str	r2, [r3, #92]	@ 0x5c
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0x41c>
 800387c:	4b7f      	ldr	r3, [pc, #508]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800387e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003880:	4b7e      	ldr	r3, [pc, #504]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003882:	2101      	movs	r1, #1
 8003884:	438a      	bics	r2, r1
 8003886:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003888:	4b7c      	ldr	r3, [pc, #496]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800388a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800388c:	4b7b      	ldr	r3, [pc, #492]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800388e:	2104      	movs	r1, #4
 8003890:	438a      	bics	r2, r1
 8003892:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d014      	beq.n	80038c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fd feb4 	bl	8001608 <HAL_GetTick>
 80038a0:	0003      	movs	r3, r0
 80038a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a4:	e009      	b.n	80038ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd feaf 	bl	8001608 <HAL_GetTick>
 80038aa:	0002      	movs	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	4a74      	ldr	r2, [pc, #464]	@ (8003a84 <HAL_RCC_OscConfig+0x60c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0db      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ba:	4b70      	ldr	r3, [pc, #448]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80038bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038be:	2202      	movs	r2, #2
 80038c0:	4013      	ands	r3, r2
 80038c2:	d0f0      	beq.n	80038a6 <HAL_RCC_OscConfig+0x42e>
 80038c4:	e013      	b.n	80038ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c6:	f7fd fe9f 	bl	8001608 <HAL_GetTick>
 80038ca:	0003      	movs	r3, r0
 80038cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ce:	e009      	b.n	80038e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd fe9a 	bl	8001608 <HAL_GetTick>
 80038d4:	0002      	movs	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	4a6a      	ldr	r2, [pc, #424]	@ (8003a84 <HAL_RCC_OscConfig+0x60c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0c6      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e4:	4b65      	ldr	r3, [pc, #404]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80038e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e8:	2202      	movs	r2, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80038ee:	231f      	movs	r3, #31
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80038f8:	4b60      	ldr	r3, [pc, #384]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80038fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038fc:	4b5f      	ldr	r3, [pc, #380]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80038fe:	4962      	ldr	r1, [pc, #392]	@ (8003a88 <HAL_RCC_OscConfig+0x610>)
 8003900:	400a      	ands	r2, r1
 8003902:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d100      	bne.n	800390e <HAL_RCC_OscConfig+0x496>
 800390c:	e0b0      	b.n	8003a70 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800390e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2238      	movs	r2, #56	@ 0x38
 8003914:	4013      	ands	r3, r2
 8003916:	2b10      	cmp	r3, #16
 8003918:	d100      	bne.n	800391c <HAL_RCC_OscConfig+0x4a4>
 800391a:	e078      	b.n	8003a0e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d153      	bne.n	80039cc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b55      	ldr	r3, [pc, #340]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b54      	ldr	r3, [pc, #336]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800392a:	4958      	ldr	r1, [pc, #352]	@ (8003a8c <HAL_RCC_OscConfig+0x614>)
 800392c:	400a      	ands	r2, r1
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7fd fe6a 	bl	8001608 <HAL_GetTick>
 8003934:	0003      	movs	r3, r0
 8003936:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fd fe65 	bl	8001608 <HAL_GetTick>
 800393e:	0002      	movs	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e092      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2380      	movs	r3, #128	@ 0x80
 8003952:	049b      	lsls	r3, r3, #18
 8003954:	4013      	ands	r3, r2
 8003956:	d1f0      	bne.n	800393a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003958:	4b48      	ldr	r3, [pc, #288]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a4c      	ldr	r2, [pc, #304]	@ (8003a90 <HAL_RCC_OscConfig+0x618>)
 800395e:	4013      	ands	r3, r2
 8003960:	0019      	movs	r1, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1a      	ldr	r2, [r3, #32]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397e:	431a      	orrs	r2, r3
 8003980:	4b3e      	ldr	r3, [pc, #248]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003982:	430a      	orrs	r2, r1
 8003984:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003986:	4b3d      	ldr	r3, [pc, #244]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800398c:	2180      	movs	r1, #128	@ 0x80
 800398e:	0449      	lsls	r1, r1, #17
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003994:	4b39      	ldr	r3, [pc, #228]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003996:	68da      	ldr	r2, [r3, #12]
 8003998:	4b38      	ldr	r3, [pc, #224]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 800399a:	2180      	movs	r1, #128	@ 0x80
 800399c:	0549      	lsls	r1, r1, #21
 800399e:	430a      	orrs	r2, r1
 80039a0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a2:	f7fd fe31 	bl	8001608 <HAL_GetTick>
 80039a6:	0003      	movs	r3, r0
 80039a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fd fe2c 	bl	8001608 <HAL_GetTick>
 80039b0:	0002      	movs	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e059      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	4b2f      	ldr	r3, [pc, #188]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	2380      	movs	r3, #128	@ 0x80
 80039c4:	049b      	lsls	r3, r3, #18
 80039c6:	4013      	ands	r3, r2
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x534>
 80039ca:	e051      	b.n	8003a70 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039cc:	4b2b      	ldr	r3, [pc, #172]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b2a      	ldr	r3, [pc, #168]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80039d2:	492e      	ldr	r1, [pc, #184]	@ (8003a8c <HAL_RCC_OscConfig+0x614>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd fe16 	bl	8001608 <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fd fe11 	bl	8001608 <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e03e      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f4:	4b21      	ldr	r3, [pc, #132]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	2380      	movs	r3, #128	@ 0x80
 80039fa:	049b      	lsls	r3, r3, #18
 80039fc:	4013      	ands	r3, r2
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003a00:	4b1e      	ldr	r3, [pc, #120]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	4b1d      	ldr	r3, [pc, #116]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003a06:	4923      	ldr	r1, [pc, #140]	@ (8003a94 <HAL_RCC_OscConfig+0x61c>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	e030      	b.n	8003a70 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e02b      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a1a:	4b18      	ldr	r3, [pc, #96]	@ (8003a7c <HAL_RCC_OscConfig+0x604>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2203      	movs	r2, #3
 8003a24:	401a      	ands	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d11e      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2270      	movs	r2, #112	@ 0x70
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d117      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	23fe      	movs	r3, #254	@ 0xfe
 8003a40:	01db      	lsls	r3, r3, #7
 8003a42:	401a      	ands	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d10e      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	23f8      	movs	r3, #248	@ 0xf8
 8003a52:	039b      	lsls	r3, r3, #14
 8003a54:	401a      	ands	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d106      	bne.n	8003a6c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	0f5b      	lsrs	r3, r3, #29
 8003a62:	075a      	lsls	r2, r3, #29
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	0018      	movs	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	b008      	add	sp, #32
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40007000 	.word	0x40007000
 8003a84:	00001388 	.word	0x00001388
 8003a88:	efffffff 	.word	0xefffffff
 8003a8c:	feffffff 	.word	0xfeffffff
 8003a90:	1fc1808c 	.word	0x1fc1808c
 8003a94:	effefffc 	.word	0xeffefffc

08003a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0e9      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aac:	4b76      	ldr	r3, [pc, #472]	@ (8003c88 <HAL_RCC_ClockConfig+0x1f0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d91e      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aba:	4b73      	ldr	r3, [pc, #460]	@ (8003c88 <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2207      	movs	r2, #7
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	4b70      	ldr	r3, [pc, #448]	@ (8003c88 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003acc:	f7fd fd9c 	bl	8001608 <HAL_GetTick>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ad4:	e009      	b.n	8003aea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad6:	f7fd fd97 	bl	8001608 <HAL_GetTick>
 8003ada:	0002      	movs	r2, r0
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c8c <HAL_RCC_ClockConfig+0x1f4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0ca      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003aea:	4b67      	ldr	r3, [pc, #412]	@ (8003c88 <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2207      	movs	r2, #7
 8003af0:	4013      	ands	r3, r2
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1ee      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2202      	movs	r2, #2
 8003afe:	4013      	ands	r3, r2
 8003b00:	d015      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2204      	movs	r2, #4
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d006      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b0c:	4b60      	ldr	r3, [pc, #384]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	4b5f      	ldr	r3, [pc, #380]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b12:	21e0      	movs	r1, #224	@ 0xe0
 8003b14:	01c9      	lsls	r1, r1, #7
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	4a5d      	ldr	r2, [pc, #372]	@ (8003c94 <HAL_RCC_ClockConfig+0x1fc>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	0019      	movs	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	4b59      	ldr	r3, [pc, #356]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2201      	movs	r2, #1
 8003b34:	4013      	ands	r3, r2
 8003b36:	d057      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b40:	4b53      	ldr	r3, [pc, #332]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2380      	movs	r3, #128	@ 0x80
 8003b46:	029b      	lsls	r3, r3, #10
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d12b      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e097      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d107      	bne.n	8003b68 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b58:	4b4d      	ldr	r3, [pc, #308]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	049b      	lsls	r3, r3, #18
 8003b60:	4013      	ands	r3, r2
 8003b62:	d11f      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e08b      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b70:	4b47      	ldr	r3, [pc, #284]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	2380      	movs	r3, #128	@ 0x80
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d113      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e07f      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b88:	4b41      	ldr	r3, [pc, #260]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d108      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e074      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b96:	4b3e      	ldr	r3, [pc, #248]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e06d      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	2207      	movs	r2, #7
 8003baa:	4393      	bics	r3, r2
 8003bac:	0019      	movs	r1, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	4b37      	ldr	r3, [pc, #220]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb8:	f7fd fd26 	bl	8001608 <HAL_GetTick>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc0:	e009      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc2:	f7fd fd21 	bl	8001608 <HAL_GetTick>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c8c <HAL_RCC_ClockConfig+0x1f4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e054      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2238      	movs	r2, #56	@ 0x38
 8003bdc:	401a      	ands	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1ec      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be8:	4b27      	ldr	r3, [pc, #156]	@ (8003c88 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2207      	movs	r2, #7
 8003bee:	4013      	ands	r3, r2
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d21e      	bcs.n	8003c34 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2207      	movs	r2, #7
 8003bfc:	4393      	bics	r3, r2
 8003bfe:	0019      	movs	r1, r3
 8003c00:	4b21      	ldr	r3, [pc, #132]	@ (8003c88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c08:	f7fd fcfe 	bl	8001608 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c10:	e009      	b.n	8003c26 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c12:	f7fd fcf9 	bl	8001608 <HAL_GetTick>
 8003c16:	0002      	movs	r2, r0
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <HAL_RCC_ClockConfig+0x1f4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e02c      	b.n	8003c80 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c26:	4b18      	ldr	r3, [pc, #96]	@ (8003c88 <HAL_RCC_ClockConfig+0x1f0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c3e:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	4a15      	ldr	r2, [pc, #84]	@ (8003c98 <HAL_RCC_ClockConfig+0x200>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c52:	f000 f829 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8003c56:	0001      	movs	r1, r0
 8003c58:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <HAL_RCC_ClockConfig+0x1f8>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	0a1b      	lsrs	r3, r3, #8
 8003c5e:	220f      	movs	r2, #15
 8003c60:	401a      	ands	r2, r3
 8003c62:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <HAL_RCC_ClockConfig+0x204>)
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	58d3      	ldr	r3, [r2, r3]
 8003c68:	221f      	movs	r2, #31
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	000a      	movs	r2, r1
 8003c6e:	40da      	lsrs	r2, r3
 8003c70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_RCC_ClockConfig+0x208>)
 8003c72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_RCC_ClockConfig+0x20c>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7fd f9cb 	bl	8001014 <HAL_InitTick>
 8003c7e:	0003      	movs	r3, r0
}
 8003c80:	0018      	movs	r0, r3
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b004      	add	sp, #16
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	00001388 	.word	0x00001388
 8003c90:	40021000 	.word	0x40021000
 8003c94:	fffff0ff 	.word	0xfffff0ff
 8003c98:	ffff8fff 	.word	0xffff8fff
 8003c9c:	0800b140 	.word	0x0800b140
 8003ca0:	200000c0 	.word	0x200000c0
 8003ca4:	200000c4 	.word	0x200000c4

08003ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cae:	4b3c      	ldr	r3, [pc, #240]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2238      	movs	r2, #56	@ 0x38
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d10f      	bne.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003cb8:	4b39      	ldr	r3, [pc, #228]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0adb      	lsrs	r3, r3, #11
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	409a      	lsls	r2, r3
 8003cc6:	0013      	movs	r3, r2
 8003cc8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003cca:	6839      	ldr	r1, [r7, #0]
 8003ccc:	4835      	ldr	r0, [pc, #212]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cce:	f7fc fa1b 	bl	8000108 <__udivsi3>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	e05d      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd8:	4b31      	ldr	r3, [pc, #196]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2238      	movs	r2, #56	@ 0x38
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ce4:	4b30      	ldr	r3, [pc, #192]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	e054      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cea:	4b2d      	ldr	r3, [pc, #180]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2238      	movs	r2, #56	@ 0x38
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d138      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d00:	4b27      	ldr	r3, [pc, #156]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	2207      	movs	r2, #7
 8003d08:	4013      	ands	r3, r2
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d10d      	bne.n	8003d30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	4824      	ldr	r0, [pc, #144]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d18:	f7fc f9f6 	bl	8000108 <__udivsi3>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	0019      	movs	r1, r3
 8003d20:	4b1f      	ldr	r3, [pc, #124]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	227f      	movs	r2, #127	@ 0x7f
 8003d28:	4013      	ands	r3, r2
 8003d2a:	434b      	muls	r3, r1
 8003d2c:	617b      	str	r3, [r7, #20]
        break;
 8003d2e:	e00d      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	481c      	ldr	r0, [pc, #112]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d34:	f7fc f9e8 	bl	8000108 <__udivsi3>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	4b18      	ldr	r3, [pc, #96]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	227f      	movs	r2, #127	@ 0x7f
 8003d44:	4013      	ands	r3, r2
 8003d46:	434b      	muls	r3, r1
 8003d48:	617b      	str	r3, [r7, #20]
        break;
 8003d4a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d4c:	4b14      	ldr	r3, [pc, #80]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	0f5b      	lsrs	r3, r3, #29
 8003d52:	2207      	movs	r2, #7
 8003d54:	4013      	ands	r3, r2
 8003d56:	3301      	adds	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d5a:	6879      	ldr	r1, [r7, #4]
 8003d5c:	6978      	ldr	r0, [r7, #20]
 8003d5e:	f7fc f9d3 	bl	8000108 <__udivsi3>
 8003d62:	0003      	movs	r3, r0
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	e015      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d68:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2238      	movs	r2, #56	@ 0x38
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d103      	bne.n	8003d7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d7c:	4b08      	ldr	r3, [pc, #32]	@ (8003da0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2238      	movs	r2, #56	@ 0x38
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b18      	cmp	r3, #24
 8003d86:	d103      	bne.n	8003d90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003d88:	23fa      	movs	r3, #250	@ 0xfa
 8003d8a:	01db      	lsls	r3, r3, #7
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	e001      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d94:	693b      	ldr	r3, [r7, #16]
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b006      	add	sp, #24
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	40021000 	.word	0x40021000
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	01c9c380 	.word	0x01c9c380

08003dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b02      	ldr	r3, [pc, #8]	@ (8003dbc <HAL_RCC_GetHCLKFreq+0x10>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			@ (mov r8, r8)
 8003dbc:	200000c0 	.word	0x200000c0

08003dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc0:	b5b0      	push	{r4, r5, r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003dc4:	f7ff fff2 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dc8:	0004      	movs	r4, r0
 8003dca:	f7ff fb49 	bl	8003460 <LL_RCC_GetAPB1Prescaler>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	0b1a      	lsrs	r2, r3, #12
 8003dd2:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dd4:	0092      	lsls	r2, r2, #2
 8003dd6:	58d3      	ldr	r3, [r2, r3]
 8003dd8:	221f      	movs	r2, #31
 8003dda:	4013      	ands	r3, r2
 8003ddc:	40dc      	lsrs	r4, r3
 8003dde:	0023      	movs	r3, r4
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bdb0      	pop	{r4, r5, r7, pc}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	0800b180 	.word	0x0800b180

08003dec <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2207      	movs	r2, #7
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e38 <HAL_RCC_GetClockConfig+0x4c>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2207      	movs	r2, #7
 8003e02:	401a      	ands	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_GetClockConfig+0x4c>)
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	23f0      	movs	r3, #240	@ 0xf0
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	401a      	ands	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003e16:	4b08      	ldr	r3, [pc, #32]	@ (8003e38 <HAL_RCC_GetClockConfig+0x4c>)
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	23e0      	movs	r3, #224	@ 0xe0
 8003e1c:	01db      	lsls	r3, r3, #7
 8003e1e:	401a      	ands	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e24:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <HAL_RCC_GetClockConfig+0x50>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2207      	movs	r2, #7
 8003e2a:	401a      	ands	r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	601a      	str	r2, [r3, #0]
}
 8003e30:	46c0      	nop			@ (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b002      	add	sp, #8
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40022000 	.word	0x40022000

08003e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e48:	2313      	movs	r3, #19
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e50:	2312      	movs	r3, #18
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	029b      	lsls	r3, r3, #10
 8003e60:	4013      	ands	r3, r2
 8003e62:	d100      	bne.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003e64:	e0a3      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e66:	2011      	movs	r0, #17
 8003e68:	183b      	adds	r3, r7, r0
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6e:	4b86      	ldr	r3, [pc, #536]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e72:	2380      	movs	r3, #128	@ 0x80
 8003e74:	055b      	lsls	r3, r3, #21
 8003e76:	4013      	ands	r3, r2
 8003e78:	d110      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	4b83      	ldr	r3, [pc, #524]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e7e:	4b82      	ldr	r3, [pc, #520]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e80:	2180      	movs	r1, #128	@ 0x80
 8003e82:	0549      	lsls	r1, r1, #21
 8003e84:	430a      	orrs	r2, r1
 8003e86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003e88:	4b7f      	ldr	r3, [pc, #508]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	055b      	lsls	r3, r3, #21
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e96:	183b      	adds	r3, r7, r0
 8003e98:	2201      	movs	r2, #1
 8003e9a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e9c:	4b7b      	ldr	r3, [pc, #492]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	4b7a      	ldr	r3, [pc, #488]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ea2:	2180      	movs	r1, #128	@ 0x80
 8003ea4:	0049      	lsls	r1, r1, #1
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eaa:	f7fd fbad 	bl	8001608 <HAL_GetTick>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb4:	f7fd fba8 	bl	8001608 <HAL_GetTick>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d904      	bls.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003ec2:	2313      	movs	r3, #19
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	701a      	strb	r2, [r3, #0]
        break;
 8003eca:	e005      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800408c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	2380      	movs	r3, #128	@ 0x80
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d0ed      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003ed8:	2313      	movs	r3, #19
 8003eda:	18fb      	adds	r3, r7, r3
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d154      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ee2:	4b69      	ldr	r3, [pc, #420]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ee4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ee6:	23c0      	movs	r3, #192	@ 0xc0
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4013      	ands	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d019      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d014      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003efe:	4b62      	ldr	r3, [pc, #392]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f02:	4a63      	ldr	r2, [pc, #396]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f08:	4b5f      	ldr	r3, [pc, #380]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f0e:	2180      	movs	r1, #128	@ 0x80
 8003f10:	0249      	lsls	r1, r1, #9
 8003f12:	430a      	orrs	r2, r1
 8003f14:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f16:	4b5c      	ldr	r3, [pc, #368]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003f1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f1c:	495d      	ldr	r1, [pc, #372]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f22:	4b59      	ldr	r3, [pc, #356]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d016      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fd fb6a 	bl	8001608 <HAL_GetTick>
 8003f34:	0003      	movs	r3, r0
 8003f36:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f38:	e00c      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3a:	f7fd fb65 	bl	8001608 <HAL_GetTick>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	4a54      	ldr	r2, [pc, #336]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d904      	bls.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f4a:	2313      	movs	r3, #19
 8003f4c:	18fb      	adds	r3, r7, r3
 8003f4e:	2203      	movs	r2, #3
 8003f50:	701a      	strb	r2, [r3, #0]
            break;
 8003f52:	e004      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f54:	4b4c      	ldr	r3, [pc, #304]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f58:	2202      	movs	r2, #2
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d0ed      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003f5e:	2313      	movs	r3, #19
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10a      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f68:	4b47      	ldr	r3, [pc, #284]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6c:	4a48      	ldr	r2, [pc, #288]	@ (8004090 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	0019      	movs	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	4b44      	ldr	r3, [pc, #272]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003f7c:	e00c      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f7e:	2312      	movs	r3, #18
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	2213      	movs	r2, #19
 8003f84:	18ba      	adds	r2, r7, r2
 8003f86:	7812      	ldrb	r2, [r2, #0]
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e005      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8c:	2312      	movs	r3, #18
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2213      	movs	r2, #19
 8003f92:	18ba      	adds	r2, r7, r2
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f98:	2311      	movs	r3, #17
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d105      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fa2:	4b39      	ldr	r3, [pc, #228]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fa6:	4b38      	ldr	r3, [pc, #224]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fa8:	493c      	ldr	r1, [pc, #240]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003faa:	400a      	ands	r2, r1
 8003fac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fb8:	4b33      	ldr	r3, [pc, #204]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	2203      	movs	r2, #3
 8003fbe:	4393      	bics	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4b30      	ldr	r3, [pc, #192]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d009      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fda:	220c      	movs	r2, #12
 8003fdc:	4393      	bics	r3, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	4b28      	ldr	r3, [pc, #160]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff4:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff8:	4a29      	ldr	r2, [pc, #164]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	4b21      	ldr	r3, [pc, #132]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004004:	430a      	orrs	r2, r1
 8004006:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	01db      	lsls	r3, r3, #7
 8004010:	4013      	ands	r3, r2
 8004012:	d015      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004014:	4b1c      	ldr	r3, [pc, #112]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	0899      	lsrs	r1, r3, #2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695a      	ldr	r2, [r3, #20]
 8004020:	4b19      	ldr	r3, [pc, #100]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004022:	430a      	orrs	r2, r1
 8004024:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	05db      	lsls	r3, r3, #23
 800402e:	429a      	cmp	r2, r3
 8004030:	d106      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004032:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004038:	2180      	movs	r1, #128	@ 0x80
 800403a:	0249      	lsls	r1, r1, #9
 800403c:	430a      	orrs	r2, r1
 800403e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	4013      	ands	r3, r2
 800404a:	d016      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800404c:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004050:	4a14      	ldr	r2, [pc, #80]	@ (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004052:	4013      	ands	r3, r2
 8004054:	0019      	movs	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800405c:	430a      	orrs	r2, r1
 800405e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	2380      	movs	r3, #128	@ 0x80
 8004066:	01db      	lsls	r3, r3, #7
 8004068:	429a      	cmp	r2, r3
 800406a:	d106      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800406c:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004072:	2180      	movs	r1, #128	@ 0x80
 8004074:	0249      	lsls	r1, r1, #9
 8004076:	430a      	orrs	r2, r1
 8004078:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800407a:	2312      	movs	r3, #18
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	781b      	ldrb	r3, [r3, #0]
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b006      	add	sp, #24
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40021000 	.word	0x40021000
 800408c:	40007000 	.word	0x40007000
 8004090:	fffffcff 	.word	0xfffffcff
 8004094:	fffeffff 	.word	0xfffeffff
 8004098:	00001388 	.word	0x00001388
 800409c:	efffffff 	.word	0xefffffff
 80040a0:	ffffcfff 	.word	0xffffcfff
 80040a4:	ffff3fff 	.word	0xffff3fff

080040a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0a8      	b.n	800420c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	2382      	movs	r3, #130	@ 0x82
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d009      	beq.n	80040e2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	61da      	str	r2, [r3, #28]
 80040d4:	e005      	b.n	80040e2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	225d      	movs	r2, #93	@ 0x5d
 80040ec:	5c9b      	ldrb	r3, [r3, r2]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d107      	bne.n	8004104 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	225c      	movs	r2, #92	@ 0x5c
 80040f8:	2100      	movs	r1, #0
 80040fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0018      	movs	r0, r3
 8004100:	f7fc fee6 	bl	8000ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	225d      	movs	r2, #93	@ 0x5d
 8004108:	2102      	movs	r1, #2
 800410a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2140      	movs	r1, #64	@ 0x40
 8004118:	438a      	bics	r2, r1
 800411a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	23e0      	movs	r3, #224	@ 0xe0
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	429a      	cmp	r2, r3
 8004126:	d902      	bls.n	800412e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e002      	b.n	8004134 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800412e:	2380      	movs	r3, #128	@ 0x80
 8004130:	015b      	lsls	r3, r3, #5
 8004132:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	23f0      	movs	r3, #240	@ 0xf0
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	429a      	cmp	r2, r3
 800413e:	d008      	beq.n	8004152 <HAL_SPI_Init+0xaa>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	23e0      	movs	r3, #224	@ 0xe0
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	429a      	cmp	r2, r3
 800414a:	d002      	beq.n	8004152 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	2382      	movs	r3, #130	@ 0x82
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	401a      	ands	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6899      	ldr	r1, [r3, #8]
 8004160:	2384      	movs	r3, #132	@ 0x84
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	400b      	ands	r3, r1
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2102      	movs	r1, #2
 800416e:	400b      	ands	r3, r1
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	2101      	movs	r1, #1
 8004178:	400b      	ands	r3, r1
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6999      	ldr	r1, [r3, #24]
 8004180:	2380      	movs	r3, #128	@ 0x80
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	400b      	ands	r3, r1
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	2138      	movs	r1, #56	@ 0x38
 800418e:	400b      	ands	r3, r1
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	2180      	movs	r1, #128	@ 0x80
 8004198:	400b      	ands	r3, r1
 800419a:	431a      	orrs	r2, r3
 800419c:	0011      	movs	r1, r2
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	401a      	ands	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	2204      	movs	r2, #4
 80041b8:	401a      	ands	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	2110      	movs	r1, #16
 80041c0:	400b      	ands	r3, r1
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c8:	2108      	movs	r1, #8
 80041ca:	400b      	ands	r3, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68d9      	ldr	r1, [r3, #12]
 80041d2:	23f0      	movs	r3, #240	@ 0xf0
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	400b      	ands	r3, r1
 80041d8:	431a      	orrs	r2, r3
 80041da:	0011      	movs	r1, r2
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	2380      	movs	r3, #128	@ 0x80
 80041e0:	015b      	lsls	r3, r3, #5
 80041e2:	401a      	ands	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69da      	ldr	r2, [r3, #28]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4907      	ldr	r1, [pc, #28]	@ (8004214 <HAL_SPI_Init+0x16c>)
 80041f8:	400a      	ands	r2, r1
 80041fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	225d      	movs	r2, #93	@ 0x5d
 8004206:	2101      	movs	r1, #1
 8004208:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b004      	add	sp, #16
 8004212:	bd80      	pop	{r7, pc}
 8004214:	fffff7ff 	.word	0xfffff7ff

08004218 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2240      	movs	r2, #64	@ 0x40
 8004234:	4013      	ands	r3, r2
 8004236:	d10d      	bne.n	8004254 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2201      	movs	r2, #1
 800423c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800423e:	d009      	beq.n	8004254 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2240      	movs	r2, #64	@ 0x40
 8004244:	4013      	ands	r3, r2
 8004246:	d005      	beq.n	8004254 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	0010      	movs	r0, r2
 8004250:	4798      	blx	r3
    return;
 8004252:	e0c5      	b.n	80043e0 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2202      	movs	r2, #2
 8004258:	4013      	ands	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_SPI_IRQHandler+0x58>
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2280      	movs	r2, #128	@ 0x80
 8004260:	4013      	ands	r3, r2
 8004262:	d005      	beq.n	8004270 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	0010      	movs	r0, r2
 800426c:	4798      	blx	r3
    return;
 800426e:	e0b7      	b.n	80043e0 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2220      	movs	r2, #32
 8004274:	4013      	ands	r3, r2
 8004276:	d109      	bne.n	800428c <HAL_SPI_IRQHandler+0x74>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2240      	movs	r2, #64	@ 0x40
 800427c:	4013      	ands	r3, r2
 800427e:	d105      	bne.n	800428c <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	2380      	movs	r3, #128	@ 0x80
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	4013      	ands	r3, r2
 8004288:	d100      	bne.n	800428c <HAL_SPI_IRQHandler+0x74>
 800428a:	e0a9      	b.n	80043e0 <HAL_SPI_IRQHandler+0x1c8>
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2220      	movs	r2, #32
 8004290:	4013      	ands	r3, r2
 8004292:	d100      	bne.n	8004296 <HAL_SPI_IRQHandler+0x7e>
 8004294:	e0a4      	b.n	80043e0 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2240      	movs	r2, #64	@ 0x40
 800429a:	4013      	ands	r3, r2
 800429c:	d023      	beq.n	80042e6 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	225d      	movs	r2, #93	@ 0x5d
 80042a2:	5c9b      	ldrb	r3, [r3, r2]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d011      	beq.n	80042ce <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042ae:	2204      	movs	r2, #4
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	e00b      	b.n	80042e6 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ce:	2300      	movs	r3, #0
 80042d0:	613b      	str	r3, [r7, #16]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	693b      	ldr	r3, [r7, #16]
        return;
 80042e4:	e07c      	b.n	80043e0 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2220      	movs	r2, #32
 80042ea:	4013      	ands	r3, r2
 80042ec:	d014      	beq.n	8004318 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f2:	2201      	movs	r2, #1
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2140      	movs	r1, #64	@ 0x40
 8004312:	438a      	bics	r2, r1
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	2380      	movs	r3, #128	@ 0x80
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4013      	ands	r3, r2
 8004320:	d00c      	beq.n	800433c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004326:	2208      	movs	r2, #8
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004340:	2b00      	cmp	r3, #0
 8004342:	d04c      	beq.n	80043de <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	21e0      	movs	r1, #224	@ 0xe0
 8004350:	438a      	bics	r2, r1
 8004352:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	225d      	movs	r2, #93	@ 0x5d
 8004358:	2101      	movs	r1, #1
 800435a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2202      	movs	r2, #2
 8004360:	4013      	ands	r3, r2
 8004362:	d103      	bne.n	800436c <HAL_SPI_IRQHandler+0x154>
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2201      	movs	r2, #1
 8004368:	4013      	ands	r3, r2
 800436a:	d032      	beq.n	80043d2 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2103      	movs	r1, #3
 8004378:	438a      	bics	r2, r1
 800437a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004380:	2b00      	cmp	r3, #0
 8004382:	d010      	beq.n	80043a6 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004388:	4a17      	ldr	r2, [pc, #92]	@ (80043e8 <HAL_SPI_IRQHandler+0x1d0>)
 800438a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004390:	0018      	movs	r0, r3
 8004392:	f7fd fe93 	bl	80020bc <HAL_DMA_Abort_IT>
 8004396:	1e03      	subs	r3, r0, #0
 8004398:	d005      	beq.n	80043a6 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439e:	2240      	movs	r2, #64	@ 0x40
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b2:	4a0d      	ldr	r2, [pc, #52]	@ (80043e8 <HAL_SPI_IRQHandler+0x1d0>)
 80043b4:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7fd fe7e 	bl	80020bc <HAL_DMA_Abort_IT>
 80043c0:	1e03      	subs	r3, r0, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043c8:	2240      	movs	r2, #64	@ 0x40
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80043d0:	e004      	b.n	80043dc <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f000 f809 	bl	80043ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043da:	e000      	b.n	80043de <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 80043dc:	46c0      	nop			@ (mov r8, r8)
    return;
 80043de:	46c0      	nop			@ (mov r8, r8)
  }
}
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b008      	add	sp, #32
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			@ (mov r8, r8)
 80043e8:	080043fd 	.word	0x080043fd

080043ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80043f4:	46c0      	nop			@ (mov r8, r8)
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b002      	add	sp, #8
 80043fa:	bd80      	pop	{r7, pc}

080043fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2246      	movs	r2, #70	@ 0x46
 800440e:	2100      	movs	r1, #0
 8004410:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	0018      	movs	r0, r3
 800441c:	f7ff ffe6 	bl	80043ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004420:	46c0      	nop			@ (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e04a      	b.n	80044d0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	223d      	movs	r2, #61	@ 0x3d
 800443e:	5c9b      	ldrb	r3, [r3, r2]
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d107      	bne.n	8004456 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	223c      	movs	r2, #60	@ 0x3c
 800444a:	2100      	movs	r1, #0
 800444c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f7fc ff53 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	223d      	movs	r2, #61	@ 0x3d
 800445a:	2102      	movs	r1, #2
 800445c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	0019      	movs	r1, r3
 8004468:	0010      	movs	r0, r2
 800446a:	f000 fbe9 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2248      	movs	r2, #72	@ 0x48
 8004472:	2101      	movs	r1, #1
 8004474:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	223e      	movs	r2, #62	@ 0x3e
 800447a:	2101      	movs	r1, #1
 800447c:	5499      	strb	r1, [r3, r2]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	223f      	movs	r2, #63	@ 0x3f
 8004482:	2101      	movs	r1, #1
 8004484:	5499      	strb	r1, [r3, r2]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2240      	movs	r2, #64	@ 0x40
 800448a:	2101      	movs	r1, #1
 800448c:	5499      	strb	r1, [r3, r2]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2241      	movs	r2, #65	@ 0x41
 8004492:	2101      	movs	r1, #1
 8004494:	5499      	strb	r1, [r3, r2]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2242      	movs	r2, #66	@ 0x42
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2243      	movs	r2, #67	@ 0x43
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2244      	movs	r2, #68	@ 0x44
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2245      	movs	r2, #69	@ 0x45
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2246      	movs	r2, #70	@ 0x46
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2247      	movs	r2, #71	@ 0x47
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	223d      	movs	r2, #61	@ 0x3d
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	223d      	movs	r2, #61	@ 0x3d
 80044e4:	5c9b      	ldrb	r3, [r3, r2]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d001      	beq.n	80044f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e03c      	b.n	800456a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	223d      	movs	r2, #61	@ 0x3d
 80044f4:	2102      	movs	r1, #2
 80044f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2101      	movs	r1, #1
 8004504:	430a      	orrs	r2, r1
 8004506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a19      	ldr	r2, [pc, #100]	@ (8004574 <HAL_TIM_Base_Start_IT+0x9c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d009      	beq.n	8004526 <HAL_TIM_Base_Start_IT+0x4e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a18      	ldr	r2, [pc, #96]	@ (8004578 <HAL_TIM_Base_Start_IT+0xa0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_TIM_Base_Start_IT+0x4e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a16      	ldr	r2, [pc, #88]	@ (800457c <HAL_TIM_Base_Start_IT+0xa4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d116      	bne.n	8004554 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <HAL_TIM_Base_Start_IT+0xa8>)
 800452e:	4013      	ands	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b06      	cmp	r3, #6
 8004536:	d016      	beq.n	8004566 <HAL_TIM_Base_Start_IT+0x8e>
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	2380      	movs	r3, #128	@ 0x80
 800453c:	025b      	lsls	r3, r3, #9
 800453e:	429a      	cmp	r2, r3
 8004540:	d011      	beq.n	8004566 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2101      	movs	r1, #1
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	e008      	b.n	8004566 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2101      	movs	r1, #1
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e000      	b.n	8004568 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004566:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	0018      	movs	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	b004      	add	sp, #16
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	40012c00 	.word	0x40012c00
 8004578:	40000400 	.word	0x40000400
 800457c:	40014000 	.word	0x40014000
 8004580:	00010007 	.word	0x00010007

08004584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e04a      	b.n	800462c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	223d      	movs	r2, #61	@ 0x3d
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	223c      	movs	r2, #60	@ 0x3c
 80045a6:	2100      	movs	r1, #0
 80045a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 f841 	bl	8004634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	223d      	movs	r2, #61	@ 0x3d
 80045b6:	2102      	movs	r1, #2
 80045b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	0019      	movs	r1, r3
 80045c4:	0010      	movs	r0, r2
 80045c6:	f000 fb3b 	bl	8004c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2248      	movs	r2, #72	@ 0x48
 80045ce:	2101      	movs	r1, #1
 80045d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	223e      	movs	r2, #62	@ 0x3e
 80045d6:	2101      	movs	r1, #1
 80045d8:	5499      	strb	r1, [r3, r2]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	223f      	movs	r2, #63	@ 0x3f
 80045de:	2101      	movs	r1, #1
 80045e0:	5499      	strb	r1, [r3, r2]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2240      	movs	r2, #64	@ 0x40
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2241      	movs	r2, #65	@ 0x41
 80045ee:	2101      	movs	r1, #1
 80045f0:	5499      	strb	r1, [r3, r2]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2242      	movs	r2, #66	@ 0x42
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2243      	movs	r2, #67	@ 0x43
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2244      	movs	r2, #68	@ 0x44
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2245      	movs	r2, #69	@ 0x45
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2246      	movs	r2, #70	@ 0x46
 8004616:	2101      	movs	r1, #1
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2247      	movs	r2, #71	@ 0x47
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	223d      	movs	r2, #61	@ 0x3d
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800463c:	46c0      	nop			@ (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2202      	movs	r2, #2
 8004660:	4013      	ands	r3, r2
 8004662:	d021      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2202      	movs	r2, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d01d      	beq.n	80046a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2203      	movs	r2, #3
 8004672:	4252      	negs	r2, r2
 8004674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2203      	movs	r2, #3
 8004684:	4013      	ands	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	0018      	movs	r0, r3
 800468c:	f000 fac0 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 8004690:	e007      	b.n	80046a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0018      	movs	r0, r3
 8004696:	f000 fab3 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f000 fabf 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2204      	movs	r2, #4
 80046ac:	4013      	ands	r3, r2
 80046ae:	d022      	beq.n	80046f6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2204      	movs	r2, #4
 80046b4:	4013      	ands	r3, r2
 80046b6:	d01e      	beq.n	80046f6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2205      	movs	r2, #5
 80046be:	4252      	negs	r2, r2
 80046c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699a      	ldr	r2, [r3, #24]
 80046ce:	23c0      	movs	r3, #192	@ 0xc0
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4013      	ands	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	0018      	movs	r0, r3
 80046da:	f000 fa99 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 80046de:	e007      	b.n	80046f0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	0018      	movs	r0, r3
 80046e4:	f000 fa8c 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 fa98 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2208      	movs	r2, #8
 80046fa:	4013      	ands	r3, r2
 80046fc:	d021      	beq.n	8004742 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2208      	movs	r2, #8
 8004702:	4013      	ands	r3, r2
 8004704:	d01d      	beq.n	8004742 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2209      	movs	r2, #9
 800470c:	4252      	negs	r2, r2
 800470e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2204      	movs	r2, #4
 8004714:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	2203      	movs	r2, #3
 800471e:	4013      	ands	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0018      	movs	r0, r3
 8004726:	f000 fa73 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 800472a:	e007      	b.n	800473c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	0018      	movs	r0, r3
 8004730:	f000 fa66 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	0018      	movs	r0, r3
 8004738:	f000 fa72 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2210      	movs	r2, #16
 8004746:	4013      	ands	r3, r2
 8004748:	d022      	beq.n	8004790 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2210      	movs	r2, #16
 800474e:	4013      	ands	r3, r2
 8004750:	d01e      	beq.n	8004790 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2211      	movs	r2, #17
 8004758:	4252      	negs	r2, r2
 800475a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2208      	movs	r2, #8
 8004760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	23c0      	movs	r3, #192	@ 0xc0
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4013      	ands	r3, r2
 800476e:	d004      	beq.n	800477a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	0018      	movs	r0, r3
 8004774:	f000 fa4c 	bl	8004c10 <HAL_TIM_IC_CaptureCallback>
 8004778:	e007      	b.n	800478a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0018      	movs	r0, r3
 800477e:	f000 fa3f 	bl	8004c00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 fa4b 	bl	8004c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2201      	movs	r2, #1
 8004794:	4013      	ands	r3, r2
 8004796:	d00c      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	4013      	ands	r3, r2
 800479e:	d008      	beq.n	80047b2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2202      	movs	r2, #2
 80047a6:	4252      	negs	r2, r2
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fc fb25 	bl	8000dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2280      	movs	r2, #128	@ 0x80
 80047b6:	4013      	ands	r3, r2
 80047b8:	d104      	bne.n	80047c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	019b      	lsls	r3, r3, #6
 80047c0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047c2:	d00b      	beq.n	80047dc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2280      	movs	r2, #128	@ 0x80
 80047c8:	4013      	ands	r3, r2
 80047ca:	d007      	beq.n	80047dc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a1e      	ldr	r2, [pc, #120]	@ (800484c <HAL_TIM_IRQHandler+0x208>)
 80047d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f000 fe86 	bl	80054e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	2380      	movs	r3, #128	@ 0x80
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4013      	ands	r3, r2
 80047e4:	d00b      	beq.n	80047fe <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2280      	movs	r2, #128	@ 0x80
 80047ea:	4013      	ands	r3, r2
 80047ec:	d007      	beq.n	80047fe <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <HAL_TIM_IRQHandler+0x20c>)
 80047f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f000 fe7d 	bl	80054f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2240      	movs	r2, #64	@ 0x40
 8004802:	4013      	ands	r3, r2
 8004804:	d00c      	beq.n	8004820 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2240      	movs	r2, #64	@ 0x40
 800480a:	4013      	ands	r3, r2
 800480c:	d008      	beq.n	8004820 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2241      	movs	r2, #65	@ 0x41
 8004814:	4252      	negs	r2, r2
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0018      	movs	r0, r3
 800481c:	f000 fa08 	bl	8004c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2220      	movs	r2, #32
 8004824:	4013      	ands	r3, r2
 8004826:	d00c      	beq.n	8004842 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	4013      	ands	r3, r2
 800482e:	d008      	beq.n	8004842 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2221      	movs	r2, #33	@ 0x21
 8004836:	4252      	negs	r2, r2
 8004838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f000 fe4b 	bl	80054d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b004      	add	sp, #16
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			@ (mov r8, r8)
 800484c:	ffffdf7f 	.word	0xffffdf7f
 8004850:	fffffeff 	.word	0xfffffeff

08004854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004860:	2317      	movs	r3, #23
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	223c      	movs	r2, #60	@ 0x3c
 800486c:	5c9b      	ldrb	r3, [r3, r2]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004872:	2302      	movs	r3, #2
 8004874:	e0e5      	b.n	8004a42 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	223c      	movs	r2, #60	@ 0x3c
 800487a:	2101      	movs	r1, #1
 800487c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b14      	cmp	r3, #20
 8004882:	d900      	bls.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004884:	e0d1      	b.n	8004a2a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	009a      	lsls	r2, r3, #2
 800488a:	4b70      	ldr	r3, [pc, #448]	@ (8004a4c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800488c:	18d3      	adds	r3, r2, r3
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	0011      	movs	r1, r2
 800489a:	0018      	movs	r0, r3
 800489c:	f000 fa54 	bl	8004d48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	699a      	ldr	r2, [r3, #24]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2108      	movs	r1, #8
 80048ac:	430a      	orrs	r2, r1
 80048ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2104      	movs	r1, #4
 80048bc:	438a      	bics	r2, r1
 80048be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6999      	ldr	r1, [r3, #24]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	619a      	str	r2, [r3, #24]
      break;
 80048d2:	e0af      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	0011      	movs	r1, r2
 80048dc:	0018      	movs	r0, r3
 80048de:	f000 fabd 	bl	8004e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699a      	ldr	r2, [r3, #24]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2180      	movs	r1, #128	@ 0x80
 80048ee:	0109      	lsls	r1, r1, #4
 80048f0:	430a      	orrs	r2, r1
 80048f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4954      	ldr	r1, [pc, #336]	@ (8004a50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004900:	400a      	ands	r2, r1
 8004902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6999      	ldr	r1, [r3, #24]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	021a      	lsls	r2, r3, #8
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	619a      	str	r2, [r3, #24]
      break;
 8004918:	e08c      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	0011      	movs	r1, r2
 8004922:	0018      	movs	r0, r3
 8004924:	f000 fb1e 	bl	8004f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2108      	movs	r1, #8
 8004934:	430a      	orrs	r2, r1
 8004936:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69da      	ldr	r2, [r3, #28]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2104      	movs	r1, #4
 8004944:	438a      	bics	r2, r1
 8004946:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69d9      	ldr	r1, [r3, #28]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	61da      	str	r2, [r3, #28]
      break;
 800495a:	e06b      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	0011      	movs	r1, r2
 8004964:	0018      	movs	r0, r3
 8004966:	f000 fb85 	bl	8005074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69da      	ldr	r2, [r3, #28]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2180      	movs	r1, #128	@ 0x80
 8004976:	0109      	lsls	r1, r1, #4
 8004978:	430a      	orrs	r2, r1
 800497a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4932      	ldr	r1, [pc, #200]	@ (8004a50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004988:	400a      	ands	r2, r1
 800498a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69d9      	ldr	r1, [r3, #28]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	021a      	lsls	r2, r3, #8
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	61da      	str	r2, [r3, #28]
      break;
 80049a0:	e048      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	0011      	movs	r1, r2
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 fbcc 	bl	8005148 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2108      	movs	r1, #8
 80049bc:	430a      	orrs	r2, r1
 80049be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2104      	movs	r1, #4
 80049cc:	438a      	bics	r2, r1
 80049ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80049e2:	e027      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	0011      	movs	r1, r2
 80049ec:	0018      	movs	r0, r3
 80049ee:	f000 fc0b 	bl	8005208 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2180      	movs	r1, #128	@ 0x80
 80049fe:	0109      	lsls	r1, r1, #4
 8004a00:	430a      	orrs	r2, r1
 8004a02:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4910      	ldr	r1, [pc, #64]	@ (8004a50 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004a10:	400a      	ands	r2, r1
 8004a12:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	021a      	lsls	r2, r3, #8
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004a28:	e004      	b.n	8004a34 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004a2a:	2317      	movs	r3, #23
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
      break;
 8004a32:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	223c      	movs	r2, #60	@ 0x3c
 8004a38:	2100      	movs	r1, #0
 8004a3a:	5499      	strb	r1, [r3, r2]

  return status;
 8004a3c:	2317      	movs	r3, #23
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	781b      	ldrb	r3, [r3, #0]
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b006      	add	sp, #24
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	0800b1a0 	.word	0x0800b1a0
 8004a50:	fffffbff 	.word	0xfffffbff

08004a54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5e:	230f      	movs	r3, #15
 8004a60:	18fb      	adds	r3, r7, r3
 8004a62:	2200      	movs	r2, #0
 8004a64:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	223c      	movs	r2, #60	@ 0x3c
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIM_ConfigClockSource+0x20>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e0bc      	b.n	8004bee <HAL_TIM_ConfigClockSource+0x19a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	223c      	movs	r2, #60	@ 0x3c
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	223d      	movs	r2, #61	@ 0x3d
 8004a80:	2102      	movs	r1, #2
 8004a82:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4a5a      	ldr	r2, [pc, #360]	@ (8004bf8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4a59      	ldr	r2, [pc, #356]	@ (8004bfc <HAL_TIM_ConfigClockSource+0x1a8>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2280      	movs	r2, #128	@ 0x80
 8004aaa:	0192      	lsls	r2, r2, #6
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d040      	beq.n	8004b32 <HAL_TIM_ConfigClockSource+0xde>
 8004ab0:	2280      	movs	r2, #128	@ 0x80
 8004ab2:	0192      	lsls	r2, r2, #6
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d900      	bls.n	8004aba <HAL_TIM_ConfigClockSource+0x66>
 8004ab8:	e088      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
 8004aba:	2280      	movs	r2, #128	@ 0x80
 8004abc:	0152      	lsls	r2, r2, #5
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d100      	bne.n	8004ac4 <HAL_TIM_ConfigClockSource+0x70>
 8004ac2:	e088      	b.n	8004bd6 <HAL_TIM_ConfigClockSource+0x182>
 8004ac4:	2280      	movs	r2, #128	@ 0x80
 8004ac6:	0152      	lsls	r2, r2, #5
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d900      	bls.n	8004ace <HAL_TIM_ConfigClockSource+0x7a>
 8004acc:	e07e      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
 8004ace:	2b70      	cmp	r3, #112	@ 0x70
 8004ad0:	d018      	beq.n	8004b04 <HAL_TIM_ConfigClockSource+0xb0>
 8004ad2:	d900      	bls.n	8004ad6 <HAL_TIM_ConfigClockSource+0x82>
 8004ad4:	e07a      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
 8004ad6:	2b60      	cmp	r3, #96	@ 0x60
 8004ad8:	d04f      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x126>
 8004ada:	d900      	bls.n	8004ade <HAL_TIM_ConfigClockSource+0x8a>
 8004adc:	e076      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
 8004ade:	2b50      	cmp	r3, #80	@ 0x50
 8004ae0:	d03b      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0x106>
 8004ae2:	d900      	bls.n	8004ae6 <HAL_TIM_ConfigClockSource+0x92>
 8004ae4:	e072      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
 8004ae6:	2b40      	cmp	r3, #64	@ 0x40
 8004ae8:	d057      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x146>
 8004aea:	d900      	bls.n	8004aee <HAL_TIM_ConfigClockSource+0x9a>
 8004aec:	e06e      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
 8004aee:	2b30      	cmp	r3, #48	@ 0x30
 8004af0:	d063      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x166>
 8004af2:	d86b      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	d060      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x166>
 8004af8:	d868      	bhi.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d05d      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x166>
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d05b      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x166>
 8004b02:	e063      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b14:	f000 fc58 	bl	80053c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2277      	movs	r2, #119	@ 0x77
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]
      break;
 8004b30:	e052      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b42:	f000 fc41 	bl	80053c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2180      	movs	r1, #128	@ 0x80
 8004b52:	01c9      	lsls	r1, r1, #7
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
      break;
 8004b58:	e03e      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b66:	001a      	movs	r2, r3
 8004b68:	f000 fbb2 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2150      	movs	r1, #80	@ 0x50
 8004b72:	0018      	movs	r0, r3
 8004b74:	f000 fc0c 	bl	8005390 <TIM_ITRx_SetConfig>
      break;
 8004b78:	e02e      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b86:	001a      	movs	r2, r3
 8004b88:	f000 fbd0 	bl	800532c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2160      	movs	r1, #96	@ 0x60
 8004b92:	0018      	movs	r0, r3
 8004b94:	f000 fbfc 	bl	8005390 <TIM_ITRx_SetConfig>
      break;
 8004b98:	e01e      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba6:	001a      	movs	r2, r3
 8004ba8:	f000 fb92 	bl	80052d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2140      	movs	r1, #64	@ 0x40
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 fbec 	bl	8005390 <TIM_ITRx_SetConfig>
      break;
 8004bb8:	e00e      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	0010      	movs	r0, r2
 8004bc6:	f000 fbe3 	bl	8005390 <TIM_ITRx_SetConfig>
      break;
 8004bca:	e005      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004bcc:	230f      	movs	r3, #15
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
      break;
 8004bd4:	e000      	b.n	8004bd8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004bd6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	223d      	movs	r2, #61	@ 0x3d
 8004bdc:	2101      	movs	r1, #1
 8004bde:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	223c      	movs	r2, #60	@ 0x3c
 8004be4:	2100      	movs	r1, #0
 8004be6:	5499      	strb	r1, [r3, r2]

  return status;
 8004be8:	230f      	movs	r3, #15
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	781b      	ldrb	r3, [r3, #0]
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b004      	add	sp, #16
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	ffceff88 	.word	0xffceff88
 8004bfc:	ffff00ff 	.word	0xffff00ff

08004c00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c08:	46c0      	nop			@ (mov r8, r8)
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	b002      	add	sp, #8
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b002      	add	sp, #8
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c28:	46c0      	nop			@ (mov r8, r8)
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b002      	add	sp, #8
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c38:	46c0      	nop			@ (mov r8, r8)
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	b002      	add	sp, #8
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a36      	ldr	r2, [pc, #216]	@ (8004d2c <TIM_Base_SetConfig+0xec>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0x20>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a35      	ldr	r2, [pc, #212]	@ (8004d30 <TIM_Base_SetConfig+0xf0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2270      	movs	r2, #112	@ 0x70
 8004c64:	4393      	bics	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2d      	ldr	r2, [pc, #180]	@ (8004d2c <TIM_Base_SetConfig+0xec>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d013      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004d30 <TIM_Base_SetConfig+0xf0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00f      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2b      	ldr	r2, [pc, #172]	@ (8004d34 <TIM_Base_SetConfig+0xf4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00b      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004d38 <TIM_Base_SetConfig+0xf8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d007      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a29      	ldr	r2, [pc, #164]	@ (8004d3c <TIM_Base_SetConfig+0xfc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d003      	beq.n	8004ca2 <TIM_Base_SetConfig+0x62>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	@ (8004d40 <TIM_Base_SetConfig+0x100>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d108      	bne.n	8004cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	@ (8004d44 <TIM_Base_SetConfig+0x104>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2280      	movs	r2, #128	@ 0x80
 8004cb8:	4393      	bics	r3, r2
 8004cba:	001a      	movs	r2, r3
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a13      	ldr	r2, [pc, #76]	@ (8004d2c <TIM_Base_SetConfig+0xec>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_Base_SetConfig+0xba>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <TIM_Base_SetConfig+0xf8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_Base_SetConfig+0xba>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a13      	ldr	r2, [pc, #76]	@ (8004d3c <TIM_Base_SetConfig+0xfc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_Base_SetConfig+0xba>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a12      	ldr	r2, [pc, #72]	@ (8004d40 <TIM_Base_SetConfig+0x100>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d103      	bne.n	8004d02 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	4393      	bics	r3, r2
 8004d1c:	001a      	movs	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	611a      	str	r2, [r3, #16]
  }
}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b004      	add	sp, #16
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40002000 	.word	0x40002000
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800
 8004d44:	fffffcff 	.word	0xfffffcff

08004d48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	4393      	bics	r3, r2
 8004d60:	001a      	movs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a32      	ldr	r2, [pc, #200]	@ (8004e40 <TIM_OC1_SetConfig+0xf8>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	4393      	bics	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	4393      	bics	r3, r2
 8004d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a28      	ldr	r2, [pc, #160]	@ (8004e44 <TIM_OC1_SetConfig+0xfc>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_OC1_SetConfig+0x76>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a27      	ldr	r2, [pc, #156]	@ (8004e48 <TIM_OC1_SetConfig+0x100>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_OC1_SetConfig+0x76>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a26      	ldr	r2, [pc, #152]	@ (8004e4c <TIM_OC1_SetConfig+0x104>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_OC1_SetConfig+0x76>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a25      	ldr	r2, [pc, #148]	@ (8004e50 <TIM_OC1_SetConfig+0x108>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10c      	bne.n	8004dd8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2208      	movs	r2, #8
 8004dc2:	4393      	bics	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	4393      	bics	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a1a      	ldr	r2, [pc, #104]	@ (8004e44 <TIM_OC1_SetConfig+0xfc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <TIM_OC1_SetConfig+0xb0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a19      	ldr	r2, [pc, #100]	@ (8004e48 <TIM_OC1_SetConfig+0x100>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d007      	beq.n	8004df8 <TIM_OC1_SetConfig+0xb0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a18      	ldr	r2, [pc, #96]	@ (8004e4c <TIM_OC1_SetConfig+0x104>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_OC1_SetConfig+0xb0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a17      	ldr	r2, [pc, #92]	@ (8004e50 <TIM_OC1_SetConfig+0x108>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d111      	bne.n	8004e1c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4a16      	ldr	r2, [pc, #88]	@ (8004e54 <TIM_OC1_SetConfig+0x10c>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4a15      	ldr	r2, [pc, #84]	@ (8004e58 <TIM_OC1_SetConfig+0x110>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	621a      	str	r2, [r3, #32]
}
 8004e36:	46c0      	nop			@ (mov r8, r8)
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	b006      	add	sp, #24
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	fffeff8f 	.word	0xfffeff8f
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	40014000 	.word	0x40014000
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800
 8004e54:	fffffeff 	.word	0xfffffeff
 8004e58:	fffffdff 	.word	0xfffffdff

08004e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	2210      	movs	r2, #16
 8004e72:	4393      	bics	r3, r2
 8004e74:	001a      	movs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a2e      	ldr	r2, [pc, #184]	@ (8004f44 <TIM_OC2_SetConfig+0xe8>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <TIM_OC2_SetConfig+0xec>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	021b      	lsls	r3, r3, #8
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	4393      	bics	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a24      	ldr	r2, [pc, #144]	@ (8004f4c <TIM_OC2_SetConfig+0xf0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d10d      	bne.n	8004eda <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2280      	movs	r2, #128	@ 0x80
 8004ec2:	4393      	bics	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	011b      	lsls	r3, r3, #4
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2240      	movs	r2, #64	@ 0x40
 8004ed6:	4393      	bics	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a1b      	ldr	r2, [pc, #108]	@ (8004f4c <TIM_OC2_SetConfig+0xf0>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_OC2_SetConfig+0x9e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8004f50 <TIM_OC2_SetConfig+0xf4>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d007      	beq.n	8004efa <TIM_OC2_SetConfig+0x9e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a19      	ldr	r2, [pc, #100]	@ (8004f54 <TIM_OC2_SetConfig+0xf8>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_OC2_SetConfig+0x9e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a18      	ldr	r2, [pc, #96]	@ (8004f58 <TIM_OC2_SetConfig+0xfc>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d113      	bne.n	8004f22 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4a17      	ldr	r2, [pc, #92]	@ (8004f5c <TIM_OC2_SetConfig+0x100>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4a16      	ldr	r2, [pc, #88]	@ (8004f60 <TIM_OC2_SetConfig+0x104>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	621a      	str	r2, [r3, #32]
}
 8004f3c:	46c0      	nop			@ (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b006      	add	sp, #24
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	feff8fff 	.word	0xfeff8fff
 8004f48:	fffffcff 	.word	0xfffffcff
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800
 8004f5c:	fffffbff 	.word	0xfffffbff
 8004f60:	fffff7ff 	.word	0xfffff7ff

08004f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	4a33      	ldr	r2, [pc, #204]	@ (8005048 <TIM_OC3_SetConfig+0xe4>)
 8004f7a:	401a      	ands	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800504c <TIM_OC3_SetConfig+0xe8>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2203      	movs	r2, #3
 8004f98:	4393      	bics	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	4a29      	ldr	r2, [pc, #164]	@ (8005050 <TIM_OC3_SetConfig+0xec>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a25      	ldr	r2, [pc, #148]	@ (8005054 <TIM_OC3_SetConfig+0xf0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d10d      	bne.n	8004fde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4a24      	ldr	r2, [pc, #144]	@ (8005058 <TIM_OC3_SetConfig+0xf4>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	4a20      	ldr	r2, [pc, #128]	@ (800505c <TIM_OC3_SetConfig+0xf8>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8005054 <TIM_OC3_SetConfig+0xf0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00b      	beq.n	8004ffe <TIM_OC3_SetConfig+0x9a>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8005060 <TIM_OC3_SetConfig+0xfc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_OC3_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8005064 <TIM_OC3_SetConfig+0x100>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC3_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8005068 <TIM_OC3_SetConfig+0x104>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d113      	bne.n	8005026 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <TIM_OC3_SetConfig+0x108>)
 8005002:	4013      	ands	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4a19      	ldr	r2, [pc, #100]	@ (8005070 <TIM_OC3_SetConfig+0x10c>)
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	46c0      	nop			@ (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b006      	add	sp, #24
 8005046:	bd80      	pop	{r7, pc}
 8005048:	fffffeff 	.word	0xfffffeff
 800504c:	fffeff8f 	.word	0xfffeff8f
 8005050:	fffffdff 	.word	0xfffffdff
 8005054:	40012c00 	.word	0x40012c00
 8005058:	fffff7ff 	.word	0xfffff7ff
 800505c:	fffffbff 	.word	0xfffffbff
 8005060:	40014000 	.word	0x40014000
 8005064:	40014400 	.word	0x40014400
 8005068:	40014800 	.word	0x40014800
 800506c:	ffffefff 	.word	0xffffefff
 8005070:	ffffdfff 	.word	0xffffdfff

08005074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	4a26      	ldr	r2, [pc, #152]	@ (8005124 <TIM_OC4_SetConfig+0xb0>)
 800508a:	401a      	ands	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4a22      	ldr	r2, [pc, #136]	@ (8005128 <TIM_OC4_SetConfig+0xb4>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	4a21      	ldr	r2, [pc, #132]	@ (800512c <TIM_OC4_SetConfig+0xb8>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4a1d      	ldr	r2, [pc, #116]	@ (8005130 <TIM_OC4_SetConfig+0xbc>)
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	031b      	lsls	r3, r3, #12
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a19      	ldr	r2, [pc, #100]	@ (8005134 <TIM_OC4_SetConfig+0xc0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00b      	beq.n	80050ec <TIM_OC4_SetConfig+0x78>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a18      	ldr	r2, [pc, #96]	@ (8005138 <TIM_OC4_SetConfig+0xc4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d007      	beq.n	80050ec <TIM_OC4_SetConfig+0x78>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a17      	ldr	r2, [pc, #92]	@ (800513c <TIM_OC4_SetConfig+0xc8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d003      	beq.n	80050ec <TIM_OC4_SetConfig+0x78>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a16      	ldr	r2, [pc, #88]	@ (8005140 <TIM_OC4_SetConfig+0xcc>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d109      	bne.n	8005100 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <TIM_OC4_SetConfig+0xd0>)
 80050f0:	4013      	ands	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	695b      	ldr	r3, [r3, #20]
 80050f8:	019b      	lsls	r3, r3, #6
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	621a      	str	r2, [r3, #32]
}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	46bd      	mov	sp, r7
 800511e:	b006      	add	sp, #24
 8005120:	bd80      	pop	{r7, pc}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	ffffefff 	.word	0xffffefff
 8005128:	feff8fff 	.word	0xfeff8fff
 800512c:	fffffcff 	.word	0xfffffcff
 8005130:	ffffdfff 	.word	0xffffdfff
 8005134:	40012c00 	.word	0x40012c00
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800
 8005144:	ffffbfff 	.word	0xffffbfff

08005148 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4a23      	ldr	r2, [pc, #140]	@ (80051ec <TIM_OC5_SetConfig+0xa4>)
 800515e:	401a      	ands	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a1f      	ldr	r2, [pc, #124]	@ (80051f0 <TIM_OC5_SetConfig+0xa8>)
 8005174:	4013      	ands	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4313      	orrs	r3, r2
 8005180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	4a1b      	ldr	r2, [pc, #108]	@ (80051f4 <TIM_OC5_SetConfig+0xac>)
 8005186:	4013      	ands	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a17      	ldr	r2, [pc, #92]	@ (80051f8 <TIM_OC5_SetConfig+0xb0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_OC5_SetConfig+0x6e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a16      	ldr	r2, [pc, #88]	@ (80051fc <TIM_OC5_SetConfig+0xb4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_OC5_SetConfig+0x6e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a15      	ldr	r2, [pc, #84]	@ (8005200 <TIM_OC5_SetConfig+0xb8>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_OC5_SetConfig+0x6e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a14      	ldr	r2, [pc, #80]	@ (8005204 <TIM_OC5_SetConfig+0xbc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d109      	bne.n	80051ca <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	4a0c      	ldr	r2, [pc, #48]	@ (80051ec <TIM_OC5_SetConfig+0xa4>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	621a      	str	r2, [r3, #32]
}
 80051e4:	46c0      	nop			@ (mov r8, r8)
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b006      	add	sp, #24
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	fffeffff 	.word	0xfffeffff
 80051f0:	fffeff8f 	.word	0xfffeff8f
 80051f4:	fffdffff 	.word	0xfffdffff
 80051f8:	40012c00 	.word	0x40012c00
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800

08005208 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	4a24      	ldr	r2, [pc, #144]	@ (80052b0 <TIM_OC6_SetConfig+0xa8>)
 800521e:	401a      	ands	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4a20      	ldr	r2, [pc, #128]	@ (80052b4 <TIM_OC6_SetConfig+0xac>)
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <TIM_OC6_SetConfig+0xb0>)
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	051b      	lsls	r3, r3, #20
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a18      	ldr	r2, [pc, #96]	@ (80052bc <TIM_OC6_SetConfig+0xb4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_OC6_SetConfig+0x70>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a17      	ldr	r2, [pc, #92]	@ (80052c0 <TIM_OC6_SetConfig+0xb8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_OC6_SetConfig+0x70>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a16      	ldr	r2, [pc, #88]	@ (80052c4 <TIM_OC6_SetConfig+0xbc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC6_SetConfig+0x70>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a15      	ldr	r2, [pc, #84]	@ (80052c8 <TIM_OC6_SetConfig+0xc0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d109      	bne.n	800528c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	4a14      	ldr	r2, [pc, #80]	@ (80052cc <TIM_OC6_SetConfig+0xc4>)
 800527c:	4013      	ands	r3, r2
 800527e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	029b      	lsls	r3, r3, #10
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	46bd      	mov	sp, r7
 80052aa:	b006      	add	sp, #24
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	46c0      	nop			@ (mov r8, r8)
 80052b0:	ffefffff 	.word	0xffefffff
 80052b4:	feff8fff 	.word	0xfeff8fff
 80052b8:	ffdfffff 	.word	0xffdfffff
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800
 80052cc:	fffbffff 	.word	0xfffbffff

080052d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	2201      	movs	r2, #1
 80052e8:	4393      	bics	r3, r2
 80052ea:	001a      	movs	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	22f0      	movs	r2, #240	@ 0xf0
 80052fa:	4393      	bics	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	220a      	movs	r2, #10
 800530c:	4393      	bics	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	46c0      	nop			@ (mov r8, r8)
 8005326:	46bd      	mov	sp, r7
 8005328:	b006      	add	sp, #24
 800532a:	bd80      	pop	{r7, pc}

0800532c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	2210      	movs	r2, #16
 8005344:	4393      	bics	r3, r2
 8005346:	001a      	movs	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4a0d      	ldr	r2, [pc, #52]	@ (800538c <TIM_TI2_ConfigInputStage+0x60>)
 8005356:	4013      	ands	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	031b      	lsls	r3, r3, #12
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	22a0      	movs	r2, #160	@ 0xa0
 8005368:	4393      	bics	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	621a      	str	r2, [r3, #32]
}
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	46bd      	mov	sp, r7
 8005386:	b006      	add	sp, #24
 8005388:	bd80      	pop	{r7, pc}
 800538a:	46c0      	nop			@ (mov r8, r8)
 800538c:	ffff0fff 	.word	0xffff0fff

08005390 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4a08      	ldr	r2, [pc, #32]	@ (80053c4 <TIM_ITRx_SetConfig+0x34>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	2207      	movs	r2, #7
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	609a      	str	r2, [r3, #8]
}
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	46bd      	mov	sp, r7
 80053be:	b004      	add	sp, #16
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	46c0      	nop			@ (mov r8, r8)
 80053c4:	ffcfff8f 	.word	0xffcfff8f

080053c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4a09      	ldr	r2, [pc, #36]	@ (8005404 <TIM_ETR_SetConfig+0x3c>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	021a      	lsls	r2, r3, #8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	609a      	str	r2, [r3, #8]
}
 80053fc:	46c0      	nop			@ (mov r8, r8)
 80053fe:	46bd      	mov	sp, r7
 8005400:	b006      	add	sp, #24
 8005402:	bd80      	pop	{r7, pc}
 8005404:	ffff00ff 	.word	0xffff00ff

08005408 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	223c      	movs	r2, #60	@ 0x3c
 8005416:	5c9b      	ldrb	r3, [r3, r2]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800541c:	2302      	movs	r3, #2
 800541e:	e04f      	b.n	80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	223c      	movs	r2, #60	@ 0x3c
 8005424:	2101      	movs	r1, #1
 8005426:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	223d      	movs	r2, #61	@ 0x3d
 800542c:	2102      	movs	r1, #2
 800542e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a20      	ldr	r2, [pc, #128]	@ (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	4a1f      	ldr	r2, [pc, #124]	@ (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800544e:	4013      	ands	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2270      	movs	r2, #112	@ 0x70
 8005460:	4393      	bics	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a13      	ldr	r2, [pc, #76]	@ (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a12      	ldr	r2, [pc, #72]	@ (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a11      	ldr	r2, [pc, #68]	@ (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10c      	bne.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2280      	movs	r2, #128	@ 0x80
 8005498:	4393      	bics	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	223d      	movs	r2, #61	@ 0x3d
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	223c      	movs	r2, #60	@ 0x3c
 80054ba:	2100      	movs	r1, #0
 80054bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b004      	add	sp, #16
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	ff0fffff 	.word	0xff0fffff
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40014000 	.word	0x40014000

080054d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054e0:	46c0      	nop			@ (mov r8, r8)
 80054e2:	46bd      	mov	sp, r7
 80054e4:	b002      	add	sp, #8
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054f0:	46c0      	nop			@ (mov r8, r8)
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005500:	46c0      	nop			@ (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e046      	b.n	80055a8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2288      	movs	r2, #136	@ 0x88
 800551e:	589b      	ldr	r3, [r3, r2]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2284      	movs	r2, #132	@ 0x84
 8005528:	2100      	movs	r1, #0
 800552a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	0018      	movs	r0, r3
 8005530:	f7fb ffac 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2288      	movs	r2, #136	@ 0x88
 8005538:	2124      	movs	r1, #36	@ 0x24
 800553a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2101      	movs	r1, #1
 8005548:	438a      	bics	r2, r1
 800554a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 f9d0 	bl	80058fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0018      	movs	r0, r3
 8005560:	f000 f828 	bl	80055b4 <UART_SetConfig>
 8005564:	0003      	movs	r3, r0
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e01c      	b.n	80055a8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	490d      	ldr	r1, [pc, #52]	@ (80055b0 <HAL_UART_Init+0xa8>)
 800557a:	400a      	ands	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	212a      	movs	r1, #42	@ 0x2a
 800558a:	438a      	bics	r2, r1
 800558c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2101      	movs	r1, #1
 800559a:	430a      	orrs	r2, r1
 800559c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 fa5f 	bl	8005a64 <UART_CheckIdleState>
 80055a6:	0003      	movs	r3, r0
}
 80055a8:	0018      	movs	r0, r3
 80055aa:	46bd      	mov	sp, r7
 80055ac:	b002      	add	sp, #8
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	ffffb7ff 	.word	0xffffb7ff

080055b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055bc:	231a      	movs	r3, #26
 80055be:	18fb      	adds	r3, r7, r3
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	4313      	orrs	r3, r2
 80055da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4abc      	ldr	r2, [pc, #752]	@ (80058d4 <UART_SetConfig+0x320>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	0019      	movs	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	4ab7      	ldr	r2, [pc, #732]	@ (80058d8 <UART_SetConfig+0x324>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	69fa      	ldr	r2, [r7, #28]
 8005616:	4313      	orrs	r3, r2
 8005618:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	4aae      	ldr	r2, [pc, #696]	@ (80058dc <UART_SetConfig+0x328>)
 8005622:	4013      	ands	r3, r2
 8005624:	0019      	movs	r1, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	220f      	movs	r2, #15
 8005638:	4393      	bics	r3, r2
 800563a:	0019      	movs	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4aa4      	ldr	r2, [pc, #656]	@ (80058e0 <UART_SetConfig+0x32c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d127      	bne.n	80056a2 <UART_SetConfig+0xee>
 8005652:	4ba4      	ldr	r3, [pc, #656]	@ (80058e4 <UART_SetConfig+0x330>)
 8005654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005656:	2203      	movs	r2, #3
 8005658:	4013      	ands	r3, r2
 800565a:	2b03      	cmp	r3, #3
 800565c:	d017      	beq.n	800568e <UART_SetConfig+0xda>
 800565e:	d81b      	bhi.n	8005698 <UART_SetConfig+0xe4>
 8005660:	2b02      	cmp	r3, #2
 8005662:	d00a      	beq.n	800567a <UART_SetConfig+0xc6>
 8005664:	d818      	bhi.n	8005698 <UART_SetConfig+0xe4>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <UART_SetConfig+0xbc>
 800566a:	2b01      	cmp	r3, #1
 800566c:	d00a      	beq.n	8005684 <UART_SetConfig+0xd0>
 800566e:	e013      	b.n	8005698 <UART_SetConfig+0xe4>
 8005670:	231b      	movs	r3, #27
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
 8005678:	e058      	b.n	800572c <UART_SetConfig+0x178>
 800567a:	231b      	movs	r3, #27
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	2202      	movs	r2, #2
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e053      	b.n	800572c <UART_SetConfig+0x178>
 8005684:	231b      	movs	r3, #27
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2204      	movs	r2, #4
 800568a:	701a      	strb	r2, [r3, #0]
 800568c:	e04e      	b.n	800572c <UART_SetConfig+0x178>
 800568e:	231b      	movs	r3, #27
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	2208      	movs	r2, #8
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	e049      	b.n	800572c <UART_SetConfig+0x178>
 8005698:	231b      	movs	r3, #27
 800569a:	18fb      	adds	r3, r7, r3
 800569c:	2210      	movs	r2, #16
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e044      	b.n	800572c <UART_SetConfig+0x178>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a90      	ldr	r2, [pc, #576]	@ (80058e8 <UART_SetConfig+0x334>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d127      	bne.n	80056fc <UART_SetConfig+0x148>
 80056ac:	4b8d      	ldr	r3, [pc, #564]	@ (80058e4 <UART_SetConfig+0x330>)
 80056ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b0:	220c      	movs	r2, #12
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	d017      	beq.n	80056e8 <UART_SetConfig+0x134>
 80056b8:	d81b      	bhi.n	80056f2 <UART_SetConfig+0x13e>
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d00a      	beq.n	80056d4 <UART_SetConfig+0x120>
 80056be:	d818      	bhi.n	80056f2 <UART_SetConfig+0x13e>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <UART_SetConfig+0x116>
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d00a      	beq.n	80056de <UART_SetConfig+0x12a>
 80056c8:	e013      	b.n	80056f2 <UART_SetConfig+0x13e>
 80056ca:	231b      	movs	r3, #27
 80056cc:	18fb      	adds	r3, r7, r3
 80056ce:	2200      	movs	r2, #0
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e02b      	b.n	800572c <UART_SetConfig+0x178>
 80056d4:	231b      	movs	r3, #27
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	2202      	movs	r2, #2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	e026      	b.n	800572c <UART_SetConfig+0x178>
 80056de:	231b      	movs	r3, #27
 80056e0:	18fb      	adds	r3, r7, r3
 80056e2:	2204      	movs	r2, #4
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e021      	b.n	800572c <UART_SetConfig+0x178>
 80056e8:	231b      	movs	r3, #27
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2208      	movs	r2, #8
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e01c      	b.n	800572c <UART_SetConfig+0x178>
 80056f2:	231b      	movs	r3, #27
 80056f4:	18fb      	adds	r3, r7, r3
 80056f6:	2210      	movs	r2, #16
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e017      	b.n	800572c <UART_SetConfig+0x178>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a7a      	ldr	r2, [pc, #488]	@ (80058ec <UART_SetConfig+0x338>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d104      	bne.n	8005710 <UART_SetConfig+0x15c>
 8005706:	231b      	movs	r3, #27
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e00d      	b.n	800572c <UART_SetConfig+0x178>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a76      	ldr	r2, [pc, #472]	@ (80058f0 <UART_SetConfig+0x33c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d104      	bne.n	8005724 <UART_SetConfig+0x170>
 800571a:	231b      	movs	r3, #27
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	e003      	b.n	800572c <UART_SetConfig+0x178>
 8005724:	231b      	movs	r3, #27
 8005726:	18fb      	adds	r3, r7, r3
 8005728:	2210      	movs	r2, #16
 800572a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	429a      	cmp	r2, r3
 8005736:	d000      	beq.n	800573a <UART_SetConfig+0x186>
 8005738:	e065      	b.n	8005806 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800573a:	231b      	movs	r3, #27
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b08      	cmp	r3, #8
 8005742:	d015      	beq.n	8005770 <UART_SetConfig+0x1bc>
 8005744:	dc18      	bgt.n	8005778 <UART_SetConfig+0x1c4>
 8005746:	2b04      	cmp	r3, #4
 8005748:	d00d      	beq.n	8005766 <UART_SetConfig+0x1b2>
 800574a:	dc15      	bgt.n	8005778 <UART_SetConfig+0x1c4>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <UART_SetConfig+0x1a2>
 8005750:	2b02      	cmp	r3, #2
 8005752:	d005      	beq.n	8005760 <UART_SetConfig+0x1ac>
 8005754:	e010      	b.n	8005778 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005756:	f7fe fb33 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 800575a:	0003      	movs	r3, r0
 800575c:	617b      	str	r3, [r7, #20]
        break;
 800575e:	e012      	b.n	8005786 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005760:	4b64      	ldr	r3, [pc, #400]	@ (80058f4 <UART_SetConfig+0x340>)
 8005762:	617b      	str	r3, [r7, #20]
        break;
 8005764:	e00f      	b.n	8005786 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005766:	f7fe fa9f 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 800576a:	0003      	movs	r3, r0
 800576c:	617b      	str	r3, [r7, #20]
        break;
 800576e:	e00a      	b.n	8005786 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005770:	2380      	movs	r3, #128	@ 0x80
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	617b      	str	r3, [r7, #20]
        break;
 8005776:	e006      	b.n	8005786 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800577c:	231a      	movs	r3, #26
 800577e:	18fb      	adds	r3, r7, r3
 8005780:	2201      	movs	r2, #1
 8005782:	701a      	strb	r2, [r3, #0]
        break;
 8005784:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d100      	bne.n	800578e <UART_SetConfig+0x1da>
 800578c:	e08d      	b.n	80058aa <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005792:	4b59      	ldr	r3, [pc, #356]	@ (80058f8 <UART_SetConfig+0x344>)
 8005794:	0052      	lsls	r2, r2, #1
 8005796:	5ad3      	ldrh	r3, [r2, r3]
 8005798:	0019      	movs	r1, r3
 800579a:	6978      	ldr	r0, [r7, #20]
 800579c:	f7fa fcb4 	bl	8000108 <__udivsi3>
 80057a0:	0003      	movs	r3, r0
 80057a2:	005a      	lsls	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	18d2      	adds	r2, r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	0019      	movs	r1, r3
 80057b2:	0010      	movs	r0, r2
 80057b4:	f7fa fca8 	bl	8000108 <__udivsi3>
 80057b8:	0003      	movs	r3, r0
 80057ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b0f      	cmp	r3, #15
 80057c0:	d91c      	bls.n	80057fc <UART_SetConfig+0x248>
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	2380      	movs	r3, #128	@ 0x80
 80057c6:	025b      	lsls	r3, r3, #9
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d217      	bcs.n	80057fc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	200e      	movs	r0, #14
 80057d2:	183b      	adds	r3, r7, r0
 80057d4:	210f      	movs	r1, #15
 80057d6:	438a      	bics	r2, r1
 80057d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2207      	movs	r2, #7
 80057e2:	4013      	ands	r3, r2
 80057e4:	b299      	uxth	r1, r3
 80057e6:	183b      	adds	r3, r7, r0
 80057e8:	183a      	adds	r2, r7, r0
 80057ea:	8812      	ldrh	r2, [r2, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	183a      	adds	r2, r7, r0
 80057f6:	8812      	ldrh	r2, [r2, #0]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	e056      	b.n	80058aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80057fc:	231a      	movs	r3, #26
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e051      	b.n	80058aa <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005806:	231b      	movs	r3, #27
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b08      	cmp	r3, #8
 800580e:	d015      	beq.n	800583c <UART_SetConfig+0x288>
 8005810:	dc18      	bgt.n	8005844 <UART_SetConfig+0x290>
 8005812:	2b04      	cmp	r3, #4
 8005814:	d00d      	beq.n	8005832 <UART_SetConfig+0x27e>
 8005816:	dc15      	bgt.n	8005844 <UART_SetConfig+0x290>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <UART_SetConfig+0x26e>
 800581c:	2b02      	cmp	r3, #2
 800581e:	d005      	beq.n	800582c <UART_SetConfig+0x278>
 8005820:	e010      	b.n	8005844 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005822:	f7fe facd 	bl	8003dc0 <HAL_RCC_GetPCLK1Freq>
 8005826:	0003      	movs	r3, r0
 8005828:	617b      	str	r3, [r7, #20]
        break;
 800582a:	e012      	b.n	8005852 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582c:	4b31      	ldr	r3, [pc, #196]	@ (80058f4 <UART_SetConfig+0x340>)
 800582e:	617b      	str	r3, [r7, #20]
        break;
 8005830:	e00f      	b.n	8005852 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005832:	f7fe fa39 	bl	8003ca8 <HAL_RCC_GetSysClockFreq>
 8005836:	0003      	movs	r3, r0
 8005838:	617b      	str	r3, [r7, #20]
        break;
 800583a:	e00a      	b.n	8005852 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	617b      	str	r3, [r7, #20]
        break;
 8005842:	e006      	b.n	8005852 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005848:	231a      	movs	r3, #26
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	2201      	movs	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
        break;
 8005850:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d028      	beq.n	80058aa <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800585c:	4b26      	ldr	r3, [pc, #152]	@ (80058f8 <UART_SetConfig+0x344>)
 800585e:	0052      	lsls	r2, r2, #1
 8005860:	5ad3      	ldrh	r3, [r2, r3]
 8005862:	0019      	movs	r1, r3
 8005864:	6978      	ldr	r0, [r7, #20]
 8005866:	f7fa fc4f 	bl	8000108 <__udivsi3>
 800586a:	0003      	movs	r3, r0
 800586c:	001a      	movs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	085b      	lsrs	r3, r3, #1
 8005874:	18d2      	adds	r2, r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	0019      	movs	r1, r3
 800587c:	0010      	movs	r0, r2
 800587e:	f7fa fc43 	bl	8000108 <__udivsi3>
 8005882:	0003      	movs	r3, r0
 8005884:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b0f      	cmp	r3, #15
 800588a:	d90a      	bls.n	80058a2 <UART_SetConfig+0x2ee>
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	2380      	movs	r3, #128	@ 0x80
 8005890:	025b      	lsls	r3, r3, #9
 8005892:	429a      	cmp	r2, r3
 8005894:	d205      	bcs.n	80058a2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	b29a      	uxth	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60da      	str	r2, [r3, #12]
 80058a0:	e003      	b.n	80058aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80058a2:	231a      	movs	r3, #26
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	226a      	movs	r2, #106	@ 0x6a
 80058ae:	2101      	movs	r1, #1
 80058b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2268      	movs	r2, #104	@ 0x68
 80058b6:	2101      	movs	r1, #1
 80058b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058c6:	231a      	movs	r3, #26
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	781b      	ldrb	r3, [r3, #0]
}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b008      	add	sp, #32
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	cfff69f3 	.word	0xcfff69f3
 80058d8:	ffffcfff 	.word	0xffffcfff
 80058dc:	11fff4ff 	.word	0x11fff4ff
 80058e0:	40013800 	.word	0x40013800
 80058e4:	40021000 	.word	0x40021000
 80058e8:	40004400 	.word	0x40004400
 80058ec:	40004800 	.word	0x40004800
 80058f0:	40004c00 	.word	0x40004c00
 80058f4:	00f42400 	.word	0x00f42400
 80058f8:	0800b1f4 	.word	0x0800b1f4

080058fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	2208      	movs	r2, #8
 800590a:	4013      	ands	r3, r2
 800590c:	d00b      	beq.n	8005926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a4a      	ldr	r2, [pc, #296]	@ (8005a40 <UART_AdvFeatureConfig+0x144>)
 8005916:	4013      	ands	r3, r2
 8005918:	0019      	movs	r1, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592a:	2201      	movs	r2, #1
 800592c:	4013      	ands	r3, r2
 800592e:	d00b      	beq.n	8005948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4a43      	ldr	r2, [pc, #268]	@ (8005a44 <UART_AdvFeatureConfig+0x148>)
 8005938:	4013      	ands	r3, r2
 800593a:	0019      	movs	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594c:	2202      	movs	r2, #2
 800594e:	4013      	ands	r3, r2
 8005950:	d00b      	beq.n	800596a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4a3b      	ldr	r2, [pc, #236]	@ (8005a48 <UART_AdvFeatureConfig+0x14c>)
 800595a:	4013      	ands	r3, r2
 800595c:	0019      	movs	r1, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596e:	2204      	movs	r2, #4
 8005970:	4013      	ands	r3, r2
 8005972:	d00b      	beq.n	800598c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4a34      	ldr	r2, [pc, #208]	@ (8005a4c <UART_AdvFeatureConfig+0x150>)
 800597c:	4013      	ands	r3, r2
 800597e:	0019      	movs	r1, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	2210      	movs	r2, #16
 8005992:	4013      	ands	r3, r2
 8005994:	d00b      	beq.n	80059ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4a2c      	ldr	r2, [pc, #176]	@ (8005a50 <UART_AdvFeatureConfig+0x154>)
 800599e:	4013      	ands	r3, r2
 80059a0:	0019      	movs	r1, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b2:	2220      	movs	r2, #32
 80059b4:	4013      	ands	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	4a25      	ldr	r2, [pc, #148]	@ (8005a54 <UART_AdvFeatureConfig+0x158>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	0019      	movs	r1, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d4:	2240      	movs	r2, #64	@ 0x40
 80059d6:	4013      	ands	r3, r2
 80059d8:	d01d      	beq.n	8005a16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a58 <UART_AdvFeatureConfig+0x15c>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	0019      	movs	r1, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059f6:	2380      	movs	r3, #128	@ 0x80
 80059f8:	035b      	lsls	r3, r3, #13
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d10b      	bne.n	8005a16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	4a15      	ldr	r2, [pc, #84]	@ (8005a5c <UART_AdvFeatureConfig+0x160>)
 8005a06:	4013      	ands	r3, r2
 8005a08:	0019      	movs	r1, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1a:	2280      	movs	r2, #128	@ 0x80
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d00b      	beq.n	8005a38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4a0e      	ldr	r2, [pc, #56]	@ (8005a60 <UART_AdvFeatureConfig+0x164>)
 8005a28:	4013      	ands	r3, r2
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	605a      	str	r2, [r3, #4]
  }
}
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b002      	add	sp, #8
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	ffff7fff 	.word	0xffff7fff
 8005a44:	fffdffff 	.word	0xfffdffff
 8005a48:	fffeffff 	.word	0xfffeffff
 8005a4c:	fffbffff 	.word	0xfffbffff
 8005a50:	ffffefff 	.word	0xffffefff
 8005a54:	ffffdfff 	.word	0xffffdfff
 8005a58:	ffefffff 	.word	0xffefffff
 8005a5c:	ff9fffff 	.word	0xff9fffff
 8005a60:	fff7ffff 	.word	0xfff7ffff

08005a64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b092      	sub	sp, #72	@ 0x48
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2290      	movs	r2, #144	@ 0x90
 8005a70:	2100      	movs	r1, #0
 8005a72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a74:	f7fb fdc8 	bl	8001608 <HAL_GetTick>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2208      	movs	r2, #8
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d12d      	bne.n	8005ae6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a8c:	2280      	movs	r2, #128	@ 0x80
 8005a8e:	0391      	lsls	r1, r2, #14
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	4a47      	ldr	r2, [pc, #284]	@ (8005bb0 <UART_CheckIdleState+0x14c>)
 8005a94:	9200      	str	r2, [sp, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f000 f88e 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8005a9c:	1e03      	subs	r3, r0, #0
 8005a9e:	d022      	beq.n	8005ae6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005aaa:	2301      	movs	r3, #1
 8005aac:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab0:	f383 8810 	msr	PRIMASK, r3
}
 8005ab4:	46c0      	nop			@ (mov r8, r8)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2180      	movs	r1, #128	@ 0x80
 8005ac2:	438a      	bics	r2, r1
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005acc:	f383 8810 	msr	PRIMASK, r3
}
 8005ad0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2288      	movs	r2, #136	@ 0x88
 8005ad6:	2120      	movs	r1, #32
 8005ad8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2284      	movs	r2, #132	@ 0x84
 8005ade:	2100      	movs	r1, #0
 8005ae0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e060      	b.n	8005ba8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2204      	movs	r2, #4
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d146      	bne.n	8005b82 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af6:	2280      	movs	r2, #128	@ 0x80
 8005af8:	03d1      	lsls	r1, r2, #15
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb0 <UART_CheckIdleState+0x14c>)
 8005afe:	9200      	str	r2, [sp, #0]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f000 f859 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8005b06:	1e03      	subs	r3, r0, #0
 8005b08:	d03b      	beq.n	8005b82 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005b0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b10:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b14:	2301      	movs	r3, #1
 8005b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	f383 8810 	msr	PRIMASK, r3
}
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4922      	ldr	r1, [pc, #136]	@ (8005bb4 <UART_CheckIdleState+0x150>)
 8005b2c:	400a      	ands	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f383 8810 	msr	PRIMASK, r3
}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b40:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b42:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b46:	2301      	movs	r3, #1
 8005b48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	f383 8810 	msr	PRIMASK, r3
}
 8005b50:	46c0      	nop			@ (mov r8, r8)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	438a      	bics	r2, r1
 8005b60:	609a      	str	r2, [r3, #8]
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	f383 8810 	msr	PRIMASK, r3
}
 8005b6c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	228c      	movs	r2, #140	@ 0x8c
 8005b72:	2120      	movs	r1, #32
 8005b74:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2284      	movs	r2, #132	@ 0x84
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e012      	b.n	8005ba8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2288      	movs	r2, #136	@ 0x88
 8005b86:	2120      	movs	r1, #32
 8005b88:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	228c      	movs	r2, #140	@ 0x8c
 8005b8e:	2120      	movs	r1, #32
 8005b90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2284      	movs	r2, #132	@ 0x84
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	0018      	movs	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b010      	add	sp, #64	@ 0x40
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	01ffffff 	.word	0x01ffffff
 8005bb4:	fffffedf 	.word	0xfffffedf

08005bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	1dfb      	adds	r3, r7, #7
 8005bc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc8:	e051      	b.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	d04e      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd0:	f7fb fd1a 	bl	8001608 <HAL_GetTick>
 8005bd4:	0002      	movs	r2, r0
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d302      	bcc.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e051      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d03b      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b80      	cmp	r3, #128	@ 0x80
 8005bfa:	d038      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b40      	cmp	r3, #64	@ 0x40
 8005c00:	d035      	beq.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d111      	bne.n	8005c34 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2208      	movs	r2, #8
 8005c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f000 f83c 	bl	8005c98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2290      	movs	r2, #144	@ 0x90
 8005c24:	2108      	movs	r1, #8
 8005c26:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2284      	movs	r2, #132	@ 0x84
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e02c      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69da      	ldr	r2, [r3, #28]
 8005c3a:	2380      	movs	r3, #128	@ 0x80
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	401a      	ands	r2, r3
 8005c40:	2380      	movs	r3, #128	@ 0x80
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d112      	bne.n	8005c6e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2280      	movs	r2, #128	@ 0x80
 8005c4e:	0112      	lsls	r2, r2, #4
 8005c50:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	0018      	movs	r0, r3
 8005c56:	f000 f81f 	bl	8005c98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2290      	movs	r2, #144	@ 0x90
 8005c5e:	2120      	movs	r1, #32
 8005c60:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2284      	movs	r2, #132	@ 0x84
 8005c66:	2100      	movs	r1, #0
 8005c68:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e00f      	b.n	8005c8e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	425a      	negs	r2, r3
 8005c7e:	4153      	adcs	r3, r2
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	001a      	movs	r2, r3
 8005c84:	1dfb      	adds	r3, r7, #7
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d09e      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	0018      	movs	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	b004      	add	sp, #16
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08e      	sub	sp, #56	@ 0x38
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ca6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005caa:	2301      	movs	r3, #1
 8005cac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	f383 8810 	msr	PRIMASK, r3
}
 8005cb4:	46c0      	nop			@ (mov r8, r8)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4926      	ldr	r1, [pc, #152]	@ (8005d5c <UART_EndRxTransfer+0xc4>)
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	601a      	str	r2, [r3, #0]
 8005cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	f383 8810 	msr	PRIMASK, r3
}
 8005cd0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd6:	623b      	str	r3, [r7, #32]
  return(result);
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cdc:	2301      	movs	r3, #1
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	f383 8810 	msr	PRIMASK, r3
}
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	491b      	ldr	r1, [pc, #108]	@ (8005d60 <UART_EndRxTransfer+0xc8>)
 8005cf4:	400a      	ands	r2, r1
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	f383 8810 	msr	PRIMASK, r3
}
 8005d02:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d118      	bne.n	8005d3e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d10:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d12:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d16:	2301      	movs	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f383 8810 	msr	PRIMASK, r3
}
 8005d20:	46c0      	nop			@ (mov r8, r8)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2110      	movs	r1, #16
 8005d2e:	438a      	bics	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f383 8810 	msr	PRIMASK, r3
}
 8005d3c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	228c      	movs	r2, #140	@ 0x8c
 8005d42:	2120      	movs	r1, #32
 8005d44:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d52:	46c0      	nop			@ (mov r8, r8)
 8005d54:	46bd      	mov	sp, r7
 8005d56:	b00e      	add	sp, #56	@ 0x38
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	46c0      	nop			@ (mov r8, r8)
 8005d5c:	fffffedf 	.word	0xfffffedf
 8005d60:	effffffe 	.word	0xeffffffe

08005d64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2284      	movs	r2, #132	@ 0x84
 8005d70:	5c9b      	ldrb	r3, [r3, r2]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_UARTEx_DisableFifoMode+0x16>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e027      	b.n	8005dca <HAL_UARTEx_DisableFifoMode+0x66>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2284      	movs	r2, #132	@ 0x84
 8005d7e:	2101      	movs	r1, #1
 8005d80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2288      	movs	r2, #136	@ 0x88
 8005d86:	2124      	movs	r1, #36	@ 0x24
 8005d88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	438a      	bics	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a0b      	ldr	r2, [pc, #44]	@ (8005dd4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2288      	movs	r2, #136	@ 0x88
 8005dbc:	2120      	movs	r1, #32
 8005dbe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2284      	movs	r2, #132	@ 0x84
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	0018      	movs	r0, r3
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	b004      	add	sp, #16
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	dfffffff 	.word	0xdfffffff

08005dd8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2284      	movs	r2, #132	@ 0x84
 8005de6:	5c9b      	ldrb	r3, [r3, r2]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e02e      	b.n	8005e4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2284      	movs	r2, #132	@ 0x84
 8005df4:	2101      	movs	r1, #1
 8005df6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2288      	movs	r2, #136	@ 0x88
 8005dfc:	2124      	movs	r1, #36	@ 0x24
 8005dfe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2101      	movs	r1, #1
 8005e14:	438a      	bics	r2, r1
 8005e16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	08d9      	lsrs	r1, r3, #3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f000 f854 	bl	8005edc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2288      	movs	r2, #136	@ 0x88
 8005e40:	2120      	movs	r1, #32
 8005e42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2284      	movs	r2, #132	@ 0x84
 8005e48:	2100      	movs	r1, #0
 8005e4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	0018      	movs	r0, r3
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b004      	add	sp, #16
 8005e54:	bd80      	pop	{r7, pc}
	...

08005e58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2284      	movs	r2, #132	@ 0x84
 8005e66:	5c9b      	ldrb	r3, [r3, r2]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e02f      	b.n	8005ed0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2284      	movs	r2, #132	@ 0x84
 8005e74:	2101      	movs	r1, #1
 8005e76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2288      	movs	r2, #136	@ 0x88
 8005e7c:	2124      	movs	r1, #36	@ 0x24
 8005e7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2101      	movs	r1, #1
 8005e94:	438a      	bics	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005ed8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 f813 	bl	8005edc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2288      	movs	r2, #136	@ 0x88
 8005ec2:	2120      	movs	r1, #32
 8005ec4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2284      	movs	r2, #132	@ 0x84
 8005eca:	2100      	movs	r1, #0
 8005ecc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b004      	add	sp, #16
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	f1ffffff 	.word	0xf1ffffff

08005edc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d108      	bne.n	8005efe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	226a      	movs	r2, #106	@ 0x6a
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2268      	movs	r2, #104	@ 0x68
 8005ef8:	2101      	movs	r1, #1
 8005efa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005efc:	e043      	b.n	8005f86 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005efe:	260f      	movs	r6, #15
 8005f00:	19bb      	adds	r3, r7, r6
 8005f02:	2208      	movs	r2, #8
 8005f04:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f06:	200e      	movs	r0, #14
 8005f08:	183b      	adds	r3, r7, r0
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	0e5b      	lsrs	r3, r3, #25
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	240d      	movs	r4, #13
 8005f1a:	193b      	adds	r3, r7, r4
 8005f1c:	2107      	movs	r1, #7
 8005f1e:	400a      	ands	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	0f5b      	lsrs	r3, r3, #29
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	250c      	movs	r5, #12
 8005f2e:	197b      	adds	r3, r7, r5
 8005f30:	2107      	movs	r1, #7
 8005f32:	400a      	ands	r2, r1
 8005f34:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f36:	183b      	adds	r3, r7, r0
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	197a      	adds	r2, r7, r5
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	4914      	ldr	r1, [pc, #80]	@ (8005f90 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f40:	5c8a      	ldrb	r2, [r1, r2]
 8005f42:	435a      	muls	r2, r3
 8005f44:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f46:	197b      	adds	r3, r7, r5
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	4a12      	ldr	r2, [pc, #72]	@ (8005f94 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f4e:	0019      	movs	r1, r3
 8005f50:	f7fa f964 	bl	800021c <__divsi3>
 8005f54:	0003      	movs	r3, r0
 8005f56:	b299      	uxth	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	226a      	movs	r2, #106	@ 0x6a
 8005f5c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f5e:	19bb      	adds	r3, r7, r6
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	193a      	adds	r2, r7, r4
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	490a      	ldr	r1, [pc, #40]	@ (8005f90 <UARTEx_SetNbDataToProcess+0xb4>)
 8005f68:	5c8a      	ldrb	r2, [r1, r2]
 8005f6a:	435a      	muls	r2, r3
 8005f6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f6e:	193b      	adds	r3, r7, r4
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	4a08      	ldr	r2, [pc, #32]	@ (8005f94 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f76:	0019      	movs	r1, r3
 8005f78:	f7fa f950 	bl	800021c <__divsi3>
 8005f7c:	0003      	movs	r3, r0
 8005f7e:	b299      	uxth	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2268      	movs	r2, #104	@ 0x68
 8005f84:	5299      	strh	r1, [r3, r2]
}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	b005      	add	sp, #20
 8005f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	0800b20c 	.word	0x0800b20c
 8005f94:	0800b214 	.word	0x0800b214

08005f98 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8005f9c:	4a08      	ldr	r2, [pc, #32]	@ (8005fc0 <MX_FATFS_Init+0x28>)
 8005f9e:	4b09      	ldr	r3, [pc, #36]	@ (8005fc4 <MX_FATFS_Init+0x2c>)
 8005fa0:	0011      	movs	r1, r2
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f002 fc3c 	bl	8008820 <FATFS_LinkDriver>
 8005fa8:	1e03      	subs	r3, r0, #0
 8005faa:	d002      	beq.n	8005fb2 <MX_FATFS_Init+0x1a>
  /* USER CODE BEGIN FATFS_Init */
	{
		return APP_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	425b      	negs	r3, r3
 8005fb0:	e003      	b.n	8005fba <MX_FATFS_Init+0x22>
	}
	else
	{
		Appli_state = APPLICATION_INIT; // also defined in usb_host.c
 8005fb2:	4b05      	ldr	r3, [pc, #20]	@ (8005fc8 <MX_FATFS_Init+0x30>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
		return APP_OK;
 8005fb8:	2300      	movs	r3, #0
	}
  /* USER CODE END FATFS_Init */
}
 8005fba:	0018      	movs	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	20000ad0 	.word	0x20000ad0
 8005fc4:	200000cc 	.word	0x200000cc
 8005fc8:	20000ad4 	.word	0x20000ad4

08005fcc <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 8005fd0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	0002      	movs	r2, r0
 8005fe0:	1dfb      	adds	r3, r7, #7
 8005fe2:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005fe4:	4b04      	ldr	r3, [pc, #16]	@ (8005ff8 <USER_initialize+0x20>)
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005fea:	4b03      	ldr	r3, [pc, #12]	@ (8005ff8 <USER_initialize+0x20>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b002      	add	sp, #8
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	200000c9 	.word	0x200000c9

08005ffc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	0002      	movs	r2, r0
 8006004:	1dfb      	adds	r3, r7, #7
 8006006:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006008:	4b04      	ldr	r3, [pc, #16]	@ (800601c <USER_status+0x20>)
 800600a:	2201      	movs	r2, #1
 800600c:	701a      	strb	r2, [r3, #0]
    return Stat;
 800600e:	4b03      	ldr	r3, [pc, #12]	@ (800601c <USER_status+0x20>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006014:	0018      	movs	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	b002      	add	sp, #8
 800601a:	bd80      	pop	{r7, pc}
 800601c:	200000c9 	.word	0x200000c9

08006020 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	230f      	movs	r3, #15
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	1c02      	adds	r2, r0, #0
 8006032:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006034:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006036:	0018      	movs	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	b004      	add	sp, #16
 800603c:	bd80      	pop	{r7, pc}

0800603e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
 800604a:	230f      	movs	r3, #15
 800604c:	18fb      	adds	r3, r7, r3
 800604e:	1c02      	adds	r2, r0, #0
 8006050:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006052:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006054:	0018      	movs	r0, r3
 8006056:	46bd      	mov	sp, r7
 8006058:	b004      	add	sp, #16
 800605a:	bd80      	pop	{r7, pc}

0800605c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	603a      	str	r2, [r7, #0]
 8006064:	1dfb      	adds	r3, r7, #7
 8006066:	1c02      	adds	r2, r0, #0
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	1dbb      	adds	r3, r7, #6
 800606c:	1c0a      	adds	r2, r1, #0
 800606e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006070:	210f      	movs	r1, #15
 8006072:	187b      	adds	r3, r7, r1
 8006074:	2201      	movs	r2, #1
 8006076:	701a      	strb	r2, [r3, #0]
    return res;
 8006078:	187b      	adds	r3, r7, r1
 800607a:	781b      	ldrb	r3, [r3, #0]
  /* USER CODE END IOCTL */
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b004      	add	sp, #16
 8006082:	bd80      	pop	{r7, pc}

08006084 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006084:	b5b0      	push	{r4, r5, r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	0002      	movs	r2, r0
 800608c:	1dfb      	adds	r3, r7, #7
 800608e:	701a      	strb	r2, [r3, #0]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006090:	1dfb      	adds	r3, r7, #7
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	4a0b      	ldr	r2, [pc, #44]	@ (80060c4 <disk_status+0x40>)
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	18d3      	adds	r3, r2, r3
 800609a:	3304      	adds	r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	1dfa      	adds	r2, r7, #7
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	4907      	ldr	r1, [pc, #28]	@ (80060c4 <disk_status+0x40>)
 80060a6:	188a      	adds	r2, r1, r2
 80060a8:	7a12      	ldrb	r2, [r2, #8]
 80060aa:	250f      	movs	r5, #15
 80060ac:	197c      	adds	r4, r7, r5
 80060ae:	0010      	movs	r0, r2
 80060b0:	4798      	blx	r3
 80060b2:	0003      	movs	r3, r0
 80060b4:	7023      	strb	r3, [r4, #0]
  return stat;
 80060b6:	197b      	adds	r3, r7, r5
 80060b8:	781b      	ldrb	r3, [r3, #0]
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bdb0      	pop	{r4, r5, r7, pc}
 80060c2:	46c0      	nop			@ (mov r8, r8)
 80060c4:	20000b00 	.word	0x20000b00

080060c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80060c8:	b590      	push	{r4, r7, lr}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	0002      	movs	r2, r0
 80060d0:	1dfb      	adds	r3, r7, #7
 80060d2:	701a      	strb	r2, [r3, #0]
  DSTATUS stat = RES_OK;
 80060d4:	200f      	movs	r0, #15
 80060d6:	183b      	adds	r3, r7, r0
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]

  if(disk.is_initialized[pdrv] == 0)
 80060dc:	1dfb      	adds	r3, r7, #7
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	4a10      	ldr	r2, [pc, #64]	@ (8006124 <disk_initialize+0x5c>)
 80060e2:	5cd3      	ldrb	r3, [r2, r3]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d116      	bne.n	8006116 <disk_initialize+0x4e>
  {
    disk.is_initialized[pdrv] = 1;
 80060e8:	1dfb      	adds	r3, r7, #7
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006124 <disk_initialize+0x5c>)
 80060ee:	2101      	movs	r1, #1
 80060f0:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80060f2:	1dfb      	adds	r3, r7, #7
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006124 <disk_initialize+0x5c>)
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	18d3      	adds	r3, r2, r3
 80060fc:	3304      	adds	r3, #4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	1dfa      	adds	r2, r7, #7
 8006104:	7812      	ldrb	r2, [r2, #0]
 8006106:	4907      	ldr	r1, [pc, #28]	@ (8006124 <disk_initialize+0x5c>)
 8006108:	188a      	adds	r2, r1, r2
 800610a:	7a12      	ldrb	r2, [r2, #8]
 800610c:	183c      	adds	r4, r7, r0
 800610e:	0010      	movs	r0, r2
 8006110:	4798      	blx	r3
 8006112:	0003      	movs	r3, r0
 8006114:	7023      	strb	r3, [r4, #0]
  }
  return stat;
 8006116:	230f      	movs	r3, #15
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	781b      	ldrb	r3, [r3, #0]
}
 800611c:	0018      	movs	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	b005      	add	sp, #20
 8006122:	bd90      	pop	{r4, r7, pc}
 8006124:	20000b00 	.word	0x20000b00

08006128 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	210f      	movs	r1, #15
 8006136:	187b      	adds	r3, r7, r1
 8006138:	1c02      	adds	r2, r0, #0
 800613a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800613c:	187b      	adds	r3, r7, r1
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	4a0c      	ldr	r2, [pc, #48]	@ (8006174 <disk_read+0x4c>)
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	18d3      	adds	r3, r2, r3
 8006146:	3304      	adds	r3, #4
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689d      	ldr	r5, [r3, #8]
 800614c:	187b      	adds	r3, r7, r1
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	4a08      	ldr	r2, [pc, #32]	@ (8006174 <disk_read+0x4c>)
 8006152:	18d3      	adds	r3, r2, r3
 8006154:	7a18      	ldrb	r0, [r3, #8]
 8006156:	2617      	movs	r6, #23
 8006158:	19bc      	adds	r4, r7, r6
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	47a8      	blx	r5
 8006162:	0003      	movs	r3, r0
 8006164:	7023      	strb	r3, [r4, #0]
  return res;
 8006166:	19bb      	adds	r3, r7, r6
 8006168:	781b      	ldrb	r3, [r3, #0]
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	b007      	add	sp, #28
 8006170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	20000b00 	.word	0x20000b00

08006178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	210f      	movs	r1, #15
 8006186:	187b      	adds	r3, r7, r1
 8006188:	1c02      	adds	r2, r0, #0
 800618a:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800618c:	187b      	adds	r3, r7, r1
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	4a0c      	ldr	r2, [pc, #48]	@ (80061c4 <disk_write+0x4c>)
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	18d3      	adds	r3, r2, r3
 8006196:	3304      	adds	r3, #4
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68dd      	ldr	r5, [r3, #12]
 800619c:	187b      	adds	r3, r7, r1
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	4a08      	ldr	r2, [pc, #32]	@ (80061c4 <disk_write+0x4c>)
 80061a2:	18d3      	adds	r3, r2, r3
 80061a4:	7a18      	ldrb	r0, [r3, #8]
 80061a6:	2617      	movs	r6, #23
 80061a8:	19bc      	adds	r4, r7, r6
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	47a8      	blx	r5
 80061b2:	0003      	movs	r3, r0
 80061b4:	7023      	strb	r3, [r4, #0]
  return res;
 80061b6:	19bb      	adds	r3, r7, r6
 80061b8:	781b      	ldrb	r3, [r3, #0]
}
 80061ba:	0018      	movs	r0, r3
 80061bc:	46bd      	mov	sp, r7
 80061be:	b007      	add	sp, #28
 80061c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	20000b00 	.word	0x20000b00

080061c8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80061c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	603a      	str	r2, [r7, #0]
 80061d0:	1dfb      	adds	r3, r7, #7
 80061d2:	1c02      	adds	r2, r0, #0
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	1dbb      	adds	r3, r7, #6
 80061d8:	1c0a      	adds	r2, r1, #0
 80061da:	701a      	strb	r2, [r3, #0]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80061dc:	1dfb      	adds	r3, r7, #7
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	4a0c      	ldr	r2, [pc, #48]	@ (8006214 <disk_ioctl+0x4c>)
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	18d3      	adds	r3, r2, r3
 80061e6:	3304      	adds	r3, #4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	1dfa      	adds	r2, r7, #7
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	4908      	ldr	r1, [pc, #32]	@ (8006214 <disk_ioctl+0x4c>)
 80061f2:	188a      	adds	r2, r1, r2
 80061f4:	7a10      	ldrb	r0, [r2, #8]
 80061f6:	260f      	movs	r6, #15
 80061f8:	19bc      	adds	r4, r7, r6
 80061fa:	683d      	ldr	r5, [r7, #0]
 80061fc:	1dba      	adds	r2, r7, #6
 80061fe:	7811      	ldrb	r1, [r2, #0]
 8006200:	002a      	movs	r2, r5
 8006202:	4798      	blx	r3
 8006204:	0003      	movs	r3, r0
 8006206:	7023      	strb	r3, [r4, #0]
  return res;
 8006208:	19bb      	adds	r3, r7, r6
 800620a:	781b      	ldrb	r3, [r3, #0]
}
 800620c:	0018      	movs	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	b005      	add	sp, #20
 8006212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006214:	20000b00 	.word	0x20000b00

08006218 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3301      	adds	r3, #1
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	210e      	movs	r1, #14
 8006228:	187b      	adds	r3, r7, r1
 800622a:	801a      	strh	r2, [r3, #0]
	rv = rv << 8 | ptr[0];
 800622c:	187b      	adds	r3, r7, r1
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	b21a      	sxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	b21b      	sxth	r3, r3
 800623a:	4313      	orrs	r3, r2
 800623c:	b21a      	sxth	r2, r3
 800623e:	187b      	adds	r3, r7, r1
 8006240:	801a      	strh	r2, [r3, #0]
	return rv;
 8006242:	187b      	adds	r3, r7, r1
 8006244:	881b      	ldrh	r3, [r3, #0]
}
 8006246:	0018      	movs	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	b004      	add	sp, #16
 800624c:	bd80      	pop	{r7, pc}

0800624e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	3303      	adds	r3, #3
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	021b      	lsls	r3, r3, #8
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	3202      	adds	r2, #2
 8006266:	7812      	ldrb	r2, [r2, #0]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	3201      	adds	r2, #1
 8006274:	7812      	ldrb	r2, [r2, #0]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	7812      	ldrb	r2, [r2, #0]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]
	return rv;
 8006286:	68fb      	ldr	r3, [r7, #12]
}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	b004      	add	sp, #16
 800628e:	bd80      	pop	{r7, pc}

08006290 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	000a      	movs	r2, r1
 800629a:	1cbb      	adds	r3, r7, #2
 800629c:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	1cba      	adds	r2, r7, #2
 80062a6:	8812      	ldrh	r2, [r2, #0]
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	1cbb      	adds	r3, r7, #2
 80062ae:	1cba      	adds	r2, r7, #2
 80062b0:	8812      	ldrh	r2, [r2, #0]
 80062b2:	0a12      	lsrs	r2, r2, #8
 80062b4:	801a      	strh	r2, [r3, #0]
	*ptr++ = (BYTE)val;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	1cba      	adds	r2, r7, #2
 80062be:	8812      	ldrh	r2, [r2, #0]
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
}
 80062c4:	46c0      	nop			@ (mov r8, r8)
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b002      	add	sp, #8
 80062ca:	bd80      	pop	{r7, pc}

080062cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	607a      	str	r2, [r7, #4]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	0a1b      	lsrs	r3, r3, #8
 80062f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
}
 8006318:	46c0      	nop			@ (mov r8, r8)
 800631a:	46bd      	mov	sp, r7
 800631c:	b002      	add	sp, #8
 800631e:	bd80      	pop	{r7, pc}

08006320 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00d      	beq.n	8006356 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	1c53      	adds	r3, r2, #1
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	1c59      	adds	r1, r3, #1
 8006344:	6179      	str	r1, [r7, #20]
 8006346:	7812      	ldrb	r2, [r2, #0]
 8006348:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3b01      	subs	r3, #1
 800634e:	607b      	str	r3, [r7, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f1      	bne.n	800633a <mem_cpy+0x1a>
	}
}
 8006356:	46c0      	nop			@ (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b006      	add	sp, #24
 800635c:	bd80      	pop	{r7, pc}

0800635e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800635e:	b580      	push	{r7, lr}
 8006360:	b086      	sub	sp, #24
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	617a      	str	r2, [r7, #20]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	3b01      	subs	r3, #1
 800637e:	607b      	str	r3, [r7, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f3      	bne.n	800636e <mem_set+0x10>
}
 8006386:	46c0      	nop			@ (mov r8, r8)
 8006388:	46c0      	nop			@ (mov r8, r8)
 800638a:	46bd      	mov	sp, r7
 800638c:	b006      	add	sp, #24
 800638e:	bd80      	pop	{r7, pc}

08006390 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	61fa      	str	r2, [r7, #28]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	0019      	movs	r1, r3
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	61ba      	str	r2, [r7, #24]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	1acb      	subs	r3, r1, r3
 80063bc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <mem_cmp+0x40>
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0eb      	beq.n	80063a8 <mem_cmp+0x18>

	return r;
 80063d0:	697b      	ldr	r3, [r7, #20]
}
 80063d2:	0018      	movs	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b008      	add	sp, #32
 80063d8:	bd80      	pop	{r7, pc}

080063da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80063e4:	e002      	b.n	80063ec <chk_chr+0x12>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3301      	adds	r3, #1
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <chk_chr+0x26>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	001a      	movs	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d1f2      	bne.n	80063e6 <chk_chr+0xc>
	return *str;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	781b      	ldrb	r3, [r3, #0]
}
 8006404:	0018      	movs	r0, r3
 8006406:	46bd      	mov	sp, r7
 8006408:	b002      	add	sp, #8
 800640a:	bd80      	pop	{r7, pc}

0800640c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	e027      	b.n	8006470 <chk_lock+0x64>
		if (Files[i].fs) {	/* Existing entry */
 8006420:	4b25      	ldr	r3, [pc, #148]	@ (80064b8 <chk_lock+0xac>)
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	0112      	lsls	r2, r2, #4
 8006426:	58d3      	ldr	r3, [r2, r3]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d01c      	beq.n	8006466 <chk_lock+0x5a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800642c:	4b22      	ldr	r3, [pc, #136]	@ (80064b8 <chk_lock+0xac>)
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	0112      	lsls	r2, r2, #4
 8006432:	58d2      	ldr	r2, [r2, r3]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d116      	bne.n	800646a <chk_lock+0x5e>
				Files[i].clu == dp->obj.sclust &&
 800643c:	4a1e      	ldr	r2, [pc, #120]	@ (80064b8 <chk_lock+0xac>)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	18d3      	adds	r3, r2, r3
 8006444:	3304      	adds	r3, #4
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800644c:	429a      	cmp	r2, r3
 800644e:	d10c      	bne.n	800646a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006450:	4a19      	ldr	r2, [pc, #100]	@ (80064b8 <chk_lock+0xac>)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	18d3      	adds	r3, r2, r3
 8006458:	3308      	adds	r3, #8
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006460:	429a      	cmp	r2, r3
 8006462:	d102      	bne.n	800646a <chk_lock+0x5e>
				Files[i].ofs == dp->dptr) break;
 8006464:	e007      	b.n	8006476 <chk_lock+0x6a>
		} else {			/* Blank entry */
			be = 1;
 8006466:	2301      	movs	r3, #1
 8006468:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d9d4      	bls.n	8006420 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d109      	bne.n	8006490 <chk_lock+0x84>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d102      	bne.n	8006488 <chk_lock+0x7c>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d101      	bne.n	800648c <chk_lock+0x80>
 8006488:	2300      	movs	r3, #0
 800648a:	e011      	b.n	80064b0 <chk_lock+0xa4>
 800648c:	2312      	movs	r3, #18
 800648e:	e00f      	b.n	80064b0 <chk_lock+0xa4>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <chk_lock+0x9e>
 8006496:	4a08      	ldr	r2, [pc, #32]	@ (80064b8 <chk_lock+0xac>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	011b      	lsls	r3, r3, #4
 800649c:	18d3      	adds	r3, r2, r3
 800649e:	330c      	adds	r3, #12
 80064a0:	881a      	ldrh	r2, [r3, #0]
 80064a2:	2380      	movs	r3, #128	@ 0x80
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d101      	bne.n	80064ae <chk_lock+0xa2>
 80064aa:	2310      	movs	r3, #16
 80064ac:	e000      	b.n	80064b0 <chk_lock+0xa4>
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b004      	add	sp, #16
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20000ae0 	.word	0x20000ae0

080064bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064c2:	2300      	movs	r3, #0
 80064c4:	607b      	str	r3, [r7, #4]
 80064c6:	e002      	b.n	80064ce <enq_lock+0x12>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3301      	adds	r3, #1
 80064cc:	607b      	str	r3, [r7, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d805      	bhi.n	80064e0 <enq_lock+0x24>
 80064d4:	4b07      	ldr	r3, [pc, #28]	@ (80064f4 <enq_lock+0x38>)
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	0112      	lsls	r2, r2, #4
 80064da:	58d3      	ldr	r3, [r2, r3]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f3      	bne.n	80064c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3b02      	subs	r3, #2
 80064e4:	1e5a      	subs	r2, r3, #1
 80064e6:	4193      	sbcs	r3, r2
 80064e8:	b2db      	uxtb	r3, r3
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b002      	add	sp, #8
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	20000ae0 	.word	0x20000ae0

080064f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	e01e      	b.n	8006546 <inc_lock+0x4e>
		if (Files[i].fs == dp->obj.fs &&
 8006508:	4b3f      	ldr	r3, [pc, #252]	@ (8006608 <inc_lock+0x110>)
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	0112      	lsls	r2, r2, #4
 800650e:	58d2      	ldr	r2, [r2, r3]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	429a      	cmp	r2, r3
 8006516:	d113      	bne.n	8006540 <inc_lock+0x48>
			Files[i].clu == dp->obj.sclust &&
 8006518:	4a3b      	ldr	r2, [pc, #236]	@ (8006608 <inc_lock+0x110>)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	18d3      	adds	r3, r2, r3
 8006520:	3304      	adds	r3, #4
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006528:	429a      	cmp	r2, r3
 800652a:	d109      	bne.n	8006540 <inc_lock+0x48>
			Files[i].ofs == dp->dptr) break;
 800652c:	4a36      	ldr	r2, [pc, #216]	@ (8006608 <inc_lock+0x110>)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	18d3      	adds	r3, r2, r3
 8006534:	3308      	adds	r3, #8
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800653c:	429a      	cmp	r2, r3
 800653e:	d006      	beq.n	800654e <inc_lock+0x56>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3301      	adds	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d9dd      	bls.n	8006508 <inc_lock+0x10>
 800654c:	e000      	b.n	8006550 <inc_lock+0x58>
			Files[i].ofs == dp->dptr) break;
 800654e:	46c0      	nop			@ (mov r8, r8)
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d130      	bne.n	80065b8 <inc_lock+0xc0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	e002      	b.n	8006562 <inc_lock+0x6a>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3301      	adds	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d805      	bhi.n	8006574 <inc_lock+0x7c>
 8006568:	4b27      	ldr	r3, [pc, #156]	@ (8006608 <inc_lock+0x110>)
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	0112      	lsls	r2, r2, #4
 800656e:	58d3      	ldr	r3, [r2, r3]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f3      	bne.n	800655c <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b02      	cmp	r3, #2
 8006578:	d101      	bne.n	800657e <inc_lock+0x86>
 800657a:	2300      	movs	r3, #0
 800657c:	e03f      	b.n	80065fe <inc_lock+0x106>
		Files[i].fs = dp->obj.fs;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6819      	ldr	r1, [r3, #0]
 8006582:	4b21      	ldr	r3, [pc, #132]	@ (8006608 <inc_lock+0x110>)
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	0112      	lsls	r2, r2, #4
 8006588:	50d1      	str	r1, [r2, r3]
		Files[i].clu = dp->obj.sclust;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	491e      	ldr	r1, [pc, #120]	@ (8006608 <inc_lock+0x110>)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	18cb      	adds	r3, r1, r3
 8006596:	3304      	adds	r3, #4
 8006598:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	491a      	ldr	r1, [pc, #104]	@ (8006608 <inc_lock+0x110>)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	18cb      	adds	r3, r1, r3
 80065a6:	3308      	adds	r3, #8
 80065a8:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80065aa:	4a17      	ldr	r2, [pc, #92]	@ (8006608 <inc_lock+0x110>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	18d3      	adds	r3, r2, r3
 80065b2:	330c      	adds	r3, #12
 80065b4:	2200      	movs	r2, #0
 80065b6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <inc_lock+0xda>
 80065be:	4a12      	ldr	r2, [pc, #72]	@ (8006608 <inc_lock+0x110>)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	18d3      	adds	r3, r2, r3
 80065c6:	330c      	adds	r3, #12
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <inc_lock+0xda>
 80065ce:	2300      	movs	r3, #0
 80065d0:	e015      	b.n	80065fe <inc_lock+0x106>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d108      	bne.n	80065ea <inc_lock+0xf2>
 80065d8:	4a0b      	ldr	r2, [pc, #44]	@ (8006608 <inc_lock+0x110>)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	011b      	lsls	r3, r3, #4
 80065de:	18d3      	adds	r3, r2, r3
 80065e0:	330c      	adds	r3, #12
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	e001      	b.n	80065ee <inc_lock+0xf6>
 80065ea:	2380      	movs	r3, #128	@ 0x80
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4906      	ldr	r1, [pc, #24]	@ (8006608 <inc_lock+0x110>)
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	0112      	lsls	r2, r2, #4
 80065f4:	188a      	adds	r2, r1, r2
 80065f6:	320c      	adds	r2, #12
 80065f8:	8013      	strh	r3, [r2, #0]

	return i + 1;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	3301      	adds	r3, #1
}
 80065fe:	0018      	movs	r0, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	b004      	add	sp, #16
 8006604:	bd80      	pop	{r7, pc}
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	20000ae0 	.word	0x20000ae0

0800660c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3b01      	subs	r3, #1
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d832      	bhi.n	8006686 <dec_lock+0x7a>
		n = Files[i].ctr;
 8006620:	200e      	movs	r0, #14
 8006622:	183b      	adds	r3, r7, r0
 8006624:	491d      	ldr	r1, [pc, #116]	@ (800669c <dec_lock+0x90>)
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	0112      	lsls	r2, r2, #4
 800662a:	188a      	adds	r2, r1, r2
 800662c:	320c      	adds	r2, #12
 800662e:	8812      	ldrh	r2, [r2, #0]
 8006630:	801a      	strh	r2, [r3, #0]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006632:	183b      	adds	r3, r7, r0
 8006634:	881a      	ldrh	r2, [r3, #0]
 8006636:	2380      	movs	r3, #128	@ 0x80
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	429a      	cmp	r2, r3
 800663c:	d102      	bne.n	8006644 <dec_lock+0x38>
 800663e:	183b      	adds	r3, r7, r0
 8006640:	2200      	movs	r2, #0
 8006642:	801a      	strh	r2, [r3, #0]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006644:	210e      	movs	r1, #14
 8006646:	187b      	adds	r3, r7, r1
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d004      	beq.n	8006658 <dec_lock+0x4c>
 800664e:	187b      	adds	r3, r7, r1
 8006650:	881a      	ldrh	r2, [r3, #0]
 8006652:	187b      	adds	r3, r7, r1
 8006654:	3a01      	subs	r2, #1
 8006656:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = n;
 8006658:	4a10      	ldr	r2, [pc, #64]	@ (800669c <dec_lock+0x90>)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	18d3      	adds	r3, r2, r3
 8006660:	330c      	adds	r3, #12
 8006662:	210e      	movs	r1, #14
 8006664:	187a      	adds	r2, r7, r1
 8006666:	8812      	ldrh	r2, [r2, #0]
 8006668:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800666a:	187b      	adds	r3, r7, r1
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d104      	bne.n	800667c <dec_lock+0x70>
 8006672:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <dec_lock+0x90>)
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	0112      	lsls	r2, r2, #4
 8006678:	2100      	movs	r1, #0
 800667a:	50d1      	str	r1, [r2, r3]
		res = FR_OK;
 800667c:	230d      	movs	r3, #13
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	e003      	b.n	800668e <dec_lock+0x82>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006686:	230d      	movs	r3, #13
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	2202      	movs	r2, #2
 800668c:	701a      	strb	r2, [r3, #0]
	}
	return res;
 800668e:	230d      	movs	r3, #13
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	781b      	ldrb	r3, [r3, #0]
}
 8006694:	0018      	movs	r0, r3
 8006696:	46bd      	mov	sp, r7
 8006698:	b004      	add	sp, #16
 800669a:	bd80      	pop	{r7, pc}
 800669c:	20000ae0 	.word	0x20000ae0

080066a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e00e      	b.n	80066cc <clear_lock+0x2c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80066ae:	4b0b      	ldr	r3, [pc, #44]	@ (80066dc <clear_lock+0x3c>)
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	0112      	lsls	r2, r2, #4
 80066b4:	58d3      	ldr	r3, [r2, r3]
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d104      	bne.n	80066c6 <clear_lock+0x26>
 80066bc:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <clear_lock+0x3c>)
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	0112      	lsls	r2, r2, #4
 80066c2:	2100      	movs	r1, #0
 80066c4:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < _FS_LOCK; i++) {
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3301      	adds	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d9ed      	bls.n	80066ae <clear_lock+0xe>
	}
}
 80066d2:	46c0      	nop			@ (mov r8, r8)
 80066d4:	46c0      	nop			@ (mov r8, r8)
 80066d6:	46bd      	mov	sp, r7
 80066d8:	b004      	add	sp, #16
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000ae0 	.word	0x20000ae0

080066e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80066e8:	240f      	movs	r4, #15
 80066ea:	193b      	adds	r3, r7, r4
 80066ec:	2200      	movs	r2, #0
 80066ee:	701a      	strb	r2, [r3, #0]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	78db      	ldrb	r3, [r3, #3]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d034      	beq.n	8006762 <sync_window+0x82>
		wsect = fs->winsect;	/* Current sector number */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	7858      	ldrb	r0, [r3, #1]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3330      	adds	r3, #48	@ 0x30
 8006706:	0019      	movs	r1, r3
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	2301      	movs	r3, #1
 800670c:	f7ff fd34 	bl	8006178 <disk_write>
 8006710:	1e03      	subs	r3, r0, #0
 8006712:	d003      	beq.n	800671c <sync_window+0x3c>
			res = FR_DISK_ERR;
 8006714:	193b      	adds	r3, r7, r4
 8006716:	2201      	movs	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	e022      	b.n	8006762 <sync_window+0x82>
		} else {
			fs->wflag = 0;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	1ad2      	subs	r2, r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	429a      	cmp	r2, r3
 8006730:	d217      	bcs.n	8006762 <sync_window+0x82>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	789b      	ldrb	r3, [r3, #2]
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	e010      	b.n	800675c <sync_window+0x7c>
					wsect += fs->fsize;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	18d3      	adds	r3, r2, r3
 8006742:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	7858      	ldrb	r0, [r3, #1]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3330      	adds	r3, #48	@ 0x30
 800674c:	0019      	movs	r1, r3
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	2301      	movs	r3, #1
 8006752:	f7ff fd11 	bl	8006178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3b01      	subs	r3, #1
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d8eb      	bhi.n	800673a <sync_window+0x5a>
				}
			}
		}
	}
	return res;
 8006762:	230f      	movs	r3, #15
 8006764:	18fb      	adds	r3, r7, r3
 8006766:	781b      	ldrb	r3, [r3, #0]
}
 8006768:	0018      	movs	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	b007      	add	sp, #28
 800676e:	bd90      	pop	{r4, r7, pc}

08006770 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006770:	b5b0      	push	{r4, r5, r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800677a:	250f      	movs	r5, #15
 800677c:	197b      	adds	r3, r7, r5
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d01f      	beq.n	80067cc <move_window+0x5c>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800678c:	197c      	adds	r4, r7, r5
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	0018      	movs	r0, r3
 8006792:	f7ff ffa5 	bl	80066e0 <sync_window>
 8006796:	0003      	movs	r3, r0
 8006798:	7023      	strb	r3, [r4, #0]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800679a:	002c      	movs	r4, r5
 800679c:	193b      	adds	r3, r7, r4
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d113      	bne.n	80067cc <move_window+0x5c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	7858      	ldrb	r0, [r3, #1]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3330      	adds	r3, #48	@ 0x30
 80067ac:	0019      	movs	r1, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	2301      	movs	r3, #1
 80067b2:	f7ff fcb9 	bl	8006128 <disk_read>
 80067b6:	1e03      	subs	r3, r0, #0
 80067b8:	d005      	beq.n	80067c6 <move_window+0x56>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80067ba:	2301      	movs	r3, #1
 80067bc:	425b      	negs	r3, r3
 80067be:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80067c0:	193b      	adds	r3, r7, r4
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
			}
			fs->winsect = sector;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80067cc:	230f      	movs	r3, #15
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	781b      	ldrb	r3, [r3, #0]
}
 80067d2:	0018      	movs	r0, r3
 80067d4:	46bd      	mov	sp, r7
 80067d6:	b004      	add	sp, #16
 80067d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080067dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80067dc:	b5b0      	push	{r4, r5, r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80067e4:	250f      	movs	r5, #15
 80067e6:	197c      	adds	r4, r7, r5
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	0018      	movs	r0, r3
 80067ec:	f7ff ff78 	bl	80066e0 <sync_window>
 80067f0:	0003      	movs	r3, r0
 80067f2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80067f4:	197b      	adds	r3, r7, r5
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d15d      	bne.n	80068b8 <sync_fs+0xdc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d14c      	bne.n	800689e <sync_fs+0xc2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	791b      	ldrb	r3, [r3, #4]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d148      	bne.n	800689e <sync_fs+0xc2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	3330      	adds	r3, #48	@ 0x30
 8006810:	2280      	movs	r2, #128	@ 0x80
 8006812:	0092      	lsls	r2, r2, #2
 8006814:	2100      	movs	r1, #0
 8006816:	0018      	movs	r0, r3
 8006818:	f7ff fda1 	bl	800635e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3330      	adds	r3, #48	@ 0x30
 8006820:	33ff      	adds	r3, #255	@ 0xff
 8006822:	33ff      	adds	r3, #255	@ 0xff
 8006824:	4a28      	ldr	r2, [pc, #160]	@ (80068c8 <sync_fs+0xec>)
 8006826:	0011      	movs	r1, r2
 8006828:	0018      	movs	r0, r3
 800682a:	f7ff fd31 	bl	8006290 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	3330      	adds	r3, #48	@ 0x30
 8006832:	4a26      	ldr	r2, [pc, #152]	@ (80068cc <sync_fs+0xf0>)
 8006834:	0011      	movs	r1, r2
 8006836:	0018      	movs	r0, r3
 8006838:	f7ff fd48 	bl	80062cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3330      	adds	r3, #48	@ 0x30
 8006840:	33e5      	adds	r3, #229	@ 0xe5
 8006842:	33ff      	adds	r3, #255	@ 0xff
 8006844:	4a22      	ldr	r2, [pc, #136]	@ (80068d0 <sync_fs+0xf4>)
 8006846:	0011      	movs	r1, r2
 8006848:	0018      	movs	r0, r3
 800684a:	f7ff fd3f 	bl	80062cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3330      	adds	r3, #48	@ 0x30
 8006852:	33e9      	adds	r3, #233	@ 0xe9
 8006854:	33ff      	adds	r3, #255	@ 0xff
 8006856:	001a      	movs	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	0019      	movs	r1, r3
 800685e:	0010      	movs	r0, r2
 8006860:	f7ff fd34 	bl	80062cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3330      	adds	r3, #48	@ 0x30
 8006868:	33ed      	adds	r3, #237	@ 0xed
 800686a:	33ff      	adds	r3, #255	@ 0xff
 800686c:	001a      	movs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	0019      	movs	r1, r3
 8006874:	0010      	movs	r0, r2
 8006876:	f7ff fd29 	bl	80062cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7858      	ldrb	r0, [r3, #1]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3330      	adds	r3, #48	@ 0x30
 800688c:	0019      	movs	r1, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006892:	2301      	movs	r3, #1
 8006894:	f7ff fc70 	bl	8006178 <disk_write>
			fs->fsi_flag = 0;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	785b      	ldrb	r3, [r3, #1]
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7ff fc8e 	bl	80061c8 <disk_ioctl>
 80068ac:	1e03      	subs	r3, r0, #0
 80068ae:	d003      	beq.n	80068b8 <sync_fs+0xdc>
 80068b0:	230f      	movs	r3, #15
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	2201      	movs	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]
	}

	return res;
 80068b8:	230f      	movs	r3, #15
 80068ba:	18fb      	adds	r3, r7, r3
 80068bc:	781b      	ldrb	r3, [r3, #0]
}
 80068be:	0018      	movs	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b004      	add	sp, #16
 80068c4:	bdb0      	pop	{r4, r5, r7, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	0000aa55 	.word	0x0000aa55
 80068cc:	41615252 	.word	0x41615252
 80068d0:	61417272 	.word	0x61417272

080068d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	3b02      	subs	r3, #2
 80068e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	3b02      	subs	r3, #2
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d301      	bcc.n	80068f4 <clust2sect+0x20>
 80068f0:	2300      	movs	r3, #0
 80068f2:	e007      	b.n	8006904 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	895b      	ldrh	r3, [r3, #10]
 80068f8:	001a      	movs	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	435a      	muls	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006902:	18d3      	adds	r3, r2, r3
}
 8006904:	0018      	movs	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	b002      	add	sp, #8
 800690a:	bd80      	pop	{r7, pc}

0800690c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d904      	bls.n	800692c <get_fat+0x20>
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d302      	bcc.n	8006932 <get_fat+0x26>
		val = 1;	/* Internal error */
 800692c:	2301      	movs	r3, #1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	e091      	b.n	8006a56 <get_fat+0x14a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006932:	2301      	movs	r3, #1
 8006934:	425b      	negs	r3, r3
 8006936:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	2b03      	cmp	r3, #3
 800693e:	d063      	beq.n	8006a08 <get_fat+0xfc>
 8006940:	dd00      	ble.n	8006944 <get_fat+0x38>
 8006942:	e07e      	b.n	8006a42 <get_fat+0x136>
 8006944:	2b01      	cmp	r3, #1
 8006946:	d002      	beq.n	800694e <get_fat+0x42>
 8006948:	2b02      	cmp	r3, #2
 800694a:	d042      	beq.n	80069d2 <get_fat+0xc6>
 800694c:	e079      	b.n	8006a42 <get_fat+0x136>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	18d3      	adds	r3, r2, r3
 800695a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	6a1a      	ldr	r2, [r3, #32]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	0a5b      	lsrs	r3, r3, #9
 8006964:	18d2      	adds	r2, r2, r3
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	0011      	movs	r1, r2
 800696a:	0018      	movs	r0, r3
 800696c:	f7ff ff00 	bl	8006770 <move_window>
 8006970:	1e03      	subs	r3, r0, #0
 8006972:	d169      	bne.n	8006a48 <get_fat+0x13c>
			wc = fs->win[bc++ % SS(fs)];
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	60fa      	str	r2, [r7, #12]
 800697a:	05db      	lsls	r3, r3, #23
 800697c:	0ddb      	lsrs	r3, r3, #23
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	2130      	movs	r1, #48	@ 0x30
 8006982:	18d3      	adds	r3, r2, r3
 8006984:	185b      	adds	r3, r3, r1
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6a1a      	ldr	r2, [r3, #32]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	0a5b      	lsrs	r3, r3, #9
 8006992:	18d2      	adds	r2, r2, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	0011      	movs	r1, r2
 8006998:	0018      	movs	r0, r3
 800699a:	f7ff fee9 	bl	8006770 <move_window>
 800699e:	1e03      	subs	r3, r0, #0
 80069a0:	d154      	bne.n	8006a4c <get_fat+0x140>
			wc |= fs->win[bc % SS(fs)] << 8;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	05db      	lsls	r3, r3, #23
 80069a6:	0ddb      	lsrs	r3, r3, #23
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	2130      	movs	r1, #48	@ 0x30
 80069ac:	18d3      	adds	r3, r2, r3
 80069ae:	185b      	adds	r3, r3, r1
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	021b      	lsls	r3, r3, #8
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2201      	movs	r2, #1
 80069be:	4013      	ands	r3, r2
 80069c0:	d002      	beq.n	80069c8 <get_fat+0xbc>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	091b      	lsrs	r3, r3, #4
 80069c6:	e002      	b.n	80069ce <get_fat+0xc2>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	051b      	lsls	r3, r3, #20
 80069cc:	0d1b      	lsrs	r3, r3, #20
 80069ce:	617b      	str	r3, [r7, #20]
			break;
 80069d0:	e041      	b.n	8006a56 <get_fat+0x14a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	6a1a      	ldr	r2, [r3, #32]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	18d2      	adds	r2, r2, r3
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	0011      	movs	r1, r2
 80069e0:	0018      	movs	r0, r3
 80069e2:	f7ff fec5 	bl	8006770 <move_window>
 80069e6:	1e03      	subs	r3, r0, #0
 80069e8:	d132      	bne.n	8006a50 <get_fat+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	3330      	adds	r3, #48	@ 0x30
 80069ee:	001a      	movs	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	0059      	lsls	r1, r3, #1
 80069f4:	23ff      	movs	r3, #255	@ 0xff
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	400b      	ands	r3, r1
 80069fa:	18d3      	adds	r3, r2, r3
 80069fc:	0018      	movs	r0, r3
 80069fe:	f7ff fc0b 	bl	8006218 <ld_word>
 8006a02:	0003      	movs	r3, r0
 8006a04:	617b      	str	r3, [r7, #20]
			break;
 8006a06:	e026      	b.n	8006a56 <get_fat+0x14a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	6a1a      	ldr	r2, [r3, #32]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	09db      	lsrs	r3, r3, #7
 8006a10:	18d2      	adds	r2, r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	0011      	movs	r1, r2
 8006a16:	0018      	movs	r0, r3
 8006a18:	f7ff feaa 	bl	8006770 <move_window>
 8006a1c:	1e03      	subs	r3, r0, #0
 8006a1e:	d119      	bne.n	8006a54 <get_fat+0x148>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	3330      	adds	r3, #48	@ 0x30
 8006a24:	001a      	movs	r2, r3
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	0099      	lsls	r1, r3, #2
 8006a2a:	23fe      	movs	r3, #254	@ 0xfe
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	400b      	ands	r3, r1
 8006a30:	18d3      	adds	r3, r2, r3
 8006a32:	0018      	movs	r0, r3
 8006a34:	f7ff fc0b 	bl	800624e <ld_dword>
 8006a38:	0003      	movs	r3, r0
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	091b      	lsrs	r3, r3, #4
 8006a3e:	617b      	str	r3, [r7, #20]
			break;
 8006a40:	e009      	b.n	8006a56 <get_fat+0x14a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006a42:	2301      	movs	r3, #1
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e006      	b.n	8006a56 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a48:	46c0      	nop			@ (mov r8, r8)
 8006a4a:	e004      	b.n	8006a56 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a4c:	46c0      	nop			@ (mov r8, r8)
 8006a4e:	e002      	b.n	8006a56 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a50:	46c0      	nop			@ (mov r8, r8)
 8006a52:	e000      	b.n	8006a56 <get_fat+0x14a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a54:	46c0      	nop			@ (mov r8, r8)
		}
	}

	return val;
 8006a56:	697b      	ldr	r3, [r7, #20]
}
 8006a58:	0018      	movs	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b006      	add	sp, #24
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006a60:	b5b0      	push	{r4, r5, r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006a6c:	231f      	movs	r3, #31
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	2202      	movs	r2, #2
 8006a72:	701a      	strb	r2, [r3, #0]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d800      	bhi.n	8006a7c <put_fat+0x1c>
 8006a7a:	e0eb      	b.n	8006c54 <put_fat+0x1f4>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d300      	bcc.n	8006a88 <put_fat+0x28>
 8006a86:	e0e5      	b.n	8006c54 <put_fat+0x1f4>
		switch (fs->fs_type) {
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d100      	bne.n	8006a92 <put_fat+0x32>
 8006a90:	e0a1      	b.n	8006bd6 <put_fat+0x176>
 8006a92:	dd00      	ble.n	8006a96 <put_fat+0x36>
 8006a94:	e0de      	b.n	8006c54 <put_fat+0x1f4>
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d003      	beq.n	8006aa2 <put_fat+0x42>
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d100      	bne.n	8006aa0 <put_fat+0x40>
 8006a9e:	e075      	b.n	8006b8c <put_fat+0x12c>
 8006aa0:	e0d8      	b.n	8006c54 <put_fat+0x1f4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	61bb      	str	r3, [r7, #24]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	085b      	lsrs	r3, r3, #1
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	18d3      	adds	r3, r2, r3
 8006aae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1a      	ldr	r2, [r3, #32]
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	0a5b      	lsrs	r3, r3, #9
 8006ab8:	18d2      	adds	r2, r2, r3
 8006aba:	251f      	movs	r5, #31
 8006abc:	197c      	adds	r4, r7, r5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	0011      	movs	r1, r2
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f7ff fe54 	bl	8006770 <move_window>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006acc:	197b      	adds	r3, r7, r5
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d000      	beq.n	8006ad6 <put_fat+0x76>
 8006ad4:	e0b7      	b.n	8006c46 <put_fat+0x1e6>
			p = fs->win + bc++ % SS(fs);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3330      	adds	r3, #48	@ 0x30
 8006ada:	001a      	movs	r2, r3
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	1c59      	adds	r1, r3, #1
 8006ae0:	61b9      	str	r1, [r7, #24]
 8006ae2:	05db      	lsls	r3, r3, #23
 8006ae4:	0ddb      	lsrs	r3, r3, #23
 8006ae6:	18d3      	adds	r3, r2, r3
 8006ae8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2201      	movs	r2, #1
 8006aee:	4013      	ands	r3, r2
 8006af0:	d00d      	beq.n	8006b0e <put_fat+0xae>
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	b25b      	sxtb	r3, r3
 8006af8:	220f      	movs	r2, #15
 8006afa:	4013      	ands	r3, r2
 8006afc:	b25a      	sxtb	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	b25b      	sxtb	r3, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b25b      	sxtb	r3, r3
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	e001      	b.n	8006b12 <put_fat+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6a1a      	ldr	r2, [r3, #32]
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	0a5b      	lsrs	r3, r3, #9
 8006b24:	18d2      	adds	r2, r2, r3
 8006b26:	251f      	movs	r5, #31
 8006b28:	197c      	adds	r4, r7, r5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	0011      	movs	r1, r2
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f7ff fe1e 	bl	8006770 <move_window>
 8006b34:	0003      	movs	r3, r0
 8006b36:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006b38:	197b      	adds	r3, r7, r5
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d000      	beq.n	8006b42 <put_fat+0xe2>
 8006b40:	e083      	b.n	8006c4a <put_fat+0x1ea>
			p = fs->win + bc % SS(fs);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	3330      	adds	r3, #48	@ 0x30
 8006b46:	001a      	movs	r2, r3
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	05db      	lsls	r3, r3, #23
 8006b4c:	0ddb      	lsrs	r3, r3, #23
 8006b4e:	18d3      	adds	r3, r2, r3
 8006b50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	2201      	movs	r2, #1
 8006b56:	4013      	ands	r3, r2
 8006b58:	d003      	beq.n	8006b62 <put_fat+0x102>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	091b      	lsrs	r3, r3, #4
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	e00e      	b.n	8006b80 <put_fat+0x120>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	b25b      	sxtb	r3, r3
 8006b68:	220f      	movs	r2, #15
 8006b6a:	4393      	bics	r3, r2
 8006b6c:	b25a      	sxtb	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	0a1b      	lsrs	r3, r3, #8
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	210f      	movs	r1, #15
 8006b76:	400b      	ands	r3, r1
 8006b78:	b25b      	sxtb	r3, r3
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	b25b      	sxtb	r3, r3
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	70da      	strb	r2, [r3, #3]
			break;
 8006b8a:	e063      	b.n	8006c54 <put_fat+0x1f4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	0a1b      	lsrs	r3, r3, #8
 8006b94:	18d2      	adds	r2, r2, r3
 8006b96:	251f      	movs	r5, #31
 8006b98:	197c      	adds	r4, r7, r5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	0011      	movs	r1, r2
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f7ff fde6 	bl	8006770 <move_window>
 8006ba4:	0003      	movs	r3, r0
 8006ba6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006ba8:	197b      	adds	r3, r7, r5
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d14e      	bne.n	8006c4e <put_fat+0x1ee>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3330      	adds	r3, #48	@ 0x30
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	0059      	lsls	r1, r3, #1
 8006bba:	23ff      	movs	r3, #255	@ 0xff
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	400b      	ands	r3, r1
 8006bc0:	18d3      	adds	r3, r2, r3
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	b292      	uxth	r2, r2
 8006bc6:	0011      	movs	r1, r2
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f7ff fb61 	bl	8006290 <st_word>
			fs->wflag = 1;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	70da      	strb	r2, [r3, #3]
			break;
 8006bd4:	e03e      	b.n	8006c54 <put_fat+0x1f4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1a      	ldr	r2, [r3, #32]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	09db      	lsrs	r3, r3, #7
 8006bde:	18d2      	adds	r2, r2, r3
 8006be0:	251f      	movs	r5, #31
 8006be2:	197c      	adds	r4, r7, r5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	0011      	movs	r1, r2
 8006be8:	0018      	movs	r0, r3
 8006bea:	f7ff fdc1 	bl	8006770 <move_window>
 8006bee:	0003      	movs	r3, r0
 8006bf0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 8006bf2:	197b      	adds	r3, r7, r5
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d12b      	bne.n	8006c52 <put_fat+0x1f2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	011b      	lsls	r3, r3, #4
 8006bfe:	091c      	lsrs	r4, r3, #4
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3330      	adds	r3, #48	@ 0x30
 8006c04:	001a      	movs	r2, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	0099      	lsls	r1, r3, #2
 8006c0a:	23fe      	movs	r3, #254	@ 0xfe
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	400b      	ands	r3, r1
 8006c10:	18d3      	adds	r3, r2, r3
 8006c12:	0018      	movs	r0, r3
 8006c14:	f7ff fb1b 	bl	800624e <ld_dword>
 8006c18:	0003      	movs	r3, r0
 8006c1a:	0f1b      	lsrs	r3, r3, #28
 8006c1c:	071b      	lsls	r3, r3, #28
 8006c1e:	4323      	orrs	r3, r4
 8006c20:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3330      	adds	r3, #48	@ 0x30
 8006c26:	001a      	movs	r2, r3
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	0099      	lsls	r1, r3, #2
 8006c2c:	23fe      	movs	r3, #254	@ 0xfe
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	400b      	ands	r3, r1
 8006c32:	18d3      	adds	r3, r2, r3
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	0011      	movs	r1, r2
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7ff fb47 	bl	80062cc <st_dword>
			fs->wflag = 1;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	70da      	strb	r2, [r3, #3]
			break;
 8006c44:	e006      	b.n	8006c54 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006c46:	46c0      	nop			@ (mov r8, r8)
 8006c48:	e004      	b.n	8006c54 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006c4a:	46c0      	nop			@ (mov r8, r8)
 8006c4c:	e002      	b.n	8006c54 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006c4e:	46c0      	nop			@ (mov r8, r8)
 8006c50:	e000      	b.n	8006c54 <put_fat+0x1f4>
			if (res != FR_OK) break;
 8006c52:	46c0      	nop			@ (mov r8, r8)
		}
	}
	return res;
 8006c54:	231f      	movs	r3, #31
 8006c56:	18fb      	adds	r3, r7, r3
 8006c58:	781b      	ldrb	r3, [r3, #0]
}
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	b008      	add	sp, #32
 8006c60:	bdb0      	pop	{r4, r5, r7, pc}

08006c62 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006c62:	b5b0      	push	{r4, r5, r7, lr}
 8006c64:	b088      	sub	sp, #32
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006c6e:	231f      	movs	r3, #31
 8006c70:	18fb      	adds	r3, r7, r3
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d904      	bls.n	8006c8c <remove_chain+0x2a>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d301      	bcc.n	8006c90 <remove_chain+0x2e>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e057      	b.n	8006d40 <remove_chain+0xde>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d011      	beq.n	8006cba <remove_chain+0x58>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006c96:	251f      	movs	r5, #31
 8006c98:	197c      	adds	r4, r7, r5
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	425a      	negs	r2, r3
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f7ff fedc 	bl	8006a60 <put_fat>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) return res;
 8006cac:	197b      	adds	r3, r7, r5
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <remove_chain+0x58>
 8006cb4:	197b      	adds	r3, r7, r5
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	e042      	b.n	8006d40 <remove_chain+0xde>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	0011      	movs	r1, r2
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7ff fe23 	bl	800690c <get_fat>
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	617b      	str	r3, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d035      	beq.n	8006d3c <remove_chain+0xda>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <remove_chain+0x78>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e032      	b.n	8006d40 <remove_chain+0xde>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <remove_chain+0x82>
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e02d      	b.n	8006d40 <remove_chain+0xde>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006ce4:	251f      	movs	r5, #31
 8006ce6:	197c      	adds	r4, r7, r5
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2200      	movs	r2, #0
 8006cee:	0018      	movs	r0, r3
 8006cf0:	f7ff feb6 	bl	8006a60 <put_fat>
 8006cf4:	0003      	movs	r3, r0
 8006cf6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) return res;
 8006cf8:	197b      	adds	r3, r7, r5
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <remove_chain+0xa4>
 8006d00:	197b      	adds	r3, r7, r5
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	e01c      	b.n	8006d40 <remove_chain+0xde>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	3b02      	subs	r3, #2
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d20b      	bcs.n	8006d2c <remove_chain+0xca>
			fs->free_clst++;
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	791b      	ldrb	r3, [r3, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d3bf      	bcc.n	8006cba <remove_chain+0x58>
 8006d3a:	e000      	b.n	8006d3e <remove_chain+0xdc>
		if (nxt == 0) break;				/* Empty cluster? */
 8006d3c:	46c0      	nop			@ (mov r8, r8)
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	0018      	movs	r0, r3
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b008      	add	sp, #32
 8006d46:	bdb0      	pop	{r4, r5, r7, pc}

08006d48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006d48:	b5b0      	push	{r4, r5, r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10d      	bne.n	8006d7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d004      	beq.n	8006d74 <create_chain+0x2c>
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d31d      	bcc.n	8006db0 <create_chain+0x68>
 8006d74:	2301      	movs	r3, #1
 8006d76:	61bb      	str	r3, [r7, #24]
 8006d78:	e01a      	b.n	8006db0 <create_chain+0x68>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	0011      	movs	r1, r2
 8006d80:	0018      	movs	r0, r3
 8006d82:	f7ff fdc3 	bl	800690c <get_fat>
 8006d86:	0003      	movs	r3, r0
 8006d88:	60fb      	str	r3, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d801      	bhi.n	8006d94 <create_chain+0x4c>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e07b      	b.n	8006e8c <create_chain+0x144>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3301      	adds	r3, #1
 8006d98:	d101      	bne.n	8006d9e <create_chain+0x56>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	e076      	b.n	8006e8c <create_chain+0x144>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d201      	bcs.n	8006dac <create_chain+0x64>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	e06f      	b.n	8006e8c <create_chain+0x144>
		scl = clst;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	3301      	adds	r3, #1
 8006db8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d307      	bcc.n	8006dd4 <create_chain+0x8c>
				ncl = 2;
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d901      	bls.n	8006dd4 <create_chain+0x8c>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e05b      	b.n	8006e8c <create_chain+0x144>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	0011      	movs	r1, r2
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f7ff fd96 	bl	800690c <get_fat>
 8006de0:	0003      	movs	r3, r0
 8006de2:	60fb      	str	r3, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <create_chain+0xbe>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d002      	beq.n	8006df6 <create_chain+0xae>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	d101      	bne.n	8006dfa <create_chain+0xb2>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	e048      	b.n	8006e8c <create_chain+0x144>
			if (ncl == scl) return 0;		/* No free cluster */
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d1d8      	bne.n	8006db4 <create_chain+0x6c>
 8006e02:	2300      	movs	r3, #0
 8006e04:	e042      	b.n	8006e8c <create_chain+0x144>
			if (cs == 0) break;				/* Found a free cluster */
 8006e06:	46c0      	nop			@ (mov r8, r8)
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006e08:	2517      	movs	r5, #23
 8006e0a:	197c      	adds	r4, r7, r5
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	425a      	negs	r2, r3
 8006e10:	69f9      	ldr	r1, [r7, #28]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	0018      	movs	r0, r3
 8006e16:	f7ff fe23 	bl	8006a60 <put_fat>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK && clst != 0) {
 8006e1e:	197b      	adds	r3, r7, r5
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10b      	bne.n	8006e3e <create_chain+0xf6>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <create_chain+0xf6>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006e2c:	197c      	adds	r4, r7, r5
 8006e2e:	69fa      	ldr	r2, [r7, #28]
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f7ff fe13 	bl	8006a60 <put_fat>
 8006e3a:	0003      	movs	r3, r0
 8006e3c:	7023      	strb	r3, [r4, #0]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006e3e:	2317      	movs	r3, #23
 8006e40:	18fb      	adds	r3, r7, r3
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d116      	bne.n	8006e76 <create_chain+0x12e>
		fs->last_clst = ncl;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	691a      	ldr	r2, [r3, #16]
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	3b02      	subs	r3, #2
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d804      	bhi.n	8006e66 <create_chain+0x11e>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	1e5a      	subs	r2, r3, #1
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	791b      	ldrb	r3, [r3, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	711a      	strb	r2, [r3, #4]
 8006e74:	e009      	b.n	8006e8a <create_chain+0x142>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006e76:	2317      	movs	r3, #23
 8006e78:	18fb      	adds	r3, r7, r3
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d102      	bne.n	8006e86 <create_chain+0x13e>
 8006e80:	2301      	movs	r3, #1
 8006e82:	425b      	negs	r3, r3
 8006e84:	e000      	b.n	8006e88 <create_chain+0x140>
 8006e86:	2301      	movs	r3, #1
 8006e88:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006e8a:	69fb      	ldr	r3, [r7, #28]
}
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b008      	add	sp, #32
 8006e92:	bdb0      	pop	{r4, r5, r7, pc}

08006e94 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	0a5a      	lsrs	r2, r3, #9
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	895b      	ldrh	r3, [r3, #10]
 8006eb4:	0019      	movs	r1, r3
 8006eb6:	0010      	movs	r0, r2
 8006eb8:	f7f9 f926 	bl	8000108 <__udivsi3>
 8006ebc:	0003      	movs	r3, r0
 8006ebe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	1d1a      	adds	r2, r3, #4
 8006ec4:	613a      	str	r2, [r7, #16]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <clmt_clust+0x40>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	e010      	b.n	8006ef6 <clmt_clust+0x62>
		if (cl < ncl) break;	/* In this fragment? */
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d307      	bcc.n	8006eec <clmt_clust+0x58>
		cl -= ncl; tbl++;		/* Next fragment */
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006eea:	e7e9      	b.n	8006ec0 <clmt_clust+0x2c>
		if (cl < ncl) break;	/* In this fragment? */
 8006eec:	46c0      	nop			@ (mov r8, r8)
	}
	return cl + *tbl;	/* Return the cluster number */
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	18d3      	adds	r3, r2, r3
}
 8006ef6:	0018      	movs	r0, r3
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	b006      	add	sp, #24
 8006efc:	bd80      	pop	{r7, pc}

08006efe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b086      	sub	sp, #24
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	2380      	movs	r3, #128	@ 0x80
 8006f12:	039b      	lsls	r3, r3, #14
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d203      	bcs.n	8006f20 <dir_sdi+0x22>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	221f      	movs	r2, #31
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d001      	beq.n	8006f24 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006f20:	2302      	movs	r3, #2
 8006f22:	e066      	b.n	8006ff2 <dir_sdi+0xf4>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <dir_sdi+0x46>
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d902      	bls.n	8006f44 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f42:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10c      	bne.n	8006f64 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	095b      	lsrs	r3, r3, #5
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	8912      	ldrh	r2, [r2, #8]
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d301      	bcc.n	8006f5a <dir_sdi+0x5c>
 8006f56:	2302      	movs	r3, #2
 8006f58:	e04b      	b.n	8006ff2 <dir_sdi+0xf4>
		dp->sect = fs->dirbase;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	61da      	str	r2, [r3, #28]
 8006f62:	e02c      	b.n	8006fbe <dir_sdi+0xc0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	895b      	ldrh	r3, [r3, #10]
 8006f68:	025b      	lsls	r3, r3, #9
 8006f6a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006f6c:	e01a      	b.n	8006fa4 <dir_sdi+0xa6>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	0011      	movs	r1, r2
 8006f74:	0018      	movs	r0, r3
 8006f76:	f7ff fcc9 	bl	800690c <get_fat>
 8006f7a:	0003      	movs	r3, r0
 8006f7c:	617b      	str	r3, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	3301      	adds	r3, #1
 8006f82:	d101      	bne.n	8006f88 <dir_sdi+0x8a>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e034      	b.n	8006ff2 <dir_sdi+0xf4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d904      	bls.n	8006f98 <dir_sdi+0x9a>
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d301      	bcc.n	8006f9c <dir_sdi+0x9e>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e02a      	b.n	8006ff2 <dir_sdi+0xf4>
			ofs -= csz;
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d2e0      	bcs.n	8006f6e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	0011      	movs	r1, r2
 8006fb2:	0018      	movs	r0, r3
 8006fb4:	f7ff fc8e 	bl	80068d4 <clust2sect>
 8006fb8:	0002      	movs	r2, r0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	69db      	ldr	r3, [r3, #28]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <dir_sdi+0xd2>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e010      	b.n	8006ff2 <dir_sdi+0xf4>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69da      	ldr	r2, [r3, #28]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	0a5b      	lsrs	r3, r3, #9
 8006fd8:	18d2      	adds	r2, r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	3330      	adds	r3, #48	@ 0x30
 8006fe2:	001a      	movs	r2, r3
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	05db      	lsls	r3, r3, #23
 8006fe8:	0ddb      	lsrs	r3, r3, #23
 8006fea:	18d2      	adds	r2, r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b006      	add	sp, #24
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	3320      	adds	r3, #32
 8007010:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <dir_next+0x2a>
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	2380      	movs	r3, #128	@ 0x80
 800701e:	039b      	lsls	r3, r3, #14
 8007020:	429a      	cmp	r2, r3
 8007022:	d301      	bcc.n	8007028 <dir_next+0x2e>
 8007024:	2304      	movs	r3, #4
 8007026:	e0ad      	b.n	8007184 <dir_next+0x18a>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	05db      	lsls	r3, r3, #23
 800702c:	0ddb      	lsrs	r3, r3, #23
 800702e:	d000      	beq.n	8007032 <dir_next+0x38>
 8007030:	e09b      	b.n	800716a <dir_next+0x170>
		dp->sect++;				/* Next sector */
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10b      	bne.n	800705c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	095b      	lsrs	r3, r3, #5
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	8912      	ldrh	r2, [r2, #8]
 800704c:	4293      	cmp	r3, r2
 800704e:	d200      	bcs.n	8007052 <dir_next+0x58>
 8007050:	e08b      	b.n	800716a <dir_next+0x170>
				dp->sect = 0; return FR_NO_FILE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	61da      	str	r2, [r3, #28]
 8007058:	2304      	movs	r3, #4
 800705a:	e093      	b.n	8007184 <dir_next+0x18a>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	0a5b      	lsrs	r3, r3, #9
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	8952      	ldrh	r2, [r2, #10]
 8007064:	3a01      	subs	r2, #1
 8007066:	4013      	ands	r3, r2
 8007068:	d000      	beq.n	800706c <dir_next+0x72>
 800706a:	e07e      	b.n	800716a <dir_next+0x170>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	0019      	movs	r1, r3
 8007074:	0010      	movs	r0, r2
 8007076:	f7ff fc49 	bl	800690c <get_fat>
 800707a:	0003      	movs	r3, r0
 800707c:	617b      	str	r3, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d801      	bhi.n	8007088 <dir_next+0x8e>
 8007084:	2302      	movs	r3, #2
 8007086:	e07d      	b.n	8007184 <dir_next+0x18a>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	3301      	adds	r3, #1
 800708c:	d101      	bne.n	8007092 <dir_next+0x98>
 800708e:	2301      	movs	r3, #1
 8007090:	e078      	b.n	8007184 <dir_next+0x18a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	697a      	ldr	r2, [r7, #20]
 8007098:	429a      	cmp	r2, r3
 800709a:	d35a      	bcc.n	8007152 <dir_next+0x158>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d104      	bne.n	80070ac <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	61da      	str	r2, [r3, #28]
 80070a8:	2304      	movs	r3, #4
 80070aa:	e06b      	b.n	8007184 <dir_next+0x18a>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	0019      	movs	r1, r3
 80070b4:	0010      	movs	r0, r2
 80070b6:	f7ff fe47 	bl	8006d48 <create_chain>
 80070ba:	0003      	movs	r3, r0
 80070bc:	617b      	str	r3, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <dir_next+0xce>
 80070c4:	2307      	movs	r3, #7
 80070c6:	e05d      	b.n	8007184 <dir_next+0x18a>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d101      	bne.n	80070d2 <dir_next+0xd8>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e058      	b.n	8007184 <dir_next+0x18a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	3301      	adds	r3, #1
 80070d6:	d101      	bne.n	80070dc <dir_next+0xe2>
 80070d8:	2301      	movs	r3, #1
 80070da:	e053      	b.n	8007184 <dir_next+0x18a>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	0018      	movs	r0, r3
 80070e0:	f7ff fafe 	bl	80066e0 <sync_window>
 80070e4:	1e03      	subs	r3, r0, #0
 80070e6:	d001      	beq.n	80070ec <dir_next+0xf2>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e04b      	b.n	8007184 <dir_next+0x18a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3330      	adds	r3, #48	@ 0x30
 80070f0:	2280      	movs	r2, #128	@ 0x80
 80070f2:	0092      	lsls	r2, r2, #2
 80070f4:	2100      	movs	r1, #0
 80070f6:	0018      	movs	r0, r3
 80070f8:	f7ff f931 	bl	800635e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80070fc:	2300      	movs	r3, #0
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	0011      	movs	r1, r2
 8007106:	0018      	movs	r0, r3
 8007108:	f7ff fbe4 	bl	80068d4 <clust2sect>
 800710c:	0002      	movs	r2, r0
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007112:	e012      	b.n	800713a <dir_next+0x140>
						fs->wflag = 1;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	0018      	movs	r0, r3
 800711e:	f7ff fadf 	bl	80066e0 <sync_window>
 8007122:	1e03      	subs	r3, r0, #0
 8007124:	d001      	beq.n	800712a <dir_next+0x130>
 8007126:	2301      	movs	r3, #1
 8007128:	e02c      	b.n	8007184 <dir_next+0x18a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	3301      	adds	r3, #1
 800712e:	613b      	str	r3, [r7, #16]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	62da      	str	r2, [r3, #44]	@ 0x2c
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	895b      	ldrh	r3, [r3, #10]
 800713e:	001a      	movs	r2, r3
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	4293      	cmp	r3, r2
 8007144:	d3e6      	bcc.n	8007114 <dir_next+0x11a>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad2      	subs	r2, r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	0011      	movs	r1, r2
 800715e:	0018      	movs	r0, r3
 8007160:	f7ff fbb8 	bl	80068d4 <clust2sect>
 8007164:	0002      	movs	r2, r0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3330      	adds	r3, #48	@ 0x30
 8007174:	001a      	movs	r2, r3
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	05db      	lsls	r3, r3, #23
 800717a:	0ddb      	lsrs	r3, r3, #23
 800717c:	18d2      	adds	r2, r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	0018      	movs	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	b006      	add	sp, #24
 800718a:	bd80      	pop	{r7, pc}

0800718c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800718c:	b5b0      	push	{r4, r5, r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800719c:	2517      	movs	r5, #23
 800719e:	197c      	adds	r4, r7, r5
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2100      	movs	r1, #0
 80071a4:	0018      	movs	r0, r3
 80071a6:	f7ff feaa 	bl	8006efe <dir_sdi>
 80071aa:	0003      	movs	r3, r0
 80071ac:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 80071ae:	197b      	adds	r3, r7, r5
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d133      	bne.n	800721e <dir_alloc+0x92>
		n = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69da      	ldr	r2, [r3, #28]
 80071be:	2517      	movs	r5, #23
 80071c0:	197c      	adds	r4, r7, r5
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	0011      	movs	r1, r2
 80071c6:	0018      	movs	r0, r3
 80071c8:	f7ff fad2 	bl	8006770 <move_window>
 80071cc:	0003      	movs	r3, r0
 80071ce:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80071d0:	197b      	adds	r3, r7, r5
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d121      	bne.n	800721c <dir_alloc+0x90>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2be5      	cmp	r3, #229	@ 0xe5
 80071e0:	d004      	beq.n	80071ec <dir_alloc+0x60>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d107      	bne.n	80071fc <dir_alloc+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	3301      	adds	r3, #1
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d102      	bne.n	8007200 <dir_alloc+0x74>
 80071fa:	e010      	b.n	800721e <dir_alloc+0x92>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80071fc:	2300      	movs	r3, #0
 80071fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007200:	2517      	movs	r5, #23
 8007202:	197c      	adds	r4, r7, r5
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2101      	movs	r1, #1
 8007208:	0018      	movs	r0, r3
 800720a:	f7ff fef6 	bl	8006ffa <dir_next>
 800720e:	0003      	movs	r3, r0
 8007210:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007212:	197b      	adds	r3, r7, r5
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d0cf      	beq.n	80071ba <dir_alloc+0x2e>
 800721a:	e000      	b.n	800721e <dir_alloc+0x92>
			if (res != FR_OK) break;
 800721c:	46c0      	nop			@ (mov r8, r8)
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800721e:	2217      	movs	r2, #23
 8007220:	18bb      	adds	r3, r7, r2
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b04      	cmp	r3, #4
 8007226:	d102      	bne.n	800722e <dir_alloc+0xa2>
 8007228:	18bb      	adds	r3, r7, r2
 800722a:	2207      	movs	r2, #7
 800722c:	701a      	strb	r2, [r3, #0]
	return res;
 800722e:	2317      	movs	r3, #23
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	781b      	ldrb	r3, [r3, #0]
}
 8007234:	0018      	movs	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	b006      	add	sp, #24
 800723a:	bdb0      	pop	{r4, r5, r7, pc}

0800723c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	331a      	adds	r3, #26
 800724a:	0018      	movs	r0, r3
 800724c:	f7fe ffe4 	bl	8006218 <ld_word>
 8007250:	0003      	movs	r3, r0
 8007252:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d109      	bne.n	8007270 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	3314      	adds	r3, #20
 8007260:	0018      	movs	r0, r3
 8007262:	f7fe ffd9 	bl	8006218 <ld_word>
 8007266:	0003      	movs	r3, r0
 8007268:	041b      	lsls	r3, r3, #16
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007270:	68fb      	ldr	r3, [r7, #12]
}
 8007272:	0018      	movs	r0, r3
 8007274:	46bd      	mov	sp, r7
 8007276:	b004      	add	sp, #16
 8007278:	bd80      	pop	{r7, pc}

0800727a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	331a      	adds	r3, #26
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	b292      	uxth	r2, r2
 800728e:	0011      	movs	r1, r2
 8007290:	0018      	movs	r0, r3
 8007292:	f7fe fffd 	bl	8006290 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b03      	cmp	r3, #3
 800729c:	d109      	bne.n	80072b2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3314      	adds	r3, #20
 80072a2:	001a      	movs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	0019      	movs	r1, r3
 80072ac:	0010      	movs	r0, r2
 80072ae:	f7fe ffef 	bl	8006290 <st_word>
	}
}
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b004      	add	sp, #16
 80072b8:	bd80      	pop	{r7, pc}

080072ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80072ba:	b5b0      	push	{r4, r5, r7, lr}
 80072bc:	b086      	sub	sp, #24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80072c8:	2517      	movs	r5, #23
 80072ca:	197c      	adds	r4, r7, r5
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2100      	movs	r1, #0
 80072d0:	0018      	movs	r0, r3
 80072d2:	f7ff fe14 	bl	8006efe <dir_sdi>
 80072d6:	0003      	movs	r3, r0
 80072d8:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
 80072da:	197b      	adds	r3, r7, r5
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <dir_find+0x2e>
 80072e2:	197b      	adds	r3, r7, r5
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	e04c      	b.n	8007382 <dir_find+0xc8>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	2517      	movs	r5, #23
 80072ee:	197c      	adds	r4, r7, r5
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	0011      	movs	r1, r2
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7ff fa3b 	bl	8006770 <move_window>
 80072fa:	0003      	movs	r3, r0
 80072fc:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
 80072fe:	0029      	movs	r1, r5
 8007300:	187b      	adds	r3, r7, r1
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d136      	bne.n	8007376 <dir_find+0xbc>
		c = dp->dir[DIR_Name];
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a1a      	ldr	r2, [r3, #32]
 800730c:	200f      	movs	r0, #15
 800730e:	183b      	adds	r3, r7, r0
 8007310:	7812      	ldrb	r2, [r2, #0]
 8007312:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007314:	183b      	adds	r3, r7, r0
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d103      	bne.n	8007324 <dir_find+0x6a>
 800731c:	187b      	adds	r3, r7, r1
 800731e:	2204      	movs	r2, #4
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	e02b      	b.n	800737c <dir_find+0xc2>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	330b      	adds	r3, #11
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	223f      	movs	r2, #63	@ 0x3f
 800732e:	4013      	ands	r3, r2
 8007330:	b2da      	uxtb	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	330b      	adds	r3, #11
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	001a      	movs	r2, r3
 8007340:	2308      	movs	r3, #8
 8007342:	4013      	ands	r3, r2
 8007344:	d109      	bne.n	800735a <dir_find+0xa0>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a18      	ldr	r0, [r3, #32]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3324      	adds	r3, #36	@ 0x24
 800734e:	220b      	movs	r2, #11
 8007350:	0019      	movs	r1, r3
 8007352:	f7ff f81d 	bl	8006390 <mem_cmp>
 8007356:	1e03      	subs	r3, r0, #0
 8007358:	d00f      	beq.n	800737a <dir_find+0xc0>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800735a:	2517      	movs	r5, #23
 800735c:	197c      	adds	r4, r7, r5
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2100      	movs	r1, #0
 8007362:	0018      	movs	r0, r3
 8007364:	f7ff fe49 	bl	8006ffa <dir_next>
 8007368:	0003      	movs	r3, r0
 800736a:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
 800736c:	197b      	adds	r3, r7, r5
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0b9      	beq.n	80072e8 <dir_find+0x2e>
 8007374:	e002      	b.n	800737c <dir_find+0xc2>
		if (res != FR_OK) break;
 8007376:	46c0      	nop			@ (mov r8, r8)
 8007378:	e000      	b.n	800737c <dir_find+0xc2>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800737a:	46c0      	nop			@ (mov r8, r8)

	return res;
 800737c:	2317      	movs	r3, #23
 800737e:	18fb      	adds	r3, r7, r3
 8007380:	781b      	ldrb	r3, [r3, #0]
}
 8007382:	0018      	movs	r0, r3
 8007384:	46bd      	mov	sp, r7
 8007386:	b006      	add	sp, #24
 8007388:	bdb0      	pop	{r4, r5, r7, pc}

0800738a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800738a:	b5b0      	push	{r4, r5, r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007398:	250f      	movs	r5, #15
 800739a:	197c      	adds	r4, r7, r5
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2101      	movs	r1, #1
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7ff fef3 	bl	800718c <dir_alloc>
 80073a6:	0003      	movs	r3, r0
 80073a8:	7023      	strb	r3, [r4, #0]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80073aa:	197b      	adds	r3, r7, r5
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d11f      	bne.n	80073f2 <dir_register+0x68>
		res = move_window(fs, dp->sect);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69da      	ldr	r2, [r3, #28]
 80073b6:	197c      	adds	r4, r7, r5
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	0011      	movs	r1, r2
 80073bc:	0018      	movs	r0, r3
 80073be:	f7ff f9d7 	bl	8006770 <move_window>
 80073c2:	0003      	movs	r3, r0
 80073c4:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 80073c6:	197b      	adds	r3, r7, r5
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d111      	bne.n	80073f2 <dir_register+0x68>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	2220      	movs	r2, #32
 80073d4:	2100      	movs	r1, #0
 80073d6:	0018      	movs	r0, r3
 80073d8:	f7fe ffc1 	bl	800635e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a18      	ldr	r0, [r3, #32]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3324      	adds	r3, #36	@ 0x24
 80073e4:	220b      	movs	r2, #11
 80073e6:	0019      	movs	r1, r3
 80073e8:	f7fe ff9a 	bl	8006320 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2201      	movs	r2, #1
 80073f0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80073f2:	230f      	movs	r3, #15
 80073f4:	18fb      	adds	r3, r7, r3
 80073f6:	781b      	ldrb	r3, [r3, #0]
}
 80073f8:	0018      	movs	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	b004      	add	sp, #16
 80073fe:	bdb0      	pop	{r4, r5, r7, pc}

08007400 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3324      	adds	r3, #36	@ 0x24
 8007414:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	220b      	movs	r2, #11
 800741a:	2120      	movs	r1, #32
 800741c:	0018      	movs	r0, r3
 800741e:	f7fe ff9e 	bl	800635e <mem_set>
	si = i = 0; ni = 8;
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	61fb      	str	r3, [r7, #28]
 800742a:	2308      	movs	r3, #8
 800742c:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	61fa      	str	r2, [r7, #28]
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	18d2      	adds	r2, r2, r3
 8007438:	211b      	movs	r1, #27
 800743a:	187b      	adds	r3, r7, r1
 800743c:	7812      	ldrb	r2, [r2, #0]
 800743e:	701a      	strb	r2, [r3, #0]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007440:	000a      	movs	r2, r1
 8007442:	18bb      	adds	r3, r7, r2
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	2b20      	cmp	r3, #32
 8007448:	d800      	bhi.n	800744c <create_name+0x4c>
 800744a:	e062      	b.n	8007512 <create_name+0x112>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800744c:	18bb      	adds	r3, r7, r2
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b2f      	cmp	r3, #47	@ 0x2f
 8007452:	d007      	beq.n	8007464 <create_name+0x64>
 8007454:	18bb      	adds	r3, r7, r2
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b5c      	cmp	r3, #92	@ 0x5c
 800745a:	d110      	bne.n	800747e <create_name+0x7e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800745c:	e002      	b.n	8007464 <create_name+0x64>
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	18d3      	adds	r3, r2, r3
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b2f      	cmp	r3, #47	@ 0x2f
 800746e:	d0f6      	beq.n	800745e <create_name+0x5e>
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	18d3      	adds	r3, r2, r3
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b5c      	cmp	r3, #92	@ 0x5c
 800747a:	d0f0      	beq.n	800745e <create_name+0x5e>
			break;
 800747c:	e04a      	b.n	8007514 <create_name+0x114>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800747e:	231b      	movs	r3, #27
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b2e      	cmp	r3, #46	@ 0x2e
 8007486:	d003      	beq.n	8007490 <create_name+0x90>
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	429a      	cmp	r2, r3
 800748e:	d30e      	bcc.n	80074ae <create_name+0xae>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b0b      	cmp	r3, #11
 8007494:	d004      	beq.n	80074a0 <create_name+0xa0>
 8007496:	231b      	movs	r3, #27
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b2e      	cmp	r3, #46	@ 0x2e
 800749e:	d001      	beq.n	80074a4 <create_name+0xa4>
 80074a0:	2306      	movs	r3, #6
 80074a2:	e054      	b.n	800754e <create_name+0x14e>
			i = 8; ni = 11;				/* Goto extension */
 80074a4:	2308      	movs	r3, #8
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	230b      	movs	r3, #11
 80074aa:	617b      	str	r3, [r7, #20]
			continue;
 80074ac:	e030      	b.n	8007510 <create_name+0x110>
		}
		if (c >= 0x80) {				/* Extended character? */
 80074ae:	211b      	movs	r1, #27
 80074b0:	187b      	adds	r3, r7, r1
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	b25b      	sxtb	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da07      	bge.n	80074ca <create_name+0xca>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80074ba:	187b      	adds	r3, r7, r1
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	3b80      	subs	r3, #128	@ 0x80
 80074c0:	001a      	movs	r2, r3
 80074c2:	187b      	adds	r3, r7, r1
 80074c4:	4924      	ldr	r1, [pc, #144]	@ (8007558 <create_name+0x158>)
 80074c6:	5c8a      	ldrb	r2, [r1, r2]
 80074c8:	701a      	strb	r2, [r3, #0]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80074ca:	231b      	movs	r3, #27
 80074cc:	18fb      	adds	r3, r7, r3
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	4b22      	ldr	r3, [pc, #136]	@ (800755c <create_name+0x15c>)
 80074d2:	0011      	movs	r1, r2
 80074d4:	0018      	movs	r0, r3
 80074d6:	f7fe ff80 	bl	80063da <chk_chr>
 80074da:	1e03      	subs	r3, r0, #0
 80074dc:	d001      	beq.n	80074e2 <create_name+0xe2>
 80074de:	2306      	movs	r3, #6
 80074e0:	e035      	b.n	800754e <create_name+0x14e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80074e2:	221b      	movs	r2, #27
 80074e4:	18bb      	adds	r3, r7, r2
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b60      	cmp	r3, #96	@ 0x60
 80074ea:	d908      	bls.n	80074fe <create_name+0xfe>
 80074ec:	18bb      	adds	r3, r7, r2
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	2b7a      	cmp	r3, #122	@ 0x7a
 80074f2:	d804      	bhi.n	80074fe <create_name+0xfe>
 80074f4:	18bb      	adds	r3, r7, r2
 80074f6:	18ba      	adds	r2, r7, r2
 80074f8:	7812      	ldrb	r2, [r2, #0]
 80074fa:	3a20      	subs	r2, #32
 80074fc:	701a      	strb	r2, [r3, #0]
			sfn[i++] = c;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	613a      	str	r2, [r7, #16]
 8007504:	68ba      	ldr	r2, [r7, #8]
 8007506:	18d3      	adds	r3, r2, r3
 8007508:	221b      	movs	r2, #27
 800750a:	18ba      	adds	r2, r7, r2
 800750c:	7812      	ldrb	r2, [r2, #0]
 800750e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007510:	e78d      	b.n	800742e <create_name+0x2e>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007512:	46c0      	nop			@ (mov r8, r8)
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	18d2      	adds	r2, r2, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <create_name+0x128>
 8007524:	2306      	movs	r3, #6
 8007526:	e012      	b.n	800754e <create_name+0x14e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2be5      	cmp	r3, #229	@ 0xe5
 800752e:	d102      	bne.n	8007536 <create_name+0x136>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2205      	movs	r2, #5
 8007534:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007536:	231b      	movs	r3, #27
 8007538:	18fb      	adds	r3, r7, r3
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b20      	cmp	r3, #32
 800753e:	d801      	bhi.n	8007544 <create_name+0x144>
 8007540:	2204      	movs	r2, #4
 8007542:	e000      	b.n	8007546 <create_name+0x146>
 8007544:	2200      	movs	r2, #0
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	330b      	adds	r3, #11
 800754a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800754c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800754e:	0018      	movs	r0, r3
 8007550:	46bd      	mov	sp, r7
 8007552:	b008      	add	sp, #32
 8007554:	bd80      	pop	{r7, pc}
 8007556:	46c0      	nop			@ (mov r8, r8)
 8007558:	0800b21c 	.word	0x0800b21c
 800755c:	0800b0c0 	.word	0x0800b0c0

08007560 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007560:	b5b0      	push	{r4, r5, r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007574:	e002      	b.n	800757c <follow_path+0x1c>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	603b      	str	r3, [r7, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b2f      	cmp	r3, #47	@ 0x2f
 8007582:	d0f8      	beq.n	8007576 <follow_path+0x16>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	2b5c      	cmp	r3, #92	@ 0x5c
 800758a:	d0f4      	beq.n	8007576 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2200      	movs	r2, #0
 8007590:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b1f      	cmp	r3, #31
 8007598:	d80d      	bhi.n	80075b6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	222f      	movs	r2, #47	@ 0x2f
 800759e:	2180      	movs	r1, #128	@ 0x80
 80075a0:	5499      	strb	r1, [r3, r2]
		res = dir_sdi(dp, 0);
 80075a2:	2317      	movs	r3, #23
 80075a4:	18fc      	adds	r4, r7, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2100      	movs	r1, #0
 80075aa:	0018      	movs	r0, r3
 80075ac:	f7ff fca7 	bl	8006efe <dir_sdi>
 80075b0:	0003      	movs	r3, r0
 80075b2:	7023      	strb	r3, [r4, #0]
 80075b4:	e052      	b.n	800765c <follow_path+0xfc>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80075b6:	2517      	movs	r5, #23
 80075b8:	197c      	adds	r4, r7, r5
 80075ba:	003a      	movs	r2, r7
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	0011      	movs	r1, r2
 80075c0:	0018      	movs	r0, r3
 80075c2:	f7ff ff1d 	bl	8007400 <create_name>
 80075c6:	0003      	movs	r3, r0
 80075c8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
 80075ca:	197b      	adds	r3, r7, r5
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d13f      	bne.n	8007652 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the segment name */
 80075d2:	197c      	adds	r4, r7, r5
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f7ff fe6f 	bl	80072ba <dir_find>
 80075dc:	0003      	movs	r3, r0
 80075de:	7023      	strb	r3, [r4, #0]
			ns = dp->fn[NSFLAG];
 80075e0:	200b      	movs	r0, #11
 80075e2:	183b      	adds	r3, r7, r0
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	212f      	movs	r1, #47	@ 0x2f
 80075e8:	5c52      	ldrb	r2, [r2, r1]
 80075ea:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
 80075ec:	197b      	adds	r3, r7, r5
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00c      	beq.n	800760e <follow_path+0xae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80075f4:	197b      	adds	r3, r7, r5
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d12c      	bne.n	8007656 <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80075fc:	183b      	adds	r3, r7, r0
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2204      	movs	r2, #4
 8007602:	4013      	ands	r3, r2
 8007604:	d127      	bne.n	8007656 <follow_path+0xf6>
 8007606:	197b      	adds	r3, r7, r5
 8007608:	2205      	movs	r2, #5
 800760a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800760c:	e023      	b.n	8007656 <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800760e:	230b      	movs	r3, #11
 8007610:	18fb      	adds	r3, r7, r3
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2204      	movs	r2, #4
 8007616:	4013      	ands	r3, r2
 8007618:	d11f      	bne.n	800765a <follow_path+0xfa>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	799b      	ldrb	r3, [r3, #6]
 800761e:	001a      	movs	r2, r3
 8007620:	2310      	movs	r3, #16
 8007622:	4013      	ands	r3, r2
 8007624:	d104      	bne.n	8007630 <follow_path+0xd0>
				res = FR_NO_PATH; break;
 8007626:	2317      	movs	r3, #23
 8007628:	18fb      	adds	r3, r7, r3
 800762a:	2205      	movs	r2, #5
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	e015      	b.n	800765c <follow_path+0xfc>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3330      	adds	r3, #48	@ 0x30
 8007634:	001a      	movs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	05db      	lsls	r3, r3, #23
 800763c:	0ddb      	lsrs	r3, r3, #23
 800763e:	18d2      	adds	r2, r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	0011      	movs	r1, r2
 8007644:	0018      	movs	r0, r3
 8007646:	f7ff fdf9 	bl	800723c <ld_clust>
 800764a:	0002      	movs	r2, r0
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007650:	e7b1      	b.n	80075b6 <follow_path+0x56>
			if (res != FR_OK) break;
 8007652:	46c0      	nop			@ (mov r8, r8)
 8007654:	e002      	b.n	800765c <follow_path+0xfc>
				break;
 8007656:	46c0      	nop			@ (mov r8, r8)
 8007658:	e000      	b.n	800765c <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800765a:	46c0      	nop			@ (mov r8, r8)
			}
		}
	}

	return res;
 800765c:	2317      	movs	r3, #23
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	781b      	ldrb	r3, [r3, #0]
}
 8007662:	0018      	movs	r0, r3
 8007664:	46bd      	mov	sp, r7
 8007666:	b006      	add	sp, #24
 8007668:	bdb0      	pop	{r4, r5, r7, pc}

0800766a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007672:	2301      	movs	r3, #1
 8007674:	425b      	negs	r3, r3
 8007676:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d031      	beq.n	80076e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e002      	b.n	800768e <get_ldnumber+0x24>
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	3301      	adds	r3, #1
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b20      	cmp	r3, #32
 8007694:	d903      	bls.n	800769e <get_ldnumber+0x34>
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b3a      	cmp	r3, #58	@ 0x3a
 800769c:	d1f4      	bne.n	8007688 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b3a      	cmp	r3, #58	@ 0x3a
 80076a4:	d11c      	bne.n	80076e0 <get_ldnumber+0x76>
			tp = *path;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	60fa      	str	r2, [r7, #12]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	3b30      	subs	r3, #48	@ 0x30
 80076b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b09      	cmp	r3, #9
 80076bc:	d80e      	bhi.n	80076dc <get_ldnumber+0x72>
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d10a      	bne.n	80076dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d107      	bne.n	80076dc <get_ldnumber+0x72>
					vol = (int)i;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	3301      	adds	r3, #1
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	e002      	b.n	80076e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80076e4:	693b      	ldr	r3, [r7, #16]
}
 80076e6:	0018      	movs	r0, r3
 80076e8:	46bd      	mov	sp, r7
 80076ea:	b006      	add	sp, #24
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	70da      	strb	r2, [r3, #3]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	4252      	negs	r2, r2
 8007706:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	0011      	movs	r1, r2
 800770e:	0018      	movs	r0, r3
 8007710:	f7ff f82e 	bl	8006770 <move_window>
 8007714:	1e03      	subs	r3, r0, #0
 8007716:	d001      	beq.n	800771c <check_fs+0x2c>
 8007718:	2304      	movs	r3, #4
 800771a:	e037      	b.n	800778c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3330      	adds	r3, #48	@ 0x30
 8007720:	33ff      	adds	r3, #255	@ 0xff
 8007722:	33ff      	adds	r3, #255	@ 0xff
 8007724:	0018      	movs	r0, r3
 8007726:	f7fe fd77 	bl	8006218 <ld_word>
 800772a:	0003      	movs	r3, r0
 800772c:	001a      	movs	r2, r3
 800772e:	4b19      	ldr	r3, [pc, #100]	@ (8007794 <check_fs+0xa4>)
 8007730:	429a      	cmp	r2, r3
 8007732:	d001      	beq.n	8007738 <check_fs+0x48>
 8007734:	2303      	movs	r3, #3
 8007736:	e029      	b.n	800778c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2230      	movs	r2, #48	@ 0x30
 800773c:	5c9b      	ldrb	r3, [r3, r2]
 800773e:	2be9      	cmp	r3, #233	@ 0xe9
 8007740:	d009      	beq.n	8007756 <check_fs+0x66>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2230      	movs	r2, #48	@ 0x30
 8007746:	5c9b      	ldrb	r3, [r3, r2]
 8007748:	2beb      	cmp	r3, #235	@ 0xeb
 800774a:	d11e      	bne.n	800778a <check_fs+0x9a>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2232      	movs	r2, #50	@ 0x32
 8007750:	5c9b      	ldrb	r3, [r3, r2]
 8007752:	2b90      	cmp	r3, #144	@ 0x90
 8007754:	d119      	bne.n	800778a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3330      	adds	r3, #48	@ 0x30
 800775a:	3336      	adds	r3, #54	@ 0x36
 800775c:	0018      	movs	r0, r3
 800775e:	f7fe fd76 	bl	800624e <ld_dword>
 8007762:	0003      	movs	r3, r0
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	0a1b      	lsrs	r3, r3, #8
 8007768:	4a0b      	ldr	r2, [pc, #44]	@ (8007798 <check_fs+0xa8>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d101      	bne.n	8007772 <check_fs+0x82>
 800776e:	2300      	movs	r3, #0
 8007770:	e00c      	b.n	800778c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	3330      	adds	r3, #48	@ 0x30
 8007776:	3352      	adds	r3, #82	@ 0x52
 8007778:	0018      	movs	r0, r3
 800777a:	f7fe fd68 	bl	800624e <ld_dword>
 800777e:	0003      	movs	r3, r0
 8007780:	4a06      	ldr	r2, [pc, #24]	@ (800779c <check_fs+0xac>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d101      	bne.n	800778a <check_fs+0x9a>
 8007786:	2300      	movs	r3, #0
 8007788:	e000      	b.n	800778c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800778a:	2302      	movs	r3, #2
}
 800778c:	0018      	movs	r0, r3
 800778e:	46bd      	mov	sp, r7
 8007790:	b002      	add	sp, #8
 8007792:	bd80      	pop	{r7, pc}
 8007794:	0000aa55 	.word	0x0000aa55
 8007798:	00544146 	.word	0x00544146
 800779c:	33544146 	.word	0x33544146

080077a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80077a0:	b5b0      	push	{r4, r5, r7, lr}
 80077a2:	b096      	sub	sp, #88	@ 0x58
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	1dfb      	adds	r3, r7, #7
 80077ac:	701a      	strb	r2, [r3, #0]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	0018      	movs	r0, r3
 80077b8:	f7ff ff57 	bl	800766a <get_ldnumber>
 80077bc:	0003      	movs	r3, r0
 80077be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80077c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	da01      	bge.n	80077ca <find_volume+0x2a>
 80077c6:	230b      	movs	r3, #11
 80077c8:	e24b      	b.n	8007c62 <find_volume+0x4c2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80077ca:	4bcc      	ldr	r3, [pc, #816]	@ (8007afc <find_volume+0x35c>)
 80077cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80077ce:	0092      	lsls	r2, r2, #2
 80077d0:	58d3      	ldr	r3, [r2, r3]
 80077d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80077d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <find_volume+0x3e>
 80077da:	230c      	movs	r3, #12
 80077dc:	e241      	b.n	8007c62 <find_volume+0x4c2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80077e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80077e4:	1dfb      	adds	r3, r7, #7
 80077e6:	1dfa      	adds	r2, r7, #7
 80077e8:	7812      	ldrb	r2, [r2, #0]
 80077ea:	2101      	movs	r1, #1
 80077ec:	438a      	bics	r2, r1
 80077ee:	701a      	strb	r2, [r3, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80077f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01b      	beq.n	8007830 <find_volume+0x90>
		stat = disk_status(fs->drv);
 80077f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2537      	movs	r5, #55	@ 0x37
 80077fe:	197c      	adds	r4, r7, r5
 8007800:	0018      	movs	r0, r3
 8007802:	f7fe fc3f 	bl	8006084 <disk_status>
 8007806:	0003      	movs	r3, r0
 8007808:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800780a:	0029      	movs	r1, r5
 800780c:	187b      	adds	r3, r7, r1
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2201      	movs	r2, #1
 8007812:	4013      	ands	r3, r2
 8007814:	d10c      	bne.n	8007830 <find_volume+0x90>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007816:	1dfb      	adds	r3, r7, #7
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d006      	beq.n	800782c <find_volume+0x8c>
 800781e:	187b      	adds	r3, r7, r1
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2204      	movs	r2, #4
 8007824:	4013      	ands	r3, r2
 8007826:	d001      	beq.n	800782c <find_volume+0x8c>
				return FR_WRITE_PROTECTED;
 8007828:	230a      	movs	r3, #10
 800782a:	e21a      	b.n	8007c62 <find_volume+0x4c2>
			}
			return FR_OK;				/* The file system object is valid */
 800782c:	2300      	movs	r3, #0
 800782e:	e218      	b.n	8007c62 <find_volume+0x4c2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007838:	b2da      	uxtb	r2, r3
 800783a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800783c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800783e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007840:	785b      	ldrb	r3, [r3, #1]
 8007842:	2537      	movs	r5, #55	@ 0x37
 8007844:	197c      	adds	r4, r7, r5
 8007846:	0018      	movs	r0, r3
 8007848:	f7fe fc3e 	bl	80060c8 <disk_initialize>
 800784c:	0003      	movs	r3, r0
 800784e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007850:	197b      	adds	r3, r7, r5
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2201      	movs	r2, #1
 8007856:	4013      	ands	r3, r2
 8007858:	d001      	beq.n	800785e <find_volume+0xbe>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800785a:	2303      	movs	r3, #3
 800785c:	e201      	b.n	8007c62 <find_volume+0x4c2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800785e:	1dfb      	adds	r3, r7, #7
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <find_volume+0xd6>
 8007866:	2337      	movs	r3, #55	@ 0x37
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	2204      	movs	r2, #4
 800786e:	4013      	ands	r3, r2
 8007870:	d001      	beq.n	8007876 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8007872:	230a      	movs	r3, #10
 8007874:	e1f5      	b.n	8007c62 <find_volume+0x4c2>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800787a:	2557      	movs	r5, #87	@ 0x57
 800787c:	197c      	adds	r4, r7, r5
 800787e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007882:	0011      	movs	r1, r2
 8007884:	0018      	movs	r0, r3
 8007886:	f7ff ff33 	bl	80076f0 <check_fs>
 800788a:	0003      	movs	r3, r0
 800788c:	7023      	strb	r3, [r4, #0]
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800788e:	197b      	adds	r3, r7, r5
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d14b      	bne.n	800792e <find_volume+0x18e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007896:	2300      	movs	r3, #0
 8007898:	643b      	str	r3, [r7, #64]	@ 0x40
 800789a:	e01d      	b.n	80078d8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800789c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800789e:	3330      	adds	r3, #48	@ 0x30
 80078a0:	001a      	movs	r2, r3
 80078a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078a4:	011b      	lsls	r3, r3, #4
 80078a6:	33bf      	adds	r3, #191	@ 0xbf
 80078a8:	33ff      	adds	r3, #255	@ 0xff
 80078aa:	18d3      	adds	r3, r2, r3
 80078ac:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80078ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b0:	3304      	adds	r3, #4
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d006      	beq.n	80078c6 <find_volume+0x126>
 80078b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ba:	3308      	adds	r3, #8
 80078bc:	0018      	movs	r0, r3
 80078be:	f7fe fcc6 	bl	800624e <ld_dword>
 80078c2:	0003      	movs	r3, r0
 80078c4:	e000      	b.n	80078c8 <find_volume+0x128>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2214      	movs	r2, #20
 80078ca:	18ba      	adds	r2, r7, r2
 80078cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ce:	0089      	lsls	r1, r1, #2
 80078d0:	508b      	str	r3, [r1, r2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80078d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078d4:	3301      	adds	r3, #1
 80078d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078da:	2b03      	cmp	r3, #3
 80078dc:	d9de      	bls.n	800789c <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80078de:	2300      	movs	r3, #0
 80078e0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80078e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <find_volume+0x14e>
 80078e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ea:	3b01      	subs	r3, #1
 80078ec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80078ee:	2314      	movs	r3, #20
 80078f0:	18fb      	adds	r3, r7, r3
 80078f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078f4:	0092      	lsls	r2, r2, #2
 80078f6:	58d3      	ldr	r3, [r2, r3]
 80078f8:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80078fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d008      	beq.n	8007912 <find_volume+0x172>
 8007900:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007904:	0011      	movs	r1, r2
 8007906:	0018      	movs	r0, r3
 8007908:	f7ff fef2 	bl	80076f0 <check_fs>
 800790c:	0003      	movs	r3, r0
 800790e:	001a      	movs	r2, r3
 8007910:	e000      	b.n	8007914 <find_volume+0x174>
 8007912:	2203      	movs	r2, #3
 8007914:	2157      	movs	r1, #87	@ 0x57
 8007916:	187b      	adds	r3, r7, r1
 8007918:	701a      	strb	r2, [r3, #0]
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800791a:	187b      	adds	r3, r7, r1
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d905      	bls.n	800792e <find_volume+0x18e>
 8007922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007924:	3301      	adds	r3, #1
 8007926:	643b      	str	r3, [r7, #64]	@ 0x40
 8007928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800792a:	2b03      	cmp	r3, #3
 800792c:	d9df      	bls.n	80078ee <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800792e:	2357      	movs	r3, #87	@ 0x57
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b04      	cmp	r3, #4
 8007936:	d101      	bne.n	800793c <find_volume+0x19c>
 8007938:	2301      	movs	r3, #1
 800793a:	e192      	b.n	8007c62 <find_volume+0x4c2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800793c:	2357      	movs	r3, #87	@ 0x57
 800793e:	18fb      	adds	r3, r7, r3
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d901      	bls.n	800794a <find_volume+0x1aa>
 8007946:	230d      	movs	r3, #13
 8007948:	e18b      	b.n	8007c62 <find_volume+0x4c2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794c:	3330      	adds	r3, #48	@ 0x30
 800794e:	330b      	adds	r3, #11
 8007950:	0018      	movs	r0, r3
 8007952:	f7fe fc61 	bl	8006218 <ld_word>
 8007956:	0003      	movs	r3, r0
 8007958:	001a      	movs	r2, r3
 800795a:	2380      	movs	r3, #128	@ 0x80
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	429a      	cmp	r2, r3
 8007960:	d001      	beq.n	8007966 <find_volume+0x1c6>
 8007962:	230d      	movs	r3, #13
 8007964:	e17d      	b.n	8007c62 <find_volume+0x4c2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	3330      	adds	r3, #48	@ 0x30
 800796a:	3316      	adds	r3, #22
 800796c:	0018      	movs	r0, r3
 800796e:	f7fe fc53 	bl	8006218 <ld_word>
 8007972:	0003      	movs	r3, r0
 8007974:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d107      	bne.n	800798c <find_volume+0x1ec>
 800797c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800797e:	3330      	adds	r3, #48	@ 0x30
 8007980:	3324      	adds	r3, #36	@ 0x24
 8007982:	0018      	movs	r0, r3
 8007984:	f7fe fc63 	bl	800624e <ld_dword>
 8007988:	0003      	movs	r3, r0
 800798a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800798c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007990:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007994:	2240      	movs	r2, #64	@ 0x40
 8007996:	5c9a      	ldrb	r2, [r3, r2]
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800799c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799e:	789b      	ldrb	r3, [r3, #2]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d005      	beq.n	80079b0 <find_volume+0x210>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a6:	789b      	ldrb	r3, [r3, #2]
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d001      	beq.n	80079b0 <find_volume+0x210>
 80079ac:	230d      	movs	r3, #13
 80079ae:	e158      	b.n	8007c62 <find_volume+0x4c2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80079b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b2:	789b      	ldrb	r3, [r3, #2]
 80079b4:	001a      	movs	r2, r3
 80079b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079b8:	4353      	muls	r3, r2
 80079ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80079bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079be:	223d      	movs	r2, #61	@ 0x3d
 80079c0:	5c9b      	ldrb	r3, [r3, r2]
 80079c2:	001a      	movs	r2, r3
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80079c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ca:	895b      	ldrh	r3, [r3, #10]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <find_volume+0x240>
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	895b      	ldrh	r3, [r3, #10]
 80079d4:	001a      	movs	r2, r3
 80079d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d8:	895b      	ldrh	r3, [r3, #10]
 80079da:	3b01      	subs	r3, #1
 80079dc:	4013      	ands	r3, r2
 80079de:	d001      	beq.n	80079e4 <find_volume+0x244>
 80079e0:	230d      	movs	r3, #13
 80079e2:	e13e      	b.n	8007c62 <find_volume+0x4c2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80079e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e6:	3330      	adds	r3, #48	@ 0x30
 80079e8:	3311      	adds	r3, #17
 80079ea:	0018      	movs	r0, r3
 80079ec:	f7fe fc14 	bl	8006218 <ld_word>
 80079f0:	0003      	movs	r3, r0
 80079f2:	001a      	movs	r2, r3
 80079f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80079f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fa:	891b      	ldrh	r3, [r3, #8]
 80079fc:	220f      	movs	r2, #15
 80079fe:	4013      	ands	r3, r2
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <find_volume+0x26a>
 8007a06:	230d      	movs	r3, #13
 8007a08:	e12b      	b.n	8007c62 <find_volume+0x4c2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0c:	3330      	adds	r3, #48	@ 0x30
 8007a0e:	3313      	adds	r3, #19
 8007a10:	0018      	movs	r0, r3
 8007a12:	f7fe fc01 	bl	8006218 <ld_word>
 8007a16:	0003      	movs	r3, r0
 8007a18:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d107      	bne.n	8007a30 <find_volume+0x290>
 8007a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a22:	3330      	adds	r3, #48	@ 0x30
 8007a24:	3320      	adds	r3, #32
 8007a26:	0018      	movs	r0, r3
 8007a28:	f7fe fc11 	bl	800624e <ld_dword>
 8007a2c:	0003      	movs	r3, r0
 8007a2e:	64bb      	str	r3, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	3330      	adds	r3, #48	@ 0x30
 8007a34:	330e      	adds	r3, #14
 8007a36:	252e      	movs	r5, #46	@ 0x2e
 8007a38:	197c      	adds	r4, r7, r5
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f7fe fbec 	bl	8006218 <ld_word>
 8007a40:	0003      	movs	r3, r0
 8007a42:	8023      	strh	r3, [r4, #0]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007a44:	197b      	adds	r3, r7, r5
 8007a46:	881b      	ldrh	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <find_volume+0x2b0>
 8007a4c:	230d      	movs	r3, #13
 8007a4e:	e108      	b.n	8007c62 <find_volume+0x4c2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007a50:	232e      	movs	r3, #46	@ 0x2e
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	881a      	ldrh	r2, [r3, #0]
 8007a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a58:	18d3      	adds	r3, r2, r3
 8007a5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a5c:	8912      	ldrh	r2, [r2, #8]
 8007a5e:	0912      	lsrs	r2, r2, #4
 8007a60:	b292      	uxth	r2, r2
 8007a62:	189b      	adds	r3, r3, r2
 8007a64:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007a66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d201      	bcs.n	8007a72 <find_volume+0x2d2>
 8007a6e:	230d      	movs	r3, #13
 8007a70:	e0f7      	b.n	8007c62 <find_volume+0x4c2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007a72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a76:	1ad2      	subs	r2, r2, r3
 8007a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a7a:	895b      	ldrh	r3, [r3, #10]
 8007a7c:	0019      	movs	r1, r3
 8007a7e:	0010      	movs	r0, r2
 8007a80:	f7f8 fb42 	bl	8000108 <__udivsi3>
 8007a84:	0003      	movs	r3, r0
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <find_volume+0x2f2>
 8007a8e:	230d      	movs	r3, #13
 8007a90:	e0e7      	b.n	8007c62 <find_volume+0x4c2>
		fmt = FS_FAT32;
 8007a92:	2157      	movs	r1, #87	@ 0x57
 8007a94:	187b      	adds	r3, r7, r1
 8007a96:	2203      	movs	r2, #3
 8007a98:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	4a18      	ldr	r2, [pc, #96]	@ (8007b00 <find_volume+0x360>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d802      	bhi.n	8007aa8 <find_volume+0x308>
 8007aa2:	187b      	adds	r3, r7, r1
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	701a      	strb	r2, [r3, #0]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	4a16      	ldr	r2, [pc, #88]	@ (8007b04 <find_volume+0x364>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d803      	bhi.n	8007ab8 <find_volume+0x318>
 8007ab0:	2357      	movs	r3, #87	@ 0x57
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	701a      	strb	r2, [r3, #0]

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aba:	1c9a      	adds	r2, r3, #2
 8007abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ac4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007ac6:	232e      	movs	r3, #46	@ 0x2e
 8007ac8:	18fb      	adds	r3, r7, r3
 8007aca:	881a      	ldrh	r2, [r3, #0]
 8007acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ace:	18d2      	adds	r2, r2, r3
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007ad4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	18d2      	adds	r2, r2, r3
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8007ade:	2357      	movs	r3, #87	@ 0x57
 8007ae0:	18fb      	adds	r3, r7, r3
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d123      	bne.n	8007b30 <find_volume+0x390>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aea:	3330      	adds	r3, #48	@ 0x30
 8007aec:	332a      	adds	r3, #42	@ 0x2a
 8007aee:	0018      	movs	r0, r3
 8007af0:	f7fe fb92 	bl	8006218 <ld_word>
 8007af4:	1e03      	subs	r3, r0, #0
 8007af6:	d007      	beq.n	8007b08 <find_volume+0x368>
 8007af8:	230d      	movs	r3, #13
 8007afa:	e0b2      	b.n	8007c62 <find_volume+0x4c2>
 8007afc:	20000ad8 	.word	0x20000ad8
 8007b00:	0000fff5 	.word	0x0000fff5
 8007b04:	00000ff5 	.word	0x00000ff5
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0a:	891b      	ldrh	r3, [r3, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <find_volume+0x374>
 8007b10:	230d      	movs	r3, #13
 8007b12:	e0a6      	b.n	8007c62 <find_volume+0x4c2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b16:	3330      	adds	r3, #48	@ 0x30
 8007b18:	332c      	adds	r3, #44	@ 0x2c
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f7fe fb97 	bl	800624e <ld_dword>
 8007b20:	0002      	movs	r2, r0
 8007b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b24:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b2e:	e020      	b.n	8007b72 <find_volume+0x3d2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b32:	891b      	ldrh	r3, [r3, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <find_volume+0x39c>
 8007b38:	230d      	movs	r3, #13
 8007b3a:	e092      	b.n	8007c62 <find_volume+0x4c2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	6a1a      	ldr	r2, [r3, #32]
 8007b40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b42:	18d2      	adds	r2, r2, r3
 8007b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b46:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007b48:	2357      	movs	r3, #87	@ 0x57
 8007b4a:	18fb      	adds	r3, r7, r3
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d103      	bne.n	8007b5a <find_volume+0x3ba>
 8007b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	e00a      	b.n	8007b70 <find_volume+0x3d0>
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5c:	695a      	ldr	r2, [r3, #20]
 8007b5e:	0013      	movs	r3, r2
 8007b60:	005b      	lsls	r3, r3, #1
 8007b62:	189b      	adds	r3, r3, r2
 8007b64:	085a      	lsrs	r2, r3, #1
 8007b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	400b      	ands	r3, r1
 8007b6e:	18d3      	adds	r3, r2, r3
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007b70:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b78:	493c      	ldr	r1, [pc, #240]	@ (8007c6c <find_volume+0x4cc>)
 8007b7a:	468c      	mov	ip, r1
 8007b7c:	4463      	add	r3, ip
 8007b7e:	0a5b      	lsrs	r3, r3, #9
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d201      	bcs.n	8007b88 <find_volume+0x3e8>
 8007b84:	230d      	movs	r3, #13
 8007b86:	e06c      	b.n	8007c62 <find_volume+0x4c2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	4252      	negs	r2, r2
 8007b8e:	611a      	str	r2, [r3, #16]
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b96:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9a:	2280      	movs	r2, #128	@ 0x80
 8007b9c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007b9e:	2357      	movs	r3, #87	@ 0x57
 8007ba0:	18fb      	adds	r3, r7, r3
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d148      	bne.n	8007c3a <find_volume+0x49a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	3330      	adds	r3, #48	@ 0x30
 8007bac:	3330      	adds	r3, #48	@ 0x30
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7fe fb32 	bl	8006218 <ld_word>
 8007bb4:	0003      	movs	r3, r0
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d13f      	bne.n	8007c3a <find_volume+0x49a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007bba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bbc:	1c5a      	adds	r2, r3, #1
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc0:	0011      	movs	r1, r2
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f7fe fdd4 	bl	8006770 <move_window>
 8007bc8:	1e03      	subs	r3, r0, #0
 8007bca:	d136      	bne.n	8007c3a <find_volume+0x49a>
		{
			fs->fsi_flag = 0;
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bce:	2200      	movs	r2, #0
 8007bd0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd4:	3330      	adds	r3, #48	@ 0x30
 8007bd6:	33ff      	adds	r3, #255	@ 0xff
 8007bd8:	33ff      	adds	r3, #255	@ 0xff
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f7fe fb1c 	bl	8006218 <ld_word>
 8007be0:	0003      	movs	r3, r0
 8007be2:	001a      	movs	r2, r3
 8007be4:	4b22      	ldr	r3, [pc, #136]	@ (8007c70 <find_volume+0x4d0>)
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d127      	bne.n	8007c3a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bec:	3330      	adds	r3, #48	@ 0x30
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f7fe fb2d 	bl	800624e <ld_dword>
 8007bf4:	0003      	movs	r3, r0
 8007bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8007c74 <find_volume+0x4d4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d11e      	bne.n	8007c3a <find_volume+0x49a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bfe:	3330      	adds	r3, #48	@ 0x30
 8007c00:	33e5      	adds	r3, #229	@ 0xe5
 8007c02:	33ff      	adds	r3, #255	@ 0xff
 8007c04:	0018      	movs	r0, r3
 8007c06:	f7fe fb22 	bl	800624e <ld_dword>
 8007c0a:	0003      	movs	r3, r0
 8007c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8007c78 <find_volume+0x4d8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d113      	bne.n	8007c3a <find_volume+0x49a>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c14:	3330      	adds	r3, #48	@ 0x30
 8007c16:	33e9      	adds	r3, #233	@ 0xe9
 8007c18:	33ff      	adds	r3, #255	@ 0xff
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f7fe fb17 	bl	800624e <ld_dword>
 8007c20:	0002      	movs	r2, r0
 8007c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c24:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c28:	3330      	adds	r3, #48	@ 0x30
 8007c2a:	33ed      	adds	r3, #237	@ 0xed
 8007c2c:	33ff      	adds	r3, #255	@ 0xff
 8007c2e:	0018      	movs	r0, r3
 8007c30:	f7fe fb0d 	bl	800624e <ld_dword>
 8007c34:	0002      	movs	r2, r0
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3c:	2257      	movs	r2, #87	@ 0x57
 8007c3e:	18ba      	adds	r2, r7, r2
 8007c40:	7812      	ldrb	r2, [r2, #0]
 8007c42:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007c44:	4b0d      	ldr	r3, [pc, #52]	@ (8007c7c <find_volume+0x4dc>)
 8007c46:	881b      	ldrh	r3, [r3, #0]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c7c <find_volume+0x4dc>)
 8007c4e:	801a      	strh	r2, [r3, #0]
 8007c50:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <find_volume+0x4dc>)
 8007c52:	881a      	ldrh	r2, [r3, #0]
 8007c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c56:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	f7fe fd20 	bl	80066a0 <clear_lock>
#endif
	return FR_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	0018      	movs	r0, r3
 8007c64:	46bd      	mov	sp, r7
 8007c66:	b016      	add	sp, #88	@ 0x58
 8007c68:	bdb0      	pop	{r4, r5, r7, pc}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	000001ff 	.word	0x000001ff
 8007c70:	0000aa55 	.word	0x0000aa55
 8007c74:	41615252 	.word	0x41615252
 8007c78:	61417272 	.word	0x61417272
 8007c7c:	20000adc 	.word	0x20000adc

08007c80 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007c80:	b590      	push	{r4, r7, lr}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007c8a:	240f      	movs	r4, #15
 8007c8c:	193b      	adds	r3, r7, r4
 8007c8e:	2209      	movs	r2, #9
 8007c90:	701a      	strb	r2, [r3, #0]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01d      	beq.n	8007cd4 <validate+0x54>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d019      	beq.n	8007cd4 <validate+0x54>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d014      	beq.n	8007cd4 <validate+0x54>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	889a      	ldrh	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	88db      	ldrh	r3, [r3, #6]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d10d      	bne.n	8007cd4 <validate+0x54>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	785b      	ldrb	r3, [r3, #1]
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f7fe f9e0 	bl	8006084 <disk_status>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	001a      	movs	r2, r3
 8007cc8:	2301      	movs	r3, #1
 8007cca:	4013      	ands	r3, r2
 8007ccc:	d102      	bne.n	8007cd4 <validate+0x54>
			res = FR_OK;
 8007cce:	193b      	adds	r3, r7, r4
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007cd4:	230f      	movs	r3, #15
 8007cd6:	18fb      	adds	r3, r7, r3
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d102      	bne.n	8007ce4 <validate+0x64>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	e000      	b.n	8007ce6 <validate+0x66>
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	601a      	str	r2, [r3, #0]
	return res;
 8007cea:	230f      	movs	r3, #15
 8007cec:	18fb      	adds	r3, r7, r3
 8007cee:	781b      	ldrb	r3, [r3, #0]
}
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	b005      	add	sp, #20
 8007cf6:	bd90      	pop	{r4, r7, pc}

08007cf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007cf8:	b5b0      	push	{r4, r5, r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	1dfb      	adds	r3, r7, #7
 8007d04:	701a      	strb	r2, [r3, #0]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007d0a:	2310      	movs	r3, #16
 8007d0c:	18fb      	adds	r3, r7, r3
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f7ff fcab 	bl	800766a <get_ldnumber>
 8007d14:	0003      	movs	r3, r0
 8007d16:	61fb      	str	r3, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	da01      	bge.n	8007d22 <f_mount+0x2a>
 8007d1e:	230b      	movs	r3, #11
 8007d20:	e030      	b.n	8007d84 <f_mount+0x8c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d22:	4b1a      	ldr	r3, [pc, #104]	@ (8007d8c <f_mount+0x94>)
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	0092      	lsls	r2, r2, #2
 8007d28:	58d3      	ldr	r3, [r2, r3]
 8007d2a:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d006      	beq.n	8007d40 <f_mount+0x48>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	0018      	movs	r0, r3
 8007d36:	f7fe fcb3 	bl	80066a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007d4c:	68f9      	ldr	r1, [r7, #12]
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d8c <f_mount+0x94>)
 8007d50:	69fa      	ldr	r2, [r7, #28]
 8007d52:	0092      	lsls	r2, r2, #2
 8007d54:	50d1      	str	r1, [r2, r3]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <f_mount+0x6c>
 8007d5c:	1dfb      	adds	r3, r7, #7
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d001      	beq.n	8007d68 <f_mount+0x70>
 8007d64:	2300      	movs	r3, #0
 8007d66:	e00d      	b.n	8007d84 <f_mount+0x8c>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007d68:	2517      	movs	r5, #23
 8007d6a:	197c      	adds	r4, r7, r5
 8007d6c:	230c      	movs	r3, #12
 8007d6e:	18f9      	adds	r1, r7, r3
 8007d70:	2308      	movs	r3, #8
 8007d72:	18fb      	adds	r3, r7, r3
 8007d74:	2200      	movs	r2, #0
 8007d76:	0018      	movs	r0, r3
 8007d78:	f7ff fd12 	bl	80077a0 <find_volume>
 8007d7c:	0003      	movs	r3, r0
 8007d7e:	7023      	strb	r3, [r4, #0]
	LEAVE_FF(fs, res);
 8007d80:	197b      	adds	r3, r7, r5
 8007d82:	781b      	ldrb	r3, [r3, #0]
}
 8007d84:	0018      	movs	r0, r3
 8007d86:	46bd      	mov	sp, r7
 8007d88:	b008      	add	sp, #32
 8007d8a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d8c:	20000ad8 	.word	0x20000ad8

08007d90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d92:	b099      	sub	sp, #100	@ 0x64
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	1dfb      	adds	r3, r7, #7
 8007d9c:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <f_open+0x18>
 8007da4:	2309      	movs	r3, #9
 8007da6:	e1e3      	b.n	8008170 <f_open+0x3e0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007da8:	1dfb      	adds	r3, r7, #7
 8007daa:	1dfa      	adds	r2, r7, #7
 8007dac:	7812      	ldrb	r2, [r2, #0]
 8007dae:	213f      	movs	r1, #63	@ 0x3f
 8007db0:	400a      	ands	r2, r1
 8007db2:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007db4:	255f      	movs	r5, #95	@ 0x5f
 8007db6:	197c      	adds	r4, r7, r5
 8007db8:	1dfb      	adds	r3, r7, #7
 8007dba:	781a      	ldrb	r2, [r3, #0]
 8007dbc:	2310      	movs	r3, #16
 8007dbe:	18f9      	adds	r1, r7, r3
 8007dc0:	2308      	movs	r3, #8
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f7ff fceb 	bl	80077a0 <find_volume>
 8007dca:	0003      	movs	r3, r0
 8007dcc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8007dce:	197b      	adds	r3, r7, r5
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d000      	beq.n	8007dd8 <f_open+0x48>
 8007dd6:	e1c0      	b.n	800815a <f_open+0x3ca>
		dj.obj.fs = fs;
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	2614      	movs	r6, #20
 8007ddc:	19bb      	adds	r3, r7, r6
 8007dde:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	197c      	adds	r4, r7, r5
 8007de4:	19bb      	adds	r3, r7, r6
 8007de6:	0011      	movs	r1, r2
 8007de8:	0018      	movs	r0, r3
 8007dea:	f7ff fbb9 	bl	8007560 <follow_path>
 8007dee:	0003      	movs	r3, r0
 8007df0:	7023      	strb	r3, [r4, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007df2:	0029      	movs	r1, r5
 8007df4:	197b      	adds	r3, r7, r5
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d11b      	bne.n	8007e34 <f_open+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007dfc:	19bb      	adds	r3, r7, r6
 8007dfe:	222f      	movs	r2, #47	@ 0x2f
 8007e00:	5c9b      	ldrb	r3, [r3, r2]
 8007e02:	b25b      	sxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da03      	bge.n	8007e10 <f_open+0x80>
				res = FR_INVALID_NAME;
 8007e08:	187b      	adds	r3, r7, r1
 8007e0a:	2206      	movs	r2, #6
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	e011      	b.n	8007e34 <f_open+0xa4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e10:	1dfb      	adds	r3, r7, #7
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	2201      	movs	r2, #1
 8007e16:	429a      	cmp	r2, r3
 8007e18:	419b      	sbcs	r3, r3
 8007e1a:	425b      	negs	r3, r3
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	001a      	movs	r2, r3
 8007e20:	235f      	movs	r3, #95	@ 0x5f
 8007e22:	18fc      	adds	r4, r7, r3
 8007e24:	2314      	movs	r3, #20
 8007e26:	18fb      	adds	r3, r7, r3
 8007e28:	0011      	movs	r1, r2
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f7fe faee 	bl	800640c <chk_lock>
 8007e30:	0003      	movs	r3, r0
 8007e32:	7023      	strb	r3, [r4, #0]
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e34:	1dfb      	adds	r3, r7, #7
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	221c      	movs	r2, #28
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	d100      	bne.n	8007e40 <f_open+0xb0>
 8007e3e:	e096      	b.n	8007f6e <f_open+0x1de>
			if (res != FR_OK) {					/* No file, create new */
 8007e40:	225f      	movs	r2, #95	@ 0x5f
 8007e42:	18bb      	adds	r3, r7, r2
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d01a      	beq.n	8007e80 <f_open+0xf0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e4a:	18bb      	adds	r3, r7, r2
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	d10f      	bne.n	8007e72 <f_open+0xe2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e52:	f7fe fb33 	bl	80064bc <enq_lock>
 8007e56:	1e03      	subs	r3, r0, #0
 8007e58:	d007      	beq.n	8007e6a <f_open+0xda>
 8007e5a:	2314      	movs	r3, #20
 8007e5c:	18fb      	adds	r3, r7, r3
 8007e5e:	0018      	movs	r0, r3
 8007e60:	f7ff fa93 	bl	800738a <dir_register>
 8007e64:	0003      	movs	r3, r0
 8007e66:	001a      	movs	r2, r3
 8007e68:	e000      	b.n	8007e6c <f_open+0xdc>
 8007e6a:	2212      	movs	r2, #18
 8007e6c:	235f      	movs	r3, #95	@ 0x5f
 8007e6e:	18fb      	adds	r3, r7, r3
 8007e70:	701a      	strb	r2, [r3, #0]
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007e72:	1dfb      	adds	r3, r7, #7
 8007e74:	1dfa      	adds	r2, r7, #7
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	2108      	movs	r1, #8
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	e014      	b.n	8007eaa <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007e80:	2314      	movs	r3, #20
 8007e82:	18fb      	adds	r3, r7, r3
 8007e84:	799b      	ldrb	r3, [r3, #6]
 8007e86:	001a      	movs	r2, r3
 8007e88:	2311      	movs	r3, #17
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <f_open+0x108>
					res = FR_DENIED;
 8007e8e:	235f      	movs	r3, #95	@ 0x5f
 8007e90:	18fb      	adds	r3, r7, r3
 8007e92:	2207      	movs	r2, #7
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	e008      	b.n	8007eaa <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007e98:	1dfb      	adds	r3, r7, #7
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	4013      	ands	r3, r2
 8007ea0:	d003      	beq.n	8007eaa <f_open+0x11a>
 8007ea2:	235f      	movs	r3, #95	@ 0x5f
 8007ea4:	18fb      	adds	r3, r7, r3
 8007ea6:	2208      	movs	r2, #8
 8007ea8:	701a      	strb	r2, [r3, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007eaa:	245f      	movs	r4, #95	@ 0x5f
 8007eac:	193b      	adds	r3, r7, r4
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d000      	beq.n	8007eb6 <f_open+0x126>
 8007eb4:	e07b      	b.n	8007fae <f_open+0x21e>
 8007eb6:	1dfb      	adds	r3, r7, #7
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2208      	movs	r2, #8
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	d100      	bne.n	8007ec2 <f_open+0x132>
 8007ec0:	e075      	b.n	8007fae <f_open+0x21e>
				dw = GET_FATTIME();
 8007ec2:	f7fe f883 	bl	8005fcc <get_fattime>
 8007ec6:	0003      	movs	r3, r0
 8007ec8:	653b      	str	r3, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007eca:	2514      	movs	r5, #20
 8007ecc:	197b      	adds	r3, r7, r5
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	330e      	adds	r3, #14
 8007ed2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ed4:	0011      	movs	r1, r2
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	f7fe f9f8 	bl	80062cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007edc:	197b      	adds	r3, r7, r5
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	3316      	adds	r3, #22
 8007ee2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007ee4:	0011      	movs	r1, r2
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f7fe f9f0 	bl	80062cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007eec:	197b      	adds	r3, r7, r5
 8007eee:	6a1b      	ldr	r3, [r3, #32]
 8007ef0:	330b      	adds	r3, #11
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	197b      	adds	r3, r7, r5
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	0019      	movs	r1, r3
 8007efe:	0010      	movs	r0, r2
 8007f00:	f7ff f99c 	bl	800723c <ld_clust>
 8007f04:	0003      	movs	r3, r0
 8007f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007f08:	6938      	ldr	r0, [r7, #16]
 8007f0a:	197b      	adds	r3, r7, r5
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	0019      	movs	r1, r3
 8007f12:	f7ff f9b2 	bl	800727a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007f16:	197b      	adds	r3, r7, r5
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	331c      	adds	r3, #28
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f7fe f9d4 	bl	80062cc <st_dword>
					fs->wflag = 1;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	2201      	movs	r2, #1
 8007f28:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d03e      	beq.n	8007fae <f_open+0x21e>
						dw = fs->winsect;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f34:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007f36:	0026      	movs	r6, r4
 8007f38:	193c      	adds	r4, r7, r4
 8007f3a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007f3c:	197b      	adds	r3, r7, r5
 8007f3e:	2200      	movs	r2, #0
 8007f40:	0018      	movs	r0, r3
 8007f42:	f7fe fe8e 	bl	8006c62 <remove_chain>
 8007f46:	0003      	movs	r3, r0
 8007f48:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK) {
 8007f4a:	19bb      	adds	r3, r7, r6
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d12d      	bne.n	8007fae <f_open+0x21e>
							res = move_window(fs, dw);
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	19bc      	adds	r4, r7, r6
 8007f56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f58:	0011      	movs	r1, r2
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	f7fe fc08 	bl	8006770 <move_window>
 8007f60:	0003      	movs	r3, r0
 8007f62:	7023      	strb	r3, [r4, #0]
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007f68:	3a01      	subs	r2, #1
 8007f6a:	60da      	str	r2, [r3, #12]
 8007f6c:	e01f      	b.n	8007fae <f_open+0x21e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007f6e:	215f      	movs	r1, #95	@ 0x5f
 8007f70:	187b      	adds	r3, r7, r1
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d11a      	bne.n	8007fae <f_open+0x21e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007f78:	2314      	movs	r3, #20
 8007f7a:	18fb      	adds	r3, r7, r3
 8007f7c:	799b      	ldrb	r3, [r3, #6]
 8007f7e:	001a      	movs	r2, r3
 8007f80:	2310      	movs	r3, #16
 8007f82:	4013      	ands	r3, r2
 8007f84:	d003      	beq.n	8007f8e <f_open+0x1fe>
					res = FR_NO_FILE;
 8007f86:	187b      	adds	r3, r7, r1
 8007f88:	2204      	movs	r2, #4
 8007f8a:	701a      	strb	r2, [r3, #0]
 8007f8c:	e00f      	b.n	8007fae <f_open+0x21e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007f8e:	1dfb      	adds	r3, r7, #7
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2202      	movs	r2, #2
 8007f94:	4013      	ands	r3, r2
 8007f96:	d00a      	beq.n	8007fae <f_open+0x21e>
 8007f98:	2314      	movs	r3, #20
 8007f9a:	18fb      	adds	r3, r7, r3
 8007f9c:	799b      	ldrb	r3, [r3, #6]
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d003      	beq.n	8007fae <f_open+0x21e>
						res = FR_DENIED;
 8007fa6:	235f      	movs	r3, #95	@ 0x5f
 8007fa8:	18fb      	adds	r3, r7, r3
 8007faa:	2207      	movs	r2, #7
 8007fac:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
		if (res == FR_OK) {
 8007fae:	235f      	movs	r3, #95	@ 0x5f
 8007fb0:	18fb      	adds	r3, r7, r3
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d12b      	bne.n	8008010 <f_open+0x280>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007fb8:	1dfb      	adds	r3, r7, #7
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	d005      	beq.n	8007fce <f_open+0x23e>
				mode |= FA_MODIFIED;
 8007fc2:	1dfb      	adds	r3, r7, #7
 8007fc4:	1dfa      	adds	r2, r7, #7
 8007fc6:	7812      	ldrb	r2, [r2, #0]
 8007fc8:	2140      	movs	r1, #64	@ 0x40
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007fd6:	2114      	movs	r1, #20
 8007fd8:	187b      	adds	r3, r7, r1
 8007fda:	6a1a      	ldr	r2, [r3, #32]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fe0:	1dfb      	adds	r3, r7, #7
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	419b      	sbcs	r3, r3
 8007fea:	425b      	negs	r3, r3
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	001a      	movs	r2, r3
 8007ff0:	187b      	adds	r3, r7, r1
 8007ff2:	0011      	movs	r1, r2
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f7fe fa7f 	bl	80064f8 <inc_lock>
 8007ffa:	0002      	movs	r2, r0
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d103      	bne.n	8008010 <f_open+0x280>
 8008008:	235f      	movs	r3, #95	@ 0x5f
 800800a:	18fb      	adds	r3, r7, r3
 800800c:	2202      	movs	r2, #2
 800800e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008010:	235f      	movs	r3, #95	@ 0x5f
 8008012:	18fb      	adds	r3, r7, r3
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d000      	beq.n	800801c <f_open+0x28c>
 800801a:	e09e      	b.n	800815a <f_open+0x3ca>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	2414      	movs	r4, #20
 8008020:	193b      	adds	r3, r7, r4
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	0019      	movs	r1, r3
 8008026:	0010      	movs	r0, r2
 8008028:	f7ff f908 	bl	800723c <ld_clust>
 800802c:	0002      	movs	r2, r0
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008032:	193b      	adds	r3, r7, r4
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	331c      	adds	r3, #28
 8008038:	0018      	movs	r0, r3
 800803a:	f7fe f908 	bl	800624e <ld_dword>
 800803e:	0002      	movs	r2, r0
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	88da      	ldrh	r2, [r3, #6]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	1dfa      	adds	r2, r7, #7
 800805c:	7812      	ldrb	r2, [r2, #0]
 800805e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2200      	movs	r2, #0
 8008064:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3330      	adds	r3, #48	@ 0x30
 8008076:	2280      	movs	r2, #128	@ 0x80
 8008078:	0092      	lsls	r2, r2, #2
 800807a:	2100      	movs	r1, #0
 800807c:	0018      	movs	r0, r3
 800807e:	f7fe f96e 	bl	800635e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008082:	1dfb      	adds	r3, r7, #7
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2220      	movs	r2, #32
 8008088:	4013      	ands	r3, r2
 800808a:	d066      	beq.n	800815a <f_open+0x3ca>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d062      	beq.n	800815a <f_open+0x3ca>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68da      	ldr	r2, [r3, #12]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	895b      	ldrh	r3, [r3, #10]
 80080a0:	025b      	lsls	r3, r3, #9
 80080a2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80080b0:	e019      	b.n	80080e6 <f_open+0x356>
					clst = get_fat(&fp->obj, clst);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080b6:	0011      	movs	r1, r2
 80080b8:	0018      	movs	r0, r3
 80080ba:	f7fe fc27 	bl	800690c <get_fat>
 80080be:	0003      	movs	r3, r0
 80080c0:	65bb      	str	r3, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80080c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d803      	bhi.n	80080d0 <f_open+0x340>
 80080c8:	235f      	movs	r3, #95	@ 0x5f
 80080ca:	18fb      	adds	r3, r7, r3
 80080cc:	2202      	movs	r2, #2
 80080ce:	701a      	strb	r2, [r3, #0]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80080d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080d2:	3301      	adds	r3, #1
 80080d4:	d103      	bne.n	80080de <f_open+0x34e>
 80080d6:	235f      	movs	r3, #95	@ 0x5f
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	2201      	movs	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80080de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80080e6:	235f      	movs	r3, #95	@ 0x5f
 80080e8:	18fb      	adds	r3, r7, r3
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d103      	bne.n	80080f8 <f_open+0x368>
 80080f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d8dc      	bhi.n	80080b2 <f_open+0x322>
				}
				fp->clust = clst;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80080fc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80080fe:	245f      	movs	r4, #95	@ 0x5f
 8008100:	193b      	adds	r3, r7, r4
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d128      	bne.n	800815a <f_open+0x3ca>
 8008108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800810a:	05db      	lsls	r3, r3, #23
 800810c:	0ddb      	lsrs	r3, r3, #23
 800810e:	d024      	beq.n	800815a <f_open+0x3ca>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008114:	0011      	movs	r1, r2
 8008116:	0018      	movs	r0, r3
 8008118:	f7fe fbdc 	bl	80068d4 <clust2sect>
 800811c:	0003      	movs	r3, r0
 800811e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008122:	2b00      	cmp	r3, #0
 8008124:	d103      	bne.n	800812e <f_open+0x39e>
						res = FR_INT_ERR;
 8008126:	193b      	adds	r3, r7, r4
 8008128:	2202      	movs	r2, #2
 800812a:	701a      	strb	r2, [r3, #0]
 800812c:	e015      	b.n	800815a <f_open+0x3ca>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800812e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008130:	0a5a      	lsrs	r2, r3, #9
 8008132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008134:	18d2      	adds	r2, r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	7858      	ldrb	r0, [r3, #1]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3330      	adds	r3, #48	@ 0x30
 8008142:	0019      	movs	r1, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a1a      	ldr	r2, [r3, #32]
 8008148:	2301      	movs	r3, #1
 800814a:	f7fd ffed 	bl	8006128 <disk_read>
 800814e:	1e03      	subs	r3, r0, #0
 8008150:	d003      	beq.n	800815a <f_open+0x3ca>
 8008152:	235f      	movs	r3, #95	@ 0x5f
 8008154:	18fb      	adds	r3, r7, r3
 8008156:	2201      	movs	r2, #1
 8008158:	701a      	strb	r2, [r3, #0]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800815a:	235f      	movs	r3, #95	@ 0x5f
 800815c:	18fb      	adds	r3, r7, r3
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d002      	beq.n	800816a <f_open+0x3da>
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800816a:	235f      	movs	r3, #95	@ 0x5f
 800816c:	18fb      	adds	r3, r7, r3
 800816e:	781b      	ldrb	r3, [r3, #0]
}
 8008170:	0018      	movs	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	b019      	add	sp, #100	@ 0x64
 8008176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008178 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008178:	b5b0      	push	{r4, r5, r7, lr}
 800817a:	b08e      	sub	sp, #56	@ 0x38
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	2200      	movs	r2, #0
 800818e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2537      	movs	r5, #55	@ 0x37
 8008194:	197c      	adds	r4, r7, r5
 8008196:	2214      	movs	r2, #20
 8008198:	18ba      	adds	r2, r7, r2
 800819a:	0011      	movs	r1, r2
 800819c:	0018      	movs	r0, r3
 800819e:	f7ff fd6f 	bl	8007c80 <validate>
 80081a2:	0003      	movs	r3, r0
 80081a4:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80081a6:	197b      	adds	r3, r7, r5
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d107      	bne.n	80081be <f_read+0x46>
 80081ae:	197b      	adds	r3, r7, r5
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	7d52      	ldrb	r2, [r2, #21]
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	197b      	adds	r3, r7, r5
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <f_read+0x4e>
 80081be:	2337      	movs	r3, #55	@ 0x37
 80081c0:	18fb      	adds	r3, r7, r3
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	e115      	b.n	80083f2 <f_read+0x27a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	7d1b      	ldrb	r3, [r3, #20]
 80081ca:	001a      	movs	r2, r3
 80081cc:	2301      	movs	r3, #1
 80081ce:	4013      	ands	r3, r2
 80081d0:	d101      	bne.n	80081d6 <f_read+0x5e>
 80081d2:	2307      	movs	r3, #7
 80081d4:	e10d      	b.n	80083f2 <f_read+0x27a>
	remain = fp->obj.objsize - fp->fptr;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d800      	bhi.n	80081ec <f_read+0x74>
 80081ea:	e0fd      	b.n	80083e8 <f_read+0x270>
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80081f0:	e0fa      	b.n	80083e8 <f_read+0x270>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	05db      	lsls	r3, r3, #23
 80081f8:	0ddb      	lsrs	r3, r3, #23
 80081fa:	d000      	beq.n	80081fe <f_read+0x86>
 80081fc:	e0c5      	b.n	800838a <f_read+0x212>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	0a5b      	lsrs	r3, r3, #9
 8008204:	697a      	ldr	r2, [r7, #20]
 8008206:	8952      	ldrh	r2, [r2, #10]
 8008208:	3a01      	subs	r2, #1
 800820a:	4013      	ands	r3, r2
 800820c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d131      	bne.n	8008278 <f_read+0x100>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <f_read+0xac>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	633b      	str	r3, [r7, #48]	@ 0x30
 8008222:	e016      	b.n	8008252 <f_read+0xda>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d009      	beq.n	8008240 <f_read+0xc8>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	0011      	movs	r1, r2
 8008234:	0018      	movs	r0, r3
 8008236:	f7fe fe2d 	bl	8006e94 <clmt_clust>
 800823a:	0003      	movs	r3, r0
 800823c:	633b      	str	r3, [r7, #48]	@ 0x30
 800823e:	e008      	b.n	8008252 <f_read+0xda>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	69db      	ldr	r3, [r3, #28]
 8008246:	0019      	movs	r1, r3
 8008248:	0010      	movs	r0, r2
 800824a:	f7fe fb5f 	bl	800690c <get_fat>
 800824e:	0003      	movs	r3, r0
 8008250:	633b      	str	r3, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	2b01      	cmp	r3, #1
 8008256:	d804      	bhi.n	8008262 <f_read+0xea>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2202      	movs	r2, #2
 800825c:	755a      	strb	r2, [r3, #21]
 800825e:	2302      	movs	r3, #2
 8008260:	e0c7      	b.n	80083f2 <f_read+0x27a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	3301      	adds	r3, #1
 8008266:	d104      	bne.n	8008272 <f_read+0xfa>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2201      	movs	r2, #1
 800826c:	755a      	strb	r2, [r3, #21]
 800826e:	2301      	movs	r3, #1
 8008270:	e0bf      	b.n	80083f2 <f_read+0x27a>
				fp->clust = clst;				/* Update current cluster */
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008276:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	0019      	movs	r1, r3
 8008280:	0010      	movs	r0, r2
 8008282:	f7fe fb27 	bl	80068d4 <clust2sect>
 8008286:	0003      	movs	r3, r0
 8008288:	61bb      	str	r3, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d104      	bne.n	800829a <f_read+0x122>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2202      	movs	r2, #2
 8008294:	755a      	strb	r2, [r3, #21]
 8008296:	2302      	movs	r3, #2
 8008298:	e0ab      	b.n	80083f2 <f_read+0x27a>
			sect += csect;
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	18d3      	adds	r3, r2, r3
 80082a0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	0a5b      	lsrs	r3, r3, #9
 80082a6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d038      	beq.n	8008320 <f_read+0x1a8>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b2:	18d3      	adds	r3, r2, r3
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	8952      	ldrh	r2, [r2, #10]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d905      	bls.n	80082c8 <f_read+0x150>
					cc = fs->csize - csect;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	895b      	ldrh	r3, [r3, #10]
 80082c0:	001a      	movs	r2, r3
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	7858      	ldrb	r0, [r3, #1]
 80082cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082d2:	f7fd ff29 	bl	8006128 <disk_read>
 80082d6:	1e03      	subs	r3, r0, #0
 80082d8:	d004      	beq.n	80082e4 <f_read+0x16c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	755a      	strb	r2, [r3, #21]
 80082e0:	2301      	movs	r3, #1
 80082e2:	e086      	b.n	80083f2 <f_read+0x27a>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	7d1b      	ldrb	r3, [r3, #20]
 80082e8:	b25b      	sxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	da14      	bge.n	8008318 <f_read+0x1a0>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6a1a      	ldr	r2, [r3, #32]
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d90d      	bls.n	8008318 <f_read+0x1a0>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1a      	ldr	r2, [r3, #32]
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	025b      	lsls	r3, r3, #9
 8008306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008308:	18d0      	adds	r0, r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3330      	adds	r3, #48	@ 0x30
 800830e:	2280      	movs	r2, #128	@ 0x80
 8008310:	0092      	lsls	r2, r2, #2
 8008312:	0019      	movs	r1, r3
 8008314:	f7fe f804 	bl	8006320 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831a:	025b      	lsls	r3, r3, #9
 800831c:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800831e:	e04f      	b.n	80083c0 <f_read+0x248>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	429a      	cmp	r2, r3
 8008328:	d02c      	beq.n	8008384 <f_read+0x20c>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	7d1b      	ldrb	r3, [r3, #20]
 800832e:	b25b      	sxtb	r3, r3
 8008330:	2b00      	cmp	r3, #0
 8008332:	da17      	bge.n	8008364 <f_read+0x1ec>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	7858      	ldrb	r0, [r3, #1]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3330      	adds	r3, #48	@ 0x30
 800833c:	0019      	movs	r1, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6a1a      	ldr	r2, [r3, #32]
 8008342:	2301      	movs	r3, #1
 8008344:	f7fd ff18 	bl	8006178 <disk_write>
 8008348:	1e03      	subs	r3, r0, #0
 800834a:	d004      	beq.n	8008356 <f_read+0x1de>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2201      	movs	r2, #1
 8008350:	755a      	strb	r2, [r3, #21]
 8008352:	2301      	movs	r3, #1
 8008354:	e04d      	b.n	80083f2 <f_read+0x27a>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	7d1b      	ldrb	r3, [r3, #20]
 800835a:	227f      	movs	r2, #127	@ 0x7f
 800835c:	4013      	ands	r3, r2
 800835e:	b2da      	uxtb	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	7858      	ldrb	r0, [r3, #1]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3330      	adds	r3, #48	@ 0x30
 800836c:	0019      	movs	r1, r3
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	2301      	movs	r3, #1
 8008372:	f7fd fed9 	bl	8006128 <disk_read>
 8008376:	1e03      	subs	r3, r0, #0
 8008378:	d004      	beq.n	8008384 <f_read+0x20c>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2201      	movs	r2, #1
 800837e:	755a      	strb	r2, [r3, #21]
 8008380:	2301      	movs	r3, #1
 8008382:	e036      	b.n	80083f2 <f_read+0x27a>
			}
#endif
			fp->sect = sect;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	69ba      	ldr	r2, [r7, #24]
 8008388:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	05db      	lsls	r3, r3, #23
 8008390:	0ddb      	lsrs	r3, r3, #23
 8008392:	2280      	movs	r2, #128	@ 0x80
 8008394:	0092      	lsls	r2, r2, #2
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800839a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d901      	bls.n	80083a6 <f_read+0x22e>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3330      	adds	r3, #48	@ 0x30
 80083aa:	001a      	movs	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	05db      	lsls	r3, r3, #23
 80083b2:	0ddb      	lsrs	r3, r3, #23
 80083b4:	18d1      	adds	r1, r2, r3
 80083b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ba:	0018      	movs	r0, r3
 80083bc:	f7fd ffb0 	bl	8006320 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80083c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083c4:	18d3      	adds	r3, r2, r3
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ce:	18d2      	adds	r2, r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	619a      	str	r2, [r3, #24]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083da:	18d2      	adds	r2, r2, r3
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	601a      	str	r2, [r3, #0]
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d000      	beq.n	80083f0 <f_read+0x278>
 80083ee:	e700      	b.n	80081f2 <f_read+0x7a>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	0018      	movs	r0, r3
 80083f4:	46bd      	mov	sp, r7
 80083f6:	b00e      	add	sp, #56	@ 0x38
 80083f8:	bdb0      	pop	{r4, r5, r7, pc}

080083fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80083fa:	b5b0      	push	{r4, r5, r7, lr}
 80083fc:	b086      	sub	sp, #24
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2517      	movs	r5, #23
 8008406:	197c      	adds	r4, r7, r5
 8008408:	2208      	movs	r2, #8
 800840a:	18ba      	adds	r2, r7, r2
 800840c:	0011      	movs	r1, r2
 800840e:	0018      	movs	r0, r3
 8008410:	f7ff fc36 	bl	8007c80 <validate>
 8008414:	0003      	movs	r3, r0
 8008416:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008418:	197b      	adds	r3, r7, r5
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d16e      	bne.n	80084fe <f_sync+0x104>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	7d1b      	ldrb	r3, [r3, #20]
 8008424:	001a      	movs	r2, r3
 8008426:	2340      	movs	r3, #64	@ 0x40
 8008428:	4013      	ands	r3, r2
 800842a:	d068      	beq.n	80084fe <f_sync+0x104>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7d1b      	ldrb	r3, [r3, #20]
 8008430:	b25b      	sxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	da14      	bge.n	8008460 <f_sync+0x66>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	7858      	ldrb	r0, [r3, #1]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3330      	adds	r3, #48	@ 0x30
 800843e:	0019      	movs	r1, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a1a      	ldr	r2, [r3, #32]
 8008444:	2301      	movs	r3, #1
 8008446:	f7fd fe97 	bl	8006178 <disk_write>
 800844a:	1e03      	subs	r3, r0, #0
 800844c:	d001      	beq.n	8008452 <f_sync+0x58>
 800844e:	2301      	movs	r3, #1
 8008450:	e058      	b.n	8008504 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7d1b      	ldrb	r3, [r3, #20]
 8008456:	227f      	movs	r2, #127	@ 0x7f
 8008458:	4013      	ands	r3, r2
 800845a:	b2da      	uxtb	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008460:	f7fd fdb4 	bl	8005fcc <get_fattime>
 8008464:	0003      	movs	r3, r0
 8008466:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846e:	2517      	movs	r5, #23
 8008470:	197c      	adds	r4, r7, r5
 8008472:	0019      	movs	r1, r3
 8008474:	0010      	movs	r0, r2
 8008476:	f7fe f97b 	bl	8006770 <move_window>
 800847a:	0003      	movs	r3, r0
 800847c:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
 800847e:	002c      	movs	r4, r5
 8008480:	193b      	adds	r3, r7, r4
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d13a      	bne.n	80084fe <f_sync+0x104>
					dir = fp->dir_ptr;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	330b      	adds	r3, #11
 8008492:	781a      	ldrb	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	330b      	adds	r3, #11
 8008498:	2120      	movs	r1, #32
 800849a:	430a      	orrs	r2, r1
 800849c:	b2d2      	uxtb	r2, r2
 800849e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	0019      	movs	r1, r3
 80084ac:	f7fe fee5 	bl	800727a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	331c      	adds	r3, #28
 80084b4:	001a      	movs	r2, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	0019      	movs	r1, r3
 80084bc:	0010      	movs	r0, r2
 80084be:	f7fd ff05 	bl	80062cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3316      	adds	r3, #22
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	0011      	movs	r1, r2
 80084ca:	0018      	movs	r0, r3
 80084cc:	f7fd fefe 	bl	80062cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3312      	adds	r3, #18
 80084d4:	2100      	movs	r1, #0
 80084d6:	0018      	movs	r0, r3
 80084d8:	f7fd feda 	bl	8006290 <st_word>
					fs->wflag = 1;
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2201      	movs	r2, #1
 80084e0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	193c      	adds	r4, r7, r4
 80084e6:	0018      	movs	r0, r3
 80084e8:	f7fe f978 	bl	80067dc <sync_fs>
 80084ec:	0003      	movs	r3, r0
 80084ee:	7023      	strb	r3, [r4, #0]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	7d1b      	ldrb	r3, [r3, #20]
 80084f4:	2240      	movs	r2, #64	@ 0x40
 80084f6:	4393      	bics	r3, r2
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80084fe:	2317      	movs	r3, #23
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	781b      	ldrb	r3, [r3, #0]
}
 8008504:	0018      	movs	r0, r3
 8008506:	46bd      	mov	sp, r7
 8008508:	b006      	add	sp, #24
 800850a:	bdb0      	pop	{r4, r5, r7, pc}

0800850c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800850c:	b5b0      	push	{r4, r5, r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008514:	250f      	movs	r5, #15
 8008516:	197c      	adds	r4, r7, r5
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	0018      	movs	r0, r3
 800851c:	f7ff ff6d 	bl	80083fa <f_sync>
 8008520:	0003      	movs	r3, r0
 8008522:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK)
 8008524:	197b      	adds	r3, r7, r5
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d11c      	bne.n	8008566 <f_close+0x5a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	197c      	adds	r4, r7, r5
 8008530:	2208      	movs	r2, #8
 8008532:	18ba      	adds	r2, r7, r2
 8008534:	0011      	movs	r1, r2
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff fba2 	bl	8007c80 <validate>
 800853c:	0003      	movs	r3, r0
 800853e:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
 8008540:	197b      	adds	r3, r7, r5
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10e      	bne.n	8008566 <f_close+0x5a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	197c      	adds	r4, r7, r5
 800854e:	0018      	movs	r0, r3
 8008550:	f7fe f85c 	bl	800660c <dec_lock>
 8008554:	0003      	movs	r3, r0
 8008556:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK)
 8008558:	197b      	adds	r3, r7, r5
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d102      	bne.n	8008566 <f_close+0x5a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008566:	230f      	movs	r3, #15
 8008568:	18fb      	adds	r3, r7, r3
 800856a:	781b      	ldrb	r3, [r3, #0]
}
 800856c:	0018      	movs	r0, r3
 800856e:	46bd      	mov	sp, r7
 8008570:	b004      	add	sp, #16
 8008572:	bdb0      	pop	{r4, r5, r7, pc}

08008574 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008574:	b5b0      	push	{r4, r5, r7, lr}
 8008576:	b092      	sub	sp, #72	@ 0x48
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008580:	2547      	movs	r5, #71	@ 0x47
 8008582:	197c      	adds	r4, r7, r5
 8008584:	2328      	movs	r3, #40	@ 0x28
 8008586:	18f9      	adds	r1, r7, r3
 8008588:	230c      	movs	r3, #12
 800858a:	18fb      	adds	r3, r7, r3
 800858c:	2200      	movs	r2, #0
 800858e:	0018      	movs	r0, r3
 8008590:	f7ff f906 	bl	80077a0 <find_volume>
 8008594:	0003      	movs	r3, r0
 8008596:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
 8008598:	197b      	adds	r3, r7, r5
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d000      	beq.n	80085a2 <f_getfree+0x2e>
 80085a0:	e09e      	b.n	80086e0 <f_getfree+0x16c>
		*fatfs = fs;				/* Return ptr to the fs object */
 80085a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80085a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	3b02      	subs	r3, #2
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d804      	bhi.n	80085c0 <f_getfree+0x4c>
			*nclst = fs->free_clst;
 80085b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b8:	691a      	ldr	r2, [r3, #16]
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	601a      	str	r2, [r3, #0]
 80085be:	e08f      	b.n	80086e0 <f_getfree+0x16c>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80085c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d12d      	bne.n	8008628 <f_getfree+0xb4>
				clst = 2; obj.fs = fs;
 80085cc:	2302      	movs	r3, #2
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085d2:	2314      	movs	r3, #20
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	601a      	str	r2, [r3, #0]
				do {
					stat = get_fat(&obj, clst);
 80085d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80085da:	2314      	movs	r3, #20
 80085dc:	18fb      	adds	r3, r7, r3
 80085de:	0011      	movs	r1, r2
 80085e0:	0018      	movs	r0, r3
 80085e2:	f7fe f993 	bl	800690c <get_fat>
 80085e6:	0003      	movs	r3, r0
 80085e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80085ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ec:	3301      	adds	r3, #1
 80085ee:	d104      	bne.n	80085fa <f_getfree+0x86>
 80085f0:	2347      	movs	r3, #71	@ 0x47
 80085f2:	18fb      	adds	r3, r7, r3
 80085f4:	2201      	movs	r2, #1
 80085f6:	701a      	strb	r2, [r3, #0]
 80085f8:	e065      	b.n	80086c6 <f_getfree+0x152>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80085fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d104      	bne.n	800860a <f_getfree+0x96>
 8008600:	2347      	movs	r3, #71	@ 0x47
 8008602:	18fb      	adds	r3, r7, r3
 8008604:	2202      	movs	r2, #2
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	e05d      	b.n	80086c6 <f_getfree+0x152>
					if (stat == 0) nfree++;
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <f_getfree+0xa2>
 8008610:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008612:	3301      	adds	r3, #1
 8008614:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008618:	3301      	adds	r3, #1
 800861a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008622:	429a      	cmp	r2, r3
 8008624:	d3d8      	bcc.n	80085d8 <f_getfree+0x64>
 8008626:	e04e      	b.n	80086c6 <f_getfree+0x152>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800862e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	637b      	str	r3, [r7, #52]	@ 0x34
 8008638:	2300      	movs	r3, #0
 800863a:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800863c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863e:	2b00      	cmp	r3, #0
 8008640:	d114      	bne.n	800866c <f_getfree+0xf8>
							res = move_window(fs, sect++);
 8008642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	63ba      	str	r2, [r7, #56]	@ 0x38
 800864a:	2547      	movs	r5, #71	@ 0x47
 800864c:	197c      	adds	r4, r7, r5
 800864e:	0019      	movs	r1, r3
 8008650:	f7fe f88e 	bl	8006770 <move_window>
 8008654:	0003      	movs	r3, r0
 8008656:	7023      	strb	r3, [r4, #0]
							if (res != FR_OK) break;
 8008658:	197b      	adds	r3, r7, r5
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d131      	bne.n	80086c4 <f_getfree+0x150>
							p = fs->win;
 8008660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008662:	3330      	adds	r3, #48	@ 0x30
 8008664:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008666:	2380      	movs	r3, #128	@ 0x80
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800866c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d10f      	bne.n	8008694 <f_getfree+0x120>
							if (ld_word(p) == 0) nfree++;
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	0018      	movs	r0, r3
 8008678:	f7fd fdce 	bl	8006218 <ld_word>
 800867c:	1e03      	subs	r3, r0, #0
 800867e:	d102      	bne.n	8008686 <f_getfree+0x112>
 8008680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008682:	3301      	adds	r3, #1
 8008684:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	3302      	adds	r3, #2
 800868a:	633b      	str	r3, [r7, #48]	@ 0x30
 800868c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868e:	3b02      	subs	r3, #2
 8008690:	637b      	str	r3, [r7, #52]	@ 0x34
 8008692:	e010      	b.n	80086b6 <f_getfree+0x142>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8008694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008696:	0018      	movs	r0, r3
 8008698:	f7fd fdd9 	bl	800624e <ld_dword>
 800869c:	0003      	movs	r3, r0
 800869e:	011b      	lsls	r3, r3, #4
 80086a0:	091b      	lsrs	r3, r3, #4
 80086a2:	d102      	bne.n	80086aa <f_getfree+0x136>
 80086a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086a6:	3301      	adds	r3, #1
 80086a8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80086aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ac:	3304      	adds	r3, #4
 80086ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b2:	3b04      	subs	r3, #4
 80086b4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80086b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b8:	3b01      	subs	r3, #1
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1bc      	bne.n	800863c <f_getfree+0xc8>
 80086c2:	e000      	b.n	80086c6 <f_getfree+0x152>
							if (res != FR_OK) break;
 80086c4:	46c0      	nop			@ (mov r8, r8)
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086ca:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80086cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086d0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80086d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d4:	791a      	ldrb	r2, [r3, #4]
 80086d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d8:	2101      	movs	r1, #1
 80086da:	430a      	orrs	r2, r1
 80086dc:	b2d2      	uxtb	r2, r2
 80086de:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80086e0:	2347      	movs	r3, #71	@ 0x47
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	781b      	ldrb	r3, [r3, #0]
}
 80086e6:	0018      	movs	r0, r3
 80086e8:	46bd      	mov	sp, r7
 80086ea:	b012      	add	sp, #72	@ 0x48
 80086ec:	bdb0      	pop	{r4, r5, r7, pc}

080086ee <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80086ee:	b590      	push	{r4, r7, lr}
 80086f0:	b089      	sub	sp, #36	@ 0x24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
	int n = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008702:	e022      	b.n	800874a <f_gets+0x5c>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008704:	2310      	movs	r3, #16
 8008706:	18fb      	adds	r3, r7, r3
 8008708:	2414      	movs	r4, #20
 800870a:	1939      	adds	r1, r7, r4
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f7ff fd32 	bl	8008178 <f_read>
		if (rc != 1) break;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d11d      	bne.n	8008756 <f_gets+0x68>
		c = s[0];
 800871a:	2117      	movs	r1, #23
 800871c:	187b      	adds	r3, r7, r1
 800871e:	193a      	adds	r2, r7, r4
 8008720:	7812      	ldrb	r2, [r2, #0]
 8008722:	701a      	strb	r2, [r3, #0]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008724:	187b      	adds	r3, r7, r1
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b0d      	cmp	r3, #13
 800872a:	d00d      	beq.n	8008748 <f_gets+0x5a>
		*p++ = c;
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	1c5a      	adds	r2, r3, #1
 8008730:	61ba      	str	r2, [r7, #24]
 8008732:	187a      	adds	r2, r7, r1
 8008734:	7812      	ldrb	r2, [r2, #0]
 8008736:	701a      	strb	r2, [r3, #0]
		n++;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	3301      	adds	r3, #1
 800873c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800873e:	187b      	adds	r3, r7, r1
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	2b0a      	cmp	r3, #10
 8008744:	d009      	beq.n	800875a <f_gets+0x6c>
 8008746:	e000      	b.n	800874a <f_gets+0x5c>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008748:	46c0      	nop			@ (mov r8, r8)
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3b01      	subs	r3, #1
 800874e:	69fa      	ldr	r2, [r7, #28]
 8008750:	429a      	cmp	r2, r3
 8008752:	dbd7      	blt.n	8008704 <f_gets+0x16>
 8008754:	e002      	b.n	800875c <f_gets+0x6e>
		if (rc != 1) break;
 8008756:	46c0      	nop			@ (mov r8, r8)
 8008758:	e000      	b.n	800875c <f_gets+0x6e>
		if (c == '\n') break;		/* Break on EOL */
 800875a:	46c0      	nop			@ (mov r8, r8)
	}
	*p = 0;
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <f_gets+0x7e>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	e000      	b.n	800876e <f_gets+0x80>
 800876c:	2300      	movs	r3, #0
}
 800876e:	0018      	movs	r0, r3
 8008770:	46bd      	mov	sp, r7
 8008772:	b009      	add	sp, #36	@ 0x24
 8008774:	bd90      	pop	{r4, r7, pc}
	...

08008778 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008778:	b590      	push	{r4, r7, lr}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	1dfb      	adds	r3, r7, #7
 8008784:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 1;
 8008786:	2417      	movs	r4, #23
 8008788:	193b      	adds	r3, r7, r4
 800878a:	2201      	movs	r2, #1
 800878c:	701a      	strb	r2, [r3, #0]
  uint8_t DiskNum = 0;
 800878e:	2016      	movs	r0, #22
 8008790:	183b      	adds	r3, r7, r0
 8008792:	2200      	movs	r2, #0
 8008794:	701a      	strb	r2, [r3, #0]

  if(disk.nbr < _VOLUMES)
 8008796:	4b21      	ldr	r3, [pc, #132]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 8008798:	7a5b      	ldrb	r3, [r3, #9]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b00      	cmp	r3, #0
 800879e:	d136      	bne.n	800880e <FATFS_LinkDriverEx+0x96>
  {
    disk.is_initialized[disk.nbr] = 0;
 80087a0:	4b1e      	ldr	r3, [pc, #120]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 80087a2:	7a5b      	ldrb	r3, [r3, #9]
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	001a      	movs	r2, r3
 80087a8:	4b1c      	ldr	r3, [pc, #112]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 80087aa:	2100      	movs	r1, #0
 80087ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80087ae:	4b1b      	ldr	r3, [pc, #108]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 80087b0:	7a5b      	ldrb	r3, [r3, #9]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	4a19      	ldr	r2, [pc, #100]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	18d3      	adds	r3, r2, r3
 80087ba:	3304      	adds	r3, #4
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	601a      	str	r2, [r3, #0]
    disk.lun[disk.nbr] = lun;
 80087c0:	4b16      	ldr	r3, [pc, #88]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 80087c2:	7a5b      	ldrb	r3, [r3, #9]
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	001a      	movs	r2, r3
 80087c8:	4b14      	ldr	r3, [pc, #80]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 80087ca:	189b      	adds	r3, r3, r2
 80087cc:	1dfa      	adds	r2, r7, #7
 80087ce:	7812      	ldrb	r2, [r2, #0]
 80087d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80087d2:	4b12      	ldr	r3, [pc, #72]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 80087d4:	7a5b      	ldrb	r3, [r3, #9]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	1c5a      	adds	r2, r3, #1
 80087da:	b2d1      	uxtb	r1, r2
 80087dc:	4a0f      	ldr	r2, [pc, #60]	@ (800881c <FATFS_LinkDriverEx+0xa4>)
 80087de:	7251      	strb	r1, [r2, #9]
 80087e0:	183a      	adds	r2, r7, r0
 80087e2:	7013      	strb	r3, [r2, #0]
    path[0] = DiskNum + '0';
 80087e4:	183b      	adds	r3, r7, r0
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	3330      	adds	r3, #48	@ 0x30
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	3301      	adds	r3, #1
 80087f4:	223a      	movs	r2, #58	@ 0x3a
 80087f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	3302      	adds	r3, #2
 80087fc:	222f      	movs	r2, #47	@ 0x2f
 80087fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	3303      	adds	r3, #3
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008808:	193b      	adds	r3, r7, r4
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800880e:	2317      	movs	r3, #23
 8008810:	18fb      	adds	r3, r7, r3
 8008812:	781b      	ldrb	r3, [r3, #0]
}
 8008814:	0018      	movs	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	b007      	add	sp, #28
 800881a:	bd90      	pop	{r4, r7, pc}
 800881c:	20000b00 	.word	0x20000b00

08008820 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800882a:	6839      	ldr	r1, [r7, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	0018      	movs	r0, r3
 8008832:	f7ff ffa1 	bl	8008778 <FATFS_LinkDriverEx>
 8008836:	0003      	movs	r3, r0
}
 8008838:	0018      	movs	r0, r3
 800883a:	46bd      	mov	sp, r7
 800883c:	b002      	add	sp, #8
 800883e:	bd80      	pop	{r7, pc}

08008840 <__NVIC_SetPriority>:
{
 8008840:	b590      	push	{r4, r7, lr}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	0002      	movs	r2, r0
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	1dfb      	adds	r3, r7, #7
 800884c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800884e:	1dfb      	adds	r3, r7, #7
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b7f      	cmp	r3, #127	@ 0x7f
 8008854:	d828      	bhi.n	80088a8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008856:	4a2f      	ldr	r2, [pc, #188]	@ (8008914 <__NVIC_SetPriority+0xd4>)
 8008858:	1dfb      	adds	r3, r7, #7
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	b25b      	sxtb	r3, r3
 800885e:	089b      	lsrs	r3, r3, #2
 8008860:	33c0      	adds	r3, #192	@ 0xc0
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	589b      	ldr	r3, [r3, r2]
 8008866:	1dfa      	adds	r2, r7, #7
 8008868:	7812      	ldrb	r2, [r2, #0]
 800886a:	0011      	movs	r1, r2
 800886c:	2203      	movs	r2, #3
 800886e:	400a      	ands	r2, r1
 8008870:	00d2      	lsls	r2, r2, #3
 8008872:	21ff      	movs	r1, #255	@ 0xff
 8008874:	4091      	lsls	r1, r2
 8008876:	000a      	movs	r2, r1
 8008878:	43d2      	mvns	r2, r2
 800887a:	401a      	ands	r2, r3
 800887c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	019b      	lsls	r3, r3, #6
 8008882:	22ff      	movs	r2, #255	@ 0xff
 8008884:	401a      	ands	r2, r3
 8008886:	1dfb      	adds	r3, r7, #7
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	0018      	movs	r0, r3
 800888c:	2303      	movs	r3, #3
 800888e:	4003      	ands	r3, r0
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008894:	481f      	ldr	r0, [pc, #124]	@ (8008914 <__NVIC_SetPriority+0xd4>)
 8008896:	1dfb      	adds	r3, r7, #7
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	b25b      	sxtb	r3, r3
 800889c:	089b      	lsrs	r3, r3, #2
 800889e:	430a      	orrs	r2, r1
 80088a0:	33c0      	adds	r3, #192	@ 0xc0
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	501a      	str	r2, [r3, r0]
}
 80088a6:	e031      	b.n	800890c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80088a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008918 <__NVIC_SetPriority+0xd8>)
 80088aa:	1dfb      	adds	r3, r7, #7
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	0019      	movs	r1, r3
 80088b0:	230f      	movs	r3, #15
 80088b2:	400b      	ands	r3, r1
 80088b4:	3b08      	subs	r3, #8
 80088b6:	089b      	lsrs	r3, r3, #2
 80088b8:	3306      	adds	r3, #6
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	18d3      	adds	r3, r2, r3
 80088be:	3304      	adds	r3, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	1dfa      	adds	r2, r7, #7
 80088c4:	7812      	ldrb	r2, [r2, #0]
 80088c6:	0011      	movs	r1, r2
 80088c8:	2203      	movs	r2, #3
 80088ca:	400a      	ands	r2, r1
 80088cc:	00d2      	lsls	r2, r2, #3
 80088ce:	21ff      	movs	r1, #255	@ 0xff
 80088d0:	4091      	lsls	r1, r2
 80088d2:	000a      	movs	r2, r1
 80088d4:	43d2      	mvns	r2, r2
 80088d6:	401a      	ands	r2, r3
 80088d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	019b      	lsls	r3, r3, #6
 80088de:	22ff      	movs	r2, #255	@ 0xff
 80088e0:	401a      	ands	r2, r3
 80088e2:	1dfb      	adds	r3, r7, #7
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	0018      	movs	r0, r3
 80088e8:	2303      	movs	r3, #3
 80088ea:	4003      	ands	r3, r0
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80088f0:	4809      	ldr	r0, [pc, #36]	@ (8008918 <__NVIC_SetPriority+0xd8>)
 80088f2:	1dfb      	adds	r3, r7, #7
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	001c      	movs	r4, r3
 80088f8:	230f      	movs	r3, #15
 80088fa:	4023      	ands	r3, r4
 80088fc:	3b08      	subs	r3, #8
 80088fe:	089b      	lsrs	r3, r3, #2
 8008900:	430a      	orrs	r2, r1
 8008902:	3306      	adds	r3, #6
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	18c3      	adds	r3, r0, r3
 8008908:	3304      	adds	r3, #4
 800890a:	601a      	str	r2, [r3, #0]
}
 800890c:	46c0      	nop			@ (mov r8, r8)
 800890e:	46bd      	mov	sp, r7
 8008910:	b003      	add	sp, #12
 8008912:	bd90      	pop	{r4, r7, pc}
 8008914:	e000e100 	.word	0xe000e100
 8008918:	e000ed00 	.word	0xe000ed00

0800891c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008920:	4b05      	ldr	r3, [pc, #20]	@ (8008938 <SysTick_Handler+0x1c>)
 8008922:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008924:	f001 fbdc 	bl	800a0e0 <xTaskGetSchedulerState>
 8008928:	0003      	movs	r3, r0
 800892a:	2b01      	cmp	r3, #1
 800892c:	d001      	beq.n	8008932 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800892e:	f002 f8bb 	bl	800aaa8 <xPortSysTickHandler>
  }
}
 8008932:	46c0      	nop			@ (mov r8, r8)
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	e000e010 	.word	0xe000e010

0800893c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008940:	2305      	movs	r3, #5
 8008942:	425b      	negs	r3, r3
 8008944:	2100      	movs	r1, #0
 8008946:	0018      	movs	r0, r3
 8008948:	f7ff ff7a 	bl	8008840 <__NVIC_SetPriority>
#endif
}
 800894c:	46c0      	nop			@ (mov r8, r8)
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800895a:	f3ef 8305 	mrs	r3, IPSR
 800895e:	603b      	str	r3, [r7, #0]
  return(result);
 8008960:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008966:	2306      	movs	r3, #6
 8008968:	425b      	negs	r3, r3
 800896a:	607b      	str	r3, [r7, #4]
 800896c:	e00c      	b.n	8008988 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800896e:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <osKernelInitialize+0x40>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008976:	4b07      	ldr	r3, [pc, #28]	@ (8008994 <osKernelInitialize+0x40>)
 8008978:	2201      	movs	r2, #1
 800897a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800897c:	2300      	movs	r3, #0
 800897e:	607b      	str	r3, [r7, #4]
 8008980:	e002      	b.n	8008988 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008982:	2301      	movs	r3, #1
 8008984:	425b      	negs	r3, r3
 8008986:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008988:	687b      	ldr	r3, [r7, #4]
}
 800898a:	0018      	movs	r0, r3
 800898c:	46bd      	mov	sp, r7
 800898e:	b002      	add	sp, #8
 8008990:	bd80      	pop	{r7, pc}
 8008992:	46c0      	nop			@ (mov r8, r8)
 8008994:	20000b0c 	.word	0x20000b0c

08008998 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800899e:	f3ef 8305 	mrs	r3, IPSR
 80089a2:	603b      	str	r3, [r7, #0]
  return(result);
 80089a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d003      	beq.n	80089b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80089aa:	2306      	movs	r3, #6
 80089ac:	425b      	negs	r3, r3
 80089ae:	607b      	str	r3, [r7, #4]
 80089b0:	e010      	b.n	80089d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80089b2:	4b0b      	ldr	r3, [pc, #44]	@ (80089e0 <osKernelStart+0x48>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d109      	bne.n	80089ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80089ba:	f7ff ffbf 	bl	800893c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80089be:	4b08      	ldr	r3, [pc, #32]	@ (80089e0 <osKernelStart+0x48>)
 80089c0:	2202      	movs	r2, #2
 80089c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80089c4:	f000 ff98 	bl	80098f8 <vTaskStartScheduler>
      stat = osOK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	607b      	str	r3, [r7, #4]
 80089cc:	e002      	b.n	80089d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80089ce:	2301      	movs	r3, #1
 80089d0:	425b      	negs	r3, r3
 80089d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089d4:	687b      	ldr	r3, [r7, #4]
}
 80089d6:	0018      	movs	r0, r3
 80089d8:	46bd      	mov	sp, r7
 80089da:	b002      	add	sp, #8
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	46c0      	nop			@ (mov r8, r8)
 80089e0:	20000b0c 	.word	0x20000b0c

080089e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80089e4:	b5b0      	push	{r4, r5, r7, lr}
 80089e6:	b08e      	sub	sp, #56	@ 0x38
 80089e8:	af04      	add	r7, sp, #16
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089f4:	f3ef 8305 	mrs	r3, IPSR
 80089f8:	617b      	str	r3, [r7, #20]
  return(result);
 80089fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d000      	beq.n	8008a02 <osThreadNew+0x1e>
 8008a00:	e081      	b.n	8008b06 <osThreadNew+0x122>
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d100      	bne.n	8008a0a <osThreadNew+0x26>
 8008a08:	e07d      	b.n	8008b06 <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8008a0a:	2380      	movs	r3, #128	@ 0x80
 8008a0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a0e:	2318      	movs	r3, #24
 8008a10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a12:	2300      	movs	r3, #0
 8008a14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008a16:	2301      	movs	r3, #1
 8008a18:	425b      	negs	r3, r3
 8008a1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d044      	beq.n	8008aac <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d002      	beq.n	8008a30 <osThreadNew+0x4c>
        name = attr->name;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <osThreadNew+0x70>
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	2b38      	cmp	r3, #56	@ 0x38
 8008a48:	d804      	bhi.n	8008a54 <osThreadNew+0x70>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	4013      	ands	r3, r2
 8008a52:	d001      	beq.n	8008a58 <osThreadNew+0x74>
        return (NULL);
 8008a54:	2300      	movs	r3, #0
 8008a56:	e057      	b.n	8008b08 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d003      	beq.n	8008a68 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	089b      	lsrs	r3, r3, #2
 8008a66:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00e      	beq.n	8008a8e <osThreadNew+0xaa>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	2ba7      	cmp	r3, #167	@ 0xa7
 8008a76:	d90a      	bls.n	8008a8e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d006      	beq.n	8008a8e <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d002      	beq.n	8008a8e <osThreadNew+0xaa>
        mem = 1;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	61bb      	str	r3, [r7, #24]
 8008a8c:	e010      	b.n	8008ab0 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10c      	bne.n	8008ab0 <osThreadNew+0xcc>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d108      	bne.n	8008ab0 <osThreadNew+0xcc>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d104      	bne.n	8008ab0 <osThreadNew+0xcc>
          mem = 0;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e001      	b.n	8008ab0 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d112      	bne.n	8008adc <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008abe:	68bd      	ldr	r5, [r7, #8]
 8008ac0:	6a3c      	ldr	r4, [r7, #32]
 8008ac2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	9302      	str	r3, [sp, #8]
 8008ac8:	9201      	str	r2, [sp, #4]
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	002b      	movs	r3, r5
 8008ad0:	0022      	movs	r2, r4
 8008ad2:	f000 fd4e 	bl	8009572 <xTaskCreateStatic>
 8008ad6:	0003      	movs	r3, r0
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	e014      	b.n	8008b06 <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d111      	bne.n	8008b06 <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	68bc      	ldr	r4, [r7, #8]
 8008ae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	2310      	movs	r3, #16
 8008aee:	18fb      	adds	r3, r7, r3
 8008af0:	9301      	str	r3, [sp, #4]
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	0023      	movs	r3, r4
 8008af8:	f000 fd82 	bl	8009600 <xTaskCreate>
 8008afc:	0003      	movs	r3, r0
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d001      	beq.n	8008b06 <osThreadNew+0x122>
            hTask = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b06:	693b      	ldr	r3, [r7, #16]
}
 8008b08:	0018      	movs	r0, r3
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	b00a      	add	sp, #40	@ 0x28
 8008b0e:	bdb0      	pop	{r4, r5, r7, pc}

08008b10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b18:	f3ef 8305 	mrs	r3, IPSR
 8008b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d003      	beq.n	8008b2c <osDelay+0x1c>
    stat = osErrorISR;
 8008b24:	2306      	movs	r3, #6
 8008b26:	425b      	negs	r3, r3
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	e008      	b.n	8008b3e <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <osDelay+0x2e>
      vTaskDelay(ticks);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	0018      	movs	r0, r3
 8008b3a:	f000 feb7 	bl	80098ac <vTaskDelay>
    }
  }

  return (stat);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
}
 8008b40:	0018      	movs	r0, r3
 8008b42:	46bd      	mov	sp, r7
 8008b44:	b004      	add	sp, #16
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	4a06      	ldr	r2, [pc, #24]	@ (8008b70 <vApplicationGetIdleTaskMemory+0x28>)
 8008b58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4a05      	ldr	r2, [pc, #20]	@ (8008b74 <vApplicationGetIdleTaskMemory+0x2c>)
 8008b5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2280      	movs	r2, #128	@ 0x80
 8008b64:	601a      	str	r2, [r3, #0]
}
 8008b66:	46c0      	nop			@ (mov r8, r8)
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	b004      	add	sp, #16
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	46c0      	nop			@ (mov r8, r8)
 8008b70:	20000b10 	.word	0x20000b10
 8008b74:	20000bb8 	.word	0x20000bb8

08008b78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4a06      	ldr	r2, [pc, #24]	@ (8008ba0 <vApplicationGetTimerTaskMemory+0x28>)
 8008b88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	4a05      	ldr	r2, [pc, #20]	@ (8008ba4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2280      	movs	r2, #128	@ 0x80
 8008b94:	0052      	lsls	r2, r2, #1
 8008b96:	601a      	str	r2, [r3, #0]
}
 8008b98:	46c0      	nop			@ (mov r8, r8)
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	b004      	add	sp, #16
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	20000db8 	.word	0x20000db8
 8008ba4:	20000e60 	.word	0x20000e60

08008ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	001a      	movs	r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	4252      	negs	r2, r2
 8008bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	001a      	movs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	001a      	movs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008bdc:	46c0      	nop			@ (mov r8, r8)
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b002      	add	sp, #8
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008bf2:	46c0      	nop			@ (mov r8, r8)
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b002      	add	sp, #8
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	1c5a      	adds	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	601a      	str	r2, [r3, #0]
}
 8008c36:	46c0      	nop			@ (mov r8, r8)
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	b004      	add	sp, #16
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	3301      	adds	r3, #1
 8008c52:	d103      	bne.n	8008c5c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	e00c      	b.n	8008c76 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3308      	adds	r3, #8
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	e002      	b.n	8008c6a <vListInsert+0x2c>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	60fb      	str	r3, [r7, #12]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d2f6      	bcs.n	8008c64 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	601a      	str	r2, [r3, #0]
}
 8008ca2:	46c0      	nop			@ (mov r8, r8)
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	b004      	add	sp, #16
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b084      	sub	sp, #16
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6892      	ldr	r2, [r2, #8]
 8008cc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6852      	ldr	r2, [r2, #4]
 8008cca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d103      	bne.n	8008cde <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	689a      	ldr	r2, [r3, #8]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	1e5a      	subs	r2, r3, #1
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
}
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b004      	add	sp, #16
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <xQueueGenericReset+0x1a>
 8008d0e:	b672      	cpsid	i
 8008d10:	46c0      	nop			@ (mov r8, r8)
 8008d12:	e7fd      	b.n	8008d10 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008d14:	f001 fe6c 	bl	800a9f0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d24:	434b      	muls	r3, r1
 8008d26:	18d2      	adds	r2, r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d42:	1e59      	subs	r1, r3, #1
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d48:	434b      	muls	r3, r1
 8008d4a:	18d2      	adds	r2, r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2244      	movs	r2, #68	@ 0x44
 8008d54:	21ff      	movs	r1, #255	@ 0xff
 8008d56:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2245      	movs	r2, #69	@ 0x45
 8008d5c:	21ff      	movs	r1, #255	@ 0xff
 8008d5e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d10d      	bne.n	8008d82 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d013      	beq.n	8008d96 <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	3310      	adds	r3, #16
 8008d72:	0018      	movs	r0, r3
 8008d74:	f001 f818 	bl	8009da8 <xTaskRemoveFromEventList>
 8008d78:	1e03      	subs	r3, r0, #0
 8008d7a:	d00c      	beq.n	8008d96 <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d7c:	f001 fe28 	bl	800a9d0 <vPortYield>
 8008d80:	e009      	b.n	8008d96 <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3310      	adds	r3, #16
 8008d86:	0018      	movs	r0, r3
 8008d88:	f7ff ff0e 	bl	8008ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3324      	adds	r3, #36	@ 0x24
 8008d90:	0018      	movs	r0, r3
 8008d92:	f7ff ff09 	bl	8008ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d96:	f001 fe3d 	bl	800aa14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d9a:	2301      	movs	r3, #1
}
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	b004      	add	sp, #16
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008da4:	b590      	push	{r4, r7, lr}
 8008da6:	b089      	sub	sp, #36	@ 0x24
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <xQueueGenericCreateStatic+0x1a>
 8008db8:	b672      	cpsid	i
 8008dba:	46c0      	nop			@ (mov r8, r8)
 8008dbc:	e7fd      	b.n	8008dba <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d102      	bne.n	8008dca <xQueueGenericCreateStatic+0x26>
 8008dc4:	b672      	cpsid	i
 8008dc6:	46c0      	nop			@ (mov r8, r8)
 8008dc8:	e7fd      	b.n	8008dc6 <xQueueGenericCreateStatic+0x22>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <xQueueGenericCreateStatic+0x32>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d001      	beq.n	8008dda <xQueueGenericCreateStatic+0x36>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e000      	b.n	8008ddc <xQueueGenericCreateStatic+0x38>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <xQueueGenericCreateStatic+0x42>
 8008de0:	b672      	cpsid	i
 8008de2:	46c0      	nop			@ (mov r8, r8)
 8008de4:	e7fd      	b.n	8008de2 <xQueueGenericCreateStatic+0x3e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <xQueueGenericCreateStatic+0x4e>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <xQueueGenericCreateStatic+0x52>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e000      	b.n	8008df8 <xQueueGenericCreateStatic+0x54>
 8008df6:	2300      	movs	r3, #0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <xQueueGenericCreateStatic+0x5e>
 8008dfc:	b672      	cpsid	i
 8008dfe:	46c0      	nop			@ (mov r8, r8)
 8008e00:	e7fd      	b.n	8008dfe <xQueueGenericCreateStatic+0x5a>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e02:	2350      	movs	r3, #80	@ 0x50
 8008e04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2b50      	cmp	r3, #80	@ 0x50
 8008e0a:	d002      	beq.n	8008e12 <xQueueGenericCreateStatic+0x6e>
 8008e0c:	b672      	cpsid	i
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	e7fd      	b.n	8008e0e <xQueueGenericCreateStatic+0x6a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e12:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00e      	beq.n	8008e3c <xQueueGenericCreateStatic+0x98>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2246      	movs	r2, #70	@ 0x46
 8008e22:	2101      	movs	r1, #1
 8008e24:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e26:	2328      	movs	r3, #40	@ 0x28
 8008e28:	18fb      	adds	r3, r7, r3
 8008e2a:	781c      	ldrb	r4, [r3, #0]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	68b9      	ldr	r1, [r7, #8]
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	0023      	movs	r3, r4
 8008e38:	f000 f805 	bl	8008e46 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e3c:	697b      	ldr	r3, [r7, #20]
	}
 8008e3e:	0018      	movs	r0, r3
 8008e40:	46bd      	mov	sp, r7
 8008e42:	b007      	add	sp, #28
 8008e44:	bd90      	pop	{r4, r7, pc}

08008e46 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	607a      	str	r2, [r7, #4]
 8008e52:	001a      	movs	r2, r3
 8008e54:	1cfb      	adds	r3, r7, #3
 8008e56:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d103      	bne.n	8008e66 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	e002      	b.n	8008e6c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	68ba      	ldr	r2, [r7, #8]
 8008e76:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	f7ff ff3c 	bl	8008cfa <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	1cfa      	adds	r2, r7, #3
 8008e86:	214c      	movs	r1, #76	@ 0x4c
 8008e88:	7812      	ldrb	r2, [r2, #0]
 8008e8a:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e8c:	46c0      	nop			@ (mov r8, r8)
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	b004      	add	sp, #16
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08a      	sub	sp, #40	@ 0x28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d102      	bne.n	8008eb6 <xQueueGenericSend+0x22>
 8008eb0:	b672      	cpsid	i
 8008eb2:	46c0      	nop			@ (mov r8, r8)
 8008eb4:	e7fd      	b.n	8008eb2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d103      	bne.n	8008ec4 <xQueueGenericSend+0x30>
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <xQueueGenericSend+0x34>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e000      	b.n	8008eca <xQueueGenericSend+0x36>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d102      	bne.n	8008ed4 <xQueueGenericSend+0x40>
 8008ece:	b672      	cpsid	i
 8008ed0:	46c0      	nop			@ (mov r8, r8)
 8008ed2:	e7fd      	b.n	8008ed0 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d103      	bne.n	8008ee2 <xQueueGenericSend+0x4e>
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <xQueueGenericSend+0x52>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e000      	b.n	8008ee8 <xQueueGenericSend+0x54>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d102      	bne.n	8008ef2 <xQueueGenericSend+0x5e>
 8008eec:	b672      	cpsid	i
 8008eee:	46c0      	nop			@ (mov r8, r8)
 8008ef0:	e7fd      	b.n	8008eee <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ef2:	f001 f8f5 	bl	800a0e0 <xTaskGetSchedulerState>
 8008ef6:	1e03      	subs	r3, r0, #0
 8008ef8:	d102      	bne.n	8008f00 <xQueueGenericSend+0x6c>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <xQueueGenericSend+0x70>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <xQueueGenericSend+0x72>
 8008f04:	2300      	movs	r3, #0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d102      	bne.n	8008f10 <xQueueGenericSend+0x7c>
 8008f0a:	b672      	cpsid	i
 8008f0c:	46c0      	nop			@ (mov r8, r8)
 8008f0e:	e7fd      	b.n	8008f0c <xQueueGenericSend+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f10:	f001 fd6e 	bl	800a9f0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d302      	bcc.n	8008f26 <xQueueGenericSend+0x92>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d11e      	bne.n	8008f64 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	68b9      	ldr	r1, [r7, #8]
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f000 f9a8 	bl	8009282 <prvCopyDataToQueue>
 8008f32:	0003      	movs	r3, r0
 8008f34:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d009      	beq.n	8008f52 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	3324      	adds	r3, #36	@ 0x24
 8008f42:	0018      	movs	r0, r3
 8008f44:	f000 ff30 	bl	8009da8 <xTaskRemoveFromEventList>
 8008f48:	1e03      	subs	r3, r0, #0
 8008f4a:	d007      	beq.n	8008f5c <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f4c:	f001 fd40 	bl	800a9d0 <vPortYield>
 8008f50:	e004      	b.n	8008f5c <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d001      	beq.n	8008f5c <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008f58:	f001 fd3a 	bl	800a9d0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008f5c:	f001 fd5a 	bl	800aa14 <vPortExitCritical>
				return pdPASS;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e05b      	b.n	800901c <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d103      	bne.n	8008f72 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f6a:	f001 fd53 	bl	800aa14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	e054      	b.n	800901c <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d106      	bne.n	8008f86 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f78:	2314      	movs	r3, #20
 8008f7a:	18fb      	adds	r3, r7, r3
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	f000 ff71 	bl	8009e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f82:	2301      	movs	r3, #1
 8008f84:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f86:	f001 fd45 	bl	800aa14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f8a:	f000 fd15 	bl	80099b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f8e:	f001 fd2f 	bl	800a9f0 <vPortEnterCritical>
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	2244      	movs	r2, #68	@ 0x44
 8008f96:	5c9b      	ldrb	r3, [r3, r2]
 8008f98:	b25b      	sxtb	r3, r3
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	d103      	bne.n	8008fa6 <xQueueGenericSend+0x112>
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	2244      	movs	r2, #68	@ 0x44
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	5499      	strb	r1, [r3, r2]
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	2245      	movs	r2, #69	@ 0x45
 8008faa:	5c9b      	ldrb	r3, [r3, r2]
 8008fac:	b25b      	sxtb	r3, r3
 8008fae:	3301      	adds	r3, #1
 8008fb0:	d103      	bne.n	8008fba <xQueueGenericSend+0x126>
 8008fb2:	6a3b      	ldr	r3, [r7, #32]
 8008fb4:	2245      	movs	r2, #69	@ 0x45
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	5499      	strb	r1, [r3, r2]
 8008fba:	f001 fd2b 	bl	800aa14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fbe:	1d3a      	adds	r2, r7, #4
 8008fc0:	2314      	movs	r3, #20
 8008fc2:	18fb      	adds	r3, r7, r3
 8008fc4:	0011      	movs	r1, r2
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	f000 ff60 	bl	8009e8c <xTaskCheckForTimeOut>
 8008fcc:	1e03      	subs	r3, r0, #0
 8008fce:	d11e      	bne.n	800900e <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f000 fa5a 	bl	800948c <prvIsQueueFull>
 8008fd8:	1e03      	subs	r3, r0, #0
 8008fda:	d011      	beq.n	8009000 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	3310      	adds	r3, #16
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	0011      	movs	r1, r2
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f000 fe97 	bl	8009d18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	0018      	movs	r0, r3
 8008fee:	f000 f9d9 	bl	80093a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008ff2:	f000 fced 	bl	80099d0 <xTaskResumeAll>
 8008ff6:	1e03      	subs	r3, r0, #0
 8008ff8:	d18a      	bne.n	8008f10 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8008ffa:	f001 fce9 	bl	800a9d0 <vPortYield>
 8008ffe:	e787      	b.n	8008f10 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	0018      	movs	r0, r3
 8009004:	f000 f9ce 	bl	80093a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009008:	f000 fce2 	bl	80099d0 <xTaskResumeAll>
 800900c:	e780      	b.n	8008f10 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	0018      	movs	r0, r3
 8009012:	f000 f9c7 	bl	80093a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009016:	f000 fcdb 	bl	80099d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800901a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800901c:	0018      	movs	r0, r3
 800901e:	46bd      	mov	sp, r7
 8009020:	b00a      	add	sp, #40	@ 0x28
 8009022:	bd80      	pop	{r7, pc}

08009024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b08b      	sub	sp, #44	@ 0x2c
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
 8009030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d102      	bne.n	8009042 <xQueueGenericSendFromISR+0x1e>
 800903c:	b672      	cpsid	i
 800903e:	46c0      	nop			@ (mov r8, r8)
 8009040:	e7fd      	b.n	800903e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d103      	bne.n	8009050 <xQueueGenericSendFromISR+0x2c>
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <xQueueGenericSendFromISR+0x30>
 8009050:	2301      	movs	r3, #1
 8009052:	e000      	b.n	8009056 <xQueueGenericSendFromISR+0x32>
 8009054:	2300      	movs	r3, #0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d102      	bne.n	8009060 <xQueueGenericSendFromISR+0x3c>
 800905a:	b672      	cpsid	i
 800905c:	46c0      	nop			@ (mov r8, r8)
 800905e:	e7fd      	b.n	800905c <xQueueGenericSendFromISR+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b02      	cmp	r3, #2
 8009064:	d103      	bne.n	800906e <xQueueGenericSendFromISR+0x4a>
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <xQueueGenericSendFromISR+0x4e>
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <xQueueGenericSendFromISR+0x50>
 8009072:	2300      	movs	r3, #0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d102      	bne.n	800907e <xQueueGenericSendFromISR+0x5a>
 8009078:	b672      	cpsid	i
 800907a:	46c0      	nop			@ (mov r8, r8)
 800907c:	e7fd      	b.n	800907a <xQueueGenericSendFromISR+0x56>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800907e:	f001 fce1 	bl	800aa44 <ulSetInterruptMaskFromISR>
 8009082:	0003      	movs	r3, r0
 8009084:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009086:	6a3b      	ldr	r3, [r7, #32]
 8009088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800908a:	6a3b      	ldr	r3, [r7, #32]
 800908c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908e:	429a      	cmp	r2, r3
 8009090:	d302      	bcc.n	8009098 <xQueueGenericSendFromISR+0x74>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d131      	bne.n	80090fc <xQueueGenericSendFromISR+0xd8>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009098:	241b      	movs	r4, #27
 800909a:	193b      	adds	r3, r7, r4
 800909c:	6a3a      	ldr	r2, [r7, #32]
 800909e:	2145      	movs	r1, #69	@ 0x45
 80090a0:	5c52      	ldrb	r2, [r2, r1]
 80090a2:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090a4:	6a3b      	ldr	r3, [r7, #32]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a8:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	6a3b      	ldr	r3, [r7, #32]
 80090b0:	0018      	movs	r0, r3
 80090b2:	f000 f8e6 	bl	8009282 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80090b6:	193b      	adds	r3, r7, r4
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	b25b      	sxtb	r3, r3
 80090bc:	3301      	adds	r3, #1
 80090be:	d111      	bne.n	80090e4 <xQueueGenericSendFromISR+0xc0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d016      	beq.n	80090f6 <xQueueGenericSendFromISR+0xd2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	3324      	adds	r3, #36	@ 0x24
 80090cc:	0018      	movs	r0, r3
 80090ce:	f000 fe6b 	bl	8009da8 <xTaskRemoveFromEventList>
 80090d2:	1e03      	subs	r3, r0, #0
 80090d4:	d00f      	beq.n	80090f6 <xQueueGenericSendFromISR+0xd2>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00c      	beq.n	80090f6 <xQueueGenericSendFromISR+0xd2>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	e008      	b.n	80090f6 <xQueueGenericSendFromISR+0xd2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090e4:	231b      	movs	r3, #27
 80090e6:	18fb      	adds	r3, r7, r3
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	3301      	adds	r3, #1
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	b259      	sxtb	r1, r3
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	2245      	movs	r2, #69	@ 0x45
 80090f4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80090f6:	2301      	movs	r3, #1
 80090f8:	627b      	str	r3, [r7, #36]	@ 0x24
		{
 80090fa:	e001      	b.n	8009100 <xQueueGenericSendFromISR+0xdc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	0018      	movs	r0, r3
 8009104:	f001 fca4 	bl	800aa50 <vClearInterruptMaskFromISR>

	return xReturn;
 8009108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800910a:	0018      	movs	r0, r3
 800910c:	46bd      	mov	sp, r7
 800910e:	b00b      	add	sp, #44	@ 0x2c
 8009110:	bd90      	pop	{r4, r7, pc}

08009112 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b08a      	sub	sp, #40	@ 0x28
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800911e:	2300      	movs	r3, #0
 8009120:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <xQueueReceive+0x20>
 800912c:	b672      	cpsid	i
 800912e:	46c0      	nop			@ (mov r8, r8)
 8009130:	e7fd      	b.n	800912e <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <xQueueReceive+0x2e>
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <xQueueReceive+0x32>
 8009140:	2301      	movs	r3, #1
 8009142:	e000      	b.n	8009146 <xQueueReceive+0x34>
 8009144:	2300      	movs	r3, #0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d102      	bne.n	8009150 <xQueueReceive+0x3e>
 800914a:	b672      	cpsid	i
 800914c:	46c0      	nop			@ (mov r8, r8)
 800914e:	e7fd      	b.n	800914c <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009150:	f000 ffc6 	bl	800a0e0 <xTaskGetSchedulerState>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d102      	bne.n	800915e <xQueueReceive+0x4c>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <xQueueReceive+0x50>
 800915e:	2301      	movs	r3, #1
 8009160:	e000      	b.n	8009164 <xQueueReceive+0x52>
 8009162:	2300      	movs	r3, #0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d102      	bne.n	800916e <xQueueReceive+0x5c>
 8009168:	b672      	cpsid	i
 800916a:	46c0      	nop			@ (mov r8, r8)
 800916c:	e7fd      	b.n	800916a <xQueueReceive+0x58>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800916e:	f001 fc3f 	bl	800a9f0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009172:	6a3b      	ldr	r3, [r7, #32]
 8009174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009176:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d01a      	beq.n	80091b4 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	0011      	movs	r1, r2
 8009184:	0018      	movs	r0, r3
 8009186:	f000 f8e7 	bl	8009358 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009192:	6a3b      	ldr	r3, [r7, #32]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d008      	beq.n	80091ac <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	3310      	adds	r3, #16
 800919e:	0018      	movs	r0, r3
 80091a0:	f000 fe02 	bl	8009da8 <xTaskRemoveFromEventList>
 80091a4:	1e03      	subs	r3, r0, #0
 80091a6:	d001      	beq.n	80091ac <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091a8:	f001 fc12 	bl	800a9d0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091ac:	f001 fc32 	bl	800aa14 <vPortExitCritical>
				return pdPASS;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e062      	b.n	800927a <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d103      	bne.n	80091c2 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091ba:	f001 fc2b 	bl	800aa14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091be:	2300      	movs	r3, #0
 80091c0:	e05b      	b.n	800927a <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091c8:	2314      	movs	r3, #20
 80091ca:	18fb      	adds	r3, r7, r3
 80091cc:	0018      	movs	r0, r3
 80091ce:	f000 fe49 	bl	8009e64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091d6:	f001 fc1d 	bl	800aa14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091da:	f000 fbed 	bl	80099b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091de:	f001 fc07 	bl	800a9f0 <vPortEnterCritical>
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	2244      	movs	r2, #68	@ 0x44
 80091e6:	5c9b      	ldrb	r3, [r3, r2]
 80091e8:	b25b      	sxtb	r3, r3
 80091ea:	3301      	adds	r3, #1
 80091ec:	d103      	bne.n	80091f6 <xQueueReceive+0xe4>
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	2244      	movs	r2, #68	@ 0x44
 80091f2:	2100      	movs	r1, #0
 80091f4:	5499      	strb	r1, [r3, r2]
 80091f6:	6a3b      	ldr	r3, [r7, #32]
 80091f8:	2245      	movs	r2, #69	@ 0x45
 80091fa:	5c9b      	ldrb	r3, [r3, r2]
 80091fc:	b25b      	sxtb	r3, r3
 80091fe:	3301      	adds	r3, #1
 8009200:	d103      	bne.n	800920a <xQueueReceive+0xf8>
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	2245      	movs	r2, #69	@ 0x45
 8009206:	2100      	movs	r1, #0
 8009208:	5499      	strb	r1, [r3, r2]
 800920a:	f001 fc03 	bl	800aa14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800920e:	1d3a      	adds	r2, r7, #4
 8009210:	2314      	movs	r3, #20
 8009212:	18fb      	adds	r3, r7, r3
 8009214:	0011      	movs	r1, r2
 8009216:	0018      	movs	r0, r3
 8009218:	f000 fe38 	bl	8009e8c <xTaskCheckForTimeOut>
 800921c:	1e03      	subs	r3, r0, #0
 800921e:	d11e      	bne.n	800925e <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	0018      	movs	r0, r3
 8009224:	f000 f91c 	bl	8009460 <prvIsQueueEmpty>
 8009228:	1e03      	subs	r3, r0, #0
 800922a:	d011      	beq.n	8009250 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	3324      	adds	r3, #36	@ 0x24
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	0011      	movs	r1, r2
 8009234:	0018      	movs	r0, r3
 8009236:	f000 fd6f 	bl	8009d18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	0018      	movs	r0, r3
 800923e:	f000 f8b1 	bl	80093a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009242:	f000 fbc5 	bl	80099d0 <xTaskResumeAll>
 8009246:	1e03      	subs	r3, r0, #0
 8009248:	d191      	bne.n	800916e <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 800924a:	f001 fbc1 	bl	800a9d0 <vPortYield>
 800924e:	e78e      	b.n	800916e <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	0018      	movs	r0, r3
 8009254:	f000 f8a6 	bl	80093a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009258:	f000 fbba 	bl	80099d0 <xTaskResumeAll>
 800925c:	e787      	b.n	800916e <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	0018      	movs	r0, r3
 8009262:	f000 f89f 	bl	80093a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009266:	f000 fbb3 	bl	80099d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	0018      	movs	r0, r3
 800926e:	f000 f8f7 	bl	8009460 <prvIsQueueEmpty>
 8009272:	1e03      	subs	r3, r0, #0
 8009274:	d100      	bne.n	8009278 <xQueueReceive+0x166>
 8009276:	e77a      	b.n	800916e <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800927a:	0018      	movs	r0, r3
 800927c:	46bd      	mov	sp, r7
 800927e:	b00a      	add	sp, #40	@ 0x28
 8009280:	bd80      	pop	{r7, pc}

08009282 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b086      	sub	sp, #24
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800928e:	2300      	movs	r3, #0
 8009290:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009296:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10e      	bne.n	80092be <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d14e      	bne.n	8009346 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	0018      	movs	r0, r3
 80092ae:	f000 ff33 	bl	800a118 <xTaskPriorityDisinherit>
 80092b2:	0003      	movs	r3, r0
 80092b4:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	609a      	str	r2, [r3, #8]
 80092bc:	e043      	b.n	8009346 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d119      	bne.n	80092f8 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6858      	ldr	r0, [r3, #4]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	0019      	movs	r1, r3
 80092d0:	f001 fe6c 	bl	800afac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092dc:	18d2      	adds	r2, r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d32b      	bcc.n	8009346 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	605a      	str	r2, [r3, #4]
 80092f6:	e026      	b.n	8009346 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68d8      	ldr	r0, [r3, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	0019      	movs	r1, r3
 8009304:	f001 fe52 	bl	800afac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	68da      	ldr	r2, [r3, #12]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009310:	425b      	negs	r3, r3
 8009312:	18d2      	adds	r2, r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	68da      	ldr	r2, [r3, #12]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	429a      	cmp	r2, r3
 8009322:	d207      	bcs.n	8009334 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932c:	425b      	negs	r3, r3
 800932e:	18d2      	adds	r2, r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b02      	cmp	r3, #2
 8009338:	d105      	bne.n	8009346 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	3b01      	subs	r3, #1
 8009344:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800934e:	697b      	ldr	r3, [r7, #20]
}
 8009350:	0018      	movs	r0, r3
 8009352:	46bd      	mov	sp, r7
 8009354:	b006      	add	sp, #24
 8009356:	bd80      	pop	{r7, pc}

08009358 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009366:	2b00      	cmp	r3, #0
 8009368:	d018      	beq.n	800939c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009372:	18d2      	adds	r2, r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68da      	ldr	r2, [r3, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	429a      	cmp	r2, r3
 8009382:	d303      	bcc.n	800938c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68d9      	ldr	r1, [r3, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	0018      	movs	r0, r3
 8009398:	f001 fe08 	bl	800afac <memcpy>
	}
}
 800939c:	46c0      	nop			@ (mov r8, r8)
 800939e:	46bd      	mov	sp, r7
 80093a0:	b002      	add	sp, #8
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093ac:	f001 fb20 	bl	800a9f0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093b0:	230f      	movs	r3, #15
 80093b2:	18fb      	adds	r3, r7, r3
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	2145      	movs	r1, #69	@ 0x45
 80093b8:	5c52      	ldrb	r2, [r2, r1]
 80093ba:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093bc:	e013      	b.n	80093e6 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3324      	adds	r3, #36	@ 0x24
 80093ca:	0018      	movs	r0, r3
 80093cc:	f000 fcec 	bl	8009da8 <xTaskRemoveFromEventList>
 80093d0:	1e03      	subs	r3, r0, #0
 80093d2:	d001      	beq.n	80093d8 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093d4:	f000 fdac 	bl	8009f30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093d8:	210f      	movs	r1, #15
 80093da:	187b      	adds	r3, r7, r1
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	3b01      	subs	r3, #1
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	187b      	adds	r3, r7, r1
 80093e4:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093e6:	230f      	movs	r3, #15
 80093e8:	18fb      	adds	r3, r7, r3
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	b25b      	sxtb	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dce5      	bgt.n	80093be <prvUnlockQueue+0x1a>
 80093f2:	e000      	b.n	80093f6 <prvUnlockQueue+0x52>
					break;
 80093f4:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2245      	movs	r2, #69	@ 0x45
 80093fa:	21ff      	movs	r1, #255	@ 0xff
 80093fc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80093fe:	f001 fb09 	bl	800aa14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009402:	f001 faf5 	bl	800a9f0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009406:	230e      	movs	r3, #14
 8009408:	18fb      	adds	r3, r7, r3
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	2144      	movs	r1, #68	@ 0x44
 800940e:	5c52      	ldrb	r2, [r2, r1]
 8009410:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009412:	e013      	b.n	800943c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d016      	beq.n	800944a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	3310      	adds	r3, #16
 8009420:	0018      	movs	r0, r3
 8009422:	f000 fcc1 	bl	8009da8 <xTaskRemoveFromEventList>
 8009426:	1e03      	subs	r3, r0, #0
 8009428:	d001      	beq.n	800942e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800942a:	f000 fd81 	bl	8009f30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800942e:	210e      	movs	r1, #14
 8009430:	187b      	adds	r3, r7, r1
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	3b01      	subs	r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	187b      	adds	r3, r7, r1
 800943a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800943c:	230e      	movs	r3, #14
 800943e:	18fb      	adds	r3, r7, r3
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	b25b      	sxtb	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	dce5      	bgt.n	8009414 <prvUnlockQueue+0x70>
 8009448:	e000      	b.n	800944c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800944a:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2244      	movs	r2, #68	@ 0x44
 8009450:	21ff      	movs	r1, #255	@ 0xff
 8009452:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8009454:	f001 fade 	bl	800aa14 <vPortExitCritical>
}
 8009458:	46c0      	nop			@ (mov r8, r8)
 800945a:	46bd      	mov	sp, r7
 800945c:	b004      	add	sp, #16
 800945e:	bd80      	pop	{r7, pc}

08009460 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009468:	f001 fac2 	bl	800a9f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	2b00      	cmp	r3, #0
 8009472:	d102      	bne.n	800947a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009474:	2301      	movs	r3, #1
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	e001      	b.n	800947e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800947e:	f001 fac9 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 8009482:	68fb      	ldr	r3, [r7, #12]
}
 8009484:	0018      	movs	r0, r3
 8009486:	46bd      	mov	sp, r7
 8009488:	b004      	add	sp, #16
 800948a:	bd80      	pop	{r7, pc}

0800948c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009494:	f001 faac 	bl	800a9f0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d102      	bne.n	80094aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094a4:	2301      	movs	r3, #1
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	e001      	b.n	80094ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094ae:	f001 fab1 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 80094b2:	68fb      	ldr	r3, [r7, #12]
}
 80094b4:	0018      	movs	r0, r3
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b004      	add	sp, #16
 80094ba:	bd80      	pop	{r7, pc}

080094bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	e015      	b.n	80094f8 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009508 <vQueueAddToRegistry+0x4c>)
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	00d2      	lsls	r2, r2, #3
 80094d2:	58d3      	ldr	r3, [r2, r3]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10c      	bne.n	80094f2 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009508 <vQueueAddToRegistry+0x4c>)
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	00d2      	lsls	r2, r2, #3
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80094e2:	4a09      	ldr	r2, [pc, #36]	@ (8009508 <vQueueAddToRegistry+0x4c>)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	18d3      	adds	r3, r2, r3
 80094ea:	3304      	adds	r3, #4
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80094f0:	e006      	b.n	8009500 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3301      	adds	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2b07      	cmp	r3, #7
 80094fc:	d9e6      	bls.n	80094cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80094fe:	46c0      	nop			@ (mov r8, r8)
 8009500:	46c0      	nop			@ (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b004      	add	sp, #16
 8009506:	bd80      	pop	{r7, pc}
 8009508:	20001260 	.word	0x20001260

0800950c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800950c:	b580      	push	{r7, lr}
 800950e:	b086      	sub	sp, #24
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800951c:	f001 fa68 	bl	800a9f0 <vPortEnterCritical>
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	2244      	movs	r2, #68	@ 0x44
 8009524:	5c9b      	ldrb	r3, [r3, r2]
 8009526:	b25b      	sxtb	r3, r3
 8009528:	3301      	adds	r3, #1
 800952a:	d103      	bne.n	8009534 <vQueueWaitForMessageRestricted+0x28>
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2244      	movs	r2, #68	@ 0x44
 8009530:	2100      	movs	r1, #0
 8009532:	5499      	strb	r1, [r3, r2]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	2245      	movs	r2, #69	@ 0x45
 8009538:	5c9b      	ldrb	r3, [r3, r2]
 800953a:	b25b      	sxtb	r3, r3
 800953c:	3301      	adds	r3, #1
 800953e:	d103      	bne.n	8009548 <vQueueWaitForMessageRestricted+0x3c>
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	2245      	movs	r2, #69	@ 0x45
 8009544:	2100      	movs	r1, #0
 8009546:	5499      	strb	r1, [r3, r2]
 8009548:	f001 fa64 	bl	800aa14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	3324      	adds	r3, #36	@ 0x24
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	0018      	movs	r0, r3
 800955e:	f000 fbfb 	bl	8009d58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	0018      	movs	r0, r3
 8009566:	f7ff ff1d 	bl	80093a4 <prvUnlockQueue>
	}
 800956a:	46c0      	nop			@ (mov r8, r8)
 800956c:	46bd      	mov	sp, r7
 800956e:	b006      	add	sp, #24
 8009570:	bd80      	pop	{r7, pc}

08009572 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009572:	b590      	push	{r4, r7, lr}
 8009574:	b08d      	sub	sp, #52	@ 0x34
 8009576:	af04      	add	r7, sp, #16
 8009578:	60f8      	str	r0, [r7, #12]
 800957a:	60b9      	str	r1, [r7, #8]
 800957c:	607a      	str	r2, [r7, #4]
 800957e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <xTaskCreateStatic+0x1a>
 8009586:	b672      	cpsid	i
 8009588:	46c0      	nop			@ (mov r8, r8)
 800958a:	e7fd      	b.n	8009588 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800958c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <xTaskCreateStatic+0x26>
 8009592:	b672      	cpsid	i
 8009594:	46c0      	nop			@ (mov r8, r8)
 8009596:	e7fd      	b.n	8009594 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009598:	23a8      	movs	r3, #168	@ 0xa8
 800959a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2ba8      	cmp	r3, #168	@ 0xa8
 80095a0:	d002      	beq.n	80095a8 <xTaskCreateStatic+0x36>
 80095a2:	b672      	cpsid	i
 80095a4:	46c0      	nop			@ (mov r8, r8)
 80095a6:	e7fd      	b.n	80095a4 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095a8:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d020      	beq.n	80095f2 <xTaskCreateStatic+0x80>
 80095b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d01d      	beq.n	80095f2 <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	22a5      	movs	r2, #165	@ 0xa5
 80095c4:	2102      	movs	r1, #2
 80095c6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095c8:	683c      	ldr	r4, [r7, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	68b9      	ldr	r1, [r7, #8]
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	2300      	movs	r3, #0
 80095d2:	9303      	str	r3, [sp, #12]
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	9302      	str	r3, [sp, #8]
 80095d8:	2318      	movs	r3, #24
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	0023      	movs	r3, r4
 80095e4:	f000 f858 	bl	8009698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	0018      	movs	r0, r3
 80095ec:	f000 f8f6 	bl	80097dc <prvAddNewTaskToReadyList>
 80095f0:	e001      	b.n	80095f6 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80095f6:	69bb      	ldr	r3, [r7, #24]
	}
 80095f8:	0018      	movs	r0, r3
 80095fa:	46bd      	mov	sp, r7
 80095fc:	b009      	add	sp, #36	@ 0x24
 80095fe:	bd90      	pop	{r4, r7, pc}

08009600 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009600:	b590      	push	{r4, r7, lr}
 8009602:	b08d      	sub	sp, #52	@ 0x34
 8009604:	af04      	add	r7, sp, #16
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	1dbb      	adds	r3, r7, #6
 800960e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009610:	1dbb      	adds	r3, r7, #6
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	0018      	movs	r0, r3
 8009618:	f001 fa82 	bl	800ab20 <pvPortMalloc>
 800961c:	0003      	movs	r3, r0
 800961e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d010      	beq.n	8009648 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009626:	20a8      	movs	r0, #168	@ 0xa8
 8009628:	f001 fa7a 	bl	800ab20 <pvPortMalloc>
 800962c:	0003      	movs	r3, r0
 800962e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d003      	beq.n	800963e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	631a      	str	r2, [r3, #48]	@ 0x30
 800963c:	e006      	b.n	800964c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	0018      	movs	r0, r3
 8009642:	f001 fb1d 	bl	800ac80 <vPortFree>
 8009646:	e001      	b.n	800964c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009648:	2300      	movs	r3, #0
 800964a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d01a      	beq.n	8009688 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	22a5      	movs	r2, #165	@ 0xa5
 8009656:	2100      	movs	r1, #0
 8009658:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800965a:	1dbb      	adds	r3, r7, #6
 800965c:	881a      	ldrh	r2, [r3, #0]
 800965e:	683c      	ldr	r4, [r7, #0]
 8009660:	68b9      	ldr	r1, [r7, #8]
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	2300      	movs	r3, #0
 8009666:	9303      	str	r3, [sp, #12]
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	9302      	str	r3, [sp, #8]
 800966c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	0023      	movs	r3, r4
 8009676:	f000 f80f 	bl	8009698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	0018      	movs	r0, r3
 800967e:	f000 f8ad 	bl	80097dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009682:	2301      	movs	r3, #1
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	e002      	b.n	800968e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009688:	2301      	movs	r3, #1
 800968a:	425b      	negs	r3, r3
 800968c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800968e:	69bb      	ldr	r3, [r7, #24]
	}
 8009690:	0018      	movs	r0, r3
 8009692:	46bd      	mov	sp, r7
 8009694:	b009      	add	sp, #36	@ 0x24
 8009696:	bd90      	pop	{r4, r7, pc}

08009698 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
 80096a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	001a      	movs	r2, r3
 80096b0:	21a5      	movs	r1, #165	@ 0xa5
 80096b2:	f001 fbed 	bl	800ae90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4943      	ldr	r1, [pc, #268]	@ (80097cc <prvInitialiseNewTask+0x134>)
 80096be:	468c      	mov	ip, r1
 80096c0:	4463      	add	r3, ip
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	18d3      	adds	r3, r2, r3
 80096c6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2207      	movs	r2, #7
 80096cc:	4393      	bics	r3, r2
 80096ce:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	2207      	movs	r2, #7
 80096d4:	4013      	ands	r3, r2
 80096d6:	d002      	beq.n	80096de <prvInitialiseNewTask+0x46>
 80096d8:	b672      	cpsid	i
 80096da:	46c0      	nop			@ (mov r8, r8)
 80096dc:	e7fd      	b.n	80096da <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d020      	beq.n	8009726 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096e4:	2300      	movs	r3, #0
 80096e6:	617b      	str	r3, [r7, #20]
 80096e8:	e013      	b.n	8009712 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	18d3      	adds	r3, r2, r3
 80096f0:	7818      	ldrb	r0, [r3, #0]
 80096f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096f4:	2134      	movs	r1, #52	@ 0x34
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	18d3      	adds	r3, r2, r3
 80096fa:	185b      	adds	r3, r3, r1
 80096fc:	1c02      	adds	r2, r0, #0
 80096fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	18d3      	adds	r3, r2, r3
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d006      	beq.n	800971a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	3301      	adds	r3, #1
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2b0f      	cmp	r3, #15
 8009716:	d9e8      	bls.n	80096ea <prvInitialiseNewTask+0x52>
 8009718:	e000      	b.n	800971c <prvInitialiseNewTask+0x84>
			{
				break;
 800971a:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800971c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800971e:	2243      	movs	r2, #67	@ 0x43
 8009720:	2100      	movs	r1, #0
 8009722:	5499      	strb	r1, [r3, r2]
 8009724:	e003      	b.n	800972e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009728:	2234      	movs	r2, #52	@ 0x34
 800972a:	2100      	movs	r1, #0
 800972c:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800972e:	6a3b      	ldr	r3, [r7, #32]
 8009730:	2b37      	cmp	r3, #55	@ 0x37
 8009732:	d901      	bls.n	8009738 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009734:	2337      	movs	r3, #55	@ 0x37
 8009736:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800973a:	6a3a      	ldr	r2, [r7, #32]
 800973c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800973e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009740:	6a3a      	ldr	r2, [r7, #32]
 8009742:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009746:	2200      	movs	r2, #0
 8009748:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800974a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800974c:	3304      	adds	r3, #4
 800974e:	0018      	movs	r0, r3
 8009750:	f7ff fa48 	bl	8008be4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	3318      	adds	r3, #24
 8009758:	0018      	movs	r0, r3
 800975a:	f7ff fa43 	bl	8008be4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800975e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009762:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	2238      	movs	r2, #56	@ 0x38
 8009768:	1ad2      	subs	r2, r2, r3
 800976a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800976e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009772:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009776:	22a0      	movs	r2, #160	@ 0xa0
 8009778:	2100      	movs	r1, #0
 800977a:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977e:	22a4      	movs	r2, #164	@ 0xa4
 8009780:	2100      	movs	r1, #0
 8009782:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	3354      	adds	r3, #84	@ 0x54
 8009788:	224c      	movs	r2, #76	@ 0x4c
 800978a:	2100      	movs	r1, #0
 800978c:	0018      	movs	r0, r3
 800978e:	f001 fb7f 	bl	800ae90 <memset>
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	4a0e      	ldr	r2, [pc, #56]	@ (80097d0 <prvInitialiseNewTask+0x138>)
 8009796:	659a      	str	r2, [r3, #88]	@ 0x58
 8009798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800979a:	4a0e      	ldr	r2, [pc, #56]	@ (80097d4 <prvInitialiseNewTask+0x13c>)
 800979c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800979e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a0:	4a0d      	ldr	r2, [pc, #52]	@ (80097d8 <prvInitialiseNewTask+0x140>)
 80097a2:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	68f9      	ldr	r1, [r7, #12]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	0018      	movs	r0, r3
 80097ac:	f001 f884 	bl	800a8b8 <pxPortInitialiseStack>
 80097b0:	0002      	movs	r2, r0
 80097b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d002      	beq.n	80097c2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80097c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097c2:	46c0      	nop			@ (mov r8, r8)
 80097c4:	46bd      	mov	sp, r7
 80097c6:	b006      	add	sp, #24
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	46c0      	nop			@ (mov r8, r8)
 80097cc:	3fffffff 	.word	0x3fffffff
 80097d0:	200024ec 	.word	0x200024ec
 80097d4:	20002554 	.word	0x20002554
 80097d8:	200025bc 	.word	0x200025bc

080097dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80097e4:	f001 f904 	bl	800a9f0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80097e8:	4b2a      	ldr	r3, [pc, #168]	@ (8009894 <prvAddNewTaskToReadyList+0xb8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	1c5a      	adds	r2, r3, #1
 80097ee:	4b29      	ldr	r3, [pc, #164]	@ (8009894 <prvAddNewTaskToReadyList+0xb8>)
 80097f0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80097f2:	4b29      	ldr	r3, [pc, #164]	@ (8009898 <prvAddNewTaskToReadyList+0xbc>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d109      	bne.n	800980e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097fa:	4b27      	ldr	r3, [pc, #156]	@ (8009898 <prvAddNewTaskToReadyList+0xbc>)
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009800:	4b24      	ldr	r3, [pc, #144]	@ (8009894 <prvAddNewTaskToReadyList+0xb8>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d110      	bne.n	800982a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009808:	f000 fbac 	bl	8009f64 <prvInitialiseTaskLists>
 800980c:	e00d      	b.n	800982a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800980e:	4b23      	ldr	r3, [pc, #140]	@ (800989c <prvAddNewTaskToReadyList+0xc0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d109      	bne.n	800982a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009816:	4b20      	ldr	r3, [pc, #128]	@ (8009898 <prvAddNewTaskToReadyList+0xbc>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009820:	429a      	cmp	r2, r3
 8009822:	d802      	bhi.n	800982a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009824:	4b1c      	ldr	r3, [pc, #112]	@ (8009898 <prvAddNewTaskToReadyList+0xbc>)
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800982a:	4b1d      	ldr	r3, [pc, #116]	@ (80098a0 <prvAddNewTaskToReadyList+0xc4>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	4b1b      	ldr	r3, [pc, #108]	@ (80098a0 <prvAddNewTaskToReadyList+0xc4>)
 8009832:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009834:	4b1a      	ldr	r3, [pc, #104]	@ (80098a0 <prvAddNewTaskToReadyList+0xc4>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009840:	4b18      	ldr	r3, [pc, #96]	@ (80098a4 <prvAddNewTaskToReadyList+0xc8>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	429a      	cmp	r2, r3
 8009846:	d903      	bls.n	8009850 <prvAddNewTaskToReadyList+0x74>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800984c:	4b15      	ldr	r3, [pc, #84]	@ (80098a4 <prvAddNewTaskToReadyList+0xc8>)
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009854:	0013      	movs	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	189b      	adds	r3, r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4a12      	ldr	r2, [pc, #72]	@ (80098a8 <prvAddNewTaskToReadyList+0xcc>)
 800985e:	189a      	adds	r2, r3, r2
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3304      	adds	r3, #4
 8009864:	0019      	movs	r1, r3
 8009866:	0010      	movs	r0, r2
 8009868:	f7ff f9c7 	bl	8008bfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800986c:	f001 f8d2 	bl	800aa14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009870:	4b0a      	ldr	r3, [pc, #40]	@ (800989c <prvAddNewTaskToReadyList+0xc0>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d008      	beq.n	800988a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009878:	4b07      	ldr	r3, [pc, #28]	@ (8009898 <prvAddNewTaskToReadyList+0xbc>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009882:	429a      	cmp	r2, r3
 8009884:	d201      	bcs.n	800988a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009886:	f001 f8a3 	bl	800a9d0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800988a:	46c0      	nop			@ (mov r8, r8)
 800988c:	46bd      	mov	sp, r7
 800988e:	b002      	add	sp, #8
 8009890:	bd80      	pop	{r7, pc}
 8009892:	46c0      	nop			@ (mov r8, r8)
 8009894:	20001774 	.word	0x20001774
 8009898:	200012a0 	.word	0x200012a0
 800989c:	20001780 	.word	0x20001780
 80098a0:	20001790 	.word	0x20001790
 80098a4:	2000177c 	.word	0x2000177c
 80098a8:	200012a4 	.word	0x200012a4

080098ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d011      	beq.n	80098e2 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80098be:	4b0d      	ldr	r3, [pc, #52]	@ (80098f4 <vTaskDelay+0x48>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <vTaskDelay+0x20>
 80098c6:	b672      	cpsid	i
 80098c8:	46c0      	nop			@ (mov r8, r8)
 80098ca:	e7fd      	b.n	80098c8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80098cc:	f000 f874 	bl	80099b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2100      	movs	r1, #0
 80098d4:	0018      	movs	r0, r3
 80098d6:	f000 fc7d 	bl	800a1d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80098da:	f000 f879 	bl	80099d0 <xTaskResumeAll>
 80098de:	0003      	movs	r3, r0
 80098e0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80098e8:	f001 f872 	bl	800a9d0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098ec:	46c0      	nop			@ (mov r8, r8)
 80098ee:	46bd      	mov	sp, r7
 80098f0:	b004      	add	sp, #16
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	2000179c 	.word	0x2000179c

080098f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098f8:	b590      	push	{r4, r7, lr}
 80098fa:	b089      	sub	sp, #36	@ 0x24
 80098fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009902:	2300      	movs	r3, #0
 8009904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009906:	003a      	movs	r2, r7
 8009908:	1d39      	adds	r1, r7, #4
 800990a:	2308      	movs	r3, #8
 800990c:	18fb      	adds	r3, r7, r3
 800990e:	0018      	movs	r0, r3
 8009910:	f7ff f91a 	bl	8008b48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009914:	683c      	ldr	r4, [r7, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	491f      	ldr	r1, [pc, #124]	@ (8009998 <vTaskStartScheduler+0xa0>)
 800991c:	481f      	ldr	r0, [pc, #124]	@ (800999c <vTaskStartScheduler+0xa4>)
 800991e:	9202      	str	r2, [sp, #8]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	2300      	movs	r3, #0
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	2300      	movs	r3, #0
 8009928:	0022      	movs	r2, r4
 800992a:	f7ff fe22 	bl	8009572 <xTaskCreateStatic>
 800992e:	0002      	movs	r2, r0
 8009930:	4b1b      	ldr	r3, [pc, #108]	@ (80099a0 <vTaskStartScheduler+0xa8>)
 8009932:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009934:	4b1a      	ldr	r3, [pc, #104]	@ (80099a0 <vTaskStartScheduler+0xa8>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d002      	beq.n	8009942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800993c:	2301      	movs	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e001      	b.n	8009946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b01      	cmp	r3, #1
 800994a:	d103      	bne.n	8009954 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 800994c:	f000 fc96 	bl	800a27c <xTimerCreateTimerTask>
 8009950:	0003      	movs	r3, r0
 8009952:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b01      	cmp	r3, #1
 8009958:	d113      	bne.n	8009982 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800995a:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800995c:	4b11      	ldr	r3, [pc, #68]	@ (80099a4 <vTaskStartScheduler+0xac>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3354      	adds	r3, #84	@ 0x54
 8009962:	001a      	movs	r2, r3
 8009964:	4b10      	ldr	r3, [pc, #64]	@ (80099a8 <vTaskStartScheduler+0xb0>)
 8009966:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009968:	4b10      	ldr	r3, [pc, #64]	@ (80099ac <vTaskStartScheduler+0xb4>)
 800996a:	2201      	movs	r2, #1
 800996c:	4252      	negs	r2, r2
 800996e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009970:	4b0f      	ldr	r3, [pc, #60]	@ (80099b0 <vTaskStartScheduler+0xb8>)
 8009972:	2201      	movs	r2, #1
 8009974:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009976:	4b0f      	ldr	r3, [pc, #60]	@ (80099b4 <vTaskStartScheduler+0xbc>)
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800997c:	f001 f804 	bl	800a988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009980:	e005      	b.n	800998e <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3301      	adds	r3, #1
 8009986:	d102      	bne.n	800998e <vTaskStartScheduler+0x96>
 8009988:	b672      	cpsid	i
 800998a:	46c0      	nop			@ (mov r8, r8)
 800998c:	e7fd      	b.n	800998a <vTaskStartScheduler+0x92>
}
 800998e:	46c0      	nop			@ (mov r8, r8)
 8009990:	46bd      	mov	sp, r7
 8009992:	b005      	add	sp, #20
 8009994:	bd90      	pop	{r4, r7, pc}
 8009996:	46c0      	nop			@ (mov r8, r8)
 8009998:	0800b104 	.word	0x0800b104
 800999c:	08009f45 	.word	0x08009f45
 80099a0:	20001798 	.word	0x20001798
 80099a4:	200012a0 	.word	0x200012a0
 80099a8:	200000e4 	.word	0x200000e4
 80099ac:	20001794 	.word	0x20001794
 80099b0:	20001780 	.word	0x20001780
 80099b4:	20001778 	.word	0x20001778

080099b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099bc:	4b03      	ldr	r3, [pc, #12]	@ (80099cc <vTaskSuspendAll+0x14>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	4b02      	ldr	r3, [pc, #8]	@ (80099cc <vTaskSuspendAll+0x14>)
 80099c4:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099c6:	46c0      	nop			@ (mov r8, r8)
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	2000179c 	.word	0x2000179c

080099d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099da:	2300      	movs	r3, #0
 80099dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099de:	4b3a      	ldr	r3, [pc, #232]	@ (8009ac8 <xTaskResumeAll+0xf8>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d102      	bne.n	80099ec <xTaskResumeAll+0x1c>
 80099e6:	b672      	cpsid	i
 80099e8:	46c0      	nop			@ (mov r8, r8)
 80099ea:	e7fd      	b.n	80099e8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099ec:	f001 f800 	bl	800a9f0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099f0:	4b35      	ldr	r3, [pc, #212]	@ (8009ac8 <xTaskResumeAll+0xf8>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	1e5a      	subs	r2, r3, #1
 80099f6:	4b34      	ldr	r3, [pc, #208]	@ (8009ac8 <xTaskResumeAll+0xf8>)
 80099f8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099fa:	4b33      	ldr	r3, [pc, #204]	@ (8009ac8 <xTaskResumeAll+0xf8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d15b      	bne.n	8009aba <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a02:	4b32      	ldr	r3, [pc, #200]	@ (8009acc <xTaskResumeAll+0xfc>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d057      	beq.n	8009aba <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a0a:	e02f      	b.n	8009a6c <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a0c:	4b30      	ldr	r3, [pc, #192]	@ (8009ad0 <xTaskResumeAll+0x100>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3318      	adds	r3, #24
 8009a18:	0018      	movs	r0, r3
 8009a1a:	f7ff f946 	bl	8008caa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3304      	adds	r3, #4
 8009a22:	0018      	movs	r0, r3
 8009a24:	f7ff f941 	bl	8008caa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2c:	4b29      	ldr	r3, [pc, #164]	@ (8009ad4 <xTaskResumeAll+0x104>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d903      	bls.n	8009a3c <xTaskResumeAll+0x6c>
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a38:	4b26      	ldr	r3, [pc, #152]	@ (8009ad4 <xTaskResumeAll+0x104>)
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a40:	0013      	movs	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	189b      	adds	r3, r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	4a23      	ldr	r2, [pc, #140]	@ (8009ad8 <xTaskResumeAll+0x108>)
 8009a4a:	189a      	adds	r2, r3, r2
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3304      	adds	r3, #4
 8009a50:	0019      	movs	r1, r3
 8009a52:	0010      	movs	r0, r2
 8009a54:	f7ff f8d1 	bl	8008bfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8009adc <xTaskResumeAll+0x10c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d302      	bcc.n	8009a6c <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8009a66:	4b1e      	ldr	r3, [pc, #120]	@ (8009ae0 <xTaskResumeAll+0x110>)
 8009a68:	2201      	movs	r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a6c:	4b18      	ldr	r3, [pc, #96]	@ (8009ad0 <xTaskResumeAll+0x100>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1cb      	bne.n	8009a0c <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a7a:	f000 fb13 	bl	800a0a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a7e:	4b19      	ldr	r3, [pc, #100]	@ (8009ae4 <xTaskResumeAll+0x114>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00f      	beq.n	8009aaa <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a8a:	f000 f83b 	bl	8009b04 <xTaskIncrementTick>
 8009a8e:	1e03      	subs	r3, r0, #0
 8009a90:	d002      	beq.n	8009a98 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8009a92:	4b13      	ldr	r3, [pc, #76]	@ (8009ae0 <xTaskResumeAll+0x110>)
 8009a94:	2201      	movs	r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1f2      	bne.n	8009a8a <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 8009aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8009ae4 <xTaskResumeAll+0x114>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae0 <xTaskResumeAll+0x110>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ab6:	f000 ff8b 	bl	800a9d0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aba:	f000 ffab 	bl	800aa14 <vPortExitCritical>

	return xAlreadyYielded;
 8009abe:	68bb      	ldr	r3, [r7, #8]
}
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	b004      	add	sp, #16
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	2000179c 	.word	0x2000179c
 8009acc:	20001774 	.word	0x20001774
 8009ad0:	20001734 	.word	0x20001734
 8009ad4:	2000177c 	.word	0x2000177c
 8009ad8:	200012a4 	.word	0x200012a4
 8009adc:	200012a0 	.word	0x200012a0
 8009ae0:	20001788 	.word	0x20001788
 8009ae4:	20001784 	.word	0x20001784

08009ae8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009aee:	4b04      	ldr	r3, [pc, #16]	@ (8009b00 <xTaskGetTickCount+0x18>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009af4:	687b      	ldr	r3, [r7, #4]
}
 8009af6:	0018      	movs	r0, r3
 8009af8:	46bd      	mov	sp, r7
 8009afa:	b002      	add	sp, #8
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	46c0      	nop			@ (mov r8, r8)
 8009b00:	20001778 	.word	0x20001778

08009b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8009c38 <xTaskIncrementTick+0x134>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d000      	beq.n	8009b18 <xTaskIncrementTick+0x14>
 8009b16:	e085      	b.n	8009c24 <xTaskIncrementTick+0x120>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b18:	4b48      	ldr	r3, [pc, #288]	@ (8009c3c <xTaskIncrementTick+0x138>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b20:	4b46      	ldr	r3, [pc, #280]	@ (8009c3c <xTaskIncrementTick+0x138>)
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d118      	bne.n	8009b5e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b2c:	4b44      	ldr	r3, [pc, #272]	@ (8009c40 <xTaskIncrementTick+0x13c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <xTaskIncrementTick+0x38>
 8009b36:	b672      	cpsid	i
 8009b38:	46c0      	nop			@ (mov r8, r8)
 8009b3a:	e7fd      	b.n	8009b38 <xTaskIncrementTick+0x34>
 8009b3c:	4b40      	ldr	r3, [pc, #256]	@ (8009c40 <xTaskIncrementTick+0x13c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	60fb      	str	r3, [r7, #12]
 8009b42:	4b40      	ldr	r3, [pc, #256]	@ (8009c44 <xTaskIncrementTick+0x140>)
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b3e      	ldr	r3, [pc, #248]	@ (8009c40 <xTaskIncrementTick+0x13c>)
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c44 <xTaskIncrementTick+0x140>)
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	601a      	str	r2, [r3, #0]
 8009b50:	4b3d      	ldr	r3, [pc, #244]	@ (8009c48 <xTaskIncrementTick+0x144>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	4b3c      	ldr	r3, [pc, #240]	@ (8009c48 <xTaskIncrementTick+0x144>)
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	f000 faa3 	bl	800a0a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8009c4c <xTaskIncrementTick+0x148>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d349      	bcc.n	8009bfc <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b68:	4b35      	ldr	r3, [pc, #212]	@ (8009c40 <xTaskIncrementTick+0x13c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d104      	bne.n	8009b7c <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b72:	4b36      	ldr	r3, [pc, #216]	@ (8009c4c <xTaskIncrementTick+0x148>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	4252      	negs	r2, r2
 8009b78:	601a      	str	r2, [r3, #0]
					break;
 8009b7a:	e03f      	b.n	8009bfc <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b7c:	4b30      	ldr	r3, [pc, #192]	@ (8009c40 <xTaskIncrementTick+0x13c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d203      	bcs.n	8009b9c <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b94:	4b2d      	ldr	r3, [pc, #180]	@ (8009c4c <xTaskIncrementTick+0x148>)
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b9a:	e02f      	b.n	8009bfc <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f7ff f882 	bl	8008caa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d004      	beq.n	8009bb8 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	3318      	adds	r3, #24
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f7ff f879 	bl	8008caa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bbc:	4b24      	ldr	r3, [pc, #144]	@ (8009c50 <xTaskIncrementTick+0x14c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d903      	bls.n	8009bcc <xTaskIncrementTick+0xc8>
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bc8:	4b21      	ldr	r3, [pc, #132]	@ (8009c50 <xTaskIncrementTick+0x14c>)
 8009bca:	601a      	str	r2, [r3, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bd0:	0013      	movs	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	189b      	adds	r3, r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8009c54 <xTaskIncrementTick+0x150>)
 8009bda:	189a      	adds	r2, r3, r2
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	3304      	adds	r3, #4
 8009be0:	0019      	movs	r1, r3
 8009be2:	0010      	movs	r0, r2
 8009be4:	f7ff f809 	bl	8008bfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bec:	4b1a      	ldr	r3, [pc, #104]	@ (8009c58 <xTaskIncrementTick+0x154>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d3b8      	bcc.n	8009b68 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bfa:	e7b5      	b.n	8009b68 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bfc:	4b16      	ldr	r3, [pc, #88]	@ (8009c58 <xTaskIncrementTick+0x154>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c02:	4914      	ldr	r1, [pc, #80]	@ (8009c54 <xTaskIncrementTick+0x150>)
 8009c04:	0013      	movs	r3, r2
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	189b      	adds	r3, r3, r2
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	585b      	ldr	r3, [r3, r1]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d901      	bls.n	8009c16 <xTaskIncrementTick+0x112>
			{
				xSwitchRequired = pdTRUE;
 8009c12:	2301      	movs	r3, #1
 8009c14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c16:	4b11      	ldr	r3, [pc, #68]	@ (8009c5c <xTaskIncrementTick+0x158>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d007      	beq.n	8009c2e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e004      	b.n	8009c2e <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c24:	4b0e      	ldr	r3, [pc, #56]	@ (8009c60 <xTaskIncrementTick+0x15c>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	1c5a      	adds	r2, r3, #1
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <xTaskIncrementTick+0x15c>)
 8009c2c:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c2e:	697b      	ldr	r3, [r7, #20]
}
 8009c30:	0018      	movs	r0, r3
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b006      	add	sp, #24
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	2000179c 	.word	0x2000179c
 8009c3c:	20001778 	.word	0x20001778
 8009c40:	2000172c 	.word	0x2000172c
 8009c44:	20001730 	.word	0x20001730
 8009c48:	2000178c 	.word	0x2000178c
 8009c4c:	20001794 	.word	0x20001794
 8009c50:	2000177c 	.word	0x2000177c
 8009c54:	200012a4 	.word	0x200012a4
 8009c58:	200012a0 	.word	0x200012a0
 8009c5c:	20001788 	.word	0x20001788
 8009c60:	20001784 	.word	0x20001784

08009c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c6a:	4b25      	ldr	r3, [pc, #148]	@ (8009d00 <vTaskSwitchContext+0x9c>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c72:	4b24      	ldr	r3, [pc, #144]	@ (8009d04 <vTaskSwitchContext+0xa0>)
 8009c74:	2201      	movs	r2, #1
 8009c76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c78:	e03e      	b.n	8009cf8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009c7a:	4b22      	ldr	r3, [pc, #136]	@ (8009d04 <vTaskSwitchContext+0xa0>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c80:	4b21      	ldr	r3, [pc, #132]	@ (8009d08 <vTaskSwitchContext+0xa4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	607b      	str	r3, [r7, #4]
 8009c86:	e008      	b.n	8009c9a <vTaskSwitchContext+0x36>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <vTaskSwitchContext+0x30>
 8009c8e:	b672      	cpsid	i
 8009c90:	46c0      	nop			@ (mov r8, r8)
 8009c92:	e7fd      	b.n	8009c90 <vTaskSwitchContext+0x2c>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	607b      	str	r3, [r7, #4]
 8009c9a:	491c      	ldr	r1, [pc, #112]	@ (8009d0c <vTaskSwitchContext+0xa8>)
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	0013      	movs	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	189b      	adds	r3, r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	585b      	ldr	r3, [r3, r1]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d0ed      	beq.n	8009c88 <vTaskSwitchContext+0x24>
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	0013      	movs	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	189b      	adds	r3, r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4a15      	ldr	r2, [pc, #84]	@ (8009d0c <vTaskSwitchContext+0xa8>)
 8009cb8:	189b      	adds	r3, r3, r2
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d104      	bne.n	8009cdc <vTaskSwitchContext+0x78>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	605a      	str	r2, [r3, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8009d10 <vTaskSwitchContext+0xac>)
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	4b08      	ldr	r3, [pc, #32]	@ (8009d08 <vTaskSwitchContext+0xa4>)
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cec:	4b08      	ldr	r3, [pc, #32]	@ (8009d10 <vTaskSwitchContext+0xac>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3354      	adds	r3, #84	@ 0x54
 8009cf2:	001a      	movs	r2, r3
 8009cf4:	4b07      	ldr	r3, [pc, #28]	@ (8009d14 <vTaskSwitchContext+0xb0>)
 8009cf6:	601a      	str	r2, [r3, #0]
}
 8009cf8:	46c0      	nop			@ (mov r8, r8)
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	b002      	add	sp, #8
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	2000179c 	.word	0x2000179c
 8009d04:	20001788 	.word	0x20001788
 8009d08:	2000177c 	.word	0x2000177c
 8009d0c:	200012a4 	.word	0x200012a4
 8009d10:	200012a0 	.word	0x200012a0
 8009d14:	200000e4 	.word	0x200000e4

08009d18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d102      	bne.n	8009d2e <vTaskPlaceOnEventList+0x16>
 8009d28:	b672      	cpsid	i
 8009d2a:	46c0      	nop			@ (mov r8, r8)
 8009d2c:	e7fd      	b.n	8009d2a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d2e:	4b09      	ldr	r3, [pc, #36]	@ (8009d54 <vTaskPlaceOnEventList+0x3c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3318      	adds	r3, #24
 8009d34:	001a      	movs	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	0011      	movs	r1, r2
 8009d3a:	0018      	movs	r0, r3
 8009d3c:	f7fe ff7f 	bl	8008c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2101      	movs	r1, #1
 8009d44:	0018      	movs	r0, r3
 8009d46:	f000 fa45 	bl	800a1d4 <prvAddCurrentTaskToDelayedList>
}
 8009d4a:	46c0      	nop			@ (mov r8, r8)
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	b002      	add	sp, #8
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	46c0      	nop			@ (mov r8, r8)
 8009d54:	200012a0 	.word	0x200012a0

08009d58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d102      	bne.n	8009d70 <vTaskPlaceOnEventListRestricted+0x18>
 8009d6a:	b672      	cpsid	i
 8009d6c:	46c0      	nop			@ (mov r8, r8)
 8009d6e:	e7fd      	b.n	8009d6c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d70:	4b0c      	ldr	r3, [pc, #48]	@ (8009da4 <vTaskPlaceOnEventListRestricted+0x4c>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3318      	adds	r3, #24
 8009d76:	001a      	movs	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	0011      	movs	r1, r2
 8009d7c:	0018      	movs	r0, r3
 8009d7e:	f7fe ff3c 	bl	8008bfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <vTaskPlaceOnEventListRestricted+0x36>
		{
			xTicksToWait = portMAX_DELAY;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	425b      	negs	r3, r3
 8009d8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	0011      	movs	r1, r2
 8009d94:	0018      	movs	r0, r3
 8009d96:	f000 fa1d 	bl	800a1d4 <prvAddCurrentTaskToDelayedList>
	}
 8009d9a:	46c0      	nop			@ (mov r8, r8)
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	b004      	add	sp, #16
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	46c0      	nop			@ (mov r8, r8)
 8009da4:	200012a0 	.word	0x200012a0

08009da8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d102      	bne.n	8009dc4 <xTaskRemoveFromEventList+0x1c>
 8009dbe:	b672      	cpsid	i
 8009dc0:	46c0      	nop			@ (mov r8, r8)
 8009dc2:	e7fd      	b.n	8009dc0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	3318      	adds	r3, #24
 8009dc8:	0018      	movs	r0, r3
 8009dca:	f7fe ff6e 	bl	8008caa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dce:	4b1f      	ldr	r3, [pc, #124]	@ (8009e4c <xTaskRemoveFromEventList+0xa4>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d11d      	bne.n	8009e12 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	0018      	movs	r0, r3
 8009ddc:	f7fe ff65 	bl	8008caa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de4:	4b1a      	ldr	r3, [pc, #104]	@ (8009e50 <xTaskRemoveFromEventList+0xa8>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d903      	bls.n	8009df4 <xTaskRemoveFromEventList+0x4c>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df0:	4b17      	ldr	r3, [pc, #92]	@ (8009e50 <xTaskRemoveFromEventList+0xa8>)
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df8:	0013      	movs	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	189b      	adds	r3, r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4a14      	ldr	r2, [pc, #80]	@ (8009e54 <xTaskRemoveFromEventList+0xac>)
 8009e02:	189a      	adds	r2, r3, r2
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	3304      	adds	r3, #4
 8009e08:	0019      	movs	r1, r3
 8009e0a:	0010      	movs	r0, r2
 8009e0c:	f7fe fef5 	bl	8008bfa <vListInsertEnd>
 8009e10:	e007      	b.n	8009e22 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	3318      	adds	r3, #24
 8009e16:	001a      	movs	r2, r3
 8009e18:	4b0f      	ldr	r3, [pc, #60]	@ (8009e58 <xTaskRemoveFromEventList+0xb0>)
 8009e1a:	0011      	movs	r1, r2
 8009e1c:	0018      	movs	r0, r3
 8009e1e:	f7fe feec 	bl	8008bfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e26:	4b0d      	ldr	r3, [pc, #52]	@ (8009e5c <xTaskRemoveFromEventList+0xb4>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d905      	bls.n	8009e3c <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e30:	2301      	movs	r3, #1
 8009e32:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e34:	4b0a      	ldr	r3, [pc, #40]	@ (8009e60 <xTaskRemoveFromEventList+0xb8>)
 8009e36:	2201      	movs	r2, #1
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e001      	b.n	8009e40 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009e40:	68fb      	ldr	r3, [r7, #12]
}
 8009e42:	0018      	movs	r0, r3
 8009e44:	46bd      	mov	sp, r7
 8009e46:	b004      	add	sp, #16
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	46c0      	nop			@ (mov r8, r8)
 8009e4c:	2000179c 	.word	0x2000179c
 8009e50:	2000177c 	.word	0x2000177c
 8009e54:	200012a4 	.word	0x200012a4
 8009e58:	20001734 	.word	0x20001734
 8009e5c:	200012a0 	.word	0x200012a0
 8009e60:	20001788 	.word	0x20001788

08009e64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e6c:	4b05      	ldr	r3, [pc, #20]	@ (8009e84 <vTaskInternalSetTimeOutState+0x20>)
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e74:	4b04      	ldr	r3, [pc, #16]	@ (8009e88 <vTaskInternalSetTimeOutState+0x24>)
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	605a      	str	r2, [r3, #4]
}
 8009e7c:	46c0      	nop			@ (mov r8, r8)
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	b002      	add	sp, #8
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	2000178c 	.word	0x2000178c
 8009e88:	20001778 	.word	0x20001778

08009e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <xTaskCheckForTimeOut+0x16>
 8009e9c:	b672      	cpsid	i
 8009e9e:	46c0      	nop			@ (mov r8, r8)
 8009ea0:	e7fd      	b.n	8009e9e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d102      	bne.n	8009eae <xTaskCheckForTimeOut+0x22>
 8009ea8:	b672      	cpsid	i
 8009eaa:	46c0      	nop			@ (mov r8, r8)
 8009eac:	e7fd      	b.n	8009eaa <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 8009eae:	f000 fd9f 	bl	800a9f0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8009f28 <xTaskCheckForTimeOut+0x9c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	d102      	bne.n	8009ed0 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	e024      	b.n	8009f1a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4b15      	ldr	r3, [pc, #84]	@ (8009f2c <xTaskCheckForTimeOut+0xa0>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d007      	beq.n	8009eec <xTaskCheckForTimeOut+0x60>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d302      	bcc.n	8009eec <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	617b      	str	r3, [r7, #20]
 8009eea:	e016      	b.n	8009f1a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d20c      	bcs.n	8009f10 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	1ad2      	subs	r2, r2, r3
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	0018      	movs	r0, r3
 8009f06:	f7ff ffad 	bl	8009e64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	e004      	b.n	8009f1a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f16:	2301      	movs	r3, #1
 8009f18:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8009f1a:	f000 fd7b 	bl	800aa14 <vPortExitCritical>

	return xReturn;
 8009f1e:	697b      	ldr	r3, [r7, #20]
}
 8009f20:	0018      	movs	r0, r3
 8009f22:	46bd      	mov	sp, r7
 8009f24:	b006      	add	sp, #24
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	20001778 	.word	0x20001778
 8009f2c:	2000178c 	.word	0x2000178c

08009f30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f34:	4b02      	ldr	r3, [pc, #8]	@ (8009f40 <vTaskMissedYield+0x10>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	601a      	str	r2, [r3, #0]
}
 8009f3a:	46c0      	nop			@ (mov r8, r8)
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20001788 	.word	0x20001788

08009f44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f4c:	f000 f84e 	bl	8009fec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f50:	4b03      	ldr	r3, [pc, #12]	@ (8009f60 <prvIdleTask+0x1c>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d9f9      	bls.n	8009f4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f58:	f000 fd3a 	bl	800a9d0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009f5c:	e7f6      	b.n	8009f4c <prvIdleTask+0x8>
 8009f5e:	46c0      	nop			@ (mov r8, r8)
 8009f60:	200012a4 	.word	0x200012a4

08009f64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	e00c      	b.n	8009f8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	0013      	movs	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	189b      	adds	r3, r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4a14      	ldr	r2, [pc, #80]	@ (8009fcc <prvInitialiseTaskLists+0x68>)
 8009f7c:	189b      	adds	r3, r3, r2
 8009f7e:	0018      	movs	r0, r3
 8009f80:	f7fe fe12 	bl	8008ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3301      	adds	r3, #1
 8009f88:	607b      	str	r3, [r7, #4]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b37      	cmp	r3, #55	@ 0x37
 8009f8e:	d9ef      	bls.n	8009f70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f90:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd0 <prvInitialiseTaskLists+0x6c>)
 8009f92:	0018      	movs	r0, r3
 8009f94:	f7fe fe08 	bl	8008ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f98:	4b0e      	ldr	r3, [pc, #56]	@ (8009fd4 <prvInitialiseTaskLists+0x70>)
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f7fe fe04 	bl	8008ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd8 <prvInitialiseTaskLists+0x74>)
 8009fa2:	0018      	movs	r0, r3
 8009fa4:	f7fe fe00 	bl	8008ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8009fdc <prvInitialiseTaskLists+0x78>)
 8009faa:	0018      	movs	r0, r3
 8009fac:	f7fe fdfc 	bl	8008ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8009fe0 <prvInitialiseTaskLists+0x7c>)
 8009fb2:	0018      	movs	r0, r3
 8009fb4:	f7fe fdf8 	bl	8008ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe4 <prvInitialiseTaskLists+0x80>)
 8009fba:	4a05      	ldr	r2, [pc, #20]	@ (8009fd0 <prvInitialiseTaskLists+0x6c>)
 8009fbc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8009fe8 <prvInitialiseTaskLists+0x84>)
 8009fc0:	4a04      	ldr	r2, [pc, #16]	@ (8009fd4 <prvInitialiseTaskLists+0x70>)
 8009fc2:	601a      	str	r2, [r3, #0]
}
 8009fc4:	46c0      	nop			@ (mov r8, r8)
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	b002      	add	sp, #8
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	200012a4 	.word	0x200012a4
 8009fd0:	20001704 	.word	0x20001704
 8009fd4:	20001718 	.word	0x20001718
 8009fd8:	20001734 	.word	0x20001734
 8009fdc:	20001748 	.word	0x20001748
 8009fe0:	20001760 	.word	0x20001760
 8009fe4:	2000172c 	.word	0x2000172c
 8009fe8:	20001730 	.word	0x20001730

08009fec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ff2:	e01a      	b.n	800a02a <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009ff4:	f000 fcfc 	bl	800a9f0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ff8:	4b10      	ldr	r3, [pc, #64]	@ (800a03c <prvCheckTasksWaitingTermination+0x50>)
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3304      	adds	r3, #4
 800a004:	0018      	movs	r0, r3
 800a006:	f7fe fe50 	bl	8008caa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a00a:	4b0d      	ldr	r3, [pc, #52]	@ (800a040 <prvCheckTasksWaitingTermination+0x54>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	1e5a      	subs	r2, r3, #1
 800a010:	4b0b      	ldr	r3, [pc, #44]	@ (800a040 <prvCheckTasksWaitingTermination+0x54>)
 800a012:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a014:	4b0b      	ldr	r3, [pc, #44]	@ (800a044 <prvCheckTasksWaitingTermination+0x58>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	1e5a      	subs	r2, r3, #1
 800a01a:	4b0a      	ldr	r3, [pc, #40]	@ (800a044 <prvCheckTasksWaitingTermination+0x58>)
 800a01c:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800a01e:	f000 fcf9 	bl	800aa14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	0018      	movs	r0, r3
 800a026:	f000 f80f 	bl	800a048 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a02a:	4b06      	ldr	r3, [pc, #24]	@ (800a044 <prvCheckTasksWaitingTermination+0x58>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1e0      	bne.n	8009ff4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a032:	46c0      	nop			@ (mov r8, r8)
 800a034:	46c0      	nop			@ (mov r8, r8)
 800a036:	46bd      	mov	sp, r7
 800a038:	b002      	add	sp, #8
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20001748 	.word	0x20001748
 800a040:	20001774 	.word	0x20001774
 800a044:	2000175c 	.word	0x2000175c

0800a048 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3354      	adds	r3, #84	@ 0x54
 800a054:	0018      	movs	r0, r3
 800a056:	f000 ff23 	bl	800aea0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	22a5      	movs	r2, #165	@ 0xa5
 800a05e:	5c9b      	ldrb	r3, [r3, r2]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d109      	bne.n	800a078 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a068:	0018      	movs	r0, r3
 800a06a:	f000 fe09 	bl	800ac80 <vPortFree>
				vPortFree( pxTCB );
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	0018      	movs	r0, r3
 800a072:	f000 fe05 	bl	800ac80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a076:	e011      	b.n	800a09c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	22a5      	movs	r2, #165	@ 0xa5
 800a07c:	5c9b      	ldrb	r3, [r3, r2]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d104      	bne.n	800a08c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	0018      	movs	r0, r3
 800a086:	f000 fdfb 	bl	800ac80 <vPortFree>
	}
 800a08a:	e007      	b.n	800a09c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	22a5      	movs	r2, #165	@ 0xa5
 800a090:	5c9b      	ldrb	r3, [r3, r2]
 800a092:	2b02      	cmp	r3, #2
 800a094:	d002      	beq.n	800a09c <prvDeleteTCB+0x54>
 800a096:	b672      	cpsid	i
 800a098:	46c0      	nop			@ (mov r8, r8)
 800a09a:	e7fd      	b.n	800a098 <prvDeleteTCB+0x50>
	}
 800a09c:	46c0      	nop			@ (mov r8, r8)
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	b002      	add	sp, #8
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d8 <prvResetNextTaskUnblockTime+0x34>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d104      	bne.n	800a0be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0b4:	4b09      	ldr	r3, [pc, #36]	@ (800a0dc <prvResetNextTaskUnblockTime+0x38>)
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4252      	negs	r2, r2
 800a0ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0bc:	e008      	b.n	800a0d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0be:	4b06      	ldr	r3, [pc, #24]	@ (800a0d8 <prvResetNextTaskUnblockTime+0x34>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	4b03      	ldr	r3, [pc, #12]	@ (800a0dc <prvResetNextTaskUnblockTime+0x38>)
 800a0ce:	601a      	str	r2, [r3, #0]
}
 800a0d0:	46c0      	nop			@ (mov r8, r8)
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	b002      	add	sp, #8
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	2000172c 	.word	0x2000172c
 800a0dc:	20001794 	.word	0x20001794

0800a0e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <xTaskGetSchedulerState+0x30>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d102      	bne.n	800a0f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	607b      	str	r3, [r7, #4]
 800a0f2:	e008      	b.n	800a106 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0f4:	4b07      	ldr	r3, [pc, #28]	@ (800a114 <xTaskGetSchedulerState+0x34>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d102      	bne.n	800a102 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	607b      	str	r3, [r7, #4]
 800a100:	e001      	b.n	800a106 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a102:	2300      	movs	r3, #0
 800a104:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a106:	687b      	ldr	r3, [r7, #4]
	}
 800a108:	0018      	movs	r0, r3
 800a10a:	46bd      	mov	sp, r7
 800a10c:	b002      	add	sp, #8
 800a10e:	bd80      	pop	{r7, pc}
 800a110:	20001780 	.word	0x20001780
 800a114:	2000179c 	.word	0x2000179c

0800a118 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d046      	beq.n	800a1bc <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a12e:	4b26      	ldr	r3, [pc, #152]	@ (800a1c8 <xTaskPriorityDisinherit+0xb0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	429a      	cmp	r2, r3
 800a136:	d002      	beq.n	800a13e <xTaskPriorityDisinherit+0x26>
 800a138:	b672      	cpsid	i
 800a13a:	46c0      	nop			@ (mov r8, r8)
 800a13c:	e7fd      	b.n	800a13a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a142:	2b00      	cmp	r3, #0
 800a144:	d102      	bne.n	800a14c <xTaskPriorityDisinherit+0x34>
 800a146:	b672      	cpsid	i
 800a148:	46c0      	nop			@ (mov r8, r8)
 800a14a:	e7fd      	b.n	800a148 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a150:	1e5a      	subs	r2, r3, #1
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a15e:	429a      	cmp	r2, r3
 800a160:	d02c      	beq.n	800a1bc <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a166:	2b00      	cmp	r3, #0
 800a168:	d128      	bne.n	800a1bc <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	3304      	adds	r3, #4
 800a16e:	0018      	movs	r0, r3
 800a170:	f7fe fd9b 	bl	8008caa <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a180:	2238      	movs	r2, #56	@ 0x38
 800a182:	1ad2      	subs	r2, r2, r3
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a18c:	4b0f      	ldr	r3, [pc, #60]	@ (800a1cc <xTaskPriorityDisinherit+0xb4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	429a      	cmp	r2, r3
 800a192:	d903      	bls.n	800a19c <xTaskPriorityDisinherit+0x84>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a198:	4b0c      	ldr	r3, [pc, #48]	@ (800a1cc <xTaskPriorityDisinherit+0xb4>)
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1a0:	0013      	movs	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	189b      	adds	r3, r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	4a09      	ldr	r2, [pc, #36]	@ (800a1d0 <xTaskPriorityDisinherit+0xb8>)
 800a1aa:	189a      	adds	r2, r3, r2
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	0019      	movs	r1, r3
 800a1b2:	0010      	movs	r0, r2
 800a1b4:	f7fe fd21 	bl	8008bfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
	}
 800a1be:	0018      	movs	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	b004      	add	sp, #16
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	46c0      	nop			@ (mov r8, r8)
 800a1c8:	200012a0 	.word	0x200012a0
 800a1cc:	2000177c 	.word	0x2000177c
 800a1d0:	200012a4 	.word	0x200012a4

0800a1d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1de:	4b21      	ldr	r3, [pc, #132]	@ (800a264 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1e4:	4b20      	ldr	r3, [pc, #128]	@ (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f7fe fd5d 	bl	8008caa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	d10b      	bne.n	800a20e <prvAddCurrentTaskToDelayedList+0x3a>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d008      	beq.n	800a20e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	1d1a      	adds	r2, r3, #4
 800a202:	4b1a      	ldr	r3, [pc, #104]	@ (800a26c <prvAddCurrentTaskToDelayedList+0x98>)
 800a204:	0011      	movs	r1, r2
 800a206:	0018      	movs	r0, r3
 800a208:	f7fe fcf7 	bl	8008bfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a20c:	e026      	b.n	800a25c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	18d3      	adds	r3, r2, r3
 800a214:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a216:	4b14      	ldr	r3, [pc, #80]	@ (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	429a      	cmp	r2, r3
 800a224:	d209      	bcs.n	800a23a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a226:	4b12      	ldr	r3, [pc, #72]	@ (800a270 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	4b0f      	ldr	r3, [pc, #60]	@ (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3304      	adds	r3, #4
 800a230:	0019      	movs	r1, r3
 800a232:	0010      	movs	r0, r2
 800a234:	f7fe fd03 	bl	8008c3e <vListInsert>
}
 800a238:	e010      	b.n	800a25c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a23a:	4b0e      	ldr	r3, [pc, #56]	@ (800a274 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	4b0a      	ldr	r3, [pc, #40]	@ (800a268 <prvAddCurrentTaskToDelayedList+0x94>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3304      	adds	r3, #4
 800a244:	0019      	movs	r1, r3
 800a246:	0010      	movs	r0, r2
 800a248:	f7fe fcf9 	bl	8008c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a24c:	4b0a      	ldr	r3, [pc, #40]	@ (800a278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	429a      	cmp	r2, r3
 800a254:	d202      	bcs.n	800a25c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a256:	4b08      	ldr	r3, [pc, #32]	@ (800a278 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	601a      	str	r2, [r3, #0]
}
 800a25c:	46c0      	nop			@ (mov r8, r8)
 800a25e:	46bd      	mov	sp, r7
 800a260:	b004      	add	sp, #16
 800a262:	bd80      	pop	{r7, pc}
 800a264:	20001778 	.word	0x20001778
 800a268:	200012a0 	.word	0x200012a0
 800a26c:	20001760 	.word	0x20001760
 800a270:	20001730 	.word	0x20001730
 800a274:	2000172c 	.word	0x2000172c
 800a278:	20001794 	.word	0x20001794

0800a27c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a27c:	b590      	push	{r4, r7, lr}
 800a27e:	b089      	sub	sp, #36	@ 0x24
 800a280:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a282:	2300      	movs	r3, #0
 800a284:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a286:	f000 fad5 	bl	800a834 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a28a:	4b18      	ldr	r3, [pc, #96]	@ (800a2ec <xTimerCreateTimerTask+0x70>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d020      	beq.n	800a2d4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a292:	2300      	movs	r3, #0
 800a294:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a296:	2300      	movs	r3, #0
 800a298:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a29a:	003a      	movs	r2, r7
 800a29c:	1d39      	adds	r1, r7, #4
 800a29e:	2308      	movs	r3, #8
 800a2a0:	18fb      	adds	r3, r7, r3
 800a2a2:	0018      	movs	r0, r3
 800a2a4:	f7fe fc68 	bl	8008b78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2a8:	683c      	ldr	r4, [r7, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	4910      	ldr	r1, [pc, #64]	@ (800a2f0 <xTimerCreateTimerTask+0x74>)
 800a2b0:	4810      	ldr	r0, [pc, #64]	@ (800a2f4 <xTimerCreateTimerTask+0x78>)
 800a2b2:	9202      	str	r2, [sp, #8]
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	0022      	movs	r2, r4
 800a2be:	f7ff f958 	bl	8009572 <xTaskCreateStatic>
 800a2c2:	0002      	movs	r2, r0
 800a2c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f8 <xTimerCreateTimerTask+0x7c>)
 800a2c6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a2f8 <xTimerCreateTimerTask+0x7c>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d102      	bne.n	800a2e0 <xTimerCreateTimerTask+0x64>
 800a2da:	b672      	cpsid	i
 800a2dc:	46c0      	nop			@ (mov r8, r8)
 800a2de:	e7fd      	b.n	800a2dc <xTimerCreateTimerTask+0x60>
	return xReturn;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
}
 800a2e2:	0018      	movs	r0, r3
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	b005      	add	sp, #20
 800a2e8:	bd90      	pop	{r4, r7, pc}
 800a2ea:	46c0      	nop			@ (mov r8, r8)
 800a2ec:	200017d0 	.word	0x200017d0
 800a2f0:	0800b10c 	.word	0x0800b10c
 800a2f4:	0800a421 	.word	0x0800a421
 800a2f8:	200017d4 	.word	0x200017d4

0800a2fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2fc:	b590      	push	{r4, r7, lr}
 800a2fe:	b08b      	sub	sp, #44	@ 0x2c
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a30a:	2300      	movs	r3, #0
 800a30c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d102      	bne.n	800a31a <xTimerGenericCommand+0x1e>
 800a314:	b672      	cpsid	i
 800a316:	46c0      	nop			@ (mov r8, r8)
 800a318:	e7fd      	b.n	800a316 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a31a:	4b1d      	ldr	r3, [pc, #116]	@ (800a390 <xTimerGenericCommand+0x94>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d030      	beq.n	800a384 <xTimerGenericCommand+0x88>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a322:	2414      	movs	r4, #20
 800a324:	193b      	adds	r3, r7, r4
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a32a:	193b      	adds	r3, r7, r4
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a330:	193b      	adds	r3, r7, r4
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	2b05      	cmp	r3, #5
 800a33a:	dc19      	bgt.n	800a370 <xTimerGenericCommand+0x74>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a33c:	f7ff fed0 	bl	800a0e0 <xTaskGetSchedulerState>
 800a340:	0003      	movs	r3, r0
 800a342:	2b02      	cmp	r3, #2
 800a344:	d109      	bne.n	800a35a <xTimerGenericCommand+0x5e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a346:	4b12      	ldr	r3, [pc, #72]	@ (800a390 <xTimerGenericCommand+0x94>)
 800a348:	6818      	ldr	r0, [r3, #0]
 800a34a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a34c:	1939      	adds	r1, r7, r4
 800a34e:	2300      	movs	r3, #0
 800a350:	f7fe fda0 	bl	8008e94 <xQueueGenericSend>
 800a354:	0003      	movs	r3, r0
 800a356:	627b      	str	r3, [r7, #36]	@ 0x24
 800a358:	e014      	b.n	800a384 <xTimerGenericCommand+0x88>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a35a:	4b0d      	ldr	r3, [pc, #52]	@ (800a390 <xTimerGenericCommand+0x94>)
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	2314      	movs	r3, #20
 800a360:	18f9      	adds	r1, r7, r3
 800a362:	2300      	movs	r3, #0
 800a364:	2200      	movs	r2, #0
 800a366:	f7fe fd95 	bl	8008e94 <xQueueGenericSend>
 800a36a:	0003      	movs	r3, r0
 800a36c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a36e:	e009      	b.n	800a384 <xTimerGenericCommand+0x88>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a370:	4b07      	ldr	r3, [pc, #28]	@ (800a390 <xTimerGenericCommand+0x94>)
 800a372:	6818      	ldr	r0, [r3, #0]
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	2314      	movs	r3, #20
 800a378:	18f9      	adds	r1, r7, r3
 800a37a:	2300      	movs	r3, #0
 800a37c:	f7fe fe52 	bl	8009024 <xQueueGenericSendFromISR>
 800a380:	0003      	movs	r3, r0
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a386:	0018      	movs	r0, r3
 800a388:	46bd      	mov	sp, r7
 800a38a:	b00b      	add	sp, #44	@ 0x2c
 800a38c:	bd90      	pop	{r4, r7, pc}
 800a38e:	46c0      	nop			@ (mov r8, r8)
 800a390:	200017d0 	.word	0x200017d0

0800a394 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af02      	add	r7, sp, #8
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a39e:	4b1f      	ldr	r3, [pc, #124]	@ (800a41c <prvProcessExpiredTimer+0x88>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	0018      	movs	r0, r3
 800a3ae:	f7fe fc7c 	bl	8008caa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2228      	movs	r2, #40	@ 0x28
 800a3b6:	5c9b      	ldrb	r3, [r3, r2]
 800a3b8:	001a      	movs	r2, r3
 800a3ba:	2304      	movs	r3, #4
 800a3bc:	4013      	ands	r3, r2
 800a3be:	d01a      	beq.n	800a3f6 <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	699a      	ldr	r2, [r3, #24]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	18d1      	adds	r1, r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f000 f8c7 	bl	800a560 <prvInsertTimerInActiveList>
 800a3d2:	1e03      	subs	r3, r0, #0
 800a3d4:	d018      	beq.n	800a408 <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	f7ff ff8b 	bl	800a2fc <xTimerGenericCommand>
 800a3e6:	0003      	movs	r3, r0
 800a3e8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <prvProcessExpiredTimer+0x74>
 800a3f0:	b672      	cpsid	i
 800a3f2:	46c0      	nop			@ (mov r8, r8)
 800a3f4:	e7fd      	b.n	800a3f2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2228      	movs	r2, #40	@ 0x28
 800a3fa:	5c9b      	ldrb	r3, [r3, r2]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	4393      	bics	r3, r2
 800a400:	b2d9      	uxtb	r1, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2228      	movs	r2, #40	@ 0x28
 800a406:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a1b      	ldr	r3, [r3, #32]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	0010      	movs	r0, r2
 800a410:	4798      	blx	r3
}
 800a412:	46c0      	nop			@ (mov r8, r8)
 800a414:	46bd      	mov	sp, r7
 800a416:	b004      	add	sp, #16
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	46c0      	nop			@ (mov r8, r8)
 800a41c:	200017c8 	.word	0x200017c8

0800a420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a428:	2308      	movs	r3, #8
 800a42a:	18fb      	adds	r3, r7, r3
 800a42c:	0018      	movs	r0, r3
 800a42e:	f000 f855 	bl	800a4dc <prvGetNextExpireTime>
 800a432:	0003      	movs	r3, r0
 800a434:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a436:	68ba      	ldr	r2, [r7, #8]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	0011      	movs	r1, r2
 800a43c:	0018      	movs	r0, r3
 800a43e:	f000 f805 	bl	800a44c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a442:	f000 f8cf 	bl	800a5e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a446:	46c0      	nop			@ (mov r8, r8)
 800a448:	e7ee      	b.n	800a428 <prvTimerTask+0x8>
	...

0800a44c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a456:	f7ff faaf 	bl	80099b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a45a:	2308      	movs	r3, #8
 800a45c:	18fb      	adds	r3, r7, r3
 800a45e:	0018      	movs	r0, r3
 800a460:	f000 f85e 	bl	800a520 <prvSampleTimeNow>
 800a464:	0003      	movs	r3, r0
 800a466:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d12b      	bne.n	800a4c6 <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10c      	bne.n	800a48e <prvProcessTimerOrBlockTask+0x42>
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d808      	bhi.n	800a48e <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800a47c:	f7ff faa8 	bl	80099d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	0011      	movs	r1, r2
 800a486:	0018      	movs	r0, r3
 800a488:	f7ff ff84 	bl	800a394 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a48c:	e01d      	b.n	800a4ca <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d008      	beq.n	800a4a6 <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a494:	4b0f      	ldr	r3, [pc, #60]	@ (800a4d4 <prvProcessTimerOrBlockTask+0x88>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d101      	bne.n	800a4a2 <prvProcessTimerOrBlockTask+0x56>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <prvProcessTimerOrBlockTask+0x58>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d8 <prvProcessTimerOrBlockTask+0x8c>)
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	0019      	movs	r1, r3
 800a4b4:	f7ff f82a 	bl	800950c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4b8:	f7ff fa8a 	bl	80099d0 <xTaskResumeAll>
 800a4bc:	1e03      	subs	r3, r0, #0
 800a4be:	d104      	bne.n	800a4ca <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800a4c0:	f000 fa86 	bl	800a9d0 <vPortYield>
}
 800a4c4:	e001      	b.n	800a4ca <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800a4c6:	f7ff fa83 	bl	80099d0 <xTaskResumeAll>
}
 800a4ca:	46c0      	nop			@ (mov r8, r8)
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b004      	add	sp, #16
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	46c0      	nop			@ (mov r8, r8)
 800a4d4:	200017cc 	.word	0x200017cc
 800a4d8:	200017d0 	.word	0x200017d0

0800a4dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4e4:	4b0d      	ldr	r3, [pc, #52]	@ (800a51c <prvGetNextExpireTime+0x40>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <prvGetNextExpireTime+0x16>
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	e000      	b.n	800a4f4 <prvGetNextExpireTime+0x18>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d105      	bne.n	800a50c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a500:	4b06      	ldr	r3, [pc, #24]	@ (800a51c <prvGetNextExpireTime+0x40>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	e001      	b.n	800a510 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a510:	68fb      	ldr	r3, [r7, #12]
}
 800a512:	0018      	movs	r0, r3
 800a514:	46bd      	mov	sp, r7
 800a516:	b004      	add	sp, #16
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	46c0      	nop			@ (mov r8, r8)
 800a51c:	200017c8 	.word	0x200017c8

0800a520 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a528:	f7ff fade 	bl	8009ae8 <xTaskGetTickCount>
 800a52c:	0003      	movs	r3, r0
 800a52e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800a530:	4b0a      	ldr	r3, [pc, #40]	@ (800a55c <prvSampleTimeNow+0x3c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	429a      	cmp	r2, r3
 800a538:	d205      	bcs.n	800a546 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800a53a:	f000 f91d 	bl	800a778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	e002      	b.n	800a54c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a54c:	4b03      	ldr	r3, [pc, #12]	@ (800a55c <prvSampleTimeNow+0x3c>)
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800a552:	68fb      	ldr	r3, [r7, #12]
}
 800a554:	0018      	movs	r0, r3
 800a556:	46bd      	mov	sp, r7
 800a558:	b004      	add	sp, #16
 800a55a:	bd80      	pop	{r7, pc}
 800a55c:	200017d8 	.word	0x200017d8

0800a560 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b086      	sub	sp, #24
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a56e:	2300      	movs	r3, #0
 800a570:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	429a      	cmp	r2, r3
 800a584:	d812      	bhi.n	800a5ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	1ad2      	subs	r2, r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	429a      	cmp	r2, r3
 800a592:	d302      	bcc.n	800a59a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a594:	2301      	movs	r3, #1
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e01b      	b.n	800a5d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a59a:	4b10      	ldr	r3, [pc, #64]	@ (800a5dc <prvInsertTimerInActiveList+0x7c>)
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	0019      	movs	r1, r3
 800a5a4:	0010      	movs	r0, r2
 800a5a6:	f7fe fb4a 	bl	8008c3e <vListInsert>
 800a5aa:	e012      	b.n	800a5d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d206      	bcs.n	800a5c2 <prvInsertTimerInActiveList+0x62>
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d302      	bcc.n	800a5c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	e007      	b.n	800a5d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5c2:	4b07      	ldr	r3, [pc, #28]	@ (800a5e0 <prvInsertTimerInActiveList+0x80>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	0019      	movs	r1, r3
 800a5cc:	0010      	movs	r0, r2
 800a5ce:	f7fe fb36 	bl	8008c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5d2:	697b      	ldr	r3, [r7, #20]
}
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	b006      	add	sp, #24
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	200017cc 	.word	0x200017cc
 800a5e0:	200017c8 	.word	0x200017c8

0800a5e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5e4:	b590      	push	{r4, r7, lr}
 800a5e6:	b08d      	sub	sp, #52	@ 0x34
 800a5e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5ea:	e0b1      	b.n	800a750 <prvProcessReceivedCommands+0x16c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	18bb      	adds	r3, r7, r2
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	da10      	bge.n	800a618 <prvProcessReceivedCommands+0x34>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5f6:	18bb      	adds	r3, r7, r2
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	627b      	str	r3, [r7, #36]	@ 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d102      	bne.n	800a608 <prvProcessReceivedCommands+0x24>
 800a602:	b672      	cpsid	i
 800a604:	46c0      	nop			@ (mov r8, r8)
 800a606:	e7fd      	b.n	800a604 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60e:	6858      	ldr	r0, [r3, #4]
 800a610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	0019      	movs	r1, r3
 800a616:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a618:	2208      	movs	r2, #8
 800a61a:	18bb      	adds	r3, r7, r2
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	da00      	bge.n	800a624 <prvProcessReceivedCommands+0x40>
 800a622:	e095      	b.n	800a750 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a624:	18bb      	adds	r3, r7, r2
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a62a:	6a3b      	ldr	r3, [r7, #32]
 800a62c:	695b      	ldr	r3, [r3, #20]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d004      	beq.n	800a63c <prvProcessReceivedCommands+0x58>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	3304      	adds	r3, #4
 800a636:	0018      	movs	r0, r3
 800a638:	f7fe fb37 	bl	8008caa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a63c:	1d3b      	adds	r3, r7, #4
 800a63e:	0018      	movs	r0, r3
 800a640:	f7ff ff6e 	bl	800a520 <prvSampleTimeNow>
 800a644:	0003      	movs	r3, r0
 800a646:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 800a648:	2308      	movs	r3, #8
 800a64a:	18fb      	adds	r3, r7, r3
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b09      	cmp	r3, #9
 800a650:	d900      	bls.n	800a654 <prvProcessReceivedCommands+0x70>
 800a652:	e07a      	b.n	800a74a <prvProcessReceivedCommands+0x166>
 800a654:	009a      	lsls	r2, r3, #2
 800a656:	4b46      	ldr	r3, [pc, #280]	@ (800a770 <prvProcessReceivedCommands+0x18c>)
 800a658:	18d3      	adds	r3, r2, r3
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	2228      	movs	r2, #40	@ 0x28
 800a662:	5c9b      	ldrb	r3, [r3, r2]
 800a664:	2201      	movs	r2, #1
 800a666:	4313      	orrs	r3, r2
 800a668:	b2d9      	uxtb	r1, r3
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	2228      	movs	r2, #40	@ 0x28
 800a66e:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a670:	2408      	movs	r4, #8
 800a672:	193b      	adds	r3, r7, r4
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	18d1      	adds	r1, r2, r3
 800a67c:	193b      	adds	r3, r7, r4
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	69fa      	ldr	r2, [r7, #28]
 800a682:	6a38      	ldr	r0, [r7, #32]
 800a684:	f7ff ff6c 	bl	800a560 <prvInsertTimerInActiveList>
 800a688:	1e03      	subs	r3, r0, #0
 800a68a:	d060      	beq.n	800a74e <prvProcessReceivedCommands+0x16a>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	6a1b      	ldr	r3, [r3, #32]
 800a690:	6a3a      	ldr	r2, [r7, #32]
 800a692:	0010      	movs	r0, r2
 800a694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	2228      	movs	r2, #40	@ 0x28
 800a69a:	5c9b      	ldrb	r3, [r3, r2]
 800a69c:	001a      	movs	r2, r3
 800a69e:	2304      	movs	r3, #4
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	d054      	beq.n	800a74e <prvProcessReceivedCommands+0x16a>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6a4:	193b      	adds	r3, r7, r4
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	18d2      	adds	r2, r2, r3
 800a6ae:	6a38      	ldr	r0, [r7, #32]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	2100      	movs	r1, #0
 800a6b8:	f7ff fe20 	bl	800a2fc <xTimerGenericCommand>
 800a6bc:	0003      	movs	r3, r0
 800a6be:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d143      	bne.n	800a74e <prvProcessReceivedCommands+0x16a>
 800a6c6:	b672      	cpsid	i
 800a6c8:	46c0      	nop			@ (mov r8, r8)
 800a6ca:	e7fd      	b.n	800a6c8 <prvProcessReceivedCommands+0xe4>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	2228      	movs	r2, #40	@ 0x28
 800a6d0:	5c9b      	ldrb	r3, [r3, r2]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	4393      	bics	r3, r2
 800a6d6:	b2d9      	uxtb	r1, r3
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	2228      	movs	r2, #40	@ 0x28
 800a6dc:	5499      	strb	r1, [r3, r2]
					break;
 800a6de:	e037      	b.n	800a750 <prvProcessReceivedCommands+0x16c>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	2228      	movs	r2, #40	@ 0x28
 800a6e4:	5c9b      	ldrb	r3, [r3, r2]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	b2d9      	uxtb	r1, r3
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	2228      	movs	r2, #40	@ 0x28
 800a6f0:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6f2:	2308      	movs	r3, #8
 800a6f4:	18fb      	adds	r3, r7, r3
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	6a3b      	ldr	r3, [r7, #32]
 800a6fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <prvProcessReceivedCommands+0x126>
 800a704:	b672      	cpsid	i
 800a706:	46c0      	nop			@ (mov r8, r8)
 800a708:	e7fd      	b.n	800a706 <prvProcessReceivedCommands+0x122>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	699a      	ldr	r2, [r3, #24]
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	18d1      	adds	r1, r2, r3
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	69fa      	ldr	r2, [r7, #28]
 800a716:	6a38      	ldr	r0, [r7, #32]
 800a718:	f7ff ff22 	bl	800a560 <prvInsertTimerInActiveList>
					break;
 800a71c:	e018      	b.n	800a750 <prvProcessReceivedCommands+0x16c>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	2228      	movs	r2, #40	@ 0x28
 800a722:	5c9b      	ldrb	r3, [r3, r2]
 800a724:	001a      	movs	r2, r3
 800a726:	2302      	movs	r3, #2
 800a728:	4013      	ands	r3, r2
 800a72a:	d104      	bne.n	800a736 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	0018      	movs	r0, r3
 800a730:	f000 faa6 	bl	800ac80 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a734:	e00c      	b.n	800a750 <prvProcessReceivedCommands+0x16c>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	2228      	movs	r2, #40	@ 0x28
 800a73a:	5c9b      	ldrb	r3, [r3, r2]
 800a73c:	2201      	movs	r2, #1
 800a73e:	4393      	bics	r3, r2
 800a740:	b2d9      	uxtb	r1, r3
 800a742:	6a3b      	ldr	r3, [r7, #32]
 800a744:	2228      	movs	r2, #40	@ 0x28
 800a746:	5499      	strb	r1, [r3, r2]
					break;
 800a748:	e002      	b.n	800a750 <prvProcessReceivedCommands+0x16c>

				default	:
					/* Don't expect to get here. */
					break;
 800a74a:	46c0      	nop			@ (mov r8, r8)
 800a74c:	e000      	b.n	800a750 <prvProcessReceivedCommands+0x16c>
					break;
 800a74e:	46c0      	nop			@ (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a750:	4b08      	ldr	r3, [pc, #32]	@ (800a774 <prvProcessReceivedCommands+0x190>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2208      	movs	r2, #8
 800a756:	18b9      	adds	r1, r7, r2
 800a758:	2200      	movs	r2, #0
 800a75a:	0018      	movs	r0, r3
 800a75c:	f7fe fcd9 	bl	8009112 <xQueueReceive>
 800a760:	1e03      	subs	r3, r0, #0
 800a762:	d000      	beq.n	800a766 <prvProcessReceivedCommands+0x182>
 800a764:	e742      	b.n	800a5ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a766:	46c0      	nop			@ (mov r8, r8)
 800a768:	46c0      	nop			@ (mov r8, r8)
 800a76a:	46bd      	mov	sp, r7
 800a76c:	b00b      	add	sp, #44	@ 0x2c
 800a76e:	bd90      	pop	{r4, r7, pc}
 800a770:	0800b29c 	.word	0x0800b29c
 800a774:	200017d0 	.word	0x200017d0

0800a778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a77e:	e042      	b.n	800a806 <prvSwitchTimerLists+0x8e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a780:	4b2a      	ldr	r3, [pc, #168]	@ (800a82c <prvSwitchTimerLists+0xb4>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a78a:	4b28      	ldr	r3, [pc, #160]	@ (800a82c <prvSwitchTimerLists+0xb4>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	3304      	adds	r3, #4
 800a798:	0018      	movs	r0, r3
 800a79a:	f7fe fa86 	bl	8008caa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	0010      	movs	r0, r2
 800a7a6:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2228      	movs	r2, #40	@ 0x28
 800a7ac:	5c9b      	ldrb	r3, [r3, r2]
 800a7ae:	001a      	movs	r2, r3
 800a7b0:	2304      	movs	r3, #4
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	d027      	beq.n	800a806 <prvSwitchTimerLists+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	699b      	ldr	r3, [r3, #24]
 800a7ba:	693a      	ldr	r2, [r7, #16]
 800a7bc:	18d3      	adds	r3, r2, r3
 800a7be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d90e      	bls.n	800a7e6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a7d4:	4b15      	ldr	r3, [pc, #84]	@ (800a82c <prvSwitchTimerLists+0xb4>)
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	0019      	movs	r1, r3
 800a7de:	0010      	movs	r0, r2
 800a7e0:	f7fe fa2d 	bl	8008c3e <vListInsert>
 800a7e4:	e00f      	b.n	800a806 <prvSwitchTimerLists+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7e6:	693a      	ldr	r2, [r7, #16]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	f7ff fd83 	bl	800a2fc <xTimerGenericCommand>
 800a7f6:	0003      	movs	r3, r0
 800a7f8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d102      	bne.n	800a806 <prvSwitchTimerLists+0x8e>
 800a800:	b672      	cpsid	i
 800a802:	46c0      	nop			@ (mov r8, r8)
 800a804:	e7fd      	b.n	800a802 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a806:	4b09      	ldr	r3, [pc, #36]	@ (800a82c <prvSwitchTimerLists+0xb4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1b7      	bne.n	800a780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a810:	4b06      	ldr	r3, [pc, #24]	@ (800a82c <prvSwitchTimerLists+0xb4>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a816:	4b06      	ldr	r3, [pc, #24]	@ (800a830 <prvSwitchTimerLists+0xb8>)
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	4b04      	ldr	r3, [pc, #16]	@ (800a82c <prvSwitchTimerLists+0xb4>)
 800a81c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800a81e:	4b04      	ldr	r3, [pc, #16]	@ (800a830 <prvSwitchTimerLists+0xb8>)
 800a820:	697a      	ldr	r2, [r7, #20]
 800a822:	601a      	str	r2, [r3, #0]
}
 800a824:	46c0      	nop			@ (mov r8, r8)
 800a826:	46bd      	mov	sp, r7
 800a828:	b006      	add	sp, #24
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	200017c8 	.word	0x200017c8
 800a830:	200017cc 	.word	0x200017cc

0800a834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a83a:	f000 f8d9 	bl	800a9f0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a83e:	4b16      	ldr	r3, [pc, #88]	@ (800a898 <prvCheckForValidListAndQueue+0x64>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d123      	bne.n	800a88e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 800a846:	4b15      	ldr	r3, [pc, #84]	@ (800a89c <prvCheckForValidListAndQueue+0x68>)
 800a848:	0018      	movs	r0, r3
 800a84a:	f7fe f9ad 	bl	8008ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a84e:	4b14      	ldr	r3, [pc, #80]	@ (800a8a0 <prvCheckForValidListAndQueue+0x6c>)
 800a850:	0018      	movs	r0, r3
 800a852:	f7fe f9a9 	bl	8008ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a856:	4b13      	ldr	r3, [pc, #76]	@ (800a8a4 <prvCheckForValidListAndQueue+0x70>)
 800a858:	4a10      	ldr	r2, [pc, #64]	@ (800a89c <prvCheckForValidListAndQueue+0x68>)
 800a85a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a85c:	4b12      	ldr	r3, [pc, #72]	@ (800a8a8 <prvCheckForValidListAndQueue+0x74>)
 800a85e:	4a10      	ldr	r2, [pc, #64]	@ (800a8a0 <prvCheckForValidListAndQueue+0x6c>)
 800a860:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a862:	4b12      	ldr	r3, [pc, #72]	@ (800a8ac <prvCheckForValidListAndQueue+0x78>)
 800a864:	4a12      	ldr	r2, [pc, #72]	@ (800a8b0 <prvCheckForValidListAndQueue+0x7c>)
 800a866:	2100      	movs	r1, #0
 800a868:	9100      	str	r1, [sp, #0]
 800a86a:	2110      	movs	r1, #16
 800a86c:	200a      	movs	r0, #10
 800a86e:	f7fe fa99 	bl	8008da4 <xQueueGenericCreateStatic>
 800a872:	0002      	movs	r2, r0
 800a874:	4b08      	ldr	r3, [pc, #32]	@ (800a898 <prvCheckForValidListAndQueue+0x64>)
 800a876:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a878:	4b07      	ldr	r3, [pc, #28]	@ (800a898 <prvCheckForValidListAndQueue+0x64>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d006      	beq.n	800a88e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a880:	4b05      	ldr	r3, [pc, #20]	@ (800a898 <prvCheckForValidListAndQueue+0x64>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a0b      	ldr	r2, [pc, #44]	@ (800a8b4 <prvCheckForValidListAndQueue+0x80>)
 800a886:	0011      	movs	r1, r2
 800a888:	0018      	movs	r0, r3
 800a88a:	f7fe fe17 	bl	80094bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a88e:	f000 f8c1 	bl	800aa14 <vPortExitCritical>
}
 800a892:	46c0      	nop			@ (mov r8, r8)
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	200017d0 	.word	0x200017d0
 800a89c:	200017a0 	.word	0x200017a0
 800a8a0:	200017b4 	.word	0x200017b4
 800a8a4:	200017c8 	.word	0x200017c8
 800a8a8:	200017cc 	.word	0x200017cc
 800a8ac:	2000187c 	.word	0x2000187c
 800a8b0:	200017dc 	.word	0x200017dc
 800a8b4:	0800b114 	.word	0x0800b114

0800a8b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3b04      	subs	r3, #4
 800a8c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2280      	movs	r2, #128	@ 0x80
 800a8ce:	0452      	lsls	r2, r2, #17
 800a8d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3b04      	subs	r3, #4
 800a8d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800a8d8:	68ba      	ldr	r2, [r7, #8]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3b04      	subs	r3, #4
 800a8e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8e4:	4a08      	ldr	r2, [pc, #32]	@ (800a908 <pxPortInitialiseStack+0x50>)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	3b14      	subs	r3, #20
 800a8ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	3b20      	subs	r3, #32
 800a8fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
}
 800a8fe:	0018      	movs	r0, r3
 800a900:	46bd      	mov	sp, r7
 800a902:	b004      	add	sp, #16
 800a904:	bd80      	pop	{r7, pc}
 800a906:	46c0      	nop			@ (mov r8, r8)
 800a908:	0800a90d 	.word	0x0800a90d

0800a90c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a912:	2300      	movs	r3, #0
 800a914:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a916:	4b08      	ldr	r3, [pc, #32]	@ (800a938 <prvTaskExitError+0x2c>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3301      	adds	r3, #1
 800a91c:	d002      	beq.n	800a924 <prvTaskExitError+0x18>
 800a91e:	b672      	cpsid	i
 800a920:	46c0      	nop			@ (mov r8, r8)
 800a922:	e7fd      	b.n	800a920 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800a924:	b672      	cpsid	i
	while( ulDummy == 0 )
 800a926:	46c0      	nop			@ (mov r8, r8)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0fc      	beq.n	800a928 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a92e:	46c0      	nop			@ (mov r8, r8)
 800a930:	46c0      	nop			@ (mov r8, r8)
 800a932:	46bd      	mov	sp, r7
 800a934:	b002      	add	sp, #8
 800a936:	bd80      	pop	{r7, pc}
 800a938:	200000e0 	.word	0x200000e0

0800a93c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800a940:	46c0      	nop			@ (mov r8, r8)
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
	...

0800a950 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800a950:	4a0b      	ldr	r2, [pc, #44]	@ (800a980 <pxCurrentTCBConst2>)
 800a952:	6813      	ldr	r3, [r2, #0]
 800a954:	6818      	ldr	r0, [r3, #0]
 800a956:	3020      	adds	r0, #32
 800a958:	f380 8809 	msr	PSP, r0
 800a95c:	2002      	movs	r0, #2
 800a95e:	f380 8814 	msr	CONTROL, r0
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800a968:	46ae      	mov	lr, r5
 800a96a:	bc08      	pop	{r3}
 800a96c:	bc04      	pop	{r2}
 800a96e:	b662      	cpsie	i
 800a970:	4718      	bx	r3
 800a972:	46c0      	nop			@ (mov r8, r8)
 800a974:	46c0      	nop			@ (mov r8, r8)
 800a976:	46c0      	nop			@ (mov r8, r8)
 800a978:	46c0      	nop			@ (mov r8, r8)
 800a97a:	46c0      	nop			@ (mov r8, r8)
 800a97c:	46c0      	nop			@ (mov r8, r8)
 800a97e:	46c0      	nop			@ (mov r8, r8)

0800a980 <pxCurrentTCBConst2>:
 800a980:	200012a0 	.word	0x200012a0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800a984:	46c0      	nop			@ (mov r8, r8)
 800a986:	46c0      	nop			@ (mov r8, r8)

0800a988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a98c:	4b0e      	ldr	r3, [pc, #56]	@ (800a9c8 <xPortStartScheduler+0x40>)
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c8 <xPortStartScheduler+0x40>)
 800a992:	21ff      	movs	r1, #255	@ 0xff
 800a994:	0409      	lsls	r1, r1, #16
 800a996:	430a      	orrs	r2, r1
 800a998:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a99a:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c8 <xPortStartScheduler+0x40>)
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	4b0a      	ldr	r3, [pc, #40]	@ (800a9c8 <xPortStartScheduler+0x40>)
 800a9a0:	21ff      	movs	r1, #255	@ 0xff
 800a9a2:	0609      	lsls	r1, r1, #24
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a9a8:	f000 f898 	bl	800aadc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a9ac:	4b07      	ldr	r3, [pc, #28]	@ (800a9cc <xPortStartScheduler+0x44>)
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800a9b2:	f7ff ffcd 	bl	800a950 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9b6:	f7ff f955 	bl	8009c64 <vTaskSwitchContext>
	prvTaskExitError();
 800a9ba:	f7ff ffa7 	bl	800a90c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	0018      	movs	r0, r3
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	46c0      	nop			@ (mov r8, r8)
 800a9c8:	e000ed20 	.word	0xe000ed20
 800a9cc:	200000e0 	.word	0x200000e0

0800a9d0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a9d4:	4b05      	ldr	r3, [pc, #20]	@ (800a9ec <vPortYield+0x1c>)
 800a9d6:	2280      	movs	r2, #128	@ 0x80
 800a9d8:	0552      	lsls	r2, r2, #21
 800a9da:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800a9dc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800a9e0:	f3bf 8f6f 	isb	sy
}
 800a9e4:	46c0      	nop			@ (mov r8, r8)
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	46c0      	nop			@ (mov r8, r8)
 800a9ec:	e000ed04 	.word	0xe000ed04

0800a9f0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800a9f4:	b672      	cpsid	i
	uxCriticalNesting++;
 800a9f6:	4b06      	ldr	r3, [pc, #24]	@ (800aa10 <vPortEnterCritical+0x20>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	1c5a      	adds	r2, r3, #1
 800a9fc:	4b04      	ldr	r3, [pc, #16]	@ (800aa10 <vPortEnterCritical+0x20>)
 800a9fe:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800aa00:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800aa04:	f3bf 8f6f 	isb	sy
}
 800aa08:	46c0      	nop			@ (mov r8, r8)
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	46c0      	nop			@ (mov r8, r8)
 800aa10:	200000e0 	.word	0x200000e0

0800aa14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa18:	4b09      	ldr	r3, [pc, #36]	@ (800aa40 <vPortExitCritical+0x2c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d102      	bne.n	800aa26 <vPortExitCritical+0x12>
 800aa20:	b672      	cpsid	i
 800aa22:	46c0      	nop			@ (mov r8, r8)
 800aa24:	e7fd      	b.n	800aa22 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800aa26:	4b06      	ldr	r3, [pc, #24]	@ (800aa40 <vPortExitCritical+0x2c>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	1e5a      	subs	r2, r3, #1
 800aa2c:	4b04      	ldr	r3, [pc, #16]	@ (800aa40 <vPortExitCritical+0x2c>)
 800aa2e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800aa30:	4b03      	ldr	r3, [pc, #12]	@ (800aa40 <vPortExitCritical+0x2c>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d100      	bne.n	800aa3a <vPortExitCritical+0x26>
	{
		portENABLE_INTERRUPTS();
 800aa38:	b662      	cpsie	i
	}
}
 800aa3a:	46c0      	nop			@ (mov r8, r8)
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	200000e0 	.word	0x200000e0

0800aa44 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800aa44:	f3ef 8010 	mrs	r0, PRIMASK
 800aa48:	b672      	cpsid	i
 800aa4a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800aa4c:	46c0      	nop			@ (mov r8, r8)
 800aa4e:	0018      	movs	r0, r3

0800aa50 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800aa50:	f380 8810 	msr	PRIMASK, r0
 800aa54:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800aa56:	46c0      	nop			@ (mov r8, r8)
	...

0800aa60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa60:	f3ef 8009 	mrs	r0, PSP
 800aa64:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa0 <pxCurrentTCBConst>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	3820      	subs	r0, #32
 800aa6a:	6010      	str	r0, [r2, #0]
 800aa6c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800aa6e:	4644      	mov	r4, r8
 800aa70:	464d      	mov	r5, r9
 800aa72:	4656      	mov	r6, sl
 800aa74:	465f      	mov	r7, fp
 800aa76:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800aa78:	b508      	push	{r3, lr}
 800aa7a:	b672      	cpsid	i
 800aa7c:	f7ff f8f2 	bl	8009c64 <vTaskSwitchContext>
 800aa80:	b662      	cpsie	i
 800aa82:	bc0c      	pop	{r2, r3}
 800aa84:	6811      	ldr	r1, [r2, #0]
 800aa86:	6808      	ldr	r0, [r1, #0]
 800aa88:	3010      	adds	r0, #16
 800aa8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800aa8c:	46a0      	mov	r8, r4
 800aa8e:	46a9      	mov	r9, r5
 800aa90:	46b2      	mov	sl, r6
 800aa92:	46bb      	mov	fp, r7
 800aa94:	f380 8809 	msr	PSP, r0
 800aa98:	3820      	subs	r0, #32
 800aa9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800aa9c:	4718      	bx	r3
 800aa9e:	46c0      	nop			@ (mov r8, r8)

0800aaa0 <pxCurrentTCBConst>:
 800aaa0:	200012a0 	.word	0x200012a0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800aaa4:	46c0      	nop			@ (mov r8, r8)
 800aaa6:	46c0      	nop			@ (mov r8, r8)

0800aaa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaae:	f7ff ffc9 	bl	800aa44 <ulSetInterruptMaskFromISR>
 800aab2:	0003      	movs	r3, r0
 800aab4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aab6:	f7ff f825 	bl	8009b04 <xTaskIncrementTick>
 800aaba:	1e03      	subs	r3, r0, #0
 800aabc:	d003      	beq.n	800aac6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aabe:	4b06      	ldr	r3, [pc, #24]	@ (800aad8 <xPortSysTickHandler+0x30>)
 800aac0:	2280      	movs	r2, #128	@ 0x80
 800aac2:	0552      	lsls	r2, r2, #21
 800aac4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	0018      	movs	r0, r3
 800aaca:	f7ff ffc1 	bl	800aa50 <vClearInterruptMaskFromISR>
}
 800aace:	46c0      	nop			@ (mov r8, r8)
 800aad0:	46bd      	mov	sp, r7
 800aad2:	b002      	add	sp, #8
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	46c0      	nop			@ (mov r8, r8)
 800aad8:	e000ed04 	.word	0xe000ed04

0800aadc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aae0:	4b0b      	ldr	r3, [pc, #44]	@ (800ab10 <vPortSetupTimerInterrupt+0x34>)
 800aae2:	2200      	movs	r2, #0
 800aae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aae6:	4b0b      	ldr	r3, [pc, #44]	@ (800ab14 <vPortSetupTimerInterrupt+0x38>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aaec:	4b0a      	ldr	r3, [pc, #40]	@ (800ab18 <vPortSetupTimerInterrupt+0x3c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	22fa      	movs	r2, #250	@ 0xfa
 800aaf2:	0091      	lsls	r1, r2, #2
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	f7f5 fb07 	bl	8000108 <__udivsi3>
 800aafa:	0003      	movs	r3, r0
 800aafc:	001a      	movs	r2, r3
 800aafe:	4b07      	ldr	r3, [pc, #28]	@ (800ab1c <vPortSetupTimerInterrupt+0x40>)
 800ab00:	3a01      	subs	r2, #1
 800ab02:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800ab04:	4b02      	ldr	r3, [pc, #8]	@ (800ab10 <vPortSetupTimerInterrupt+0x34>)
 800ab06:	2207      	movs	r2, #7
 800ab08:	601a      	str	r2, [r3, #0]
}
 800ab0a:	46c0      	nop			@ (mov r8, r8)
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	e000e010 	.word	0xe000e010
 800ab14:	e000e018 	.word	0xe000e018
 800ab18:	200000c0 	.word	0x200000c0
 800ab1c:	e000e014 	.word	0xe000e014

0800ab20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800ab2c:	f7fe ff44 	bl	80099b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab30:	4b4d      	ldr	r3, [pc, #308]	@ (800ac68 <pvPortMalloc+0x148>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab38:	f000 f8f2 	bl	800ad20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab3c:	4b4b      	ldr	r3, [pc, #300]	@ (800ac6c <pvPortMalloc+0x14c>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	4013      	ands	r3, r2
 800ab44:	d000      	beq.n	800ab48 <pvPortMalloc+0x28>
 800ab46:	e080      	b.n	800ac4a <pvPortMalloc+0x12a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d013      	beq.n	800ab76 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800ab4e:	2208      	movs	r2, #8
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	189b      	adds	r3, r3, r2
 800ab54:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2207      	movs	r2, #7
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	d00b      	beq.n	800ab76 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2207      	movs	r2, #7
 800ab62:	4393      	bics	r3, r2
 800ab64:	3308      	adds	r3, #8
 800ab66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2207      	movs	r2, #7
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	d002      	beq.n	800ab76 <pvPortMalloc+0x56>
 800ab70:	b672      	cpsid	i
 800ab72:	46c0      	nop			@ (mov r8, r8)
 800ab74:	e7fd      	b.n	800ab72 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d066      	beq.n	800ac4a <pvPortMalloc+0x12a>
 800ab7c:	4b3c      	ldr	r3, [pc, #240]	@ (800ac70 <pvPortMalloc+0x150>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d861      	bhi.n	800ac4a <pvPortMalloc+0x12a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ab86:	4b3b      	ldr	r3, [pc, #236]	@ (800ac74 <pvPortMalloc+0x154>)
 800ab88:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800ab8a:	4b3a      	ldr	r3, [pc, #232]	@ (800ac74 <pvPortMalloc+0x154>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab90:	e004      	b.n	800ab9c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d903      	bls.n	800abae <pvPortMalloc+0x8e>
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1f1      	bne.n	800ab92 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abae:	4b2e      	ldr	r3, [pc, #184]	@ (800ac68 <pvPortMalloc+0x148>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d048      	beq.n	800ac4a <pvPortMalloc+0x12a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2208      	movs	r2, #8
 800abbe:	189b      	adds	r3, r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	685a      	ldr	r2, [r3, #4]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	1ad2      	subs	r2, r2, r3
 800abd2:	2308      	movs	r3, #8
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d917      	bls.n	800ac0a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	18d3      	adds	r3, r2, r3
 800abe0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	2207      	movs	r2, #7
 800abe6:	4013      	ands	r3, r2
 800abe8:	d002      	beq.n	800abf0 <pvPortMalloc+0xd0>
 800abea:	b672      	cpsid	i
 800abec:	46c0      	nop			@ (mov r8, r8)
 800abee:	e7fd      	b.n	800abec <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	685a      	ldr	r2, [r3, #4]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	1ad2      	subs	r2, r2, r3
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	0018      	movs	r0, r3
 800ac06:	f000 f8eb 	bl	800ade0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac0a:	4b19      	ldr	r3, [pc, #100]	@ (800ac70 <pvPortMalloc+0x150>)
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	1ad2      	subs	r2, r2, r3
 800ac14:	4b16      	ldr	r3, [pc, #88]	@ (800ac70 <pvPortMalloc+0x150>)
 800ac16:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac18:	4b15      	ldr	r3, [pc, #84]	@ (800ac70 <pvPortMalloc+0x150>)
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	4b16      	ldr	r3, [pc, #88]	@ (800ac78 <pvPortMalloc+0x158>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d203      	bcs.n	800ac2c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac24:	4b12      	ldr	r3, [pc, #72]	@ (800ac70 <pvPortMalloc+0x150>)
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	4b13      	ldr	r3, [pc, #76]	@ (800ac78 <pvPortMalloc+0x158>)
 800ac2a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	685a      	ldr	r2, [r3, #4]
 800ac30:	4b0e      	ldr	r3, [pc, #56]	@ (800ac6c <pvPortMalloc+0x14c>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	431a      	orrs	r2, r3
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac40:	4b0e      	ldr	r3, [pc, #56]	@ (800ac7c <pvPortMalloc+0x15c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	1c5a      	adds	r2, r3, #1
 800ac46:	4b0d      	ldr	r3, [pc, #52]	@ (800ac7c <pvPortMalloc+0x15c>)
 800ac48:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac4a:	f7fe fec1 	bl	80099d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2207      	movs	r2, #7
 800ac52:	4013      	ands	r3, r2
 800ac54:	d002      	beq.n	800ac5c <pvPortMalloc+0x13c>
 800ac56:	b672      	cpsid	i
 800ac58:	46c0      	nop			@ (mov r8, r8)
 800ac5a:	e7fd      	b.n	800ac58 <pvPortMalloc+0x138>
	return pvReturn;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
}
 800ac5e:	0018      	movs	r0, r3
 800ac60:	46bd      	mov	sp, r7
 800ac62:	b006      	add	sp, #24
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	46c0      	nop			@ (mov r8, r8)
 800ac68:	200024d4 	.word	0x200024d4
 800ac6c:	200024e8 	.word	0x200024e8
 800ac70:	200024d8 	.word	0x200024d8
 800ac74:	200024cc 	.word	0x200024cc
 800ac78:	200024dc 	.word	0x200024dc
 800ac7c:	200024e0 	.word	0x200024e0

0800ac80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d03c      	beq.n	800ad0c <vPortFree+0x8c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ac92:	2308      	movs	r3, #8
 800ac94:	425b      	negs	r3, r3
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	18d3      	adds	r3, r2, r3
 800ac9a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	685a      	ldr	r2, [r3, #4]
 800aca4:	4b1b      	ldr	r3, [pc, #108]	@ (800ad14 <vPortFree+0x94>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4013      	ands	r3, r2
 800acaa:	d102      	bne.n	800acb2 <vPortFree+0x32>
 800acac:	b672      	cpsid	i
 800acae:	46c0      	nop			@ (mov r8, r8)
 800acb0:	e7fd      	b.n	800acae <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d002      	beq.n	800acc0 <vPortFree+0x40>
 800acba:	b672      	cpsid	i
 800acbc:	46c0      	nop			@ (mov r8, r8)
 800acbe:	e7fd      	b.n	800acbc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	4b13      	ldr	r3, [pc, #76]	@ (800ad14 <vPortFree+0x94>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4013      	ands	r3, r2
 800acca:	d01f      	beq.n	800ad0c <vPortFree+0x8c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d11b      	bne.n	800ad0c <vPortFree+0x8c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	685a      	ldr	r2, [r3, #4]
 800acd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ad14 <vPortFree+0x94>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	43db      	mvns	r3, r3
 800acde:	401a      	ands	r2, r3
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ace4:	f7fe fe68 	bl	80099b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	4b0a      	ldr	r3, [pc, #40]	@ (800ad18 <vPortFree+0x98>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	18d2      	adds	r2, r2, r3
 800acf2:	4b09      	ldr	r3, [pc, #36]	@ (800ad18 <vPortFree+0x98>)
 800acf4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	0018      	movs	r0, r3
 800acfa:	f000 f871 	bl	800ade0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800acfe:	4b07      	ldr	r3, [pc, #28]	@ (800ad1c <vPortFree+0x9c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	4b05      	ldr	r3, [pc, #20]	@ (800ad1c <vPortFree+0x9c>)
 800ad06:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800ad08:	f7fe fe62 	bl	80099d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad0c:	46c0      	nop			@ (mov r8, r8)
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b004      	add	sp, #16
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	200024e8 	.word	0x200024e8
 800ad18:	200024d8 	.word	0x200024d8
 800ad1c:	200024e4 	.word	0x200024e4

0800ad20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad26:	23c0      	movs	r3, #192	@ 0xc0
 800ad28:	011b      	lsls	r3, r3, #4
 800ad2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ad2c:	4b26      	ldr	r3, [pc, #152]	@ (800adc8 <prvHeapInit+0xa8>)
 800ad2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2207      	movs	r2, #7
 800ad34:	4013      	ands	r3, r2
 800ad36:	d00c      	beq.n	800ad52 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3307      	adds	r3, #7
 800ad3c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2207      	movs	r2, #7
 800ad42:	4393      	bics	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	1ad2      	subs	r2, r2, r3
 800ad4c:	4b1e      	ldr	r3, [pc, #120]	@ (800adc8 <prvHeapInit+0xa8>)
 800ad4e:	18d3      	adds	r3, r2, r3
 800ad50:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ad56:	4b1d      	ldr	r3, [pc, #116]	@ (800adcc <prvHeapInit+0xac>)
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ad5c:	4b1b      	ldr	r3, [pc, #108]	@ (800adcc <prvHeapInit+0xac>)
 800ad5e:	2200      	movs	r2, #0
 800ad60:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	18d3      	adds	r3, r2, r3
 800ad68:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ad6a:	2208      	movs	r2, #8
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	1a9b      	subs	r3, r3, r2
 800ad70:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2207      	movs	r2, #7
 800ad76:	4393      	bics	r3, r2
 800ad78:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	4b14      	ldr	r3, [pc, #80]	@ (800add0 <prvHeapInit+0xb0>)
 800ad7e:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800ad80:	4b13      	ldr	r3, [pc, #76]	@ (800add0 <prvHeapInit+0xb0>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2200      	movs	r2, #0
 800ad86:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ad88:	4b11      	ldr	r3, [pc, #68]	@ (800add0 <prvHeapInit+0xb0>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	1ad2      	subs	r2, r2, r3
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ad9e:	4b0c      	ldr	r3, [pc, #48]	@ (800add0 <prvHeapInit+0xb0>)
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	4b0a      	ldr	r3, [pc, #40]	@ (800add4 <prvHeapInit+0xb4>)
 800adac:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	685a      	ldr	r2, [r3, #4]
 800adb2:	4b09      	ldr	r3, [pc, #36]	@ (800add8 <prvHeapInit+0xb8>)
 800adb4:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800adb6:	4b09      	ldr	r3, [pc, #36]	@ (800addc <prvHeapInit+0xbc>)
 800adb8:	2280      	movs	r2, #128	@ 0x80
 800adba:	0612      	lsls	r2, r2, #24
 800adbc:	601a      	str	r2, [r3, #0]
}
 800adbe:	46c0      	nop			@ (mov r8, r8)
 800adc0:	46bd      	mov	sp, r7
 800adc2:	b004      	add	sp, #16
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	46c0      	nop			@ (mov r8, r8)
 800adc8:	200018cc 	.word	0x200018cc
 800adcc:	200024cc 	.word	0x200024cc
 800add0:	200024d4 	.word	0x200024d4
 800add4:	200024dc 	.word	0x200024dc
 800add8:	200024d8 	.word	0x200024d8
 800addc:	200024e8 	.word	0x200024e8

0800ade0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ade8:	4b27      	ldr	r3, [pc, #156]	@ (800ae88 <prvInsertBlockIntoFreeList+0xa8>)
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e002      	b.n	800adf4 <prvInsertBlockIntoFreeList+0x14>
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60fb      	str	r3, [r7, #12]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d8f7      	bhi.n	800adee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	18d3      	adds	r3, r2, r3
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d108      	bne.n	800ae22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	685a      	ldr	r2, [r3, #4]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	18d2      	adds	r2, r2, r3
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	68ba      	ldr	r2, [r7, #8]
 800ae2c:	18d2      	adds	r2, r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d118      	bne.n	800ae68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	4b14      	ldr	r3, [pc, #80]	@ (800ae8c <prvInsertBlockIntoFreeList+0xac>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d00d      	beq.n	800ae5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	685a      	ldr	r2, [r3, #4]
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	18d2      	adds	r2, r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	e008      	b.n	800ae70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ae5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae8c <prvInsertBlockIntoFreeList+0xac>)
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	e003      	b.n	800ae70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d002      	beq.n	800ae7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	46bd      	mov	sp, r7
 800ae82:	b004      	add	sp, #16
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	46c0      	nop			@ (mov r8, r8)
 800ae88:	200024cc 	.word	0x200024cc
 800ae8c:	200024d4 	.word	0x200024d4

0800ae90 <memset>:
 800ae90:	0003      	movs	r3, r0
 800ae92:	1882      	adds	r2, r0, r2
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d100      	bne.n	800ae9a <memset+0xa>
 800ae98:	4770      	bx	lr
 800ae9a:	7019      	strb	r1, [r3, #0]
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	e7f9      	b.n	800ae94 <memset+0x4>

0800aea0 <_reclaim_reent>:
 800aea0:	4b2e      	ldr	r3, [pc, #184]	@ (800af5c <_reclaim_reent+0xbc>)
 800aea2:	b570      	push	{r4, r5, r6, lr}
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	0004      	movs	r4, r0
 800aea8:	4283      	cmp	r3, r0
 800aeaa:	d04f      	beq.n	800af4c <_reclaim_reent+0xac>
 800aeac:	69c3      	ldr	r3, [r0, #28]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d017      	beq.n	800aee2 <_reclaim_reent+0x42>
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00d      	beq.n	800aed4 <_reclaim_reent+0x34>
 800aeb8:	2500      	movs	r5, #0
 800aeba:	69e3      	ldr	r3, [r4, #28]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	5959      	ldr	r1, [r3, r5]
 800aec0:	2900      	cmp	r1, #0
 800aec2:	d144      	bne.n	800af4e <_reclaim_reent+0xae>
 800aec4:	3504      	adds	r5, #4
 800aec6:	2d80      	cmp	r5, #128	@ 0x80
 800aec8:	d1f7      	bne.n	800aeba <_reclaim_reent+0x1a>
 800aeca:	69e3      	ldr	r3, [r4, #28]
 800aecc:	0020      	movs	r0, r4
 800aece:	68d9      	ldr	r1, [r3, #12]
 800aed0:	f000 f876 	bl	800afc0 <_free_r>
 800aed4:	69e3      	ldr	r3, [r4, #28]
 800aed6:	6819      	ldr	r1, [r3, #0]
 800aed8:	2900      	cmp	r1, #0
 800aeda:	d002      	beq.n	800aee2 <_reclaim_reent+0x42>
 800aedc:	0020      	movs	r0, r4
 800aede:	f000 f86f 	bl	800afc0 <_free_r>
 800aee2:	6961      	ldr	r1, [r4, #20]
 800aee4:	2900      	cmp	r1, #0
 800aee6:	d002      	beq.n	800aeee <_reclaim_reent+0x4e>
 800aee8:	0020      	movs	r0, r4
 800aeea:	f000 f869 	bl	800afc0 <_free_r>
 800aeee:	69e1      	ldr	r1, [r4, #28]
 800aef0:	2900      	cmp	r1, #0
 800aef2:	d002      	beq.n	800aefa <_reclaim_reent+0x5a>
 800aef4:	0020      	movs	r0, r4
 800aef6:	f000 f863 	bl	800afc0 <_free_r>
 800aefa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aefc:	2900      	cmp	r1, #0
 800aefe:	d002      	beq.n	800af06 <_reclaim_reent+0x66>
 800af00:	0020      	movs	r0, r4
 800af02:	f000 f85d 	bl	800afc0 <_free_r>
 800af06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af08:	2900      	cmp	r1, #0
 800af0a:	d002      	beq.n	800af12 <_reclaim_reent+0x72>
 800af0c:	0020      	movs	r0, r4
 800af0e:	f000 f857 	bl	800afc0 <_free_r>
 800af12:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800af14:	2900      	cmp	r1, #0
 800af16:	d002      	beq.n	800af1e <_reclaim_reent+0x7e>
 800af18:	0020      	movs	r0, r4
 800af1a:	f000 f851 	bl	800afc0 <_free_r>
 800af1e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800af20:	2900      	cmp	r1, #0
 800af22:	d002      	beq.n	800af2a <_reclaim_reent+0x8a>
 800af24:	0020      	movs	r0, r4
 800af26:	f000 f84b 	bl	800afc0 <_free_r>
 800af2a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800af2c:	2900      	cmp	r1, #0
 800af2e:	d002      	beq.n	800af36 <_reclaim_reent+0x96>
 800af30:	0020      	movs	r0, r4
 800af32:	f000 f845 	bl	800afc0 <_free_r>
 800af36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800af38:	2900      	cmp	r1, #0
 800af3a:	d002      	beq.n	800af42 <_reclaim_reent+0xa2>
 800af3c:	0020      	movs	r0, r4
 800af3e:	f000 f83f 	bl	800afc0 <_free_r>
 800af42:	6a23      	ldr	r3, [r4, #32]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <_reclaim_reent+0xac>
 800af48:	0020      	movs	r0, r4
 800af4a:	4798      	blx	r3
 800af4c:	bd70      	pop	{r4, r5, r6, pc}
 800af4e:	680e      	ldr	r6, [r1, #0]
 800af50:	0020      	movs	r0, r4
 800af52:	f000 f835 	bl	800afc0 <_free_r>
 800af56:	0031      	movs	r1, r6
 800af58:	e7b2      	b.n	800aec0 <_reclaim_reent+0x20>
 800af5a:	46c0      	nop			@ (mov r8, r8)
 800af5c:	200000e4 	.word	0x200000e4

0800af60 <__libc_init_array>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	2600      	movs	r6, #0
 800af64:	4c0c      	ldr	r4, [pc, #48]	@ (800af98 <__libc_init_array+0x38>)
 800af66:	4d0d      	ldr	r5, [pc, #52]	@ (800af9c <__libc_init_array+0x3c>)
 800af68:	1b64      	subs	r4, r4, r5
 800af6a:	10a4      	asrs	r4, r4, #2
 800af6c:	42a6      	cmp	r6, r4
 800af6e:	d109      	bne.n	800af84 <__libc_init_array+0x24>
 800af70:	2600      	movs	r6, #0
 800af72:	f000 f87f 	bl	800b074 <_init>
 800af76:	4c0a      	ldr	r4, [pc, #40]	@ (800afa0 <__libc_init_array+0x40>)
 800af78:	4d0a      	ldr	r5, [pc, #40]	@ (800afa4 <__libc_init_array+0x44>)
 800af7a:	1b64      	subs	r4, r4, r5
 800af7c:	10a4      	asrs	r4, r4, #2
 800af7e:	42a6      	cmp	r6, r4
 800af80:	d105      	bne.n	800af8e <__libc_init_array+0x2e>
 800af82:	bd70      	pop	{r4, r5, r6, pc}
 800af84:	00b3      	lsls	r3, r6, #2
 800af86:	58eb      	ldr	r3, [r5, r3]
 800af88:	4798      	blx	r3
 800af8a:	3601      	adds	r6, #1
 800af8c:	e7ee      	b.n	800af6c <__libc_init_array+0xc>
 800af8e:	00b3      	lsls	r3, r6, #2
 800af90:	58eb      	ldr	r3, [r5, r3]
 800af92:	4798      	blx	r3
 800af94:	3601      	adds	r6, #1
 800af96:	e7f2      	b.n	800af7e <__libc_init_array+0x1e>
 800af98:	0800b2c4 	.word	0x0800b2c4
 800af9c:	0800b2c4 	.word	0x0800b2c4
 800afa0:	0800b2c8 	.word	0x0800b2c8
 800afa4:	0800b2c4 	.word	0x0800b2c4

0800afa8 <__retarget_lock_acquire_recursive>:
 800afa8:	4770      	bx	lr

0800afaa <__retarget_lock_release_recursive>:
 800afaa:	4770      	bx	lr

0800afac <memcpy>:
 800afac:	2300      	movs	r3, #0
 800afae:	b510      	push	{r4, lr}
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d100      	bne.n	800afb6 <memcpy+0xa>
 800afb4:	bd10      	pop	{r4, pc}
 800afb6:	5ccc      	ldrb	r4, [r1, r3]
 800afb8:	54c4      	strb	r4, [r0, r3]
 800afba:	3301      	adds	r3, #1
 800afbc:	e7f8      	b.n	800afb0 <memcpy+0x4>
	...

0800afc0 <_free_r>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	0005      	movs	r5, r0
 800afc4:	1e0c      	subs	r4, r1, #0
 800afc6:	d010      	beq.n	800afea <_free_r+0x2a>
 800afc8:	3c04      	subs	r4, #4
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	da00      	bge.n	800afd2 <_free_r+0x12>
 800afd0:	18e4      	adds	r4, r4, r3
 800afd2:	0028      	movs	r0, r5
 800afd4:	f000 f83e 	bl	800b054 <__malloc_lock>
 800afd8:	4a1d      	ldr	r2, [pc, #116]	@ (800b050 <_free_r+0x90>)
 800afda:	6813      	ldr	r3, [r2, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d105      	bne.n	800afec <_free_r+0x2c>
 800afe0:	6063      	str	r3, [r4, #4]
 800afe2:	6014      	str	r4, [r2, #0]
 800afe4:	0028      	movs	r0, r5
 800afe6:	f000 f83d 	bl	800b064 <__malloc_unlock>
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	42a3      	cmp	r3, r4
 800afee:	d908      	bls.n	800b002 <_free_r+0x42>
 800aff0:	6820      	ldr	r0, [r4, #0]
 800aff2:	1821      	adds	r1, r4, r0
 800aff4:	428b      	cmp	r3, r1
 800aff6:	d1f3      	bne.n	800afe0 <_free_r+0x20>
 800aff8:	6819      	ldr	r1, [r3, #0]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	1809      	adds	r1, r1, r0
 800affe:	6021      	str	r1, [r4, #0]
 800b000:	e7ee      	b.n	800afe0 <_free_r+0x20>
 800b002:	001a      	movs	r2, r3
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <_free_r+0x4e>
 800b00a:	42a3      	cmp	r3, r4
 800b00c:	d9f9      	bls.n	800b002 <_free_r+0x42>
 800b00e:	6811      	ldr	r1, [r2, #0]
 800b010:	1850      	adds	r0, r2, r1
 800b012:	42a0      	cmp	r0, r4
 800b014:	d10b      	bne.n	800b02e <_free_r+0x6e>
 800b016:	6820      	ldr	r0, [r4, #0]
 800b018:	1809      	adds	r1, r1, r0
 800b01a:	1850      	adds	r0, r2, r1
 800b01c:	6011      	str	r1, [r2, #0]
 800b01e:	4283      	cmp	r3, r0
 800b020:	d1e0      	bne.n	800afe4 <_free_r+0x24>
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	1841      	adds	r1, r0, r1
 800b028:	6011      	str	r1, [r2, #0]
 800b02a:	6053      	str	r3, [r2, #4]
 800b02c:	e7da      	b.n	800afe4 <_free_r+0x24>
 800b02e:	42a0      	cmp	r0, r4
 800b030:	d902      	bls.n	800b038 <_free_r+0x78>
 800b032:	230c      	movs	r3, #12
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	e7d5      	b.n	800afe4 <_free_r+0x24>
 800b038:	6820      	ldr	r0, [r4, #0]
 800b03a:	1821      	adds	r1, r4, r0
 800b03c:	428b      	cmp	r3, r1
 800b03e:	d103      	bne.n	800b048 <_free_r+0x88>
 800b040:	6819      	ldr	r1, [r3, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	1809      	adds	r1, r1, r0
 800b046:	6021      	str	r1, [r4, #0]
 800b048:	6063      	str	r3, [r4, #4]
 800b04a:	6054      	str	r4, [r2, #4]
 800b04c:	e7ca      	b.n	800afe4 <_free_r+0x24>
 800b04e:	46c0      	nop			@ (mov r8, r8)
 800b050:	20002628 	.word	0x20002628

0800b054 <__malloc_lock>:
 800b054:	b510      	push	{r4, lr}
 800b056:	4802      	ldr	r0, [pc, #8]	@ (800b060 <__malloc_lock+0xc>)
 800b058:	f7ff ffa6 	bl	800afa8 <__retarget_lock_acquire_recursive>
 800b05c:	bd10      	pop	{r4, pc}
 800b05e:	46c0      	nop			@ (mov r8, r8)
 800b060:	20002624 	.word	0x20002624

0800b064 <__malloc_unlock>:
 800b064:	b510      	push	{r4, lr}
 800b066:	4802      	ldr	r0, [pc, #8]	@ (800b070 <__malloc_unlock+0xc>)
 800b068:	f7ff ff9f 	bl	800afaa <__retarget_lock_release_recursive>
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	46c0      	nop			@ (mov r8, r8)
 800b070:	20002624 	.word	0x20002624

0800b074 <_init>:
 800b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b076:	46c0      	nop			@ (mov r8, r8)
 800b078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b07a:	bc08      	pop	{r3}
 800b07c:	469e      	mov	lr, r3
 800b07e:	4770      	bx	lr

0800b080 <_fini>:
 800b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b082:	46c0      	nop			@ (mov r8, r8)
 800b084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b086:	bc08      	pop	{r3}
 800b088:	469e      	mov	lr, r3
 800b08a:	4770      	bx	lr
